[{"title": "How does Ethereum work,\u00a0anyway?", "author_name": "Preethi Kasireddy", "link": "https://medium.com/@preethikasireddy/how-does-ethereum-work-anyway-22d1df506369?source=search_post---------0", "post_date": "Sep 27, 2017", "readtime": "33 min read", "upvotes": "48K", "content": "How does Ethereum work,\u00a0anyway?Preethi KasireddyBlockedUnblockFollowFollowingSep 27, 2017Source: r/ethereumIntroductionOdds are you\u2019ve heard about the Ethereum blockchain, whether or not you know what it is. It\u2019s been in the news a lot lately, including the cover of some major magazines, but reading those articles can be like gibberish if you don\u2019t have a foundation for what exactly Ethereum is. So what is it? In essence, a public database that keeps a permanent record of digital transactions. Importantly, this database doesn\u2019t require any central authority to maintain and secure it. Instead it operates as a \u201ctrustless\u201d transactional system\u200a\u2014\u200aa framework in which individuals can make peer-to-peer transactions without needing to trust a third party OR one another.Still confused? That\u2019s where this post comes in. My aim is to explain how Ethereum functions at a technical level, without complex math or scary-looking formulas. Even if you\u2019re not a programmer, I hope you\u2019ll walk away with at least better grasp of the tech. If some parts are too technical and difficult to grok, that\u2019s totally fine! There\u2019s really no need to understand every little detail. I recommend just focusing on understanding things at a broad level.\u00a0Many of the topics covered in this post are a breakdown of the concepts discussed in the yellow paper. I\u2019ve added my own explanations and diagrams to make understanding Ethereum easier. Those brave enough to take on the technical challenge can also read the Ethereum yellow paper.Let\u2019s get started!Blockchain definitionA blockchain is a \u201ccryptographically secure transactional singleton machine with shared-state.\u201d [1] That\u2019s a mouthful, isn\u2019t it? Let\u2019s break it down.\u201cCryptographically secure\u201d means that the creation of digital currency is secured by complex mathematical algorithms that are obscenely hard to break. Think of a firewall of sorts. They make it nearly impossible to cheat the system (e.g. create fake transactions, erase transactions, etc.)\u201cTransactional singleton machine\u201d means that there\u2019s a single canonical instance of the machine responsible for all the transactions being created in the system. In other words, there\u2019s a single global truth that everyone believes in.\u201cWith shared-state\u201d means that the state stored on this machine is shared and open to everyone.Ethereum implements this blockchain paradigm.The Ethereum blockchain paradigm explainedThe Ethereum blockchain is essentially a transaction-based state machine. In computer science, a state machine refers to something that will read a series of inputs and, based on those inputs, will transition to a new state.With Ethereum\u2019s state machine, we begin with a \u201cgenesis state.\u201d This is analogous to a blank slate, before any transactions have happened on the network. When transactions are executed, this genesis state transitions into some final state. At any point in time, this final state represents the current state of Ethereum.The state of Ethereum has millions of transactions. These transactions are grouped into \u201cblocks.\u201d A block contains a series of transactions, and each block is chained together with its previous block.To cause a transition from one state to the next, a transaction must be valid. For a transaction to be considered valid, it must go through a validation process known as mining. Mining is when a group of nodes (i.e. computers) expend their compute resources to create a block of valid transactions.Any node on the network that declares itself as a miner can attempt to create and validate a block. Lots of miners from around the world try to create and validate blocks at the same time. Each miner provides a mathematical \u201cproof\u201d when submitting a block to the blockchain, and this proof acts as a guarantee: if the proof exists, the block must be valid.For a block to be added to the main blockchain, the miner must prove it faster than any other competitor miner. The process of validating each block by having a miner provide a mathematical proof is known as a \u201cproof of work.\u201dA miner who validates a new block is rewarded with a certain amount of value for doing this work. What is that value? The Ethereum blockchain uses an intrinsic digital token called \u201cEther.\u201d Every time a miner proves a block, new Ether tokens are generated and awarded.You might wonder: what guarantees that everyone sticks to one chain of blocks? How can we be sure that there doesn\u2019t exist a subset of miners who will decide to create their own chain of blocks?Earlier, we defined a blockchain as a transactional singleton machine with shared-state. Using this definition, we can understand the correct current state is a single global truth, which everyone must accept. Having multiple states (or chains) would ruin the whole system, because it would be impossible to agree on which state was the correct one. If the chains were to diverge, you might own 10 coins on one chain, 20 on another, and 40 on another. In this scenario, there would be no way to determine which chain was the most \u201cvalid.\u201dWhenever multiple paths are generated, a \u201cfork\u201d occurs. We typically want to avoid forks, because they disrupt the system and force people to choose which chain they \u201cbelieve\u201d in.To determine which path is most valid and prevent multiple chains, Ethereum uses a mechanism called the \u201cGHOST protocol.\u201d\u201cGHOST\u201d = \u201cGreedy Heaviest Observed Subtree\u201dIn simple terms, the GHOST protocol says we must pick the path that has had the most computation done upon it. One way to determine that path is to use the block number of the most recent block (the \u201cleaf block\u201d), which represents the total number of blocks in the current path (not counting the genesis block). The higher the block number, the longer the path and the greater the mining effort that must have gone into arriving at the leaf. Using this reasoning allows us to agree on the canonical version of the current state.Now that you\u2019ve gotten the 10,000-foot overview of what a blockchain is, let\u2019s dive deeper into the main components that the Ethereum system is comprised of:accountsstategas and feestransactionsblockstransaction executionminingproof of workOne note before getting started: whenever I say \u201chash\u201d of X, I am referring to the KECCAK-256 hash, which Ethereum uses.AccountsThe global \u201cshared-state\u201d of Ethereum is comprised of many small objects (\u201caccounts\u201d) that are able to interact with one another through a message-passing framework. Each account has a state associated with it and a 20-byte address. An address in Ethereum is a 160-bit identifier that is used to identify any account.There are two types of accounts:Externally owned accounts, which are controlled by private keys and have no code associated with them.Contract accounts, which are controlled by their contract code and have code associated with them.Externally owned accounts vs. contract\u00a0accountsIt\u2019s important to understand a fundamental difference between externally owned accounts and contract accounts. An externally owned account can send messages to other externally owned accounts OR to other contract accounts by creating and signing a transaction using its private key. A message between two externally owned accounts is simply a value transfer. But a message from an externally owned account to a contract account activates the contract account\u2019s code, allowing it to perform various actions (e.g. transfer tokens, write to internal storage, mint new tokens, perform some calculation, create new contracts, etc.).Unlike externally owned accounts, contract accounts can\u2019t initiate new transactions on their own. Instead, contract accounts can only fire transactions in response to other transactions they have received (from an externally owned account or from another contract account). We\u2019ll learn more about contract-to-contract calls in the \u201cTransactions and Messages\u201d section.Therefore, any action that occurs on the Ethereum blockchain is always set in motion by transactions fired from externally controlled accounts.Account stateThe account state consists of four components, which are present regardless of the type of account:nonce: If the account is an externally owned account, this number represents the number of transactions sent from the account\u2019s address. If the account is a contract account, the nonce is the number of contracts created by the account.balance: The number of Wei owned by this address. There are 1e+18 Wei per Ether.storageRoot: A hash of the root node of a Merkle Patricia tree (we\u2019ll explain Merkle trees later on). This tree encodes the hash of the storage contents of this account, and is empty by default.codeHash: The hash of the EVM (Ethereum Virtual Machine\u200a\u2014\u200amore on this later) code of this account. For contract accounts, this is the code that gets hashed and stored as the codeHash. For externally owned accounts, the codeHash field is the hash of the empty string.World stateOkay, so we know that Ethereum\u2019s global state consists of a mapping between account addresses and the account states. This mapping is stored in a data structure known as a Merkle Patricia tree.A Merkle tree (or also referred as \u201cMerkle trie\u201d) is a type of binary tree composed of a set of nodes with:a large number of leaf nodes at the bottom of the tree that contain the underlying dataa set of intermediate nodes, where each node is the hash of its two child nodesa single root node, also formed from the hash of its two child node, representing the top of the treeThe data at the bottom of the tree is generated by splitting the data that we want to store into chunks, then splitting the chunks into buckets, and then taking the hash of each bucket and repeating the same process until the total number of hashes remaining becomes only one: the root hash.This tree is required to have a key for every value stored inside it. Beginning from the root node of the tree, the key should tell you which child node to follow to get to the corresponding value, which is stored in the leaf nodes. In Ethereum\u2019s case, the key/value mapping for the state tree is between addresses and their associated accounts, including the balance, nonce, codeHash, and storageRoot for each account (where the storageRoot is itself a tree).Source: Ethereum whitepaperThis same trie structure is used also to store transactions and receipts. More specifically, every block has a \u201cheader\u201d which stores the hash of the root node of three different Merkle trie structures, including:State trieTransactions trieReceipts trieThe ability to store all this information efficiently in Merkle tries is incredibly useful in Ethereum for what we call \u201clight clients\u201d or \u201clight nodes.\u201d Remember that a blockchain is maintained by a bunch of nodes. Broadly speaking, there are two types of nodes: full nodes and light nodes.A full archive node synchronizes the blockchain by downloading the full chain, from the genesis block to the current head block, executing all of the transactions contained within. Typically, miners store the full archive node, because they are required to do so for the mining process. It is also possible to download a full node without executing every transaction. Regardless, any full node contains the entire chain.But unless a node needs to execute every transaction or easily query historical data, there\u2019s really no need to store the entire chain. This is where the concept of a light node comes in. Instead of downloading and storing the full chain and executing all of the transactions, light nodes download only the chain of headers, from the genesis block to the current head, without executing any transactions or retrieving any associated state. Because light nodes have access to block headers, which contain hashes of three tries, they can still easily generate and receive verifiable answers about transactions, events, balances, etc.The reason this works is because hashes in the Merkle tree propagate upward\u200a\u2014\u200aif a malicious user attempts to swap a fake transaction into the bottom of a Merkle tree, this change will cause a change in the hash of the node above, which will change the hash of the node above that, and so on, until it eventually changes the root of the tree.Any node that wants to verify a piece of data can use something called a \u201cMerkle proof\u201d to do so. A Merkle proof consists of:A chunk of data to be verified and its hashThe root hash of the treeThe \u201cbranch\u201d (all of the partner hashes going up along the path from the chunk to the root)Anyone reading the proof can verify that the hashing for that branch is consistent all the way up the tree, and therefore that the given chunk is actually at that position in the tree.In summary, the benefit of using a Merkle Patricia tree is that the root node of this structure is cryptographically dependent on the data stored in the tree, and so the hash of the root node can be used as a secure identity for this data. Since the block header includes the root hash of the state, transactions, and receipts trees, any node can validate a small part of state of Ethereum without needing to store the entire state, which can be potentially unbounded in size.Gas and\u00a0paymentOne very important concept in Ethereum is the concept of fees. Every computation that occurs as a result of a transaction on the Ethereum network incurs a fee\u200a\u2014\u200athere\u2019s no free lunch! This fee is paid in a denomination called \u201cgas.\u201dGas is the unit used to measure the fees required for a particular computation. Gas price is the amount of Ether you are willing to spend on every unit of gas, and is measured in \u201cgwei.\u201d \u201cWei\u201d is the smallest unit of Ether, where 1\u2070\u00b9\u2078 Wei represents 1 Ether. One gwei is 1,000,000,000 Wei.With every transaction, a sender sets a gas limit and gas price. The product of gas price and gas limit represents the maximum amount of Wei that the sender is willing to pay for executing a transaction.For example, let\u2019s say the sender sets the gas limit to 50,000 and a gas price to 20 gwei. This implies that the sender is willing to spend at most 50,000 x 20 gwei = 1,000,000,000,000,000 Wei = 0.001 Ether to execute that transaction.Remember that the gas limit represents the maximum gas the sender is willing to spend money on. If they have enough Ether in their account balance to cover this maximum, they\u2019re good to go. The sender is refunded for any unused gas at the end of the transaction, exchanged at the original rate.In the case that the sender does not provide the necessary gas to execute the transaction, the transaction runs \u201cout of gas\u201d and is considered invalid. In this case, the transaction processing aborts and any state changes that occurred are reversed, such that we end up back at the state of Ethereum prior to the transaction. Additionally, a record of the transaction failing gets recorded, showing what transaction was attempted and where it failed. And since the machine already expended effort to run the calculations before running out of gas, logically, none of the gas is refunded to the sender.Where exactly does this gas money go? All the money spent on gas by the sender is sent to the \u201cbeneficiary\u201d address, which is typically the miner\u2019s address. Since miners are expending the effort to run computations and validate transactions, miners receive the gas fee as a reward.Typically, the higher the gas price the sender is willing to pay, the greater the value the miner derives from the transaction. Thus, the more likely miners will be to select it. In this way, miners are free to choose which transactions they want to validate or ignore. In order to guide senders on what gas price to set, miners have the option of advertising the minimum gas price for which they will execute transactions.There are fees for storage,\u00a0tooNot only is gas used to pay for computation steps, it is also used to pay for storage usage. The total fee for storage is proportional to the smallest multiple of 32 bytes used.Fees for storage have some nuanced aspects. For example, since increased storage increases the size of the Ethereum state database on all nodes, there\u2019s an incentive to keep the amount of data stored small. For this reason, if a transaction has a step that clears an entry in the storage, the fee for executing that operation of is waived, AND a refund is given for freeing up storage space.What\u2019s the purpose of\u00a0fees?One important aspect of the way the Ethereum works is that every single operation executed by the network is simultaneously effected by every full node. However, computational steps on the Ethereum Virtual Machine are very expensive. Therefore, Ethereum smart contracts are best used for simple tasks, like running simple business logic or verifying signatures and other cryptographic objects, rather than more complex uses, like file storage, email, or machine learning, which can put a strain on the network. Imposing fees prevents users from overtaxing the network.Ethereum is a Turing complete language. (In short, a Turing machine is a machine that can simulate any computer algorithm (for those not familiar with Turing machines, check out this and this). This allows for loops and makes Ethereum susceptible to the halting problem, a problem in which you cannot determine whether or not a program will run infinitely. If there were no fees, a malicious actor could easily try to disrupt the network by executing an infinite loop within a transaction, without any repercussions. Thus, fees protect the network from deliberate attacks.You might be thinking, \u201cwhy do we also have to pay for storage?\u201d Well, just like computation, storage on the Ethereum network is a cost that the entire network has to take the burden of.Transaction and\u00a0messagesWe noted earlier that Ethereum is a transaction-based state machine. In other words, transactions occurring between different accounts are what move the global state of Ethereum from one state to the next.In the most basic sense, a transaction is a cryptographically signed piece of instruction that is generated by an externally owned account, serialized, and then submitted to the blockchain.There are two types of transactions: message calls and contract creations (i.e. transactions that create new Ethereum contracts).\u00a0\u00a0\u00a0All transactions contain the following components, regardless of their type:nonce: a count of the number of transactions sent by the sender.gasPrice: the number of Wei that the sender is willing to pay per unit of gas required to execute the transaction.gasLimit: the maximum amount of gas that the sender is willing to pay for executing this transaction. This amount is set and paid upfront, before any computation is done.to: the address of the recipient. In a contract-creating transaction, the contract account address does not yet exist, and so an empty value is used.value: the amount of Wei to be transferred from the sender to the recipient. In a contract-creating transaction, this value serves as the starting balance within the newly created contract account.v, r, s: used to generate the signature that identifies the sender of the transaction.init (only exists for contract-creating transactions): An EVM code fragment that is used to initialize the new contract account. init is run only once, and then is discarded. When init is first run, it returns the body of the account code, which is the piece of code that is permanently associated with the contract account.data (optional field that only exists for message calls): the input data (i.e. parameters) of the message call. For example, if a smart contract serves as a domain registration service, a call to that contract might expect input fields such as the domain and IP address.We learned in the \u201cAccounts\u201d section that transactions\u200a\u2014\u200aboth message calls and contract-creating transactions\u200a\u2014\u200aare always initiated by externally owned accounts and submitted to the blockchain. Another way to think about it is that transactions are what bridge the external world to the internal state of Ethereum.But this doesn\u2019t mean that contracts can\u2019t talk to other contracts. Contracts that exist within the global scope of Ethereum\u2019s state can talk to other contracts within that same scope. The way they do this is via \u201cmessages\u201d or \u201cinternal transactions\u201d to other contracts. We can think of messages or internal transactions as being similar to transactions, with the major difference that they are NOT generated by externally owned accounts. Instead, they are generated by contracts. They are virtual objects that, unlike transactions, are not serialized and only exist in the Ethereum execution environment.When one contract sends an internal transaction to another contract, the associated code that exists on the recipient contract account is executed.One important thing to note is that internal transactions or messages don\u2019t contain a gasLimit. This is because the gas limit is determined by the external creator of the original transaction (i.e. some externally owned account). The gas limit that the externally owned account sets must be high enough to carry out the transaction, including any sub-executions that occur as a result of that transaction, such as contract-to-contract messages. If, in the chain of transactions and messages, a particular message execution runs out of gas, then that message\u2019s execution will revert, along with any subsequent messages triggered by the execution. However, the parent execution does not need to revert.BlocksAll transactions are grouped together into \u201cblocks.\u201d A blockchain contains a series of such blocks that are chained together.In Ethereum, a block consists of:the block headerinformation about the set of transactions included in that blocka set of other block headers for the current block\u2019s ommers.Ommers explainedWhat the heck is an \u201commer?\u201d An ommer is a block whose parent is equal to the current block\u2019s parent\u2019s parent. Let\u2019s take a quick dive into what ommers are used for and why a block contains the block headers for ommers.Because of the way Ethereum is built, block times are much lower (~15 seconds) than those of other blockchains, like Bitcoin (~10 minutes). This enables faster transaction processing. However, one of the downsides of shorter block times is that more competing block solutions are found by miners. These competing blocks are also referred to as \u201corphaned blocks\u201d (i.e. mined blocks do not make it into the main chain).The purpose of ommers is to help reward miners for including these orphaned blocks. The ommers that miners include must be \u201cvalid,\u201d meaning within the sixth generation or smaller of the present block. After six children, stale orphaned blocks can no longer be referenced (because including older transactions would complicate things a bit).Ommer blocks receive a smaller reward than a full block. Nonetheless, there\u2019s still some incentive for miners to include these orphaned blocks and reap a reward.Block headerLet\u2019s get back to blocks for a moment. We mentioned previously that every block has a block \u201cheader,\u201d but what exactly is this?\u00a0\u00a0\u00a0A block header is a portion of the block consisting of:parentHash: a hash of the parent block\u2019s header (this is what makes the block set a \u201cchain\u201d)ommersHash: a hash of the current block\u2019s list of ommersbeneficiary: the account address that receives the fees for mining this blockstateRoot: the hash of the root node of the state trie (recall how we learned that the state trie is stored in the header and makes it easy for light clients to verify anything about the state)transactionsRoot: the hash of the root node of the trie that contains all transactions listed in this blockreceiptsRoot: the hash of the root node of the trie that contains the receipts of all transactions listed in this blocklogsBloom: a Bloom filter (data structure) that consists of log informationdifficulty: the difficulty level of this blocknumber: the count of current block (the genesis block has a block number of zero; the block number increases by 1 for each each subsequent block)gasLimit: the current gas limit per blockgasUsed: the sum of the total gas used by transactions in this blocktimestamp: the unix timestamp of this block\u2019s inceptionextraData: extra data related to this blockmixHash: a hash that, when combined with the nonce, proves that this block has carried out enough computationnonce: a hash that, when combined with the mixHash, proves that this block has carried out enough computationNotice how every block header contains three trie structures for:state (stateRoot)transactions (transactionsRoot)receipts (receiptsRoot)These trie structures are nothing but the Merkle Patricia tries we discussed earlier.Additionally, there are a few terms from the above description that are worth clarifying. Let\u2019s take a look.LogsEthereum allows for logs to make it possible to track various transactions and messages. A contract can explicitly generate a log by defining \u201cevents\u201d that it wants to log.A log entry contains:the logger\u2019s account address,a series of topics that represent various events carried out by this transaction, andany data associated with these events.Logs are stored in a bloom filter, which stores the endless log data in an efficient manner.Transaction receiptLogs stored in the header come from the log information contained in the transaction receipt. Just as you receive a receipt when you buy something at a store, Ethereum generates a receipt for every transaction. Like you\u2019d expect, each receipt contains certain information about the transaction. This receipt includes items like:the block numberblock hashtransaction hashgas used by the current transactioncumulative gas used in the current block after the current transaction has executedlogs created when executing the current transaction..and so onBlock difficultyThe \u201cdifficulty\u201d of a block is used to enforce consistency in the time it takes to validate blocks. The genesis block has a difficulty of 131,072, and a special formula is used to calculate the difficulty of every block thereafter. If a certain block is validated more quickly than the previous block, the Ethereum protocol increases that block\u2019s difficulty.The difficulty of the block affects the nonce, which is a hash that must be calculated when mining a block, using the proof-of-work algorithm.The relationship between the block\u2019s difficulty and nonce is mathematically formalized as:where Hd is the difficulty.The only way to find a nonce that meets a difficulty threshold is to use the proof-of-work algorithm to enumerate all of the possibilities. The expected time to find a solution is proportional to the difficulty\u200a\u2014\u200athe higher the difficulty, the harder it becomes to find the nonce, and so the harder it is to validate the block, which in turn increases the time it takes to validate a new block. So, by adjusting the difficulty of a block, the protocol can adjust how long it takes to validate a block.If, on the other hand, validation time is getting slower, the protocol decreases the difficulty. In this way, the validation time self-adjusts to maintain a constant rate\u200a\u2014\u200aon average, one block every 15 seconds.Transaction ExecutionWe\u2019ve come to one of the most complex parts of the Ethereum protocol: the execution of a transaction. Say you send a transaction off into the Ethereum network to be processed. What happens to transition the state of Ethereum to include your transaction?First, all transactions must meet an initial set of requirements in order to be executed. These include:The transaction must be a properly formatted RLP. \u201cRLP\u201d stands for \u201cRecursive Length Prefix\u201d and is a data format used to encode nested arrays of binary data. RLP is the format Ethereum uses to serialize objects.Valid transaction signature.Valid transaction nonce. Recall that the nonce of an account is the count of transactions sent from that account. To be valid, a transaction nonce must be equal to the sender account\u2019s nonce.The transaction\u2019s gas limit must be equal to or greater than the intrinsic gas used by the transaction. The intrinsic gas includes:a predefined cost of 21,000 gas for executing the transactiona gas fee for data sent with the transaction (4 gas for every byte of data or code that equals zero, and 68 gas for every non-zero byte of data or code)if the transaction is a contract-creating transaction, an additional 32,000 gasThe sender\u2019s account balance must have enough Ether to cover the \u201cupfront\u201d gas costs that the sender must pay. The calculation for the upfront gas cost is simple: First, the transaction\u2019s gas limit is multiplied by the transaction\u2019s gas price to determine the maximum gas cost. Then, this maximum cost is added to the total value being transferred from the sender to the recipient.If the transaction meets all of the above requirements for validity, then we move onto the next step.First, we deduct the upfront cost of execution from the sender\u2019s balance, and increase the nonce of the sender\u2019s account by 1 to account for the current transaction. At this point, we can calculate the gas remaining as the total gas limit for the transaction minus the intrinsic gas used.Next, the transaction starts executing. Throughout the execution of a transaction, Ethereum keeps track of the \u201csubstate.\u201d This substate is a way to record information accrued during the transaction that will be needed immediately after the transaction completes. Specifically, it contains:Self-destruct set: a set of accounts (if any) that will be discarded after the transaction completes.Log series: archived and indexable checkpoints of the virtual machine\u2019s code execution.Refund balance: the amount to be refunded to the sender account after the transaction. Remember how we mentioned that storage in Ethereum costs money, and that a sender is refunded for clearing up storage? Ethereum keeps track of this using a refund counter. The refund counter starts at zero and increments every time the contract deletes something in storage.Next, the various computations required by the transaction are processed.Once all the steps required by the transaction have been processed, and assuming there is no invalid state, the state is finalized by determining the amount of unused gas to be refunded to the sender. In addition to the unused gas, the sender is also refunded some allowance from the \u201crefund balance\u201d that we described above.Once the sender is refunded:the Ether for the gas is given to the minerthe gas used by the transaction is added to the block gas counter (which keeps track of the total gas used by all transactions in the block, and is useful when validating a block)all accounts in the self-destruct set (if any) are deletedFinally, we\u2019re left with the new state and a set of the logs created by the transaction.Now that we\u2019ve covered the basics of transaction execution, let\u2019s look at some of the differences between contract-creating transactions and message calls.Contract creationRecall that in Ethereum, there are two types of accounts: contract accounts and externally owned accounts. When we say a transaction is \u201ccontract-creating,\u201d we mean that the purpose of the transaction is to create a new contract account.In order to create a new contract account, we first declare the address of the new account using a special formula. Then we initialize the new account by:Setting the nonce to zeroIf the sender sent some amount of Ether as value with the transaction, setting the account balance to that valueDeducting the value added to this new account\u2019s balance from the sender\u2019s balanceSetting the storage as emptySetting the contract\u2019s codeHash as the hash of an empty stringOnce we initialize the account, we can actually create the account, using the init code sent with the transaction (see the \u201cTransaction and messages\u201d section for a refresher on the init code). What happens during the execution of this init code is varied. Depending on the constructor of the contract, it might update the account\u2019s storage, create other contract accounts, make other message calls, etc.As the code to initialize a contract is executed, it uses gas. The transaction is not allowed to use up more gas than the remaining gas. If it does, the execution will hit an out-of-gas (OOG) exception and exit. If the transaction exits due to an out-of-gas exception, then the state is reverted to the point immediately prior to transaction. The sender is not refunded the gas that was spent before running out.Boo hoo.However, if the sender sent any Ether value with the transaction, the Ether value will be refunded even if the contract creation fails. Phew!If the initialization code executes successfully, a final contract-creation cost is paid. This is a storage cost, and is proportional to the size of the created contract\u2019s code (again, no free lunch!) If there\u2019s not enough gas remaining to pay this final cost, then the transaction again declares an out-of-gas exception and aborts.If all goes well and we make it this far without exceptions, then any remaining unused gas is refunded to the original sender of the transaction, and the altered state is now allowed to persist!Hooray!Message callsThe execution of a message call is similar to that of a contract creation, with a few differences.A message call execution does not include any init code, since no new accounts are being created. However, it can contain input data, if this data was provided by the transaction sender. Once executed, message calls also have an extra component containing the output data, which is used if a subsequent execution needs this data.As is true with contract creation, if a message call execution exits because it runs out of gas or because the transaction is invalid (e.g. stack overflow, invalid jump destination, or invalid instruction), none of the gas used is refunded to the original caller. Instead, all of the remaining unused gas is consumed, and the state is reset to the point immediately prior to balance transfer.Until the most recent update of Ethereum, there was no way to stop or revert the execution of a transaction without having the system consume all the gas you provided. For example, say you authored a contract that threw an error when a caller was not authorized to perform some transaction. In previous versions of Ethereum, the remaining gas would still be consumed, and no gas would be refunded to the sender. But the Byzantium update includes a new \u201crevert\u201d code that allows a contract to stop execution and revert state changes, without consuming the remaining gas, and with the ability to return a reason for the failed transaction. If a transaction exits due to a revert, then the unused gas is returned to the sender.Execution modelSo far, we\u2019ve learned about the series of steps that have to happen for a transaction to execute from start to finish. Now, we\u2019ll look at how the transaction actually executes within the VM.The part of the protocol that actually handles processing the transactions is Ethereum\u2019s own virtual machine, known as the Ethereum Virtual Machine (EVM).The EVM is a Turing complete virtual machine, as defined earlier. The only limitation the EVM has that a typical Turing complete machine does not is that the EVM is intrinsically bound by gas. Thus, the total amount of computation that can be done is intrinsically limited by the amount of gas provided.Source: CMUMoreover, the EVM has a stack-based architecture. A stack machine is a computer that uses a last-in, first-out stack to hold temporary values.The size of each stack item in the EVM is 256-bit, and the stack has a maximum size of 1024.The EVM has memory, where items are stored as word-addressed byte arrays. Memory is volatile, meaning it is not permanent.The EVM also has storage. Unlike memory, storage is non-volatile and is maintained as part of the system state. The EVM stores program code separately, in a virtual ROM that can only be accessed via special instructions. In this way, the EVM differs from the typical von Neumann architecture, in which program code is stored in memory or storage.The EVM also has its own language: \u201cEVM bytecode.\u201d When a programmer like you or me writes smart contracts that operate on Ethereum, we typically write code in a higher-level language such as Solidity. We can then compile that down to EVM bytecode that the EVM can understand.Okay, now on to execution.Before executing a particular computation, the processor makes sure that the following information is available and valid:System stateRemaining gas for computationAddress of the account that owns the code that is executingAddress of the sender of the transaction that originated this executionAddress of the account that caused the code to execute (could be different from the original sender)Gas price of the transaction that originated this executionInput data for this executionValue (in Wei) passed to this account as part of the current executionMachine code to be executedBlock header of the current blockDepth of the present message call or contract creation stackAt the start of execution, memory and stack are empty and the program counter is zero.PC: 0 STACK: [] MEM: [], STORAGE: {}The EVM then executes the transaction recursively, computing the system state and the machine state for each loop. The system state is simply Ethereum\u2019s global state. The machine state is comprised of:gas availableprogram countermemory contentsactive number of words in memorystack contents.Stack items are added or removed from the leftmost portion of the series.On each cycle, the appropriate gas amount is reduced from the remaining gas, and the program counter increments.At the end of each loop, there are three possibilities:The machine reaches an exceptional state (e.g. insufficient gas, invalid instructions, insufficient stack items, stack items would overflow above 1024, invalid JUMP/JUMPI destination, etc.) and so must be halted, with any changes discardedThe sequence continues to process into the next loopThe machine reaches a controlled halt (the end of the execution process)Assuming the execution doesn\u2019t hit an exceptional state and reaches a \u201ccontrolled\u201d or normal halt, the machine generates the resultant state, the remaining gas after this execution, the accrued substate, and the resultant output.Phew. We got through one of the most complex parts of Ethereum. Even if you didn\u2019t fully comprehend this part, that\u2019s okay. You don\u2019t really need to understand the nitty gritty execution details unless you\u2019re working at a very deep level.How a block gets finalizedFinally, let\u2019s look at how a block of many transactions gets finalized.When we say \u201cfinalized,\u201d it can mean two different things, depending on whether the block is new or existing. If it\u2019s a new block, we\u2019re referring to the process required for mining this block. If it\u2019s an existing block, then we\u2019re talking about the process of validating the block. In either case, there are four requirements for a block to be \u201cfinalized\u201d:\u00a01) Validate (or, if mining, determine) ommers\u00a0Each ommer block within the block header must be a valid header and be within the sixth generation of the present block.\u00a02) Validate (or, if mining, determine) transactionsThe gasUsed number on the block must be equal to the cumulative gas used by the transactions listed in the block. (Recall that when executing a transaction, we keep track of the block gas counter, which keeps track of the total gas used by all transactions in the block).\u00a03) Apply rewards (only if mining)The beneficiary address is awarded 5 Ether for mining the block. (Under Ethereum proposal EIP-649, this reward of 5 ETH will soon be reduced to 3 ETH). Additionally, for each ommer, the current block\u2019s beneficiary is awarded an additional 1/32 of the current block reward. Lastly, the beneficiary of the ommer block(s) also gets awarded a certain amount (there\u2019s a special formula for how this is calculated).\u00a0\u00a04) Verify (or, if mining, compute a valid) state and nonceEnsure that all transactions and resultant state changes are applied, and then define the new block as the state after the block reward has been applied to the final transaction\u2019s resultant state. Verification occurs by checking this final state against the state trie stored in the header.Mining proof of\u00a0workThe \u201cBlocks\u201d section briefly addressed the concept of block difficulty. The algorithm that gives meaning to block difficulty is called Proof of Work (PoW).Ethereum\u2019s proof-of-work algorithm is called \u201cEthash\u201d (previously known as Dagger-Hashimoto).The algorithm is formally defined as:where m is the mixHash, n is the nonce, Hn is the new block\u2019s header (excluding the nonce and mixHash components, which have to be computed), Hn is the nonce of the block header, and d is the DAG, which is a large data set.In the \u201cBlocks\u201d section, we talked about the various items that exist in a block header. Two of those components were called the mixHash and the nonce. As you may recall:mixHash is a hash that, when combined with the nonce, proves that this block has carried out enough computationnonce is a hash that, when combined with the mixHash, proves that this block has carried out enough computationThe PoW function is used to evaluate these two items.How exactly the mixHash and nonce are calculated using the PoW function is somewhat complex, and something we can delve deeper into in a separate post. But at a high level, it works like this:A \u201cseed\u201d is calculated for each block. This seed is different for every \u201cepoch,\u201d where each epoch is 30,000 blocks long. For the first epoch, the seed is the hash of a series of 32 bytes of zeros. For every subsequent epoch, it is the hash of the previous seed hash. Using this seed, a node can calculate a pseudo-random \u201ccache.\u201dThis cache is incredibly useful because it enables the concept of \u201clight nodes,\u201d which we discussed previously in this post. The purpose of light nodes is to afford certain nodes the ability to efficiently verify a transaction without the burden of storing the entire blockchain dataset. A light node can verify the validity of a transaction based solely on this cache, because the cache can regenerate the specific block it needs to verify.Using the cache, a node can generate the DAG \u201cdataset,\u201d where each item in the dataset depends on a small number of pseudo-randomly-selected items from the cache. In order to be a miner, you must generate this full dataset; all full clients and miners store this dataset, and the dataset grows linearly with time.Miners can then take random slices of the dataset and put them through a mathematical function to hash them together into a \u201cmixHash.\u201d A miner will repeatedly generate a mixHash until the output is below the desired target nonce. When the output meets this requirement, this nonce is considered valid and the block can be added to the chain.Mining as a security mechanism\u00a0Overall, the purpose of the PoW is to prove, in a cryptographically secure way, that a particular amount of computation has been expended to generate some output (i.e. the nonce). This is because there is no better way to find a nonce that is below the required threshold other than to enumerate all the possibilities. The outputs of repeatedly applying the hash function have a uniform distribution, and so we can be assured that, on average, the time needed to find such a nonce depends on the difficulty threshold. The higher the difficulty, the longer it takes to solve for the nonce. In this way, the PoW algorithm gives meaning to the concept of difficulty, which is used to enforce blockchain security.What do we mean by blockchain security? It\u2019s simple: we want to create a blockchain that EVERYONE trusts. As we discussed previously in this post, if more than one chain existed, users would lose trust, because they would be unable to reasonably determine which chain was the \u201cvalid\u201d chain. In order for a group of users to accept the underlying state that is stored on a blockchain, we need a single canonical blockchain that a group of people believes in.This is exactly what the PoW algorithm does: it ensures that a particular blockchain will remain canonical into the future, making it incredibly difficult for an attacker to create new blocks that overwrite a certain part of history (e.g. by erasing transactions or creating fake transactions) or maintain a fork. To have their block validated first, an attacker would need to consistently solve for the nonce faster than anyone else in the network, such that the network believes their chain is the heaviest chain (based on the principles of the GHOST protocol we mentioned earlier). This would be impossible unless the attacker had more than half of the network mining power, a scenario known as the majority 51% attack.Mining as a wealth distribution mechanismBeyond providing a secure blockchain, PoW is also a way to distribute wealth to those who expend their computation for providing this security. Recall that a miner receives a reward for mining a block, including:a static block reward of 5 ether for the \u201cwinning\u2019\u201d block (soon to be changed to 3 ether)the cost of gas expended within the block by the transactions included in the blockan extra reward for including ommers as part of the blockIn order to ensure that the use of the PoW consensus mechanism for security and wealth distribution is sustainable in the long run, Ethereum strives to instill these two properties:Make it accessible to as many people as possible. In other words, people shouldn\u2019t need specialized or uncommon hardware to run the algorithm. The purpose of this is to make the wealth distribution model as open as possible so that anyone can provide any amount of compute power in return for Ether.Reduce the possibility for any single node (or small set) to make a disproportionate amount of profit. Any node that can make a disproportionate amount of profit means that the node has a large influence on determining the canonical blockchain. This is troublesome because it reduces network security.In the Bitcoin blockchain network, one problem that arises in relation to the above two properties is that the PoW algorithm is a SHA256 hash function. The weakness with this type of function is that it can be solved much more efficiently using specialized hardware, also known as ASICs.In order to mitigate this issue, Ethereum has chosen to make its PoW algorithm (Ethhash) sequentially memory-hard. This means that the algorithm is engineered so that calculating the nonce requires a lot of memory AND bandwidth. The large memory requirements make it hard for a computer to use its memory in parallel to discover multiple nonces simultaneously, and the high bandwidth requirements make it difficult for even a super-fast computer to discover multiple nonce simultaneously. This reduces the risk of centralization and creates a more level playing field for the nodes that are doing the verification.One thing to note is that Ethereum is transitioning from a PoW consensus mechanism to something called \u201cproof-of-stake\u201d. This is a beastly topic of its own that we can hopefully explore in a future post. \u263a\ufe0fConclusion\u2026Phew! You made it to the end. I hope?There\u2019s a lot to digest in this post, I know. If it takes you multiple reads to fully understand what\u2019s going on, that\u2019s totally fine. I personally read the Ethereum yellow paper, white paper, and various parts of the code base many times before grokking what was going on.Nonetheless, I hope you found this overview helpful. If you find any errors or mistakes, I\u2019d love for you to write a private note or post it directly in the comments. I look at all of \u2019em, I promise\u00a0;)And remember, I\u2019m human (yep, it\u2019s true) and I make mistakes. I took the time to write this post for the benefit of the community, for free. So please be constructive in your feedback, without unnecessary bashing. \u263a\ufe0f", "responses": "311"}, {"title": "NEO versus Ethereum: Why NEO might be 2018\u2019s strongest cryptocurrency", "author_name": "Noam Levenson", "link": "https://hackernoon.com/neo-versus-ethereum-why-neo-might-be-2018s-strongest-cryptocurrency-79956138bea3?source=search_post---------1", "post_date": "Dec 6, 2017", "readtime": "25 min read", "upvotes": "91K", "content": "NEO versus Ethereum: Why NEO might be 2018\u2019s strongest cryptocurrencyNoam LevensonBlockedUnblockFollowFollowingDec 6, 2017NEO is a platform with a purpose. Can it compete with Ethereum? Or better yet, does it even need to?Why Read This\u00a0Article?NEO and Ethereum\u200a\u2014\u200awhich pill will you take? Sorry, couldn\u2019t help myself. We care about this debate because we\u2019re investors. From a developer\u2019s perspective, functionality is the most important. There is no brand loyalty in blockchain yet. So if a platform can do something better than its competitors, it will win over developers. So which one does it better?This article is long because I have chewed through all the information I could find about NEO and Ethereum and digested it for you. There are lots of articles summarizing the \u201cdifferences\u201d between Ethereum and NEO, but they do the debate little justice. They skim over things, don\u2019t explore them well, explore only one aspect, or aren\u2019t holistic in their analysis and don\u2019t explain why the differences even matter and what their relevance to the real world is. I was frustrated by the lack of a comprehensive article. This article is my response.I will admit that I explore NEO more in-depth than Ethereum. This is because so much information is widely available for Ethereum. With NEO, there is much less. As such, I focus on explaining NEO and then comparing that explanation to Ethereum\u2019s capability.So bear with me, grab yourself an espresso and lock yourself in that room you \u201cdo work in.\u201d This will be well worth your time. I also won\u2019t blame you if you just read the TLDR\u200a\u2014\u200aToo Lazy, Didn\u2019t Read\u200a\u2014\u200aunder the articles.Let\u2019s beginIf Ethereum is Goliath, NEO is David. If Ethereum is Brad Pitt, NEO is Brad Pitt\u2019s cousin, Zach Pitt\u2014younger, better dressed, and more talented\u200a\u2014\u200abut right now relegated to serving cocktails to Brad and his friends while he acts on the side. Ethereum did it first. It was revolutionary and exciting and took the crypto world by storm. Web 3.0. Today almost every ICO is built on Ethereum\u2019s ERC20 token platform and Vitalik Buterin is one of our time\u2019s greatest minds. Yet if we\u2019ve learned anything from the fact that Alibaba is closing in on Amazon\u2019s market cap and WeChat dominates China\u2019s social media scene, it\u2019s that China plays by their own rules. The Land of the Red Dragon uses their own technology, their own networks, and cares little for what the U.S. is doing. The question is, can NEO compete with Ethereum, and does it even need to?Ultimately, NEO and Ethereum are aiming for similar roles in the crypto community. Both want to be platforms for the new internet: for DApps (Decentralized Applications), ICOs (Initial Coin Offerings), and smart contracts.Overview of Ethereum and\u00a0NeoWhile both NEO and Ethereum have generalized blockchains that provide a toolbox for would be developers, their objectives differ. I would summarize each platform\u2019s objectives as such:Ethereum\u2019s goal is to create a platform for the development of DApps in order to create a \u201cmore globally accessible, more free, and more trustworthy Internet:\u201d an internet 3.0.NEO is a blockchain project \u201cthat utilizes blockchain technology and digital identity to digitize assets, to automate the management of digital assets using smart contracts, and to realize a \u201csmart economy\u201d with a distributed network.\u201dThat\u2019s a mouthful. Let\u2019s breakdown these objectives to fully understand the projects. It\u2019s important to understand that both platforms share many of the same capabilities, but the distinction in their branded objectives is very important.Ethereum: Ethereum\u2019s goal is to be the platform for DApps and they are largely accomplishing this. They own the DApp market right now. Their roadmap is all about giving users and developers more control and more options in developing their applications.NEO: NEO is working towards developing a product for the future. It not only rebranded from Antshares to NEO in June of 2017, but they refocused their marketing as well\u200a\u2014\u200awith enormous success. Neo\u2019s objective, while ultimately utilizing many of the same technologies as Ethereum, is to be the platform for a new smart economy.In short: Ethereum is developing in response to new demands. NEO is developing their platform in anticipation of future demands.What is a Smart\u00a0Economy?The biggest difference between NEO and Ethereum is NEO\u2019s focus on a smart economy. If we want to fully understand NEO, we need to understand why this distinction is important.A smart economy will feature digitized physical assets. All of these newly digitized assets will have proof of ownership in the blockchain. These assets can be sold, traded, and leveraged through smart contracts. Their ownership can be protected and validated through the decentralized model of the blockchain. We\u2019ve already seen iterations of this: from proposed supply chain overhaul to DAOs (decentralized autonomous organizations\u200a\u2014\u200aessentially decentralized companies without a leader). I offered some real world examples of this economy in this article. Now while Ethereum will likely support many of the same capabilities that NEO has, the distinction between Ethereum and NEO\u2019s objectives is what we care about.The distinction is important because a smart economy will still be under a government and under governmental regulation. I don\u2019t trust the government as much as your next libertarian; I\u2019ve read 1984 too many times. But the fact remains that governments aren\u2019t going anywhere. Thus, for a platform to service this \u201csmart economy,\u201d that platform needs to put specific thought and intention into how it will accommodate governmental regulation. So while Ethereum might offer the similar blockchain capabilities, the fact that NEO is developing FOR THIS PURPOSE is crucial.TLDR: A smart economy is in our future. To accommodate the needs of this smart economy, the platform will need to be specifically designed for this new economy.What is NEO doing to prepare itself for the smart\u00a0economy?NEO places particular emphasis on staying regulatory compliant.To do this, they need:Governments don\u2019t love these\u00a0guysDigital IdentityAnonymity is great. I think privacy should be at the forefront of today\u2019s technological developments and discussions. But if companies and governments are operating on the blockchain, digitizing their assets, and issuing smart contracts, all under the watchful eye of the government, they can\u2019t have anonymity. For a platform to be regulatory compliant, digital identity\u200a\u2014\u200aa verifiable identity in digital form\u200a\u2014\u200ais a necessary evil.Today, digital identity is based on a system called the PKI (Public Key Infrastructure) X.509 standard. This probably means about as much as it does to you as it does to me. It just means that there is an international agreed upon standard for what constitutes a digital identity. NEO\u2019s plan is to issue digital identities in accordance to this standard and then secure them using the blockchain. Bookkeepers (read about them later) will have digital identities and real names. Because of this, judicial action can be taken against them if ever need be. This is imperative when registering financial assets on the network and staying regulatory compliant.There could also be businesses and projects that will only transact with people who have a digital identity, for regulatory reasons. NEO enables that possibility.NEO is already working in a strategic partnership with THEKEY\u200a\u2014\u200aa project being developed on NEO\u2019s platform that will assist with providing digital identification.What about Ethereum: Ethereum requires other DApps to develop digital identities which can then be secured on the Ethereum blockchain. This isn\u2019t so unlike how it will work with NEO\u200a\u2014\u200ahowever NEO has made it clear, through its plan to incorporate digital identity with its bookkeeper nodes, that integration of digital identity is of central importance to the NEO ecosystem.TLDR: Governments don\u2019t like anonymity. Industries don\u2019t like pissing off the government. If NEO wants industrial adoption, it needs to have digital identities.Digital AssetsA future digital\u00a0asset?If you want a smart economy based on smart contracts, you need to be able to leverage and exchange assets beyond currency. We need to be able to digitize assets like house, property, and car ownership; gold, diamonds, and other precious elements; computers, clothes, and food; even those baseball cards your mom keeps begging you to throw away. Smart contracts become so much more powerful when we have the ability to digitize all of these assets.What about Ethereum: Very similar to the digital identity blurb. Ethereum absolutely can secure digital assets, but they won\u2019t necessarily be regulatory compliant. NEO is ensuring that issued digital asset certificates will be compliant.TDLR: Just read itNEO\u2019s complex\u00a0networkThe economy is complex; it has so many interconnected pieces. NEO\u2019s platform is complex, with partnerships galore. Fully researching and understanding this is difficult. But I did it, so you don\u2019t have to! Refer back to this visual to have a solid picture of how this network interacts.Even though this looks like the deranged drawings of a conspiracist, it will make sense as you reference it while learning about NEO\u2019s\u00a0networkOnChainNEO\u2019s founders Da HongFei and Erik Zhang founded a company called OnChain. Understanding OnChain is critical to understanding NEO. They\u2019re not the same company, but their interests align and they have a partnership together. OnChain\u2019s system, known as DNA (Decentralized Network Architecture) aims to work with Chinese businesses and government. NEO acts as the foundation of DNA. If OnChain can integrate with Chinese businesses and government, that will greatly spur adoption of NEO.Ultimately, DNA develops public and private blockchains for businesses. These blockchains then link up to NEO to join the decentralized economy. Businesses then have all the benefits of both private and public blockchains. Think of NEO as providing the public blockchains and OnChain\u2019s DNA providing the private blockchains. Then, they can link up and get the best of both worlds.OnChain also has several projects and partnerships and newsworthy mentions that all contribute to the DNA ecosystem:Established in 2014, this is not a fresh-off-the-shelf companyFirst Chinese blockchain company to join Hyperledger\u200a\u2014\u200aa collaboration of projects that work towards integrating blockchain with established businesses.Legal Chain\u200a\u2014\u200aworks with Microsoft China in digitizing and securing signatures via blockchain technology.Strategic partner of Microsoft China on multiple projectsWorked with the Japanese Ministry of Economy, Trade and IndustryVoted as KPMG\u2019s top 50 Fintech Company in ChinaPartnership with Alibaba to provide an email certification service for Ali CloudInvestment from Fosun Group\u2014China\u2019s largest private conglomerate\u200a\u2014\u200ato integrate OnChain across their businesses.Collaboration with Chinese regional government\u200a\u2014\u200ausing OnChain to develop public services and digital identityOnChain\u2019s recent development was of the ICO Ontology. Ontology uses the same architecture as NEO but ultimately works with businesses in creating a private, encrypted data network. Essentially, this is important when we have information that we need securing, but we also need it to be private. This will enable people to bring this information in a secure manner to blockchains.References on OnChain\u2019s roadmapHonestly, I don\u2019t understand why NEO doesn\u2019t advertise their collaboration with OnChain more. NEO in itself is solid, offering several potential benefits over Ethereum. But combined with OnChain, NEO truly has the potential to implement itself as THE smart economy platform of the East.The Ethereum Comparison: Ethereum\u2019s equivalent is the Enterprise Ethereum Alliance, an open source blockchain initiative dedicated to linking Ethereum with the business world. Their list of partnerships is robust and impressive\u200a\u2014\u200ano surprise for those familiar with Ethereum. Included among their members are: BP, HP, Toyota, MasterCard, Microsoft, and Intel, among many others.TLDR: OnChain is a company partnered with NEO. They have extensive experience and many accolades in bringing blockchain to businesses. They work with companies and governments in the East. They are a huge component to NEO\u2019s potential.NEOX:NEOX is NEO\u2019s version of atomic swaps (directly swapping tokens without any exchange) and cross-chain integration. Think Ark Ecosystem. This will enable people to swap crypto assets and transact across different blockchains. It also allows smart contracts to interact across chains.NEOX is important because it allows collaboration between the blockchains (both private and public) created by OnChain and by NEO\u2019s public blockchain. As more components of the Smart Economy develop, NEOX will link them all together.Ethereum Comparison: Ethereum has the ability to do atomic swaps, but has only completed this once\u200a\u2014\u200athis isn\u2019t to put down Ethereum; NEO has never completed one. However, Ethereum will need an outside application to accommodate large scale cross-chain integration.Not quite the City of Zion we\u2019re talking\u00a0about\u2026City of\u00a0Zion:City of Zion (CoZ) is an independent, open source community of developers, translators, and designers who work towards the betterment of NEO. They have received funding from NEO to help incentivize project development. The community has contributed considerably to NEO. They have developed the NEON wallet, created a NEO block scanner, translated documents for NEO, and developed the NEX platform (see below). They recently received NEO funding to award $270,000 to 10 winners as part of their DApp competition. It is incredibly advantageous to have a network of support such as CoZ.Ethereum Comparison: There isn\u2019t really a good comparison for this on the Ethereum network.NEX:Nex is an upcoming ICO developed by City of Zion that offers a platform for the creation of payment solutions and decentralized exchanges on NEO. It links to NEO with NEOX.Because of differences with NEO in the token model, account balances, and way smart contract interact\u200a\u2014\u200ain comparison to Ethereum\u200a\u2014\u200aNEO needed a solution to be able to effectively house decentralized exchanges. NEX offers that solution.Ethereum Comparison: Already ERC20 tokens are easy to transact with on decentralized exchanges.ProjectICO:A turnkey, all-in-one ICO company that helps blockchain companies develop: from initial idea to ICO. They recently decided to move from Ethereum to NEO. They have an interesting Reddit AMA on their reasons for switching.Ethereum Comparison: TokenHub is a similar project developing on Ethereum.Microsoft China:NEO is currently hosting a developer competition in partnership with Microsoft China with $490,000 as prize money.Ethereum Comparison: Ethereum is incredibly well connected with established corporations. NEO is playing catchup.DApps and\u00a0ICOs:The bread and butter of platforms; until now, NEO has only had one ICO (Red Pulse) and one DApp (AdEx). However, with several planned in the near future and with an upgrade last month which will enable NEO smart contracts to interact with website interfaces, I think this is only the beginning for NEO.Ethereum Comparison: Ethereum hands down beats NEO in this area. Ethereum is the go-to platform for ICOs and DApps.Ecosystem RecapWe hopefully have a strong understanding of the differences in the goals of Ethereum and NEO, as well as a good overview of NEO\u2019s network and the network\u2019s advantages in the smart economy. It\u2019s important to understand this network for NEO because NEO is more than just a public blockchain, it is a piece in the larger picture. When NEO\u2019s public blockchain can link up with OnChain\u2019s private and business oriented blockchains and ultimately with all other DApps on it\u2019s platform, it could truly become a smart economy.The biggest differences between Ethereum and\u00a0NEOEthereum\u2019s energy consumption could power 1,025,438 American homes for a year.\u200a\u2014\u200aSource\u00a0\u2014ProtocolEthereum uses the same protocol as Bitcoin\u200a\u2014\u200aProof of Work (PoW). With Proof of Work, computers on the network compete to solve mathematical formulas and win the right to confirm transactions into the blockchain, and thus, secure the network. The two major drawbacks to the PoW protocol is the danger of a 51% attack and the massive energy consumption required for network security. For these reasons, I think that PoW will soon be an outdated system, as blockchain transitions to a new protocol called Proof of Stake (PoS).Proof of Stake works similarly to PoW except that instead of computers validating the network and receiving rewards equivalent to their relative computing power, PoS uses token holders. Those who hold tokens can \u201cstake\u201d their tokens (staking means to temporarily place the tokens in a locked smart contract\u200a\u2014\u200auntil staking is over) and in exchange, confirm transactions and receive rewards based on the relative number of tokens held. In PoW, if you operate 5% of the total computing power of the network, you can expect to get 5% of the block rewards. In PoS, if you own 5% of tokens, you can also expect to receive 5% of block rewards.PoS offers a solution to the issues plaguing PoW\u200a\u2014\u200amainly it takes virtually no energy to run PoS\u200a\u2014\u200awithout compromising the security. I would argue that it actually improves security. With Ethereum, and all other PoW protocols, the difficulty algorithm (how hard it is to solve the mathematical formula) must constantly be updated to account for better computer hardware and more powerful mining groups. With PoS there is no need to do this. With Ethereum, you could conceivably purchase enough computing hardware to achieve a 51% attack; even after comprising the network, you would still have all of that hardware and could potentially use it to attack other PoW platforms. With PoS, because you must stake your coins, any malicious behavior results in the loss of all staked coins. So if you bought 51% of all tokens, you would immediately lose your substantial investment. In addition, the costs of purchasing 51% of the network tokens are equal for everyone. The costs of obtaining 51% of computer power\u200a\u2014\u200adue to discounts for mass computer purchases and countries with extremely cheap electricity\u200a\u2014\u200aare not.Byzantine Fault Tolerance attempts to solve the Byzantine General\u2019s ProblemNEO uses a protocol called dBFT (Delegated Byzantine Fault Tolerance) sounds like a term you\u2019d see on your AP History Test. The simplest explanation of Byzantine Fault Tolerance is the issue with how to get everyone on the network to be honest and work together\u200a\u2014\u200abecause one bad apple could ruin everything. NEO\u2019s dBFT is a modification of the classic PoS protocol, with some significant advantages and one primary disadvantage.I imagine dBFT as working similar to how the U.S. Senate works (and if that analogy made you want to just give up on Neo entirely, I understand, but hold on\u2026keep reading). If every person in America\u200a\u2014\u200aall 323.1 million\u2014was allowed to directly participate in the governmental decision making process, it would be catastrophic. It would be brutally slow as millions competed for the microphone, all shouting their opinion and arguing with each other. Making decisions would also be agonizingly slow. So instead, everyone in the country gets a vote. And with this vote, they can elect their representatives, someone to speak for them. This system directly reflects NEO\u2019s governance. Instead of everyone participating in the validating process\u200a\u2014\u200awhich can be incredibly limiting in terms of transaction speed\u200a\u2014\u200athose who hold NEO tokens can vote for delegates. These delegates (called bookkeepers) maintain the network for everyone. Thus, NEO can run faster, more efficiently, and with quicker and more finite decisions, and you can stay home, drink Bud Light, and watch the Patriots game with your computer in sleep mode.Remember too that these bookkeepers will have their digital identity known, making NEO much more compliant with national regulations.The disadvantage with this system is a lack of decentralization. In its purest sense, instead of thousands of validators being scattered all across the world, governance is concentrated in a few dozen validators. The majority of these nodes are currently operated by the NEO team. However, as of Quarter 1, 2018, NEO will hold less than 2/3 and will continue to hold fewer as time progresses. Regardless, NEO will never be as decentralized as other pure PoS platforms.I would however argue that Ethereum is also not as decentralized as you might think. While the PoW protocol is decentralized, you can count the number of core developer\u2019s for Ethereum on one hand. In addition, while I trust Vitalik Buterin, he does have enormous power and influence over the direction of Ethereum.Ethereum will transition to a PoS protocol in the future. They already have begun the process and the mining difficulty of confirming new blocks will increase exponentially until it is impossible to mine anymore and everyone must transition to the PoS protocol. This will happen but it is likely more than a year out.TLDR: Ethereum uses a Proof of Work protocol and will evolve into Proof of Stake. NEO uses a Delegated Byzantine Fault Tolerance (dBFT) protocol which is a modification of the standard proof of stake protocol.Transaction Speed:Because NEO doesn\u2019t run on PoW and has a more streamlined PoS protocol, NEO can process transactions far more quickly than Ethereum. Now when we compare these, there are both theoretical and practical speeds. Theoretical transaction speeds are the absolute maximum speed mathematically possible for the network. For NEO, this number is 10,000tps (transactions/second). Ethereum can do 30tps. In practicality, because of real world inconsistencies and difficulties, NEO can do 1,000tps in comparison to Ethereum\u2019s 15tps. As protocols improve it is possible that both platforms will approach their theoretical speed.This is an enormous difference and a massive advantage for NEO. NEO\u2019s transaction speeds could conceivably accommodate the kind of smart economy they\u2019re envisioning; Ethereum\u2019s can not. Now in exchange for this speed, NEO is not as decentralized as Ethereum. In addition, it\u2019s important to recognize that Vitalik and Ethereum are well aware of this limitation. Solutions such as Raiden and sharding (two fascinating technologies but far beyond the scope of this article) are on the roadmap for Ethereum and could drastically improve Ethereum\u2019s transaction speed.TLDR: Ethereum can transact at 15tps with a maximum of 30tps. NEO can transact at 1,000tps with a maximum of 10,000tps. Ethereum has plans and solutions to scale to close this gap.Forking and\u00a0scaling:Ethereum forks to update its software, just like Bitcoin. I describe this here. Forks aren\u2019t necessarily bad, but they certainly can be. Look at Ethereum\u2019s DAO fork for an example of this. After millions were stolen from an Ethereum smart contract, Ethereum forked to refund the money to the original holders. Whether or not this decision was correct, it divided the community and Ethereum Classic was created alongside Ethereum.Forks happen because there is no finality in the consensus mechanism of Ethereum. Multiple chains in the blockchain can be created at once\u200a\u2014\u200aultimately, both are valid chains and can continued to be mined on. Forks happen constantly but are usually resolved when the chain with the most computer power is chosen as legitimate. With Ethereum, it\u2019s always recommended that when you place a transaction, you wait until a few blocks have been mined on top of yours before considering the transaction permanent.NEO has finality. This is because the bookkeepers must reach a 66% consensus for the transaction to be placed into the blockchain. Here is an analogy to understand this. Imagine a first grade class. Timmy asks how much chocolate milk costs. Cynthia has no concept of price (she\u2019s in first grade for God\u2019s sake) and shouts $15! A few students walk over to her in agreement. Bobby\u2019s a chocolate milk aficionado\u200a\u2014\u200ahe knows his milk. He says $1.25. Most of the room walks over to him. He has a majority. Now assuming Cynthia\u2019s group realizes their flaw and joins Bobby\u2019s group, then the group reaches consensus. But if Cynthia is having a particularly stubborn day, she could keep on with her decision\u200a\u2014\u200aa fork. It might not be the right answer, but she still has a valid answer. This is how Ethereum works.Only in Israel do they have chocolate milk in a\u00a0bag\u2026NEO works like this. Imagine the same scenario. Timmy again asks how much chocolate milk costs. First Cynthia speaks up: \u201c$15!\u201d A few murmur in support, but it\u2019s clearly not 66% of the class so her idea is discarded. Next Bobby says \u201c$1.25.\u201d 66% of the class support his claim and thus, his idea is final. With NEO, the bookkeepers each propose the correct state of the next block. When 66% of them support the proposition, the block is finalized.The implications of this are huge. Finality is incredibly important for the type of economy NEO hopes to support. The financial industry and other complicated, fast moving markets (stock markets for example), can\u2019t operate on a system without finality. They need to know that when their information is placed into the blockchain, it is there for good. They also need the assurance that their blockchain won\u2019t suddenly become irrelevant because of a fork.TLDR: Ethereum can fork; NEO can\u2019t\u200a\u2014\u200athis is important for adoption by our real world economy.Decoupling of GAS and\u00a0NEOThis may very well be NEO\u2019s most ingenious characteristic. The native token of Ethereum is ether. The gas needed to run the Ethereum network (execute contracts, conduct transactions, etc.) is actually just small units of ether. There is no separation between ether and gas.However, NEO decoupled itself from the token needed to run the network: GAS. The NEO token is like partial ownership of the NEO platform. NEO token holders are entitled to vote for bookkeepers. NEO\u2019s use as a share in the company rather than a token is furthered by the fact that NEO is non-divisible. NEO is not meant to be transacted with\u200a\u2014\u200athat\u2019s why there is GAS.GAS is used for all operations on the NEO network. Now when a company registers or changes assets on the NEO blockchain, they pay in GAS\u200a\u2014\u200athis GAS is then distributed to all NEO holders. Anyone can claim this GAS by just holding their NEO in a personal wallet. Such as this one: NEONBookkeepers are entitled to charge a transaction fee (in GAS) for general transactions on the blockchain that only they (the bookkeepers) receive. However, by decoupling NEO and GAS, there is an incentive to keep transaction fees low; here\u2019s why:High transaction fees, which only benefit the bookkeepers, will prevent people from wanting to register their assets on the blockchain. The less assets registered, the less rewards NEO holders will get. Thus, NEO holders are incentivized to vote in bookkeepers who will keep transaction fees low.\u201c Low transaction fees = more users = more assets registered = more GAS to NEO holders.\u201d\u200a\u2014\u200aMalcolm Lerider from his\u00a0article:Bookkeepers are primarily incentivized by their desire to secure the network. They use the network, benefit from it, and have money staked in NEO. Thus, it is advantageous for them to secure it.It is unclear how rewards will be divided amongst ether holders when Ethereum becomes Proof of Stake. However, it appears that only large Ethereum holders will be able to stake and receive rewards.The NEON Wallet with the \u201cclaim gas\u201d\u00a0buttonThe genius of the NEO token is that it allows users to passively acquire GAS in their wallet. No need to run the computer, keep the wallet open, or expend electricity. No need to \u201cstake\u201d your tokens\u200a\u2014\u200abookkeepers do this for you. You could even have your NEO in a paper wallet. GAS is collected when you physically push the \u201cclaim GAS\u201d button. This also ensures that the NEO network doesn\u2019t need to calculate the interest of NEO holders with every block, reducing traffic and simplifying the compound interest formulas. The delegated bookkeepers maintain the network; your investment gains interest. This would not be possible without two separate tokens.Both NEO and GAS are capped at 100 million tokens.TLDR: Ethereum has one token: ether. NEO has two: NEO and GAS. There are huge advantages to having two tokens when using a proof of stake protocol.SourceSmart Contract\u00a0LanguageThe biggest difference between Ethereum and NEO smart contracts is the coding language options available. With Ethereum, contracts must be written in solidity\u200a\u2014\u200aA coding language created specifically for Ethereum. NEO on the other hand supports a variety of different languages, including the most commonly known. NEO supports five programming languages with plans to support an additional five in the future.There are certainly advantages to crafting a particular language for a particular platform. Ethereum developers designed solidity for Ethereum. However, far fewer people know solidity. By supporting the most common coding languages, NEO has an advantage in facilitating adoption. Most programmers today would have to learn solidity before working with Ethereum whereas with NEO, their knowledge is already applicable. It\u2019s also possible that existing business platforms could be placed onto the NEO blockchain without much modification.TLDR (seriously? It\u2019s like two paragraphs): Ethereum has one coding language: Solidity. NEO supports many different coding languages.Smart Contract ExecutionSmart contracts use what are called virtual machines (VM). Essentially, in layman\u2019s terms, virtual machines are machines that execute smart contracts and run inside the computers of miners or other validators. The VM is the environment that the smart contract runs in. Thus, if we want to know how efficient and effective smart contracts can be, we need to analyze the VM.NEO\u2019s VM optimizes smart contract code before executing the contract. What this means is that it takes the code and reorganizes it to make it more efficient. Imagine your mom gives you a grocery list. If it\u2019s anything like my mom\u2019s lists\u200a\u2014\u200aand she will probably object to this\u200a\u2014\u200athe items have no organization and I am constantly ping-ponging back and forth across the grocery store. But by organizing all the items into categories that I can then pick up together at the same part of the store (dairy, canned goods, cereals), my job becomes much quicker and easier. NEO does this; Ethereum does not. Now while this makes things much easier in the long run, in the initial phase it takes a bit longer to organize the list. NEO\u2019s contract execution takes slightly longer than Ethereum\u2019s, but is much more efficient in the long run.Ethereum plans to roll out this mechanism, but there is no timeline for it. Ultimately, this allows NEO to execute and run complex smart contracts faster and more efficiently than Ethereum.TLDR: NEO has a more efficient and faster way of executing smart contracts than Ethereum.Additional Important DifferencesNEO is theoretically quantum computer resistant, Ethereum is not\u200a\u2014\u200aWhen quantum computers develop enough, blockchains could be vulnerable. NEO has theoretically designed their blockchain to account for this. Ethereum does not have that capability.sk-Snarks: Ethereum\u2019s new privacy tool. sk-Snarks is the privacy protocol of ZCash. While there are far smarter people who can explain the technology far more intelligently than me, essentially sk-Snarks is important when we want to have data or contracts whose contents are private or confidential. We need to maintain the privacy of the data, but at the same time, prove we have ownership of it. sk-Snarks allows users to prove they have ownership without actually giving up the private data. NEO has no such capabilities. However, NEO\u2019s partnership with OnChain\u2019s Ontology offers NEO a privacy solution for businesses.", "responses": "155"}, {"title": "A hacker stole $31M of Ether\u200a\u2014\u200ahow it happened, and what it means for\u00a0Ethereum", "author_name": "Haseeb Qureshi", "link": "https://medium.freecodecamp.org/a-hacker-stole-31m-of-ether-how-it-happened-and-what-it-means-for-ethereum-9e5dc29e33ce?source=search_post---------2", "post_date": "Jul 20, 2017", "readtime": "16 min read", "upvotes": "9.7K", "content": "A hacker stole $31M of Ether\u200a\u2014\u200ahow it happened, and what it means for\u00a0EthereumHaseeb QureshiBlockedUnblockFollowFollowingJul 20, 2017Yesterday, a hacker pulled off the second biggest heist in the history of digital currencies.Around 12:00 PST, an unknown attacker exploited a critical flaw in the Parity multi-signature wallet on the Ethereum network, draining three massive wallets of over $31,000,000 worth of Ether in a matter of minutes. Given a couple more hours, the hacker could\u2019ve made off with over $180,000,000 from vulnerable wallets.But someone stopped them.Having sounded the alarm bells, a group of benevolent white-hat hackers from the Ethereum community rapidly organized. They analyzed the attack and realized that there was no way to reverse the thefts, yet many more wallets were vulnerable. Time was of the essence, so they saw only one available option: hack the remaining wallets before the attacker did.By exploiting the same vulnerability, the white-hats hacked all of the remaining at-risk wallets and drained their accounts, effectively preventing the attacker from reaching any of the remaining $150,000,000.Yes, you read that right.To prevent the hacker from robbing any more banks, the white-hats wrote software to rob all of the remaining banks in the world. Once the money was safely stolen, they began the process of returning the funds to their respective account holders. The people who had their money saved by this heroic feat are now in the process of retrieving their funds.It\u2019s an extraordinary story, and it has significant implications for the world of cryptocurrencies.It\u2019s important to understand that this exploit was not a vulnerability in Ethereum or in Parity itself. Rather, it was a vulnerability in the default smart contract code that the Parity client gives the user for deploying multi-signature wallets.This is all pretty complicated, so to make the details of this clear for everyone, this post is broken into three parts:What exactly happened? An explanation of Ethereum, smart contracts, and multi-signature wallets.How did they do it? A technical explanation of the attack (specifically for programmers).What now? The attack\u2019s implications about the future and security of smart contracts.If you are familiar with Ethereum and the crypto world, you can skip to the second section.1. What exactly happened?There are three building blocks to this story: Ethereum, smart contracts, and digital wallets.Ethereum is a digital currency invented in 2013\u200a\u2014\u200aa full 4 years after the release of Bitcoin. It has since grown to be the second largest digital currency in the world by market cap\u200a\u2014\u200a$20 billion, compared to Bitcoin\u2019s $40 billion.Like all cryptocurrencies, Ethereum is a descendant of the Bitcoin protocol, and improves on Bitcoin\u2019s design. But don\u2019t be fooled: though it is a digital currency like Bitcoin, Ethereum is much more powerful.While Bitcoin uses its blockchain to implement a ledger of monetary transactions, Ethereum uses its blockchain to record state transitions in a gigantic distributed computer. Ethereum\u2019s corresponding digital currency, ether, is essentially a side effect of powering this massive computer.To put it another way, Ethereum is literally a computer that spans the entire world. Anyone who runs the Ethereum software on their computer is participating in the operations of this world-computer, the Ethereum Virtual Machine (EVM). Because the EVM was designed to be Turing-complete (ignoring gas limits), it can do almost anything that can be expressed in a computer program.Let me be emphatic: this is crazy stuff. The crypto world is ebullient about the potential of Ethereum, which has seen its value skyrocket in the last 6 months.The developer community has rallied behind it, and there\u2019s a lot of excitement about what can be built on top of the EVM\u200a\u2014\u200aand this brings us to smart contracts.Smart contracts are simply computer programs that run on the EVM. In many ways, they are like normal contracts, except they don\u2019t need lawyers or judges to interpret them. Instead, they are compiled to bytecode and interpreted unambiguously by the EVM. With these programs, you can (among other things) programmatically transfer digital currency based solely on the rules of the contract code.Of course, there are things normal contracts do that smart contracts can\u2019t\u200a\u2014\u200asmart contracts can\u2019t easily interact with things that aren\u2019t on the blockchain. But smart contracts can also do things that normal contracts can\u2019t, such as enforce a set of rules entirely through unbreakable cryptography.This leads us to the notion of wallets. In the world of digital currencies, wallets are how you store your assets. You gain access to your wallet using essentially a secret password, also known as your private key (simplified a bit).There are many different types of wallets that confer different security properties, such as withdrawal limits. One of the most popular types is the multi-signature wallet.In a multi-signature wallet, there are several private keys that can unlock the wallet, but just one key is not enough to unlock it. If your multi-signature wallet has 3 keys, for example, you can specify that at least 2 of the 3 keys must be provided to successfully unlock it.This means that if you, your father, and your mother are each signatories on this wallet, even if a criminal hacked your mother and stole her private key, they could still not access your funds. This leads to much stronger security guarantees, so multi-sigs are a standard in wallet security.This is the type of wallet the hacker attacked.So what went wrong? Did they break the private keys? Did they use a quantum computer, or some kind of cutting-edge factoring algorithm?Nope, all the cryptography was sound. The exploit was almost laughably simple: they found a programmer-introduced bug in the code that let them re-initialize the wallet, almost like restoring it to factory settings. Once they did that, they were free to set themselves as the new owners, and then walk out with everything.2. How did this\u00a0happen?What follows is a technical explanation of exactly what happened. If you\u2019re not a developer, feel free to skip to the next section, since this is going to be programming-heavy.Ethereum has a fairly unique programming model. On Ethereum, you write code by publishing contracts (which you can think of as objects), and transactions are executed by calling methods on these objects to mutate their state.In order to run code on Ethereum, you need to first deploy the contract (the deployment is itself a transaction), which costs a small amount of Ether. You then need to call methods on the contract to interact with it, which costs more Ether. As you can imagine, this incentivizes a programmer to optimize their code, both to minimize transactions and minimize computation costs.One way to reduce costs is to use libraries. By making your contract call out to a shared library that was deployed at a previous time, you don\u2019t have to re-deploy any shared code. In Ethereum, keeping your code DRY will directly save you money.The default multi-sig wallet in Parity did exactly this. It held a reference to a shared external library which contained wallet initialization logic. This shared library is referenced by the public key of the library contract.// FIELDSaddress constant _walletLibrary = 0xa657491c1e7f16adb39b9b60e87bbb8d93988bc3;The library is called in several places, via an EVM instruction called DELEGATECALL, which does the following: for whatever method that calls DELEGATECALL, it will call the same method on the contract you're delegating to, but using the context of the current contract. It's essentially like a super call, except without the inheritance part. (The equivalent in JavaScript would be OtherClass.functionName.apply(this, args).)Here\u2019s an example of this in their multi-sig wallet: the isOwner method just delegates to the shared wallet library's isOwner method, using the current contract's state:function isOwner(address _addr) constant returns (bool) {    return _walletLibrary.delegatecall(msg.data);}This is all innocent enough. The multi-sig wallet itself contained all of the right permission checks, and they were sure to rigorously enforce authorization on all sensitive actions related to the wallet\u2019s state.But they made one critical mistake.Solidity allows you to define a \u201cfallback method.\u201d This is the method that gets called when there\u2019s no method that matches a given method name. You define it by not giving it a name:function() {    // do stuff here for all unknown methods}The Parity team decided to let any unknown method that sent Ether to the contract just default to depositing the sent Ether.function() payable {    // payable is just a keyword that means this method can receive/pay Etherif (msg.value > 0) {    // just being sent some cash?    Deposit(msg.sender, msg.value);    } else {    throw;  }}But they took it a step further, and herein was their critical mistake. Below is the actual code that was attacked.function() payable {    // just being sent some cash?  if (msg.value > 0)    Deposit(msg.sender, msg.value);  else if (msg.data.length > 0)    _walletLibrary.delegatecall(msg.data);}Basically:If the method name is not defined on this contract\u2026And there\u2019s no ether being sent in the transaction\u2026And there is some data in the message payload\u2026Then it will call the exact same method if it\u2019s defined in _walletLibrary, but in the context of this contract.Using this, the attacker called a method called initWallet(), which was not defined on the multisig contract but was defined in the shared wallet library:function initWallet(address[] _owners, uint _required, uint _daylimit) {    initDaylimit(_daylimit);  initMultiowned(_owners, _required);}Which calls the initMultiowned method...function initMultiowned(address[] _owners, uint _required) {    m_numOwners = _owners.length + 1;  m_owners[1] = uint(msg.sender);  m_ownerIndex[uint(msg.sender)] = 1;  for (uint i = 0; i < _owners.length; ++i)  {    m_owners[2 + i] = uint(_owners[i]);    m_ownerIndex[uint(_owners[i])] = 2 + i;  }  m_required = _required;}Do you see what just happened there? The attacker essentially reinitialized the contract by delegating through the library method, overwriting the owners on the original contract. They and whatever array of owners they supply as arguments will be the new owners.Given that they now control the entire wallet, they can trivially extract the remainder of the balance. And that\u2019s precisely what they did.The initWallet: https://etherscan.io/tx/0x707aabc2f24d756480330b75fb4890ef6b8a26ce0554ec80e3d8ab105e63db07The transfer:\u00a0https://etherscan.io/tx/0x9654a93939e98ce84f09038b9855b099da38863b3c2e0e04fd59a540de1cb1e5So what was ultimately the vulnerability? You could argue there were two. First, the initWallet and initMultiowned in the wallet library were not marked as internal (this is like a private method, which would prevent this delegated call), and those methods did not check that the wallet wasn't already initialized. Either check would've made this hack impossible.The second vulnerability was the raw delegateCall. You can think of this as equivalent to a raw eval statement, running on a user-supplied string. In an attempt to be succinct, this contract used metaprogramming to proxy potential method calls to an underlying library. The safer approach here would be to whitelist specific methods that the user is allowed to call.The trouble, of course, is that this is more expensive in gas costs (since it has to evaluate more conditionals). But when it comes to security, we probably have to get over this concern when writing smart contracts that move massive amounts of money.So that was the attack.It was a clever catch, but once you point it out, it seems almost elementary. The attacker then jumped on this vulnerability for three of the largest wallets they could find\u200a\u2014\u200abut judging from the transaction times, they were doing this entirely manually.The white-hat group was doing this at scale using scripts, and that\u2019s why they were able to beat the attacker to the punch. Given this, it\u2019s unlikely that the attacker was very sophisticated in how they planned their attack.You might ask the question though\u200a\u2014\u200awhy don\u2019t they just roll back this hack, like they did with the DAO hack?Unfortunately that\u2019s not really possible. The DAO hack was unique in that when the attacker drained the DAO into a child DAO, the funds were frozen for many days inside a smart contract before they could be released to the attacker.This prevented any of the stolen funds from going into circulation, so the stolen Ether was effectively siloed. This gave the Ethereum community plenty of time to conduct a public quorum about how to deal with the attack.In this attack, the attacker immediately stole the funds and could start spending them. A hard fork would be impractical\u2013what do you do about all of the transactions that occur downstream? What about the people who innocently traded assets with the attacker? Once the ether they\u2019ve stolen gets laundered and enters general circulation, it\u2019s like counterfeit bills circulating in the economy\u200a\u2014\u200ait\u2019s easy to stop when it\u2019s all in one briefcase, but once everyone\u2019s potentially holding a counterfeit bill, you can\u2019t really turn back the clock anymore.So the transaction won\u2019t get reversed. The $31M loss stands. It\u2019s a costly, but necessary lesson.So what should we take away from this?3. What does this attack mean for Ethereum?There are several important takeaways here.First, remember, this was not a flaw in Ethereum or in smart contracts in general. Rather, it was a developer error in a particular contract.So who were the crackpot developers who wrote this? They should\u2019ve known better, right?The developers here were a cross-collaboration between the Ethereum foundation (literally the creators of Ethereum), the Parity core team, and members of the open-source community. It underwent extensive peer review. This is basically the highest standard of programming that exists in the Ethereum ecosystem.These developers were human. They made a mistake. And so did the reviewers who audited this code.I\u2019ve read some comments on Reddit and HackerNews along the lines of: \u201cWhat an obvious mistake! How was it even possible they missed this?\u201d (Ignoring that the \u201cobvious\u201d vulnerability was introduced in January and only now discovered.)When I see responses like this, I know the people commenting are not professional developers. For a serious developer, the reaction is instead: damn, that was a dumb mistake. I\u2019m glad I wasn\u2019t the one who made it.Mistakes of this sort are routinely made in programming. All programs carry the risk of developer error. We have to throw off the mindset of \u201cif they were just more careful, this wouldn\u2019t have happened.\u201d At a certain scale, carefulness is not enough.As programs scale to non-trivial complexity, you have to start taking it as a given that programs are probably not correct. No amount of human diligence or testing is sufficient to prevent all possible bugs. Even organizations like Google or NASA make programming mistakes, despite the extreme rigor they apply to their most critical code.We would do well to take a page from site reliability practices at companies like Google and Airbnb. Whenever there\u2019s a production bug or outage, they do a postmortem analysis and distribute it within the company. In these postmortems, there is always a principle of never blaming individuals.Blaming mistakes on individuals is pointless, because all programmers, no matter how experienced, have a nonzero likelihood of making a mistake. Instead, the purpose of a postmortem is to identify what in the process allowed that mistake to get deployed.The problem was not that the developer forgot to add internal to the wallet library, or that they did a raw delegateCall without checking what method was being called.The problem is that their programming toolchain allowed them to make these mistakes.As the smart contract ecosystem evolves, it has to evolve in the direction of making these mistakes harder, and that means making contracts secure by default.This leads me to my next point.Strength is a weakness when it comes to programming languages. The stronger and more expressive a programming language is, the more complex its code becomes. Solidity is a very complex language, modeled to resemble Java.Complexity is the enemy of security. Complex programs are more difficult to reason about and harder to identify edge cases for. I think that languages like Viper (maintained by Vitalik Buterin) are a promising step in this direction. Viper includes by default basic security mechanisms, such as bounded looping constructs, no integer overflows, and prevents other basic bugs that developers shouldn\u2019t have to reason about.The less the language lets you do, the easier it is to analyze and prove properties of a contract. Security is hard because the only way to prove a positive statement like \u201cthis contract is secure\u201d is to disprove every possible attack vector: \u201cthis contract cannot be re-initialized,\u201d \u201cits funds cannot be accessed except by the owners,\u201d etc. The fewer possible attack vectors you have to consider, the easier it is to develop a secure contract.A simpler programming model also allows things like formal verification and automatic test generation. These are areas under active research, but just as smart contracts have incorporated cutting-edge cryptography, they also should start incorporating the leading edge of programming language design.There is a bigger lesson here too.Most of the programmers who are getting into this space, myself included, come from a web development background, and the blockchain toolchain is designed to be familiar for web developers. Solidity has achieved tremendous adoption in the developer community because of its familiarity to other forms of programming. In a way, this may end up being its downfall.The problem is, blockchain programming is fundamentally different from web development.Let me explain.Before the age of the client-server web model, most programming was done for packaged consumer software or on embedded systems. This was before the day of automatic software updates. In these programs, a shipped product was final\u200a\u2014\u200ayou released one form of your software every 6 months, and if there was a bug, that bug would have to stand until the next release. Because of this longer development cycle, all software releases were rigorously tested under all conceivable circumstances.Web development is far more forgiving. When you push bad code to a web server, it\u2019s not a big deal if there\u2019s a critical mistake\u200a\u2014\u200ayou can just roll back the code, or roll forward with a fix, and all is well because you control the server. Or if the worst happens and there\u2019s an active breach or a data leak, you can always stop the bleeding by shutting off your servers and disconnecting yourself from the network.These two development models are fundamentally different. It\u2019s only out of something like web development that you can get the motto \u201cmove fast and break things.\u201dMost programmers today are trained on the web development model. Unfortunately, the blockchain security model is more akin to the older model.In blockchain, code is intrinsically unrevertible. Once you deploy a bad smart contract, anyone is free to attack it as long and hard as they can, and there\u2019s no way to take it back if they get to it first. Unless you build intelligent security mechanisms into your contracts, if there\u2019s a bug or successful attack, there\u2019s no way to shut off your servers and fix the mistake. Being on Ethereum by definition means everyone owns your server.A common saying in cybersecurity is \u201cattack is always easier than defense.\u201d Blockchain sharply multiplies this imbalance. It\u2019s far easier to attack because you have access to the code of every contract, know how much money is in it, and can take as long as you want to try to attack it. And once your attack is successful, you can potentially steal all of the money in the contract.Imagine that you were deploying software for vending machines. But instead of a bug allowing you to simply steal candy from one machine, the bug allowed you to simultaneously steal candy from every machine in the world that employed this software. Yeah, that\u2019s how blockchain works.In the case of a successful attack, defense is extremely difficult. The white-hats in the Parity hack demonstrated how limited their defense options were\u200a\u2014\u200athere was no way to secure or dismantle the contracts, or even to hack back the stolen money; all they could do was hack the remaining vulnerable contracts before the attacker did.This might seem to spell a dark future.But I don\u2019t think this is a death knell for blockchain programming. Rather, it confirms what everyone already knows: this ecosystem is young and immature. It\u2019s going to take a lot of work to develop the training and discipline to treat smart contracts the way that banks treat their ATM software. But we\u2019re going to have to get there for blockchain to be successful in the long run.This means not just programmers maturing and getting more training. It also means developing tools and languages that make all of this easier, and give us rigorous guarantees about our code.It\u2019s still early. Ethereum is a work in progress, and it\u2019s changing rapidly. You should not treat Ethereum as a bank or as a replacement for financial infrastructure. And certainly you should not store any money in a hot wallet that you\u2019re not comfortable losing.But despite all that, I still think Ethereum is going to win in the long run. And here\u2019s why: the developer community in Ethereum is what makes it so powerful.Ethereum will not live or die because of the money in it. It will live or die based on the developers who are fighting for it.The league of white-hats who came together and defended the vulnerable wallets didn\u2019t do it for money. They did it because they believe in this ecosystem. They want Ethereum to thrive. They want to see their vision of the future come true. And after all the speculation and the profiteering, it\u2019s ultimately these people who are going to usher the community into its future. They are fundamentally why Ethereum will win in the long run\u2014or if they abandon Ethereum, their abandonment will be why it loses.This attack is important. It will shake people up. It will force the community to take a long, hard look at security best practices. It will force developers to treat smart contract programming with far more rigor than they currently do.But this attack hasn\u2019t shaken the strength of the builders who are working on this stuff. So in that sense it\u2019s a temporary setback.In the end, attacks like this are good for the community to grow up. They call you to your senses and force you to keep your eyes open. It hurts, and the press will likely make a mess of the story. But every wound makes the community stronger, and gets us closer to really deeply understanding the technology of blockchain\u200a\u2014\u200aboth its dangers, and its amazing potential.P.S. If you\u2019re a dev and you want to learn more about smart contract security, this is a really good resource.Errata: This article originally said that Gavin Wood was the developer of the contract, which is incorrect. Gavin is the founder of Parity and pushed the fix to the contract, but was not the original developer. It also originally claimed that $77M additional funds were vulnerable, but this doesn\u2019t count all of the ERC20 (ICO) tokens that were vulnerable. The total amount is actually $150,000,000+ if you include all ERC20 tokens. As of the time of writing this (July 21st 4PM EST), the total value of the assets saved by the white-hats was $179,704,659.", "responses": "153"}, {"title": "Ethereum will pass Bitcoin in 2018: my cryptocurrency investment portfolio", "author_name": "Jason Kowalski", "link": "https://hackernoon.com/ethereum-will-pass-bitcoin-in-2018-my-cryptocurrency-investment-portfolio-dcab52905bba?source=search_post---------3", "post_date": "Jan 12, 2018", "readtime": "8 min read", "upvotes": "25K", "content": "Ethereum will pass Bitcoin in 2018: my cryptocurrency investment portfolioJason KowalskiBlockedUnblockFollowFollowingJan 12, 2018In the last few days, many have asked about my investment strategy and portfolio mix after writing 95Percent\u2019s: Blockchain Technology.After much deliberation, in this post, I\u2019ve decided to share my holdings with you. Perhaps more importantly, I\u2019ve decided to also share my underlying philosophy. As a reminder, I know nothing. None of this should be construed as investment advice, and you should do your own research before making any investments. I would be financially okay if I lost all of my invested money: you should make sure you could survive a total loss before investing any funds.But enough of that, how should you approach investing in cryptocurrencies? First, I advocate creating your own investment tenets. Tenets are also a crucial aspect of the product management process. I recommend creating tenets before diving into any business, project or problem.Why do we write tenets?Tenets are used to make hard decisionsEach tenet expresses the conflict arising from two (or more) competing philosophiesEach tenet ultimately demonstrates preference for one philosophy over othersMost people have their own philosophies and preferences, but they don\u2019t write them down. Writing them out is crucial because it crystalizes your thinking. Tenets are helpful when times are good and indispensable when things get tough. You should debate your tenets heavily with family, friends, and yourself. Below I share five of my cryptocurrency investment tenets:Jason\u2019s Cryptocurrency Tenets [January 2018]1) I will prioritize platform investments (think Ethereum) over application investments (think Dash). Strong infrastructure scales and changes the world. Successful applications are hard to predict and are not stable over time. Platforms better withstand changing customer needs.2) I will choose cryptocurrencies with user adoption and strong focus on user adoption over cryptocurrencies with the latest tech or prettiest whitepapers.3) I will take the super-long term view. I will prioritize cryptocurrency that have the potential to be trillion dollar businesses and will stay away from currencies with more barriers to widespread adoption. If a cryptocurrency is unlikely to ever be used en masse, I won\u2019t buy it. I investment in fundamentals not merely public opinion.4) I will greatly value signals in the market, especially signals from entities with inside information and large investment positions\u200a\u2014\u200apotentially over even my own analysis.5) I value cryptocurrencies that demonstrate the ability to change direction, pivot quickly and make decisions over cryptocurrencies that emphasize status quo, tradition, and moving wisely but slowly. I recognize this is partly a function of team structure and leadership.After painstakingly working through my tenets, I\u2019ve researched many of the cryptocoins available today. Based on my personal investment philosophy and this research, I\u2019ve made several investments over the last month. Here\u2019s my positions as of January 11th 2018:Jason\u2019s Cryptocurrency Portfolio* as of January 11th 2018:Ethereum: 50%Stellar: 20%Neo: 20%Request Network: 10%*I\u2019ve rounded these numbers to make them prettier.Ethereum: 50%As we wrote in Blockchain Technology: \u201cBlockchain technology creates information networks. The fundamental rule of networks is that when a new person joins any network, the network becomes exponentially more valuable. As a corollary, each time another person joins a widely-used network, it becomes exponentially harder for competing networks to offer similar value to people. You use Facebook because all of your friends are on the platform. You are less likely to use a new social network because few of your friends would be on it. As a result, networks tend to produce winner-takes-all markets. Facebook, WeChat and a few other businesses, for example, dominate the social networking space. We expect a similar winner-take-all outcome for blockchain technology. So far, founders have created many hundreds of digital coins. They will create thousands more over the next few years. We expect a handful of these digital coins to successfully walk out onto the global stage, while the vast majority of these coins will ultimately become valueless.\u201dAmazon is a platform. Facebook is a platform. Platforms dominate the internet. As we\u2019ve seen from Ethereum\u2019s creation of the Initial Coin Offering (ICO) platform, platform coins will dominate the blockchain coin as well. We\u2019ll see many cryptocoins repositioning themselves as platform coins, especially starting in the second half of 2018 and into 2019 when many smaller, more niche coins start to flame out. Based on my research, Ethereum is currently best positioned to win the platform war. Pure and simple. I may change my view in the next few months or quarters but for now Ethereum gets the majority of my money.Stellar: 20%Stellar is a platform that wants to make it really easy for companies to ICO (versus using Ethereum). Stellar is ultra-focused on this use case, but that\u2019s okay, because this use case is massive.Again, per Blockchain Technology, \u201c[blockchain] technology can also make physical-world assets more liquid (easier to sell and buy) by making them more reducible. In other words, the blockchain better facilitates ownership of assets across multiple people\u2026 while mega-companies (e.g., Amazon, AirBnB) have successfully built their own digital marketplaces in the past, blockchain provides the available-to-all, trust-building, low-cost financial infrastructure via smart contracts, secure transactions, and an authoritative ledger to [almost anyone]\u2026Unlike crowd-funding sites like Kickstarter, where early backers receive nothing but a product or service, ICOs let entities actually own part of meaningful ideas.\u201dThe tokenization of assets via blockchain is going to change the world. So far, this use case is the only one Ethereum has proved it can solve and I find it possible that Stellar eats some of Ethereum\u2019s pie: I am watching Stellar carefully. Stellar focuses on usability (think: MVP) instead of extensibility (think: useless features). The founder started Mt. GOX and built the initial framework for Ripple. Stellar is backed by Stripe and has support from top advisors in tech.Neo: 20%Over the last decade, China has made it clear that they want to build their own solutions to world problems. I expect this trend to continue into the blockchain world, and expect at least a duopoly platform paradigm (at least one major smart contract platform for the West, and at least one smart contract platform for the East).Request Network: 10%Request Network is a platform specifically focused on the payments space (built on top of Ethereum). While the sized of the tokenization of assets space (e.g. ICO) is almost incalculable, the payments space remains enormous. Request Network is a big team bet. As a product leader, I value team organization a lot. I\u2019ve studied the core developers of many of the top blockchain coins, and find that most projects are being run relatively poorly compared to more traditional software development projects today (partly a function of decentralization of blockchain teams). Many teams don\u2019t have updated visions or project plans and as a result miss deadlines and seem to be prioritizing things no one wants. Request Network strikes me as agile, able to pivot quickly, and ruthlessly focused on user growth and customer experience. (I love the bi-weekly updates.). I also immensely value their time in YCombinator, the top startup incubator in the world.Like the pre-blockchain startup world, real-life customer feedback is everything. I want a team desperate to get their coin to market. From there, they can interact with real customers and then make technical changes that are likely to lead to meaningful improvements for real customers.Mainstream cryptocoins I am NOT invested in:BitcoinIn my opinion, a huge milestone for blockchain technology will be to move away from the Bitcoin Hegemony. Right now, the cryptocurrency market as whole is psychologically entwined with Bitcoin. When Bitcoin plummets, the market plummets, although we\u2019ve seen signs of change in the last few weeks. In 2018, I predict that Ethereum (or another platform) will surpass Bitcoin. The cryptocurrency market will finally detangle itself from Bitcoin.I don\u2019t find pro-Bitcoin arguments particularly strong. Initially, Bitcoin initially saw a lot of success helping entities perform discreet transactions (think: Silk Road). Currently, though, Bitcoin isn\u2019t particularly helpful in the payments space (slow, expensive, and unfocused): the digital currency is unlikely to scale to widespread user adoption for payments. Bitcoin also can\u2019t help with ICOs: it is not a platform. Perhaps most concerning, from a development perspective Bitcoin moves slowly, has divided leadership, and doesn\u2019t practice user-driven development (at least compared to other digital coins). Proponents cite these characteristics as advantages and argue that Bitcoin is a store of value.We flesh out the digital coin role as a store of value in Blockchain Technology: \u201cBlockchain technology also has potential to provide a new independent store of value. Today, the classic independent store of value, gold, is partly valuable because humans have decided to value it independently of nation states (e.g., Canada) or nation alliances (e.g., the European Union) unlike other mainstream currencies (e.g., the United States dollar is closely tied to the success of the United States of America). Gold is generally inversely correlated with the US dollar: in other words, gold acts as a hedge against the current global financial system. Because gold is difficult to store\u200a\u2014\u200aheavy, relatively insecure\u200a\u2014\u200adigital blockchain-currencies represent an attractive alternative. If digital currencies become more stable over time (currently, they are extremely volatile), they may one day augment or supplement assets such as gold.\u201dThe problem is that no one uses Bitcoin as a stable store of value today. Additionally, Bitcoin is relatively uncorrelated with the US dollar, so it doesn\u2019t act as a particularly useful hedge. Ultimately, I think digital coins will be strong store of values, but this is far, far down the road. At that point, I find that other cryptocoins are just as likely or more likely to act as global store of values compared to Bitcoin.I further argued that the bigger and more immediate store of value opportunity is \u201chelping entities buy into the global financial system in the first place. In developing countries, for example, many entities are eager to shift local, unstable currencies to stable currencies such as the US dollar to better protect their wealth. Like the US dollar today, the blockchain-backed currencies that facilitate world transactions tomorrow will also naturally act as a store of value. Entities will invest in these currencies as they do the US dollar today. As a result, the same blockchain-based currencies that gain mainstream adoption for payments are also likely to gain mainstream adoption as stores of value.\u201d We will be forever indebted to Bitcoin but 2018 will mark Ethereum passing Bitcoin, the marketing falling, and then ultimately rebounding stronger than before. The age of the Blockchain Platform is beginning.Privacy-centric cryptocoinWhile, private, fully-anonymous transactions are a large blockchain use case, coins emphasizing privacy will struggle to gain mass adoption in the long-term. I expect privacy-centric coins to bear the brunt of initial government scrutiny and regulation. I choose to make my investments on the more public side of the blockchain movement. That said, Monero would be my current pick in the privacy-centric digital coin space.RippleAs we wrote in Blockchain Technology: \u201cin the short-term, partial blockchain solutions [like Ripple] will become common. Already, financial institutions are creating their own private blockchain networks and producing digital coin. Participating institutions act as nodes in the blockchain, and have visibility into all transaction on the shared digital ledger.\u201dI like Ripple, and particularly the focus on getting customers. Like many others, however, I am concerned about the difference between the highly-valuable Ripple Payment Protocol and XRP as an investment vehicle. I also see in-house blockchain development from large institutions as meaningful competition.ThanksHopefully my perspective is helpful. If I helped you crystallize your own thinking, I\u2019d very much appreciate a small donation to my Ethereum wallet.Ethereum wallet: 0x81ff5029a05ce15c3b6d6e27c7d89a7c30ecaf32Or just clap a lot =)To trade, I buy Ethereum in CoinBase and then move these coins into Binance.Coinbase: https://www.coinbase.com/join/5a39ac52c9e83802d5f70a27Binance: https://www.binance.com/?ref=18572991Again, this is not investment advice. I re-adjust my portfolio constantly based on new information and could have a completely different set of investments tomorrow. One must be careful not to be affected by sunk cost or fear of missing out biases\u200a\u2014\u200aand strive to act as objectively as possible. Good luck.", "responses": "136"}, {"title": "Cardano: Ethereum and NEO Killer or Overpriced?", "author_name": "Noam Levenson", "link": "https://hackernoon.com/cardano-ethereum-and-neo-killer-or-overhyped-and-overpriced-8fcd5f8abcdf?source=search_post---------4", "post_date": "Dec 28, 2017", "readtime": "22 min read", "upvotes": "35K", "content": "Cardano: Ethereum and NEO Killer or Overpriced?As the first blockchain with peer reviewed tech, Cardano is an ambitious platform. Can it stack up to NEO and Ethereum?Noam LevensonBlockedUnblockFollowFollowingDec 28, 2017TOKEN: ADACardano has been on the tip of everyone\u2019s tongue since it\u2019s enormous run up earlier this month. Even in the volatile world of cryptocurrency, Cardano\u2019s 2000% increase over three weeks was extraordinary, and the community took notice. It now sits as the 6th largest cryptocurrency market cap at over $10 billion. Yet, before Cardano and its then $700 million market cap suddenly appeared on coinmarketcap.com, most had never heard of the project before. Its sudden appearance and enormous subsequent increase have left the blockchain community scratching their heads and scouring for information.So like with any new kid on the block, we want to understand what Cardano is, what separates it from other blockchain platforms, and whether it can play centerfield for our neighborhood team\u2026This article examines Cardano both as a standalone platform, as well as in comparison to Ethereum and NEO. For an analysis of NEO versus Ethereum, you should read this. I understand that EOS and other third generation platforms are also relevant; I will research and write about those later on. Since I have already extensively covered NEO, I will dedicate this article primarily to providing an in-depth analysis of Cardano. I will also compare each unique component to those of NEO and Ethereum. I will quote directly from my past article on some aspects. Let\u2019s begin\u2026What is\u00a0Cardano?Cardano is the, no-crust on his sandwich, kid at school who uses words like \u201cpeer-reviewed\u201d and reads \u201cacademic journals.\u201d He occasionally gets shoved into his locker and has never been good at sports; but 10 years later he\u2019s driving around a Ferrari and you realized you never should have judged him in the first place.Cardano, put simply, is a blockchain platform that provides a programmable blockchain and smart contracts for dApp development. But the industry is ripe with strong competition: Ethereum has first mover advantage and a large user base, NEO focuses on a smart economy, ARK has smart bridges and blockchain interoperability; so what makes Cardano special and why can it be a competitive player in the field?Cardano\u2019s One Liner: Cardano is the industry\u2019s first platform that utilizes academically peer-reviewed open source code.Definitely don\u2019t want bugs in the code for this airplane\u2019s protocol\u2026Translation? It means that the Cardano project boasts a network of global researchers and scientists that have contributed to and developed an advanced blockchain protocol. All of Cardano\u2019s protocol technology goes through an extensive peer review process, similar to the process that airplane code might go through. Their conclusion is that code that supports a global economy should have the same rigorous scrutiny as code on which lives depend.Cardano is known as a 3rd generation blockchain. Bitcoin was the 1st generation. Ethereum was the 2nd. Ethereum led the pack, but because its technology was fundamentally new, the technology was rudimentary. Now, Ethereum must rely on its governance system to upgrade and scale. 3rd generation blockchains, like Cardano, have the advantage of hindsight. They can identify the drawbacks and constraints of previous projects and develop accordingly. This is precisely the path that Cardano took. The project emerged in 2014, not with a whitepaper, but rather with collective research and collaboration, focused on identifying the limitations of present blockchains. They then proceeded to code from the ground up, attempting to address each of those limitations. Each building block was submitted to conferences and experts for review before being added to the larger building.This peer reviewed process is incredibly important, especially considering that poor coding and development can lead to catastrophic results (think Parity and DAO hacks). How many developers are there in the world who can effectively code a blockchain project? How many developers can code quality projects in an entirely new industry, on entirely new technology? I think that number is certainly less than the 1380 cryptocurrencies posted on coinmarketcap.com. So much focus has been directed towards scam projects; I think a more important focus should be placed on legitimate projects that are just done poorly. Far more people will lose money in this industry to teams and developers who just weren\u2019t very good than to criminal money grabs. So the question must be asked: how do we know a project is good? How do we know the code is kosher? One way, as Ethereum has done and NEO is doing, is through the bumpy, trial and error road of adoption. Cardano\u2019s method of peer review is another.With this philosophy of methodical and peer reviewed development, Cardano is working towards addressing the problems of 2nd generation blockchains.More Than Just\u00a0CardanoBefore we get into what limitations Cardano addresses and what makes the project unique, we should understand who is behind Cardano.The project is supported by three entities, all serving different purposes within the ecosystem.The Cardano FoundationCardano is supported by a nonprofit company, known as the Cardano Foundation. The foundation serves several purposes, both to Cardano and to the blockchain community as a whole. They work towards promoting Cardano to the greater community, educating about cryptocurrency, and working with governments around regulation. An organization like this is important for the adoption of a blockchain platform; the foundation provides a standard body that can facilitate cooperation and adoption with enterprises and businesses. The Enterprise Ethereum Alliance serves a similar purpose for Ethereum. OnChain, a partner of NEO, while not a nonprofit, also serves to connect public blockchains with governments and businesses. Since blockchain platforms such as NEO, Ethereum, and Cardano are decentralized, these organizations provide a centralized body for businesses to work with. Like the publishing agency for the platform.To note too, the Cardano Foundation hosts a variety of digestible resources about Cardano. From overviews of the project and the technology to blog updates detailing exactly how the team operates, their exact working schedule, and their release timeline. I have honestly never seen such transparency.Input Output Hong Kong\u00a0(IOHK)IOHK is an engineering company that develops blockchain solutions for academic institutions, corporations, and governments. The company is led by Charles Hoskinson and Jeremy Wood, former CEO and Executive Assistant of Ethereum respectively. IOHK supports Cardano and boasts an extensive research team\u200a\u2014\u200a17 accredited individuals. This team has been responsible for the development of Cardano\u2019s technology and digital wallet. IOHK also supports several other blockchain projects, including Ethereum Classic. For the tech minded, the website features all of their peer-reviewed papers.Also, I recommend you go to the website just to play around with the colorful interface.EmurgoEmurgo, a Japanese based company, both assists established businesses with integrating blockchain technology, as well as invests in startup ventures. Emurgo\u2019s connects businesses to the Cardano blockchain.This delegation of tasks between IOHK, the Cardano Foundation, and Emurgo is interesting. I am supportive of the concept. I can understand how dividing the development and engineering from the marketing and networking might allow for a more efficient system. Each organization serves a different purpose within the ecosystem.TLDR: Cardano is supported by three organizations. The Cardano Foundation supports the platform by promoting Cardano to the greater community, educating about cryptocurrency, and working with regulation. IOHK is the engineering and development organization behind the Cardano technology. Emurgo works towards integrating the platform with businesses.What Makes Cardano\u00a0Special?As Calvin Harris says, \u201cthis is what you came for.\u201dA platform can have the flashiest website, the most robust development team, and the largest collection of \u201cpeer reviewed\u201d papers, but if it\u2019s not accomplishing something new\u200a\u2014\u200asomething revolutionary\u200a\u2014\u200athen it will die. For in this space, competition is stiff, and everyone is competing against Ethereum, the king of dApps.Cardano is ambitious, but largely undeveloped. I will explore future features that Cardano will implement, but for now, it\u2019s most important to focus on the foundation. The features and protocols that form the basis for Cardano\u2019s future.Listed in the order I explore them, I believe the unique aspects of Cardano are: layered technology, proof of stake protocol, coding language, wallet, governance model, and treasury.Cardano technology is layered like this delicious cakeLayered TechnologyWith value transfers, there are two sets of information. There is the simple, from, to whom, when, and how much\u200a\u2014\u200athis is the only information Bitcoin can support. However, as we are aware, in our real world, value transfers are never this simple. Associated with each transaction we can also ask: what are the terms and conditions of the transfer, why was the money transferred, and what were the involved entities? This is known as metadata.Ethereum, the 2nd generation blockchain, enabled the integration of all of this information. They call the connection between the actual value transfer and the associated metadata smart contracts. Programmable contracts. However, with Ethereum, because there is no separation between accounting and computing, this information is stored together, with no consideration given as to whether the metadata always needs to be included. This is problematic. The more data that is included with each transaction, the more gas it costs, the more difficult it is for the blockchain to store that information, and the more cumbersome it is for nodes to store the history of the blockchain.Thus, Cardano separates the transfer and the why. They accomplish this by separating the platform into two distinct layers:The Cardano Settlement Layer (CSL): This layer is responsible for the token economics and the balances of all user accounts. Cardano\u2019s native currency, ADA, is transacted over this layer. In layman terms, this just means that all code relating to accounts and the ADA token exist on this layer.The Cardano Control Layer (CCL): All the smart contract functions exist on this layer. In addition, regulatory elements like digital identity can be supported by this layer.The CCL is the control tower of\u00a0CardanoThe CSL only maintains the actual transaction information\u200a\u2014\u200afor example: 3 ADA from Wallet A to Wallet B. By including only the simplified transaction information, the CSL can be like a standardized transacting protocol. Most, if not all possible transactions, are preprogrammed. Flexibility and customizability, while useful, can create security holes. However, with simple transactions, Cardano can anticipate and fix those holes from the beginning.However, Cardano still will support smart contracts. These are controlled from the CCL. The CCL allows for all the advanced programmable features of smart contracts. The why of transactions. The conditions and terms.The advantage of separating this layer from the CSL is two fold. First, it allows for the protection of transaction privacy because transactions can be conducted without the additional metadata Ethereum or NEO requires. Second, it allows for more focused scaling updates\u200a\u2014\u200afor example, the updates might only impact the computational layer without endangering user balances or the transactional ability of the network.The best way I understand this is that there are advantages to being a cryptocurrency and there are advantages to being a platform. Cryptocurrencies protocols are simple and efficient. Platform protocols are robust and flexible. Bitcoin and Litecoin are cryptocurrencies. Ethereum and Neo are platforms first and currencies second. Cardano is both. It is the best of both worlds.TLDR: Cardano splits its protocol into two layers. One layer is focused on transactions and accounts and the other layer is the computational layer for smart contracts. This allows for easier upgrades and enhanced flexibility.Proof of Stake\u00a0ProtocolIf you don\u2019t understand Proof of Stake (PoS), I recommend you read the explanation in my NEO article. It highlights the differences between PoS and what Ethereum uses: Proof of Work (PoW). Essentially, PoW uses computing power to determine who confirms the blocks on the blockchain and divvies up rewards according to how much computing power you contribute. With PoS, blocks are confirmed according to who holds the most tokens.In PoW, if you operate 5% of the total computing power of the network, you can expect to get 5% of the block rewards. In PoS, if you own 5% of tokens, you can also expect to receive 5% of block\u00a0rewards.You don\u2019t need all this equipment for\u00a0PoSCardano, like NEO, uses a Proof of Stake protocol. It is called Ouroboros. It is said to be the only PoS protocol with mathematically proven security. Recognize that, as with all of Cardano\u2019s technology, Ouroboros has been extensively peer-reviewed. Ouroboros specifically was developed with the help of the University of Edinburgh, University of Connecticut, IOHK, and the Tokyo Institute of Technology.As with NEO and Ark, Cardano uses a variation of the PoS protocol similar to Delegated Proof of Stake (dPoS). For reference, NEO refers to this as dBFT (delegated Byzantine Fault Tolerance). dPoS permits stake holders to \u201cvote and elect\u201d representatives, known as consensus nodes, who do the block confirmations for them. The block rewards are given to the consensus nodes who then provide a payout to the token holders who voted for them.Delegated PoS is kind of like how we elect these guys to make the decisions for\u00a0usWith Cardano, the system works slightly differently. Time is broken into what are called Epochs (each Epoch could be 20 minutes \u2014a totally arbitrary number). Within each Epoch, or 20 minute block, there are slots. Slots are just the to-be-mined blocks. A random algorithm selects one token holder for each slot to act as a consensus node. They are known as a slot leader. The slot leader then confirms the block and yields to the next randomly elected slot leader. All the block rewards are collected in a pool and are distributed to the slot leaders at the end of the epoch.Epochs act kind of like a shift schedule at your local Cold Stone Creamery. The schedule can be for any amount of time, just like with epochs\u200a\u2014\u200alet\u2019s say this schedule is a week. Each shift is known as a slot. Only one person can be working each shift (or slot), but we need to have a worker for every shift. Each worker is randomly selected. With Cardano, the more tokens (ADA) you have, the more likely you are to be elected\u200a\u2014\u200alike lottery tickets: the more you have, the better your odds. Users will also be able to pool their ADA together and share in the block rewards. Once that worker (slot leader) works their shift, the next person takes over. Epochs define slot leaders for each slot. Then, when that epoch ends, a new epoch comes online and defines all the slot leaders for that schedule. And so it goes.There is currently no staking on Cardano until the Shelley Update in Q2 of 2018. Much more information will become available then regarding exactly how the reward and staking system will work. As of now, the platform is entirely centralized as all the nodes are owned by Cardano. All network fees are collected and burned.With Cardano, extensive thought has gone into how to scale the platform. Ouroboros enables many advanced scaling options. Slot leaders can manage blocks on multiple chains. And multiple Epochs can be run simultaneously. Both of these enable a blockchain that can support scaling solutions like sidechains\u200a\u2014\u200amultiple chains that all interoperate\u200a\u2014\u200aand sharding\u200a\u2014\u200abreaking the larger blockchain into manageable \u201cchunks.\u201d It is important to note that none of this has been implemented yet. It is currently being researched and will be implemented when the network needs it, estimated to be towards the end of 2018.Comparison to NEO and Ethereum: Ethereum still uses Proof of Work, which is a severe disadvantage. They are however transitioning over to a PoS system. NEO uses what is called dBFT. NEO\u2019s system allows NEO token holders to elect consensus nodes who reach consensus on the next block, not unlike Cardano. The NEO team is in the process of relinquishing control over these consensus nodes. Ethereum is working towards sharding, sidechains, and other scaling solutions. NEO\u2019s platform already has implemented more scaling solutions than Ethereum but is working towards sidechains and interoperability.TLDR: Cardano uses a Proof of Stake system called Ouroboros. The network randomly elects a node to confirm the next block and the rewards are allocated to that node. The more tokens you have the more likely you are to be elected. Token holders can also \u201cvote\u201d for nodes by contributing their tokens to them and increasing the likelihood that they are elected.Coding LanguageCardano is coded in a language called Haskell. A programmer could give you a much better sense of the full scope of this, but I understand that Haskell language is a more precise code that employs mathematical verification methods in order to limit human error and confirm the correctness of the code. Essentially, the code has a better process for verifying that it is being written correctly. This conceivably will help prevent bugs and errors, such as the one that opened the way for the DAO Hack of Ethereum or the Parity Wallet catastrophe.Cardano does plan to incorporate multiple languages into its smart contract platform in the future.Ethereum and NEO comparison: NEO allows coding in a variety of the most common coding languages, providing developers with more flexibility. Ethereum created their own language called Solidity which is optimized for Ethereum smart contracts.TLDR: Cardano uses Haskell, a much more dynamic coding language.The WalletCardano\u2019s dedicated wallet is called Daedalus. The wallet supports the network token: ADA. The wallet was developed by IOHK and is supported by an impressive team of nine developers. The wallet will be critical for when Ouroboros, the proof of stake protocol, is implemented. From the wallet, users will be able to \u201cstake\u201d their tokens and potentially be elected to confirm blocks. Or they will be able to vote for other token holders to increase their odds and share in the block rewards.I find Cardano\u2019s dedication towards their wallet encouraging. It demonstrates the team\u2019s commitment towards all the elements of the platform.Ethereum and NEO comparison: NEO has a community developed wallet, NEON, that allows NEO holders to claim GAS. Ethereum has a variety of supported wallets.TLDR: Cardano developed their own wallet, Daedalus, which supports the token: ADA.GovernanceGovernance models are crucial when evaluating the future prospects of a blockchain. Consider this quote by Fred Ehrsam from this brilliant article:\u201cThe most successful blockchains will be those that can best adapt to their environments. Assuming these systems need to evolve to survive, initial design is important, but over a long enough timeline, the mechanisms for change are most important. \u201cSo what are Cardano\u2019s mechanisms for change?Cardano wants to implement blockchain based governance. That means that decisions regarding the future of the blockchain can be voted on by token holders and enacted into protocol. They envision a library of sorts where upgrades and modifications can be proposed and then voted on by ADA holders. A certain percentage of votes would need to be obtained for the protocol to be implemented.In comparison, off-chain governance systems also do have some semblance of voting, except there isn\u2019t a uniformed voting method between all the parties. Miners vote by dedicating their computing resources (or stake in the case of PoS) to whichever blockchain fork (version) they support. Users vote through use\u200a\u2014\u200awhich chain they decide to use. Exchanges also have a vote in the form of which token they decide to support. But all of this voting occurs after the fork. Thus, on-chain governance creates a system where everyone is voting in the same format, and voting happens before implementation. To understand forks better, read the explanation in this article.As an example, look at all the Bitcoin forks. With the governance method today, forks commonly occur, but no one supports the new Bitcoin (not including Bitcoin Cash which has been widely successful) and the new token dies. With an on-chain governance system, changes can be put up to a vote; if enough people support the change, it is implemented. They don\u2019t need to fork to gauge community interest.However, there are both pros and cons to this system.Pros: this system will likely help prevent hard forks. Creating a format for discussion and voting encourages smooth network updates without the headache of violent debates and contentious forks. It effectively democratizes the process and allows for equal voting rights according to token stake. This system also decentralizes the governance. Instead of just a handful of developers taking responsibility for proposals and updates, the whole community can participate.Cons: on-chain voting also has drawbacks. Any implemented feature becomes much harder to remove should there be an issue. Governance set in code is unchangeable. We are also trusting the community to make knowledgable decisions regarding protocol changes. Systems must be in place to prevent activities like trolling. Even just plain apathy would be harmful to this system.None of this governance system is currently in place; it\u2019s all still being developed. The details of the protocol and how it will address the above concerns remain to be seen.Comparison to Ethereum and NEO: Both Ethereum and NEO use off-chain governance models. With Ethereum, updates are proposed, reviewed, and then the network forks. Miners, users, and exchanges must decide which chain to use. Ethereum\u2019s community typically agrees on updates and thus, it is generally a smooth process. However, look at Ethereum and Ethereum Classic for an example of times when a fork did not go smoothly. NEO is more centralized than Ethereum; thus, updates and protocol changes can be quickly implemented by the team. This is inline with NEO\u2019s smart economy vision.TLDR: Cardano wants to implement on-chain governance where token holders can vote on community proposed updates to the blockchain. These updates are then encoded into the blockchain.TreasuryA portion of every block reward (25%) is placed into a treasury. This treasury is decentralized and can only be accessed through the voting mechanism described above. Imagine that the Cardano community wants to run a development competition. The details are proposed to the community and ADA holders vote and approve the competition. With the treasury, the community can then vote on how to fund the competition. With a consensus vote, funds from the treasury can support projects and upgrades to the network. Perhaps researchers would one day like to receive grants to study elements of Cardano and propose improvements. The treasury system could enable this.All this helps solve the issue of how should blockchains fund themselves after their supporting companies are gone? What will Ethereum do when Vitalik leaves and the Ethereum Foundation is dissolved? What will become of NEO when the NEO Council is no more? While these platforms will continue to be self sufficient, they won\u2019t necessarily have a way of funding new ecosystem developments. This is Cardano\u2019s solution.Again, recognize that this model has not yet been implemented.Comparison to Ethereum and NEO: NEO and Ethereum do not have on-chain funding mechanisms.TLDR: Cardano will have a treasury system, funded through 25% of block rewards. ADA token holders can vote on how to spend that money.TeamAs previously mentioned, the Cardano project is supported by three organizations. However, I think IOHK is the most relevant entity to the project, as they are conducting the actual development. Charles Hoskinson and Jeremy Wood head IOHK. Charles first co-founded Invictus Innovations which established Bitshares. He then moved to Ethereum as the enacting CEO. He has been the CEO of IOHK for almost three years.Jeremy also worked for Ethereum as the Executive Assistant. He has been the CSO of IOHK for nearly three years as well.Beyond these two, Cardano features small, interdisciplinary teams of academics and developers that work on individual projects. The development to-do list is tracked and new tasks are constantly given to teams as they finish projects. Teams work in two week intervals, releasing small, incremental updates to the main projects. Cardano focuses on time based releases instead of feature based releases. By not releasing huge updates, they avoid the issue of needing to coordinate the release of all the new features.I\u2019m impressed with the transparency and the professionalism of the team. Progress updates are constantly provided and I appreciate how the system utilizes a network of developers to work quickly and efficiently.Ethereum and NEO Comparison: All three projects feature powerful teams headed by intelligent thought leaders. It\u2019s hard to not give the advantage to Ethereum and Vitalik Buterin, the Michael Jordan of blockchain thinkers.Roadmap and Current\u00a0ProgressCardano\u2019s only working protocol right now is their SL Mainnet. This was launched on September 29th. SL is the Settlement Layer enabling ADA. Essentially, this means that Cardano is only a cryptocurrency; it will need to release other features to realize its promise of being a platform.Q2 of 2018 will be the next big release for Cardano. This release, titled Shelley, will enable many new features. These include: 1. The release of their proof of stake protocol\u200a\u2014\u200aOuroboros.2. Added incentives for running full nodes3. A wallet upgrade. This upgrade will include advanced security, multi-signatures (multiple passwords for the wallet), quantum resistant addresses, and checkpoints\u200a\u2014\u200aa process for speeding up the sync time for the blockchain.4. The release of their on-chain voting system.After this, releases will include their smart contract platform, treasury system, and advanced scaling methods.Cardano is designing its protocol with regulation and compliance in mind. They want to create an ecosystem that supports digital identity and can work with enterprises and governments within an existing economy. Much of their future developments will focus on this principal.TLDR: So far, Cardano has only released their Settlement Layer and thus, can only act as a cryptocurrency. Future developments are in store for smart contracts and other platform innovations.Additional Relevant Information:Cardano is modeling Ouroboros and other protocol features with Psi Calculus, a formal modeling language that is machine understandable. This allows them to test their protocols before they are actually implemented.As stated in the roadmap section, Cardano plans to implement quantum safe signatures, making their blockchain theoretically safe from quantum computers. NEO has this feature implemented while Ethereum does not.Cardano\u2019s thought process regarding every decision has been documented on their website. I have never seen such transparency from a project before.Cardano\u2019s token sale was audited. You can read the report here.The network has a booming social media following. Three associated twitter pages have 72k combined followers and their Reddit has 24k followers.Red Flags and\u00a0ConcernsAs with any project, it\u2019s critical that we are aware of all aspects of the project; the good and the bad.1. Still In DevelopmentCardano is still far from production ready. With the release of its SL mainnet, and native token, ADA, it is further along than some other 3rd generation blockchains such as EOS. However, we are likely still over 6 months away from just the implementation of their PoS protocol. There isn\u2019t even a release date for their smart contract platform\u200a\u2014\u200atheir CL and virtual machine. Until then, no dApps can be developed and no ICOs conducted. Ethereum already supports over 800 dApps. NEO is rapidly supporting more applications. While it\u2019s true that Cardano improves significantly on many aspects of Ethereum, Ethereum does have plans to implement scaling solutions that would close that gap. Even if Cardano is fully operational within a year, a year in the blockchain industry is an eternity in the normal world. It\u2019s possible that after a year, Ethereum will have such a chokehold on the dApp market and will be making significant progress towards its scaling solutions, that there is no place for Cardano. Right now, Cardano is a cryptocurrency; but Cardano\u2019s current $10.5 billion valuation is based on far more than it being a simple cryptocurrency.2. Governance and TreasuryCardano relies on a complicated governance system. The features of the system must be carefully crafted to align incentives and ensure that bad actors and trolls can\u2019t manipulate the system and wreak havoc. What if a group of proactive users is able to gain enough power and utilize the treasury for their own gain? While I do expect that the Cardano team will approach these questions carefully and methodically, it is still a factor to consider.ConclusionThe takeaway from this article should be such: Cardano is a 3rd generation platform that is building methodically, with peer reviewed technology, in order to address many of the scaling, privacy, and technological issues of today\u2019s 2nd generation blockchains, like Ethereum. Cardano has an advanced proof of stake protocol, a unique governance and treasury system, and a layered foundation that enables Cardano to act as both a cryptocurrency and a blockchain platform. It has a strong support network, a robust development team, and large community interest. The breadth of its roadmap is phenomenal and I am confident that Cardano can deliver on its promises.Even with all these benefits, it\u2019s difficult to effectively value Cardano and other 3rd generation platforms. Undoubtably, Cardano is doing a lot right. However, network effects play a significant role in platform valuations. Network effects refer to how the value of technology frequently depends upon how many people will use it. Thus, for Cardano to be successful, it must have users. Cardano is at least a year away from having a platform that can support users\u200a\u2014\u200aoutside of just sending and receiving ADA. Compare this to Ethereum and NEO, both of which have had large success in their respective markets. Ethereum controls the dApp development market today while NEO is making strides in being the platform in the East and enabling a smart economy. I don\u2019t see Cardano replacing either of these platforms; it won\u2019t replace NEO because their objectives and intended markets are different, and it won\u2019t replace Ethereum because I think Ethereum will succeed with many of its scaling solutions, closing the technological gap between it and Cardano.Regardless, I do think that the blockchain ecosystem can support more than one platform. Cardano\u2019s many strengths assure me that it is well situated to provide a strong alternative to Ethereum, perhaps as a platform with more flexibility and more security. For now, all we can do is wait; wait to see if Cardano stays true to its roadmap; wait to see if industries and enterprises take notice; wait and see if Cardano can be a powerhouse amongst blockchain platforms.", "responses": "110"}, {"title": "Ethereum Will Be the Backbone of the New\u00a0Internet", "author_name": "James Martin Duffy", "link": "https://medium.com/loom-network/ethereum-will-be-the-backbone-of-the-new-internet-88718e08124f?source=search_post---------5", "post_date": "Jun 4, 2018", "readtime": "14 min read", "upvotes": "24K", "content": "Ethereum Will Be the Backbone of the New\u00a0InternetLoom Network is building our Layer 2 on top of Ethereum, instead of other blockchain platforms\u200a\u2014\u200aand here\u2019s\u00a0why.James Martin DuffyBlockedUnblockFollowFollowingJun 4, 2018Each month, another company publishes a whitepaper, claiming to have solved the scalability problems faced by Ethereum.These new blockchains claim to be better, faster, and smarter than Ethereum\u200a\u2014\u200athey say they can handle thousands, even millions of transactions per second (TPS), have no transaction fees, and have near-instant confirmation times.Yet at Loom Network, when we set out to build a platform for bringing large-scale decentralized mobile games and social networks to the mainstream, Ethereum was by far the most obvious choice to build on top of.In this article, I\u2019ll explain the reasons why we think Ethereum has already won the race to become the foundation of Web 3.0, and will become the fundamental base layer that all major DApp platforms will choose to build on top of in the future.Let\u2019s start with the most obvious.1. Ethereum has an order of magnitude more developers building on it than any other platform\u200a\u2014\u200aand this gap is widening by the\u00a0dayOur Ethereum code school CryptoZombies.io has now had over 207,623+ users since we launched it last November\u200a\u2014\u200aand this number has been growing consistently by over 30,000+ users per month, with no signs of slowing down.Truffle (a development framework for Etheruem) has had almost 550,000 downloads, growing at over 45,000+ users per month since January.Simply put, the number of developers building on top of Ethereum is not only growing\u200a\u2014\u200ait\u2019s accelerating.The number of developers using Ethereum\u2019s Truffle Suite each month is not only growing\u200a\u2014\u200ait\u2019s accelerating.That means if another blockchain platform wants to beat Ethereum in terms of developer adoption, it\u2019s not enough for it to catch up to where Ethereum is now\u200a\u2014\u200ait has to exceed Ethereum\u2019s growth rate moving forward.Why is developer adoption important?At the end of the day, it doesn\u2019t matter how many transactions per second your blockchain can handle if no one is actually using it.And in order to have applications worth using, you need to attract enough developers to build them.If you don\u2019t have developers building applications on your blockchain, you\u2019re effectively building a ghost\u00a0town.I\u2019m not sure what caused Steve Ballmer to go nuts on stage at this conference and create this classic moment in meme history, but I\u2019m including him here to emphasize my point: Developer adoption is everything.The blockchain platform that has the most developers building real-world applications on top of it will be the platform that gains the widest mainstream adoption. And not only does Ethereum have a massive head start in this area, but the gap is widening with each day that passes.And why is Ethereum attracting the most developers?2. Ethereum has better tools and infrastructure for DApp development than any other\u00a0platformTruffle. Infura. Web3.js. OpenZeppelin. Geth. Ganache. MetaMask. CryptoZombies. MyCrypto. Etherscan. ERC20 and ERC721.These are tools (among many others) that different developer teams have tirelessly poured hundreds of thousands of hours into\u200a\u2014\u200aand they\u2019re free to use for any Ethereum developer who wants to build a DApp on Ethereum.And this developer ecosystem is only growing as time goes on. Our team and at least a dozen others are in the process of building even more tools and infrastructure around Ethereum DApp development that will make Ethereum developers\u2019 lives even easier in the future.It\u2019s Metcalfe\u2019s law applied to developer infrastructure. The more developers building useful stuff, the easier (and more enjoyable) it becomes for new developers to build, and the effect compounds on itself.If you\u2019re a developer and you wanted to build a blockchain platform that replaces Ethereum, you would need to build equivalent versions of all of these tools on top of your own platform in order to compete with Ethereum\u2019s ease-of-use for developers.Or you could, you know\u2026 just build on top of Ethereum, and take advantage of all these things out of the box \ud83e\udd14But let\u2019s go one level\u00a0deeper.Let\u2019s talk about WHY developers would want to spend their time building these tools.And here\u2019s where we go really deep down the rabbit hole, and see where Ethereum really shines.Still with me? I haven\u2019t even gotten to the core of my argument\u200a\u2014\u200awe\u2019re just getting\u00a0started.3. Ethereum does not sacrifice decentralizationWhen it comes to Blockchains, there\u2019s a fundamental law called The Scalability Trilemma. It\u2019s kind of like a law of physics that says a blockchain can only have 2 of these 3 properties: decentralization, scalability, and security.What that means is, given the same level of security, if you want to increase a blockchain\u2019s scalability, you must sacrifice its decentralization.Why is this true?Due to the nature of blockchains, every single validator needs to run every single computation that occurs on the network to ensure its accuracy.So if you want the network to be sufficiently decentralized by having thousands of users running validators, the max number of transactions per second needs to be capped by what the average user\u2019s PC and network speed can handle.On the other hand, if you wanted to have the fastest, most scalable blockchain EVER, you should do the following:Require that all validators be supercomputersHave as few validators as possible on the network, to decrease the number of connections per nodePut all the validators in the same geographical area (country, data center) to decrease latency between nodesCan you see why that would be a really bad idea for a blockchain?And yet every project I\u2019ve seen that boasts a very high number of transactions per second is quietly making this decentralization tradeoff\u200a\u2014\u200amost of them are just not transparent about it to their users / investors.Why decentralization mattersThere\u2019s an excellent pair of blog posts from Chris Dixon and Spencer Bogart with the same title, \u201cWhy Decentralization Matters\u201d\u200a\u2014\u200aboth highly recommended reads.In his article, Chris Dixon makes a simple argument: Developers are a lot more incentivized to build on a platform that they know is NOT going to change the rules on them later down the line, taking away their audience and profits.If you build your application on Facebook or Apple\u2019s App Store, you have to trust that these platforms aren\u2019t going to ban you in the future, block certain users from using your app or seeing your updates, or start charging you higher fees to keep accessing the same audience.Ethereum, on the other hand, is what we call permissionless.Ethereum can be used by anyone for any purpose, without needing permission from\u00a0anyone.NO ONE can stop you from uploading a piece of code into the Ethereum blockchain, and NO ONE can stop your users from executing it.Let that sink in for a minute, because it\u2019s extremely powerful.For the first time in history, we have a platform that that no one can shut down and no one can censor\u200a\u2014\u200anot governments, not mega-corporations with tons of money, not the Rothschilds or Bogdanoffs or Reptilians or whatever conspiracy theory you subscribe to.If you build a DApp on Ethereum, no one can stop your users from anonymously accessing it.If you buy some tokens or digital items that are stored on the network, you are GUARANTEED they will stay there forever and no one will be able to take them away from you.And it\u2019s these permissionless and censorship-resistant properties of decentralized blockchains that have enabled us to have, for the first time in Internet history, true ownership of digital items.Yeah, I\u2019m talkin\u2019 about Ready Player One. With true ownership of digital items that cannot be taken away from you, blockchains enable us to do crazy new things in online games and virtual realities\u200a\u2014\u200alike having virtual avatars that aren\u2019t owned by any company and can persist between\u00a0worlds.More centralized platforms don\u2019t have this guaranteePretty much every platform that\u2019s been touted as the \u201cEthereum Killer\u201d has simply decided to trade off decentralization in favor of higher scalability, and advertise it as if it\u2019s a feature.And this tradeoff is tempting to make, because it seems like it\u2019s what the market wants.Users who don\u2019t know better complain about high fees and slow transaction times\u200a\u2014\u200aso we can\u2019t really blame developers for trying to give the market what it thinks it wants.In Spencer Bogart\u2019s Why Decentralization Matters, he says:It\u2019s not surprising that new users and developers have gravitated toward these newer networks: Improved throughput and functionality are things that users and developers can immediately appreciate, whereas the benefits of \u201cdecentralization\u201d as a feature are seemingly amorphous.In the short term, users may be tempted by the performance offered by more scalable blockchains, not realizing the importance of decentralization until a wake-up call brings everything crashing down.He continues:The reality, however, is that without decentralization these crypto networks lose their most important qualities of being \u201cpermissionless\u201d and \u201ccensorship-resistant\u201d\u200a\u2014\u200athat is, that anyone can use the network and anyone can build on top of them.After all, the entire point of a decentralized blockchain is to provide a hard-promise\u200a\u2014\u200aan immutable ledger with open, non-discriminatory participation. In a sense, we bear the inefficiency of decentralization because it is the only way to enable a network with these qualities.Other blockchains that achieve 1,000 TPS or higher do so by having a small, fixed number of nodes that validate all the transactions\u200a\u2014\u200a21 in the case of EOS, 101 in the case of Lisk.But a network run by 21 nodes requires that you trust these 21 publicly-identifiable nodes to not make changes to the protocol, or restrict certain people from using it for certain purposes in the future.It\u2019s a lot harder for a malicious entity to influence thousands of anonymous Ethereum nodes to censor certain transactions than it would be for them to gain influence over 15 out of 21 publicly-known block producers. Or for these 15 block producers to form a cartel and change the rules in ways that profit them, like what happens on centralized platforms. Or for a government or corporation to put pressure on these entities to censor certain transactions or users.As Spencer puts it:These semi-decentralized platforms are subject to the same social and economic pressures that motivate centralized platforms to censor certain users and activities, and therefore will trend toward the same outcome they\u2019re supposed to correct.If developers can\u2019t trust 100% that the base layer will always remain permissionless and censorship-resistant, then there\u2019s very little incentive for them to start building on the platform vs. simply using a traditional web server.By sacrificing base-layer decentralization in the nearsighted goal of attracting users by increasing throughput, these platforms have ironically undermined the entire motivation for using a blockchain in the first\u00a0place.And on top of that, increasing throughput on Layer 1 isn\u2019t even a scalable approach.It will get you some initial gains, but it\u2019s fundamentally bottlenecked by the nature of blockchains and not the way to achieve true scalability.Which brings me to my next point\u20264. It will be impossible to run all the world\u2019s decentralized applications on a single blockchain: Scaling has to occur on Layer\u00a02It would be absurd to try to run the Internet\u2019s 100 most popular games and social apps all on one giant supercomputer.Likewise, it\u2019s absurd to assume all the world\u2019s decentralized applications in the foreseeable future will run on one blockchain.Facebook alone needs hundreds of thousands of servers to function. Yet some people think a decentralized Facebook would share one massive blockchain with every other DApp in existence? \ud83e\udd14Let\u2019s look at some quick numbers.Facebook experiences 30,000+ Likes / Comments per second, the Nasdaq sees 20,000+ trades per second, and MMO games like PlayerUnknown\u2019s Battlegrounds handle over 1M concurrent users updating game state.It would only take a few dozen apps and games of this size before you\u2019re exceeding one million TPS in aggregate.And then what do you do when the number of users doubles?Clearly trying to run every single DApp on the same chain is not a practical approach.It doesn\u2019t matter if a blockchain can do a thousand transactions per second or a million transactions per second\u200a\u2014\u200ano single blockchain will be fast enough to handle all the world\u2019s decentralized applications on the same\u00a0chain.Scaling has to occur on Layer\u00a02The solution is obvious\u200a\u2014\u200athese applications will need to be split up across multiple blockchains.We realized this early on at Loom, when we presented the idea of application-specific sidechains. We foresaw that eventually some decentralized applications would grow popular enough to reach even 1/10th of Facebook\u2019s scale, and the only possible way to run them would be on their own dedicated chains.Of course, if you put these DApps that require thousands of transactions per second on their own standalone blockchains, they would be vulnerable to the same issues we discussed above in \u201cWhy Decentralization Matters.\u201dBut if you put them on a sidechain to a blockchain that is sufficiently decentralized (like Ethereum)\u200a\u2014\u200ayou get the best of both worlds.Sidechains provide higher scalability without sacrificing securityA sidechain can use a different consensus algorithm (like DPoS) optimized for DApps that require very high TPS or low-latency, while storing any tokens or data requiring a high level of security on the main chain.This way, even though the sidechain is less decentralized than the main chain, the amount of trust required by users is minimized, since they have the option to move anything of real value to the main chain for safe keeping. (Even more so if you secure the Layer 2 assets with Plasma Cash).By putting your DApp on a sidechain to a decentralized mainnet, you get all the benefits of higher scalability offered by a faster blockchain, while maintaining the same trust and security guarantees provided by the decentralized base layer.Spencer, in his article, arrives at the same conclusion we came to:The path forward: Highly decentralized base layer with increased centralization (and efficiency) on higher layersAnd in fact, this seems to be the same model envisioned by Vitalik Buterin himself:You could run StarCraft on the blockchain. Those kinds of things are possible. High level of security and scalability allows all these various other things to be built on top. Ethereum is a secure base layer that doesn\u2019t have too many features.~Vitalik ButerinEthereum provides a secure base layer for Layer 2 solutions to build on top\u00a0ofNow we understand that:Scaling needs to happen on Layer 2The most important property of a Layer 1 is decentralizationSo the real question is, if not Ethereum, what base layer would you build your Layer 2 on top of?We\u2019ve already seen that very few chains do decentralization as well as Ethereum does.According to a recent ConsenSys report, there are \u201cjust under 17,000 nodes running the Ethereum blockchain across six continents, making it the most decentralized blockchain platform in existence.\u201dAnd any additional features another blockchain might offer, such as higher throughput, gas-less transactions, low-latency transactions, etc., can simply be implemented as Layer 2 services on Ethereum.In fact, those features are exactly what we\u2019re building at Loom Network with ZombieChain\u200a\u2014\u200aa Layer 2, gas-free, low-latency DPoS sidechain to Ethereum.And that\u2019s just one of many Layer 2 scaling solutions under development.It\u2019s hard to fathom why a developer would want to replace Ethereum instead of simply building on top of it\u00a0\ud83e\udd14Ignoring the obvious motivation that doing so allows them raise hundreds of millions of dollars in an ICO\u2026 \ud83d\ude09\u201cIt\u2019s like Ethereum\u2026 but\u00a0BETTER.\u201dIt\u2019s kind of like reinventing the wheel.Sure, you might be able to build a slightly better base layer that still provides sufficient decentralization AND throws in some additional features.But then you\u2019d somehow need to convince all the developers to jump ship to use an untested platform\u200a\u2014\u200aand in the meantime, Ethereum developers could take whatever good ideas you had, and implement them on a Layer 2 chain on top of Ethereum.It\u2019s also extremely risky.If a Layer 2 platform gets hacked or exploited, users\u2019 loss is minimized because the majority of tokens and data of value is still safely stored on the Layer 1 (Ethereum).But if you build a new Layer 1 blockchain that stores tokens that users pay real money for, the odds that your code will be exploit-free out the gate are slim\u200a\u2014\u200aand in the case of an exploit, your users potentially have billions of dollars at stake.In programming circles, there\u2019s a rule that states \u201cDon\u2019t roll your own crypto.\u201dI\u2019m going to go ahead and predict that after we see the first major blockchain exploit in which millions or billions of dollars in token value evaporate into thin air, we\u2019ll start to hear a similar refrain among blockchain engineers:Don\u2019t roll your own Layer\u00a01.Which brings me to my final point\u20265. New platforms are unproven, while Ethereum\u2018s security has already stood the test of\u00a0timeAt the time of this writing, there\u2019s $61 billion in circulating ETH.That\u2019s a LOT of financial incentive for someone to try to hack / exploit the network.Thousands of aspiring h4x0rs over the past 3 years, trying and failing to find an exploit in\u00a0EthereumAnd yet to this day, almost 3 years after Ethereum\u2019s mainnet launch, no one has managed to find an exploit in the platform\u2019s security.Note: Exploits have been found in individual smart contracts that developers have deployed to Ethereum, but I\u2019m talking about the core platform itself.The more time that passes without an exploit being found (despite a lot of people trying), the higher the likelihood that the platform is secure and won\u2019t ever be exploited in the future.This is similar to what Nassim Taleb called The Lindy Effect:The Lindy effect is a concept that the future life expectancy of some non-perishable things like a technology or an idea is proportional to their current age, so that every additional period of survival implies a longer remaining life expectancy.Basically, when a new blockchain platform springs up, developers will be reluctant to use it because it hasn\u2019t stood the test of time.What if it\u2019s exploitable? What if it\u2019s not truly decentralized? Why should I invest all my time building my DApp on top of it when I\u2019m not sure if it\u2019ll be around two years from now?The longer the chain survives without suffering a major exploit, the more trustworthy and legitimate it becomes in developers\u2019 eyes.Yet again, Ethereum has a massive head start\u00a0here.For a new blockchain platform that launches today, it will take a few years before it has survived long enough for developers to view it as trustworthy.But in that same time, Ethereum will continue to race ahead in terms of developer adoption and supporting infrastructure. (Not to mention real, live DApps and end-users).Because Ethereum has such a long head start on all other smart contract platforms, it will always appear to be a better option from a security standpoint compared to a younger blockchain.Especially when, as we mentioned before, any new feature a new smart contract platform adds that might tempt developers away can simply be built on Layer 2\u200a\u2014\u200aand still keep the security promises of Ethereum.Conclusion: Ethereum isn\u2019t perfect\u200a\u2014\u200abut at this point, it\u2019s hard to imagine it being displaced as the de facto Layer 1 for decentralized applicationsJavaScript isn\u2019t a perfect programming language, and for the longest time it was plagued with some pretty serious problems. But that didn\u2019t stop it from becoming the de facto programming language of Web 2.0.I predict we\u2019ve already reached the tipping point where we\u2019ll see the same thing happen with Ethereum for Web 3.0.For all its flaws and short-comings, it also has some of the smartest minds in the industry working on solving them\u200a\u2014\u200aand building tools and infrastructure to make them less of a hindrance.And thus we come full circle to my developers argument. (Go ahead, you can watch that Steve Ballmer clip again. I won\u2019t tell anyone. \ud83d\ude09)It\u2019s possible that, in the future, another project will spring up that offers some significant advantages over Ethereum, and manage to get all the Ethereum developers to jump ship\u2026But I wouldn\u2019t bet my ERC20s on it.", "responses": "97"}, {"title": "A beginner\u2019s guide to\u00a0Ethereum", "author_name": "Linda Xie", "link": "https://blog.coinbase.com/a-beginners-guide-to-ethereum-46dd486ceecf?source=search_post---------6", "post_date": "Feb 23, 2017", "readtime": "5 min read", "upvotes": "7.4K", "content": "A beginner\u2019s guide to\u00a0EthereumLinda XieBlockedUnblockFollowFollowingFeb 23, 2017What is Ethereum?According to the Ethereum website, \u201cEthereum is a decentralized platform that runs smart contracts.\u201d This is an accurate summary but in my experience when first explaining Ethereum to friends, family, and strangers it helps to compare Ethereum to Bitcoin since a lot of people have at least heard about Bitcoin before. This beginner\u2019s guide should help those who are new to Ethereum to understand the high level differences between the two.ComparisonSimply put, Bitcoin can be described as digital money. Bitcoin has been around for eight years and is used to transfer money from one person to another. It is commonly used as a store of value and has been a critical way for the public to understand the concept of a decentralized digital currency.Ethereum is different than Bitcoin in that it allows for smart contracts which can be described as highly programmable digital money. Imagine automatically sending money from one person to another but only when a certain set of conditions are met. For example an individual wants to purchase a home from another person. Traditionally there are multiple third parties involved in the exchange including lawyers and escrow agents which makes the process unnecessarily slow and expensive. With Ethereum, a piece of code could automatically transfer the home ownership to the buyer and the funds to the seller after a deal is agreed upon without needing a third party to execute on their behalf.The potential for this is incredible! Think of the numerous applications that act as a third party to connect you with others based on some set logic (e.g. Uber, Airbnb, eBay). Many of the centralized systems we use today could be built in a decentralized manner on Ethereum. With Ethereum you can make these transactions trustless which opens up an entire world of decentralized applications. Decentralization is important because it eliminates single points of failure or control. This makes internal collusion and external attacks impractical. Decentralized platforms cut out the middlemen which ultimately leads to lower costs for the user. There are a few decentralized applications I am particularly excited about.IdentityThere are many websites a person can create a digital identity on (e.g. Facebook, Twitter, LinkedIn). This is cumbersome to manage and at the end of the day you are not in full control of your information as it is still owned by a centralized entity. With Ethereum you can have a decentralized identity management system like uPort that allows you to be in full control of your data. There is no centralized server that has access to your private data, can get hacked, edit your information, or get shut down.Right now in the US we have credit bureaus (e.g. Experian, TransUnion, Equifax) that other institutions like banks rely on to tell them your credit. Credit bureaus can put certain groups such as international and young people at a disadvantage. Lending Club, a peer to peer lending platform, addresses the problem of traditional financial services relying solely on FICO scores by offering additional data points like home ownership, income, and length of employment. Ethereum applications like uPort can go one step further by allowing you to control your own data, identity, and reputation.Computing Power / StorageConsider all of the spare computing power and storage a regular person might have on their computer. If it is not being used, then why not make it available to someone else? It is a similar concept to renting out a spare bedroom on Airbnb. An added benefit to using a decentralized application is that there are no centralized servers that are prone to censorship.There are several projects in development to allow people to rent spare computing power and storage from those that have it. Filecoin allows people to rent out their computer storage to others and get paid for it. Similarly, Golem allows people to rent out their computing power. Ideas like these are not completely new. Since 2000, Folding@home has allowed volunteers to contribute spare computing power for scientific research at Stanford University. Now this concept can be monetized and applied to other industries, potentially lowering costs.Social MediaAkasha is a decentralized social media platform. There are no centralized servers so no single party has complete control over the content. This means that the platform is resistant to censorship. An added benefit of building a decentralized application for social media on Ethereum is that one can create a system that financially rewards high quality content. This is like Reddit but you can send small amounts of money to the poster instead of upvotes.Rights ManagementDecentralized applications may be used to bring transparency to multiple industries. For example SingularDTV offers an entertainment rights management platform which allows transparent distribution of funds to the creators, investors, crew, actors, and others involved in a project. There is no centralized party which can prevent a certain group from getting access to their funds because the terms are enforced by code. Everyone will get paid according to the terms discussed up front and no third party is needed to mediate.Managing CompaniesA time consuming and often expensive aspect of starting a new company is allocating and managing shares. As companies grow and raise more funds they eventually need to issue and move shares around. Aragon is an example of a promising project that has an easy to use interface for managing the company\u2019s cap table and raising capital.Raising CapitalLastly, one of the major use cases for Ethereum is decentralized fundraising from a global network of investors. Crowdsales lower the barrier to entry for developers working on high risk projects. Since Ethereum launched in July 2015 we have seen unprecedented amounts of funds raised for decentralized applications through crowdsales. Ethereum itself was funded through a crowdsale that raised $18 million in bitcoin and a project called The DAO raised $160 million. Some other notable crowdsales are shown below:Amount raised at time of crowdsale (not implied valuation)For more information about how these tokens work, refer to How to Raise Money on a Blockchain with a Token, Blockchain Token Securities Law Framework, and The difference between App Coins and Protocol Tokens.ResourcesThis post only covered a handful of Ethereum\u2019s countless use cases. The space is constantly growing and innovating. Below are some links that may help you understand Ethereum further and keep up with the exciting news.Understanding EthereumEthereum is the Forefront of Digital CurrencyApp Coins and the Dawn of the Decentralized Business ModelEthereum whitepaperBits on Block Gentle Introduction SeriesProof of Stake FAQKeeping up with EthereumEthereum SubredditWeek in Ethereum NewsThe ControlSmith + CrownThe Dapp DailySilicon Valley Ethereum Meetup (check out your local meetup)Thank you to Will Warren, Fred Ehrsam, and many Coinbase employees especially Jordan Clifford, Reuben Bramanathan, Ankur Nandwani, Dan Romero, and Jeremy Henrickson.", "responses": "50"}, {"title": "Ethereum Limited Private Sale Procedure", "author_name": "Ethereum Limited", "link": "https://medium.com/@ethereumlimited/ethereum-limited-private-sale-procedure-9401b7188841?source=search_post---------7", "post_date": "Jul 14, 2018", "readtime": "", "upvotes": "4.4K", "content": "Ethereum Limited Private\u00a0SaleEthereum Limited Private Sale ProcedureEthereum LimitedBlockedUnblockFollowFollowingJul 14, 2018Ethereum Limited will conduct its Private Sale today, July 15, 2018 at 15:00 GMT.We allocated only 8% of the maximum supply or 800,000 tokens at $0.40 each for the Private Sale.A minimum of $200 purchase is required with no maximum purchase amount unlike in the ICO which is going to be limited.4 Easy Steps to Buy ETHL in the Private\u00a0Sale1. Log in to your ETHL account. Register here https://goo.gl/ymw9t2.\u00a02. Deposit at least $200 worth of BTC or ETH.\u00a03. The option to get whitelisted will appear after the deposit is confirmed.\u00a04. Purchase your ETHL tokens.Whitelist option will appear once minimum deposit amount is\u00a0met.For more information about Ethereum Limited, check out our social media accounts below.Website\u00a0https://goo.gl/ymw9t2Whitepaper\u00a0https://goo.gl/TTZDmkFacebook\u00a0https://www.facebook.com/ethereumlimited/Twitterhttps://twitter.com/EthereumLimitedInstagramhttps://www.instagram.com/ethereumlimited/Reddithttps://www.reddit.com/user/ethereumlimitedLinkedInhttps://www.linkedin.com/in/ethereumlimitedMedium\u00a0https://www.medium.com/@ethereumlimitedTelegram Chat\u00a0https://www.t.me/EthereumLimitedTelegram Channel\u00a0https://www.t.me/EthereumLimitedChannelANN\u00a0https://bitcointalk.org/index.php?topic=4521586Unofficial ANN\u00a0https://bitcointalk.org/index.php?topic=4576117Bounty Program\u00a0https://bitcointalk.org/index.php?topic=4539121", "responses": "1"}, {"title": "Announcing EnjinX: Ad-Free, User-Friendly Ethereum Blockchain Explorer", "author_name": "Ilija Rolovi\u0107", "link": "https://blog.enjincoin.io/announcing-enjinx-ad-free-user-friendly-ethereum-blockchain-explorer-3d679ba034c8?source=search_post---------8", "post_date": "Dec 27, 2018", "readtime": "8 min read", "upvotes": "26K", "content": "Announcing EnjinX: Ad-Free, User-Friendly Ethereum Blockchain ExplorerEnjinX is a modern, fast, responsive web app for exploring Ethereum, ERC-20 tokens & blockchain data. Bitcoin, ERC-1155, ERC-721, Litecoin & Dogecoin support will come in 2019, making EnjinX the first universal blockchain explorer\u2014ever.Ilija Rolovi\u0107BlockedUnblockFollowFollowingDec 27, 2018After more than a year of development, we are overjoyed to announce EnjinX\u200a\u2014\u200aan Ethereum explorer designed with a pivotal mission in mind: to speed up mainstream adoption of blockchain technology by making its data easily accessible to everyone.We created it to support Ethereum\u2019s mission to together build a more globally accessible, more free, and more trustworthy Internet.Built to advance the growing Ethereum ecosystem, EnjinX is ultra-modern, minimal, usable, fast, and ad-free\u200a\u2014\u200amaking the understanding and use of Ethereum as simple, streamlined, and enjoyable as possible.Check out EnjinX on Product Hunt\u200a\u2014\u200aand join the Launch Giveaway.", "responses": "686"}, {"title": "The Ethereum-blockchain size has exceeded 1TB, and yes, it\u2019s an\u00a0issue", "author_name": "StopAndDecrypt", "link": "https://hackernoon.com/the-ethereum-blockchain-size-has-exceeded-1tb-and-yes-its-an-issue-2b650b5f4f62?source=search_post", "post_date": "May 23, 2018", "readtime": "21 min read", "upvotes": "16.9K", "content": "The Ethereum-blockchain size has exceeded 1TB, and yes, it\u2019s an\u00a0issue(TL;DR: It has nothing to do with storage space\u00a0limits)StopAndDecryptBlockedUnblockFollowFollowingMay 23, 2018IntroductionThis is an indirect response to the following article by Afri Schoedon, a developer for the Parity Ethereum client, written less than a year ago:The Ethereum-blockchain size will not exceed 1TB anytime soon.Once a month users post a chart on `r/ethereum` predicting the blockchain size of Ethereum will soon exceed 1 TB. I\u2026dev.toI want to make it clear that I have respect for almost all of the developers in this space, and this is not intended to attack anyone. It\u2019s meant to elaborate on what the real concerns are and explain how the original article does nothing to address those real concerns. I would actually love to see something that does, because then we can throw it into Bitcoin. That being said, there are some developers who mislead, obscure, ignore, and attack via protocol confusion like what occurred with 2X and the replay protection drama, but most aren\u2019t like that. You can\u2019t watch something like this or read something like this and hate these developers. They\u2019re genuinely trying to fight the same fight as us, and I believe Afri is part of the latter group, not the former.https://github.com/paritytech/parity/issues/6372If you\u2019ve read my other articles you\u2019re going to see some small bits of that information repeated. Up until now I wrote primarily about Bitcoin from a \u201cmaximalist\u201d perspective (still am) and focused on conflicts within that community. What you may find interesting if you only watch from the corner of your eye, is that the reason for \u201cconflict\u201d here is exactly the same. I\u2019ll even use Proof-of-Stake as further leverage for my argument without criticizing it.Edit: It seems like people are not reading the subtitle and misunderstanding something. This is not about archival nodes. This is about fully validating nodes. I don\u2019t care if you prune the history or skip the line to catch-up with everyone else. This is about about staying in sync, after the fact. Light nodes aren\u2019t nodes.This has become a 2-part article. When you\u2019re done with this article you can read the follow-up one:Sharding centralizes Ethereum by selling you Scaling-In disguised as Scaling-OutThe differences between Light-Clients & Fully-Validating Nodesmedium.comIndexMy Argument: Ethereum\u2019s runaway data directory size is just the tip.My Prediction: It will all work, until it doesn\u2019t.My Suggestion: Transpose.My Argument: Larger blocks centralize validators.It\u2019s that simple. It\u2019s the central argument in the entire cryptocurrency community in regards to scaling. Not many people familiar with blockchain protocol actually deny this. The following is an excerpt from what I consider to be a very well put together explanation of various \u201cLayer 2\u201d scaling options. (Of which, the only working one is already implemented on Bitcoin.)https://medium.com/l4-media/making-sense-of-ethereums-layer-2-scaling-solutions-state-channels-plasma-and-truebit-22cb40dcc2f4That article is written by Josh Stark. He gets it. His company even announced a project that\u2019s meant to mirror the Lightning Network on Ethereum. (Which is oddly coincidental given Elizabeth Stark\u2019s company is helping build Lightning.)The problem? Putting everything about Proof of Stake completely to the side, the incentive structure of the base layer is completely broken because there is no cap on Ethereum\u2019s blocksize, and even if one was put in place it would have to be reasonable, and then these Dapps wouldn\u2019t even work because they\u2019re barely working now with no cap. It doesn\u2019t even matter what that cap is set at for this argument to hold because right now there is none in place.Let\u2019s backtrack a bit. I\u2019m going to briefly define a blockchain and upset people.Here is what a blockchain provides:An immutable & decentralized ledger.That\u2019s it.Here is what a blockchain needs to keep those properties:A decentralized network with the following prerogatives:Distribute my ledger\u200a\u2014\u200aValidateAppend my ledger\u200a\u2014\u200aWorkIncentivise my needs\u200a\u2014\u200aTokenHere is what kills a blockchain:Any feature built into the blockchain that detracts from the network\u2019s goals.A blockchain is just a tool for a network. It\u2019s actually a very specific tool that can only be used by a very specific kind of network. So much so that they require each other to exist and fall apart when they don\u2019t co-operate, given enough time. You can build on top of this network, but quite frankly anything else built into the base layer (L1) that negatively affects the network\u2019s ability to do its job is going to bring the entire network to its knees\u2026given enough time.Here\u2019s an example of an L1 feature that doesn\u2019t effect the network: Multisig.It does require the node to do a bit of extra work, but it\u2019s \u201cmarginal\u201d. The important thing to note is hardware is not the bottleneck for these (properly designed) networks, network latency is. Something as simple as paying to a multi-signature address won\u2019t tax the network any more than paying to a normal address does because you\u2019re paying on a per-byte basis for every transaction. It\u2019s a blockchain feature that doesn\u2019t harm the network\u2019s ability to continue doing its job because the data being sent over the network is (1)paid for per-byte, and (2)regulated via the blocksize cap. Regulated, not \u201cartificially capped\u201d. The blocksize doesn\u2019t restrict transaction flow, it regulates the amount of broadcast-to-all data being sent over the network. Herein lies the problem.When we talk about the \u201cdata directory\u201d size, it\u2019s a direct reference to the size of the entire chain of blocks from the original genesis block, but taking this at face value results in the standard responses:Disk space is cheap, also see Moore\u2019s Law.You can prune the blockchain if you need to anyway.You don\u2019t need to validate everything from the genesis block, the last X amount of blocks is enough to trust the state of the network.What these completely ignore is the data per-second a node must process.You can read my entire article about Moore\u2019s Law if you want, but I\u2019ll excerpt the important part below. Over in Oz they try and argue \u201cyou don\u2019t need to run a node, only miners should decide what code is run\u201d. It\u2019s borderline absurd, but I won\u2019t have to worry about that here because Proof of Stake completely removes miners and puts everything on the nodes. (They always were, but now there aren\u2019t miners to divert the argument.)Moore\u2019s Law is a measure of integrated circuit growth rates, which averages to 60% annually. It\u2019s not a measure of the average available bandwidth (which is more important).Bandwidth growth rates are slower. Check out Nielsen\u2019s Law. Starting with a 1:1 ratio (no bottleneck between hardware and bandwidth), at 50% growth annually, 10 years of compound growth result\u2019s in a ~1:2 ratio. This means bandwidth scales twice as slow in 10 years, 4 times slower in 20 years, 8 times in 40 years, and so on\u2026 (It actually compounds much worse than this, but I\u2019m keeping it simple and it still looks really bad.)Network latency scales slower than bandwidth. This means that as the average bandwidth speeds increase among nodes on the network, block & data propagation speeds do not scale at the same rate.Larger blocks demand better data propagation (latency) to counter node centralization.Strictly from an Ethereum perspective with a future network of just nodes after the switch to Proof of Stake, you\u2019d generally want to ensure node centralization is not an issue. The bottleneck for Bitcoin\u2019s network is its blocksize (as it should be), because it ensures the growth rate of network demands never exceed the growth rate of external (and in some cases indeterminable) limitations like computational performance or network performance. Because of Ethereum\u2019s exponentially growing blocksize, the bottleneck is not regulated below these external factors and as such results in a shrinking and more centralized network due to network demands that increasingly exceed the average users hardware and bandwidth.Bitcoin SPV clients aren\u2019t nodes. They don\u2019t propagate blocks or transactions around the network, they leech, and all that they leech are the block headers.Remember this because it\u2019s going to get very important later in this\u00a0article:You can put invalid transactions into a block and still create a valid block header.If the network is controlled by 10 FULL-nodes, you only need half of them to ignore/approve invalid transactions so long as the header is valid.This is why validating the transactions matter from a network perspective, and why you need a large decentralized network. It doesn\u2019t matter from my grandmas perspective and that\u2019s fine, but we aren\u2019t talking about my grandma. We\u2019re talking about ensuring the network of working and actively participating nodes grows, not shrinks.This node was participating until it got cut off due to network demand growth:https://www.reddit.com/r/ethereum/comments/58ectw/geth_super_fast/d908tik/It\u2019s not uncommon and it continues to happen:https://github.com/ethereum/go-ethereum/issues/14647Notice how the solution is to \u201cfind a good peer\u201d or \u201cupgrade your hardware\u201d? Good peers shouldn\u2019t be the bottleneck. Hardware shouldn\u2019t be either. When all of your peers are hosed up by so many others leeching from them (because the good peers are the ones doing the real work), you create a network of masters and slaves that gradually trend towards only one master and all slaves. (If you don\u2019t agree with that statement you need to make a case for how this trend won\u2019t subside in the future because currently that\u2019s the direction this is going towards and it won\u2019t stop unless a cap is put in place. If your answer is sharding, I address that fairy dust at the end.) It\u2019s the definition of centralizing. Unregulated blocks centralize networks. Large (but capped) blocks are only marginally better, but set a precedent for an ever increasing block size, which is equally as bad because it sets a precedent of increasing the size \u201cin times of need\u201d, which mirrors the results of unregulated blocksizes. This is why we won\u2019t budge on the Bitcoin blocksize.I tweeted about it a few times but clearly I didn\u2019t think that was enough. My Twitter reach doesn\u2019t really extend much into the Ethereum space.That chart is symbolic and not representative of any actual numbers. It only serves to visually express the point I\u2019m trying to make. To clarify, the green curve represents an aggregated average of the various demands of the Ethereum Network. At some point your node will fall out of sync because of this or a blocksize cap will be put in place. It could happen now, or it could happen in 10 years, or in 50 but your node will fall out of sync at some point at this rate. It will never happen in Bitcoin. You can deny it now all you want, but this article will be here for when it happens, and when it does asinine Dapps like CryptoKitties, Shrimp Farm, Pepe Farm, and whatever comes next will cease to function. This is exactly what happened to Ryan Charles\u2019 service Yours.org that he originally built on Bitcoin. The only difference being Bitcoin already had the cap in place and Ryan either didn\u2019t foresee this from a lack of understanding, or for some reason he expected the blocksize to keep getting raised. Instead of reassessing he doubled down on BCash, meanwhile Yalls.org took his concept and implemented the same exact thing on top of Bitcoin\u2019s Lightning Network.My Prediction: Ethereum will implement a blocksize cap and it will race BCash to both of their\u00a0deaths.http://bc.daniel.net.nz/ \u2190No longer updating statistics, chart is edited & extrapolated using REAL current\u00a0data.https://ethereum.stackexchange.com/questions/143/what-are-the-ethereum-disk-space-needsThe chart above isn\u2019t even a prediction. This is me filling in the blanks (in yellow) on what was the last remaining graph that compared both chains data directories, and then extrapolating from it. Here\u2019s what we know:Bitcoin\u2019s future is predictable. The blockchain growth & network demands will always be linear. (Ideal)The amount of data an Ethereum node is required to process per second is through the roof and climbing. (Unideal)If Ethereum on-chain demand freezes where it is now, blockchain growth will continue the linear trend highlighted by that dotted line. (Very bad)If Ethereum on-chain demand continues to grow exponentially the amount of people complaining about their node going out of sync will reach a tipping point. (There\u2019s only one option when this occurs.)That graph above? The owner stopped trying to maintain the node. Physical demands are an issue as well, like time constraints in your personal life. Servicing requirements need to be low, not high, not reasonable\u2026low.Do you know what I do to service my Bitcoin/Lightning node? I leave my laptop on. That\u2019s it. If I have to reboot I shut down the services, reboot, and start them back up again. Day to day I use my laptop for an assortment of other tasks, none of which inhibit its ability to run the node software. With all due respect if a change was implemented and forced on me that resulted in my node no longer being compatible with the network and unable to maintain a sync, I would flip out over the idiocy that allowed that, if I was a misinformed individual. Fortunately I\u2019m not and I signed up for a blockchain with foresight (Bitcoin).The problem? I don\u2019t think most of the people running Ethereum nodes are informed enough to know what they signed up for. I don\u2019t think they understand the fundamental incentive models, and I don\u2019t think they fully realize where and why they break down with something as simple as not having a blocksize cap. Hopefully this article will succeed at teaching that.So what happens when that psychological tipping point is reached? Do people give up? How many nodes have to be lost for this to occur? The explorer websites aren\u2019t even tracking this data anymore. Etherscan.io is no longer tracking full or fast sync directories, Etherchain.org says: Error: Not FoundEtherscan also isn\u2019t letting you zoom out on the memory pool, the queue of transactions waiting to be included into blocks. The reason fees go up is because this queue builds up. You should be able to see this over time. Here\u2019s one that tracks Bitcoin\u2019s mempool, side by side with the Etherscan.io one:https://jochen-hoenicke.de/queue/#1,4d /// https://etherscan.io/chart/pendingtxBoth of these charts are monitoring the rough total pending transaction counts on these networks, and the scales are about the same, 4/5 days respectively. The difference? I can zoom out on the Bitcoin one and see the entire history. Why does this matter? Psychology matters when your network has no regulated upper boundaries. Here what ours looks like zoomed out:See what I mean? See how scale matters? What if I zoomed out on Ethereum\u2019s mempool and saw that it was at the top of an ever growing mountain? I\u2019m not saying that\u2019s where it is today, but I am saying that this information needs to stop being obscured. I\u2019m also saying that if/when it ever is unobscured, it\u2019ll be too late and nothing can be done about it anyway. It\u2019s already too late now.Let\u2019s take a look at block and transaction delay on Bitcoin\u2019s network. Below you\u2019ll see two charts. The 1st one is how long it takes for a block to spread across the network, the 2nd is for a transaction. Transactions are processed by the nodes (all 115,000 of them) and held onto until a valid block is created by a miner and announced to the network.Block propagation times have dropped drastically because of very well designed improvements to the software. Transactions are validated when they come in and kept in the mempool. When a new block is received, it\u2019s quickly cross referenced with all the transactions you already have stored, and very rarely includes many transactions you haven\u2019t received yet. This allows your node to validate that block extremely fast and send it out to all your other peers.Transaction times on the other hand have slowly gone up but seem to be stabilizing. They\u2019ve been \u201cintentionally\u201d allowed to go up as a result of privacy improvements in the software, but that\u2019s a worthy tradeoff because blocks are 10 minutes apart on average anyway, so a delay of 16 seconds is acceptable. I\u2019d imagine that once blocks are consistently full this growth will level off because transaction fees from the blocksize cap will self-regulate the incoming flow of transactions, assuming no other protocol changes are made.Keep in mind, none of this information is available for Ethereum:https://dsn.tm.kit.edu/bitcoin/Bitcoin is designed with this in mind. The transaction count queue goes up but the blocks are regulated. People end up learning how to use this tool we call a blockchain the right way over time and transaction flow stabilizes. With an unregulated tool you end up with a bunch of people chaotically trying to use that tool all at once for some random \u201cfeature\u201d like CryptoKitties that ends up grinding the entire thing to a halt until the backlog is processed. All of the Ethereum full-nodes need to process every single one of these contracts. You might not need to, and they might tell you that you don\u2019t need to, but someone does need to. So how many of them are there? What do higher fees do? They deter stupid Dapps like CryptoKitties at the base layer. There is absolutely zero need for them, and larger more \u201cfunctional ideas\u201d will only experience the same thing but much worse because blockchains don\u2019t scale.These Dapps are crippling your blockchain because it\u2019s unregulated:But that was the promise though, right? That was the dream. That was the entire premise of the Ethereum blockchain: Bitcoin, but better. It\u2019s not.Clearly unregulated blocks don\u2019t result in infinite transactions, but the real takeaway here is the network can\u2019t even physically handle the current amount, there just aren\u2019t enough nodes capable of processing that information and relaying it in a timely fashion. Do you know how many Ethereum nodes there are? Do you really know? The Bitcoin network has about 115,000 nodes, of which about 12,000 are listening-nodes. Almost all of them are participating nodes, because that\u2019s regulated too. What a listening-node is, compared to a non-listening, doesn\u2019t matter here because they are all participating in sending and receiving blocks to and from the peers they are connected to. The default is 8, the client won\u2019t even let you get more than 8 unless you add them manually. This was intentionally put in place, and it\u2019s recommended you don\u2019t add more because it\u2019s unhealthy for the network:https://bitcoin.stackexchange.com/a/8140Remember this from earlier?Find a good\u00a0peer.That\u2019s not how you fix things. This is a prime example of why a chain that allows participants the freedom to be selfish via lack of regulation is bad. This only has one outcome: Master & Slave nodes, where the limited masters serve all the slave nodes. Sounds decentralized, right? Especially when the financial requirements to be one of those master nodes keeps going up\u2026To be fair, and as an aside: This is the exact criticism the Lightning Network gets, but it\u2019s a completely different type of network. Blockchain networks are peer-to-peer broadcast networks. State-Channel networks like Lightning are peer-to-peer anycast networks. The way information is being sent is completely different. Your refrigerator has enough hardware to be a Lightning node. Lightning \u201cHub & Spoke\u201dcriticisms are with channel balance volumes. Hub & Spoke is equivalent to the Master & Slave issues, but with channel balances there is no bottleneck on the data. You just standardize the Lightning clients to open X amount of channels with X amount funds in each, then network forms around that standard, completely avoiding hubs or spokes, just like the Bitcoin clients standardize 8 peers. The Lightning Network is new so we don\u2019t know what that standard should be yet because we have almost zero data we can measure. /endlightningdefenseSpeaking of zero data we can measure, why are these the only charts for Ethereum node counts? Where\u2019s the history? How many of these nodes used fast/warp sync and never fully validated it all? You don\u2019t need to store it all because you can prune, but again, how many are fully validated? How many are just light clients syncing only the block headers?https://www.ethernodes.org/network/1It\u2019s funny how propaganda sites like Trustnodes pushing BCash conspiracies publish pieces like the following one with bold-faced lies, then it gets circulated around and no one outside the flow of correct information questions it:I\u2019m not linking to a BCash propaganda site.There are 115,000 Bitcoin nodes and they all fully validate:http://luke.dashjr.org/programs/bitcoin/files/charts/software.htmlSo what do you do now? What do you do as an individual who slowly comes to this realization? What do you do as an individual who has no idea what\u2019s going on? What happens to a network that is primarily made up of these individuals that slowly leave (not literally, but as a participating node downgrading to a light-node)? How many participating nodes are left? How many nodes hold a full copy of the original genesis block? What happens when 5 data centers are serving the entire network of slaves (light-nodes) the chain? Who\u2019s validating those transactions when everyone is only syncing the block headers? You can sit there and repeat time and time again that \u201cthe network only needs the recent state history to be secure\u201d all you want, but when your network is broken from the bottom up and most nodes can\u2019t even keep up with the last 1,000 blocks, how is that secure in any way?The takeaway from all of\u00a0this:Ethereum\u2019s blocksize growth is bad because of node processing requirements, not how much they need to store on a hard-drive.To prevent complete collapse of the network, Ethereum will need to implement a reasonable blocksize cap.Implementing a blocksize cap will raise fees and in return prevent many Dapps from functioning, or severely slow down. Future Dapps won\u2019t work.If Dapps don\u2019t work, Ethereum\u2019s entire proposition for existing is moot.Where does BCash fit\u00a0in?BCash just increased their blocksize from 8MB to 32MB, and is adding new OP_CODES soon to allow \u201cfeatures\u201d like ICOs and BCash Birdies\u2122.BCash has \u201croom to grow\u201d coming from a completely understressed blockchain, while Ethereum is a completely overstressed blockchain.https://txhighway.cashEthereum is dying and BCash is trying to be exactly like it while ignoring all the warning signs we\u2019ve been trying to bring to everyones attention. They wanted bigger blocks and ICOs, they got it now. Both chains will become the same thing: Centrally controlled blockchains that will slowly die, but given temporary life support via gradual blocksize increases to continue supporting fraudulent utility tokens, until the entire system breaks down when no one can run a node.My Suggestion: Stop using centralized blockchains.This section has been extensively expanded on in the follow-up article. The diagrams have been completely redone. Reading that is a must after this.The only one in that room that runs a fully validating node is the one that\u2019s simultaneously holding up the painting, and the Ethereum network. I\u2019ve managed to make no mention of Vitalik this whole article so I can focus on the technicalities, but if this picture (or the original) doesn\u2019t represent the essence of the Ethereum space then I don\u2019t know what does. I applaud Vitalik for calling out scammers like Fake Satoshi, yet at the same time he equally misrepresents the functionality claims of Ethereum.Oh, and that golden goose egg you call sharding? It\u2019s hocus pocus. Fairy dust. It\u2019s the same node centralization issue with a veil thrown in front of it. It\u2019s effectively force feeding you the Master & Slave network I just warned you about, under the disguise of \u201cnew scaling tech\u201d.Forgetting Vitalik\u2019s diagram he put out because it\u2019s meaningless, let\u2019s try to simplify Ethereum\u2019s current network first. The diagram below essentially shows all the light-clients in pink and the \u201cgood\u201d full-nodes in purple. Your fast/warp sync node may be purple now until it can\u2019t or you give up on upgrading/maintaining and just use the light client feature, then it joins the pink group.As time moves forward, the pink nodes increase while the purple decrease. This is inevitable because it\u2019s what everyone is already doing. Do you run a full-node or a light client? Do you run anything at all? Switching to using the light client is consistently recommended \u201cif syncing fails\u201d. That\u2019s not a fix.Don\u2019t worry though, Vitalik is here to save the day. He\u2019s turning \u201cnodes\u201d into SPV clients that only sync the block headers:But what does that mean? Well, fortunately I wasted a lot of time writing and drawing this up too so I can explain it visually, but first let\u2019s start with words:In Bitcoin you either fully validate, or you don\u2019t. You\u2019re either:A Full-Node and do everything. You fully validate all transactions/blocks.An SPV Client that does nothing, is just tethered to a full-node, syncs just the block headers, and shares nothing. They are not part of the network. They shouldn\u2019t even be mentioned here but I\u2019m doing it to avoid confusion.Again, there are 115,000 Bitcoin full-nodes that do everything.https://twitter.com/StopAndDecrypt/status/1002666662590631942You can either read about this in more depth in Part 2, or you can take a look at the standalone article below:Bitcoin Miners Beware: Invalid Blocks Need Not ApplyBitcoin is an impenetrable fortress of validation.hackernoon.comIn Ethereum there are:Full-Nodes that do everything. They fully validate all transactions/blocks.Nodes that try to do everything but can\u2019t sync up because of peer issues so they skip the line and use warp/fast sync, and then \u201cfully\u201d-validate new transactions/blocks.Light-\u201cnodes\u201d that are permanently syncing just the block headers, and I guess they are sharing the headers with other similar nodes, so let\u2019s call these \u201cSPV Nodes\u201d. They don\u2019t exist in Bitcoin, again SPV clients in Bitcoin don\u2019t propagate information around, they aren\u2019t nodes.That Ethereum node count? Guarantee you those are mostly Light-Nodes doing absolutely zero validation work (checking headers isn\u2019t validation). Don\u2019t agree with that? Prove me wrong. Show me data. They are effectively operating a secondary network of just sharing the block headers, but fraudulently being included in the network node count. They don\u2019t benefit the main network at all and just leech.In New-Ethereum (2.0) with Sharding, things change a bit. I\u2019ve went ahead and edited out this section because I wrote an entire second article on it that does a much better job at explaining this, and the differences between Bitcoin and old and new Ethereum (2.0):Sharding centralizes Ethereum by selling you Scaling-In disguised as Scaling-OutThe differences between Light-Clients & Fully-Validating Nodeshackernoon.comThis isn\u2019t scaling. When your node can\u2019t stay in sync it downgrades to a light client. Now with sharding it can downgrade to a \u201cshard node\u201d\u00a0. None of this matters. You\u2019re still losing a full-node every time one downgrades. What\u2019s even worse is they are calling all the pink dots nodes even though they are only syncing the headers and trusting the purple nodes to validate.How would you even know how many fully validating nodes there are in this set up? You can\u2019t even tell now because the only sites tracking it count the light clients in the total. How would you ever know that the full-nodes centralized to let\u2019s say, 10 datacenters? You\u2019ll never know. You. Will. Never. Know.On the other hand, Bitcoin is built from the ground up to prevent this:https://twitter.com/_Kevin_Pham/status/999152930698625024So what are you going to do?What should you do?Are you a developer? Take everything you\u2019ve learned and start developing applications on top of a good blockchain. One that isn\u2019t broken.Are you a merchant? Start focusing on readying your services to support payment networks. Ones that are built on top of a good blockchain.Are you an investor? Take everything you\u2019ve invested and start investing in a good blockchain. One that isn\u2019t going to die in the coming years.Are you a gambler? Buy EOS. It\u2019s newer, just as shitty for all the same reasons I mentioned above, just no one knows it yet.Are you an idealist? This is definitely not the chain for you. Find one that is.https://twitter.com/StopAndDecrypt/status/992766974022340608Part 2Sharding centralizes Ethereum by selling you Scaling-In disguised as Scaling-OutThe differences between Light-Clients & Fully-Validating Nodesmedium.comIf you\u2019re interested in running a Bitcoin node that will never go out of sync or demand that you update your hardware, check out this tutorial I put together:A complete beginners guide to installing a Bitcoin Full Node on Linux (2018 Edition)How to compile a Bitcoin Full Node on a fresh installation of Kubuntu 18.04 without any Linux experience whatsoever.hackernoon.com\ud83c\udd42\ud83c\udd43\ud83c\udd3e\ud83c\udd3f (@StopAndDecrypt) | TwitterThe latest Tweets from \ud83c\udd42\ud83c\udd43\ud83c\udd3e\ud83c\udd3f (@StopAndDecrypt). Fullstack Social Engineer: 10% FUD, 20% memes, 15% concentrated\u2026twitter.com", "responses": "72"}, {"title": "I was wrong about\u00a0Ethereum", "author_name": "WhalePanda", "link": "https://medium.com/startup-grind/i-was-wrong-about-ethereum-804c9a906d36?source=search_post", "post_date": "Jun 12, 2017", "readtime": "9 min read", "upvotes": "3.9K", "content": "I was wrong about\u00a0EthereumI was wrong about Ethereum because it\u2019s such a good store of value\u2026 no wait, let me try\u00a0again.WhalePandaBlockedUnblockFollowFollowingJun 12, 2017I was wrong about Ethereum because it\u2019s such a decentra\u2026 nope.I was wrong about Ethereum because everyone is using it as a supercomputer\u2026 No.I do admit I didn\u2019t see this Ethereum bubble\u00a0comingBut, then again I wrongly assumed that no startup would need or even dare to ask $50 million in funding. I also wrongly assumed that people would use common sense and that leading developers would speak out against this sort of practice. Quite the opposite it seems.Ethereum\u2019s sole use case at the moment is ICOs and token creation.What\u2019s driving the Ethereum\u00a0price?Greed.Greed from speculators, investors and developers.Can you blame\u00a0them?Speculators and investors: No.Developers: Absolutely.So let\u2019s think for a minute and think what determines the price? Supply + demand. Pretty straightforward.Supply:The tokens that are available on the market, right? But with every ICO there are more tokens that are being \u201clocked up.\u201d Obviously the projects will liquidate some, to get fiat to pay for development of their project, but they also see the rising price of Ethereum.So at that point greed takes over and they think, totally understandable, \u201cWe should probably just cash out what we really need and keep the rest in ETH, that\u2019s only going up anyway it seems.\u201dAnd obviously there are new coins being mined, but if you look at the amount of ETH these ICOs raise, at this point, it\u2019s just a drop in a bucket.Demand:You have the normal investors (who are already very late to the game at this point\u2026 as usual), but the buy pressure that these ICOs are creating is crazy and scary. Take TenX for example, it\u2019s an upcoming ICO at the end of the month. The cap is 200,000 ETH (at current ETH price of $370) that\u2019s $74,000,000 for a startup.Here\u2019s the best part: it\u2019s only 51% of the tokens. Effectively giving it an instant $150 million valuation (if it sells out, which it probably will).Another example is Bancor, a friend of mine runs a trading group, he collected 1,100+ BTC to put into Bancor.This needs to be converted into ETH before the sale starts. These are decent size players, but not even the big whales who participate in these ICOs.What will the price do\u00a0next?It can go quite a bit higher, there are so many coins being taken off the market by these ICOs, that it can still continue for a while and everyone is seeing this and thinking: \u201cWhy aren\u2019t I doing an ICO.\u201d There are lots more coming.At one point it will crash, hard. What the trigger will be?Bug(s) in smart contracts.Major hack.Big ICO startup that fails/fucks up,Network split.Even something as silly as not having a decent ICO for a couple of weeks, which creates sell pressure from miners and ICO projects can cause a big crash.It\u2019s not a question of \u201cif\u201d, it\u2019s a question of \u201cwhen.\u201d That being said: Markets can remain irrational for quite a long\u00a0time.Usually when a bubble like this pops we could easily see 70\u201380% loss of value (for reference: Bitcoin went from $1,200 to $170 after 2013\u20132014 bubble). This is however quite the unusual situation and I\u2019m not sure to what kind of bubble I can really compare it.I\u2019m sure most of you have seen \u201cWolf of Wall Street.\u201d Just re-watch this clip and see if you find any similarities with the current situation. (bonus clip)What I really find interesting is what the ICO startups will do, Bitcoin had hodlers and investors mainly, individuals who most of the time had a full-time job and didn\u2019t need to sell.With Ethereum there is this huge amount being held by companies who need to pay bills. Will they panic dump to secure a \u201chealthy\u201d amount of fiat funding, will they try to hold through a bear cycle?Taking responsibility.Everyone loves making money, you can\u2019t blame traders or investors from taking advantage of this hype. That would be silly. People will buy literally anything if they can make a quick buck out of it.The responsibility here is with the developers, Consensys and the Ethereum Foundation but they don\u2019t take responsibility since they\u2019re getting more money. This will end with the regulators stepping in.The reason why I say that it\u2019s with developers, Consensys and the Ethereum Foundation is\u00a0simple:The developers of a project assign these crazy tokensale caps, more money than any startup would ever need.The Ethereum foundation members+ core developers use their own celeb status to actively promote these projects as advisors, for which they\u2019re compensated well, luring in people who have no clue what they\u2019re buying.Consensys promotes all of this since it\u2019s the marketing branch of Ethereum. The more fools that buy in, the better.Let me illustrate this with an\u00a0example.Have you heard of primalbase? It\u2019s an ICO with a token for shared workspaces. Why would a shared workspace need its own token? It doesn\u2019t, it really really really doesn\u2019t.Let\u2019s take a look at the advisors:First thing that an advisor should\u2019ve said in this case was: \u201cDon\u2019t do it, it\u2019s stupid, it makes no sense.\u201d But well there we have Mr. Ethereum himself.We all know that Vitalik has a cult-like following with the Ethereum investors so it will be very easy for primalbase to launch their ICO and use Vitalik\u2019s face and name to get itself funded.This is just one example, if you go through all of these ICOs you find a lot of familiar names and faces.Nothings wrong with being an advisor, but when you\u2019re just sending people to the slaughterhouse\u2026The sad part is that a lot of people will lose a lot of money on this, some of them obviously more than they can afford to lose, that\u2019s how it always goes.The [damn] regulators will step in after this bubble pops and what scares me is the fact that it will damage all of crypto, including Bitcoin, not just Ethereum and its\u00a0ICO\u2019s.But you\u2019re just an Ethereum\u00a0hater.I\u2019ve heard all the accusations:I hate Ethereum because I\u2019m a Bitcoin Maximalist. I\u2019m not, I like other projects too, like Siacoin for example.I hate Ethereum because I missed out. I did miss out on the crowdsale, but I traded plenty of Ethereum and it\u2019s ICOs and made some nice profit.I hate Ethereum because I don\u2019t understand it. Really? Do you? The only smart contracts running on it are ICO token sales. Or contracts to buy ICO tokens the second they become available.I hate Ethereum because I\u2019m jealous of Vitalik. No, it\u2019s impressive what he did at his young age. At the same time I think he\u2019s largely responsible for this bubble and he has made a lot of mistakes. We all make mistakes, but bailing out your friends from the DAO while other hacks and losses aren\u2019t compensated or fixed just shows total lack of integrity. Or it\u2019s everything or it\u2019s nothing. And when it comes to immutability in crypto, it should be nothing.For the people that are scared that Ethereum will replace\u00a0BitcoinEthereum is not a store of\u00a0value.It isn\u2019t capped. Yes, I know they\u2019re planning to switch to PoS (which it already kind of is). Do you think they managed to create the first software implementation ever without any bugs? Doing such a major change on a (currently) $30 billion market is completely irresponsible, borderline insanity.Even if we assume that there are no bugs, what about the miners? The miners who bought their equipment to mine Ethereum, the miners that supported the network for years. \u201cBut they knew we were switching to PoS.\u201d Of course they knew, and do you think they\u2019ll just give up on such a profitable coin?Some might switch immediately to Zcash and Ethereum Classic but there will be another fork and we\u2019ll have ETHPoS and ETHPoW, with of course all the Ethereum tokens being on both chains.Even Ethereum developers think that his is a very likely scenario.Ethereum\u2019s fees are lower. They are, sometimes, by a bit. If you\u2019re trying to send something when no token sale is active obviously, else you have people spending $100's to get in on the token sale and clog up the network.Also doesn\u2019t apply when you send something from exchanges since for example with Poloniex it\u2019s about $1.9 vs $0.28 for Bitcoin. Oh and another exception is when you actually use it for smart contracts, which require more gas to process than a normal transactions from account A to account B.You know.. the actual reason why Ethereum was created.Ethereum is not decentralized.Bitcoin isn\u2019t as decentralized as it should be, we all know that, but compared to most other coins, Bitcoin is very decentralized.Vitalik has called himself a benevolent dictator in the past. He is the single point of failure in this project and if he gets compromised in any way that\u2019s the end.There is no way of knowing if this happens and since people blindly follow everything he says, he has the power to do anything. Satoshi was smart enough to remove himself from the Bitcoin project.Ethereum is not immutable.Don\u2019t have to spend much time on this: see DAO and split that lead to Ethereum and Ethereum Classic.Ethereum has the Enterprise Ethereum Alliance.But but but.. all those big banks use Ethereum. No, they don\u2019t. They use \u201can\u201d Ethereum, which is a (private) fork of Ethereum. By that definition 99% of all altcoins are using Bitcoin.Still a separate chain. The fact that we\u2019re talking about a private blockchain here actually makes altcoins more like Bitcoin than \u201can Ethereum\u201d that EEA uses like Ethereum.You can compare it to 2013\u20132014 when some companies started to get interested in blockchain vs Bitcoin, only difference here is that for Ethereum it\u2019s part of their marketing campaign to lure in potential investors.If you think I\u2019m just full of crap, which is fair, I am just some random popular guy on Twitter who has been around from before Ethereum.Have a look at what Vlad has to say about the current state of Ethereum here and here. Vlad Zamfir is probably the smartest guy on the Ethereum team, and I say this while I don\u2019t agree with him on many of his opinions, I do respect him.Conclusion:If you\u2019re an actual developer, be realistic and honest with your investors. Do you really ever need more than $5 mill? Finish a MVP first and then do a tokensale, if you really really need to do an ICO.Plenty of rich crypto investors and traders now that would love to be part of your project and who would be happy to just invest for equity. Yes, it will probably be less than what you can get in an ICO, but at least you didn\u2019t sell out and it shows you actually really care about your product/service/\u2026If you\u2019re a trader or investor, be realistic about the bubble. I know you hear this a 100 times when you\u2019re trading but: don\u2019t invest what you can\u2019t afford to lose.I have some Ethereum, not as a long term investment, but because the price is going up and I need it to invest in tokens which I can quickly flip as soon as they come on the market.That\u2019s just the type of market we\u2019re in. Everyone is making a lot of money, awesome right?What could potentially go\u00a0wrong.", "responses": "142"}, {"title": "Bitcoin, Ethereum, Blockchain, Tokens, ICOs: Why should anyone\u00a0care?", "author_name": "Preethi Kasireddy", "link": "https://hackernoon.com/bitcoin-ethereum-blockchain-tokens-icos-why-should-anyone-care-890b868cec06?source=search_post", "post_date": "Jul 5, 2017", "readtime": "29 min read", "upvotes": "8.3K", "content": "Bitcoin, Ethereum, Blockchain, Tokens, ICOs: Why should anyone\u00a0care?Preethi KasireddyBlockedUnblockFollowFollowingJul 5, 2017Source: https://www.youtube.com/watch?v=hxtB01iPK6wThe Crypto market is gaining lots of steam.\u00a0\u00a0Gravity-defying price rallies\u2026Bitcoin Price Chart (1\u00a0year)Ethereum Price Chart (1\u00a0year)Top 8 Cryptocurrencies Price Chart (excluding Bitcoin & Ethereum)\u2026and multi-million dollar token sales are commonplace, as are front-page headlines from traditional news outlets discussing Ethereum, Bitcoin, ICOs, tokens, hard forks, and other technical topics.Even my 13-year-old brother has been calling me up asking for explanations!I\u2019ve been personally invested in this space for a while now\u200a\u2014\u200amost recently as an engineer for Coinbase\u200a\u2014\u200abut even I\u2019m surprised by how quickly the Crypto space has evolved in the past six months.\u00a0\u00a0If you want to understand why crypto is getting the spotlight, you have to understand the behind-the-scenes catalysts driving the market. Right now, that catalyst is the \u201ctoken sale\u201d or \u201cInitial Coin Offering (ICO)\u201d phenomena.ICO vs IPO: The wild west of investmentWhat the heck is an ICO anyway?\u00a0\u00a0You may have heard of an \u201cInitial Public Offering\u201d (IPO)\u200a\u2014\u200awhen a company goes public by selling some of its shares to institutional investors, who in turn sell to the general public on the securities exchange. The public gets excited about IPOs because they let anyone with a brokerage account purchase shares of companies like Snapchat.\u00a0\u00a0Are ICOs the same thing? Yes and no. IPOs and ICOs are both used by companies to raise capital. The main (and really important) difference is regulation. IPOs are regulated by the SEC and have a set of legal requirements and a formal process for how they\u2019re carried out. ICOs are currently unregulated and more of a \u201cwild west\u201d practice.\u00a0\u00a0Overall, there seems to be a lot of confusion and uncertainty when it comes to ICOs. Some argue that they have turned into a \u201cperverse and unsustainable Keynesian beauty contest.\u201d Supporters are optimistic and claim that it\u2019s a new form of Venture Capital.\u00a0\u00a0With drastically opposing viewpoints like this dominating the conversation, most of us are left on the sidelines scratching our heads.Necessary background knowledgeYou can\u2019t understand ICOs without understanding the underlying digital asset sold in an ICO.\u00a0\u00a0If you already know the basics of crypto, feel free to skip this section. For the rest of us\u2026 let\u2019s start from the top!The Cryptocurrency technology stackCryptocurrency technology stackBitcoinBitcoin is a decentralized digital currency that uses a peer-to-peer technology.\u00a0\u00a0Peer-to-peer essentially means that there isn\u2019t a central authority issuing new money or tracking transactions. Instead, these operations are managed collectively by the network. The transactions happen between users directly and are recorded on the blockchain (more on that below).\u00a0\u00a0The Internet is filled with great Bitcoin explainers, so I won\u2019t delve much farther down the rabbit hole in this post. Instead, here are some starting points to get you up to speed:Bitcoin Wiki, Wikipedia, What is Bitcoin, Bitcoin Magazine, Why Bitcoin matters.BlockchainA blockchain is a decentralized public database that keeps a permanent record of digital transactions.\u00a0\u00a0In other words, it\u2019s a logfile storing an immutable record of all the digital transactions. This decentralized database is not controlled by a central administrator, but instead is a network of replicated databases (meaning each node in the network stores its own copy of the blockchain) that is shared and visible to anyone within network.\u00a0\u00a0Every \u201cblock\u201d in this blockchain contains a record of recent transactions, a reference to the block that came immediately before it, and an answer to a difficult mathematical puzzle, among other things.A blockchain is collectively maintained by \u201cminers\u201d, who are members within the network that compete to validate Bitcoin transactions in each block by solving the complex algorithmic problem associated with the block.\u00a0\u00a0They do this by buying or renting lots of computing power to run these complex algorithmic problems on. The incentive for them to use their computing power to verify transactions is that they are rewarded with Bitcoin if they solve the problem and validate a Bitcoin block.\u00a0\u00a0The power of such a decentralized network is that economic value and governance are distributed among the network\u2019s stakeholders (i.e. miners and consumers) rather than concentrated in a single organization (e.g. banks, governments & accountants). Thanks to this setup, anyone can own and transfer assets digitally without the need for a third party.Blockchain technology isn\u2019t limited to Bitcoin. It can be used to create any other cryptocurrency, such as Ethereum and Litecoin, which utilize their own blockchains.\u00a0You can read more about bitcoin and blockchain at Wikipedia or watch this great explainer video.Protocol layerNext, we have the protocol layer. In general, a protocol is the special set of rules that nodes in a network use when they transmit information. These rules specify the interactions between the communicating entities.One example of a protocol used in telecommunications is Transmission Control Protocol (TCP), which is a set of rules for exchanging messages at the information packet level on the internet. TCP guarantees that the data packets will be delivered and that they will be delivered in the same order in which they were sent. Another example of a protocol is Internet Protocol (IP), which is a set of rules to send and receive messages at the Internet address level\u200a\u2014\u200ait essentially specifies the format of the data packets on the internet and the addressing scheme.TCP/IP ProtocolWhen discussing blockchains, the term \u201cprotocol\u201d refers to the \u201ccryptoeconomic rules\u201d that are enforced by a blockchain in order to maintain distributed consensus across the blockchain\u2019s peer-to-peer network.Cryptoeconomic rules are rules that govern a decentralized digital economy that:(i) uses public key cryptography for authentication(2) has economic incentives to ensure that the rules are followedFor example, in the case of Bitcoin\u2019s blockchain, it has financial incentives that are provided to the miners for validating every Bitcoin transaction and in turn, securing the network.What exactly are these financial incentives?TokensEnter tokens.The financial incentive for miners comes from the native token built on top of the Bitcoin blockchain\u200a\u2014\u200aBitcoin. The coin serves as a \u201ccarrot and stick\u201d\u200a\u2014\u200aminers who use their computing power to validate transactions are rewarded with a certain amount of coin.In general, when you hear the term \u201ccryptocurrency tokens\u201d or simply \u201ctokens\u201d, they are referring to tokens such as Bitcoin that are built on top of a blockchain and represent a digital asset which you own and can transfer to someone else.There are various ways to create tokens on top of a blockchain. For example, the simplest tokens to understand are intrinsic tokens like Bitcoin, which is directly built on top of the Bitcoin blockchain. Or you can choose to fork the Bitcoin blockchain and build tokens on top\u200a\u2014\u200asome examples include ZCash, Litecoin, Monero, and others. Or you can build an entirely new blockchain technology and build a token on top of that\u200a\u2014\u200awhich is what Ethereum did. The token on top of Ethereum\u2019s blockchain is \u201cEther\u201d.\u00a0\u00a0\u2026you can even build tokens on top of Ethereum\u2019s blockchain itself. Gnosis (GNO) and Augur (REP) are examples of this. Perhaps confusing since \u201cEther\u201d is the intrinsic token built on top of the Ethereum blockchain. I\u2019ll explain later in the post. For now, just accept the fact that it\u2019s possible to build other tokens besides the intrinsic token on the Ethereum Blockchain.There\u2019s a helpful analogy here with traditional currencies\u200a\u2014\u200ayou can think of tokens as the currency itself (e.g. USD, EUR, etc.) and the blockchain protocol as the monetary policy.\u00a0\u00a0The main takeaway here is that every token is based on some underlying blockchain\u200a\u2014\u200awhether it\u2019s Bitcoin\u2019s blockchain, Ethereum\u2019s blockchain, or some other forked/new blockchain.Regardless of the cryptocurrency in question, tokens are valuable because the blockchain provides a backbone for asset manipulation that is immutable, decentralized, and impossible to counterfeit.The application layerSo far, we\u2019ve learned about Bitcoin and the underlying blockchain that enables it. We\u2019ve also learned about the protocol that determines the rules of the blockchain, and the tokens built on top of it.Together, these technologies have made us rethink our definition of money as something that is digital, easily transferrable, secure, and decentralized.But the important part to realize is that money is just one application of the blockchain. Besides money, the reason so many of us in the crypto-world are nerding out about the blockchain is because it has revealed a potential future for (1) protocols and (2) applications in general.(1) ProtocolsThe ultimate dream of cryptocurrency developers is that we can take advantage of this blockchain technology to build new and improved communication protocols from the ground up. Protocols being developed for cryptocurrencies have the potential to solve problems with centralization that have plagued the Internet since the first dial-up modem whirred and beeped into action.\u00a0\u00a0What are examples of such protocols?Well, they could include protocols for payments, identity, domain name systems, cloud computing, reputation systems, and much more. Many of these systems today are highly centralized (e.g. Stripe, Paypal, Google, Amazon) and there\u2019s no such thing as defaults or standards for these things on the Web.\u00a0\u00a0Hence, in the long term, our hope is that the blockchain technology will enable decentralized, open, and secure protocols to be built with use cases far outside cryptocurrency.(2) ApplicationsBlockchain enables what we call \u201cdecentralized applications\u201d.\u00a0Decentralized application, or \u201cdApp\u201d, is an application built on top of the blockchain. How does that work?Let\u2019s consider the Bitcoin blockchain as an example. Bitcoin uses a scripting system for transactions that occur on the Bitcoin blockchain. A script is a simple list of instructions. So the Bitcoin\u2019s scripting language enables us to write a script that is recorded with every transaction. The purpose of the script is to define the requirements the recipient must meet to gain access to the Bitcoins being transferred.For a typical Bitcoin transfer, the script will define what the spender must provide:a public key that, when hashed, matches the destination address included in the scripta signature to show evidence of the private key corresponding to the public key just providedBut the neat thing is that there\u2019s some flexibility in the parameters we can send with each transaction. For example, we can write a script that says \u201cthis transaction is only valid if it has two private keys\u201d. So essentially, this scripting language now lets us encode rules for how to move money, or more generally, any piece of information, around, without requiring us to trust some third party to follow a set of rules we care about. We simply trust the code and all is well.Because Bitcoin has this scripting language, it\u2019s possible to use this language to build certain types applications that transact on the blockchain. In other words, we can build applications that use Bitcoin transactions to communicate.For example, let\u2019s say we want to build a blockchain-based crowdfunding application. You might have a set of rules for how funds are transferred (or communicated) between one party to another which you encode in the scripting language. Then users of the application can run a crowdfunding event that is governed by the blockchain.This is the main idea behind dApps: a decentralized set of rules that define a specific application. This set of rules sits on a public and decentralized blockchain (instead of a central server owned by some large entity, such as Facebook or Amazon). This enables it to governed by autonomy and be resilient to censorship.\u201cWhere are the apps?\u201d\u00a0dilemmaMany of us in the crypto world were under the impression that developers would immediately hop on the bandwagon and use Bitcoin\u2019s scripting language to build decentralized applications on top.\u00a0\u00a0But fast forward eight years (Bitcoin was released in 2009), and Bitcoin has yet to become more than simply a store of value and a speculative investment.\u00a0Sure, we\u2019ve seen a handful of wallets and exchanges built. (Coinbase, Kraken, Poloniex, and GDAX, to name a few.)\u00a0\u00a0\u2026And of course, we can\u2019t forget Silk Road, the digital anonymous drug marketplace that processed over $1 billion in sales in 2.5 years and was shut down by law enforcement in late 2013.\u00a0\u00a0In some ways, Bitcoin could be considered the first decentralized application since it runs on blockchain technology, is fully open-source, and runs without a central authority.\u00a0But seriously, a lot of us are here still looking around and wondering, \u201cWhere are the killer apps?\u201d\u00a0\u00a0Sadly, almost no one I know uses blockchain-based applications in their day to day.\u00a0Here are some factors holding these applications back from popularity (note: these are my personal opinions):1. Lack of developer friendliness and\u00a0toolingProgramming applications using Bitcoin\u2019s scripting language is not easy. Why?\u00a0\u00a0For one, the scripting language is too limited. A scripting language is a programming language where you can write code to perform some actions. An example of a scripting language widely used on the web today is JavaScript.const greeting = (name) => \"Hello, \" + name + \"!\";const add = (a, b) => a + b;const subtract = (a, b) => a - bCompare this to Bitcoin\u2019s scripting language:OP_DUP OP_HASH160 62e907b15cbf27d5425399ebf6f0fb50ebb88f18 OP_EQUALVERIFY OP_CHECKSIGThe JavaScript on top reads pretty much like English. Bitcoin\u2019s scripting language, on the other hand, looks like machine code. Most developers are used to writing in expressive languages like JavaScript, Ruby or Python\u2026 not machine code. Bitcoin script is daunting for most developers.\u00a0\u00a0Secondly, developer tooling and great documentation goes a long way in gaining adoption among developers. Take React, for example, which is one of the most popular front-end libraries today. One of the biggest reasons that React became so popular is because of how much effort the community has put into building a strong set of developer tools (e.g. IDEs, Babel, Webpack, boilerplates, Create React App, etc), documentation, and tutorials. Bitcoin\u2019s ecosystem, on the other hand, is the opposite of user-friendly.\u00a0Lastly, Bitcoin\u2019s scripting language is not turing complete. A turing complete programming language is one that can be used to simulate any single-taped Turing machine. In other words, it can be used to solve any computation problem that a Turing machine can run given enough time and memory. (for more on this, read this Stackoverflow discussion). By not being turing complete, Bitcoin script restricts what you can do.\u00a0Overall, Bitcoin\u2019s scripting language has historically been limited, difficult to use and lacked adequate tooling and documentation. As a result, it didn\u2019t encourage a developer community to form, which is the prerequisite to killer applications.2. Building a decentralized application with strong network effects isn\u2019t\u00a0easyMany of the applications we use in our daily work (marketplaces, exchanges, social networks, etc) derive their value from their strong network effects. A network effect is when a product or service increases in value as more people use it.\u00a0\u00a0A classic example is Facebook. Every new user connecting to other users on the platform non-linearly increases the number of connections. Similarly, Venmo is useless if you\u2019re the only person on the platform. For every new friend that joins, the value of the product goes up because you can now pay and/or receive payment from this friend.\u00a0Network effects help build better products and services. However, building up this network is one of the hardest parts of building a successful product, classically known as the \u201cchicken and egg\u201d problem.\u00a0\u00a0So even if a developer were to make the effort to build a decentralized crowdfunding platform on top of Bitcoin\u2019s blockchain, getting users on both side of the platform (i.e. investors and product-builders) is an incredibly hard challenge.\u00a0\u00a0The blockchain provides the technological underpinnings to create decentralized applications, but it doesn\u2019t provide the framework or tools necessary to drive adoption of the network.3. Decentralization alone doesn\u2019t provide a 10x improvementWhen we talk about decentralized applications built on top of the blockchain, we might think of transaction-based platforms, such crowdfunding, remittances, payments, coupons, etc. It might be a neat technical feat to have a decentralized version of these types of services, but the reality is, we already have existing apps that work perfectly fine for each of these use cases.\u00a0\u00a0For crowdfunding, we have Kickstarter. For remittances, we can use TransferWise. For payments, we can use Credit Cards, Paypal, Venmo, Square, etc.\u00a0\u00a0Peter Thiel\u2019s 10x rule is important to think about when we\u2019re considering how to get users to substitute existing solutions with the new decentralized ones. As of now, it\u2019s unclear what dimension these 10x advantages come from, so far as users go.\u00a0\u00a0Take WeiFund, for example, which is a decentralized crowdfunding platform. As a user, WeiFund's interface and user experience seems similar to conventional crowdfunding platforms such as Kickstarter or GoFundMe. The main differences seem to be that they claim to have lower costs and that they use smart contracts to run the crowdfunding, allowing for more complex agreements. Is this enough to get users to make the effort to switch over (especially when the costs aren't that much lower)?\u00a0By no means do I believe that decentralized applications have no benefits. In fact, I foresee a future where applications are 10x more secure, 10x cheaper, 10x more efficient, or 10x more on some dimension than the current ones.\u00a0\u00a0The point is that these benefits have not been proven yet, so there's little reason for users to consider using a decentralized application today.The rise of decentralized applications\u2026 maybe.Enter Ethereum.Ethereum is a cryptocurrency launched in 2015 and built from the ground up using its own blockchain technology. It was designed to be a more generalized protocol than Bitcoin\u2019s blockchain, with the explicit goal of doing more than just creating and recording transfers of a blockchain network\u2019s native tokens.As written in the Ethereum white paper:\u201cThe intent of Ethereum is to create an alternative protocol for building decentralized applications, providing a different set of tradeoffs that we believe will be very useful for a large class of decentralized applications, with particular emphasis on situations where rapid development time, security for small and rarely used applications, and the ability of different applications to very efficiently interact, are important. Ethereum does this by building what is essentially the ultimate abstract foundational layer: a blockchain with a built-in Turing-complete programming language, allowing anyone to write smart contracts and decentralized applications where they can create their own arbitrary rules for ownership, transaction formats and state transition functions.\u201dEthereumIn essence, Ethereum is simply a transaction-based state machine: we begin with a \u201cgenesis state\u201d and incrementally execute transactions to transform it into some final state. The final state is what we accept as the canonical version of the current state of the world of Ethereum.Ethereum transactionWhile Bitcoin is the intrinsic token for Bitcoin\u2019s blockchain, Ether is the intrinsic token for Ethereum\u2019s blockchain.Just like Bitcoin, the Ethereum blockchain contains a log of transaction-like events. Users send Ether to one another using the \u201clog,\u201d and miners are incentivized to verify and secure these transactions within the network.But it can also go way beyond that\u200a\u2014\u200athe Ethereum blockchain can be filled with a wider variety of event information coming from any sort of computer program.Let\u2019s look at a few of the core concepts that underly the Ethereum blockchain to understand why this is possible:Ethereum basicsFirst is accounts. There are two types of accounts: Externally Owned Accounts and Contracts Accounts. Both account types have an Ether balance.The main distinction is that contract accounts have some piece of code associated with them, while externally owned accounts do not. Contract accounts, therefore, have the ability to perform any type of computation when its associated code is executed.Next we have what are known as transactions, which are cryptographically signed data packages that store a message to be sent from an externally owned account to another account on the blockchain. When a transaction is sent to a contract account, the code associated with the contract account is executed by the \u201cEthereum Virtual Machine (EVM)\u201d on each node (more on that below).Finally, there are messages. Messages allow contract accounts to call one another. When a contract account send a message to another contract account, the code associated with the account is activated. Essentially, a message is like a transaction, except it\u2019s produced by a contract account rather than an external account.Let\u2019s quickly explain the concept of the \u201cEthereum Virtual Machine (EVM)\u201d. Remember how we learned that the protocol for the Bitcoin blockchain determines how transactions on the network get verified? Well, in Ethereum\u2019s case, every node that is participating in the Ethereum network runs the EVM as part of this verification process.Source: Coinspace.ioLet\u2019s say we have a set of transactions that were started by some external accounts. These get accumulated into a block, and then the nodes in the Ethereum network go through the transactions listed in the block and run the code associated with these transactions within the EVM. It\u2019s important to note that every node in the network runs the code and stores the resulting values. As you might guess, this tends to be computationally very expensive. To compensate for this expense and incentivize the nodes (or miners) to run these computations, the miners specify a fee for running these transactions. This fee is referred to as \u201cgas\u201d (you can read more on gas here). This is similar to how fees work in Bitcoin, where any fees attached to a bitcoin transaction go to the miner who mined the block that included the transaction.Note: This is a very high level description of how the Ethereum blockchain works and it certainly skips a lot of details for purposes of brevity. I\u2019ll write more in-depth articles in the future.Lastly, we have Ethereum\u2019s programming language for writing executable distributed applications and contracts. Unlike Bitcoin, Ethereum\u2019s programming languages (Solidity which is similar to JavaScript\u00a0, Serpent which is similar to Python) don\u2019t look like machine code. It has the expressive power and functionality of languages that programmers are accustomed to developing on, like JavaScript or Python. Moreover, it lets you do pretty much anything an advanced programming language would let you do. Hence, it is \u201cTuring complete\u201d.The key takeaway from all this is that Ethereum stepped into the crypto-world and provided us with a generalized framework for running any type of code on the blockchain more easily. Because Ethereum\u2019s language is turing complete, stateful, and developer friendly, the hope was to open up the benefits of the blockchain beyond just enforcing one particular ruleset (e.g. how digital money gets transferred) and enable a safe, open, highly available, autonomously governed, efficient, trustable and reliable mechanism to build any ruleset on top. This would enable developers to develop any type of application imaginable.An example of an application that is incredibly simple to build on Ethereum is a \u201csmart contract\u201d. A smart contract is a distributed contract that is represented in code and basically says \u201cif this happens then do that\u201d. They can accept and store Ether and data, and can send that Ether to other accounts or even other smart contracts. Just like regular contracts (e.g. a property lease or an employment agreement), they are used to form agreements with people or entities, but unlike regular contracts, they act like autonomous agents that run entirely on the blockchain and remove the human out of the loop, making them automated, open, secure and trustless.Another example of an application is a decentralized organization. A decentralized organization is a programmatic organization that runs based on rules encoded within smart contracts. So instead of the typical hierarchical structure of an organization that is managed by humans, a decentralized organization encodes all its rules into a smart contract and then is completely managed by a blockchain.Despite the fact that Ethereum has made it easy for us to now build applications on the blockchain, let\u2019s admit it, most of us, even including us crypto-nerds, are still living in a world where we don\u2019t use decentralized applications in our day to day.Why is that?\u00a0\u00a0To explain, let\u2019s go back to my earlier hypothesis on why we ended up at the \u201cwhere are the apps\u201d problem, and see how Ethereum addresses each one.Problem #1: Lack of developer friendlinessAs we described above, Ethereum solves this problem by design through its expressive programming language and strong developer tooling.Problem #2: Building up network effects is hardWith or without Ethereum, seeding and spinning the network effects is still a huge roadblock. Replacing existing network businesses who\u2019ve built up huge networks effects is\u2026 as we said before, really HARD. If someone builds a decentralized Airbnb, they still need to convince both sides of the platform, the users and hosts, to come on board.Problem #3: Doesn\u2019t provide 10x improvementWe learned earlier that most users wouldn\u2019t be willing to switch to a decentralized platform unless it\u2019s 10x better than an existing solution on some dimension.Just because it\u2019s easier to build a decentralized application on Ethereum, doesn\u2019t mean it provides the 10x experience we\u2019re looking for. And so, the question we might ask is, are we still right back to square one? still stuck in the trenches?Well, not really.Because although Ethereum doesn\u2019t directly solve the network effects problem, nor the 10x problem, what it does do is enable the creation of a whole new set of applications that were never possible before. The clearest way to make a 10x improvement is to invent something completely new. I believe Ethereum makes inventing something completely new possible by making it easy to build smart contracts.The rise of protocols, tokens, and applicationsWhy the big deal about being able to build smart contracts?ProtocolsWell, the beauty of being able to easily build smart contracts on Ethereum is that it enables anyone to easily build a new protocol on top of Ethereum. Remember that a protocol is simply a set of rules that nodes in a network use when they to transmit information. Smart contracts allow us to do exactly this\u200a\u2014\u200acreate an automated trustworthy set of rules between two or more parties.Earlier, we mentioned how blockchain protocols have a intrinsic \u201ctoken\u201d associated with it, which is a digital asset that can be transferred between two users in the network without requiring the consent of a third party. In the case of Bitcoin\u2019s blockchain, the intrinsic token is Bitcoin and in the case of Ethereum\u2019s blockchain, the intrinsic token is Ether.But just because the Ethereum and Bitcoin blockchain protocols have intrinsic tokens associated with it to drive the network, doesn\u2019t mean a protocol built on Ethereum using a smart contract must have a token associated with it. Remember that the purpose of a protocol is simply to specify rules for communication between nodes.So essentially, there\u2019s two types of protocols:Ones which have a intrinsic token associated with it that help create economic incentives that drive a networkOnes which don\u2019t have a token that drives financial incentives and are simply used as a communication protocol between nodes (Note: these types of protocols CAN still have a token associated with it\u200a\u2014\u200ae.g. to represent membership in the network, shares on an open market, etc. The difference is that they are not used to drive some economic incentive.)For lack of better names, I\u2019ll call the first kind \u201ccrypto-token-protocols\u201d and the second kind \u201ccrypto-protocols\u201d.TokensNow onto tokens.Just like Ethereum makes it possible to build new protocols on top of its blockchain, it also makes it possible to use smart contracts to build new tokens on top of its blockchain. Let\u2019s call these types of tokens \u201cnon-intrinsic tokens\u201d.In this regard, broadly speaking, we can think of a token system as just a database with one operation: subtract X units from A and give X units to B, under the condition that:\u00a0 (i) A had at least X units before the transaction(ii) The transaction is approved by AEthereum makes it especially easy to implement such token systems. More specifically, ERC20 token interface provides a standardized way to develop a token that is compatible with the existing Ethereum ecosystem, such as development tools, wallets, and exchanges.What\u2019s more, these non-intrinsic tokens can exist as:Standalone tokens built on Ethereum (as shown in the above diagram)Be associated with any new underlying crypto-token-protocol built on EthereumBe associated with any new underlying crypto-protocol built on EthereumProtocols? Tokens? Protocols + Tokens? Why does this matter?\u00a0\u00a0Let\u2019s take a look.Token sale (i.e.\u00a0\u201cICO\u201d)Launching a new cryptocurrency blockchain is not easy\u200a\u2014\u200ait requires a massive bootstrapping effort in order to assemble the resources needed to get it up and running. But in the case of Ethereum, its intrinsic tokens were used to spin up their blockchains\u200a\u2014\u200ain order to kickstart a large network of developers, miners, investors, and other stakeholders, Ethereum created some Ether tokens and launched a presale of these tokens to the general public. It then used these funds to develop its blockchain.Ethereum was not the first to do this. In 2013, when Ripple started to develop it\u2019s Ripple payment system, it created around 100 billion XRP token, and sold these tokens to fund the development of the Ripple platform.This concept of fundraising via a token sale is sometimes referred to as an \u201cInitial Coin Offering\u201d, or ICO. But the structure of this token can vary significantly (as we just saw in the previous section), whereas the term \u201cICO\u201d makes it sound a lot more official and like an investment security, so let\u2019s stick to \u201ctoken sale\u201d.A token sale is when some party offers investors some units of a new cryptocurrency (i.e. token) for a certain price, that can then later be exchanged with other cryptocurrencies (i.e. tokens). The idea is that investors buy into these tokens, and the units of the token are fungible and transferable on cryptocurrency exchanges (e.g. Bitfinex, GDAX, Liqui, etc.) if there is demand for them.While most token sales in the past have been restricted to building a new cryptocurrency (e.g. Ethereum, Ripple, etc), the smart contracts of Ethereum are now enabling startups to also to use token sales to fund development of various protocols and applications built on top of existing blockchains.Before moving on, one important distinction to make is the difference between an application and protocol.Application vs. protocolAn application can be built on one or more protocols. One example is Augur, which is a decentralized prediction markets application that is built on top of two protocols:Decentralized oracle protocolExchange protocolThe decentralized oracle protocol is a \u201ccrypto-token-protocol\u201d that has financial incentives to drive the network to form consensus around the outcomes of real-world events using Augur\u2019s reputation tokens (REP). The exchange protocol, on the other hand, is a \u201ccrypto-protocol\u201d and does not have a token associated with it to drive financial incentives, but instead is a set of rules defined between buyers and sellers in order to move tokens between each other.But neither of these protocols need to be tied to a single application. Any application can in theory build on top of these underlying protocols.Token sales for protocols vs. applicationsEarlier, I mentioned how token sales can be used to drive development of a new protocol and/or to drive development of a new application.\u00a0\u00a0\u00a0So in essence, a team can use an token sale to fund:a blockchain (e.g. Ripple)a cryto-token-protocol built on top of an existing blockchaina crypto-protocol built on top of an existing blockchainan application built on top of a cryto-protocolan application built on top of a crypto-token-protocolan application built on top of crypto-protocol(s) and non-crypto-token-protocol(s)an applicationSo, pretty much anything\u00a0:)The last one is interesting, because to do a token sale, the application doesn\u2019t even need to be built under a protocol. I can build non-profit organization and use tokens as a mechanism to fund the project. In this sense, a token sale simply becomes a new way to fund a traditional centralized application. A plain old crowdsale.Okay, so investors buy these tokens and then what happens?Depends. When a token is tied to a cryto-token-protocol, they look much more like intrinsic tokens like Ether and Bitcoin and are used to drive the development and network of a protocol. But when they are not, tokens simply represent something much more general. In fact, these tokens are flexible enough to represent a lot of different things.For instance, let\u2019s say I want to build a decentralized storage service. I can build a storage protocol using smart contracts which serve as agreements between a storage provider and their client, defining what data will be stored and at what price.I would then build a token for this protocol and do a token sale. If the protocol becomes widely used, then the protocol becomes more valuable, which in turn could increase the value of the token. Moreover, as a developer of this service, I could choose to make the tokens represent purchase rights to the services provided in the application.What\u2019s important to note is that, broadly speaking, the mechanism for creating tokens are so flexible that they can represent lots of different things:Paid credits/membership within the decentralized applicationEntitlement to a share of profits and/or losses, or assets and/or liabilitiesOwnership or equity interest in the protocol (or project)Voting power in the companyNo function other than mere existence\u200a\u2014\u200asimply a digital asset that can be freely traded on cryptocurrency exchangesetc..There\u2019s a handful of projects which have successfully raise funds via a token sale, including as Augur, Antshares, Melonport, Gnosis, Antshare and many more. I\u2019d suggest you read their respective white papers if you want to learn more.Protocols, tokens, token sales, now\u00a0what?We\u2019re at a point where Ethereum has made it easy to not only build protocols that can power decentralized applications, but also to help get a network off the ground. Ethereum does this in two ways:\u00a01. MoneyThis one is obvious. As we already saw, a token sale now enables developers to easily release tradable tokens to raise funds for building a protocol and/or application. Using this money, the team could choose to invest in sales, marketing, etc. to drive the network.2. UsersThis is the more interesting piece of the puzzle. Protocols and decentralized applications can solve the network effects problem by using a token sale as a mechanism to get early contributors and adopters. Early adopters who believe in the protocol or application have an incentive to buy the token because there is potential for that token to be worth more in the future.So in essence, tokens could help bootstrap a network of early adopters because the incentives of the early adopters and the development team line up perfectly.Let\u2019s say you want to build a new file sharing protocol. You can launch a token sale through which you gain some early adopters, investors, and entrepreneurs who become interested in \u201cbuying in.\u201d They might be simply speculating or they might truly believe in the product. At that point, they become stakeholders in the protocol itself and are financially invested in its success. Then some of these early adopters either become users of the products built on top of the protocol or build products and services around the protocol themselves, with the incentive to drive the success of the protocol further in order to increase the value of their tokens. As the protocol gains adoption, it increases the value of the tokens, which further draws more attention from more investors, application builders and users, which leads to more applications, and so on.What Ethereum has done is create an incredibly flexible system to innovate at the protocol level and application level. We\u2019ll likely see a lot of experimental and innovative protocols and applications being built over the coming years. Many of these will fail, just like a lot of startups fail. But over time, it\u2019s likely that some core set of protocols and associated networks will successfully drive mainstream adoption.Finally, once the protocols begin to take shape and standardize, we\u2019ll see a whole host of decentralized applications being built on top.It\u2019s not a happy ending\u00a0yetToken sales are providing the fuel needed to drive development of protocols built on top of the blockchain, and to further drive developer interest in building applications on top of these protocols.Of course, this isn\u2019t the perfect happy ending.For one, getting a bunch of early adopters isn\u2019t enough. You also need to work hard to sustain the growth of the network effects, just like traditional businesses do. That means putting in years of hard work to building a useful application and driving adoption.Secondly, another trend I\u2019ve noticed is that most of the token sales we are seeing today are being used to drive network effects around specific applications rather than open and decentralized protocols. Since tokens are so flexible, dApp developers are creating tokens that are coupled to the dApp, instead of a standardized underlying protocol that can be shared among applications. This could lead to fragmentation in protocols.Third, the initial growth of the token value is mostly driven by speculation (since it takes some time for the platform being built to become valuable). Hence, there will likely have high volatility. It\u2019s unclear if and how we can mitigate this, and if we can even figure out a mechanism to get token prices to stabilize over time. Overall, there\u2019s a lot of open questions around the viability of a token\u2019s value over time. Ideally, we want the token\u2019s value to be tied to the value of the protocol or application, similar to how a public company\u2019s stock is tied to the company that issued it, or to represent some valuable digital right to a service. But as of today, the value of these tokens is still mostly speculation.Fourth, the market for token sales incredibly frothy right now. Because securities regulations makes it difficult to sell tokens (which are unregistered securities) as equity (remember that a token can represent anything, including equity within the protocol or application), developers are not doing it. Instead, they are structuring them as crowdsales. While there are some highly respectable projects raising much needed capital in this manner without the hassle of regulation, there\u2019s a long tail projects that are simply taking advantage of the high demand in the ICO market to raise millions of dollars in capital with very little to show for it\u200a\u2014\u200asome of which have even turned out to be outright scams that absconded with the funds collected during the process. We want these crowdsales to benefit the groups of people gathering together to build a common public good, but not the scammers. How do we achieve that?Besides these issues, there are still lots of unanswered questions that need to be figured out before token sales become a viable form of funding:What is the right design and structure for a token sale?In what cases does it make sense to structure tokens as an investment security? How should such token sales be regulated?What criteria should an individual investor use to evaluate token sales? (team, business model, etc)How is an investor guaranteed that the sale process in being managed in a safe and legal manner?Does there need to be a mechanism for distributing a portion of the liquidation value of the company among the token holders? Dividends?Can the token holders exercise control in the protocol or application via voting rights?How will the money be spent after the funds are raised?What metrics can an investor use to gauge trust that the team building the protocol or application will execute on the long-term plan and vision?Could it be more efficient to port the smart contracts of a token to use Ether directly, instead of creating a new token per protocol?What are the tax implications for the investor\u2019s gains or losses?If selling tokens become a new way to raise capital for startups, what happens to traditional Venture Capitalists?\u2026 and SO MUCH MOREIf these questions interest you, you\u2019re in luck\u200a\u2014\u200aI\u2019ll write about some of them in upcoming posts!ConclusionI\u2019ve tried my best in this article to articulate my views on token sales and clear up some of the confusion around blockchain development in general.Talking about cryptocurrency and blockchain development is like trying to take a picture of a running cheetah. The space is moving at breakneck speed, and any attempt to pin it down results in a blurry picture. Regardless, I still believe it\u2019s important that we educate the broader community on cryptocurrency topics.If you feel that I\u2019ve made any overreaching assumptions in this walkthrough, please share commentary below! I\u2019d love to talk more and learn from each other.We need everyone\u2019s input to figure out the right path towards a healthy and sustainable cryptoeconomic future.Hacker Noon is how hackers start their afternoons. We\u2019re a part of the @AMI family. We are now accepting submissions and happy to discuss advertising & sponsorship opportunities.If you enjoyed this story, we recommend reading our latest tech stories and trending tech stories. Until next time, don\u2019t take the realities of the world for granted!", "responses": "89"}, {"title": "Full Stack Hello World Voting Ethereum Dapp Tutorial\u200a\u2014\u200aPart\u00a01", "author_name": "Mahesh Murthy", "link": "https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2?source=search_post", "post_date": "Jan 18, 2017", "readtime": "8 min read", "upvotes": "10.7K", "content": "Full Stack Hello World Voting Ethereum Dapp Tutorial\u200a\u2014\u200aPart\u00a01Mahesh MurthyBlockedUnblockFollowFollowingJan 18, 2017[Tutorial was last updated in February 2019 to use the latest libraries]This is part 1of 3 part series of tutorials. You can access Part 2 and Part 3 here.In my previous post, I explained the high level architecture of Ethereum platform comparing it to a web application. As a developer, the best way to learn any new technology is by diving in and building toy applications. In this post, let\u2019s build a simple \u2018Hello World!\u2019 application which is a Voting application.The application is extremely simple, all it does is initialize a set of contestants, let anyone vote for the candidates and display the total votes received by each candidate. The goal is not to just code an application but to learn the process of compiling, deploying and interacting with it.I have deliberately avoided using any dapp frameworks to build this application because the frameworks abstract away lot of the details and you fail to understand the internals of the system. Also, when you do use a framework, you will have more appreciation for all the heavy lifting the framework does for you!In lot of ways, this article is a continuation of the previous post. If you are new to the world of Ethereum, I recommend reading it before continuing.The goal of this exercise is to:Set up the development environment.Learn the process of writing a contract, compiling it and deploying it in your development environment.Interact with the contract on the blockchain through a nodejs console.Interact with the contract through a simple web page to display the vote counts and vote for candidates through the page.The entire application set up and build was done on a fresh installation of ubuntu 16.04 xenial. I have set up and tested the application on macos as well.This is how I would visualize this application we are going to build.1. Setting up the development environmentInstead of developing the app against the live blockchain, we will use an in- memory blockchain (think of it as a blockchain simulator) called ganache. In Part 2 of the tutorial, we will interact with the real blockchain. Below are the steps to install ganache, web3js and start the test blockchain on a linux operating system. The exact same instructions work on macos as well. For windows, you can follow the instructions here (Thanks Prateesh!).mahesh@zastrin:~$ npm -v6.1.0mahesh@zastrin:~$ node -vv10.4.0mahesh@zastrin:~$ mkdir -p ethereum_voting_dapp/chapter1/mahesh@zastrin:~$ cd ethereum_voting_dapp/chapter1mahesh@zastrin:~/ethereum_voting_dapp/chapter1$ npm install ganache-cli web3@1.0.0-beta.37mahesh@zastrin:~/ethereum_voting_dapp/chapter1$ node_modules/.bin/ganache-cliThe output should look like belowGanache CLI v6.3.0 (ganache-core: 2.4.0)Available Accounts==================(0) 0x66d1dda957bc7a087324130c89547ce579cee563 (~100 ETH)(1) 0xf98e7d03f312c8329d01ef0642b74e77740cc203 (~100 ETH)(2) 0x71d4ee31cd935d17a2b00b7d8873651d6aefbf73 (~100 ETH)(3) 0x2fdaa99748e6224e03e3e5a1a9a89abd906df671 (~100 ETH)(4) 0xfb32d320a858747453ac1b4e23c849fecd6ebf33 (~100 ETH)(5) 0x2c00cd8a488a8ae569553dfe90bf90d65af97630 (~100 ETH)(6) 0xa4099d0d4a0e7ce5bf26c3f4078a001daf5cedff (~100 ETH)(7) 0xa53c14d56683bdc775c19540679b0809bbf95a2b (~100 ETH)(8) 0x3ba642d43a2a24a0160fa22c358cf697aa4a627f (~100 ETH)(9) 0x81c43af78fdb4a2c8078ec37875e9616e3c5a3e4 (~100 ETH)Private Keys==================(0) 0xee670c7915b5e73b6f5c82da3919701f19ed1f72a1d4f31007836930623f4a57(1) 0xf40063c41978799ff6fa4b85d678b0f42ed6c774c35fa883a289fdc7fa0b65cb(2) 0x5228a5e30d1be11885cd7d44d4a47b1dfa22db4033cd758a1c3677a3a0cb5383(3) 0x3520c609b830538bd8c5d05c8f53338322411deb477308c5543f20a420fea5ec(4) 0xa7728cbc1eee41d696cb1d252157fc66ab1726ff751f2132c387726b5c901c35(5) 0xe459627dc49d59da76c393b40c36c674c8307ec52c24794a33ddc773f3c229fc(6) 0xa65715e3bdc8236420491de88486ff301a19b624b006811a89742e74120eac50(7) 0xc95ab6498d506f45b4b8ab2b04967d51e05af41059334df91d63097cb3254a3b(8) 0xf0619031f2ba4319aae691ce34fe8cce136640fb715b70d5baa045c2d58f1b80(9) 0x39a85154d16a1eba4a9f8514f187bcb6c8b867b790035afa9f92bf2731aebc5bHD Wallet==================Mnemonic:      rather online beyond apology whale cheese game ankle together share potato leisureBase HD Path:  m/44'/60'/0'/0/{account_index}Notice that the ganache-cli creates 10 test accounts to play with automatically. These accounts come preloaded with 100 (fake) ethers.2. Simple voting\u00a0contractWe are going to use the solidity programming language to write our contract. If you are familiar with object oriented programming, learning to write solidity contracts should be a breeze. We will write a contract (think of contract as a class in your favorite OOP language) called Voting with a constructor which initializes an array of candidates. We will write 2 methods, one to return the total votes a candidate has received and another method to increment vote count for a candidate.Note: The constructor is invoked once and only once when you deploy the contract to the blockchain. Unlike in the web world where every deploy of your code overwrites the old code, deployed code in the blockchain is immutable. i.e, If you update your contract and deploy again, the old contract will still be in the blockchain untouched along with all the data stored in it, the new deployment will create a new instance of the contract.Below is the voting contract code with inline comment explanation:Copy the above code to a file named Voting.sol in the ethereum_voting_dapp/chapter1 directory. Now let\u2019s compile the code and deploy it to ganache blockchain.To compile the solidity code, we will first install npm module called solc. Then use the compiler to compile the contractmahesh@zastrin:~/ethereum_voting_dapp/chapter1$ npm install solc@0.5.3mahesh@zastrin:~/ethereum_voting_dapp/chapter1$ node_modules/.bin/solcjs --bin --abi Voting.solmahesh@zastrin:~/ethereum_voting_dapp/chapter1$ lsVoting.sol              Voting_sol_Voting.abi   Voting_sol_Voting.binWhen you compile the code successfully using the command above, the compiler outputs 2 files that are important to understand:Voting_sol_Voting.bin: This is the bytecode you get when the source code in Voting.sol is compiled. This is the code which will be deployed to the blockchain.Voting_sol_Voting.abi: This is an interface or template of the contract (called abi) which tells the contract user what methods are available in the contract. Whenever you have to interact with the contract in the future, you will need this abi definition. You can read more details about ABI hereRemember from the previous article, web3js is a library which lets you interact with the blockchain through RPC. We will use that library to deploy our application and interact with it.First, run the \u2018node\u2019 command in your terminal to get in to the node console and initialize the web3 object. All the code snippets below need to be typed in the node console.mahesh@zastrin:~/ethereum_voting_dapp/chapter1$ node> Web3 = require('web3')> web3 = new Web3(\"http://localhost:8545\")To make sure web3 object is initialized and can communicate with the blockchain, let\u2019s query all the accounts in the blockchain. You should see a result like below:> web3.eth.getAccounts(console.log)['0x9c02f5c68e02390a3ab81f63341edc1ba5dbb39e','0x7d920be073e92a590dc47e4ccea2f28db3f218cc','0xf8a9c7c65c4d1c0c21b06c06ee5da80bd8f074a9','0x9d8ee8c3d4f8b1e08803da274bdaff80c2204fc6','0x26bb5d139aa7bdb1380af0e1e8f98147ef4c406a','0x622e557aad13c36459fac83240f25ae91882127c','0xbf8b1630d5640e272f33653e83092ce33d302fd2','0xe37a3157cb3081ea7a96ba9f9e942c72cf7ad87b','0x175dae81345f36775db285d368f0b1d49f61b2f8','0xc26bda5f3370bdd46e7c84bdb909aead4d8f35f3']To compile the contract, load the bytecode and abi from the file system in to a string like below> bytecode = fs.readFileSync('Voting_sol_Voting.bin').toString()> abi = JSON.parse(fs.readFileSync('Voting_sol_Voting.abi').toString())Let\u2019s now deploy the contract. You first create a contract object (deployedContract) which is used to deploy and initiate contracts in the blockchain.> deployedContract = new web3.eth.Contract(abi)> listOfCandidates = ['Rama', 'Nick', 'Jose']> deployedContract.deploy({  data: bytecode,  arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]}).send({  from: 'ENTER 1 OF 10 ACCOUNT ADDRESSES like 0xfb3....',  gas: 1500000,  gasPrice: web3.utils.toWei('0.00003', 'ether')}).then((newContractInstance) => {  deployedContract.options.address = newContractInstance.options.address  console.log(newContractInstance.options.address)});We use the web3 deploy function along with send to deploy the contract to the blockchain. Let\u2019s see what are all the arguments we pass to deploy and send functions:data: This is the compiled bytecode which we deploy to the blockchain.arguments: These are the arguments we pass to the constructor of the contract. In our case we pass an array of candidate names. Note that we have to explicitly convert string to bytes32, that\u2019s why we call web3.utils.asciiToHex on each candidate name (using map function).from: The blockchain has to keep track of who deployed the contract. In this case, we are just picking the first account we get back from calling web3.eth.getAccounts to be the owner of this contract (who will deploy it to the blockchain). Remember that web3.eth.getAccounts returns an array of 10 test accounts ganache created when we started the test blockchain. In the live blockchain, you can not just use any account. You have to own that account and unlock it before transacting. You are asked for a passphrase while creating an account and that is what you use to prove your ownership of that account. Ganache by default unlocks all the 10 accounts for convenience.gas: It costs money to interact with the blockchain. This money goes to miners who do all the work to include your code in the blockchain. You have to specify how much money you are willing to pay to get your code included in the blockchain and you do that by setting the value of \u2018gas\u2019. The ether balance in your \u2018from\u2019 account will be used to buy gas. The price of gas is set by the network.gasPrice: Each unit of gas has a price associated with it. That is set in the gasPrice field.We have now deployed the contract and have an instance of the contract (variable deployedContract above) which we can use to interact with the contract. There are hundreds of thousands of contracts deployed on the blockchain. So, how do you identify your contract in that blockchain? Answer: deployedContract.options.address. When you have to interact with your contract, you need this deployed address and abi definition we talked about earlier.3. Interact with the contract in the nodejs\u00a0console> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: 'YOUR ACCOUNT ADDRESS'}).then((f) => console.log(f))> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)Try the above commands in your node console and you should see the vote count increment. Every time you vote for a candidate, you get back a transaction id: Example: \u20180xdedc7ae544c3dde74ab5a0b07422c5a51b5240603d31074f5b75c0ebc786bf53\u2019 above). This transaction id is the proof that this transaction occurred and you can refer back to this at any time in the future. This transaction is immutable. This immutability is one of the big advantages of blockchains such as Ethereum. In future tutorials, we will build applications leveraging this immutability.4. Webpage to connect to the blockchain and\u00a0voteNow that most of the work is done, all we have to do now is create a simple html file with candidate names and invoke the voting commands (which we already tried and tested in the nodejs console) in a js file. Below you can find the html code and the js file. Drop both of them in the ethereum_voting_dapp/chapter1 directory and open the index.html in your browser.If you remember, we said earlier we will need the abi and the address to interact with any contract. You can see above in the index.js file how they are used to interact with the contract.open the index.html in your browser and you should see something like this.If you are able to enter the candidate name in the text box and vote and see the vote count increment, you have successfully created your first application! Congratulations! To summarize, you set up your dev environment, coded a simple contract, compiled and deployed the contract on the blockchain and interacted with it via nodejs console and then through a webpage. Now would be a good time to pat yourself on the back if you haven\u2019t already\u00a0:)In part 2, we will deploy this contract to the public test network so the entire world can see it and vote for a candidate. We will also get more sophisticated and use the truffle framework for development (and not have to use the nodejs console to manage the entire process). Hope this tutorial helped you get a practical idea on how to get started with developing decentralized application on the Ethereum platform.As always thanks Raine Rupert Revere for corrections/edits of this post.If you run into issues getting the application working, feel free to DM me on twitter @zastrinlab or email mahesh@zastrin.com.", "responses": "215"}, {"title": "Ethereum is the Forefront of Digital\u00a0Currency", "author_name": "Fred Ehrsam", "link": "https://blog.coinbase.com/ethereum-is-the-forefront-of-digital-currency-5300298f6c75?source=search_post", "post_date": "May 24, 2016", "readtime": "11 min read", "upvotes": "3.3K", "content": "Ethereum is the Forefront of Digital\u00a0CurrencyFred EhrsamBlockedUnblockFollowFollowingMay 24, 2016We have sat here for the last 3 years seeing only infrastructure apps like wallets and exchanges emerge on top of Bitcoin. Why is that?My theory has been that the scripting language in Bitcoin\u200a\u2014\u200athe piece of every Bitcoin transaction that lets you run a little software program along with it\u200a\u2014\u200ais too restrictive.Enter Ethereum. Ethereum has taken what was a four function calculator of a programming language in Bitcoin and turned it into a full fledged computer. We now stand only 9 months out from the beginning of the Ethereum network and the level of app development is already faster than Bitcoin\u2019s. We are finally getting rapid iteration at the app layer. In one early example, people have designed a decentralized organization (The DAO)\u200a\u2014\u200aa company whose heart is code and peripheral operations are run by humans, rather than the other way around\u200a\u2014\u200athat has raised $150m so far in the largest crowdfunding ever.To be clear, I don\u2019t think this needs to be a contest between Bitcoin vs. Ethereum and Coinbase plans to strongly support both. I think this is about advancing digital currency as much as we can. There is a significant amount of overlap between the two, however, so the comparison is valuable and the potential for competition is real.How did we get\u00a0here?First, some history. When the Bitcoin white paper emerged in 2008 it was completely revolutionary. The amount of concepts that had to come together in just the right way\u200a\u2014\u200acomputer science, cryptography, and economic incentives\u200a\u2014\u200awas astonishing. When the actual Bitcoin network launched in 2009, no one knew about it, and many of those who did thought it would surely fail. Just to make sure the thing worked, the scripting language in Bitcoin was intentionally extremely restrictive. \u201cScripting language\u201d is a fancy way of saying an easy to work with programming language (in fact, Bitcoin doesn\u2019t exactly have a scripting language, it uses a stack with script operators\u200a\u2014\u200amore on that later). The scripting language in Bitcoin is important because it is what makes Bitcoin \u201cprogrammable money\u201d. Within each Bitcoin transaction is the ability to write a little program. For example, you can write a little program in a Bitcoin transaction that says \u201cthis transaction isn\u2019t valid unless it\u2019s June 15th, 2016 or later\u201d. This is very powerful because you can move money automatically with computer code and everyone can see the rules by which that money moves and know those rules will be followed.It was, and still is, incredible that Bitcoin got off the ground and is alive after 7 years. It is the first network ever to allow anyone in the world to access a fundamentally open financial system through free software. It has ~$7bn in market cap and has never had a systemic issue which could not be fixed. To some this is already a great success.However, we also stand here 7 years into Bitcoin with few apps and no \u201ckiller apps\u201d beyond store of value and speculation. The scripting language in Bitcoin has barely expanded and remains very restrictive. While Bitcoin has become embroiled in debate over the block size\u200a\u2014\u200aan important topic for the health of the network, but not something that should halt progress in a young and rapidly developing field\u200a\u2014\u200aEthereum is charting new territory, both intellectually and executionally.Make no mistake\u200a\u2014\u200aEthereum would never have existed without Bitcoin as a forerunner. That said, I think Ethereum is ahead of Bitcoin in many ways and represents the bleeding edge of digital currency. I believe this for a few reasons:Ethereum\u2019s programming languages lets you do much more than Bitcoin\u2019sAs mentioned above, Bitcoin\u2019s scripting language is intentionally restrictive. You might liken it to programming with an advanced graphing calculator\u200a\u2014\u200afunctionality is limited. As a result, you can only do basic things. It is also hard to understand and use. Rather than most modern programming languages where the code is almost readable like a sentence, it looks like unintelligible machine code. As a result, it took Mike Hearn, a talented ex-Google developer, a whopping 8 months to write a first version of a fairly simple crowdfunding application.In contrast, Ethereum\u2019s programming languages (Solidity for those who like Javascript, Serpent for those who like Python) let you do pretty much anything an advanced programming language would let you do. This is why they are said to be \u201cTuring complete\u201d. Equally important, they are easy to use. It is simple for any developer to pick it up and quickly write their first app.Here\u2019s an example of a script in Bitcoin:OP_DUP OP_HASH160 62e907b15cbf27d5425399ebf6f0fb50ebb88f18 OP_EQUALVERIFY OP_CHECKSIGAnd one in Ethereum\u2019s Solidity:contract Simple {    function() {        var two = 1 + 1;    }}Developers at Coinbase have written simple Ethereum apps in a day or two.I cannot overemphasize enough how important this combination of full programming functionality and ease of use is. People are doing things in Ethereum that are not possible right now in Bitcoin. It has created a new generation of developers which never worked with Bitcoin but are interested in Ethereum.Bitcoin could have this advanced functionality, but it would be through a series of other layers that work with the Bitcoin protocol that haven\u2019t been created yet, while Ethereum is providing it out of the box.Beyond the radical difference in scripting languages, developer tools are much better in Ethereum. Bitcoin has never had a set of developer tools that caught on much, and they are sorely needed given it is much harder to work with Bitcoin out of the box. Ethereum has made life as a developer much easier. It has a welcoming homepage for devs and its own development environment (Mix IDE) amongst others.Ethereum has a more robust developer communityThe developer community in Bitcoin feels fairly dormant. Bitcoin never really made it past the stage of simple wallets and exchanges. The most notable thing to be released recently is an implementation of the Lightning Network (a way of making transactions, especially microtransactions, more efficient) called Thunder. This is an additional protocol layer, not an application, however, and could be used by both Bitcoin and Ethereum.In contrast, Ethereum\u2019s developer community feels vibrant and growing. Most importantly, entirely new things are being tried on Ethereum. While most are experiments or toys at the moment, you can see a list of apps that developers from around the world which is rapidly expanding.Developer mindshare is the most important thing to have in digital currency. The only reason these networks (Bitcoin, Ethereum) and their tokens (bitcoin, ether) have value is because there is a future expectation that people will want to acquire those tokens to use the network. And developers create the applications which drive that demand. Without a reason to use the network, both the network and its currency are worth nothing.Ethereum\u2019s core development team is healthy while Bitcoin\u2019s is dysfunctionalVitalik Buterin, the creator of Ethereum, has shown early promise as the leader of an open source project. He seems both comfortable as a community and technical leader. As an example, here\u2019s what he sent us when we added Ethereum to GDAX, our exchange.In contrast, Bitcoin has had a leadership vacuum since Gavin Andresen stepped aside after other core developers did not get on board with his (in my opinion rational and convincing) arguments to increase the block size. \u201cCore developers\u201d as they now stand are also relatively fragmented.Beyond a leadership vacuum, Bitcoin\u2019s \u201cleadership\u201d is less clear and toxic. Greg Maxwell, technical leader of Blockstream which employs a solid chunk of core developers, recently referred to other core developers who were working with miners on a block size compromise as \u201cwell meaning dips***s.\u201d A second discussion board needed to form on reddit, /r/btc, because of censorship on the original /r/bitcoin. The content on the Bitcoin discussion boards feels like squabbling while Ethereum\u2019s is talking about relevant issues and new ideas. In summary, Ethereum leadership (and as a result its community) is moving forward while things need to get worse before they can get better in Bitcoin.Ethereum has a growth mindset while Bitcoin has a false sense of accomplishmentThe general mindset of the two communities feels different as well. Many in Bitcoin seem to have a false sense of \u201cwe\u2019ve got this really valuable network we need to protect!\u201d. In my opinion that view is wrong and dangerous. Bitcoin is still orders of magnitude smaller than the major financial networks of the world at ~$200m/day in transaction volume (Visa $18 billion/day, SWIFT wire $5 trillion/day) and ~10 million users (5 billion in banks). And while transactions per day on Bitcoin seem to be increasing at a healthy pace, the actual $ volume of transactions on Bitcoin is not growing much.Bitcoin transaction volume in peak times compared to other networks\u200a\u2014\u200awe\u2019ve got a long way to\u00a0goMeanwhile, the core development team in Ethereum is focused. This is evident from the Ethereum blog. When I started reading it, it was everything I found myself thinking about for the present and future of Bitcoin but didn\u2019t see being discussed much: scaling the network, the viability of proof of stake, how to create a stable digital currency, what a blockchain based company (DAO) would look like, amongst other topics. These are very ambitious ideas and some won\u2019t work. But some probably will work, and they will be important\u200a\u2014\u200amoving to proof of stake and eliminating physical mining being one of the most promising.Ethereum is making faster and more consistent technical progress on the core\u00a0protocolIn Bitcoin, we have mostly been stuck on the block size debate for the last year and a half. Some minor improvements have been made (CHECKLOCKTIMEVERIFY to enable the time locking functionality mentioned earlier), and others are in development but not yet live (Segregated Witness to make the network more efficient). None of these changes have sparked much in the way of application development yet.Meanwhile, beyond the more robust programming language, Ethereum is making advancements that are core to even basic transactions. Its mining allows for much quicker blocks, and thus, transaction confirmation times\u200a\u2014\u200aabout 14 seconds on Ethereum compared to 10 minutes on Bitcoin (not an apples to apples comparison, but the larger point holds). This is largely due to the concept of miners getting paid for the work they put in whether or not they are the first to solve the next block (a system called \u201cuncle blocks\u201d). While this system isn\u2019t perfect yet, it\u2019s meaningful forward progress towards quicker transaction confirmations.Counterargument and\u00a0caveatsEthereum is young and it\u2019s prudent to highlight the risks:Ethereum has been able to take more risk with new features because it is has had less to lose. Most of Ethereum\u2019s history has occurred while it has held in the hundreds of millions of dollars, while Bitcoin is in the billions. As Ethereum continues to grow, it may not be able to \u201cmove fast and break things\u201d in the same way. In practice I think this mostly comes down to the quality of the core development team\u200a\u2014\u200aif they continue to make progress and build trust with the community execution can still be rapid, as shown by Linus Torvalds with Linux as an open source project.Ethereum hasn\u2019t gone through a governance crisis. Vitalik acknowledged this at an Ethereum meetup we hosted at Coinbase. Like any project that has success, it\u2019s inevitable to hit bumps as peoples\u2019 vested interests get bigger.Ethereum allows you to do more than you currently can in Bitcoin, and that brings increased regulatory risk. This is less of a systemic risk to Ethereum as a network, rather more of a risk to specific applications of Ethereum. A good example would be decentralized organizations (ex: the DAO) and regulation which would normally apply to a corporation.There is a greater security risk with Ethereum. Having a more robust programming language creates a greater surface area for things to go wrong. Bitcoin has been battle tested for 7 years. Ethereum has been live for 9 months and now stores about $1bn. While there hasn\u2019t been a major issue yet, it is possible there are issues people are not yet aware of. This probability goes down with each passing day. People will definitely create smart contracts with bugs in Ethereum. This won\u2019t be because of a failure of the core Ethereum protocol though, much like the failure of Mt. Gox was not an error in the Bitcoin protocol.Ethereum may attempt to move to proof of stake. This would be a huge breakthrough if it works as it would eliminate the need for proof of work and all of the hardware and electricity use that goes with it, but also presents a large risk. I believe this risk is manageable because there would be extensive testing beforehand.Scaling the network is harder when it supports mini programs in addition to basic transaction processing. This was the biggest question I had when I started to read about the idea in 2014. While there is no silver bullet here, I think some combination of solutions will be developed over time as they are with any evolving technology. Some possibilities for Ethereum are sharding the network, computing power and networks naturally getting faster over time, and the economics of the Ethereum blockchain only running the most important things as a forcing function. There is a decent argument (best articulated by Gavin Andresen in his article Bit-thereum) that it\u2019s better to keep the base transaction layer dumb for scaling reasons with advanced logic in higher layers. It\u2019s possible we come full circle and end up back there, but this isn\u2019t how interesting things are being created at the moment because it\u2019s harder to 1) create and 2) get decent adoption of multiple layers in the stack than it is to have it all out of the box in Ethereum.Wait\u200a\u2014\u200awhy is this a contest? Are Bitcoin and Ethereum competitors or complementary?This remains to be seen. It\u2019s possible Bitcoin remains the protocol that people are comfortable storing their value in because it is more stable and reliable. This would allow Ethereum to continue to take more risk by trying less tested advancements. In this scenario, Bitcoin is more of a settlement network while Ethereum is used to run decentralized applications (where most of the transaction volume occurs is up in the air). The two could be quite complementary.What is very real, though, is the possibility that Ethereum blows past Bitcoin entirely. There is nothing that Bitcoin can do which Ethereum can\u2019t. While Ethereum is less battle tested, it is moving faster, has better leadership, and has more developer mindshare. First mover advantage is challenging to overcome, but at current pace, it\u2019s conceivable.What does all this\u00a0mean?It\u2019s all good news for digital currency. Ethereum is pushing the envelope and I am more excited than ever. Competition and new ideas create better outcomes for everyone. Even if Ethereum goes up in flames our collective knowledge in digital currency will have leveled up significantly. I have not given up on Bitcoin and it\u2019s hard to argue with a network that has been so resilient. I, and Coinbase, plan on supporting both. We\u2019ll probably support other things that haven\u2019t been invented yet in the future. At the end of the day, I have no allegiance to any particular network; I just want whatever brings the most benefit to the world.Taking a step back, it feels like the rate of change in digital currency is accelerating.Digital currency is a unique field because of how ambitious the scope is: creating a better transaction network for the entire world (for currency, assets, our online identities, and many other things). Like the Internet itself, this is not one company selling its own proprietary product, it is a series of low-level protocols that will connect everyone someday. And, like the Internet, it will (and has) taken longer to develop, but the impact will be immense.Fasten your seatbelts.", "responses": "62"}, {"title": "Deep Chain Reorganization Detected on Ethereum Classic\u00a0(ETC)", "author_name": "Mark Nesbitt", "link": "https://blog.coinbase.com/ethereum-classic-etc-is-currently-being-51-attacked-33be13ce32de?source=search_post", "post_date": "Jan 7", "readtime": "7 min read", "upvotes": "8.3K", "content": "Deep Chain Reorganization Detected on Ethereum Classic\u00a0(ETC)Mark NesbittBlockedUnblockFollowFollowingJan 7On 1/5/2019, Coinbase detected a deep chain reorganization of the Ethereum Classic blockchain. In order to protect customer funds, we immediately paused interactions with the ETC blockchain.Updated Jan. 7, 2019\u201310:27pm PT: At time of writing, we have identified a total of 15 reorganizations, 12 of which contained double spends, totaling 219,500 ETC (~$1.1M). No Coinbase accounts have been impacted by the attack.Updated March 11, 2019\u201311:20am PT: We have now re-enabled sends and receives of ETC. Please note that transactions may take 24 hours, or longer, to be processed by the network due to the large number of confirmations required. Current ETC network status can be found here.Background InfoPage 3 of Satoshi Nakamoto\u2019s whitepaper, Bitcoin: A Peer-to-Peer Electronic Cash System, states the following:\u201cIf a majority of CPU power is controlled by honest nodes, the honest chain will grow the fastest and outpace any competing chains.\u201dThe \u201chonest[y]\u201d of more than half of miners is a core requirement for the security of Bitcoin and any proof-of-work cryptocurrencies based on Bitcoin. Honest action, in this context, means following the behavior described in the Bitcoin white paper. This is sometimes described as a \u201csecurity risk\u201d or \u201cattack vector,\u201d but is more accurately described as a known limitation to the proof-of-work model.Failure to meet this requirement breaks several core guarantees of the Bitcoin protocol, including the irreversibility of transactions. Many other cryptocurrencies, such as Ethereum Classic, have also adopted proof-of-work mining.The function of mining is to add transactions to the universal, shared transaction history, known as the blockchain. This is done by producing blocks, which are bundles of transactions, and defining the canonical history of transactions as the longest chain of blocks*. If a single miner has more resources than the entirety of the rest of the network, this miner could pick an arbitrary previous block from which to extend an alternative block history, eventually outpacing the block history produced by the rest of the network and defining a new canonical transaction history.This is called a \u201cchain reorganization,\u201d or \u201creorg\u201d for short. All reorgs have a \u201cdepth,\u201d which is the number of blocks that were replaced, and a \u201clength,\u201d which is the number of new blocks that did the replacing.This, on its own, might end up being nothing more than a minor inconvenience. After all, the transactions all still exist, but they might have been put into a different order, perhaps delaying some of them. However, imagine a miner who also owns a large number of coins. The miner could send those coins to a merchant in a transaction, T, while also secretly extending an alternative block history. The miner\u2019s secret blocks do not include T, but rather include a transaction that sends the same coins used in T to a different address. Call that transaction T\u2019. When the miner reveals this secret history, it will contain T\u2019, not T. Because T and T\u2019 attempted to send the same coins and T\u2019 is now in the canonical history, this means that T is forever invalid, and the recipient of the coins sent in transaction T never even received them in the new, now-canonical history. More info on this can be found here.What we\u00a0observedUpdated Jan. 7, 10:27pm PT.We observed repeated deep reorganizations of the Ethereum Classic blockchain, most of which contained double spends. The total value of the double spends that we have observed thus far is 219,500 ETC (~$1.1M).Timeline of\u00a0eventsLate on the evening of Saturday 1/5, our systems alerted us to a deep reorg in ETC that contained a double spend. Our on-call engineers responded to the alert and worked to confirm the report through the night. We determined that we would temporarily halt send/receive interaction with the ETC blockchain in order to safeguard customer funds.This meant that customers who tried to send or receive ETC on Coinbase Consumer or Pro were unable to complete their transactions.Customers who tried to send or receive ETC on Coinbase Consumer or Pro were unable to complete their transactions starting early Sunday morning, Pacific\u00a0Time.On the morning of Sunday 1/6 we posted an update on status.coinbase.com stating (that) \u201cDue to unstable network conditions on the Ethereum Classic network, we have temporarily disabled all sends and receives for ETC. Buy and sell is not impacted. All other systems are operating normally.\u201dIn addition to in-platform notifications, we shared an update via status.coinbase.com.We performed an analysis on Sunday afternoon/evening to confirm the pattern and determine the key details of the double-spend attacks. Beginning Sunday afternoon, we observed 8 more incidents, all containing double spends.Out of an abundance of caution, we did not put up a blog post prior to legal and technical review. A false alarm could have inadvertently caused market instability.On Monday 1/7 morning after legal and technical review, we finalized our public analysis and posted to our blog and social media accounts.Note: A full blockchain analysis is beyond the scope of this article. Further research into the addresses sending the double spend transactions, the history of sends/receives from the addresses, the block fields such as timestamp, and the subsequent movement of miner rewards from attack blocks may shed light on the threat actor or actors behind these attacks.We observed the following deep chain\u00a0reorgs:Common ancestor: 7245623. Depth 4 / Length 7. No double spends were observed in this reorg. We noted that this was a reorg of unusual depth for ETC.Common ancestor: 7248488. Depth 5 / Length 6. No double spends were observed in this reorg. We noted that a second reorg of unusual depth was highly suspicious, but did not necessary indicate an attack as there was no double spend and the depth was still below the ETC confirmation limit for most services.Common ancestor: 7249343. Depth 57 / Length 74. A transaction of value 600 ETC in orphaned block 7249357 was double spent by a transaction in attacker block 7249361**.We ceased interacting with the ETC blockchain upon observing this reorg. Coinbase was not the target of this double spend and no funds were lost.Common ancestor: 7254419. Depth 32 / Length 53. A transaction of value 4,000 ETC in orphaned block 7254430 was double spent by a transaction in attacker block 7254435**Common ancestor: 7254568. Depth 123 / Length 140. A transaction of value 5,000 ETC in orphaned block 7254646 was double spent by a transaction in attacker block 7254656**Common ancestor: 7255033. Depth 60 / Length 79. A transaction of value 9,000 ETC in orphaned block 7255055 was double spent by a transaction in attacker block 7255066*Common ancestor: 7255204. Depth 25 / Length 35. A transaction of value 9,000 ETC in orphaned block 7255212 was double spent by a transaction in attacker block 7255225**.Common ancestor: 7255476. Depth 37 / Length 46. A transaction of value 15,700 ETC in orphaned block 7255487 was double spent by a transaction in attacker block 7255492**.Common ancestor: 7255542. Depth 67 / Length 85. A transaction of value 15,700 ETC in orphaned block 7255554 was double spent by a transaction in attacker block 7255563**.Common ancestor: 7255662. Depth 62 / Length 110. A transaction of value 24,500 ETC in orphaned block 7255669 was double spent by a transaction in attacker block 7255681**.Common ancestor: 7255998. Depth 69 / Length 86. A transaction of value 5,000 ETC in orphaned block 7256012 was double spent by a transaction in attacker block 7256022**.Updates as of 10:27pm PT, January 7Common ancestor: 7261497. Depth 44 / Length 54. A transaction of value 26,000 ETC in orphaned block 7261492 was double spent by a transaction in attacker block 7261497**.Common ancestor: 7261603. Depth 35 / Length 44. A transaction of value 52,800 ETC in orphaned block 7261610 was double spent by a transaction in attacker block 7261614**.Common ancestor: 7261647. Depth 8 / Length 9. No double spends were observed in this reorg.Common ancestor: 7261676. Depth 37 / Length 47. A transaction of value 52,200 ETC in orphaned block 7261684 was double spent by a transaction in attacker block 7261690**.Next StepsThe Coinbase team is currently evaluating the safety of re-enabling sends and receives of Ethereum Classic and will communicate to our customers what to expect regarding support for ETC. Coinbase takes security very seriously. As part of that commitment, we monitor blockchains for activity that could be harmful to our customers and take prompt action to safeguard funds. We want to emphasize to customers that Coinbase strives to be the most trusted and safest place to buy, sell, or store cryptocurrency.* It is actually the chain with the most accumulated work, rather than the chain with the most blocks, that defines the canonical history. In most cases, these chains will be the same** The block explorer does not properly handle reorgs and labels the transaction as confirmed. Click on the block to see that the block is orphaned.This website may contain links to third-party websites or other content for information purposes only (\u201cThird-Party Sites\u201d). The Third-Party Sites are not under the control of Coinbase, Inc., and its affiliates (\u201cCoinbase\u201d), and Coinbase is not responsible for the content of any Third-Party Site, including without limitation any link contained in a Third-Party Site, or any changes or updates to a Third-Party Site. Coinbase is not responsible for webcasting or any other form of transmission received from any Third-Party Site. Coinbase is providing these links to you only as a convenience, and the inclusion of any link does not imply endorsement, approval or recommendation by Coinbase of the site or any association with its operators.Unless otherwise noted, all images provided herein are by Coinbase.", "responses": "44"}, {"title": "The State of the Ethereum\u00a0Network", "author_name": "ConsenSys", "link": "https://media.consensys.net/the-state-of-the-ethereum-network-949332cb6895?source=search_post", "post_date": "Jun 1, 2018", "readtime": "6 min read", "upvotes": "10.7K", "content": "The State of the Ethereum\u00a0NetworkConsenSysBlockedUnblockFollowFollowingJun 1, 2018After months of intense attention on blockchain technology and the Ethereum blockchain, we pull together statistics from across the network to provide a snapshot of Ethereum today, its past, and its roadmap ahead.Blockchain technology\u200a\u2014\u200aand Ethereum in particular\u200a\u2014\u200ahas gained international attention and traction since its release in 2015. In particular, late 2017 and early 2018 saw a massive increase in popular attention due to rapid price increases across the entire crypto-asset ecosystem. In two years, the word \u201cEthereum\u201d has been included in over 110 million Google searches. The hashtag #ethereum is tweeted, on average, 20,000 times a day.But what has this gradual and acute increase in attention meant for the Ethereum network as a whole? If we pull back the curtain of the much-discussed price of ether, what is happening on the Ethereum network? Let\u2019s take a look.Looking at the Figures: Blockchain ActivitySince its inception, the network has processed nearly 240 million transactions. At its height on January 4, the network processed 1.3 million transactions in 24 hours.The network is huge and distributed. To date, 35 million unique addresses exist on the Ethereum blockchain. On January 4, 2018, the number of active (i.e. transacting) addresses on Ethereum surpassed 1 million for the first time. On January 4, 2018 over 350,000 new addresses were created\u200a\u2014\u200athe most addresses generated within a 24 hour period to date. Ethernodes reports just under 17,000 nodes running the Ethereum blockchain across six continents, making it the most decentralized blockchain platform in existence.Source: ethernodes.orgThe Ethereum blockchain is, without a doubt, the most active smart contract platform in existence. Of the top 100 tokens by market cap, 94% are built on top of Ethereum. Of the top 800 tokens, 87% are built on Ethereum. Most of these tokens are \u201cERC-20 tokens,\u201d which made possible the majority of the $5.5 billion raised through token sales in 2017 and the $6.5 billion raised in just the first quarter of this year.Behind the Blockchain: The Ethereum CommunityThe Ethereum developer community is estimated to be the largest in the world, at 250,000. In October 2017, Truffle\u200a\u2014\u200aa development framework for Ethereum\u200a\u2014\u200asurpassed 200,000 downloads. In less than a year, downloads are now at nearly 550,000. Github, which draws open-source developers from around the world, lists 14,000 repositories and 220,000 commits concerning Ethereum. MetaMask\u200a\u2014\u200aa browser extension allowing users to to run dApps without running an entire Ethereum node\u200a\u2014\u200ahas reached over 1 million users.Beyond the decentralized network of Ethereum developers, organized consortiums have arisen to support and expand the Ethereum community. The Ethereum Enterprise Alliance (EEA) formed in March 2017 with 30 founding members committed to the integration of blockchain technology with enterprise establishments. Now, just over one year later, the EEA has grown to over 500 members. Startups, corporations, foundations, and organizations have all come together to contribute and benefit from the continued development of the Ethereum ecosystem.Welcoming Ethereum: Government AdoptionThough a long-discussed application of blockchain technology is the restructuring and even dissolving of traditional government, countries around the world have found ways to implement blockchain technology\u200a\u2014\u200aspecifically, Ethereum\u200a\u2014\u200ato benefit their citizens. In the beginning of this year, the government of Brazil announced its intention to move petitions and popular voting onto Ethereum. Canada is testing out using Ethereum to provide transparency to the use of government grants to ease citizens\u2019 concerns of misappropriation and corruption. The city of Zug, Switzerland\u200a\u2014\u200aa long-time crypto bastion\u200a\u2014\u200abegan offering digital IDs registered on Ethereum in 2017. Chile uses Ethereum to track the data and finances from the energy grid, hoping to combat corruption and exploitation through transparent, immutable data available for every citizen to see. Dubai is on the move to become an entirely integrated, blockchain-powered city by 2020. Estonia became the poster child of the distributed ecosystem and matured into a \u201cdigital republic\u201d by moving many of its national systems onto the Ethereum blockchain.Though blockchain technology has been cited as an opportunity to re-define the current global political structure with digital borders and citizenships, current systems are not wary of using its immutable, secure ledger to augment their services. We will continue to see government adoption of the Ethereum blockchain as its utility is proven in current examples.Building on Ethereum: Decentralized ApplicationsDecentralized Applications (dApps) are the primary selling point of the Ethereum blockchain. As an open-source, turing-complete, world computer, Ethereum can be leveraged by any developer to build her own series of smart contracts (i.e. a decentralized application). A site that tracks dApp development lists 1,552 launched dApps, though more are currently in development. DApps consist of everything ranging from prediction markets to gaming, and will continue to grow stronger as the network is improved upon.The Elephant in the Room: Scaling SolutionsScaling solutions for the Ethereum network are numerous, and are being worked on by multiple participants in the network. 2018 will be an exciting time for Ethereum, particularly with the projected testing of Proof of Stake through the rollout of the Casper protocol. Many active projects aim to provide layer 2 solutions, or \u201cinter-blockchain protocols.\u201d These initiatives tackle the \u201ctrilemma\u201d of achieving scalability, security, and decentralization on a blockchain. Cosmos is a permissionless network built for developers that allows blockchain interoperability and scaling. Loom Network has developed and launched a layer 2 platform on top of Ethereum, allowing gaming and social dApps to scale while still relying on Ethereum\u2019s core security and decentralization. The team has launched CryptoZombies, a live app enabling anyone to learn to code smart contracts on Ethereum (with over 200,000 students). OmiseGo allows users to send high-speed payment transactions between entities and across borders using plasma. Layer 2 scaling solutions, according to Vitalik Buterin, \u201ccan be built in such a way that they depend on the second level for performance, but not safety\u2026 They can then have the incentive of reputation and expected future revenue to drive them to perform well in the present, and the negative costs of any failure are mitigated.\u201dLooking Down the\u00a0RoadWhat does this data mean? The Ethereum blockchain ecosystem is diverse, it is decentralized, it is strong, and it is flooded with innovation and activity. Since its launch in 2015, this rapidly-adopted and appreciated technology promises to solve issues plaguing almost every incumbent industry on earth. Across the world, developers, thinkers, innovators, leaders, and creatives are coming together to build a new way of communicating, transacting, and organizing. We\u2019re here for Web 3.0. We\u2019re here for a decentralized future. We\u2019re here for Ethereum.Zunaira Arshad, Everett Muzzy & Jeff Gillis, ConsenSysDisclaimer: The views expressed by the author above do not necessarily represent the views of Consensys AG. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": "25"}, {"title": "How to issue your own token on Ethereum in less than 20\u00a0minutes.", "author_name": "Moritz Neto", "link": "https://medium.com/bitfwd/how-to-issue-your-own-token-on-ethereum-in-less-than-20-minutes-ac1f8f022793?source=search_post", "post_date": "Dec 25, 2017", "readtime": "9 min read", "upvotes": "19.2K", "content": "How to issue your own token on Ethereum in less than 20\u00a0minutes.Moritz NetoBlockedUnblockFollowFollowingDec 25, 2017Alright bro, are you telling me that I can issue my own Token, make an ICO, get gazilions of dollars and live the crypto-dream in less than 20 minutes?The answer is yes, but hopefully you will do better than that.With the latest news about the Blockchain, Bitcoin, Ethereum, cryptocurrencies, and ICO popping up left, right and center, this Blockchain business is garnering quite a lot of attention. So I\u2019ve put together a tutorial so that you can understand the technology much better and you can become a part of the booming crypto-economy!", "responses": "252"}, {"title": "Inaugural Keynote: Digix and Ethereum Singapore", "author_name": "SwipeCrypto-Editor", "link": "https://medium.com/swipecrypto/inaugural-keynote-digix-and-ethereum-singapore-ecb341ff1446?source=search_post", "post_date": "Oct 13, 2017", "readtime": "2 min read", "upvotes": "6.7K", "content": "Inaugural Keynote: Digix and Ethereum SingaporeSwipeCrypto-EditorBlockedUnblockFollowFollowingOct 13, 2017SwipeCrypto is organizing the first Ethereum Indonesia meetup on 24 October 2017, 7 pm local time (GMT +7) at Capitol, Jl. Prajurit KKO Usman dan Harun \u211616, RT.2/RW.1, Senen, Kota Jakarta Pusat, Daerah Khusus Ibukota Jakarta 10410, Jakarta. As one of the local tech-startup, SwipeCrypto is committed to build and grow Indonesia blockchain community in the region.SwipeCrypto is excited to have Digix co-founder and SwipeCrypto advisor, Shaun Djie, to share his knowledge on this meetup. Join us and learn more about the trend, use cases, tips, activities of Ethereum meetup Singapore and many more by RSVP-ing your seat here: https://www.meetup.com/Ethereum-Indonesia/events/244138657/.Topics that will be covered during the talk will include:\u2022 Introduction to Blockchain Technology, Cryptocurrencies\u2022 Introduction of use cases\u2022 Use case 1: Capital raising activities on the blockchain\u2022 Use case 2: Examples of businesses\u2022 Outreach, trends in the ecosystemSpeaker:\u00a0Shaun Djie\u200a\u2014\u200aCo-founder/COO of Digix GlobalShaun is the co-founder and COO of DigixGlobal, an asset tokenization company on Ethereum and the founder of Ethereum Singapore meetup group, the largest of its kind out of Asia. Shaun is also an Advisor to the Indorse and SwipeCrypto project.www.digix.globalDigix tokenizes gold on Ethereum. Digix leverages the Distributed Ledger for its immutability, transparency and auditability by applying it to precious physical assets. Digix has created a range of technologies including The Proof of Asset Protocol (POA) and Digix Gold Tokens (DGX) on Ethereum.Join us and let\u2019s grow this community together\u200a\u2014\u200ahttps://www.meetup.com/Ethereum-Indonesia/events/244138657/", "responses": ""}, {"title": "A 101 Noob Intro to Programming Smart Contracts on\u00a0Ethereum", "author_name": "ConsenSys", "link": "https://medium.com/@ConsenSys/a-101-noob-intro-to-programming-smart-contracts-on-ethereum-695d15c1dab4?source=search_post", "post_date": "Oct 29, 2015", "readtime": "27 min read", "upvotes": "6.2K", "content": "A 101 Noob Intro to Programming Smart Contracts on\u00a0EthereumConsenSysBlockedUnblockFollowFollowingOct 29, 2015Originally published at consensys.github.io/developers (where some of the code formatting might be easier to read).Some people say Ethereum is too logic-heavy and hard to use, but here\u2019s a write-up to give you a feel for building smart contracts and applications with it. Tools, wallets, applications and the ecosystem are still in development and it\u2019ll get easier!Part I is an overview of key terms and discusses Ethereum Clients and Smart Contract Languages.Part II discusses overall workflow and some current DApp Frameworks and Tools andPart III is the Programming Part, a quick walkthrough of writing tests and building a DApp for a smart contract using Truffle.Part I.\u00a0IntroIf you\u2019re new to all this cryptocurrency stuff, including Bitcoin and how it works, check out the first couple chapters of Andreas Antonopoulos\u2019 Bitcoin Book to dip your toe in the water. Then head over to the Ethereum Whitepaper.If you start getting into some murky sections and would rather build something to get familiar first, then just read on. You don\u2019t have to understand all the crypto economic computer science to start building, and a lot of that paper is about Ethereum\u2019s improvements over Bitcoin\u2019s architecture.Starter TutorialsThe official place to start is ethereum.org which has a starter tutorial and follow-up token and crowdsale tutorials. There\u2019s also the official Solidity docs. Another good place to start with smart contracts (where I started) is dappsForBeginners, although it might be outdated.The goal of this write-up is to complement those tutorials and introduce some helpful dev tools that make starting out with Ethereum, smart contracts and building DApps (decentralized apps) easier. And to try to explain the overall flow of what\u2019s going on. This is from my (still-noob) perspective and with much help from the cool developers at ConsenSys.Basic ConceptsIt\u2019d be good to know some of these terms:Public Key Cryptography. Alice has a public key and private key. She can use her private key to create a digital signature, and Bob can use Alice\u2019s public key to verify that a signature is really from Alice\u2019s private key, i.e., really from Alice. When you create an Ethereum or Bitcoin wallet the long \u20180xdf\u20265f\u2019 address is a public key and the private key is stored somewhere. A Bitcoin wallet service like Coinbase stores your wallet\u2019s complementary private key for you, or you can store it yourself. If you lose your private key for a wallet with real funds you\u2019ll lose all your funds forever, so it\u2019s good to back up your keys. It hurts to learn this the hard way! I\u2019ve done it.Peer-to-Peer Networking. Like BitTorrent, all Ethereum nodes are peers in a distributed network, there\u2019s no centralized server. [In the future, there\u2019ll be hybrid semi-centralized services for Ethereum as a convenience to users and developers, more on that later.]Blockchain. Like a global ledger or simple database of all transactions, the entire history of all transactions on the network.Ethereum Virtual Machine. So you can write more powerful programs than on top of Bitcoin. It refers to the blockchain, what executes smart contracts, everything.Node. Using this to mean you can run a node and through it read and write to the Ethereum blockchain, i.e., use the Ethereum Virtual Machine. A full node has to download the entire blockchain. Light nodes are possible but in the works.Miner. A node on the network that mines, i.e., works to process blocks on the blockchain. You can see a partial list of live Ethereum miners here: stats.ethdev.com.Proof of Work. Miners compete to do some math problem. The first one to solve the problem (the next block on the Blockchain) wins a reward: some ether. Every node then updates to that new block. Every miner wants to win the next new block so are incentivized to keep up to date and have the one true blockchain everybody else has, so the network always achieves consensus. [Note: Ethereum is planning to move to a Proof of Stake system without miners eventually, but that\u2019s beyond noob scope.]Ether. Or ETH for short. It\u2019s a real digital currency you can buy and use! Here\u2019s a chart from one of several exchanges for it. At the time of writing, 1 ETH is worth about 65 cents in USD.Gas. Running and storing things on Ethereum costs small amounts of ether. Keeps things efficient.DApp. Decentralized App, what applications using smart contracts are called in the Ethereum community. The goal of a DApp is (well, should be) to have a nice UI to your smart contracts plus any extra niceties like IPFS (a neat way to store and serve stuff in a decentralized network, not made by Ethereum but a kindred spirit). While DApps can be run from a central server if that server can talk to an Ethereum node, they can also be run locally on top of any Ethereum node peer. [Take a minute: unlike normal webapps, DApps may not be served from a server. They may use the blockchain to submit transactions and retrieve data (important data!) rather than a central database. Instead of a typical user login system, users may be represented by a wallet addresses and keep any user data local. Many things can be architected differently from the current web.]For another noob angle on some of the concepts above here\u2019s a good read: Just Enough Bitcoin for Ethereum.Ethereum Clients, Smart Contract LanguagesYou don\u2019t have to run an Ethereum node to write and deploy smart contracts. See Browser-based IDEs and APIs below. But if you\u2019re learning, run an Ethereum node, it\u2019s good to get to know as a basic component and not hard to set up.Clients for Running an Ethereum\u00a0NodeEthereum has several different client implementations (meaning ways to run a node to interact with the Ethereum network) including C++, Go, Python, Java, Haskell, etc. Why? Different strokes for different folks (like how the Haskell one is supposedly mathematically verifiable), and it improves the security and ecosystem of Ethereum to have so many. There\u2019s also a gui-based client in development, AlethZero.At the time of writing, I\u2019ve been using geth, the Go language one (go-ethereum) and on other days a tool called testrpc that uses the Python client, pyethereum. [Update: A new popular tool we use in lieu of testrpc now is ethersim that uses ethereumJS. EthereumJS is a JavaScript client that doesn\u2019t support real blockchain mining, so it\u2019s not a full client like the others listed above, but mining can be simulated for testing and development purposes.] The later examples will involve those tools.[Sidebar: I\u2019ve also tried the C++ one and still use its ethminer component for mining along with geth as the node, so different pieces can work together. Sidebar on Mining: Mining can be fun, sort of like having a houseplant you tend to, and another way to learn about the ecosystem\u2026 even if the price of ETH right now is not worth the local electricity costs of mining, that may change. Especially if everyone starts building cool DApps and Ethereum becomes more popular.]Interactive Console. Once you have a node using one of the clients, you can sync with the blockchain, create wallets and send and receive real ether. One way to do that with geth is through the JavaScript console. Another way is via JSON RPC (remote procedure calls) using a command like cURL for getting stuff via URLs. However the goal of this article is to walk you through a DApp development scenario so let\u2019s just move on. But these tools are good to remember for debugging, configuring nodes and using a wallet via command line.Running a node on a test network. If you install a client like geth and run it on the live network, it will take a while to download the entire blockchain and sync with the network. (You can check that it\u2019s synced by seeing that you have the latest block which is listed at the top of stats.ethdev.com and comparing that number to the block number output by your client node\u2019s logs.)However to run smart contracts on the live network you\u2019d have to cough up some real ether. Instead there are ways to run clients on a local testnet for for free. They won\u2019t download the full blockchain and will create a private instance of the Ethereum network with its own blockchain, so are faster to use for development.testrpc. You can run a test network using geth, or another fast way of getting a testnet running is using testrpc. Testrpc will create a bunch of pre-funded accounts for you that will be listed when it starts up. It\u2019s is also super fast, so easier to develop and test with. You can start with testrpc, then when your contracts are in good shape, move to geth on a testnet, which can be started by specifying a networkid like: geth\u200a\u2014\u200anetworkid \u201c12345\u201d. Here\u2019s the testrpc repo but I\u2019ll review everything you need to install again in the tutorial part later. [Update: The developer of testrpc is now focusing on ethersim as a replacement for testrpc and I\u2019ll update this tutorial eventually to use ethersim too. You can start using it now in if you\u2019d like. Ethersim is based on ethereumJS and simulates mining for dev purposes and is very fast.]Let\u2019s talk about programming languages next, then we can dive into actually coding stuff.Programming Languages for Smart ContractsJust use Solidity. To write smart contracts there are a few different languages: Solidity, which is like JavaScript and has\u00a0.sol as a file extension, Serpent, Python-like with extension\u00a0.se, and a 3rd, LLL, based on Lisp. Serpent was popular a while back but Solidity is the most popular right now and more robust, so just use Solidity. You prefer Python? Use Solidity.solc Compiler. After writing a contract in Solidity, use solc to compile it. It\u2019s from the C++ libraries (different implementations complementing each other again) which can be installed here. [If you don\u2019t want to install solc you can also just use a browser-based compiler like the Solidity real-time compiler or Cosmo, but the programming part later on will assume you have solc installed.][Note: Ethereum\u2019s libraries are undergoing active development and sometimes things get out of sync with new versions. Make sure you have the latest dev version, or a stable version. Ask in one of the Ethereum Gitter\u2019s on Github or forums.ethereum.org what version people are using if things that used to work stop working.]web3.js API. Once a Solidity contract is compiled with solc and sent to the network, you can call it using the Ethereum web3.js JavaScript API and build web apps that interact with contracts. (No need to install this yet, read up on DApp Frameworks below first.)Those are the basic Ethereum tools for coding smart contracts and interacting with them to build DApps.Part II. DApp Frameworks, Tools and\u00a0WorkflowDApp-building FrameworksYou can do all these steps with just the tools mentioned above, but some helpful devs have created DApp frameworks to make development easier.Truffle and Embark. The one that got me started is Truffle. (Before Truffle I watched a group of smart student interns last summer code stuff for a sleepless hackathon (albeit with terrific results) and shrank back in fear. Then Truffle came along and did a lot of the nitty gritty stuff for you, so you can start writing-compiling-deploying-testing-building DApps right away.) Another very similar framework for building and testing DApps is Embark. Between those two, I\u2019ve only used Truffle, but there are very successful DApp devs in both camps. [Update: Some other good dapp-building frameworks are Dapple and Populus. Dapple also just got a dev grant to be improved.]Meteor. Another stack a lot of DApp devs use include web3.js + Meteor which is a general webapp framework (The ethereum-meteor-wallet repo has a good starter example, and SilentCiero is building a lot of Meteor integrations with web3.js and DApp boilerplates). I\u2019ve downloaded and run cool DApps that do things this way. There\u2019ll be some interesting discussion of all of these tools and best practices for building DApps at Ethereum\u2019s \u00d0\u039eVCON1 conference Nov. 9\u201313th (which will also be streamed or on YouTube).APIs. BlockApps.net is creating a RESTful API for DApps based on a Haskell node they run as a centralized service to save you the trouble of running a local Ethereum node. This departs from the completely decentralized model of DApps but is useful when running an Ethereum node locally isn\u2019t realistic. For example if you want to serve your DApp to users who won\u2019t be running local nodes either and reach a wider audience with just a web browser or mobile device. BlockApps has a command line tool called bloc in the works that can be used after creating a developer account with them.If users have to run a local Ethereum node to use DApps isn\u2019t that a dealbreaker? Like BlockApps there are a range of tools in development so this won\u2019t be. Metamask lets you run Ethereum stuff in a browser without a node, Ethereum\u2019s AlethZero or AlethOne are easier-to-use GUI clients being developed and a LightWallet ConsenSys is building are ways to make interacting with DApps more painless. Light (SPV) nodes and sharding are also in the works or planned. It\u2019s a P2P ecosystem but can involve hybrid architectures.Smart Contract\u00a0IDEsIDEs.There\u2019s a Mix IDE for writing contracts put out by Ethereum. Haven\u2019t tried it but will soon.Browser-based IDEs. The Solidity real-time compiler and Cosmo are both a fast way to get started compiling your smart contracts right away in a browser. You can even point your local node at these hosted instances by opening up a port (you should trust the site and not have your life savings in ether on your local node for that! See the Cosmo UI for instructions on how to do this with geth). But once your contract is working ok it\u2019s nice to use a framework for adding a UI and packaging it all up as a DApp, which is what Truffle does and will be explained in the programming part later.Another powerful enterprise-y browser IDE is in the works by Ether.Camp. Their IDE comes with a sandbox test network with an auto-generated GUI for testing (instead of writing tests manually as shown in the tutorial later) as well as a sandbox transaction explorer at test.ether.camp. When you\u2019re ready to deploy your contract for semi-real, using their testnet can be a good way to confirm your smart contract\u2019s working as expected on a closer-to-real testbed. The same explorer for the live Ethereum network is at frontier.ether.camp and it shows details about every transaction ever. Ether.Camp\u2019s IDE is invite-only for eager guinea pigs at time of writing but will be launched soon.Sample Contracts and DApps. Search Github for DApp repos and\u00a0.sol files to see what cool stuff people do and how. A big list of DApps with repos is also here: dapps.ethercasts.com, although some of the list\u2019s details are a little out of date. Ether.fund/contracts also has some examples of Solidity and Serpent contracts people have written, but not sure if these have been tested or verified for correctness. There\u2019ll be a whole day of DApp presentations Thursday, Nov. 12th at \u00d0\u039eVCON1.Workflow for Deploying Smart ContractsThe workflow is:Start an Ethereum node (e.g. geth or testrpc or ethersim)Compile your Solidity smart contract using solc => get back the binaryDeploy your compiled contract to the network. (This step costs ether and signs the contract using your node\u2019s default wallet address, or you can specify another address.) => get back the contract\u2019s blockchain address and ABI (a JSON-ified representation of your compiled contract\u2019s variables, events and methods that you can call)Call stuff in the contract using web3.js\u2019s JavaScript API to interact with it (This step may cost ether depending on the type of invocation.)This workflow is depicted in greater detail in the diagram below:You could build a DApp that provides a UI for users to deploy a contract then use it (Steps 1 or 4). Or your DApp could assume the contract\u2019s already been deployed (common) and start the UI flow from there (Step 6).Part III. The Programming Part,\u00a0FinallyTesting in\u00a0TruffleTruffle is great for test-driven development of smart contracts which is highly recommended to maintain sanity when you\u2019re starting to learn how things work. It\u2019s also useful as a way to learn to write promises in JavaScript, i.e., deferred and asynchronous callbacks. Promises are like \u201cdo this, then when that comes back, do that, and when that comes back, do this other thing\u2026and don\u2019t keep us waiting while all that\u2019s going on, ok?\u201d Truffle uses a JS promises framework called Pudding on top of web3.js (so it installs web3.js for you too).Transaction times. Promises are extremely useful for DApps because transactions need to be mined into the blockchain (takes 12\u201315 seconds in Ethereum). Even if they don\u2019t seem to take that long on a test network it may take longer on the live network, or to find out it didn\u2019t happen (e.g. your transaction could have ran out of gas, or was mined into a block that\u2019s been orphaned).So let\u2019s copy a simple smart contract and write a test for it.Using TruffleMake sure you have 1. solc installed and 2. testrpc. (For testrpc you\u2019ll need Python and pip. If you\u2019re new to Python, to install it you may also need to use a virtualenv, a way to keep python libraries separate on a single computer.)Install 3. Truffle (You can do this using NodeJS\u2019s npm: npm install -g truffle, the -g may require sudo). To verify it installed, type truffle list in a console window to list all truffle commands. Then create a new project directory (I\u2019m naming my new directory \u2018conference\u2019), change into it, and do truffle init. This will create this directory structure:Now start a client node in a new console window by running testrpc (or start your geth node):Back in the first truffle console window, now type truffle deploy. This will deploy the Example contract truffle init created as boilerplate. Any errors messages you may have will show up in either the testrpc console window or the truffle window.As you\u2019re developing you can do truffle compile to make sure your contracts compile (using solc you can also run solc YourContract.sol), truffle deploy to compile and deploy it to the network, and truffle test to run your smart contract tests.First Contract, First\u00a0TestHere\u2019s a Solidity contract for a Conference where registrants can buy tickets, and the organizer can set a maximum quota of attendees as well as provide refunds. All the code presented in this tutorial is in this repo.contract Conference {   address public organizer;  mapping (address => uint) public registrantsPaid;  uint public numRegistrants;  uint public quota;  // so you can log these events  event Deposit(address _from, uint _amount);   event Refund(address _to, uint _amount);  function Conference() { // Constructor    organizer = msg.sender;    quota = 500;    numRegistrants = 0;  }  function buyTicket() public returns (bool success) {     if (numRegistrants >= quota) { return false; } // see footnote     registrantsPaid[msg.sender] = msg.value;     numRegistrants++;     Deposit(msg.sender, msg.value);     return true;  }  function changeQuota(uint newquota) public {    if (msg.sender != organizer) { return; }    quota = newquota;  }  function refundTicket(address recipient, uint amount) public {    if (msg.sender != organizer) { return; }    if (registrantsPaid[recipient] == amount) {      address myAddress = this;      if (myAddress.balance >= amount) {        recipient.send(amount);        registrantsPaid[recipient] = 0;        numRegistrants--;        Refund(recipient, amount);      }     }  }  function destroy() { // so funds not locked in contract forever    if (msg.sender == organizer) {      suicide(organizer); // send funds to organizer    }  }}[Footnote: Currently if the quota is reached, buyTicket() keeps the money in the contract but the buyer won\u2019t get a ticket. So buyTicket() should use \u2018throw\u2019 to revert ticket buyer\u2019s transaction. I\u2019ll update the code and add a test for this soon. (Thanks to F.V. from the comments for catching this.)]Let\u2019s deploy this.[Note: At time of writing I have solc 0.1.3+ (installed via brew), Truffle v.0.2.3, testrpc v.0.1.18 (using a venv) on Mac OS X 10.10.5.]Deploying the\u00a0ContractAdd a new smart contract. After you\u2019ve done truffle init, or in the existing project directory, copy-paste the Conference contract into contracts/Conference.sol. Then in the file config/app.json, edit the \u201cdeploy\u201d array to include \u201cConference\u201d.Start testrpc. Start testrpc in a separate console window using testrpc if its not already running.Compile or Deploy. Run truffle compile to see if the contract compiles, or just do truffle deploy to compile and deploy at once. This will add the deployed contract\u2019s address and ABI(that JSON-ified version of the compiled contract) to the config directory, which truffle test and truffle build will pull in from later on.Errors? Did that compile? Again, error messages may show up in either the testrpc console or the truffle console.Redeploy after restarting a node! If you stop your testrpc node, remember to redeploy any contracts using truffle deploy before trying to use them again. Each time testrpc restarts it\u2019s a blank slate.Analyzing the\u00a0ContractLet\u2019s start with the variables at the top of the smart contract:  address public organizer;  mapping (address => uint) public registrantsPaid;  uint public numRegistrants;  uint public quota;address. The first variable is the wallet address of the organizer. This is set when the constructor is called in function Conference(). A lot of contracts will also call this the \u2018owner\u2019.uint. An unsigned integer. Space is important on the blockchain so keep things as small as possible.public. Means it can be called from outside the contract. A private modifier would mean it can only be called from within the contract (or by derived contracts). If you\u2019re trying to call a variable from a web3.js call in a test make sure its public.Mappings or Arrays. Before Solidity added support for arrays, mappings like mapping (address => uint) were used. This could also be written as address registrantsPaid[] but mappings have a smaller footprint. This mapping will be used to store how much each registrant (represented by their wallet address) has paid so they can get refunds later on.More on addresses. Your client node (i.e., testrpc or geth in these examples) can have one or more accounts. In testrpc, on startup an array of 10 \u201cAvailable Addresses\u201d are displayed:The first one, accounts[0], is used by default for calling transactions if a different one is not specified.Organizer address vs. Contract address. Your deployed contract will have its own contract address (different from the organizer\u2019s address) on the blockchain. This address is accessible in a Solidity contract using this, as used inside the refundTicket function in the contract: address myAddress = this;Suicide, a good thing in Solidity. Funds sent to the contract are held in the contract itself. In the destroy function above funds are finally released to the organizer set in the constructor. suicide(organizer); does this. Without it, funds can end up locked in the contract forever (somebody on reddit lost some ether this way), so make sure to include that method if your contract collects funds!If you want to simulate another user or counterparty (e.g. simulate a buyer if you\u2019re a seller), you can use another address from the accounts array. To buy a ticket as a different user, say accounts[1], use it in the from field:conference.buyTicket({  from: accounts[1], value: some_ticket_price_integer });Some Function Calls can be Transactions. Function calls that change the state of the contract (modify values, add records, etc.) are transactions and have implicit sender and value. So inside curly braces { from: __, value: __ } can be specified in a web3.js function call to send funds to a transaction function from a wallet address. On the Solidity end, you can retrieve these values using msg.sender and msg.value, which are implicity in Solidty transaction functions:function buyTicket() public {   ...  registrantsPaid[msg.sender] = msg.value;  ...}Events. These are totally optional. Deposit and Send in the contract are events that can be logged in the Ethereum Virtual Machine logs. They don\u2019t actually do anything, but are good practice for keeping track that a transaction has happened.Okay, let\u2019s write a test for this smart contract to make sure it works.Writing a\u00a0TestIn your project folder\u2019s test/ directory rename the example.js test file to conference.js. Modify all instances of \u201cExample\u201d to \u201cConference\u201d.contract('Conference', function(accounts) {  it(\"should assert true\", function(done) {    var conference = Conference.at(Conference.deployed_address);    assert.isTrue(true);    done(); // stops tests at this point  });});On running truffle test from the project\u2019s root directory you should see the test pass. In the test above truffle gets the contract\u2019s address on the blockchain from Conference.deployed_address.Let\u2019s write a test to initialize a new Conference and check that the initial variables are being set correctly. Replace the test in conference.js with this one:contract('Conference', function(accounts) {  it(\"Initial conference settings should match\", function(done) {    var conference = Conference.at(Conference.deployed_address);    // same as previous example up to here    Conference.new({ from: accounts[0] }).then(      function(conference) {       conference.quota.call().then(        function(quota) {          assert.equal(quota, 500, \"Quota doesn't match!\");        }).then(function() {          return conference.numRegistrants.call();        }).then( function(num) {          assert.equal(num, 0, \"Registrants should be zero!\");          return conference.organizer.call();        }).then( function(organizer) {          assert.equal(organizer, accounts[0], \"Owner doesn't match!\");          done(); // to stop these tests earlier, move this up        }).catch(done);    }).catch(done);  });});Constructor. Conference.new({ from: accounts[0] }) instantiates a new Conference by calling the contract\u2019s constructor. Since accounts[0] is used by default if no from is specified, so it could have been left out when calling the constructor:Conference.new({ from: accounts[0] }); // same as Conference.new();Promises. That\u2019s what those then and return\u2019s above are. What\u2019s going on above might start to look like a deeply nested function call chain like:conference.numRegistrants.call().then(  function(num) {    assert.equal(num, 0, \"Registrants should be zero!\");     conference.organizer.call().then(      function(organizer) {        assert.equal(organizer, accounts[0], \"Doesn't match!\");          }).then(            function(...))               }).then(                 function(...))                  // Because this would soon get hairy...Promises flatten this to minimize nesting, allow for calls to return asynchronously and help simplify the syntax of writing \u201con success do this\u201d vs. \u201con failure do that\u201d. Web3.js provides callbacks for asynchronous requests (docs) so you don\u2019t have to wait for transactions to complete to do stuff in the front-end. (Truffle uses a promises framework wrapper to web3.js called Pudding, based on the framework Bluebird, which also has advanced promise features.)call. Use this to check the values of variables as in conference.quota.call() or with an argument like call(0) to call a mapping and get index 0. Solidity docs say this is a \u201cmessage call\u201d which is 1. not mined and so 2. doesn\u2019t have to be from an account/wallet (therefore it\u2019s not signed with an account holder\u2019s private keys). Transactions on the other hand, are mined, have to be from an account (i.e., signed), and are recorded on the blockchain. Modifying any value in a contract is a transaction. Just checking a variable value is not. So don\u2019t forget to add call() when calling variables! Crazy things can happen. [Also, if you\u2019re trying to call a variable and having problems make sure its public.] call() can also be used to call functions that are not transactions. If they are meant to be transactions and you try to call() them, they won\u2019t execute as transactions on the blockchain.assert. Standard JS testing assertion (if you type \u2018asserts\u2019 plural by accident truffle will have errors and you won\u2019t know what\u2019s going on), see the Chai docs for other types of assertions but assert.equal is usually all you need.Run truffle test again to make sure that works for you.Writing a Test calling a Contract\u00a0FunctionLet\u2019s test that the function that changes the quota works. Inside the contract(\u2018Conference\u2019, function(accounts) {\u2026}; body of tests/conference.js stick this additional test:it(\"Should update quota\", function(done) {  var c = Conference.at(Conference.deployed_address);  Conference.new({from: accounts[0] }).then(    function(conference) {    conference.quota.call().then(      function(quota) {        assert.equal(quota, 500, \"Quota doesn't match!\");      }).then(        function() {          return conference.changeQuota(300);      }).then(        function(result) {          console.log(result);           // printed will be a long hex, the transaction hash          return conference.quota.call();      }).then(        function(quota) {          assert.equal(quota, 300, \"New quota is not correct!\");          done();      }).catch(done);  }).catch(done);});The new thing is the line that calls the changeQuota function. The console.log is also useful for debugging to print the result in the truffle console\u2019s output. Add a console.log to see if the execution gets to a certain point. Also make sure the changeQuota function in the Solidity contract is public, or you won\u2019t be able to call it:function changeQuota(uint newquota) public { }Writing a Test for a TransactionLet\u2019s call a function that expects funds from a wallet address.Wei. Ether has a lot of denominations (here\u2019s a helpful converter) and the one normally used in contracts is Wei, the smallest. Web3.js provides convenience methods for converting ether to/from Wei, as in web3.toWei(.05, \u2018ether\u2019). JavaScript has issues with very big numbers so web3.js uses a BigNumber library and they recommend keeping things in Wei in your code until users see it (docs).Account Balances. Web3.js provides a lot more convenience methods here, and another one used in the test below is web3.eth.getBalance(some_address). Remember that funds sent to the contract are in the contract itself until suicide is called.Inside the contract(Conference, function(accounts) {\u2026}; body stick this additional test. In the highlighted method below, the test has a second user (accounts[1]) buy a ticket for ticketPrice. Then it checks that the contract\u2019s balance has increased by the ticketPrice sent and that the second user has been added to the list of registrants.In this test buyTicket is a Transaction:it(\"Should let you buy a ticket\", function(done) {  var c = Conference.at(Conference.deployed_address);  Conference.new({ from: accounts[0] }).then(    function(conference) {    var ticketPrice = web3.toWei(.05, 'ether');    var initialBalance = web3.eth.getBalance(conference.address).toNumber();    conference.buyTicket({ from: accounts[1], value: ticketPrice })      .then(        function() {         var newBalance = web3.eth.getBalance(conference.address).toNumber();         var difference = newBalance - initialBalance;         assert.equal(difference, ticketPrice, \"Difference should be what was sent\");         return conference.numRegistrants.call();      }).then(       function(num) {         assert.equal(num, 1, \"there should be 1 registrant\");          return conference.registrantsPaid.call(accounts[1]);      }).then(function(amount) {         assert.equal(amount.toNumber(), ticketPrice, \"Sender's paid but is not listed\");         done();      }).catch(done);   }).catch(done);});Transactions are Signed. Unlike previous function calls this is a transaction sent funds, so under the hood the second user (accounts[1]) is signing the transaction call buyTicket() with their key. (In geth the user would have to enter a password to approve this transaction or unlock their account before sending funds.)toNumber(). Sometimes results from Solidity returned have to be converted from hex. If it might be a really big number go with web3.toBigNumber(numberOrHexString) because Javascript can mess up big numbers.Writing a Test for a Contract Sending a TransactionFinally, for sanity, let\u2019s make sure the refundTicket method works and can only be activated by the organizer. Here\u2019s a test for it:it(\"Should issue a refund by owner only\", function(done) {  var c = Conference.at(Conference.deployed_address);  Conference.new({ from: accounts[0] }).then(    function(conference) {      var ticketPrice = web3.toWei(.05, 'ether');      var initialBalance = web3.eth.getBalance(conference.address).toNumber();      conference.buyTicket({         from: accounts[1], value: ticketPrice }).then(       function() {         var newBalance = web3.eth.getBalance(conference.address).toNumber();         var difference = newBalance - initialBalance;         assert.equal(difference, ticketPrice, \"Difference should be what was sent\");         // Now try to issue refund as second user - should fail         return conference.refundTicket(accounts[1], ticketPrice, {from: accounts[1]});       }).then(function() {       var balance = web3.eth.getBalance(conference.address).toNumber();       assert.equal(web3.toBigNumber(balance), ticketPrice, \"Balance should be unchanged\");       // Now try to issue refund as organizer/owner - should work       return conference.refundTicket(accounts[1], ticketPrice, {from: accounts[0]});     }).then( function() {       var postRefundBalance = web3.eth.getBalance(conference.address).toNumber();       assert.equal(postRefundBalance, initialBalance, \"Balance should be initial balance\");       done();     }).catch(done);  }).catch(done);});The corresponding Solidity function for the test above is here:function refundTicket(address recipient, uint amount) public returns (bool success) {  if (msg.sender != organizer) { return false; }  if (registrantsPaid[recipient] == amount) {    address myAddress = this;    if (myAddress.balance >= amount) {      recipient.send(amount);      Refund(recipient, amount);      registrantsPaid[recipient] = 0;      numRegistrants--;      return true;    }  }  return false;}Sending ether from a contract. The address myAddress = this; line shows how to get the conference instance\u2019s address, so you can check the balance in the subsequent line (or just use this.balance). Also the recipient.send(amount) method is where the contract sends funds back to recipient.Transactions cannot return results to web3.js. Note this! The refundTicket function returns a bool but this cannot be checked in your test. This method is a transaction (i.e., something that modifies values or send ether), and the result of a transaction to web3.js is a transaction hash (if you printed the result it\u2019ll be a long hex/weird-looking object). So why add a return value to the refundTicket call at all? The return value can be read in Solidity, such as by another contract that calls refundTicket(). So Solidity contracts can read return values from a transaction, but web3.js transaction calls cannot. On the other hand, other contracts can\u2019t use Events (discussed below) which is how you can monitor transactions in web3.js, or check whether a transaction has modified instance variables in a subsequent test promise using call().More on sendTransaction(). When you call a transaction like buyTicket() or refundTicket() using web3.js (which uses web3.eth.sendTransaction), the transaction does not execute right away. Instead the transaction is submitted to the network of miners, and the code does not run until one of those miners scores a block and the transaction is mined into the blockchain. So to verify a transaction you have to wait for it to make it onto the blockchain and then back to your local node. With testrpc this may be seem instantaneous because it\u2019s so fast but on a live network it will be slower.Events. Instead of using return values you can listen for events in web3.js. The smart contract example has these events:event Deposit(address _from, uint _amount);event Refund(address _to, uint _amount);And they are triggered in buyTicket() and refundTicket(). You can see these logged in the output of testrpc when called. To listen for them, you can also add web3.js listeners. At time of writing I haven\u2019t been able to log events inside of truffle tests but have logged them in an app:Conference.new({ from: accounts[0] }).then(  function(conference) {    var event = conference.allEvents().watch({}, '');    // or use conference.Deposit() or .Refund()    event.watch(function (error, result) {       if (error) {        console.log(\"Error: \" + error);      } else {        console.log(\"Event: \" + result.event);    }}); Filters. Instead of checking all events above which may lead to a lot of polling, filters could be used instead. They allow you to start and stop watching for them when your transactions are done. More on filters can be found in the Solidity docs.Overall, using events and filters are cheaper in terms of gas than checking variables so might be useful if you need to verify transactions on the live network.Gas. Up to this point we haven\u2019t needed to discuss gas at all, it usually doesn\u2019t need to be explicitly set with testrpc. As you move to geth and then the live network it will. In your transaction calls you can send gas implicitly inside the {from: __, value: __, gas: __} objects. Web3.js has a call for checking the gas price web3.eth.gasPrice (The result of this is not how much gas you should send with your transaction but the price of 1 unit of gas or step. For how much gas you should send for now its probably best to send something close to the gasLimit so its sure to run. Right now the maximum gas allowed in a block is 3141592. I just use 3000000). The Solidity compiler also has a flag you can call from the command line to get a summary of gas expenditures for your contract: solc\u200a\u2014\u200agas YourContract.sol. Here\u2019s the output for Conference.sol:Creating a DApp UI for your\u00a0contractThis next section assumes you might be new to some web development practices, just in case.All the truffle tests written above are using JavaScript methods re-usable in a front-end UI. Add your UI to the truffle directory app/. On running truffle build it will be compiled along with contract configuration stuff to the build/ directory. When developing use truffle watch to constantly compile any changes in app/* to build/*. Then reload what\u2019s in the build/ directory in your browser. (truffle serve can also run a webserver for you from build/.)In the app/ directory there\u2019ll be some boilerplate started for you:index.html already loads app.js:So we can just add some code to app.js.app.js has a console.log with \u201cHello from Truffle!\u201d that will show up in your browser\u2019s developer console. Start truffle watch in the project root directory and then open build/index.html in a browser window, and open the browser\u2019s developer console (In a lot of browsers like Chrome, right-click\u00a0\u00bb Inspect Element and switch to the Console tab below.)In app.js, add a window.onload function that\u2019ll be called when the page loads. This snippet below will confirm web3.js is loaded and show all the accounts available. [Note: your testrpc node should still be running.]window.onload = function() {  var accounts = web3.eth.accounts;  console.log(accounts);}See if that prints an array of accounts to your browser console.Now you can just copy some functions from tests/conference.js (remove the assertions since those are for testing), and output what\u2019s returned to the console to confirm its working. Here\u2019s an example:window.onload = function() {  var accounts = web3.eth.accounts;  var c = Conference.at(Conference.deployed_address);  Conference.new({ from: accounts[0] }).then(    function(conference) {      var ticketPrice = web3.toWei(.05, 'ether');      var initialBalance = web3.eth.getBalance(conference.address).toNumber();      console.log(\"The conference's initial balance is: \" + initialBalance);      conference.buyTicket({ from: accounts[1], value: ticketPrice }).then(        function() {          var newBalance = web3.eth.getBalance(conference.address).toNumber();          console.log(\"After someone bought a ticket it's: \" + newBalance);          return conference.refundTicket(accounts[1], ticketPrice, {from: accounts[0]});}).then(        function() {           var balance = web3.eth.getBalance(conference.address).toNumber();           console.log(\"After a refund it's: \" + balance); }); }); };The code above should output:Now using whatever web tools you prefer, jQuery, ReactJS, Meteor, Ember, AngularJS, etc., you can start building a DApp UI in app/for interacting with an Ethereum smart contract! Below is a super simple jQuery-based UI as an example.Here\u2019s the index.html. And here\u2019s the app.js.Now that I\u2019m interacting with the smart contract in a UI I\u2019m realizing it\u2019d be good to add checks to make sure the same user can\u2019t register twice. Also since this is running on testrpc, which is really fast, it\u2019d be good to switch to geth and make sure the transactions are still responsive to the user. Otherwise the UI should have some loading messages and disabled buttons while the transactions are being processed if they\u2019re going to take a while.Trying geth. If you\u2019re using geth, this line was working for me (geth v1.2.3):geth --rpc --rpcaddr=\"0.0.0.0\" --rpccorsdomain=\"*\" --mine --unlock='0 1' --verbosity=5 --maxpeers=0 --minerthreads='4' --networkid '12345' --genesis test-genesis.jsonThis unlocks two accounts, 0 and 1. Note:1. You may need to enter the passwords to both accounts after the geth console starts up.2. You will also need a test-genesis.json file with both of your accounts well-funded under \u2018alloc\u2019 in the test-genesis.json.)3. Finally, for geth you may need to add gas when calling the constructor:Conference.new({from: accounts[0], gas: 3141592})Then re-do the whole truffle deploy, truffle build thing.Code for this tutorial. Again, all the code presented in this tutorial is in this repo.Auto-generating UIs from contracts. SilentCicero has also built a tool called DApp Builder to auto-generate from a Solidity contract HTML, jQuery and web3.js calls you can modify. This is also starting to be a common theme of some other smart contract dev tools coming out.Ok tutorial over! This last part was a walkthrough of just one set of tools, mainly Truffle and testrpc. Even within ConsenSys, different developers use different tools and frameworks. You might find tools out there that are a better fit for you, and some things may change in a few months (Souptacular keeps an updated gitbook of resources and notes). But this workflow has helped me get started learning to build DApps.(\u2299\u03c9\u2299) wonk wonkThanks to Joseph Chow for a lot of proofreading and suggestions, as well as Christian Lundkvist, Daniel Novy, Jim Berry, Peter Borah and Tim Coulter for corrections and debugging help, and Tim Coulter, Nchinda Nchinda and Mike Goldin for helping with the DApp Front-end Steps diagram.by Eva ShonUX DesignerConsenSys", "responses": "41"}, {"title": "How to Code Your Own CryptoKitties-Style Game on\u00a0Ethereum", "author_name": "James Martin Duffy", "link": "https://medium.com/loom-network/how-to-code-your-own-cryptokitties-style-game-on-ethereum-7c8ac86a4eb3?source=search_post", "post_date": "Dec 4, 2017", "readtime": "11 min read", "upvotes": "10.8K", "content": "How to Code Your Own CryptoKitties-Style Game on\u00a0EthereumJames Martin DuffyBlockedUnblockFollowFollowingDec 4, 2017CryptoKitties has done a great job of demonstrating what blockchains can be used for beyond just simple financial transactions.I\u2019m hoping we\u2019ll start to see a lot more innovative uses of the blockchain for games like this in the future, so I wanted to write a quick walkthrough of the code behind CryptoKitties to show how it was implemented beneath the surface.This article is written for developers, and while it\u2019s not an absolute beginner\u2019s introduction to Solidity, I tried to include links to documentation to make it as accessible as possible to developers of all levels.Let\u2019s dive in\u2026CryptoKitties Source\u00a0CodeAlmost all of the CryptoKitties code is open source, so the best way to figure out how it works is to read through the source code.It\u2019s around 2,000 lines in total, so in this article, I\u2019m going to be walking through only the sections I think are most important. But here\u2019s a copy of the full contract code on EthFiddle, if you want to read through it on your own:CryptoKitties Source CodePowered by EthFiddle, the #1 Solidity code-sharing siteethfiddle.comHigh Level\u00a0OverviewIf you\u2019re not familiar with what CryptoKitties is, it\u2019s basically a game for buying, selling, and breeding digital cats. Each cat has a unique appearance that is defined by its genes, and when you breed 2 cats together, their genes combine in a unique way to produce an offspring, which you can then breed or sell.The code for CryptoKitties is split into a number of smaller contracts in order to keep related code bundled together without having one single giant file with everything in it.The subcontract inheritance for the main kitty contract looks like this:contract KittyAccessControlcontract KittyBase is KittyAccessControlcontract KittyOwnership is KittyBase, ERC721contract KittyBreeding is KittyOwnershipcontract KittyAuction is KittyBreedingcontract KittyMinting is KittyAuctioncontract KittyCore is KittyMintingSo KittyCore is ultimately the contract address the app points to, and it inherits all the data and methods from the previous contracts.Let\u2019s walk through these contracts one by one.", "responses": "22"}, {"title": "Scaling Ethereum to Billions of\u00a0Users", "author_name": "Fred Ehrsam", "link": "https://medium.com/@FEhrsam/scaling-ethereum-to-billions-of-users-f37d9f487db1?source=search_post", "post_date": "Jun 27, 2017", "readtime": "5 min read", "upvotes": "4.2K", "content": "Scaling Ethereum to Billions of\u00a0UsersFred EhrsamBlockedUnblockFollowFollowingJun 27, 2017Tokens are selling at valuations which imply they\u2019ll have millions of users. But can the blockchain support it? If not, how far away are we?Requirements to building scaled decentralized applications (dApps)There are two requirements to building scaled dApps:Having all of the necessary parts of the dApp developer stack. I\u2019d say we are 70% to a shaky first version of each.2. Scalability of these components. I think this will be the main limiting factor and what will be discussed in this post.Facebook as a measuring stickLet\u2019s do the math on running something like Facebook. Facebook handles about 175k requests per second (900k users on the site in any given minute, assume an action is taken every 5 seconds). And this probably doesn\u2019t include API requests, which are a better analogue and probably 3\u20134x higher.Where is Ethereum\u00a0now?First, a note: I am not an Ethereum maximalist, but I think Ethereum is the furthest along and best suited for thinking about scalability right now.At the moment, Ethereum can handle about 13 transactions per second, which cuts in half to about 7 transactions per second for tokens (4.7m gas limit, 21k avg gas price for standard txn = ~220 standard txns every block, current avg block time 17s = 13 txns/sec, gas requirement roughly doubles for token transactions). And this doesn\u2019t include more expensive smart contract execution.By this estimate we\u2019re roughly 250x off being able to run a 10m user app and 25,000x off being able to run Facebook on chain. And since these systems are open rather than proprietary, we\u2019ll see applications bigger than Facebook. This estimate isn\u2019t perfect because the dApp stack functions differently in places than the current Web 2.0 stack. But I believe it\u2019s in the right ballpark. This is why I believe scalability will be the primary bottleneck for the industry for the foreseeable future.Scaling to billions of\u00a0usersSo how do we get closer to supporting billions of users? Here\u2019s a summary of the scaling efforts I\u2019m aware of:This high level view makes a few things clear:These are hard computer science and game theory problems. Most of them have never been solved before. Estimating completion can be hard and can be far off.Large apps can\u2019t run solely on chain and likely never will. They need off-chain scaling solutions.While it\u2019s tricky to make accurate estimates when combining scaling improvements, it\u2019s conceivable we could see a 100x improvement by the end of 2018, which would allow a 1\u201310m user app.Scaling is multidimensional. Different methods address different things. So it\u2019s hard to measure with a single and global \u201ctransactions per second\u201d metric.These projects have very few people working on them\u200a\u2014\u200ain most cases less than 5 people. The people currently working on them are exceptionally talented, so that is not at all a knock on their efforts. If you are a developer getting into the space and want to work on hard problems with large impact, I\u2019d suggest getting in touch with one of these projects. Talk to the Ethereum core devs (for on-chain solutions) by joining the Ethereum Core Gitter chat or contact Vitalik or Vlad, get into payment channel networks by contacting Jeff Coleman or the Raiden Network, or contact Truebit by responding to their active hiring thread on reddit.How can Ethereum systematically scale\u00a0better?Finally, it is worth thinking about the how this scaling work can be best supported in the future. Capital was the Ethereum Foundation\u2019s biggest constraint in January, and it has prudently managed its finances. However, given recent ETH price changes, the Foundation has over $150m (750k ETH, $30m fiat) and expenses are ~$250k a month. The Foundation can now hire more developers at rates competitive to companies like Google, allowing forward thinking developers to take the plunge. Working in the industry is developing it\u2019s own risk spectrum. Working on Ethereum could be similar to working at a Google: lower risk with broad impact right away. Working on a token is similar to working on a startup: higher risk and lower initial impact but higher upside potential. How core protocol work is best funded beyond the initial Ethereum Foundation endowment is an open question, but likely further out.The community may also want to scale beyond central coordination by the Ethereum Foundation over time. As the chart above shows, this is already happening to a small extent. A simple idea would be feature bounties which the community can request and approve when completed. The community could easily crowdfund $1,000,000+ and let many teams compete like in the DARPA Grand Challenge that kicked off the self driving car push. It\u2019s also possible the Ethereum Foundation moves closer to a decentralized governance model (a DAO) over time, which would have the same effect.ConclusionEverything will be tokenized and connected by a blockchain one day. Scalability is the crux of that journey at the moment. Ethereum is orders of magnitude off from being able to support applications with millions of users at the moment. Yet in true decentralized fashion there are a diverse set of efforts attempting to solve that problem. The biggest bottleneck to solving scalability is the number of people working on the problem. If current efforts are well executed, Ethereum could be ready for a 1\u201310m user app by the end of 2018.Thanks to Joey Krug, Vlad Zamfir, Joseph Chow, Dan Finlay, Simon de la Rouviere, Vitalik Buterin, Chris Dixon, Dan Romero, Ryan Zurrer, Panashe Mahachi, and Matt Huang for ideas and clarifications in this post.", "responses": "155"}, {"title": "Announcing instant bitcoin, ethereum and litecoin purchases on\u00a0Coinbase", "author_name": "David Farmer", "link": "https://blog.coinbase.com/announcing-instant-bitcoin-ethereum-and-litecoin-purchases-on-coinbase-c29d8a94e152?source=search_post", "post_date": "Oct 12, 2017", "readtime": "", "upvotes": "8.3K", "content": "Announcing instant bitcoin, ethereum and litecoin purchases on\u00a0CoinbaseDavid FarmerBlockedUnblockFollowFollowingOct 12, 2017We are excited to announce the ability for customers to instantly purchase digital currency using a US bank account. Previously, customers who purchased using a bank account had to wait several days before receiving their digital currency. Customers can now buy up to $25,000* and receive access to their digital currency immediately.Our mission is to make Coinbase the most trusted, safe, and easy-to-use digital currency exchange. Instant purchases make it significantly easier and faster for customers to invest in the digital currency ecosystem. Reducing the time to receive digital currency has been a highly requested feature and we are pleased to provide this improved experience for our customers.Instant bank purchases are now live for many of our customers in the US, and we will expand availability over the coming months. You will receive an email when instant purchases become available for your account.If you don\u2019t have a Coinbase account, sign up for one here.*Note: maximum instant purchase limit is $25,000. Individual limits may vary.", "responses": "146"}, {"title": "The case for Ethereum maximalism", "author_name": "Eli Dourado", "link": "https://blog.elidourado.com/the-case-for-ethereum-maximalism-e6ec5dc7f7b2?source=search_post", "post_date": "Jan 7, 2018", "readtime": "17 min read", "upvotes": "9.1K", "content": "The case for Ethereum maximalismEthereum is going to win it all, the markets just haven\u2019t realized it\u00a0yetEli DouradoBlockedUnblockFollowFollowingJan 7, 2018Preface: Don't @ meI have opinions. You have opinions. Our opinions might not be the same. That\u2019s ok. There is no need to tell me how stupid or evil I am. If you feel a visceral reaction to this blog post, you might explore the possibility that you hold a tribalist attachment to your cryptocurrency views and wonder whether this is really healthy or truth-tracking.So far, three cryptocurrencies\u2014Bitcoin, Ripple, and Ethereum\u2014have hit a market cap of $100B. Notably, they all did so within three months of each other. These cryptocurrencies first hit market caps of $10B in 2013, 2017, and 2017, respectively. Bitcoin reached the $10B milestone almost four years before any other cryptocurrency, but the $100B milestone only three months before its competitors. At least by this one admittedly imperfect metric, Bitcoin is losing its lead.Bitcoin losing its lead makes sense to me. What doesn\u2019t make sense is that Bitcoin still has a lead at all and that it still has so many proponents. In terms of actual utility, Bitcoin is inferior in almost every way to several other cryptocurrencies, most dramatically Ethereum. I find myself inexorably drawn to a position not publicly articulated or even necessarily held by Ethereum\u2019s founders and most active developers\u2014Ethereum maximalism. My cryptocurrency portfolio is invested accordingly, and I don\u2019t need to justify my beliefs, but I am writing out my rationale for the benefit of friends and followers who are interested. Take it for what it\u2019s worth.The economics of cryptocurrency competitionMy mental model of cryptocurrency competition is still the one Jerry Brito and I developed for our 2014 article on cryptocurrency in the New Palgrave Dictionary of Economics (here\u2019s an ungated version, related blog post). One question this model addresses is whether you can simply clone a cryptocurrency and expect it to have much value. Our answer was generally not, because the cloned cryptocurrency will have the same technical feature set as the original currency but with inferior network effects and likely inferior governance.More generally, you can think of each cryptocurrency as being characterized by a multi-dimensional set of attributes: security, transaction cost, network size, governance quality, robustness of scripting languages, and several others. My mental model is that when one coin is better than another on some attributes and no worse in any other, then it dominates the other coin. A dominated coin can have no value in equilibrium. The market is roughly winner-take-all between dominating and dominated coins (roughly because equilibrium isn\u2019t achieved instantaneously).This doesn\u2019t necessarily imply the market will be winner-take-all generally. There may be coins that neither dominate nor are dominated by certain other coins. This can happen if cryptocurrency characteristics reflect tradeoffs between the set of attributes. It can also occur if certain characteristics are not unambiguously good. For example, more of one characteristic may be considered better for one application and less of that characteristic may be considered better for another.These complications imply that single-chain maximalism is not a necessary outcome. But winner-take-all-ness between dominating and dominated coins used for the same application is a sure thing unless you want to bite the bullet and say that the value of all coins should fall to the marginal cost of creating them, i.e., zero.Governance: a special\u00a0featureOne especially important characteristic of a cryptocurrency are its governance institutions. How do cryptocurrencies decide to add new features? How do they decide to change network parameters in response to changes in computing technology? How do they address bugs that are discovered or crises that occur?Hilariously, here is what Jerry and I wrote back in 2014 about Bitcoin in our New Palgrave piece:Bitcoin currently has high quality governance institutions. The core developers are competent and conservative, and the mining and user communities are serious about making the currency work. An exact Bitcoin clone is likely to have a difficult time competing with Bitcoin unless it can promise similarly high-quality governance.Since 2014, a lot has changed. Bitcoin has been unable to seriously address its on-chain scaling problems. Its community has alienated, marginalized, and purged dissenting voices, notably Mike Hearn, Gavin Andresen, and Jeff Garzik. Its core development team has been captured by an ideological faction committed to only off-chain scaling in the name of decentralization. This faction has undermined consensus scaling agreements and trashed the reputation of anyone who points out any of the above. As early as September 2015, I was concerned about Bitcoin governance quality, but still\u2014mea culpa for that 2014 paragraph. I really got it wrong. (n.b., I have not consulted with my coauthor Jerry Brito on this post, and my views should not be attributed to him.)Governance institutions are especially important for cryptocurrencies because they can\u2019t be simply copied. You can perhaps copy the institutional structure, and you can copy the outcomes and decisions, but when a crisis occurs, you want the A team to handle it as calmly, reasonably, and professionally as possible. Source code and technical parameters can be copied. Adoption and network effects can be replicated over time. Good governance\u2014like good culture at a company\u2014is a challenge to develop, and once you lose it, it\u2019s hard to get it back.Ethereum vs. Bitcoin: Where do we\u00a0stand?Does Ethereum dominate Bitcoin? Not yet, but it seems likely to me that it soon will, at least in most important respects. Let\u2019s look at some indicators.Market capBitcoin still leads in market cap, which I take to be a good indicator of adoption and network effects, by a factor of more than two.Number of on-chain transactionsEthereum currently processes more than 3x the number of on-chain transactions than Bitcoin does. This metric might be considered a proxy for the amount of real-world use.Trading volumeBitcoin still has about 3x the daily on-exchange fiat-currency trading volume that ether does. It seems fair to say that Bitcoin is still more liquid with respect to fiat currency than ether is.Mining rewardMining reward is a good indicator of how secure the core function of a blockchain is, as it correlates with the cost of conducting a 51% attack on the network. Mining rewards over a 24-hour period are about equal between Ethereum and Bitcoin, indicating that at least with respect to the core function (hashing) of the networks, both are for now about equally secure.Number of full\u00a0nodesThe number of full nodes is sometimes viewed as a measure of decentralization of the network. The reason some Bitcoin developers are averse to a block size increase is they fear it will increase the resources required to run a full node, resulting in fewer full nodes and more centralization. Currently, Ethereum has more than twice the number of full nodes as Bitcoin does, even with bigger block payloads per unit time.Transaction feesOther things equal (e.g., mining reward), it is better for a cryptocurrency to have lower transaction fees. Ethereum has dramatically lower transaction fees than Bitcoin does, despite processing more transactions and having an equal overall mining reward (which leads to overall security). Even so, in my opinion Ethereum needs to do the work to ensure on-chain scaling continues so that transaction fees remain low.Block frequencyBitcoin processes blocks according to a Poisson process with a mean frequency of 10 minutes. Ethereum\u2019s mean frequency is on the order of 15 seconds. This means you can have some certainty that your transaction will clear much sooner with Ethereum than you can with Bitcoin.Robustness of scripting languageEthereum features a Turing-complete instruction set with several normal-ish, expressive programming languages, while Bitcoin has only limited, gobbledygook op codes. This means that Bitcoin can only represent a ledger or some very basic conditional payments, while Ethereum can represent an entire computer state. I say this is a clear advantage for Ethereum, while some critics try to twist it into a point for Bitcoin. I will address the critics in the next section.Governance qualityBitcoin\u2019s governance quality is abysmal, as discussed above. Meanwhile, the Ethereum community is practical and congenial. Both teams have talented computer scientists, but Ethereum\u2019s culture is infinitely better. I am consistently impressed with Ethereum founder Vitalik Buterin\u2019s maturity, humility, and leadership skills. Sometimes Vitalik is absurdly criticized as a dictator, but this accusation has no basis in reality. He seems to intuitively understand the need to build a broad consensus within the community, and this consensus in fact exists.Sometimes Ethereum\u2019s governance institutions are criticized for the 2016 bailout of the DAO investors. I will address the critics in the next section.Final scoreBitcoin continues to have a clear lead in market cap (network effects) and trading volume (liquidity), and it is tied with Ethereum in block rewards (chain security). Ethereum leads in every other dimension: number of transactions, number of full nodes, lower transaction fees, block frequency, scripting capability, and governance quality.If Ethereum were to appreciate enough to pull ahead in market cap (the \u201cflippening\u201d), it would also pull ahead in block rewards. And it\u2019s hard to imagine that liquidity would be far behind. In other words, if ether doubled in price and bitcoin halved in price, Ethereum could pull permanently ahead of Bitcoin on every or almost every dimension that matters. This seems not only plausible to me, but likely.Many of the criticisms of Ethereum are overstated or even\u00a0unhingedBitcoin absolutists often spout criticisms of Ethereum that I will partially address below. The criticisms vary in terms of plausibility, and they are all repeated with tribalist fervor. Let\u2019s take a closer look.Ethereum has a greater attack\u00a0surfaceEthereum\u2019s instruction set is Turing-complete, while Bitcoin\u2019s is not. This means that you can write complex smart contracts on Ethereum, and you generally cannot on Bitcoin. Bitcoin does whitelist some basic smart contracts as op codes, but it will probably never have as robust capabilities as Ethereum.The other side of this coin is a concern raised about security. The fact that you can do more on Ethereum leads to some challenges, which are often called \u201ca greater attack surface\u201d by critics. There are two ways this criticism could be valid, one of which seems not to matter in practice at this time and one which isn\u2019t a fair apples-to-apples comparison.The first is related to setting the gas cost of operations on the Ethereum network. If some operations are underpriced in terms of gas relative to their computational cost, then it becomes possible to flood the network with underpriced but computationally costly operations. This brings legitimate activity to a halt, a denial-of-service attack. These kinds of attacks occurred several times in 2016, resulting in a repricing of certain operations. Presumably, as underlying computing technology changes, operations will need to be repriced again in the future. But this kind of attack only denies access to the network until gas values are recalibrated; no coins are at risk. Once recalibration is done, the issue basically goes away. While this is an issue the community needs to remain on top of as computing capabilities change in the future, it\u2019s not a serious concern right now.The other way in which Ethereum has a larger attack surface relates to individual smart contracts. With a more robust programming language, there are more ways to screw up. Bugs in complex code lead to debacles like the DAO fiasco. Yet, on an apples-to-apples basis, Ethereum transactions are every bit as secure as Bitcoin\u2019s are. Bitcoin does not allow the kinds of complex smart contracts that are likely to have some of these bugs. If your goal is only to do the kinds of transfers on Ethereum that are allowed on Bitcoin, there is no reason to believe that the attack surface is any bigger. The code to transfer value on Ethereum is even simpler than it is on Bitcoin.It is true that irrational exuberance about smart contracts on Ethereum has led to some projects launching poorly reviewed code that was ultimately insecure. But for the kinds of applications you might use Bitcoin for, Ethereum appears to be as secure as Bitcoin is.What about the DAO\u00a0fork?In general, my prior is to oppose bailouts, and there is no denying that the hard fork that followed the DAO debacle was a bailout. Although I did not actively support the bailout at the time, I\u2019ve arrived at a relatively agnostic perspective. Looking only at the consequences, it\u2019s clear that the sky did not fall because the DAO investors were bailed out. Ethereum has proceeded quite successfully since July 2016. It\u2019s possible that ether would be worth even more today had they not bailed out the DAO investors. It\u2019s difficult to know. I would say that it is a plausible view, by no means certain.What is an implausible view is the continual carping about bailouts on Ethereum, the implication being that the Ethereum community will hard fork to bail out everyone else who is careless with their smart contracts. Even if you think the DAO hard fork was misguided or wrong, there are numerous differentiating factors that make it separable from current activity. First, at the time of the DAO attack, Ethereum was still a young, immature system, less than a year old. Second, the DAO held approximately 15 percent of all ether that had been issued up to that point. Nobody wants an attacker to hold 15 percent of all tokens on any chain.Finally, in recent coin loss events (like the Parity multisig bug), virtually nobody proposed hard forking Ethereum. It\u2019s fine to continue to oppose the DAO hard fork that occurred 18 months ago. It\u2019s unhinged and dishonest to pretend that Ethereum is bailout central for all time.Vitalik is a\u00a0dictatorBitcoin was started by \u201cSatoshi Nakamoto,\u201d a pseudonymous founder who later disappeared. Ethereum was largely spearheaded by Vitalik Buterin, a Russian-Canadian twenty-something who is still around and actively contributing to the project. Vitalik exercises an intellectual leadership role within the community, which in my opinion he completely deserves on the basis of his contributions, temperament, and demonstrated strong judgment.Some bitcoiners argue that Vitalik\u2019s outsized influence means that Ethereum development is centralized. This is bananas. Vitalik is influential because he has a strong track record. As far as I can tell, technical dissent is extremely well tolerated among the Ethereum development community. And although Vitalik supported the DAO hard fork, to my knowledge he has not so much as said one negative word about those who chose to avoid the fork and continue with Ethereum Classic.Meanwhile, Bitcoin core development is extremely ideologically centralized (and cynically, one might add centralized around the financial interests of Blockstream). There are purges of technical dissenters. There is widespread censorship on /r/Bitcoin. In contrast, Ethereum development has an extremely tolerant culture with plenty of room for back-and-forth and compromise.Hard forks are\u00a0unsafeIt has been an article of faith among some in the Bitcoin community that hard forks\u2014introducing backwards-incompatible changes\u2014are dangerous. Yet, somehow, Ethereum has hard forked on several occasions\u2014mostly to add features\u2014and everything has worked out just fine. How can this be?Hard forks surely can be unsafe. If they are executed without adequate preparation, testing, notice, or consensus, they can result in chain forks or other debacles. But hard forks are also a necessary tool for adding features to existing blockchains. When executed properly, they do not appear to be unthinkably dangerous\u2014hence Ethereum\u2019s successful track record of hard forking.One\u2019s view of hard forking appears to depend on where you see blockchains in the development and adoption cycle. Some people think that blockchains are like the early World Wide Web\u2014we\u2019re in the \u201cNetscape days.\u201d I think more accurately we are in a state like the early Internet\u2014we\u2019re in the \u201cARPAnet days.\u201d We are a loooooong way from reaching the full potential of blockchain technology, and therefore, upgrades to current functionality are vital. Inevitably, these upgrades will be provided through hard forks.The belief that all new functionality will come through Layer 2 services or through soft forks is wrong. Knocking Ethereum for embracing and successfully executing hard forks is wrong-headed and counterproductive.The store of value function of Bitcoin is overrated and can be accomplished with a token on top of\u00a0Ethereum\u201cOK, sure,\u201d I have heard some people say. \u201cEthereum is a better medium of exchange, especially since it has lower transaction fees. But Bitcoin is a better store of value.\u201d Bitcoin has a hard cap of 21 million coins that will ever be issued\u2014it is digital gold, the story goes.This story is a retreat from the original Nakamoto paper, which clearly envisioned Bitcoin as a payment system. But even if we accept this change in scope, it\u2019s not clear a) that Bitcoin can accomplish its store of value mission without also being a medium of exchange, b) that storing value on a blockchain with minimal possibility of transferring it is very valuable, or c) that a better store of value could not be achieved by creating a scarce token on top of Ethereum.Bitcoin security is paid for with mining rewards, which consist of block subsidies and transaction fees. Because Bitcoin has a hard cap of 21 million coins, the block subsidy will go down over time and eventually reach zero. This means that to maintain a given level of security, transactions are necessary and there is a need for fees to be non-trivial. Yet if fees are high, transactions will move to other blockchains. The limit to the mining reward is determined by transaction demand\u2014price \u00d7 quantity\u2014and therefore blockchain security is also limited by transaction demand. The commitment to have a fixed supply of coins potentially implicates a security parameter of the network, meaning bitcoins might not actually be a great store of value on a network where transactions are discouraged by high fees.In addition, Bitcoin as \u201cdigital goldbuggery\u201d has all the same problems that regular goldbuggery does\u2014it stems from a misunderstanding of monetary economics which holds that all inflation is bad or even theft or fraud. I hold zero real gold\u2014so why would I need digital gold, especially digital gold that is ridiculously expensive to transfer? While there is an interesting possibility for cryptocurrencies to supplant traditional monetary policy, that opportunity is not by fixing supply but by establishing a token that offsets changes in the spending level with increases or decreases in the supply of coins to keep nominal spending constant in a given geography. That is an interesting concept. But gold is dumb, and digital gold is also dumb.Finally, even accepting arguendo that there is a need for a fixed-supply digital token, it\u2019s not clear why that mission could not be better accomplished by establishing a fixed-supply token on top of Ethereum. You could have a token that has a supply of 21 million, that can be transferred for Ethereum\u2019s lower network fees and with its faster blocks, and that takes advantage of its built-in zk-SNARK capability so that transfers are not traceable. Such a token would dominate Bitcoin even as a \u201cdigital gold\u201d store of value. Historically, you might have argued that Ethereum\u2019s mining rewards were lower than Bitcoin\u2019s, and consequently, such a system would not be as secure as Bitcoin. But as discussed above, that is no longer the case. Therefore, the continued existence of Bitcoin is unnecessary even by the terms set out by digital goldbugs.The Ethereum ecosystem is developing rapidlyAs I wrote above, we are still in the early days of cryptocurrency technology. The future belongs to the ecosystem with the most rapid development and maturation trajectory, as well as the most willingness to safely adopt changes to the core network to support these advances. Here are a few areas where I think Ethereum is leading.ScalingMost of Bitcoin\u2019s scaling effort has gone into adopting SegWit (which reduces on-chain transaction size) and enables Lightning as a level-2 solution. Ethereum also has a Lightning-like level-2 solution known as Raiden. Raiden will work not just with ether, but with any ERC20- (or successor-) compatible token. In addition, developers are working on Plasma, which I understand to be like Raiden but allowing not just transfers but generic state changes, doing for smart contracts generally what Lightning and Raiden do for payments.In addition, the Ethereum community is exploring additional scaling solutions like proof-of-stake and sharding. You may or may not believe these solutions will work. Presumably, they will be fully tested on secondary networks before implemented on the Ethereum mainnet. If they don\u2019t work, then Ethereum will be no worse off than other coins. If they do work as expected, Ethereum will have a major scaling advantage.SubprotocolsSome of the most exciting parts of the Ethereum ecosystem have little to do with payments. For example, the Ethereum Name Service is an alternative to the existing Domain Name System. At a time when sites like Sci-Hub are being brought down through the centralized DNS, decentralized ENS has the potential to be a killer app.Swarm is an Ethereum-native content-based addressing system like IPFS. If a critical mass were to use Ethereum for ENS access, they could also easily have access to decentralized storage and content delivery through Swarm. A site like Sci-Hub could even go without a webhost!Unlike Bitcoin, which treats SPV clients as an afterthought, Ethereum is doing a lot of work to enable light clients. This will allow mobile clients like Status to exist. Status makes use of the entire Ethereum ecosystem, including ENS and Swarm, and also the Whisper messaging protocol.Ethereum also has the most advanced token standards. People have been talking about \u201ccolored coins\u201d in the Bitcoin community for years, but no one has really made them work. On the other hand, of the top 30 tokens listed on coinmarketcap.com, 28 are on Ethereum. While ERC20 is the basic standard, the community is working on extending the standard in backward-compatible ways.In addition, work is being done to enable atomic swaps of ether and ERC20 tokens on the Ethereum blockchain. This will enable fully decentralized exchanges that can solve a major headache associated with the cryptocurrency ecosystem, the security of centralized exchanges (remember Mt. Gox?).Useful appsOne of the most exciting applications that can be potentially achieved with Ethereum but can\u2019t with Bitcoin is decentralized prediction markets. The Ethereum ecosystem features two such apps, Gnosis and Augur. Prediction markets have the potential to change the world.Importantly, prediction markets could even be used to help make decisions regarding cryptocurrency governance. Imagine that the DAO heist happened in the presence of a fully functional combinatorial prediction market. The community could have launched a prediction market for the price of ether at a particular date conditional on there being or not being a hard fork to reverse the heist. The community could take the path most likely to raise the price of ether. Such Futarchy is a fascinating idea, but there\u2019s only one blockchain that is likely to support it any time soon.Bonus section: Why Ethereum will beat\u00a0RippleRipple has been on a tear lately, and now ranks as the number two cryptocurrency by market cap. As far as I can tell, Ripple is feature-dominated by Raiden, Ethereum\u2019s level-2 token transfer network. Ripple is not a fully open network, and although it can transfer tokens representing any assets, the vast majority of tokens in use today live natively on the Ethereum platform. As such, it seems natural to transfer them using Raiden rather than establishing secondary tokens on Ripple to transfer a representation of Ethereum tokens.Ripple\u2019s high valuation makes Ripple co-founder Chris Larsen one of the richest people in the world on paper. CNBC calculated his notional net worth at $59.9 billion, richer than Larry Ellison, Larry Page, and Sergey Brin. Given the actual level of Ripple usage, this seems likely to end in tears for XRP investors.Maybe not permanent maximalismFor now, I am an Ethereum maximalist. I think it makes sense for the cryptocurrency market to be dominated by Ethereum and tokens built on top of Ethereum. I no longer believe there is a stable place for Bitcoin, Ripple, or most other cryptocurrencies that exist today.But in the long run, I am open to the possibility that a handful of other cryptocurrencies could develop and circulate alongside Ethereum in a more-or-less permanent way (or even supplant Ethereum). Given my model of cryptocurrency competition, it is fairly clear how such currencies could operate\u2014they could be better on specific, useful margins than Ethereum is, or they could be optimally designed for specific applications for which Ethereum is a poor fit. (Or, given the latencies involved, perhaps Mars will have a separate cryptocurrency.)I will always be grateful to Bitcoin for what it represents\u2014a revolutionary advance in computer science. But for now, the world has moved on. Markets just haven\u2019t recognized that yet.", "responses": "44"}, {"title": "Making Sense of Ethereum\u2019s Layer 2 Scaling Solutions: State Channels, Plasma, and\u00a0Truebit", "author_name": "Josh Stark", "link": "https://medium.com/l4-media/making-sense-of-ethereums-layer-2-scaling-solutions-state-channels-plasma-and-truebit-22cb40dcc2f4?source=search_post", "post_date": "Feb 12, 2018", "readtime": "22 min read", "upvotes": "11.4K", "content": "Construction of the Tunkhannock Viaduct railway bridge in Pennsylvania (cc). Roman engineering principles being extended to new\u00a0uses.Making Sense of Ethereum\u2019s Layer 2 Scaling Solutions: State Channels, Plasma, and\u00a0TruebitJosh StarkBlockedUnblockFollowFollowingFeb 12, 2018For ethereum 2018 is the year of infrastructure. This is the year when early adoption will test the limits of the network, renewing focus on technologies built to scale ethereum.Ethereum is still in its infancy. Today, it isn\u2019t safe or scalable. This is well understood by anyone who works closely with the technology. But over the last year, the ICO-driven hype has begun to far exaggerate the current capabilities of the network. The promise of ethereum and web3\u200a\u2014\u200aa safe, easy to use decentralized internet, bound by a common set of economic protocols, and used by billions of people\u200a\u2014\u200ais still on the horizon, and will not be realized until critical infrastructure is built.The projects working to build this infrastructure and expand the capabilities of ethereum are commonly referred to as scaling solutions. These take many different forms, and are often compatible or complimentary with each other.In this long post I want to dive deep into one category of scaling solution: \u201coff-chain\u201d or \u201clayer 2\u201d solutions.First, we\u2019ll discuss the scaling challenges of ethereum (and all public blockchains) in general.Second, we\u2019ll cover the different approaches to solving the scaling challenge, distinguishing between \u201clayer 1\u201d and \u201clayer 2\u201d solutions.Third, we\u2019ll delve into layer 2 solutions and explain how they work\u200a\u2014\u200aspecifically, we\u2019ll talk about state channels, Plasma, and TruebitThis article focuses on giving the reader a thorough and detailed conceptual understanding of how layer 2 solutions work. But we won\u2019t dig into code or specific implementations. Rather, we focus on understanding the economic mechanisms used to build these systems, and the common insights that are shared between all layer 2 technologies.", "responses": "34"}, {"title": "The Hitchhiker\u2019s Guide to Smart Contracts in\u00a0Ethereum", "author_name": "Manuel Araoz", "link": "https://blog.zeppelin.solutions/the-hitchhikers-guide-to-smart-contracts-in-ethereum-848f08001f05?source=search_post", "post_date": "Jul 29, 2016", "readtime": "13 min read", "upvotes": "6.1K", "content": "The Hitchhiker\u2019s Guide to Smart Contracts in\u00a0EthereumManuel AraozBlockedUnblockFollowFollowingJul 29, 2016Updated Oct 6th 2017, for Truffle v3.4.11 and Solidity v0.4.15.I\u2019ve been working with smart contracts for 4 years, mainly in the Bitcoin blockchain. Some projects I participated in are Proof of Existence, bitcore, and Streamium. In the past months, I\u2019ve been exploring and working with the Ethereum platform.I\u2019ve decided to compile a short guide to ease the way of future programmers learning Ethereum smart contract development. I\u2019ve divided the guide in two sections: how to get started building smart contracts in Ethereum, and a quick note on smart contract security.Getting started with Smart Contracts on\u00a0Ethereum0. Basic\u00a0ConceptsThis guide assumes you have a basic level of technical understanding on how cryptocurrencies and blockchains work. If you don\u2019t, I recommend skimming over Andreas Antonopoulos\u2019 Mastering Bitcoin book, Consensys\u2019 \u201cJust Enough Bitcoin for Ethereum\u201d guide, or at least watching this short video by Scott Driscoll. To continue ahead you should know what a public and private key are, why a blockchain needs miners, how decentralized consensus is reached, what a transaction is, and the concepts of transaction scripting and smart contracts.Two other important and related concepts you\u2019ll need to understand before working with Ethereum are the Ethereum Virtual Machine and gas.Ethereum was designed as a smart contract platform. Its origin is actually linked to a critique made by Vitalik Buterin on bitcoin as a very limited smart contract platform. The Ethereum Virtual Machine (EVM) is where smart contracts run in Ethereum. It provides a more expressive and complete language than bitcoin for scripting. In fact, it is a Turing Complete programming language. A good metaphor is that the EVM is a distributed global computer where all smart contracts are executed.Given that smart contracts run in the EVM, there must be a mechanism to limit the resources used by each contract. Every single operation that is executed inside the EVM is actually simultaneously executed by every node in the network. This is why gas exists. An Ethereum transaction contract code can trigger data reads and writes, do expensive computations like using cryptographic primitives, make calls (send messages) to other contracts, etc. Each of these operations have a cost measured in gas, and each gas unit consumed by a transaction must be paid for in Ether, based on a gas/Ether price which changes dynamically. This price is deducted from the Ethereum account sending the transaction. Transactions also have a gas limit parameter that is an upper bound on how much gas the transaction can consume, and is used as a safe-guard against programming errors that could deplete an account\u2019s funds. You can read more about gas here.1. Setting up your environmentSo, you know the basics, let\u2019s set everything up to code! To start developing Ethereum apps (or DApps, for decentralized applications, as many people like to call them), you\u2019ll need a client to connect to the network. It will act as your window to the distributed network, and provide a view of the blockchain, where all the EVM state is represented.There are various compatible clients for the protocol, the most popular being geth, a Go language implementation. However, it\u2019s not the most developer-friendly. The best option I\u2019ve found is the testrpc node (yes, the name sucks). Trust me, it will save you a lot of time. Install it and run it (you may need to prepend sudo depending on your setup):$ npm install -g ethereumjs-testrpc$ testrpcYou should run testrpc in a new terminal and leave it running while you develop. Each time you run testrpc, it will generate 10 new addresses with simulated test funds for you to use. This is not real money and you\u2019re safe to try anything with no risk of losing funds.The most popular language for writing smart contracts in Ethereum is Solidity, so we\u2019ll be using that. We\u2019re also using the Truffle development framework, which helps with smart contract creation, compiling, deployment and testing. Let\u2019s start (again, you may need to prepend sudo depending on your setup):# First, let's install truffle$ npm install -g truffle# let's setup our project$ mkdir solidity-experiments$ cd solidity-experiments/$ truffle init Truffle will create all the files for an example project, including contracts for MetaCoin, a sample token contract.\u00a0You should be able to compile the example contracts by running truffle compile. Then, to deploy the contracts to the simulated network using the testrpc node we have running, you need to run truffle migrate:$ truffle compileCompiling ConvertLib.sol...Compiling MetaCoin.sol...Compiling Migrations.sol...Writing artifacts to ./build/contracts$ truffle migrateUsing network 'development'.Running migration: 1_initial_migration.js  Deploying Migrations...  ... 0x686ed32f73afdf4a84298642c60e2002a6d0d736a5478cc8cb22a655ac018a67  Migrations: 0xa7edbac1156f98907a24d18df8104b5b1bd7027cSaving successful migration to network...  ... 0xe3bf1e50d2262d9ffb015091e5f2974c8ebe0d6fd0df97a7dbcde8a0e51c694aSaving artifacts...Running migration: 2_deploy_contracts.js  Deploying ConvertLib...  ... 0x2e0e6718f01d0da6da2ada13d6e4ad662c5a20e784e04c404e9d4ef1d392bdae  ConvertLib: 0xf4388ce4d4ce8a443228d65ecfa5149205db049f  Linking ConvertLib to MetaCoin  Deploying MetaCoin...  ... 0xb03a3cde0672a2bd4dda6c01dd31641d95bd680c4e21162b3370ed6db7a5620d  MetaCoin: 0x4fc68713f7ac86bb84ac1ef1a09881a9b8d4100fSaving successful migration to network...  ... 0xb9a2245c27ff1c6506c0bc6349caf86a31bc9f700388defe04566b6d237b54b6Saving artifacts...Note to Mac OS X users: Truffle is sometimes confused by\u00a0.DS_Store files. If you get an error mentioning one of those files, just delete it.We just deployed the sample contracts to our testrpc node. Wohoo! That was easy, right? Time to create our own contract now!2. Writing your first Ethereum smart\u00a0contractIn this guide we\u2019ll be writing a simple Proof of Existence smart contract. The idea is to create a digital notary that stores hashes of documents as proofs of their existence. Use truffle create contract to get started:$ truffle create contract ProofOfExistence1Now open contracts/ProofOfExistence1.sol in your favorite text editor (I use vim with Solidity syntax highlighting), and paste this initial version of the code:pragma solidity ^0.4.15;// Proof of Existence contract, version 1contract ProofOfExistence1 {  // state  bytes32 public proof;  // calculate and store the proof for a document  // *transactional function*  function notarize(string document) {    proof = proofFor(document);  }  // helper function to get a document's sha256  // *read-only function*  function proofFor(string document) constant returns (bytes32) {    return sha256(document);  }}We\u2019ll start with something simple but incorrect and move towards a better solution. This is a definition of a Solidity contract, which is like a class in other programming languages. Contracts have state and functions. It is important to distinguish two kinds of functions that can appear in a contract:Read-only (constant) functions: functions that don\u2019t perform any state changes. They only read state, perform computations, and return values. As these functions can be resolved locally by each node, they cost no gas. Marked with the keyword constant.Transactional functions: functions that perform a state change in the contract or move funds. As these changes need to be reflected in the blockchain, transactional function execution requires sending a transaction to the network and spending gas.Our contract above has one of each kind, marked in the documentation. We\u2019ll see how the kind of function we\u2019re using with modifies how we interact with the smart contract in the next section.This simple version only stores one proof at a time, using the data type bytes32, or 32 bytes, which is the size of a sha256 hash. The transactional function notarize allows one to store the hash of a document in our smart contract\u2019s state variable proof. Said variable is public, and is the only way a user of our contract has to verify if a document has been notarized. We\u2019ll do that ourselves shortly, but first\u2026Let\u2019s deploy ProofOfExistence1 to the network! This time, you\u2019ll have to edit the migration file (migrations/2_deploy_contracts.js) to make Truffle deploy our new contract. Replace the contents with the following:var ProofOfExistence1 = artifacts.require(\"./ProofOfExistence1.sol\");module.exports = function(deployer) {  deployer.deploy(ProofOfExistence1);};To run this migration again, you\u2019ll need to use the reset flag, to make sure it runs again.truffle migrate --resetMore on how Truffle migrations work can be found here.3. Interacting with your smart\u00a0contractNow that our contract is deployed, let\u2019s play with it! We can send messages to it via function calls and read its public state. We\u2019ll use the Truffle console for that:$ truffle console// get the deployed version of our contracttruffle(default)> var poe = ProofOfExistence1.at(ProofOfExistence1.address)// and print its address truffle(default)> poe.address0x3d3bce79cccc331e9e095e8985def13651a86004// let's register our first \"document\"truffle(default)> poe.notarize('An amazing idea'){ tx: '0x18ac...cb1a',  receipt:    { transactionHash: '0x18ac...cb1a',     ...   },  logs: [] }// let's now get the proof for that documenttruffle(default)> poe.proofFor('An amazing idea')0xa3287ff8d1abde95498962c4e1dd2f50a9f75bd8810bd591a64a387b93580ee7// To check if the contract's state was correctly changed:truffle(default)> poe.proof()0xa3287ff8d1abde95498962c4e1dd2f50a9f75bd8810bd591a64a387b93580ee7// The hash matches the one we previously calculatedFirst thing we do is obtain a representation of our deployed contract and store it in a variable called poe.We then call the transactional function notarize, which involves a state change. When we call a transactional function, we get a Promise that resolves to a transaction object, not what the actual function returns. Remember that to change the EVM state we need to spend gas and send a transaction to the network. That\u2019s why we get a transaction information object as the result of the Promise, referring to the transaction that did this state change. In this case, we are not interested in the transaction id, so we just discard the Promise. When writing a real app, we\u2019ll want to save it to check the resulting transaction and catch errors.Next, we call the read-only (constant) function proofFor. Remember to mark your read-only functions with the keyword constant, or else Truffle will try to craft a transaction to execute them. This is a way to tell Truffle that we\u2019re not interacting with the blockchain but just reading from it. By using this read-only function, we obtain the sha256 hash of the \u2018An amazing idea\u2019 \u201cdocument\u201d.We now need to contrast this with the state of our smart contract. To check if the state changed correctly, we need to read the proof public state variable. To get the value of a public state variable, we can call a function of the same name, which returns a Promise of its value. In our case, the output hash is the same, so everything worked as expected\u00a0:)For more info on how to interact with contracts, read this section of the Truffle documentation.As you can see from the snippet above, our first version of the Proof of Existence smart contract seems to be working! Good work! It\u2019s only good for registering one document at a time, though. Let\u2019s create a better version.4. Iterating the contract\u00a0codeLet\u2019s change the contract to support multiple document proofs. Copy the original file with the name contracts/ProofOfExistence2.sol and apply these changes. The main changes are: we change the proof variable into a bytes32 array and call it proofs, we make it private, and we add a function to check if a document has already been notarized by iterating that array.pragma solidity ^0.4.15;// Proof of Existence contract, version 2contract ProofOfExistence2 {  // state  bytes32[] private proofs;  // store a proof of existence in the contract state  // *transactional function*  function storeProof(bytes32 proof) {    proofs.push(proof);  }// calculate and store the proof for a document  // *transactional function*  function notarize(string document) {    bytes32 proof = proofFor(document);    storeProof(proof);  }// helper function to get a document's sha256  // *read-only function*  function proofFor(string document) constant returns (bytes32) {    return sha256(document);  }// check if a document has been notarized  // *read-only function*  function checkDocument(string document) constant returns (bool) {    bytes32 proof = proofFor(document);    return hasProof(proof);  }  // returns true if proof is stored  // *read-only function*  function hasProof(bytes32 proof) constant returns (bool) {    for (uint256 i = 0; i < proofs.length; i++) {      if (proofs[i] == proof) {        return true;      }    }    return false;  }}Let\u2019s interact with the new functions: (remember to update migrations/2_deploy_contracts.js to include the new contract and run truffle migrate --reset)// deploy contractstruffle(default)>  migrate --reset// Get the new version of the contracttruffle(default)> var poe = ProofOfExistence2.at(ProofOfExistence2.address)// let's check for some new document, and it shouldn't be there.truffle(default)> poe.checkDocument('hello')false// let's now add that document to the proof storetruffle(default)> poe.notarize('hello'){ tx: '0x1d2d...413f',  receipt: { ... },  logs: []}// let's now check again if the document has been notarized!truffle(default)> poe.checkDocument('hello')true// success!// we can also store other documents and they are recorded tootruffle(default)> poe.notarize('some other document');truffle(default)> poe.checkDocument('some other document')trueThis version is better than the first, but still has some problems. Note that every time we want to check if a document was notarized, we need to iterate through all existing proofs. This makes the contract spend more and more gas on each check as more documents are added. A better structure to store proofs is a map. Luckily, Solidity supports maps, and calls them mappings. Another thing we\u2019ll improve in this version is removing all that extra comments marking read-only or transactional functions. I think you get it by now\u00a0:)Here\u2019s the final version, which should be pretty easy to understand because you followed along previous versions:pragma solidity ^0.4.15;// Proof of Existence contract, version 3contract ProofOfExistence3 {  mapping (bytes32 => bool) private proofs;  // store a proof of existence in the contract state  function storeProof(bytes32 proof) {    proofs[proof] = true;  }  // calculate and store the proof for a document  function notarize(string document) {    var proof = proofFor(document);    storeProof(proof);  }  // helper function to get a document's sha256  function proofFor(string document) constant returns (bytes32) {    return sha256(document);  }  // check if a document has been notarized  function checkDocument(string document) constant returns (bool) {    var proof = proofFor(document);    return hasProof(proof);  }  // returns true if proof is stored  function hasProof(bytes32 proof) constant returns(bool) {    return proofs[proof];  }}That looks good enough. And it works exactly as the 2nd version. To try it out, remember to update the migration file and run truffle migrate --reset again. All the code in this tutorial can be found in this GitHub repo.5. Deploying to the real testnet\u00a0networkOnce you\u2019ve tested your contract extensively using testrpc in the simulated network, you\u2019re ready to try it in the real network! To do that, we need a real testnet/livenet Ethereum client. Follow these instructions to install geth.During development, you should run nodes in testnet mode, so that you can test everything out without risking real money. Testnet mode (also known as Morden in Ethereum) is basically identical to the real Ethereum, but the Ether token there has no monetary value. Don\u2019t be lazy and remember to always develop in testnet mode, you will regret it if you lose real Ether due to a programming error (trust me on that, hehe).Run geth in testnet mode, with RPC server enabled:geth --testnet --rpc console 2>> geth.logThis will open a console where you can type in basic commands to control your node/client. Your node will begin downloading the testnet blockchain, and you can check progress by checking eth.blockNumber. While the blockchain is downloading, you can still run commands. For example, let\u2019s create an account: (remember the password!)> personal.newAccount()Passphrase:Repeat passphrase:\"0xa88614166227d83c93f4c50be37150b9500d51fc\"Let\u2019s send some coins there and check the balance. You can get free testnet Ether here. Just copy-paste the address you just generated and this faucet will send you some testnet Ether. To check you balance, run:> eth.getBalance(eth.accounts[0])0It will show no balance because your node hasn\u2019t synced with the rest of the network yet. While you wait for that, check your balance in a testnet block explorer. There, you can also see the current testnet highest block number (#1819865 at the time of writing), which you can use in combination with eth.blockNumber to know when your node has synced completely.Once your node has synced, you\u2019re ready to deploy the contracts to the testnet using Truffle. First, unlock your main geth account, so that Truffle can use it. And be sure that it holds some balance, or you won\u2019t be able to push a new contract to the network. On geth run:> personal.unlockAccount(eth.accounts[0], \"mypassword\", 24*3600)true> eth.getBalance(eth.accounts[0])1000000000000000000Ready to go! If some of these two are not working for you, check the steps above and make sure you\u2019ve completed them correctly. Now run:$ truffle migrate --resetNote that this time, it will take longer to complete, as we\u2019re connecting to the actual network and not one simulated by testrpc. Once it completes, you can interact with the contract using the same approach as before.The testnet-deployed version of ProofOfExistence3 can be found at the address 0xcaf216d1975f75ab3fed520e1e3325dac3e79e05. (Feel free to interact with it and send your proofs!)I\u2019ll leave the details on how to deploy to the live network to the reader. You should only do this once you\u2019ve extensively tested your contracts in simulated and test networks. Remember any programming error can result in monetary loss in the livenet!Smart Contract security in Ethereum is\u00a0hard\u201cSmart contracts are pretty difficult to get right.\u201d Emin G\u00fcn SirerGiven that by nature, smart contracts are computer code that define how money moves, I couldn\u2019t end this guide without even a small note on security. I\u2019ll be talking about smart contract security in much more depth at future posts (edit: like this one), but here are some quick notes to get you started.Some problems you should be aware of (and avoid):Reentrancy: Do not perform external calls in contracts. If you do, ensure that they are the very last thing you do.Send can fail: When sending money, your code should always be prepared for the send function to fail.Loops can trigger gas limit: Be careful when looping over state variables, which can grow in size and make gas consumption hit the limits.Call stack depth limit: Don\u2019t use recursion, and be aware that any call can fail if stack depth limit is reached. EDIT: this is no longer a problem.Timestamp dependency: Do not use timestamps in critical parts of the code, because miners can manipulate them.These are provided just as examples of unexpected behaviors that can lead for theft or destruction of funds in your smart contract. The moral is: if you\u2019re writing smart contracts, you\u2019re writing code that handles real money. You should be very careful! Write tests, do code reviews, and audit your code.The best way to avoid obvious security problems is to have a solid understanding of the language. I recommend you read the Solidity documentation if you have the time. We still need better tools for acceptable smart contract security. (Edit: close to the original publishing of this post, we launched the OpenZeppelin library, and we\u2019ve recently announced zeppelinOS.", "responses": "79"}, {"title": "Why Ethereum is the Future of Blockchain", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/why-ethereum-is-the-future-of-blockchain-950a5c56f524?source=search_post", "post_date": "Jun 12, 2018", "readtime": "6 min read", "upvotes": "5K", "content": "Crypto Tech\u00a0InsiderWhy Ethereum is the Future of BlockchainThe platform that hosts the most blockchain startups and attracts the most developers, wins.Michael K. SpencerBlockedUnblockFollowFollowingJun 12, 2018The blockchain platform with the most utility, developers and the dApp framework that is the most scalable, will win and take over the mantle from Bitcoin, as the heir apparent of blockchain innovation.It would be hard to argue that in 2018, that\u2019s not Ethereum. Its spawned countless ICOs, and has the most developers by far globally working on it. As of October 2017, according to CNBC it had at least 35,000 developers. In 2018, some believe that number is closer now to 200,000. That is according to Kevin Rooke, a cryptocurrency researcher and YouTuber.Ethereum: the Handmaid of DecentralizationFew blockchain projects embody the spirit of decentralization as soundly as Ethereum and Vitalik Buterin. Ethereum is built on a newer generation of blockchain technology and is optimized for software engineers. With advances in sharding and plasma it has a decent chance of overcoming its scalability issues sooner rather than later.A reported 94 out of the top 100 blockchain projects have launched on top of the Ethereum network. Ethereum as of mid 2018 has a market cap of $52.3 billion USD, but that doesn\u2019t properly show its ubiquity as the leading dApp platform for developers and blockchain startups.The root problem with conventional currency is all the trust that\u2019s required to make it work. The central bank must be trusted not to debase the currency, but the history of fiat currencies is full of breaches of that trust.\u200a\u2014\u200aSatoshi NakamotoEthereum: the Blockchain Platform Devs Want to Work\u00a0OnEthereum\u2019s commitment to a scaling strategy and decentralization, likely most resonates with developers as the first-mover dApp platform of choice. While Bitcoin over the last decade evolved into a digital store of value, it didn\u2019t scale in terms of a payments option for various reasons.However Ethereum has increasingly established itself as the leading decentralized application platform. A landscape of competitors has emerged but without posing any immediate threats to changing this, which include among others: EOS, NEO, Cardano, Stellar, Qtum, ICON and now likely Tron have gained significant market valuation and presence in the global market, with their focus set on decentralized applications.Who will blockchain startups and developers trust?The list of those who are on Ethereum is too long to list, however even the most pragmatic solutions such as $2 billion China-based IoT blockchain network VeChain, exist on the Ethereum network. Tron is migrating to build a competitor to NEO, often referred to as the \u201cEthereum of China\u201d. It\u2019s uncertain if Cardano or EOS will have the technical superiority they claim to threaten Ethereum in the immediate future, or the next few years.You will notice also Ethereum has substantial partnerships with enterprise level companies, including Amazon (AWS) in the cloud.Whereas most technologies tend to automate workers on the periphery doing menial tasks, blockchains automate away the center. Instead of putting the taxi driver out of a job, blockchain puts Uber out of a job and lets the taxi drivers work with the customer directly. - Vitalik\u00a0ButerinAs blockchain evolves, how it intersects with the Cloud, and how smart contracts become implicated in services, accessibility, the sharing economy and decentralization of utilities is collectively relevant. A Swiss town will pilot voting on the blockchain using Ethereum-based IDs. All the applications of blockchain on our lives isn\u2019t even fundamentally clear yet, but adoption has accelerated and is accelerating.With it, the interest of software engineers, developers and coders is also at an all-time high. If hacks and BTC manipulation probes devalues Bitcoin\u2019s price, Ethereum is free from being such a pioneer, it can be a first-mover at the intersection of enterprise and decentralization and blockchain startups. While ICO regulatory pressure has decreased their total funding in 2018, if we discount EOS and Telegram which are basically anomalies, Ethereum is pivoting to more practical use-cases.Blockchain may not be the future of business quite like artificial intelligence and the cloud are, but it\u2019s certainly becoming an important protocol with added ROI and obvious benefits.In the concepts of open-source projects and decentralization, developers are attracted to the dynamic innovation of the space. Even Wall Street is seeing an exodus of financial talent teaming up with software engineering to start new exciting projects. It\u2019s not because of crypto, it\u2019s largely because of Ethereum.If ICOs fueled crypto hype in 2017, enterprise adoption of blockchain is changing how we collectively see blockchain tech in 2018. Blockchain is now ahead of quantum computing and super-computing in how this nascent tech is impacting innovation and the variety of new blockchain startups is astounding.The nature of Bitcoin is such that once version 0.1 was released, the core design was set in stone for the rest of its lifetime.\u200a\u2014\u200aSatoshi NakaomotoWhile Bitcoin remains somewhat of a relic and a symbol, Ethereum is dynamic and must evolve to meet the demands of the times and as the dApp platform that\u2019s the current leader.Ideology and Trust Matters to DevelopersVitalik Buterin is also a respected figure whose clear idealism contrats much of the profiteering vibe of other crypto projects and altcoins. Ethereum doesn\u2019t feel like a Microsoft of a Facebook, because of Vitalik\u2019s youth and vision.If we look at Google trends, and eliminate the big three of San Francisco, Seattle and New York, in what U.S. cities do you suppose searches for Ethereum are taking place in the last year?AustinL.ASan DiegoBostonDenverMiamiWashingtonChicagoSo basically a who is where of where young developers are at. That some of the most talented developers and entrepreneurs are attracted to the blockchain space is exciting. However globally, China by far rules the number of Ethereum searches. You must therefore conclude that a lot of important work of blockchain startups is actually occuring in China.In a world of increasing complexity, the blockchain\u2019s biggest unique value proposition may be how to handle and solve the problem of trust, accountability and security at the intersection of myriad industries and their sub-verticals. Let\u2019s be realistic, these issues are intensifying and have a nearly universal application across value chains.As society becomes more and more complex, cheating will in many ways become progressively easier and easier to do and harder to police or even understand.\u200a\u2014\u200aVitalik ButerinYoung people and consumers and citizens require another level of trust in the system, in apps, in services, in government, in politics, in corporate sustainability. Greater decentralization can manifest on the blockchain. Ethereum can be a vehicle for that.Wealthy societies around the world are facing a growing crisis of confidence in established authorities. Stagnating economies, mounting inequality, political corruption and the increasing monopolization of technology for the benefit of elites have provoked a populist backlash.\u200a\u2014\u200aVitalik\u00a0Buterin.The biggest company with a crisis of trust Facebook, has even announced that it will integrate blockchain into its business model. Coinbase is scrambling to secure the popularity of its app and to secure its future viability. Stronger Asian led blockchain and crypto solutions are also inevitable. TRON is exceedingly ambitious, and NEO claims many advantages over Ethereum. China can accelerate blockchain projects and will likely do so immensely in the 2020s. However can they attract developers away from Ethereum\u2019s platform?If Bitcoin is shrouded in controversy, Ethereum is bathed in possibility. In a way they are the Yin and Yang of cryptocurrencies. On a Web 3.0 running smart contracts with 5G, what will be possible? In an IoT of everything, what kinds of blockchain systems will be in place? We are about to find out.", "responses": "31"}, {"title": "The reason Bitcoin & Ethereum are surging\u00a0\ud83d\udcb0\ud83d\udcc8", "author_name": "Product Hunt", "link": "https://blog.producthunt.com/the-reason-bitcoin-ethereum-are-surging-33665c52d7a9?source=search_post", "post_date": "Jun 1, 2017", "readtime": "3 min read", "upvotes": "1.3K", "content": "The reason Bitcoin & Ethereum are surging\u00a0\ud83d\udcb0\ud83d\udcc8An explainer on tokens, including blockchain product recommendations from Naval\u00a0RavikantProduct HuntBlockedUnblockFollowFollowingJun 1, 2017The blockchain is arguably the most disruptive social idea since the internet itself. In the past few weeks, the price of digital assets like Bitcoin and Ethereum has started to reflect it. While this incredible run-up is partly caused by investor speculation, it\u2019s only now that we may have found the killer use case for cryptocurrencies and the underlying blockchains.Tokens: Kickstarter on\u00a0SteroidsTokens or \u201cappcoins\u201d are scarce digital assets powered by the underlying technology that made Bitcoin possible. While they do not represent equity in a company, appcoins have transformed the traditional methods of financing technology companies today. For example, Product Hunt could launch \u201cKittyCoins\u201d to finance operations directly from the community. Another example is how the Brave Browser team just raised $30M for their Basic Attention Token ICO in 24 seconds (you read that correctly).Balaji S. Srinivasan wrote a must-read article on the topic, explaining that while we\u2019re in the early days today, tokens will transform the technology of tomorrow.Both Balaji and Naval Ravikant took the time to answer some of the Product Hunt community\u2019s blockchain related questions.", "responses": "20"}, {"title": "Everything they don\u2019t want you to know about\u00a0EOS.", "author_name": "Thijs Maas", "link": "https://hackernoon.com/everything-they-dont-want-you-to-know-about-eos-the-ethereum-killer-9939c43aa2df?source=search_post", "post_date": "Jun 9, 2018", "readtime": "9 min read", "upvotes": "12K", "content": "Everything they don\u2019t want you to know about\u00a0EOS.Thijs MaasBlockedUnblockFollowFollowingJun 9, 2018If you would have told me last year that a startup without a product was to raise over $4 billion, I would have probably not believed it. In fact, I still find it hard to believe. Yet, EOS, a blockchain-startup without a product, managed to do just that. Everything about the platform, which is launching today, sounds great on paper. However, the truth is often less rosy as it would appear.The EOS\u00a0promiseEOS is a relatively new project in the blockchain space that aims to radically improve on what is on the market today. The decentralized operating system will, much like Ethereum, allow developers to build decentralized applications through smart contracts.The unique selling points of EOS are that the platform will eventually allow for industrial-scale applications, through elimination of transaction fees and an ability to support millions of transactions per second. EOS developers expect that the platform will at least handle 1000 transactions per second upon launch. In contrast, Ethereum can currently handle around 15 transactions per second.Of course, this radical improvement in transaction throughput has sparked a wide interest in EOS. The company behind EOS, Block.one, has raised $4 Billion to develop it and its ecosystem through a fundraising tactic called an Initial Coin Offering. They managed to do so without even having a working product\u2026 In fact, when they started the ICO, they hadn\u2019t even wrote a single line of code.This shouldn\u2019t be possible. Still, it can be somewhat justified by the radical improvements that EOS promises over other smart contract platforms and the overal hype about such platforms so far. But how does EOS aim to deliver on its promises in the first place?Through a simple trade-off: EOS decreases its decentralization for an increase in scalability.Decentralization is one of the main characteristics of a good cryptocurrency. Simply said, decentralization provides for censorship resistance. This censorship resistance is achieved by involving a large amount of parties in the production and validation of blocks. Basically, the larger this set of parties, the better. The problem is that all these parties have to constantly sync their blockchain to one-another. In the case of smart contract platforms, each block creator (whatever the consensus mechanism) has to also execute the code of every single smart contract. This is a very tedious process and it limits the overall capacity of the network significantly.The idea behind EOS is that the processes of storing the blockchain, the \u2018block propagation\u2019 and the execution of smart contract code should be handled by only 21 parties, called Block Propagators (BPs). These BPs use optimized hardware and only have to sync with each other, instead of a large network. This allows EOS to have a transaction output like no other crypto before it.Aside from this insane transaction throughput, EOS also promises that transactions on the network will be completely free!Sounds amazing right? So what\u2019s the catch?Catch #1: A New\u00a0MaffiaDon\u2019t get me wrong: I believe that the general public is more interested in scalability than decentralization. Designing a system that trades a bit of the one for the other is not necessarily a bad design choice. However, it has to be done right.After all, if you take away the decentralized nature of a blockchain you take away the one thing that a public blockchain does better than a traditional database: censorship resistance.Without it, there is actually no point of using a blockchain, as you might as well use a traditional databases and legacy computing services.So, Is 21 BP\u2019s enough to be decentralized?If the block producers were fully anonymous and had no way of communicating with each other, then maybe. But this is not the case.First, it is necessary to understand how the BPs are chosen. In essence, anyone who has any EOS can stake their tokens to vote for candidates that wish to become a BP. The 21 that are voted into office are allowed to create blocks, and, as such, they also receive block rewards.Being a BP is awesome. At the EOS\u2019 current price (at time of writing), a BP will be awarded $1.64 million USD in block rewards per year. Moreover, another +- $102 million USD will be divided among BP\u2019s running in the election by ratio of their received votes. On average, let\u2019s say that a BP will be rewarded about $2.5 million USD a year.As such, incentives exist to buy votes by, for example, offering kickbacks on the block rewards to anyone that votes for you. Once elected, all BPs will want to remain in power. Therefore, there is an incentive to maintain the established order, which means elected block producers will form alliances to vote for each other. In Lisk, another crypto using a very similar system, this has led to the emergence of two very powerful maffia-like coalitions: Elite and GDT. A great write-up hereof can be found here.Once such coalitions are formed, decentralization of the EOS platform will be no more than a myth. Consequently, censorship resistance will be non-existent. The coalitions can even start extorting businesses building on EOS in various ways. We can imagine a scenario where a business\u2019 transactions are censored by the cartels unless it behaves in a certain way or pays money to BPs.Now you might say that such censorship would hurt the BPs. It would lead to public backlash and subsequently, a decrease in the price of EOS. As the BPs are likely to hold EOS themselves, this would hurt them.However, it is possible to \u2018hide\u2019 your censorship. Straight up censoring a business\u2019 transactions is not the only way to hurt it. The BP cartels could for example make it more difficult for a specific business to function, through small changes in how the network works. After all, decisions on what is allowed or not on the network are in the hands of the \u2018democratically elected\u2019 cartels.By censoring in an indirect, hidden fashion, any possible public backlash is minimized. After all, the only thing that the BPs will have to do is provide an explanation of why they made the protocol changes. As long as this justification is plausible enough to fool the generally uninformed public, we wouldn\u2019t even know if any extortion is going on...Sure, maybe the BPs will act ethically. However, having to rely on their promises to do so goes against everything that crypto was first created for.Catch #2: \u2018free\u2019 is never actually\u00a0freeWhile EOS boasts about its free transactions, we are left to wonder: if this was possible, why do other crypto\u2019s not provide it?Transaction fees are generally used to give incentives to block creators/miners to secure the blockchain. They incentivize rational actors to put in their best efforts to validate and update the state of the blockchain in hopes of being rewarded for it.Every blockchain needs such incentives. The only thing different about EOS is that these incentives are created by the rewards given to BPs I have described above. The coins that will be minted for this will amount to a total inflation rate of 5% on a yearly basis.So sure, I don\u2019t have to pay a transaction fee when I send money. However, these fees are just hidden as they are accounted for in the BPs rewards.Instead of calling transactions free, it would be more accurate to say that my transaction fees are imposed on everyone who owns any EOS, in the form of inflation.Other red\u00a0flagsThe EOS ICO was open to investors for 12 months. However, funds paid were not in lock-up during this period and secondary markets for EOS were opened with high liquidity. Therefore, as far as I can reason, the following scenario was a possibility for Block.One: Have people buy EOS \u2192 Use their funds to buy EOS in your own ICO \u2192 Have both the funds and the EOS \u2192 Repeat \u2192 Watch EOS price rise as it looks like the interest in your ICO is gigantic \u2192 Start selling your free EOS on secondary markets \u2192 profit.Dan Larimer, the mastermind behind EOS, has a somewhat dubious history. Although he is a great developer and innovator, previously having created blockchain-projects such as Bitshares and Steem, there are some stories that put him in a bad light. Take for example the stories of him cheating during the early days of Steemit mining. Also, as former colleague Charles Hoskinson said: \u201cLarimer hasn\u2019t finished a project yet.\u201d In the meantime however, he has gotten filthy rich.The EOS Token Purchase Agreement basically states that EOS tokens are absolutely worthless and do not provide any rights at all to the buyer. This definitely raises some concerns. However, it is most likely in the agreement because Block.One is trying to completely distance itself from the development of the platform itself. Whether this would have any chance of standing up in court is something else altogether.Security is the most important element of any blockchain project. The fact that Block.One\u2019s internal systems have been hacked during its ICO, leading to millions in investor\u2019s funds being stolen by phishers, does not provide for much confidence in the company\u2019s abilities to make secure systems.Continuing on the subject of security, Block.One has announced a $10.000 bounty for every bug found in its software. Within a week, a single security researcher was able to rack in $120.000 by finding and reporting bugs. Of course I am not saying bug bounties are a bad thing and I realize that any software will have some bugs, but this just seems a bit too easy.EOS has written a \u2018constitution\u2019, which is a binding set of rules for everyone who uses the network. I won\u2019t go in-depth on this revolutionary concept, which is definitely not similar to General Terms & Conditions /s. However, it is oh so very clear that it hasn\u2019t been written by someone with a background in law. In fact, it is pretty hilarious. The tweet-storm below only scratches the surface. I strongly believe the lack of thought that has been put into this constitution is a huge missed opportunity. A combination of a set of clear rules on and strong legal remedies against colluding BP\u2019s would be a detrimental mechanism to reducing BP\u2019s incentives to collude.If you found some more red flags, let me know\u200a\u2014\u200aI\u2019d be glad to add them. I would also love to receive any refutations of points made in this article and I will adjust it accordingly.The current state of\u00a0EOSEOS BPs have voted to launch the network today! It should be live at 13:00 UTC. The latest development is a decision of the BP\u2019s to issue new EOS tokens, which is apparently for the RAM needed to create the accounts. This is absolutely hilarious, as it is a perfect illustration of what\u2019s wrong with EOS. No cryptocurrency community in its right mind would change the total supply of tokens. After all, a fixed/predictable max supply of tokens is the one thing that gives a crypto value. Indeed, it seems that the first decision by EOS\u2019 BPs ever might just set a precedent to break this fundamental rule. This is just comedic gold.25\u20136\u20132018 Update:Since the launch of the network, a lot has happened. First, as I predicted, we have seen no changes in BPs whatsoever, with all but one BP retaining their position as BP.Second, censorship of transactions on EOS has already started taking place. The \u2018EOS Core Arbitration Forum\u2019, (ECAF) a newly made up centralized party, has ordered all block producers to freeze 27 accounts on the network. They did so while saying \u201cThe logic and reasoning for this Order will be posted at a later date\u201d. The order was given by a guy named Sam Sapoznik, and followed without question by the BPs. This goes to show that there is no point to use EOS, as it is pointless to use a blockchain without its censorship resistance qualities.A screenshot of the leaked ECAF\u00a0orderFinally, since I wrote this post, a few new articles have been added to the EOS constitution (without any decentralized decision-making process). This has been done to give the ECAF and its infinite discretion to make binding decisions some degree of legitimacy. So yeah, censorship is \u2018constitutional\u2019 now. This is starting to feel very familiar.\u00a0:\u2019)", "responses": "45"}, {"title": "The ultimate end-to-end tutorial to create and deploy a fully decentralized Dapp in\u00a0ethereum", "author_name": "Merunas Grincalaitis", "link": "https://medium.com/ethereum-developers/the-ultimate-end-to-end-tutorial-to-create-and-deploy-a-fully-descentralized-dapp-in-ethereum-18f0cf6d7e0e?source=search_post", "post_date": "Aug 13, 2017", "readtime": "28 min read", "upvotes": "12K", "content": "The ultimate end-to-end tutorial to create and deploy a fully decentralized Dapp in\u00a0ethereumMerunas GrincalaitisBlockedUnblockFollowFollowingAug 13, 2017In this tutorial my objective is to walk you through the steps required to create a decentralized application from start to finish and deploy it in Ethereum.Note: Updated and revised on March 2 to fix several breaking changes.Here is how it will look:I\u2019m making it because I see a lot of tutorials that don\u2019t really show you the whole picture of how to connect everything and have a final dapp including decentralized hosting with IPFS, which is a powerful technology.Also because I found myself lost in a situation where I didn\u2019t know exactly how to develop the truly unstoppable application that the ethereum website talks about.You\u2019ll learn some basic and complex topics such as\u00a0:How to create a Smart Contract from scratchHow to deploy Smart Contracts on ropstenHow to create the frontend of the DappHow to connect the deployed contract with your applicationHow to deploy the final dapp on the decentralized hosting of IPFSHow to use your custom domain with IPFSAt the end of this tutorial you\u2019ll have a fully decentralized website working with your own Smart Contracts, so that you can use them from the browser and interact with the blockchain using Metamask or Mist.You must know a little bit about the blockchain, the software that has been created, a basic knowledge of how contracts work and experience programming websites with javascript.This tutorial is ideal for you if you\u2019re a web developer at the point of \u201cI know how this works and I just want to start creating something in Ethereum to learn and hopefully become a Dapp developer\u201dBtw I wrote a book about Ethereum development to learn solidity from scratch where you\u2019ll learn the most important concepts for becoming an Ethereum Developer fast. Check it out here, free for kindle unlimited us: https://www.amazon.com/dp/B07BJB1YNQYou can also get it from my website for $20 USD in PDF here: https://merunas.io/bookHere is the technology that we are going to use:Database: The Ethereum\u2019s Testnet Ropsten blockchain.Hosting: IPFS to get free hosting forever in a decentralized platform.Frontend: React.js with webpack. Don\u2019t worry I\u2019ll explain the most important steps. You can use whatever framework you like or plain javascript.Domain name: Godaddy. Here I could use some decentralized domain service like peername but it\u2019s just faster and easier with godaddy or any other domain registrar.Contract\u2019s programing language: Solidity 0.4.11, right now the most famous language for developing Smart Contracts.Frontend contracts: web3.js to use those contracts in your web user interface.Frameworks: Truffle to deploy, test and compile our contracts.Development server: Node.js to use the app while developing locally along with testrpc.Metamask: To use the final application like the end user would.And these are the steps that we\u2019re going to follow:Setup the projectProgram the Solidity contractsCreate the frontend applicationDeploy the application online with IPFSUse a custom domain for the applicationPlay with the final Dapp!", "responses": "110"}, {"title": "", "author_name": "ConsenSys", "link": "https://media.consensys.net/programmable-blockchains-in-context-ethereum-s-future-cd8451eb421e?source=search_post", "post_date": "Oct 21, 2015", "readtime": "25 min read", "upvotes": "2.1K", "content": "ConsenSysBlockedUnblockFollowFollowingOct 21, 2015Vinay Gupta is an infrastructure theorist, software engineer and inventor: http://re.silience.comBy the end of this article, you\u2019re going to understand blockchains in general (and Ethereum, a next-generation blockchain platform, in particular) well enough to decide what they mean to your life.Spanish versionBehold SkynetEthereum brings up strong emotions. Some have compared it to SkyNet, the distributed artificial intelligence of the Terminator movies. Others once suggested the entire thing is a pipe dream. The network has been up for a few months now, and is showing no signs of hostile self-awareness\u200a\u2014\u200aor total collapse.But if you\u2019re not terribly technical, or technical in a different field it\u2019s easy to stare at all this stuff and think \u201cI\u2019ll get around to this later\u201d or decide to ignore it until the Guardian does a nice feature (e.g., Imogen Heap: saviour of the music industry? article).But, in truth, it\u2019s not that difficult to understand Ethereum, blockchains, Bitcoin and all the rest\u200a\u2014\u200aat least the implications for people just going about their daily business, living their lives. Even a programmer who wants a clear picture can get a good enough model of how it all fits together fairly easily. Blockchain explainers usually focus on some very clever low-level details like mining, but that stuff really doesn\u2019t help people (other than implementers) understand what is going on. Rather, let\u2019s look at how the blockchains fit into the more general story about how computers impact society.As is so often the case, to understand the present, we have to start in the past: blockchains are the third act of the play, and we are just at the beginning of that third act. So we must recap.SQL: Yesterday\u2019s best\u00a0ideaThe actual blockchain story starts in the 1970s when the database as we currently know it was created: the relational model, SQL, big racks of spinning tape drives, all of that stuff. If you\u2019re imagining big white rooms with expensive beige monoliths watched over by men in ties, you\u2019re in the right corner of history. In the age of Big Iron, big organizations paid big bucks to IBM and the rest for big databases and put all their most precious data assets in these systems: their institutional memory and customer relationships. The SQL language which powers the vast majority of the content management systems which run the web was originally a command language for tape drives. Fixed field lengths\u200a\u2014\u200aa bit like the 140 character limit on tweets\u200a\u2014\u200aoriginally served to let impatient programs fast forward tapes a known distance at super high speed to put the tape head exactly where the next record would begin. This was all going on round about the time I was born\u200a\u2014\u200ait\u2019s history, but it\u2019s not yet ancient history.At a higher, more semantic level, a subtle distortion in how we perceive reality took hold: things that were hard to represent in databases became alternately devalued and fetishized. Years passed as people struggled to get the real world into databases using knowledge management, the semantic web, and many other abstractions. Not everything fit, but we ran society on these tools anyway. The things which did not fit cleanly in databases got marginalized, and life went on. Once in awhile a technical counter-current would take hold and try to push back on the tyranny of the database, but the general trend held firm: if it does not fit in the database, it does not exist.You may not think you know this world of databases, but you live in it. Every time you see a paper form with squares indicating one letter per box, you are interacting with a database. Every time you use a web site, there\u2019s a database (or more likely an entire mess of them) lurking just under the surface. Amazon, Facebook, all of that\u200a\u2014\u200ait\u2019s all databases. Every time a customer service assistant shrugs and says \u201ccomputer says no\u201d or an organization acts in crazy, inflexible ways, odds-are there\u2019s a database underneath which has a limited, rigid view of reality and it\u2019s simply too expensive to fix the software to make the organization more intelligent. We live in these boxes, as pervasive as oxygen, and as inflexible as punched cards.Documents and the World Wide\u00a0WebThe second act is started by the arrival of Tim Berners-Lee and the advent of the web. It actually starts just a hair before his arrival. In the late 1980s and early 1990s we get serious about computer networking. Protocols like Telnet, Gopher, Usenet and Email itself provide a user interface to the spanning arcs of the early internet, but it\u2019s not until the 1990s we get mass adoption of networked computers, leading incrementally to me typing this on Google Docs, and you reading it in a web browser. This process of joining the dots\u200a\u2014\u200a\u201cthe network is the computer\u201d as Sun Microsystems used to say)\u200a\u2014\u200awas fast. In the early 1990s, vast numbers of machines already existed, but they were largely stand-alone devices, or connected to a few hundred machines on a university campus without much of a window into the outside world. The software and hardware to do networking everywhere\u200a\u2014\u200athe network of networks, the internet\u200a\u2014\u200atook a long time to create, and then spread like wildfire. The small pieces became loosely joined, then tightly coupled into the network we know today. We are still riding the technological wave as the network gets smarter, smaller and cheaper and starts showing up in things like our lightbulbs under names like \u201cthe Internet of Things.\u201dBureaucracy and\u00a0machinesBut the databases and the networks never really learn to get on. The Big Iron in the machine rooms and the myriads of tiny little personal computers scattered over the internet like dew on a cobweb could not find a common world-model which allowed them to interoperate smoothly. Interacting with a single database is easy enough: forms and web applications of the kinds you use every day. But the hard problem is getting databases working together, invisibly, for our benefit, or getting the databases to interact smoothly with processes running on our own laptops.Those technical problems are usually masked by bureaucracy, but we experience their impact every single day of our lives. It\u2019s the devil\u2019s own job getting two large organizations working together on your behalf, and deep down, that\u2019s a software issue. Perhaps you want your car insurance company to get access to a police report about your car getting broken into. In all probability you will have to get the data out of one database in the form of a handful of printouts, and then mail them to the company yourself: there\u2019s no real connectivity in the systems. You can\u2019t drive the process from your laptop, except by the dumb process of filling in forms. There\u2019s no sense of using real computers to do things, only computers abused as expensive paper simulators. Although in theory information could just flow from one database to another with your permission, in practice the technical costs of connecting databases are huge, and your computer doesn\u2019t store your data so it can do all this work for you. Instead it\u2019s just something you fill in forms on. Why are we under-utilizing all this potential so badly?The Philosophy of\u00a0DataThe answer, as always, is in our own heads. The organizational assumptions about the world which are baked into computer systems are almost impossible to translate. The human factors\u200a\u2014\u200athe mindsets which generate the software\u200a\u2014\u200adon\u2019t fit together. Each enterprise builds their computer system in their own image, and these images disagree about what is vital and what is incidental, and truth does not flow between them easily. When we need to translate from one world model to another, we put humans in the process, and we\u2019re back to processes which mirror filling in paper forms rather than genuinely digital cooperation. The result is a world in which all of our institutions seem to be at sixes and sevens, never quite on the same page, and things that we need in our ordinary lives seem to keep falling between the cracks, and every process requires filling in the same damn name and address data, twenty times a day, and more often if you are moving house. How often do you shop from Amazon rather than some more specialized store just because they know where you live?There are lots of other factors that maintain the gap between the theoretical potential of our computers and our everyday use of the\u200a\u2014\u200atechnological acceleration, constant change, the sheer expense of writing software. But it all boils down to mindset in the end. Although it looks like ones and zeros, software \u201carchitects\u201d are swinging around budgets you could use to build a skyscraper, and changing something late into a project like that has similar costs to tearing down a half-made building. Rows upon rows upon rows of expensive engineers throwing away months (or years) of work: the software freezes in place, and the world moves on. Everything is always slightly broken.Over and over again, we go back to paper and metaphors from the age of paper because we cannot get the software right, and the core to that problem is that we managed to network the computers in the 1990s, but we never did figure out how to really network the databases and get them all working together.There are three classic models for how people try and get their networks and databases working together smoothly.First Paradigm: the diverse peers\u00a0modelThe first approach is just to directly connect machines together, and work out the lumps as you go. You take Machine A, connect it over a network to Machine B, and fire transactions down the wire. In theory, Machine B catches them, writes them into its own database, and the job is good. In practice, there are a few problems here.The epistemological problem is quite severe. Databases, as commonly deployed in our organizations, store fact. If the database says the stock level is 31 units, that\u2019s the truth for the whole of the organization, except perhaps for the guy who goes down to the shelf and counts them, finds the real count is 29, and puts that in the database as a correction. The database is institutional reality.But when data leaves one database and flows into another, it crosses an organizational boundary. For Organization A, the contents of Database A are operationally reality, true until proven otherwise. But for Organization B, the communique is a statement of opinion. Consider an order: the order is a request, but it does not become a confirmed fact until after the payment clears past the point of a chargeback. A company may believe an order has occurred, but this is a speculation about someone else\u2019s intentions until cold hard cash (or bitcoin) clears all doubts. Up until that point, an \u201cordered in error\u201d signal can reset the whole process. An order exists as a hypotheses until a cash payment clears it from the speculative buffer it lives in and places it firmly in the fixed past as a matter of factual record: this order existed, was shipped, was accepted, and we were paid for it.But until then, the order is just a speculation.The shifting significance of a simple request for new paint brushes flowing from one organization to another, a statement of intention clearing into a statement of fact, is not something we would normally think about closely. But when we start to consider how much of the world, of our lives, run on systems that work much like this\u200a\u2014\u200afood supply chains, electrical grids, tax, education, medical systems, it\u2019s odd that these systems don\u2019t come to our notice more often.In fact, we only notice them when something goes wrong.The second problem with peer connection is the sheer instability of each peer connection. A little change to the software on one end or the other, and bugs are introduced. Subtle bugs which may not become visible until the data transferred has wormed its way deep into Organization B\u2019s internal records. A typical instance: an order was always placed in lots of 12, and processed as one box. But for some reason, one day an order is placed for 13, and somewhere far inside of Organization B, a stock handling spreadsheet crashes. There\u2019s no way to ship 1.083 of a box, and The Machine Stops.This instability is compounded by another factor: the need to translate the philosophical assumptions\u200a\u2014\u200ain fact, the corporate epistemology, of one organization into another organization\u2019s private internal language. Say we are discussing booking a hotel and car rental as a single action: the hotel wants to think of customers as credit card numbers, but the car rental office wants to think of customers as driving licenses. A small error results in customer misidentification, comedy as customers are mistakenly asked for their driving license numbers to confirm hotel room bookings\u200a\u2014\u200abut all anybody knows of the error is \u201ccomputer says no\u201d when customers read back their credit card details with no idea that the computer now wants something else.If you think this is a silly example, the Mars Climate Orbiter was lost by NASA in 1999 because one team was using inches, and the other, centimeters. These things go wrong all the time.But over a wire, between two commercial organizations, one can\u2019t simply look at the other guy\u2019s source code to figure out the error. Every time two organizations meet and want to automate their back end connections, all these issues have to be hashed out by hand. It\u2019s difficult, and expensive, and error prone enough that in practice companies would often rather use fax machines. This is absurd, but this is how the world really works today.Of course, there are attempts to clarify this mess\u200a\u2014\u200ato introduce standards and code reusability to help streamline these operations and make business interoperability a fact. You can choose from EDI, XMI-EDI, JSON, SOAP, XML-RPC, JSON-RPC, WSDL and half a dozen more standards to assist your integration processes.Needless to say, the reason there are so many standards is because none of them work properly.Finally, there is the problem of scaling collaboration. Say that two of us have paid the upfront costs of collaboration and have achieved seamless technical harmony, and now a third partner joins our union. And now a fourth, and a fifth. By five partners, we have 13 connections to debug. Six, seven\u2026 by ten the number is 45. The cost of collaboration keeps going up for each new partner as they join our network, and the result is small pools of collaboration which just will not grow.Remember, this isn\u2019t just an abstract problem\u200a\u2014\u200athis is banking, this is finance, medicine, electrical grids, food supplies, and the government.Our computers are a mess.Hub and Spoke: meet the new\u00a0bossOne common answer to this quandary is to cut through the exponential (well, quadratic) complexity of writing software to directly connect peers, and simply put somebody in charge. There are basically two approaches to this problem.The first is that we pick an organization\u200a\u2014\u200aVISA would be typical\u200a\u2014\u200aand all agree that we will connect to VISA using their standard interface. Each organization has to get just a single connector right, and VISA takes 1% off the top, and makes sure that everything clears properly.There are a few problems with this approach, but they can be summarized with the term \u201cnatural monopoly.\u201d The business of being a hub or a platform for others is quite literally a license to print money for anybody that achieves incumbent status in such a position. Political power in the form of setting terms of service and negotiating with regulators can be exerted, and over all an arrangement that might have started with an effort to create a neutral backbone rapidly turns into being clients of an all-powerful behemoth without which one simply cannot do business.This pattern recurs again and again in different industries, at different levels of complexity and scale, from railroads and fibre optics and runway allocation in airports through to liquidity management in financial institutions.In the database context, there is a subtle form of the problem: platform economics. If the \u201chub and spoke\u201d model is that everybody runs Oracle or Windows Servers or some other such system, and then relies on these boxes to connect to each-other flawlessly because, after all, they are clone-like peas in a pod, we have the same basic economic proposition as before: to be a member of the network, you rely on an intermediary who charges whatever they like for the privilege of your membership, with this tax disguised as a technical cost.VISA gets 1% or more of a very sizeable fraction of the world\u2019s transactions with this game. If you ever wonder what the economic upside of the blockchain business might be, just have a think about how big that number is.Protocols\u200a\u2014\u200aif you can find\u00a0themThe protocol is the ultimate \u201cunicorn.\u201d Not a company that is worth a billion dollars two years after it was founded, but an idea so good that it gets people to stop arguing about how to do things, and just get on with it and do them.The internet runs on a handful of these things: Sir Tim Berners Lee\u2019s HTTP and HTML standards have worked like magic, although of course he simply lit the fire and endless numbers of technologists gave us the wondrous mess we know and love now. SMTP, POP and IMAP power our email. BGP sorts out our big routers. There are a few dozen more, increasingly esoteric, which run most of the open systems we have.A common complaint about tools like Gchat or Slack is that they do jobs which have perfectly great open protocols in play (IRC or XMPP) but do not actually speak those protocols. The result is that there is no way to interoperate between Slack and IRC or Skype or anything else, without going through hacked together gateways that may or may not offer solid system performance. The result is a degradation of the technical ecosystem into a series of walled gardens, owned by different companies, and subject to the whims of the market.Imagine how much WikiPedia would suck by now if it was a start up pushing hard to monetize its user base and make its investors their money back.But when the protocol gambit works, what\u2019s created is huge genuine wealth\u200a\u2014\u200anot money, but actual wealth\u200a\u2014\u200aas the world is improved by things that just work together nicely. Of course, SOAP and JSON-RPC and all the rest aspire to support the formation of protocols, or even to be protocols, but the definitional semantics of each field of endeavor tend to create an inherent complexity which leads back towards hub and spoke or other models.Blockchains\u200a\u2014\u200aa fourth\u00a0way?You\u2019ve heard people talking about bitcoin. Missionary chaps in pubs absolutely sure that something fundamental has changed, throwing around terms like \u201cCentral Bank of the Internet\u201d and discussing the end of the nation state. Sharply dressed women on podcasts talking about the amazing future potential. But what\u2019s actually underneath all this? What is the technology, separated from the politics and the future potential?What\u2019s underneath it is an alternative to getting databases synchronized by printing out wads of paper and walking it around. Let\u2019s think about paper cash for a moment: I take a wad of paper from one bank to another, and the value moves from one bank account\u200a\u2014\u200aone computer system\u200a\u2014\u200ato another. Computer as paper simulator, once again. Bitcoin simply takes a paper-based process, the fundamental representation of cash, and replaces it with a digital system: digital cash. In this sense, you could see bitcoin as just another paper simulator, but it\u2019s not.Bitcoin took the paper out of that system, and replaced it with a stable agreement (\u201cconsensus\u201d) between all the computers in the bitcoin network about the current value of all the accounts involved in a transaction. It did this with a genuinely protocol-style solution: there\u2019s no middleman extracting rents, and no exponential system complexity from a myriad of different connectors. The blockchain architecture is essentially a protocol which works as well as hub-and-spoke for getting things done, but without the liability of a trusted third party in the center which might choose to extract economic rents. This is really a good, good thing. The system has some magic properties\u200a\u2014\u200asame agreed data on all nodes, eventually\u200a\u2014\u200awhich go beyond paper and beyond databases. We call it \u201cdistributed consensus\u201d but that\u2019s just a fancy way of saying that everybody agrees, in the end, about what truth (in your bank balance, in your contracts) is.This is kind of a big deal.In fact, it breaks with 40 years of experience of connecting computers together to do things. As a fundamental technique, blockchains are new. And in this branch of technology, genuinely new ideas move billions of dollars and set the direction of industries for decades. They are rare.Bitcoin lets you move value from one account to another without having to move either cash or go through the baroque wire transfer processes that banks use to shuffle numbers because the underlying database technology is new, modern and better: better services through better technology. Just like cash it is anonymous and decentralized, and bitcoin bakes in some monetary policy and issues the cash itself: a \u201cdecentralized bank.\u201d A central bank of the internet, if you will.Once you think of cash as a special kind of form, and cash transactions as paper shuffling to move stuff around in databases, it\u2019s pretty easy to see bitcoin clearly.It\u2019s not an exaggeration to say that Bitcoin has stated us on the way out of a 40 year deep hole created by the limits of our database technology. Whether it can effect real change at a fiscal level remains to be seen.Ok, so what about Ethereum?Ethereum takes this \u201cbeyond the paper metaphor\u201d approach to getting databases to work together even further than bitcoin. Rather than replacing cash, Ethereum presents a new model, a fourth way. You push the data into Ethereum, it\u2019s bound permanently in public storage (the \u201cblockchain\u201d). All the organizations that need to access that information\u200a\u2014\u200afrom your cousin to your government\u200a\u2014\u200acan see it. Ethereum seeks to replace all the other places where you have to fill in forms to get computers to work together. This might seem a little odd at first\u200a\u2014\u200aafter all, you don\u2019t want your health records in such a system\u200a\u2014\u200aand that\u2019s right, you don\u2019t. If you were going to store health records online, you\u2019d need to protect them with an additional layer of encryption to ensure they couldn\u2019t be read\u200a\u2014\u200aand we should be doing this anyway. It\u2019s not common practice to apply appropriate encryption to private data, that\u2019s why you keep hearing about these enormous hacks and leaks.So what kinds of things would you like as public data? Let\u2019s start with some obvious things: your domain names. You own a domain name for your business, and people need to know that your business owns that domain name\u200a\u2014\u200anot somebody else. That unique system of names is how we navigate the internet as a whole: that\u2019s a clear example of something we want in a permanent public database. We\u2019d also like it if governments didn\u2019t keep editing those public records and taking domains offline based on their local laws: if the internet is a global public good, it\u2019s annoying to have governments constantly poking holes in it by censoring things they don\u2019t like.Crowdfunding as a test\u00a0bedAnother good example is crowdfunding for projects, as done by places like KickStarter, IndieGoGo and so on. In these systems, somebody puts a project online and gather funds, and there\u2019s a public record of how much funding has flown in. If it\u2019s over a certain number, the project goes live\u200a\u2014\u200aand we\u2019d like them to document what they did with the money. This is a very important step: we want them to be accountable for the funds they have taken in, and if the funds aren\u2019t sufficient, we want them returned where they came from. We have a global public good, the ability for people to organize and fund projects together. Transparency really helps, so this is a natural place for a blockchain.So let\u2019s think about the crowdfunding example in more detail. In a sense, giving money to a crowdfunding project is a simple contract:If the account balance is greater than $10000 then fund the project, and if I contributed more than $50, send me a t-shirt. Otherwise, return all the money.expressed as let\u2019s pretend code, that might be:See an actual example at https://ethereum.org/crowdsaleIf you represent this simple agreement as actual detailed code, you get something like this. This is a simple example of a Smart Contract, and smart contracts are one of the most powerful aspects of the Ethereum system.Crowdfunding potentially gives us access to risk capital backed by deep technical intelligence, and invested to create real political change. If, say, Elon Musk could access the capital reserves of everybody who believes in what he is doing, painlessly selling (say) shares in a future Mars City, would that be good or bad for the future of humanity?Building the mechanisms to enable this kind of mass collective action might be critical to our future. (e.g. See Coase\u2019s Blockchain youtube video)Smart ContractsThe implementation layer of all these fancy dreams is pretty simple: a smart contract envisages taking certain kinds of simple paper agreements and representing them as software. You can\u2019t easily imagine doing this for house painting\u200a\u2014\u200a\u201cis the house painted properly?\u201d is not something a computer can do\u200a\u2014\u200ayet. But for contracts which are mainly about digital things\u200a\u2014\u200athink cell phone contracts or airline tickets or similar, which rely on computers to provide service or send you an e-ticket\u200a\u2014\u200asoftware already represents these contracts pretty well in nearly all cases. Very occasionally something goes wrong and all the legalese in English gets activated, and a human judge gets involved in a lawsuit, but that\u2019s a very rare exception indeed. Mostly we deal with web sites, and show the people in the system who help us (like airline gate staff) proof that we\u2019ve completed the transaction with the computers, for example by showing them our boarding passes. We go about our business by filling in some forms and computers go out and sort it all out for us, no humans required except when something goes wrong.To make that all possible today, companies offering those kinds of services maintain their own technical infrastructure\u200a\u2014\u200adotcom money pays for fleets of engineers and server farms and physical security around these assets. You can buy off-the-shelf services from people that will set you up an e-commerce website or some other simple case, but basically this kind of sophistication is the domain of the big companies because of all the overheads and technical skill you need before you can have a computer system take money and offer services.It\u2019s just hard and expensive. If you are starting a bank or a new airline, software is a very significant part of your budget, and hiring a technical team is a major part of your staffing challenge.Smart Contracts & the World\u00a0ComputerSo what Ethereum offers is a \u201csmart contract platform\u201d which takes a lot of that expensive, difficult stuff and automates it. It\u2019s early days yet, so we can\u2019t do everything, but we are seeing a surprising amount of capability even from the first version of the world\u2019s first generally available smart contract platform.So how does a smart contract platform work? Just like bitcoin, lots and lots of people run the software, and get a few tokens (ether) for doing it. Those computers in the network all work together and share a common database, called the blockchain. Bitcoin\u2019s blockchain stores financial transactions. Ethereum\u2019s blockchain stores smart contracts. You don\u2019t rent space in a data center and hire a bunch of system administrators. Rather, you use the shared global resource, the \u201cworld computer\u201d and the resources you put into the system go to the people whose computers make up this global resource. The system is fair and equitable.Ethereum is open source software, and the Ethereum team maintain it (increasingly with help from lots of independent contributors and other companies too.) Most of the web runs on open source software produced and maintained by similar teams: we know that open source software is a good way to produce and maintain global infrastructure. This makes sure that there\u2019s no centralized body which can use its market power to do things like jack up the transaction fees to make big profits: open source software (and its slightly more puritan cousin, Free Software) help keep these global public goods free and equitable for everybodyThe smart contracts themselves, which run on the Ethereum platform, are written in simple languages: not hard to learn for working programmers. There\u2019s a learning curve, but it\u2019s not different from things that working professionals do every few years as a matter of course. Smart contracts are typically short: 500 lines would be long. But because they leverage the huge power of cryptography and blockchains, because they operate across organizations and between individuals, there is enormous power in even relatively short programs.So what do we mean by world computer? In essence, Ethereum simulates a perfect machine\u200a\u2014\u200aa thing which could never exist in nature because of the laws of physics, but which can be simulated by a large enough computer network. The network\u2019s size isn\u2019t there to produce the fastest possible computer (although that may come later with blockchain scaling) but to produce a universal computer which is accessible from anywhere by anybody, and (critically!) which always gives the same results to everybody. It\u2019s a global resource which stores answers and cannot be subverted, denied or censored (See From Cyperpunks to Blockchains video on youtube).We think this is kind of a big deal.A smart contract can store records on who owns what. It can store promises to pay, and promises to deliver without having middleman or exposing people to the risk of fraud. It can automatically move funds in accordance with instructions given long in the past, like a will or a futures contract. For pure digital assets there is no \u201ccounterparty risk\u201d because the value to be transferred can be locked into the contract when it is created, and released automatically when the conditions and terms are met: if the contract is clear, then fraud is impossible, because the program actually has real control of the assets involved rather than requiring trustworthy middle men like ATM machines or car rental agents.And this system runs globally, with tens and eventually hundreds of thousands of computers sharing the workload and, more importantly, backing up the cultural memory of who promised what to whom. Yes, fraud is still possible, at the edge of the digitial, but many kinds of outright banditry are likely to simply die out: you can check the blockchain and find out if the house has been sold twice, for example. Who really owns this bridge in Brooklyn? What happens if this loan defaults? All there, as clear as crystal, in a single shared global blockchain. That\u2019s the plan, anyway.Democratized access to the state of the\u00a0artAll of this potentially takes the full power of modern technology and puts it into the hands of programmers who are working in an environment not much more complex than coding web sites. These simple programs are running on enormously powerful shared global infrastructure that can move value around and represent the ownership of property. That creates markets, registries like domain names, and many other things that we do not currently understand because they have not been built yet. When the web was invented to make it easy to publish documents for other people to see, nobody would have guessed it would revolutionize every industry it touched, and change people\u2019s personal lives through social networks, dating sites, and online education. Nobody would have guessed that Amazon could one day be bigger than Wal-Mart. It\u2019s impossible to say for sure where smart contracts will go, but it\u2019s hard not to look at the web, and dream.Although an awful lot of esoteric computer science was required to create a programming environment that would let relatively ordinary web skills move around property inside of a secure global ecosystem, that work has been done. Although Ethereum is not yet a cakewalk to program, that\u2019s largely an issue of documentation, training, and the gradual maturation of a technical ecosystem. The languages are written and are good: the debuggers take more time. But the heinous complexity of programming your own smart contract infrastructure is gone: smart contracts themselves are simpler than modern JavaScript, and nothing a web programmer will be scared of. The result is that we expect these tools to be everywhere fairly soon, as people start to want new services, and teams form to deliver them.The Future?I am excited precisely because we do not know what we have created, and more importantly, what you and your friends will create with it. My belief is that terms like \u201cBitcoin 2.0\u201d and \u201cWeb 3.0\u201d will be inadequate\u200a\u2014\u200ait will be a new thing, with new ideas and new culture embedded in a new software platform. Each new medium changes the message: blogging brought long form writing back, and then twitter created an environment where brevity was not only the soul of wit, but by necessity its body also. Now we can represent simple agreements as free speech, as publication of an idea, and who knows where this leads.Ethereum Frontier is a first step: it\u2019s a platform for programmers to build services you might access through a web browser or a phone app. Later we\u2019ll release Ethereum Metropolis, which will be a web browser like program, currently called Mist, which takes all the security and cryptography inherent in Ethereum and packages it nicely with a user interface that anybody can use. The recent releases of Mist showcase a secure wallet, and that\u2019s just the start. The security offered by Mist is far stronger than current e-commerce systems and phone apps have. In the medium term, contract production systems will be stand-alone, so nearly anybody can download a \u201cdistributed application builder\u201d and load it up with their content and ideas and upload it\u200a\u2014\u200afor simple things, no code will be required, but the full underlying power of the network will be available. Think along the lines of an installation wizard, but instead of setting up your printer, you are configuring the terms of a smart contract for a loan: how much money, how long, what repayment rates. Click OK to approve!If this sounds impossible, welcome to our challenge: the technology has gotten far, far ahead of our ability to explain or communicate the technology!The World SUPER Computer?We are not done innovating yet. In a little while\u200a\u2014\u200awe\u2019re talking a year or two\u200a\u2014\u200aEthereum Serenity will take the network to a whole new level. Right now, adding more computers to the Ethereum network makes it more secure, but not faster. We manage the limited speed of the network using Ether, a token which gives priority on the network etc. In the Serenity system, adding more computers to the network makes it faster, and this will finally allow us to build systems which really are internet scale: hundreds of millions of computers working together to do jobs we collectively need done. Today we might guess at protein folding or genomics or AI, but who\u2019s to say what uses will be found for such brilliant software.I hope this non-technical primer on the Ethereum ecosystem has been useful, and as soon as we have a user friendly version of the system available for general use, you\u2019ll be the first to know!If you are interested in learning more about Ethereum, you should come to https://devcon.ethereum.org in London on November 9th.byVinay Gupta@leashlessConsenSysLayout by Eva Shon, along with icons from thenounproject.com", "responses": "55"}, {"title": "Ethereum for web developers", "author_name": "Mahesh Murthy", "link": "https://medium.com/@mvmurthy/ethereum-for-web-developers-890be23d1d0c?source=search_post", "post_date": "Jan 2, 2017", "readtime": "5 min read", "upvotes": "5.6K", "content": "Ethereum for web developersMahesh MurthyBlockedUnblockFollowFollowingJan 2, 2017I have been learning about Ethereum blockchain platform for some time and the more I learn, the more exciting it looks. There are lots of resources (articles, videos, platform documentation) about Ethereum, it\u2019s easy to get overwhelmed. But, many of them are outdated understandably because the platform is still evolving at a rapid pace. It took me some time to piece together and get a complete picture of what Ethereum is and how it works. Talking to developers in meetup groups and other online communities, it feels like there are many people who would like to get their hands dirty with this new technology but have the same issue. This article is my attempt at explaining Ethereum from a web developer\u2019s point of view.If you are a web developer, you know how a webapp with it\u2019s client server architecture works at a very high level.You have your web application hosted on a hosting provider like AWS, Heroku or a VPS. All the clients interact with this one central application. Clients can be a browser, another api consuming your service etc. When a client makes a request to the server, the server does it\u2019s magic, talks to the database and/or cache, reads/writes/updates the database and serves the client.This architecture works very well most of the times. However, there are certain applications where it would be really helpful if that database was publicly and securely accessible by everyone and you don\u2019t have to rely on this webapp owner for your data.For example, let\u2019s look at eBay. If you are a power seller who has earned hundreds of good reviews and for some reason eBay suspends your account. That would be very bad and could severely impact your business. What would be really nice is the ability for you take all your reviews and ratings and move to another platform (say eBay Competitor). eBay does provide a service by being the trusted third party between buyers and sellers. But then, they also take a commission off each sale. What if there was a way to eliminate eBay altogether from the transaction between buyer and seller so you save on commission and also you have access to all your data? This is where decentralized applications come in to picture. Ethereum makes it very easy to build Dapps (decentralized applications).This is how an Ethereum Dapp looks at a high level:If you notice, every client (browser) communicates with it\u2019s own instance of the application. There is no central server to which all clients connect to. This means, every person who wants to interact with a dapp (Decentralized Application) will need a full copy of the blockchain running on their computer/phone etc. That means, before you can use an application, you have to download the entire blockchain and then start using the application. This might sound ridiculous at first but it has the advantage of not relying on a single central server which might disappear tomorrow.In reality, you don\u2019t need to spend lot of your hard disk and RAM downloading the entire blockchain. There are a few workarounds/optimizations to keep the application decentralized yet make the interaction quick and easy.Now, what exactly is this blockchain? It has:Database: Every few transactions that occur in the Ethereum network are packaged in to blocks and each block is linked to the next block. This linked series of blocks which holds all the transaction data is the blockchain. If we go back to the eBay example, every transaction between buyers and sellers, whether it is a sale, refund or dispute would all be recorded on the blockchain and is available for everyone to see. To make sure all the nodes in the network have same copy of the data and to insure no invalid data gets written to this database, Ethereum uses an algorithm called Proof of Work (http://ethereum.stackexchange.com/questions/14/what-proof-of-work-function-does-ethereum-use)Code: The database aspect of blockchain just stores the data. But where is all the logic to buy, sell, cancel, refund etc. In Ethereum world, you write the application code (called contract) in a language called Solidity. You then use the solidity compiler to compile it to Ethereum Byte Code and then deploy that byte code to the blockchain. There are few other alternates to Solidity but Solidity is by far the most popular language for contract development.So basically, the blockchain stores your data, stores the code and also runs the code in the EVM (Ethereum Virtual Machine).To build web based dapps, Ethereum comes with a handy javascript library called web3.js which connects to your blockchain node. So you can just include this library in your famous js framework like reactjs, angularjs etc and start building.Another big and most important feature is the financial capabilities of the platform. What if I tell you, as soon as you start using a dapp, you get an in built bank account? Actually, not one bank account, but you can create as many bank accounts as you like in a fraction of second? These bank accounts are called wallets where you store money (Ether - the currency used in the Ethereum ecosystem) and transact.There are lot of details about the inner workings of the blockchain I left out deliberately because I wanted to concentrate on mostly comparing the blockchain based Dapp with a centalized webapp. Hope this post accomplishes that and gives a good high level idea of what Ethereum is and how it can be used to build decentralized applications.I plan on writing more posts/tutorials on dapp development this year. If you would like to get notified, you can subscribe here![I have written a 3 part guided tutorial on building a full stack dapp here: Part1, Part2, Part3]I have also created a more complex course to build a decentralized eBay on Ethereum & IPFS.Further Reading:For in depth details on how Ethereum works you can read the Ethereum white paper.More about the solidity language Solidity LanguageFor all questions, of course you have Ethereum Stack ExchangeSuper helpful community at gitter: https://gitter.im/ethereum/solidity and https://gitter.im/ethereum/web3.jsThanks @raineorshine, @alwaysbcoding, @kinjalmurthy for feedback on the article.", "responses": "31"}, {"title": "Adding Ethereum custom token to Atomic\u00a0Wallet", "author_name": "Atomicwallet", "link": "https://medium.com/atomic-wallet/adding-ethereum-custom-token-in-atomic-wallet-e9c7396d1642?source=search_post", "post_date": "Jul 9, 2018", "readtime": "3 min read", "upvotes": "13.8K", "content": "Adding Ethereum custom token to Atomic\u00a0WalletAtomicwalletBlockedUnblockFollowFollowingJul 9, 2018You can add any Ethereum ERC20 token to your Atomic Wallet! Participation in any ICO, Bounty or Airdrop has never been so easy: just use your Atomic Ethereum address to add your custom token.Why it is so importantAccording to Etherscan, on July 3, there are over 500 tradable ERC20-tokens, and the total number of generated smart contracts exceeds 96,000. The variety of tokens is really huge: from giants like EOS and Tether with billion dollar capitalization to thousands of local and custom tokens, not traded on exchanges yet. These new tokens appear literally every day!Such an abundance of tokens also has its negative side, however: sometimes wallet users cannot add their favorite ERC20 tokens to the portfolio and use the funds. Usually, developers only add the most prominent and tradable tokens.The Atomic Wallet team solved the problem on a fundamental level: we have developed an option to add custom ERC20 tokens! Now, every Atomic Wallet user can add any ERC20 token to their wallet in just a minute.See how it\u00a0works:First, you need to download and install Atomic Wallet app. We\u2019ve developed cross-platform Wallet versions for a range of operating systems.After creating a new ETH address you can manage your assets and add new custom ERC20 tokens.Custom Token adding\u00a0formYou can select the Add token function on the main app screen.In the appeared window, you will see the form that you need to fill out:Parent blockchain (there are the same steps to add TRON, QTUM and other platforms tokens, as well)Token contract address (contact a token-issuing company to check this information).Token full name (for example, the full name of AWC token\u200a\u2014\u200aAtomic Wallet Coin)Token symbol (in our case, it\u2019s (STG), Super Token).Token decimals. Here we fill in the additional token data. For example, the AWC token represents 8-decimals.Once finished, click \u201cAdd token\u201d button, and your token will appear in your wallet. Now you can manage it the way you want!Custom Token adding step-by-stepPlease note:\u00a0You can use your ETH address in Atomic Wallet to receive funds even before you add a custom ERC20 token.You can store any tokens on your address, but they will appear in the portfolio only after you add them to the interface.You can edit and delete any added custom token.Tokens removed from the interface will not disappear from your address, because the users\u2019 funds are not stored in the wallet. It only stores private keys and methods for working with blockchains and external services. All coins and tokens are stored on blockchains!So, we see the endless ocean of custom Ethereum ERC20 tokens for any needs, and every day this ocean becomes deeper and wider.Dive deep to find your treasures!\u00a0Atomic Wallet will make sure that this trip is safe and profitable.Download Atomic Wallet here: https://atomicwallet.io/Stay tuned and follow us on:Facebook\u200a\u2014\u200ahttps://facebook.com/atomicwalletTwitter\u200a\u2014\u200ahttps://twitter.com/atomicwalletJoin our Telegram chat: https://t.me/atomicwalletchat", "responses": "1"}, {"title": "WTF is Ethereum?", "author_name": "Mohit Mamoria", "link": "https://hackernoon.com/wtf-is-ethereum-c65e0d67ac09?source=search_post", "post_date": "Aug 14, 2017", "readtime": "9 min read", "upvotes": "6.3K", "content": "WTF is Ethereum?The ultimate guide to understand why Ethereum is not just another cryptocurrency.Mohit MamoriaBlockedUnblockFollowFollowingAug 14, 2017Although \u2018Bitcoin\u2019 and \u2018Ethereum\u2019 are terms that are often paired together, the reality is that they are vastly different. The only thing Ethereum shares with Bitcoin is that it\u2019s a cryptoasset running on top of blockchain.Instead of being just a cryptocurrency, like Bitcoin, Ethereum also has features which effectively makes it a huge decentralized computer.To understand Ethereum, one must understand how blockchain works. If you already understand it, or have already read my ultimate guide to understand blockchain, feel free to go directly to the next section.By the way, I am curator of a weekly newsletter, Unmade, which delivers one idea from the future to your inboxes.What is a blockchain?A blockchain, simply put, is a database. It\u2019s an ever growing database of certain kind of data and has quite remarkable properties:Once data is stored in the database, it can never be modified or deleted. Every record on a blockchain is permanent for eternity.No single individual or organization maintains the database; several thousand individuals do, and everyone has a copy of the database with themselves.To understand how several people are able to keep their copies of the database in sync with everyone else, imagine there are ten individuals in a network. Everyone is sitting with an empty file folder and an empty page in front of them. Whenever anyone does something important in the network, like transferring money, they announce it to everyone in the network.Everyone makes a note of the announcement on their pages until the page is filled. When it does, everyone has to seal the contents of the page by solving a mathematical puzzle. Solving the mathematical puzzle ensures that everyone\u2019s page had same contents and that they can never be modified. Whoever does it first, gets rewarded with some amount of cryptocurrency.Note: Want to know how exactly the process is carried out? Read the ultimate guide to understand blockchain.Once the page is sealed, the page is added to the file folder, a new page is brought out and the process continues forever.BlockchainAs time passes, these pages (blocks) that contain important records (transactions) are added to the folder (chain), thus forming the database (blockchain).What does a blockchain store?A blockchain can be used to store any kind of data, and the kind of data a blockchain stores, gives it its value. Bitcoin\u2019s blockchain stores the records of financial transactions, therefore, making it analogous to a currency like dollars or pounds. Bitcoins serve no additional purpose than what dollars serve. Ethereum is different.Ethereum is not merely a currency like dollars, pounds or bitcoin. Ethereum has a purpose higher than just being a currency. Ethereum is this:Ethereum is basically a huge computer! However it\u2019s an extremely slow one\u200a\u2014\u200aabout five to 100 times slower than regular computers today\u200a\u2014\u200aand very expensive. The \u2018Ethereum computer\u2019 has about the same power as one of the rare 90\u2019s smartphones; so it can\u2019t really do much more than some very trivial things.That doesn\u2019t really sound so impressive, so why is there so much hype around Ethereum? Well, that\u2019s a really good question. Ethereum is taking the world by storm because it\u2019s a completely decentralized computer that is distributed across the globe. Understanding how Ethereum\u2019s blockchain works will reveal how it acts like a world computer.How does Ethereum\u00a0work?Like any other blockchain, Ethereum needs several thousand people running a software on their computers to power the network. Every node (computer) in the network runs something called Ethereum Virtual Machine (EVM). Think of EVM as a operating system that understands and executes the software written in Ethereum specific programming language. The software/apps executed by Ethereum Virtual Machine are called \u2018smart contracts.\u2019To get anything done on this world computer, you need to pay a price. However, you don\u2019t pay it in regular currency like dollars or pounds. Instead, everything has to be paid with a cryptocurrency native to the network, called ether. Ether is exactly like bitcoin except that it can also be used to pay for executing smart contracts on Ethereum.A human being and a smart contract are both seen as users on Ethereum. Whatever a human user can do, a smart contract can do too, and then some.Smart contracts act exactly like any other human user in the network. Both of them can send and receive ether just like any other currency.But unlike human users, smart contracts can also execute a predefined computer program to perform various actions when triggered. To understand the power of a smart contract, let\u2019s consider an example.Power of smart contractsImagine you and I place a bet about tomorrow\u2019s weather. I bet that it\u2019ll be sunny tomorrow while you bet it\u2019ll be rainy. We agree that the loser has to give the winner $100. How can we do this and ensure that the loser will keep his promise? I can think of three distinct ways:1. Trust each\u00a0otherThe simplest way to do this would be to trust each other. If we\u2019ve been friends for a long time now, trusting each other is pretty easy. I know where you live and you know all kinds of embarrassing stuff about me. But things get more difficult if we\u2019re complete strangers. You have no reason to trust me and I have no reason to trust you.2. Sign a legal agreementAnother plausible way is to formulate our bet as a legal agreement. We\u2019ll both sign an agreement that defines all the terms of our bet in detail\u200a\u2014\u200aincluding what happens if the loser violates the agreement.The agreement would makes us legally obligated to pay the winner, but it wouldn\u2019t serve any practical purpose because forcing the agreement through the legal route would be more expensive than what the bet was worth.3. Get help from a mutual\u00a0friendWe could find a mutual friend who we both trust and we\u2019d both give him/her $100 each for safekeeping. The nextday, he/she would check the weather and give the total $200 to whoever won the bet. Simple and easy, except that it isn\u2019t: What if the trusted friend runs away with $200?Now we have three different ways of doing the bet but each option has its shortcomings. Because we are strangers, we cannot trust each other. Forcing a legal agreement will be so expensive that it wouldn\u2019t be practically feasible. Getting help from a mutual friend brings up the question of trust again.Ethereum\u2019s smart contract can save the day in such a situation. A smart contract is like the trusted mutual friend but written in code. Ethereum allows us to write a software that accepts ether worth $100 from both of us, and then the next day, uses the open weather API to check the weather and transfer the total ether worth of $200 to the winner.Once a smart contract has been written it cannot be edited or altered in any way. Therefore, you can be sure that whatever the contract dictates, it will be executed no matter what.But how is a smart contract executed? And how does it relate to blockchain?How does smart contract relate to blockchain?Whenever a smart contract is executed, it records the information about the execution on a block as a transaction. On a very high level, a transaction on Ethereum blockchain looks like this:The fields are self explanatory except the last one. The \u2018data\u2019 field is what gives Ethereum its unique power. The \u2018data\u2019 field is used to record creation and execution of smart contracts as a transaction. Any given block on the Ethereum blockchain can contain three kind of transactions:1. Regular transfers of ether from one user to a human\u00a0userThese are the regular bitcoin-like transactions in the network. If you send ether directly to your friend the data field will be left empty.2. Transfers of ether from one user to no\u00a0oneWhen a transaction without a recipient is made, it means that the purpose of the transaction is to create a smart contract in the network using the contents present in the \u2018data\u2019 field. The \u2018data\u2019 field contains the software code that will be made to act like any other user in the network.3. Transfers of ether from a user to a smart\u00a0contractWhenever a user (or a smart contract) wants to execute a smart contract, he/she/it is required to make a transaction to the smart contract and put the instructions for the execution in the \u2018data\u2019 field.Just like in any other blockchain, whenever any of the three events mentioned above happen, it\u2019s announced to the whole network and everyone makes a note of it. In addition to making note of it, each node also executes the instructed smart contract to bring the state of their EVM in sync with the rest of the network.Each node executes a piece of software, thus, making the whole network act as a giant (but slow) distributed computer. Every tiny execution is then stored on the blockchain to make it permanent.Wait, I\u2019ve heard about something called Gas\u200a\u2014\u200awhat\u2019s\u00a0that?I told you that the user using a smart contract must pay a certain price to execute it. This price is paid to the node that actually spends memory, storage, computation and electricity to execute the smart contract.To calculate the prices of smart contracts, every statement has an assigned cost to it. For example, if you execute a statement that uses the node\u2019s memory, those type of statements have a specific cost. If you execute a statement that uses the node\u2019s disk storage, those kind of statements have a specific cost attached to them. The unit in which the cost is defined is called Gas. Eventually, Gas is converted to ether using an exchange rate.Whenever you execute a smart contract, you have to define the maximum Gas to be consumed. The execution will stop either when the execution is completed or when the Gas Limit is reached. This is done to avoid infinite loops in smart contracts, preventing the program getting stuck executing a set of statements repeatedly without proceeding further.Such situations occur because of programmer\u2019s carelessness. With every repetition, some of the assigned Gas will be used, thus making any infinite loop a finite one. It doesn\u2019t make any sense for a node to be stuck in execution because of a programmer\u2019s mistake. The concept of Gas solves this problem.And that, ladies and gentleman, is\u00a0EthereumEthereum isn\u2019t just a cryptocurrency to be traded; its real value lies in its purpose. Ethereum\u2019s purpose is to allow the owner to use the distributed world computer that several thousand nodes are powering.Of course, because every tiny statement has to be executed by every node in the network, the decentralized, distributed computer becomes slow and expensive. But slow compared to what? The faster but centrally controlled servers.To enjoy the lower costs of using a centralized computer, we give them the power to control us. If the central computer (server) goes down or gets hacked, it takes down with it all the clients attached to it. A decentralized computer will only go down if every single node goes down, making it a computer that will always be available. Wherever there\u2019s internet, there\u2019s Ethereum.\u2014About the authorMohit Mamoria is the CEO of godtoken.org and editor of a weekly newsletter, Unmade, which delivers one startup idea from the future to your inboxes.Have feedback? I am available on Twitter.The story first appeared on The Next Web.Thanks for reading!\u00a0:) If you liked it, please support by hitting that heart button below.\u00a0\ud83d\udc9a", "responses": "24"}, {"title": "Introducing Ethereum Quantum Protocols: Solving Digital Asset Transfers", "author_name": "Blockparty", "link": "https://medium.com/@goblockparty/introducing-ethereum-quantum-protocols-solving-digital-asset-transfers-73098bc9f3b8?source=search_post", "post_date": "May 22, 2018", "readtime": "4 min read", "upvotes": "15.7K", "content": "Introducing Ethereum Quantum Protocols: Solving Digital Asset TransfersHow an Ethereum Quantum Protocol Could Revolutionize the Movement of Digital\u00a0Assets.BlockpartyBlockedUnblockFollowFollowingMay 22, 2018By Rikesh Thapa, CTO of BlockpartyThe biggest problem with digital assets\u200a\u2014\u200asuch as live event tickets, airline tickets and music files\u200a\u2014\u200ais the ability to transfer ownership.The Battle Between Centralized and Decentralized Systems\u00a0LoomsThis problem made headlines in 2002 with the shut down of Napster and its peer-to-peer music file sharing platform. And despite efforts from digital rights owners and sellers, the problem still persists today:1. Music\u00a0FilesSome music re-sellers, such as Apple, embed Digital Rights Management (\u201cDRM\u201d) code into digital music to inhibit their transfer. But DRM-free copyrighted music files can still be shared illegally between individuals.2. Airline\u00a0TicketsAirline tickets are generally non-transferable, and it is virtually impossible for a person who can not make a flight to sell it to another person.3. Live Event\u00a0TicketsAfter an event creator sells a ticket, it is virtually impossible to regulate anything about the secondary ticket market\u200a\u2014\u200acreating an opportunity for bots, brokers and scalpers to jack up prices and sell illegal duplicates.Enter Ethereum Quantum ProtocolsThe Ethereum blockchain can solve these problems by combining ERC-721 non-fungible tokens with ERC-20 fungible tokens in a system I call a \u201cQuantum Protocol.\u201dWhat Are ERC-721 ContractsERC-721 tokens are an untapped resource in the Ethereum protocol. The most well-known project to use them so far is CryptoKitties. CryptoKitties created new digital assets, each of which was unique, and can therefore only be represented with non-fungible contracts such as ERC-721\u2019s. High demand for Cryptokitties bogged down the Ethereum blockchain, demonstrating the limitation of ERC-721\u2019s as a tradable token.But focusing on CryptoKitties misses the whole point of ERC-721 tokens. The project barely tapped into the real functionality of ERC-721 tokens. ERC-721\u2019s allow each individual contract to have different characteristics. This is unlike ERC-20 tokens that, like a currency, do not allow for any variability.You don\u2019t need to invent new asset classes when there are already millions of examples of real-world uniquely identified digital assets that do have value, yet struggle with problems associated with ownership, use and transfer. Real-world digital assets that could be represented with ERC-721 tokens are live event tickets, airline tickets, digital music downloads and many others.How Quantum Protocols Can\u00a0WorkUsing non-fungible ERC-721 tokens, you can solve the problems of proof of ownership, fraud prevention and transfer of ownership of digital assets. But in order to truly solve these problems, you have to do two things:1. Keep the ERC-721 Smart Contract Logic Lightweight:To prevent the system overload that CryptoKitties caused, you must build a standard protocol that limits the amount of information embedded into the smart contract. To do this, a separate metadata layer is created that stores and regulates non-essential information related to the asset.CryptoKitties was unregulated, and tokens could be created that were so large they bogged down the entire Ethereum blockchain. You can still encode a powerful amount of data in a limited ERC-721 token, such as a digital fingerprint, and a transfer protocol that sends transaction fees back to the creator, and access to additional perks or privileges, etc. But the system must set limitations on the total data capacity of each token to ensure fast transactions.2. Make non-fungible ERC-721 tokens interchangeable with fungible ERC-20 tokens, which can be easily bought and\u00a0sold:You could do this with Ethereum itself or any of the tokens built on it, like Metal, or Binance or Tron, but you could also create your own native ERC-20 token. This could allow any company to create a marketplace for the ERC-721s that they issue, where they are bought and sold using their own native ERC-20 tokens. That would give them a powerful way to fund their project and also incentivize activity in the marketplace they create.This \u201cQuantum Protocol,\u201d\u200a\u2014\u200athe combination of ERC-721s with a native ERC-20 token\u200a\u2014\u200awould support any number of use cases. And it provides a way for each project to earn legitimate income from regular business functions surrounding their application. By creating a safer, trustless marketplace for digital assets that previously had all kinds of problems with security and fraud, you provide value, and you would be able to earn money on transaction fees, for example.3. To combine the whole system, use a trustless consensus protocol to ensure that the system remains decentralized:In order to ensure that the integrity of the ERC-721\u2019s and ERC-20\u2019s remain intact, the metadata layer must be regulated by a consensus protocol so no new information can impact on existing assets, unless agreed upon by the consensus protocol. This way we can make sure that we do not have a central point of failure, malicious actor, or corrupt authority manipulating data in the metadata or application layer.Quantum Protocols can become the next evolution for blockchain. The Ethereum blockchain needs Quantum Protocols in order to expand beyond simple financial transactions and into an infinite number of real-world, tangible use cases.", "responses": "1,004"}, {"title": "Yes, this kid really just deleted $300 MILLION by messing around with Ethereum\u2019s smart contracts.", "author_name": "Thijs Maas", "link": "https://hackernoon.com/yes-this-kid-really-just-deleted-150-million-dollar-by-messing-around-with-ethereums-smart-2d6bb6750bb9?source=search_post", "post_date": "Nov 8, 2017", "readtime": "6 min read", "upvotes": "5.6K", "content": "Yes, this kid really just deleted $300 MILLION by messing around with Ethereum\u2019s smart contracts.Thijs MaasBlockedUnblockFollowFollowingNov 8, 2017Last year, The DAO, a decentralized \u2018autonomous\u2019 investment fund, got hacked for $50 million. In July, a hacker was able to steal $31M of Ether by exploting a bug found in Parity\u2019s wallets. Today, we have the worst hack yet, only this time, the stakes are even bigger and it is all just one big fuck-up.Two days ago, a user named \u2018devops199\u2019 opened an issue on Parity\u2019s Github, titled \u201canyone can kill your contract\u201d, seemingly wanting to let Parity, a company that provides smart contracts for users of the Ethereum network, know about a vulnerability in their smart contract.The smart contract that he was referring to, concerns a \u2018multi-signature-contract\u2019, which is used by a large amount of people as a \u2018digital wallet\u2019 to safely store their Ethereum. Apparently, this wallet had a \u2018bug\u2019 in its code. The bug, or, better said, security vulnerability, allowed Devops199 to make himself one of the \u2018owners\u2019 of the contract. This gave him the permission to do pretty much anything.What Devops199 did then, might just be one of the most expensive mistakes ever made:He \u2018killed\u2019 the contract.Essentially, he deleted the function of the smart contract that allowed the owners of the Ethereum to transfer their Ethereum. He locked the Ethereum up in the contract, rendering it completely useless\u200a\u2014\u200aforever. Still, it seems like he did not quite understand what had just happened.\u201cWil ether transfer by owners\u00a0work?\u201dNo\u2026 No it won\u2019t. You pretty much just deleted a f*ck load of money.Essentially, everyone who used this multi-sig wallet, can no longer access their Ethereum anymore. Estimations of how much Ethereum was actually in these contracts range from $150 million USD to $300 million USD.Parity, who also had their multi-sig wallets hacked in Juli, issued a \u2018Security Alert\u2019 once again, stating:\u201cWe very much regret that yesterday\u2019s incident has caused a great deal of stress and confusion amongst our users and the community as a whole, especially with all the speculation surrounding the issue. We continue to investigate the situation and are exploring all possible implications and solutions.\u201dThe last thing that we heard from Devops199:Providing a\u00a0solutionIt should be noted that the Ethereum itself is not actually completely deleted. It still exists; it can simply not be accessed.Imagine that 280 million USD is stored in a deposit box. Somehow, a random guy was able to walk into the bank and say he was the owner of the security box. He was handed full access without a problem and subsequently permanently deleted the key to the deposit box. This key, was completely unique and can in no way be recreated again.At least, not under the rules of the network. There is, however, a solution to this problem. One that is pretty controversial.When the DAO, a decentralized investment vehicle, was hacked earlier this year, the situation was fixed with a \u2018hard fork\u2019. The Ethereum foundation released a new version of their client, in which they had injected new transactions to \u2018steal\u2019 the Ether back from the hacker controlled smart contracts. Of course, technically these new transactions were against the rules of the Ethereum network, but as they were hard-coded into the Ethereum clients, the \u201crules\u201d were specifically changed to allow these (and only these!) otherwise rule-breaking transactions.However, when the decision was made to hard fork the Ethereum network to recover the funds lost during the DAO hack, a part of the network did not agree with the decision. Those who did not agree with the provided solution, believe that \u2018Code is Law\u2019, and this change is illegal. As such, they kept using the \u2018original\u2019 software instead. Suddenly, there were 2 versions of Ethereum: Ethereum, and Ethereum Classic.Ethereum Classic still exists to this day, and at the time of writing, it\u2019s market capitalization is about $1.3 billion USD, whereas the \u2018forked\u2019 Ethereum chain (the one that reverted the hack) is worth around $30 billion USD.It is very doubtful that the Ethereum network will opt for a hard fork again, seeing the controversy it caused last time. No doubt, Ethereum classic would benefit as a result. After all, where is the monetary limit for the Ethereum foundation to advocate for a quick fix that goes against the rules of their own network?Edit: The original version of this piece had a mistake in it. Thanks to Rene Schneider for correcting me on it.Criticizing Ethereum, again.It might be time to take a step back and re-think the design of smart contracts. This is not the first time a bug in one of these contracts led to gigantic sums of money being compromised. The Ethereum Foundation likes to brag that Ethereum, as a smart contract platform, is \u2018turing-complete\u2019, meaning that pretty much anything can be coded and deployed on top of it. So far, this particular choice of design has resulted in more than half a billion dollar being compromised in one way or the other.Turing-completeness consistently leads to vulnerabilities, as a contract is naturally only as good as its developer. Ask any developer about how often they accidentally write bugs into their code, with or without noticing, and you might understand why the whole concept of un-audited \u2018turing-complete\u2019 smart contracts is terribly dangerous when there is this much money at stake. Design choices have their consequences, and at some point it is time to re-evaluate them. For example, it might make sense for a smart contracting platform to only allow the deployment of \u2018pre-vetted\u2019 smart contracts, that are made and audited by professionals.Of course, that is a very centralized process in a decentralized system. And sure, there are many trade-offs in the meta-design of a smart contract platform. But these trade-offs are worth thinking about, because Ethereum will always be plagued by security issues if nothing changes.Supporters of Ethereum will say that I should not blame the platform for the mistakes made by smart contract developers and that\u2019s a valid point to some degree. However, let\u2019s not forget that Parity is not run by some unknown, incompetent boy in his puberty, deploying his first smart contracts. No, it is founded Gavin Wood himself, one of the co-founders of Ethereum.If even his smart contracts consistently have such flaws, how secure will the majority of Turing-complete smart contracts be in the future?", "responses": "24"}, {"title": "A beginner\u2019s guide to Ethereum\u00a0tokens", "author_name": "Linda Xie", "link": "https://blog.coinbase.com/a-beginners-guide-to-ethereum-tokens-fbd5611fe30b?source=search_post", "post_date": "May 22, 2017", "readtime": "6 min read", "upvotes": "2.2K", "content": "A beginner\u2019s guide to Ethereum\u00a0tokensLinda XieBlockedUnblockFollowFollowingMay 22, 2017What is an Ethereum token?Before learning about Ethereum tokens, it is important to first understand the basics of Ethereum. Please see my beginner\u2019s guide to Ethereum for those new to this concept entirely. Ethereum tokens are simply digital assets that are being built on top of the Ethereum blockchain. They benefit from Ethereum\u2019s existing infrastructure instead of developers having to build an entirely new blockchain. They also strengthen the Ethereum ecosystem by driving demand for ether, the native currency of Ethereum, needed to power the smart contracts. This beginner\u2019s guide should help those who are new to digital assets to understand Ethereum tokens at a high level and how they are different than Ethereum.ComparisonEthereum is a platform that can be used to create any arbitrary smart contract including smart contracts that represent digital assets called Ethereum tokens. This is similar to the App Store providing a platform for iOS apps with some apps issuing their own digital currencies that are used within the game or system. However, with Ethereum there is no centralized entity like Apple that controls what gets added to the App Store. Anyone can create a token on top of Ethereum.Ethereum tokens can represent anything from a physical object like gold (Digix) to a native currency used to pay transaction fees (Golem). In the future, tokens may even be used to represent financial instruments like stocks and bonds. The properties and functions of each token are entirely subject to its intended use. Tokens can have a fixed supply, constant inflation rate, or even a supply determined by a sophisticated monetary policy. Tokens can be used for a variety of purposes such as paying to access a network or for decentralized governance over an organization.Tokens are often issued to the public through a crowd sale called an initial coin offering (ICO). The creators of the token will issue the token to others in exchange for ether and sometimes bitcoin and other digital currencies. There have been many ICOs recently and in a short time they have completely changed the way projects are funded. There is no requirement that tokens must be well distributed, although if you are building a decentralized application ideally you want the tokens to be owned by as many people as possible.Chart from thecontrol.coThere are multiple resources that can walk you through the process of creating a token and that explain how tokens work on a technical level. For example, Token Factory provides a simple user interface that allows you to create your own Ethereum token with custom parameters.Similar to bitcoin and ether, Ethereum tokens are also tracked on the blockchain which is the public ledger of all transactions that have occurred. This is because Ethereum tokens are just a specific type of smart contract that live on the Ethereum blockchain.Aragon\u2019s token tracked on Etherscan.ioAmong the largest Ethereum tokens by market cap are Augur\u2019s REP and Golem\u2019s GNT. Both projects are in development and have a combined market cap of about $450 million. I\u2019ll briefly go over how each of them work to provide a better understanding of the vastly different functions an Ethereum token can have.AugurAugur is a decentralized prediction market co-founded by Joey Krug and Jack Peterson. Prediction markets allow users to bet on the outcome of different events and can also be used for hedging purposes. For example, if you own 1 bitcoin that is worth $2,000 and want to hedge that holding, you can bet that the price of bitcoin will be below $2,000 by a certain date. That way if the price of bitcoin goes up your holdings will be more valuable but if it goes down you will offset your losses through the prediction market. There is no centralized source that reports on the outcome of events. This mitigates the risk of a corrupt reporter but also creates a need for a decentralized reporting source.Augur issued an Ethereum token called Reputation (REP). There is a fixed supply of 11 million REP tokens in existence, 80% of which were sold through a crowd sale raising $5.3 million. These tokens are used for reporting on the outcome of prediction market events. All active REP holders are required to report on the outcome of randomly selected events. This maintains the decentralized reporting pool needed to settle the outcome of Augur\u2019s prediction markets. As a reward for providing this critical reporting function, REP holders receive half of all transaction fees generated by prediction markets on the platform. If someone tries to lie and report on the outcome incorrectly then they will get penalized by having to give up some of their REP. In addition if the majority of REP holders are dishonest then people would not want to use Augur and the value of REP goes down. This incentivizes people to act honestly in the Augur system.GolemGolem is a project headed by Julian Zawistowski that allows people to rent out their spare computing power to others. The idea is that by creating a worldwide supercomputer, computing power will become less costly and more accessible to everyone.Golem issued an Ethereum token called Golem Network Token (GNT). There is a fixed supply of 1 billion GNT in existence, 82% of which were sold through a crowd sale raising $8.6 million. These tokens are required for interacting with the Golem network and is the currency used as payment when renting computing power. Since there is a limited supply of tokens for accessing this network if more people want to use Golem then the value of GNT increases. This theoretically aligns the incentives of people holding GNT with those using it.ERC20 tokenYou may hear the Ethereum community refer to ERC20 tokens. The initial ERC20 page \u201cdescribes standard functions a token contract can implement.\u201d ERC20 is a standard interface for tokens. ERC20 tokens are simply a subset of Ethereum tokens. In order to be fully ERC20 compliant the developer needs to incorporate a specific set of functions into their smart contract that at a high level will allow it to perform the following actions:get the total token supplyget the account balancetransfer the tokenapprove spending the tokenERC20 allows for seamless interaction with other smart contracts and decentralized applications on the Ethereum blockchain. Tokens that have some but not all of the standard functions are considered to be partially ERC20 compliant and can still be easy for external parties to interact with depending upon which functions are missing.ResourcesThere are many existing and upcoming Ethereum tokens. Below are some links that may help you understand Ethereum tokens further and keep up with the exciting news.Understanding Ethereum tokensThe difference between App Coins and Protocol TokensHow to Raise Money on a Blockchain with a TokenIntroducing the Blockchain Token Securities Law FrameworkTokens, Tokens and More TokensThe Token EconomyThe perfect token sale structureKeeping up with Ethereum tokensICO AlertSmith + CrownEthereum SubredditThe ControlWeek in Ethereum NewsThe Dapp DailyThank you to Will Warren and many Coinbase employees especially Jordan Clifford, Reuben Bramanathan, David Farmer, and Dan Romero.Disclosure: The author owns various ethereum-based assets, including augur rep and golem gnt. All opinions in this post are the author\u2019s alone. This post is not an endorsement by Coinbase of any asset and you should be aware of the risk of loss before trading or holding any digital asset.", "responses": "52"}, {"title": "Ten Rules for Trading Bitcoin, Ethereum, and Other\u00a0Crypto", "author_name": "BambouClub", "link": "https://medium.com/@BambouClub/my-ten-rules-for-trading-cryptoassets-fa8070b4621c?source=search_post", "post_date": "Jun 24, 2017", "readtime": "10 min read", "upvotes": "3.8K", "content": "Ten Rules for Trading Bitcoin, Ethereum, and Other\u00a0CryptoBambouClubBlockedUnblockFollowFollowingJun 24, 2017#25 April 2019 Advice is to to register with these exchanges immediately:BitMEX: Leveraged tradingBinance: Largest exchange in the world. Recommended Buy: Binance Coin $BNBThe Ten\u00a0Rules31 December 2017: Performance of my Portfolio:Since Entry June 2014: Portfolio is x 46.5, i.e. has increased 4,550%. My average Bitcoin buy price (June 2014 to December 2015) was $540. Bitcoin (at its current $13,947) is x 25.82, increase of 2,482%.Year to Date (YTD) 2017: My portfolio is x 22, i.e. has increased 2,100%. Global Cryptomarket is x 33.62, increase of 3,262%. (From $18.2 billion to $612 billion.)The main successes in my portfolio have been $BTC, $ETH, $EOS (ICO), $XTZ (Tezos ICO), $ZRX (0X ICO), $BNB (Binance Coin), $BCH, $BCO (BridgeCoin).\u2018When you See it, Bet Big.\u2019 George SorosIndex Track the Top 10 CryptoassetsScale Out (Take some Profits)The Honeybadger Trade: Buy the Dip on Margin at Bitmex.Do not Over-Trade. Lock up CoinsLet Profits Run. Cut Losses. Watch 7d Price Change not 24h or 1hICOs are a Great Opportunity. Do Your Own Research.Research Micro-Caps that might rise by Orders of Magnitude. (I like KucoinShares $KCS. Buy at Kucoin Exchange.)Trade both ways by going short on margin. Sell Bitcoin on margin at BitMEX.Rule 1: Build the Portfolio on\u00a0BitcoinBitcoin is the mother lode. It has been good to me and will always form the main part of my crypto portfolio.Those (mainly low-income copy & paste journalists) claiming Bitcoin is in a bubble are too lazy and/or stupid to become informed. There is no Bitcoin bubble for these reasons.GrowthBitcoin has had phenomenal growth in its price and MCap since inception. If we exclude other cryptoassets, Bitcoin has been the best performing asset in the world every year since 2009 through to December 2017 with the exception of 2014. It has beaten all global currencies, equities, commodities, bonds, ETFs, real estate throughout that period. Bubbles are by definition short-lived, they do not keep bubbling for eight years.As a result it has achieved a MCap of $56 billion and this place in a global table of iconic assets.Trading VolumesVolumes indicate the liquidity of an asset. The greater the liquidity the easier it is to buy and sell, even when there is turmoil, and the lower the Bid-Offer spread and therefore the cost of trading. You want to avoid assets with tiny liquidity as when the shit hits the fan it will be costly to exit. Bitcoin has world-class liquidity. I run a crypoasset analysis site named Blocklink.info. Here is a screen-grab of the most liquid assets in the world.Source: Blocklink.info. Volumes for cryptoassets are fetched from the Coinmarketcap API using the CRYPTOFINANCE Google Sheets Add-On. Volumes for stocks come from Google Finance. You can check the US stocks volume at the NASDAQ site.Bitcoin\u2019s trading volume is up there with the great iconic American stocks.Bitcoin\u2019s price will continue to be volatile, but Bitcoin is travelling along a secular bull trend road, and that spectacular volume is not going to evaporate overnight.Transaction FeesEvery month fees are ever higher which is watertight evidence of ever greater demand to use Bitcoin. That is, people want to send transactions across the blockchain, not just trade on the exchanges.Tx fees time-series data is maintained at Blockchair.comBitcoin and My PortfolioBitcoin holds a dominant place in my cryptoasset portfolio. As a result of recent changes in UK regulations I have allocated my entire personal pension (like a US 401k or retirement account) into Bitcoin via the XBTProvider ETN.Be more cautious about investing your 401k into Barry Silbert\u2019s Bitcoin Investment Trust $GBTC. The (European) XBT Provider ETN is an open-ended fund which means it maintains a premium to the NAV close to 0% at all times. The Bitcoin Investment Trust is an inferior investment vehicle because it is a closed-end fund (it does not increase its holdings of the underlying asset when demand for the product increases) which means it is subject to wild swings in its premium, which has been as high as 150%. So you could make the mistake of buying when the premium is high and suffer swingeing losses even when the Bitcoin price is stable.Rule 2: \u201cWhen you See it, Bet Big.\u201d George\u00a0Soros.Something extraordinary is happening. The cypto space in June 2017 is like the Internet space in 1995. It is a great opportunity.Stanley Druckenmiller has written about his dealings with George Soros whom he quotes as saying \u2018When you see it, bet big\u2019. The funny thing is, I was mocked by a Hedge Funder on Twitter named Sarah Cone (@impcapital ) when I revealed that I had seen it and I had bet big. I bet big with my entire fucking pension.George Soros: When you see it, bet big.Here is Charlie Munger expressing a similar thought:Rule 3: Index Track the Top 10 CryptoassetsUntil 18 May 2017 I held very little Ethereum and zero Ripple in my portfolio.I made a great mistake in not buying Ethereum and Ripple in 2017 until 18 May. My mistake was Bitcoin Maximilism. I refused to have anything to do with Ethereum and Ripple because I didn\u2019t like them. As a result I missed these returns.Source: CryptoCurrencyChartI came to my senses on 18 May, 2017 when I underwent an epiphany. I then made a new (self-imposed) rule\u00a0: broadly track the Top 10 cryptoassets in my portfolio, regardless of my opinion about their individual merits.I have applied a flexible, discretionary form of index-tracking since then.I execute index-tracking manually off this Google Sheet:At the time of writing, 20 June 2017, the results of index-tracking have been pleasing.YTD 2017 returns for Cryptocurrencies, 18 May 2017:My portfolio was up 106% YTD.YTD 2017 returns for Cryptocurrencies, 20 June 2017:My portfolio was up 281%. So in one month (18 May to 20 June) it has raced past Bitcoin, $GBTC, and Monero, and has made good ground in catching up with Global Cryptocurrencies.I ruled myself free to apply discretion in my index-tracking. It was very clear early on that Ripple was in a secular bear market against Bitcoin from 18 May and I quickly became and stayed underweight in Ripple.I also went underweight in Ethereum in mid-June at $350\u200a\u2014\u200a$360.Why? Because:Is Ethereum in a\u00a0bubble?I don\u2019t know. Applying the same metrics used above to $ETH it does pretty well, but not as well as Bitcoin. But there are clear risks and as a result I am underweight in Ethereum compared to its share of the global Cryptoasset Market Cap.Growth (Price & MCap): Ethereum has outstanding growth in its short life, but it was only created in August 2015 so it lacks the 8-year track record of Bitcoin. This is significant. Ethereum\u2019s explosive performance in 2017 could indeed fit into the time-frame of a bubble.Trading Volumes & Volume/MCap Ratio: Great. Similar to Bitcoin.Transaction Fees: All good. They are rising quickly indicating true demand for this cryptoasset.Source: Bitinfocharts.comMetrics aside, Spencer Bogart makes great sense in this thread where he describes the regulatory risk and other risks that might bring the Ethereum house of cards down. It is possible that the SEC will rule that the ICOs are illegal sale of securities. People might go to prison. It is for these reasons that I am under-allocated.Note: If Governments decide to put a stop to the cryptoasset economy, there is a crucial distinction between Bitcoin and Ethereum. Bitcoin is truly decentralised. It has honeybadger, even cockroach qualities and is resistant to such measures. Ethereum is a registered commercial legal entity in Switzerland and can be shut down overnight.Rule 4: Scale Out (Take Some\u00a0Profits)Anyone who has lived through a bubble knows the value of this.I have experienced several bubbles, namely London housing 1984\u20131988, DotCom in 1998\u20132000, London housing again 2002\u20132008, the Bulgarian property market (seaside apartments and ski apartments) 2004\u20132008.It\u2019s human nature to be cautious at first and then progressively relaxed, even reckless. My observations suggest that it is best to behave in the opposite, counter-intuitive way: commit yourself to the market with reckless abandon in the early days, and then start the scaling out process, applying the brakes and get the hell out when it appears to be the later stages.In all those bubbles I made great paper profits that disappeared in a matter of months. The paper profits were more than 2 million Euros in the Bulgarian property market. In none of them did I take profit off the table in the run-up. Christ did I regret that. I am taking profit off the table in the cryptoasset market.Finally, at the end, you must scale out completely. Jesse Livermore\u2019s advice for a bull market:It is not my opinion that we are near the last eighth:Rule 5: The Honeybadger Trade: Buy the\u00a0Dip.Lots of influential actors\u200a\u2014\u200aGovernments, banks, regulators\u200a\u2014\u200afear Bitcoin and try to kill it on a regular basis. Bitcoin takes massive hit after massive hit, but it has always rode the punches and bounced back. Experienced traders have noted this and the advice is to buy the dip. This is the Honeybadger Trade.I like the idea of BTFD, as I truly believe in Bitcoin. BTFD! people on Twitter yell. But it has puzzled me for a while.There is a solution. Buy on margin at the dips. The beauty of this is that you do not need to add funds to your account, you merely avail yourself of the leverage already available. Use Bitmex Exchange.I permit myself to use margin in the specific case of BTFD.You need to get the timing of BTFD right. Beetcoin on Twitter provided this great analysis (thread) demonstrating that you should stay out for the first 48 hours of a dip and then BTFD.Do NOT Sell the\u00a0DipYou need to be clear, is this a dip or is it a secular bear market? I BTFDd relentlessly in the DOTCOM unravelling in 2000 and lost every penny in the end.If it is an established, secular bear market then face the music and STFD.Rule 6: Don\u2019t Overtrade. Lock up\u00a0CoinsI over-trade stupidly at at tiny whims when I am bored or drunk. A solution I have found is to lock coins away out of reach.One way is to keep Bitcoins and others in your hardware wallet. I use Trezor. It can store Bitcoin, Ethereum (+ all ERC-20 tokens), Ethereum Classic, ZCash, Litecoin, and Dash.Another way is to lock them into terms deposits at Cryptopia (applies only to Dotcoin). This gives you the added benefit of earning interest on coins at interest rates that just do not exist outside crypto (about 18% p.a.).Rule 7: Let Profits Run. Cut\u00a0Losses.This guy turned $10,000 into $6 million by letting his profits run during the Ethereum run-up in the first half of 2017.Run profits Cut Losses is hard to do exactly. In my P&L Sheet I focus on the 7d (Price Change over 7 days) to decide whether to re-allocate my portfolio according to this rule. I largely ignore 1 h and even 24 h\u00a0.Rule 8. Treat ICOs and other Examples of Herd Mentality with\u00a0CareIn general you are better off holding Ethereum than going through the mad, greedy, FOMO process of buying ICOs.But ICOs or coins newly released on the exchanges can be great investments. Beetcoin played the IOTA new release on Bitfinex like a master. He turned 10 Bitcoin into more than 200 Bitcoin. He bought the $IOT Over the Counter (OTC) some time before Bitfinex listed it. He was ahead of the herd.Rule 9 Do Your Own Research. Examine Micro-Caps.I respect this strategy.I bought Elastic $XEL at the obscure Heat exchange. It was rather difficult discovering how to buy it because I was in this case ahead of the herd where the path was not well defined. In the end I bought it at a high price (average 31,367 Satoshis, should have got them at 25,000 Sats) as I got scammed over at Heat by a predator (Arsonic @Ars0nic on Twitter) playing the order book. We\u2019ll see how that plays out. I think the excessive price I paid will not matter too much.Rule 10 Be Careful as Hell with LeveragingObviously leveraging can work, as with the guy referenced above who has made $6 million relentless buy Ethereum on leverage since December 2016.I take out the rare leveraged position at Bitmex Exchange.It can also go horribly wrong when margin calls occur across the mass market.That said, those who lost everything were not the brightest traders. They could have avoided that by using judiciously set Stop-Limit orders, rather than plain Stop orders.So that is the Ten Rules.If you liked this please Clap and Follow me on Twitter: @ BambouClub", "responses": "26"}, {"title": "", "author_name": "", "link": "https://medium.com/futuresin/bitcoin-might-be-the-crypto-gold-but-ethereum-is-the-crypto-silicon-f4f4153580d1?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "", "responses": ""}, {"title": "Comparison of Ethereum, Hyperledger Fabric and\u00a0Corda", "author_name": "Philipp Sandner", "link": "https://medium.com/@philippsandner/comparison-of-ethereum-hyperledger-fabric-and-corda-21c1bb9442f6?source=search_post", "post_date": "Jun 25, 2017", "readtime": "10 min read", "upvotes": "4.5K", "content": "Comparison of Ethereum, Hyperledger Fabric and\u00a0CordaPhilipp SandnerBlockedUnblockFollowFollowingJun 25, 2017Authors: Martin Valenta, Philipp Sandner.Download the article as PDF file. More information about the the Frankfurt School Blockchain Center on the Internet, on Twitter or on Facebook.With this paper, we provide a brief analysis of the most notable differences between the distributed ledger technologies (DLT) Hyperledger Fabric, R3 Corda and Ethereum. Our intention is to give decision makers new to DLT guidance for what use cases Hyperledger Fabric, Corda and Ethereum are most suitable.Three different frameworksFrom the white papers of Hyperledger Fabric, R3 Corda (in the following only referred to as Fabric and Corda, respectively) and Ethereum it becomes obvious that these frameworks have very different visions in mind with respect to possible fields of application. Development of both Fabric[i] and Corda[ii] is driven by concrete use cases, whereas Corda\u2019s use cases are drawn from the financial services industry. Consequently, this is where Corda sees its main field of application. In contrast, Fabric intends to provide a modular and extendable architecture that can be employed in various industries, from banking and healthcare over to supply chains. Ethereum also presents itself as utterly independent of any specific field of application.[iii] However, in contrast to Fabric, it is not modularity that stands out but the provision of a generic platform for all kinds of transactions and applications. Table 1 provides a summary of the three frameworks.Table 1: Comparison of Ethereum, Hyperledger Fabric and\u00a0CordaParticipation of\u00a0peersWith conventional central data storage, only a single entity, the owner, keeps a copy of the underlying database, e.g. a ledger. Consequently, this entity controls what data is contributed and what other entities are permitted to contribute. With the advent of DLT this radically changes in favor of distributed data storage where multiple entities hold a copy of the underlying database and are naturally permitted to contribute. All entities that participate in distributed data storage form a network of so-called nodes or peers. Due to distributed data storage, the difficulty arises to ensure that all nodes agree upon a common truth, e.g. the correctness of a ledger, as changes made by one node have to be propagated to all other peer nodes in the network. The result of arriving at a common truth is called consensus among nodes and is described below.With respect to participating to consensus, there are two modes of operation: permissionless and permissioned. If participation is permissionless, anybody is allowed to participate in the network. This mode is true for Ethereum as a public blockchain. On the other hand, if participation is permissioned, participants are selected in advance and access to the network is restricted to these only. This is true for Fabric and Corda. The mode of participation, permissionless or permissioned, has a profound impact on how consensus is reached.ConsensusEthereum. With Ethereum, all participants have to reach consensus over the order of all transactions that have taken place, irrespectively of whether a participant has taken part in a particular transaction or not. The order of the transactions is crucial for the consistent state of the ledger. If a definitive order of transactions cannot be established there is a chance that double-spends might have occurred, that is, two parallel transactions transfer the same coin to different recipients, thus making money out of thin air. As the network might involve mutually distrusting and anonymous parties, a consensus mechanism has to be employed that protects the ledger against fraudulent or adverse participants that attempt double-spends. In the current implementation of Ethereum, this mechanism is established by mining based on the proof-of-work (PoW) scheme. All participants have to agree upon a common ledger and all participants have access to all entries ever recorded. The consequences are that PoW unfavorably affects the performance of transactions processing.[v] Concerning the data stored on the ledger, even though records are anonymized, they are nevertheless accessible to all participants, which is problematic for applications that require a higher degree of privacy.In contrast to Ethereum, Fabric\u2019s and Corda\u2019s interpretation of consensus is more refined and does not merely boil down to mining based on PoW or a derivative thereof. Due to operating in a permissioned mode, Fabric and Corda provide a more fine-grained access control to records and thus enhance privacy. Furthermore, a gain in performance is achieved as only parties taking part in a transaction have to reach consensus.Fabric. Fabric\u2019s understanding of consensus is broad and encompasses the whole transaction flow, starting from proposing a transaction to the network to committing it to the ledger.[vi] Furthermore, nodes assume different roles and tasks in the process of reaching consensus. This contrasts to Ethereum where roles and tasks of nodes participating in reaching consensus are identical.Within Fabric, nodes are differentiated based on whether they are clients, peers or orderers.[vii] A client acts on behalf of an end-user and creates and thereby invokes transactions. They communicate with both peers and orderers. Peers maintain the ledger and receive ordered update messages from orderers for committing new transactions to the ledger. Endorsers are a special type of peer, whereas their task is to endorse a transaction by checking whether they fulfill necessary and sufficient conditions (e.g. the provision of required signatures). Orderers provide a communication channel to clients and peers over which messages containing transactions can be broadcasted. With respect to consensus in particular, the channels ensure that all connected peers are delivered exactly the same messages with exactly the same logical order.At this point, the problem arises that there might occur faults in the delivery of messages when many mutually untrusting orderers are employed. As a consequence, a consensus algorithm has to be used in order to reach consensus despite faults, e.g. inconsistent order of messages, thus making the replication of the distributed ledger faults tolerant. With Fabric, the algorithm employed is \u201cpluggable\u201d, meaning that depending on application-specific requirements various algorithms can be used. For example, in order to deal with random or malicious replication faults as outlined above a variant of the Byzantine fault-tolerant (BFT) algorithms could be used. Furthermore, channels partition message flows, meaning that clients only see the messages and associated transactions of the channels they are connected to and are unaware of other channels. This way, access to transactions is restricted to involved parties only with the consequence that consensus has only to be reached at transaction level and not at ledger level as with Ethereum.The roles of nodes outlined above are now described in the context of the transaction flow: A client sends a transaction to connected endorsers in order to initiate an update of the ledger. All endorsers have to agree upon the proposed transaction, thus some sort of consensus has to be reached regarding the proposed ledger update. The client now successively collects approval of all endorsers. The approved transaction is now sent to connected orderers which again reach consensus. Subsequently, the transaction is forwarded to peers holding the ledger for committing the transaction.Without going further into detail, it becomes clear that Fabric allows fine-grained control over consensus and restricted access to transactions which results in improved performance scalability and privacy.Corda. Similar to Fabric, consensus in Corda is also reached at transaction level by involving parties only. Subject to consensus is transaction validity and transaction uniqueness[viii]. Validity is ensured by running the smart contract code (smart contracts are described in detail below) associated with a transaction, by checking for all required signatures and by assuring that any transactions that are referred to are also valid. Uniqueness concerns the input states of a transaction. Specifically, it has to be ensured that the transaction in question is the unique consumer of all its input states. In other words, there exists no other transaction that consumes any of the same states. The reason for this is to avoid double-spends. Consensus over uniqueness is reached among participants called notary[ix] nodes, whereas the employed algorithm is \u201cpluggable\u201d as with Fabric. So once again a BFT algorithm might be used.Smart contractsThe term \u201csmart contract\u201d causes considerable misunderstanding when first encountered as it evokes the idea of some sort of contract that intelligently acts on one\u2019s behalf. The contract\u2019s nature, however, remains vague, but intuitively appears to be linked to legal matters. That said, focal contracts are neither smart in the sense that they are e.g. driven by artificial intelligence, at least not yet, nor do they generally encode obligations and rights that are legally binding. Clark and colleagues[x] provide a useful terminology by highlighting two different ways the term \u201csmart contracts\u201d is commonly used. The first refers to smart contract code, the second to smart legal contracts, two distinctions that prove to be beneficial in the context of this comparison.Smart contract code simply denotes software written in a programming language. It acts as a software agent or delegate of the party that employed it with the intention that it fulfills certain obligations, exercises rights and may take control of assets within a distributed ledger in an automated way. Thus, it takes on tasks and responsibilities in the distributed ledger world by executing code that models or emulates contract logic in the real world, though its legal justification may be unclear.All DLTs feature smart contracts in the sense of smart contract code that can be written in Go or Java for Fabric[xi], in Solidity[xii] for Ethereum and in Java or Kotlin for Corda[xiii]. In Fabric, the term \u201cchaincode\u201d is used as a synonym for smart contract. As an illustrative example, the reader is reminded of the usage of a smart contract code in the consensus mechanism of Corda in order to ensure transaction validity. However, there is a notable difference between Fabric and Ethereum on the one hand and Corda on the other that is connected to the second way the \u201csmart contracts\u201d term is used.In Corda, smart contracts not only consist of code but additionally are allowed to contain legal prose. Thus above smart legal contracts are legal prose that are formulated in a way that they can be expressed and implemented in smart contract code. The rationale behind this is to give the code legitimacy that is rooted in the associated legal prose. Such a construct is called Ricardian Contract[xiv]. At this point, it again becomes clear that Corda was explicitly designed to account for the highly regulated environment of the financial services industry. Both Fabric and Ethereum lack this feature.Built-in currencyAnother noteworthy difference is that Ethereum features a build-in cryptocurrency called Ether. It is used to pay rewards to nodes that contribute to reach consensus by mining blocks as well as to pay transaction fees. Therefore decentralized apps (DApps) can be built for Ethereum that allow monetary transactions. Furthermore, a digital token for custom use cases can be created by deploying a smart contract that conforms to a pre-defined standard.[xv] This way, own currencies or assets can be defined.Fabric and Corda do not require a build-in cryptocurrency as consensus is not reached via mining. With Fabric, however, it is possible to develop a native currency or a digital token with chaincode.[xvi] With Corda, a creation of digital currencies or tokens is not intended.[xvii]Summary: customized vs. generic\u00a0platformTo sum up, the examined DLTs span a continuum. On the one side, there is Fabric and Ethereum. They both are highly flexible, but in different aspects. Ethereum\u2019s powerful smart contracts engine makes it a generic platform for literally any kind of application. However, Ethereum\u2019s permissionless mode of operation and its total transparency comes at the cost of performance scalability and privacy. Fabric solves performance scalability and privacy issues by permissioned mode of operation and specifically by using a BFT algorithm and fine-grained access control. Further, the modular architecture allows Fabric to be customized to a multitude of applications. An analogy to a versatile toolbox can be drawn.Corda is located at the other end. It has been consciously designed as DLT for the financial services industry. Most notably, it takes the highly regulated environment into account by augmenting smart contracts with legal prose.Apparently, Corda\u2019s focus solely on financial services transactions simplified its architectural design compared to Fabric. Therefore, it might offer a more out-of-the-box experience. However, it might be possible that Fabric, due to its modularity, can be tailored to resemble Corda\u2019s feature set. Efforts exist that seek to integrate Corda into the Hyperledger project. Corda therefore cannot be seen as a competitor to Fabric but more as a complement.RemarksIf you like this article, we would be happy if you forward it to your colleagues or share it on social networks.Download the article as PDF file. More information about the the Frankfurt School Blockchain Center on the Internet, on Twitter or on Facebook.Martin Valenta is blockchain engineer and consultant at the Frankfurt School Blockchain Center. You can contact him via mail (martin.valenta@gmx.net). Prof. Dr. Philipp Sandner is head of the Frankfurt School Blockchain Center. You can contact him via mail (email@philipp-sandner.de), via LinkedIn (https://www.linkedin.com/in/philippsandner/) or follow him on Twitter (@philippsandner).[i] https://docs.google.com/document/d/1Z4M_qwILLRehPbVRUsJ3OF8Iir-gqS-ZYe7W-LE9gnE/pub[ii] https://docs.corda.net/_static/corda-introductory-whitepaper.pdf[iii] https://github.com/ethereum/wiki/wiki/White-Paper[iv] e.g. https://github.com/jpmorganchase/quorum[v] Vukoli\u0107 M. (2016). The Quest for Scalable Blockchain Fabric: Proof-of-Work vs. BFT Replication, in: Camenisch J., Kesdo\u011fan D. (eds.) Open Problems in Network Security, iNetSec 2015, Lecture Notes in Computer Science, Vol. 9591, Springer.[vi] https://hyperledger-fabric.readthedocs.io/en/latest/fabric_model.html#consensus[vii] https://github.com/hyperledger/fabric/blob/master/proposals/r1/Next-Consensus-Architecture-Proposal.md[viii] https://docs.corda.net/key-concepts-consensus.html[ix] https://docs.corda.net/key-concepts-notaries.html[x] http://arxiv.org/abs/1608.00771[xi] http://hyperledger-fabric.readthedocs.io/en/latest/chaincode.html[xii] http://solidity.readthedocs.io/en/latest/[xiii] https://docs.corda.net/tutorial-contract.html[xiv] http://iang.org/papers/ricardian_contract.html[xv] https://www.ethereum.org/token[xvi] https://hyperledger-fabric.readthedocs.io/en/latest/Fabric-FAQ.html#chaincode-smart-contracts-and-digital-assets[xvii] https://discourse.corda.net/t/mobile-consumer-payment-experiences-with-corda-on-ledger-cash/966?source_topic_id=962", "responses": "26"}, {"title": "Build Your First Ethereum Smart Contract with Solidity\u200a\u2014\u00a0Tutorial", "author_name": "Pete Humiston", "link": "https://codeburst.io/build-your-first-ethereum-smart-contract-with-solidity-tutorial-94171d6b1c4b?source=search_post", "post_date": "Nov 12, 2017", "readtime": "24 min read", "upvotes": "5.2K", "content": "Build Your First Ethereum Smart Contract with Solidity\u200a\u2014\u00a0TutorialPete HumistonBlockedUnblockFollowFollowingNov 12, 2017So you wanna build a smart contract? Perhaps you want to understand how they work, maybe you want to build your own Dapp, maybe you want to launch the very first billion dollar ICO (sarcasm)... Regardless of your intentions, learning how smart contracts work is invaluable. The Ethereum platform possesses enormous potential to create Dapps that could change the way we interact on the web in the decades to come. While Ethereum deploys smart contracts that work much like a standard blockchain transaction, they yield a conditional statement that must be met before a function(s) is executed. Smart contracts can be used for voting, crowdfunding, blind auctions, multi-signature wallets and MUCH more.", "responses": "66"}, {"title": "Trading Cryptocurrencies\u200a\u2014\u200aBitcoin, Ethereum and\u00a0altcoins", "author_name": "Tack T.", "link": "https://hackernoon.com/trading-crypto-1705df5434ca?source=search_post", "post_date": "Jan 19, 2018", "readtime": "9 min read", "upvotes": "4.8K", "content": "Trading Cryptocurrencies\u200a\u2014\u200aBitcoin, Ethereum and\u00a0altcoinsTack T.BlockedUnblockFollowFollowingJan 19, 2018Binance\u200a\u2014\u200atrading application screenIf you are looking at this article, you probably are already doing, or interested in \u201cTrading Cryptocurrencies\u201d.In this article, I will share my method of \u201cLong-term hold with low maintenance day trading\u201d\u200a\u2014\u200astep-by-step.The method served me well so far\u200a\u2014\u200aHopefully it works for you!! (Oh, no guarantee of course)", "responses": "43"}, {"title": "How to mine Ethereum in 5\u00a0min", "author_name": "Assaf Elovic", "link": "https://hackernoon.com/how-to-mine-ethereum-in-5-min-3f3bc80d0c4b?source=search_post", "post_date": "Oct 20, 2017", "readtime": "6 min read", "upvotes": "4.4K", "content": "How to mine Ethereum in 5\u00a0minSurprisingly, all you need is an AWS EC2 instance to start mining Ethereum.Assaf ElovicBlockedUnblockFollowFollowingOct 20, 2017I\u2019m sure you\u2019ve already heard of the cryptocurrency craze way before reading this post. Cryptocurrencies are slowly and quietly revolutionizing the way financial systems and transactions work (and should work in my opinion).With Bitcoin hitting its $18K mark not awhile ago, a current total of $316B in market cap and hundreds of ICOs (Initial Coin Offering) conducted since August, it\u2019s sure to say there\u2019s a bubble in the cryptocurrency space. What\u2019s more, is that it doesn\u2019t seem this bubble is going anywhere, anytime soon.As you can see in the graph below, the total market cap of cryptocurrencies has grown from under $50B to over $150 in under a year!So what would be the best way to enter this space and enjoy the growth? I\u2019m not a cryptocurrency expert, however, from my research I\u2019ve found that the answer is pretty clear across all opinions:If you\u2019re looking for quick earnings, just invest in\u00a0coins.I highly recommend purchasing coins with the exchange Binance or Coinbase (if you just want Ethereum). Binance has by far the most variety of tokens to invest in, Coinbase has an amazing user experience and both are considered extremely secure. To purchase coins with Coinbase click here, or with Binance click here.To learn how and what other coins to invest in, read my latest post here.Personally, I\u2019m very interested in Ethereum, and have found an effortless way to start mining it quickly on AWS! This post will walk you through the process.But before we start, let\u2019s go over some basics. If you\u2019re already familiar with them, just scroll down.What is Ethereum?Ethereum is an open software platform based on the blockchain technology that enables developers to build and deploy decentralized applications. The advantage of Ethereum over Bitcoin, is that it can support many different types of decentralized applications.Ethereum has the second largest market cap after Bitcoin, and has gained massive growth in the last year with over 230% as you can see below:However, increasing growth in the price leads to an increasing demand for Ethereum mining and therefore to an increase in mining difficulty:If you were to start mining Ethereum in May, you\u2019d be seeing significantly higher earnings than if you start now.What is crypto\u00a0mining?Mining originates from the gold analogy of the cryptocurrency sphere. In simple, cryptocurrency mining is a process of solving complex math problems. \u201cMiners\u201d are people that spend time and energy solving these math problems. They provide the solution to the issuers, who verify it and reward the miners with a block of Ether. Intuitively, an increase in mining difficulty means it becomes harder to solve complex problems, and therefore to fewer rewards. We\u2019re at a current peak in Ethereum difficulty due to its very high demand and popularity.Is mining Ethereum still worth\u00a0it?As more miners join the Ethereum network, the harder it becomes to solve the problem, which leads to an increase in the mining difficulty. This is why it\u2019s currently costly to mine Ethereum. The returns are very low and equipment is still pretty expensive. However, as Ethereum price continues to rise, it could become worthwhile in the future.Nonetheless, Ethereum is reportedly switching to a proof-of-stake framework later this year, which means Ether mining could no longer be relevant. Take in mind, that this could also lead to a significant increase in Ethereum price.So you might consider purchasing some coins as well. As I\u2019ve stated above, Binance or Coinbase would be your best option in my opinion.If you\u2019ve reached this far and are still eager to mine Ethereum, let\u2019s get to it!UPDATE [5/5/2018]!Amazon Web Servers [AWS] has introduced their blockchain template for Ethereum and Hyperledger fabric. The templates allow users to create and launch secure blockchain network using open source frameworks in a fast and easy way. In addition, the template has a set of nodes that implement and responds to the RPC protocol. It also supports the EthExplorer and EthStats status page and Ethereum mining. For official documentation click here.Scroll down to continue with my original approach for mining Ethereum\u2026How to start your AWS Mining\u00a0instanceThe steps are pretty simple:Go to your EC2 console in AWS and change the zone to US East (N.Virginia). This zone happens to be the cheapest for the type of instance we\u2019ll be using, and also contains a community AMI that has all the required mining libraries already installed for instant use.Under Instances, select Spot Instances and click \u2018Request Spot Instances\u2019.Search for a community AMI called ami-cb384fdd and select it.Under Instance type choose g2.8xlarge.Review and Launch!How to start\u00a0miningTo start mining, you\u2019ll need an Ethereum wallet and to join a mining pool.To generate a wallet, simply go to https://www.myetherwallet.com and follow the steps. By the end of the process, you\u2019ll receieve a wallet address.We\u2019ll be using Dwarfpool for mining, which is rated in the top best mining pools. Feel free to use others if you like.Simply SSH to your instance and type:> tmux> ethminer -G -F http://eth-eu.dwarfpool.com/{WALLET ADDRESS}/{YOUR_EMAIL ADDRESS} --cl-local-work 256 --cl-global-work 16384Tmux allows you to keep a process running after closing your SSH connection.Ethminer is an Ethereum GPU mining worker. Entering your email address allows you to receive notifications on payouts. The other parameters are for mining optimizations.That\u2019s it!You should soon see a DAG file generated and right afterward, your mining should start. To view your stats, simply go to https://dwarfpool.com/eth and in \u2018Worker stats\u2019 enter your wallet address.", "responses": "33"}, {"title": "Getting Up to Speed on\u00a0Ethereum", "author_name": "Matt Condon", "link": "https://medium.com/@mattcondon/getting-up-to-speed-on-ethereum-63ed28821bbe?source=search_post", "post_date": "Aug 7, 2017", "readtime": "24 min read", "upvotes": "3.7K", "content": "Getting Up to Speed on\u00a0EthereumMatt CondonBlockedUnblockFollowFollowingAug 7, 2017Go from zero to \ud83d\udcaf without all the nonsense.Note: this article was written 1 year ago. It is very much still accurate and worth reading, and I encourage that, but be aware that the landscape has changed (it\u2019s been 10 years in crypto-time \ud83d\ude02).You should read this blog post if:You\u2019re a professional software engineerYou want to have a deep working understanding of Ethereum and the related ecosystem.Prerequisites:You understand the concept of a blockchain and how Bitcoin uses it to create a trustless digital currency. No? Watch this short video or watch this long video. Hint, you should probably watch the long one.You\u2019re a professional software engineer. Seriously, I mean, nontrivial amounts of real-world software engineering experience. Understanding systems/architecture/math is a learning efficiency multiplier.Like a week of your free time. I told you we\u2019re skipping the nonsense.You understand the basic concept of a merkle tree and how it can be used to quickly verify information correctness.Note: you don\u2019t need to read the whitepapers, but you need to understand them. But it turns out that reading them is the fastest way to understand them. \ud83d\ude09I recommend reading the entirety of this post, absorbing the contents at a high level, and then diving into each link individually, over the course of a few days.You\u2019ll be surprised at how little of this technology is magic (read: none of it), despite the severe case of buzzword-itis the ecosystem has. Everyone is building off of the shoulders of giants; if you make a living as a professional software engineer you have the ability to understand all of these projects and technologies at a deep level. Just don\u2019t get distracted by the bullshit.", "responses": "31"}, {"title": "Pocket By GoNetwork Wins ETHWaterloo Hackathon\u200a\u2014\u200aThe World\u2019s Largest Ethereum Hackathon!", "author_name": "GoNetwork", "link": "https://medium.com/@gonetwork/we-won-ethwaterloo-hackathon-the-worlds-largest-ethereum-hackathon-2322670a7646?source=search_post", "post_date": "Oct 16, 2017", "readtime": "3 min read", "upvotes": "1.91K", "content": "Pocket By GoNetwork Wins ETHWaterloo Hackathon\u200a\u2014\u200aThe World\u2019s Largest Ethereum Hackathon!GoNetworkBlockedUnblockFollowFollowingOct 16, 2017ETHWaterloo represented the largest global Ethereum hackathon with over 400 participants coming from 32 countries, but it was the local Waterloo based GoNetwork team that stood atop the winners circle. The 32 hour hackathon saw the judging performed by such notable names in the blockchain community including; Vitalik Buterin, Jeff Coleman, Brian Bondy, Joseph Lubin, Dmitry Buterin to name a few. GoNetworks Team of Amit Shah, Rashid Khan and Xun Cai had 32 hours to produce a functional product and managed to deliver a mobile-first bluetooth based tap and pay system leveraging the Ethereum blockchain and was the only native mobile product amongst the 400 participants.Most notably, the judges recognised the true value of GoNetworks\u2019 Pocket Platform;GoNetworks\u2019 Pocket, named after pocket change, aims to solve a problem with financial literacy by implementing gamification, parental controls and transparency for youth leveraging the Ethereum blockchain. The offering allows parents to create assignable digital debit cards and claimable rewards for good behaviour such as decreased spending month to month and controlled spending across different categories (food, entertainment, etc.).Pocket was presented to everyone at ETHWaterloo including Joseph Lubin, the founder of Consensys; Joey Krug, the founder of Augur; Ryan Zurrer, a partner at Polychain Capital; and Vitalik Buterin, the founder of Ethereum. The team also had a pleasure of meeting some of the heavy hitters of the industry. Amir Bandeali, CO-FOUNDER & CTO of 0xPorject gave the team some great insights into the 0x platform and how it can be leveraged to build decentralized exchanges.More information about the Pocket platform can be found at the official ETHWaterloo\u2019s hackathon submission site https://devpost.com/software/pocket-t1fmg5At the end, the team was also interviewed by Robert Bent from TrueBit. He asked some very engaging questions. To find out what it was all about, make sure you keep an eye out\u200a\u2014\u200awe will be posting it soon!GoNetwork will continue to strive to bring consumer mass adoption and ongoing development of the Pocket platform will ensure that goal is met. With a history of delivering products at scale, the only way GoNetwork will Go, is UP! Get involved in our ICO\u200a\u2014\u200ahttps://gonetwork.coFollow Us On Twitter\u200a\u2014\u200ahttps://twitter.com/gonetwork_coJoin Us On Telegram\u200a\u2014\u200ahttps://t.me/joinchat/Geu7vA2LFdDv5RqxFYqCtw", "responses": "26"}, {"title": "10 Step Guide for Day Trading Bitcoin, Ethereum and\u00a0Litecoin", "author_name": "Kyle Hill", "link": "https://medium.com/@kaleazy/10-step-guide-for-day-trading-bitcoin-ethereum-and-litecoin-79123673957c?source=search_post", "post_date": "Sep 4, 2017", "readtime": "16 min read", "upvotes": "4.2K", "content": "10 Step Guide for Day Trading Bitcoin, Ethereum and\u00a0LitecoinTrading cryptocurrencies for\u00a0dummies.Kyle HillBlockedUnblockFollowFollowingSep 4, 2017Ethereum is up over 2,000% since the start of\u00a02017.Bitcoin is one of the most important inventions in all of human history. For the first time ever, anyone can send or receive any amount of money with anyone else, anywhere on the planet, conveniently and without restriction. It\u2019s the dawn of a better, more free\u00a0world.\u2014 Roger Ver, CEO Bitcoin.comOver Labor Day weekend (Sept 2017), needing a break from my startup Harvey, I had the choice of binge watching Narcos 3 on Netflix or taking a deep dive into cryptocurrencies. Since learning about the impressive $100M fundraise by Coinbase at a $1.6B valuation, I was been eager to understand their product suite a little better and discover where there might be a new income opportunities, so I jumped in and went deep.Disclaimer: I am not an expert in cryptocurrency day trading, nor do I pretend to be one. I am not offering financial advice. Please understand your own risk tolerance and be responsible with your hard-earned money.I started by wanting to know, in particular, if bitcoin was going to be the punchline of jokes like beanie babies in the 90s, and featured in Economics 101 classes as part of bubble theory. My quick conclusion: I don\u2019t believe the bitcoin hype is over-exaggerated.While there will be significant volatility in the price and valuation of bitcoin over the coming years, I strongly believe it and the entire asset class of cryptocurrencies will become a core part of the financial system within 3 years or less. There is enormous risk in trading these assets\u2014more so than gold, REITS and other commodities\u2014but the global market capitalization of cryptocurrencies ($148 billion today) I expect to pass $1 trillion by 2019.Many of today\u2019s coins will die off, and the ones that survive will be colossal in significance, similar to the way Amazon emerged from the shadows of the dotcom bust in 2001. If you don\u2019t believe this core thesis, this article might not be for you, but I\u2019d love to hear from you.What I\u2019m going to explain is a 10-step guide on how to research, buy and trade some of the major cryptocurrencies and enjoy some of their growth.1. Learn how blockchain worksGoldman Sachs says blockchain technology \u201chas the potential to redefine transactions\u201d and will \u201cchange everything\u201d. But anyone who claims to fully understand how blockchain works, and is not named Satoshi Nakamoto, is probably lying to you. And anyone who claims to be Nakamoto himself, is probably also lying to you. Fortunately, just like the internet, you don\u2019t need to know how blockchain works to use it.But here are the basics\u2026 a blockchain is a continuously growing list of records, called blocks, which are linked and secured using cryptography. By design, blockchains are inherently resistant to modification of the data, and serve as a public ledger of transactions between two parties. To date, the best analogy I\u2019ve heard for blockchain compares it to a Google Doc:\u201cThe traditional way of sharing documents with collaboration is to send a Microsoft Word document to another recipient, and ask them to save the document, make revisions to it, and send it back. The problem with this scenario was that you needed to wait to receive a return copy before you could see or make changes to the document. You are locked out of editing it until the other person is done with it. That\u2019s how banks work today\u2014they maintain money balances and transfer money by briefly locking access to the account (or decreasing the balance) while they make the transfer, then they update the other side, then re-open access (or update the balance).With a Google Doc, all parties have access to the same document at the same time, and the most up-to-date version of that document is always visible and editable to all parties. This real-time shared Google Doc is just like a distributed blockchain ledger. The \u201creal version\u201d of the transaction is verified by analyzing all the available blocks on multiple computers and taking \u201cthe average\u201d.The decentralized and transparent nature is what makes blockchain highly secure and almost impossible to hack, because a hack to one ledger would cause a discrepancy in the entire network that will be ignored. Functionally, to hack the ledger one would have to hack all the computers on a network at the exact same time in order to change the \u201caverage\u201d. For a currency like bitcoin, this would mean millions of computers. So the larger the network, the more stable the currency.Current payment systems require third-party intermediaries like Google, Facebook, banks and government agencies to process transactions, and many charge high fees for doing so. A blockchain system, however, allows for faster direct payments between individuals and can even support micropayments.\u201cBlockchain solves the problem of manipulation. In the West, people trust Google, Facebook, and their banks. But around the rest of the world, people don\u2019t trust their corporations as much. Blockchain opportunities are the highest in the countries that haven\u2019t reached that level [of trust]\u00a0yet.\u201d\u2014Vitalik Buterin, founder of\u00a0Ethereum2. Learn the top currenciesBitcoin is here to stay. But the world of virtual currencies is getting crowded with many other \u201caltcoins\u201d. There are over 100 types of cryptocurrency that sell for more than $1 USD, according to CoinMarketCap. Even more are in penny-stock range, but I don\u2019t recommend trading them right now.There are over 100 cryptocurrencies trading over $1 USD, with a market cap just under $150 billion. Bitcoin accounts for over 50% of the entire market. Source: CoinMarketCapWhat\u2019s important to note is that bitcoin accounts for about 50% of the entire cryptocurrency market, and has the highest volume. It is undoubtedly the most important currency today. You\u2019ll also notice a difference between the original version of bitcoin, Bitcoin Classic (BTC), and a newer version of bitcoin, Bitcoin Cash (BCH). Bitcoin Cash is a spinoff off of the original bitcoin blockchain. I\u2019m not going to get into the technical differences between Bitcoin Classic and Bitcoin Cash, but understand they are separate currencies. So far, Bitcoin Classic seems to be favored by the public over Bitcoin Cash, and has an 8X higher market cap. But when people say \u201cbitcoin\u201d (lowercase) they could be referring to to either currency.The other two currencies I would pay attention to are Ethereum (~40% the size of Bitcoin, also known as \u201cEther\u201d), and the smaller and more volatile Ripple and Litecoin. Despite a smaller market cap, Litecoin enjoys higher trading volume than Bitcoin Cash and Ripple, likely because it\u2019s one of the three currencies accepted by the #1 digital currency wallet, Coinbase.3. Understand all inherent\u00a0risksBitcoin is more volatile than practically any other type of asset, including gold or the stock market. Cryptocurrency is still a young technology, and faces many challenges. While I believe the overall trend for bitcoin is upwards, trading this currency comes with considerable risk. Bitcoin prices are highly impacted by public sentiment about the currency. It will continue to fluctuate as companies and financial institutions make decisions of how to incorporate (or not incorporate) it into their businesses and workflow. It\u2019s also highly sensitive to regulatory changes, as I will get to in a minute.To give an example, in early June 2017, Bitcoin was trading at $2,983, before losing 30% of its value a month later in July\u2014crashing to $1,992. Then it climbed up to $4,764 in September, posting an impressive 139% gain.What goes up must come down, eventually.Then as I sit here and write this on September 3rd, 2017, the Chinese government announced a few hours ago that they are banning all organizations and individuals from raising funds through Initial Coin Offering (ICO). They barred all banks and financial institutions from doing business related to ICO trading. This is significant news, although not a surprise to many people, as representatives from the People\u2019s Bank of China and China Securities Regulatory Commission had previously criticized ICOs as an unauthorized fundraising tool that may open the door to financial scams. (I will explain ICOs in the last section).The news of the ICO ban in China had bitcoin trading down 12%, Ethereum down 23% and Litecoin down as much as 32%, as shown below. So don\u2019t go throwing your entire savings account into Litecoin just yet, and being bullish long-term doesn\u2019t mean it will get there smoothly.High risk, high reward in trading cryptocurrencies.There is also risk inherent to the exchange itself. Just like the cash in your wallet, the safety of your bitcoins or other currencies depend on your own diligence. While your bitcoins cannot disappear, the transactions are permanent and can only be refunded by the recipient. This means you should only do business with people and organizations you know and trust, or who have an established reputation.Remember, bitcoin transactions are stored publicly and permanently on a network, which means that anyone can see the balance and transactions of any bitcoin address. However, only the bitcoin exchanges and/or the parties involved in the transaction can attach the addresses to a real person. So for the most part, the transactions are anonymous.Other trustworthy exchanges I considered before deciding on Coinbase were (in no particular order): Bitsquare, Bitstamp, ShapeShift, Kraken, Poloniex, CoinMamma and Gemini.For a full list of exchanges by country, click here.4. Read bitcoin news every\u00a0dayDon\u2019t miss a day learning about bitcoin and other cryptocurrencies.Here are some great websites to bookmark for bitcoin news and discussion boards. The combined content here could keep you busy for at least a year.CoindeskBitcoin MagazineBusiness InsiderThe StreetCoin TelegraphCryptocoin NewsQuoraCNBCBrave New CoinRedditBitcoin TalkCrypto InsiderIf you\u2019re on Twitter, I also created a list of bitcoin influencers that you can subscribe to and read their content. I find this to be the most efficient way of consuming information quickly before making trades.Bitcoin Influencers on Twittertwitter.com/kaleazy news and entertainment on bitcoin, altcoins, cryptocurrencies and all the live commentary. We got you covered!5. Open a brokerage accountCoinbase is one of the most trusted and well-known exchanges for buying and selling Bitcoin, Ethereum and Litecoin. They are essentially a digital wallet for your cryptocurrencies, and their iPhone and Android app make sending currency and tracking prices super simple.Coinbase\u2019s iOS app for buying/selling bitcoin.What I like about Coinbase is they meet all the regulatory requirements in the countries they operate, and they have two distinctly separate but integrated products: Coinbase for buying and selling bitcoin or sending them to friends, and Global Digital Asset Exchange (GDAX) for more advanced and precise trading.Previously, the GDAX was called the Bitcoin Exchange, but mid-2016 they decided to rebrand. From a product standpoint, you can tell they built GDAX with their own engineers, as the user experience is similar to Coinbase.You can signup for Coinbase using my referral code, and you\u2019ll get $10 in free bitcoin to play around with.I would start by making a Coinbase account, then graduate over to GDAX once you feel comfortable. You can instantaneously transfer currencies between the two exchanges for free, which is really nice.6. Fund your\u00a0accountOnce you create an account on Coinbase (or another exchange), you will need to verify your identity by uploading a picture of your drivers license or passport. This only takes a few minutes, then you can fund the account.To add a new payment method, go to \u201cSettings\u201d and \u201cPayment Methods\u201d on the dashboard. You can choose a bank account or a credit/debit card. The bank account has higher limits, but takes longer for the funds to settle. The credit/debit card has lower limits, but the transactions happen instantly. If you go bank account route, you will need to verify two deposit amounts on your account. I personally did both\u2014I funded the account with a few grand from my checking account, and thanks to my impatience I also put few grand on my credit card just so I could get started right away.Keep in mind, Coinbase charges a 3.99% processing fee for all credit card transactions. I\u2019d recommend using a credit card that gives you at least 3% cash back so you can offset some of the fees (I\u2019ll cover the fee structure in more detail in the next section). You can use PayPay for selling currency, buy not buying currency; for PayPal the funds are available instantly but have lower payout limits. The bank account is usually your best bet.7. Buy and sell some\u00a0bitcoin!Once your account is funded, you can go ahead and make your first purchase. Remember, you do not have to purchase coins in full units. You can buy coins in fractions as low as one hundredth of a millionth, or about less than one-tenth of a cent at current prices. That makes bitcoin and other cryptocurrencies easy targets for speculation.Coinbase does not charge to transfer bitcoin from one user to the other, which is the point of blockchain. But if you want to transfer money to or from an outside exchange, such as a US bank account, Coinbase charges a small conversion fee. The charge is 1.49% with a $0.15 minimum if you are using a bank account and 3.99% if you are using a credit/debit card. I\u2019d try to avoid funding with a credit card unless you get ample reward points to offset the higher fees.For a full breakdown of their fees, click here.Source: Coinbase.comLastly, if you choose the bank account payment method, the funds take 4\u20135 days to settle, and you are locked into the market price of BTC at the time of purchase. In the case above, I am buying 0.2233 BTC at a price of $4,411.93, totaling $985.32, and I\u2019m losing $14.68 in fees. I am guaranteed that price regardless how long the funds take to settle. Coinbase essentially buys the bitcoin at that time and saves them for you in a virtual vault, and releases them in your account once they receive the funds from your bank.8. Graduate to\u00a0GDAXOnce you\u2019ve bought and sold a few bitcoin on Coinbase, you should graduate to the big leagues. Coinbase\u2019s more advanced trading platform is called the Global Digital Asset Exchange (GDAX). It uses the same login and password as Coinbase, and you can easily transfer currency between the two platforms, which is really convenient. The GDAX features a pretty interface with real-time pricing data, order book, charting tools, trade history, and a simple buy/sell order process so you can at least pretend to be a pro.GDAX offers institutions and professional traders the ability to trade a variety of digital currencies on a fully regulated U.S. based exchange with lower transaction fees.Once you\u2019re comfortable with GDAX, you probably won\u2019t use Coinbase anymore. GDAX charges lower transaction fees than Coinbase\u2014ranging from 0.1% to 0.25% for \u201ctakers\u201d (buyers) and 0% fee on \u201cmakers\u201d (sellers), with the fees varying based on monthly trade volume.The advantage of the Coinbase system, however, is that it is more simple, instant, and your order is guaranteed to fill, in exchange for a higher fee. On the GDAX market, the \u201cmaker\u201d order is free, but you risk the order not getting filled and having to set a new price.Below is a short Reddit post comparing GDAX vs Coinbase.9. Study charts to find\u00a0trendsIf you, like me, believe that bitcoin and the entire market capitalization of cryptocurrencies will increase in value over time, then the goal is to collect as many coins as possible, getting in at the right prices, and build a strong diversified portfolio of crypto assets that you can hold.In order to do this, you must \u201cbuy the lows\u201d and let the profits run. I\u2019d recommend entering and exiting positions gradually in case the lows get lower or the highs get higher. Avoid buying/selling in big emotional or reactionary swoops, and try not to trade more than a few times a week to keep fees down and give your bets a chance to perform.One way to tell if a stock price is over/undervalued is by reading moving averages. Moving averages are plotted on stock charts to help smooth out volatility and point out the direction a stock may be trending. As short-term moving averages (red line below) cross over long-term moving averages (black line), this sometimes is followed by accelerated movement in the price. Also pay attention to spikes in trade volume, as this may imply that strong sentiments of fear or excitement just entered the market.There are many other strategies traders use to predict trends, which I won\u2019t get into today. These include Head and Shoulders, Trend Lines, Support and Resistance patterns and Candlesticks. Here\u2019s a great article explaining each of these in a little more detail. Within the GDAX dashboard, you will find a price chart that looks similar to the one above, accompanied by four other sections in the same viewport:The Price Chart in GDAX shows historical prices and volume data in two views: a line chart and candlestick chart (recommended) over various historical time frames.The Depth Chart right below the Price Chart shows a detailed visual representation of the bid and ask prices over a range of prices. You can increase or decrease the price range for the chart by using the plus or minus buttons at the top of the chart. The price in the middle of the chart is the midpoint price between the best bid and ask prices. Moving the cursor over the prices will allow you to select a price in which you can create an order. Clicking the price will fill in the buy/sell price for you automatically in the left sidebar. This chart is a useful to see how close buyers are from sellers in their ask/bid prices; the greater the surface area under the curve, the more bids there are at that price.The Order Book shows a live view of open orders on the entire Coinbase exchange, in what\u2019s called an order ladder. There are three columns that show the market size, price and order size of each order. You can click any row and it will fill in the buy/sell price for you automatically in the left sidebar. Once you confirm the order, it will immediately show up on the order ladder and attempt to get filled.The Open Orders section shows status of each of your open orders. It also shows filled orders. You can easily cancel any order at any time.The Trade History on the right shows all completed orders.On the upper-left (below) you will see a dropdown to change the currency, with nine different options. The most common views will be BTC/USD (Bitcoin), ETH/USD (Ethereum) and LTC/USD (Litecoin).GDAX allows users to see the Price Chart, Depth Chart, Order Book, Open Orders and Trade History all in one\u00a0view.The primary goal of these charts is to determine the general direction of the currency over a specified time period, and the prices at which you would be willing to buy and/or sell the currency before it takes a correction.It\u2019s important to specify a time horizon for your investment\u2014such as short term (7\u201314 days), medium term (1\u20132 months) or long-term (6\u201312 months). I don\u2019t recommend trading on time horizons shorter than 7 days unless you have access to margin (you probably don\u2019t) or have large amounts of money to play with; otherwise, the fees will be too high relative to the returns.10. Set limit orders, and be\u00a0patient.Once you are ready to place an order, you will accept the market price or set what\u2019s called a limit order. Limit orders provide investors and traders with a means of precisely entering a position without being victim of fluctuating prices. For example, a buy limit order can be place for $2.40 when a stock is trading around $2.50. If the price dips to $2.40, the order is automatically executed. If it\u2019s a GTC (good \u2019til canceled) order, it will remain open until manually cancelled by the investor.Once the limit order is set, be patient. Give the price time to fluctuate\u2014testing highs and lows\u2014and see if your limit order catches a buyer (or seller). There is no hurry to cancel you limit orders, so resist the urge to rapidly change your limit order prices. Many experienced investors will set multiple limit orders at consecutively lower prices to take advantage of a big selloff or take some profits when the price tests a new high. Limit orders are your best friend, use them.There are other more advanced limit order options you can make such as IOC, FOC and Stop Orders that are explained in this article below.Entering Market, Limit and Stop OrdersOn the order panel, you can choose to place a market, limit, or stop order. A market order will execute immediately at\u2026support.gdax.comConclusionIn future articles I will discuss in more detail some of the strategies I\u2019m using to set my limit orders. But hopefully this article serves as a comprehensive guide to getting started trading cryptocurrencies on an exchange.One advice I\u2019d give beginner traders is to avoid falling for ICOs, or Initial Coin Offerings, in the short term and stick with the more established currencies like Bitcoin, Eurotheum and Litecoin. According to MarketWatch, an ICO is \u201ca fundraising means in which a company attracts investors looking for the next big crypto score by releasing its own digital currency in exchange.\u201d The ICO is similar to a initial public offering (IPO), but with a crypto twist and (as of now) no regulatory hoops to jump through.A total of $1.6 billion have been globally raised via ICOs already, but as I mentioned, ICOs were recently banned in China, so the Securities and Exchange Commission (SEC) is receiving immense pressure to propose similar rules to regulate the ICO phenomenon as well. So any US-based companies planning their ICO might want to reconsider. You can find a comprehensive list of upcoming ICOs on CoinSchedule.com, although I recommend that you look but don\u2019t touch. Now it not the time for ICOs.Chamath Palihapitiya, founder of venture fund Social Capital, in response to China\u2019s ban on\u00a0ICOs.For more information about ICOs in the US market, check out \u201cAround the Coin\u201d fintech podcast with Faisal Khan and Mike Jones, CEO of Science Inc, who talks about their $50M blockchain fund ICO coming later this year.Bitcoin, Ethereum and Litecoin have enjoyed some of the highest returns in modern investment history (Litecoin +1,762.97% since last year), so there\u2019s really no reason not to trade them. If you\u2019re patient and disciplined, you will have a good shot at making money, or at least have some fun trading.If you have any questions, hit me up on Twitter or ask one of the members of my Bitcoin Influencers list, as they\u2019re far more experienced than I am.Don\u2019t own bitcoin yet? Here\u2019s $10 in free BTC. \ud83d\udcb0Happy trading!", "responses": "42"}, {"title": "The Future of Ethereum Doesn\u2019t Have\u00a0Wallets", "author_name": "Taylor Monahan", "link": "https://medium.com/mycrypto/the-future-of-ethereum-doesnt-have-wallets-232fcee708bf?source=search_post", "post_date": "Feb 26, 2018", "readtime": "12 min read", "upvotes": "6.9K", "content": "The Future of Ethereum Doesn\u2019t Have\u00a0WalletsTaylor MonahanBlockedUnblockFollowFollowingFeb 26, 2018This is a talk I did for the first time at \u201cAbove Blockchain\u201d this past weekend (2/24/18). It was put together in a few hours on Friday night and it puts into words some things I\u2019ve been thinking about lately. The ideas explored here are much more fleshed out than they were initially, but I still feel they are in the \u201cseedling\u201d stage of ideation and implementation. I welcome all comments on what I\u2019ve shared here to help me expand my thinking and force the idea to become more robust.\u00a0:)As the title suggests, I\u2019m going to talk a bit about why the future of Ethereum doesn\u2019t have wallets.Now this may seem a bit odd, seeing as I have spent the last two and a half years building and scaling an ether wallet.Like most things in this fast-moving space, the tools that are most useful and most needed today are not necessarily the tools that are most useful and needed tomorrow.Let\u2019s start by talking about what exactly a wallet is\u2026which is actually a bit more complicated than you may think.The term wallet is confusing, and people bring a lot of assumptions about this word depending on their experiences inside and outside the crypto-space.Most people start on Coinbase and see Coinbase as a wallet. When those people moved off Coinbase in order to buy tokens or participate in ICOs, we had a terrifically hard time breaking all of their preconceived notions. We spent a lot of time re-training people\u2019s brains to help them comprehend that we don\u2019t hold their funds and we cannot recover their private keys and passwords.When we integrated with Ledger & TREZOR\u2019s Hardware Wallets and Metamask it only became more confusing for new users entering the space.In Andreas Antonopoulos & Gavin Wood\u2019s new book, Mastering Ethereum, they capture what a wallet is and the confusion it creates beautifully:\u201cAt a high level, a wallet is an application that serves as the primary user interface\u2026\u201d\u201cA common misconception about Ethereum is that Ethereum wallets contain ether or tokens. [They are actually stored on the blockchain.] So an Ethereum wallet is actually a keychain.\u201dI strongly prefer the word keychain as it is more representative of what is happening, and it perhaps has less preconceived notions that we would have to break.So, while Antonopoulos & Wood describe it as a user interface (which is how we describe it as well), the reality is new users entering this space do not inherently get this.If we are trying on making the blockchain usable for the masses, we simply can\u2019t have such confusion up front.So, why are wallets such an integral part of the ecosystem today?Right now everything is still speculative. The reason you likely interact with the blockchain today is almost certainly speculative and, even if you aren\u2019t a trader, you are still primarily interacting with only the \u201cmoney\u201d aspect of the blockchain.You are holding funds. You are sending funds. You\u2019re sending them to and from an exchange. And so forth.Until CryptoKitties, Ethereum was almost exclusively used to facilitate ICOs\u200a\u2014\u200awhich is speculating on the viability of tokens.But, if we think about the future, what is the primary use-case for Ethereum? What should it be used for?This is one of the first infographics I saw in the very early days of Ethereum and it struck a cord with me. It uses WhatsApp and a decentralized version of WhatsApp to explain the potential of Ethereum. These are the types of things that got me excited before Ethereum launched. It\u2019s the world that the blockchain enables. It\u2019s decentralized WhatsApp. Decentralized Twitter. Decentralized Uber.So how do we ensure that these dapps are easily usable?It\u2019s easy to ask ourselves \u201cwhat role does the wallet play in the decentralized future,\u201d but we should really ask \u201cwhat role does the wallet play in centralized apps?\u201d Because if we\u2019re going to have any chance at replacing the current apps and centralized services, it must be easy for the end user.So, what role does the wallet play in a traditional app? Almost none. The payment portions of the app are usually small, tucked away under settings. You spend the least amount of time on any page that has to do with payment.This is because when I go on Airbnb or Uber, I\u2019m not opening that app with the goal of paying someone for their place or for a ride. My goal is to have a place to stay for my next conference or to get a ride from the bar to my house, and it\u2019s easy forget that when we\u2019re thinking about decentralized apps in this space. So much of the conversation is around money - around these new coins and tokens. The payment/money side of things, especially with the utility tokens, should be the smallest part of it.Furthermore, when you visit Airbnb or Uber, do you place the order and then go and visit your mobile banking app to make the payment? Hell no.Pretend that somehow magically a decentralized Airbnb on the blockchain was working today, and you see how absurd the experience would be.Imagine this scenario:I want to book a place for a conference I\u2019m attending. I open up my decentralized Airbnb app. I find the place, read the reviews, and decide\u200a\u2014\u200ayes! This is the place for me.The dapp then tells me to get this specfic tokens, open my wallet interface, and send my tokens to the specified address\u2026. with the specified data\u2026 and the specified gas.I then have buy some tokens in order to pay.And, oops, I forgot I must have ETH in my wallet to cover the cost of gas.And, oops, I fucked up and forgot to include the data parameter with my transaction.If I made a single mistake at any one of these points, I risk losing my money and ultimately, I wouldn\u2019t have a place to stay for the conference.If we have any chance at a usable decentralized future, the experience needs to be like Airbnb. I explore places. I find a place. I click a button. I am booked. That\u2019s it.The interaction must be infinitely more frictionless than that. It must be invisible. It must remove as many obstacles in the user\u2019s path as possible.So how do we do that? If we admit that a separate wallet interface is not the ideal way for users to interact with the blockchain, then what is the ideal solution?We cannot expect every dapp to build a wallet interface / keychain into their dapp. This is a waste of time, energy, and opens up a variety of security issues.We need an access layer that is universal and works seamlessly, with as little overhead on the end user as possible.MetaMask, an amaaaazing project with a kickass team, has created browser extensions to handle key management and facilitate interaction with dapps.Mist & Brave have gone the route of creating an entirely new browser.The winning solution in the long term will likely be something even more invisible and more seamless. I think this is because the future doesn\u2019t necessarily exist in your browser or on your computer.We have websites and phones and computers and Xbox\u2019s and our doorbells and our cars and even the lock on our front door. And all of these things will probably want to interact with the blockchain at some point and facilitate transactions. Everything needs to be able to utilize this access layer to seamlessly enable payments via the blockchain in a safe and secure way.What exactly does this look like?I\u2019m going to be honest: I don\u2019t know. I\u2019ve been thinking about this a lot and there are a lot of possibilities and pros and cons and things that will change in the coming months and years that influence the technical decisions.However, I do know that if it wins at being invisible, it won\u2019t look like much at all. \ud83d\ude09This access layer will be transparent and integratable and hide all the confusing concepts like gas and private keys and transactions from the user.Because at the end of the day, the user doesn\u2019t want to send tokens. The user wants to rent a place for that conference they are attending.I will back up for a moment because some of you are arguing with me in your heads right now and saying, \u201cthere will never not be wallets, you moron.\u201d Yes. Okay. You win.There will always be speculators and hodlers and traders and situations where you may need to only manage your funds. Therefore, there will probably always be an interface where you can go and just see how much money you have. It just won\u2019t be the primary way the average user interacts with the blockchain, just like you probably don\u2019t spend much time on your mobile banking app.A dedicated wallet interface is not going to be such an integral part of day-to-day life tomorrow. The wallet is just going to be one itty-bitty piece of the ecosystem that serves the investors or traders or hodlers or whatever. It won\u2019t serve the people who want to rent a place or get a ride.So, what are we working on at MyCrypto to help usher in the decentralized future? How do we transition from being a wallet interface to being something that removes friction during the dapp experience? Great question.Previously, I wasn\u2019t focused on the long-term. In fact, that\u2019s the reason why MEW succeeded so quickly\u200a\u2014\u200awe were building shit that people needed today. But, it was purely reactionary.As I think about what MyCrypto is going to focus on, I keep returning to this word \u201cbalance.\u201d We want to balance security and ease-of use. We want to balance usability and trustlessness.And we also want to balance solving the problems users have today with the problems the ecosystem is going to have tomorrow.In the short term for MyCrypto we have a fully-audited react & typescript codebase that is going to be entering public beta in the coming weeks. This new codebase enables faster, safer development.We have new infrastructure that reduces our overhead and costs and also sets us up to provide integral features that people really need, like a gas price oracle so the end user doesn\u2019t have to think about it.On the next version of MyCrypto that will be entering public beta in the next few weeks, the user no longer needs to think about gas at all. We will automatically set their gas price based on network conditions. (Of course the option remains for users to customize their settings, it\u2019s just behind an \u201cAdvanced\u201d button.)These are the little items that need to be built on the backend as much as the frontend that will help us move from \u201cwallet interface\u201d to \u201cinvisible access layer\u201dWe have new developer tools that automate builds because as we were building the new codebase, we realized that there were a lot of things missing that we really needed in order to do our jobs more securely and efficiently.We have tools to verify every build of every website and app is verified by multiple parties before it goes live. This ensures everything we do and everything we publish is secure and cannot be compromised by a single party. More simply: myself nor my single computer no longer has the ability to push something live to our hundreds of thousands of users.We have a client-side node balancer to help ensure uptime and further increase decentralization.And we have some awesome typesafe libraries that have make our work with contracts much easier\u200a\u2014\u200aand safer.We have been working with the Swarm City team to build out a gas station. This is one of my favorite things in the world.How many of you have gotten in on an ICO or bought a token or something and then when you went to send it, you couldn\u2019t send it because you didn\u2019t have enough ETH in your account for gas?This gas station will enable you to send tokens, even if you don\u2019t have ETH in your account. The transaction fee essentially will be paid in the token, rather than the ETH, via a decentralized API / smart contract.Oh yeah\u2026.and we\u2018re working on new desktop and mobile apps.Once we have more awesome tools that are cross-platform, we can start abstracting away as much as possible. This means the user doesn\u2019t have to understand gas limit or gas price. They also don\u2019t need to have ETH in their account in order to send tokens. They also don\u2019t need to switch nodes if one is offline or responding slowly. It will all be automatic.As much as we like to talk about tech & code & fancy features and tooling, the future really revolves around people. The people are what matter.If you have a product you are building or thinking about building and it\u2019s just in your head, or in a private repo somewhere then you aren\u2019t necessarily building for people. That isn\u2019t going to make the world a better place, or even a different place, and you aren\u2019t going to learn as much as you would if you shared it and collaborated and talked about it with people.Also, it takes all types of people\u200a\u2014\u200anot just developers\u200a\u2014\u200ato build the decentralized future. This movement is global.We need people of all genders, upbringings, races, sexual orientations, everything. We need people with different experiences. We need different perspectives to solve problems more creatively.Everyone brings something unique to the table and ensures a more powerful decentralized future. This future is not just for technical geniuses.So my question for you today is:What are you doing to help usher in this decentralized future?What unique skills or experiences do you have that you can contribute to this ecosystem?The best part about the blockchain is that everyone can contribute. It\u2019s so new and moving so fast that anyone can create the next Facebook or Google today.I hear \u201cI\u2019m not a developer\u201d or \u201cI\u2019m not a blockchain expert\u201d so often. Fuck that. No one started as a blockchain expert. I was not a blockchain expert. I\u2019m still not an expert. I just soak in as much knowledge as possible. No one went to school for this! All it takes to be part of this world is to want to be part of this world.Stop telling the people around you, stop telling yourself, and stop telling me all the things you can\u2019t or don\u2019t do and shift your thinking. What can you do? What are your experiences? What makes you unique?If you are excited by the journey we are on, find me, find my team, find another team. Join the party.Thank you so much to everyone for supporting us on this journey.And thank you to Austin and Matt and the Blockchain Beach crew for putting their event on and putting us all in a room together to share awesome ideas.-Taylor", "responses": "48"}, {"title": "The Beginner\u2019s Guide to Ethereum\u2019s Roadmap", "author_name": "Michael Karnjanaprakorn", "link": "https://hackernoon.com/the-beginners-guide-to-ethereum-s-2020-roadmap-2ac5d2dd4881?source=search_post", "post_date": "Dec 7, 2017", "readtime": "7 min read", "upvotes": "4.5K", "content": "The Beginner\u2019s Guide to Ethereum\u2019s RoadmapMichael KarnjanaprakornBlockedUnblockFollowFollowingDec 7, 2017Ethereum\u2019s mission is to become a decentralized world computer that replaces server farms. Think of it as a single computer that the whole world can use. It can\u2019t be shut down or turned off. As an overview, here\u2019s a beginner\u2019s guide to Ethereum and an explanation of how it technically works.If Ethereum is a computer, then each one of these updates can be looked at as an operating system (OS). Similar to Google launching Android Oreo or Apple launching iOS 10, Ethereum is launching in four stages.Each stage adds new features and improves the user friendliness and security of the platform, while allowing Ethereum to scale.Frontier (July 2015)\u200a\u2014\u200aFirst live release of the Ethereum network. It allowed developers to experiment, mine Ether, and begin building dApps and tools.Homestead (March 2016)\u200a\u2014\u200aFirst production release of Ethereum that brought many protocol improvements which lay the foundations to future upgrades and for speeding up transactions.Metropolis (Oct 2017)\u200a\u2014\u200aLighter, faster and more secure Ethereum broken down into two releases: Byzantium (Oct 2017) and Constantinople (TBA)Serenity (TBA)\u200a\u2014\u200aWill bring us the long-awaited Proof of Stake using the Casper consensus algorithm.All of these updates will help Ethereum scale, which means faster transaction times and lower fees for everyone. As you can see, the Ethereum team has done a great job of scaling transactions.Source: EtherscanThe Current Stage: MetropolisMetropolis promises to be a lighter, faster and more secure version of Etherem. It will also provide greater flexibility to smart contract developers.Metropolis will be split into two core releases: Byzantium and Constantinople. The first hard fork (Byzantium) took place in October. The second hard fork (Constantinople) does not have a set date yet but is expected in 2018.Each of these phases includes a set of Ethereum Improvement Proposals or EIP for short. Byzantium has a total of nine EIPs to improve the network\u2019s privacy, scalability and security. All of these updates will result in faster blocks and lower fees for users.Here are the major updates of Metropolis:Privacy\u200a\u2014\u200aability to perform anonymous transactions (zk-SNARKs)Easier programming for developersMore predictable gas chargesIncreased security for wallets (account abstraction)Mining adjustment that will make mining more difficult (difficulty bomb)PrivacyIn Metropolis, developers will get a new privacy tool\u200a\u2014\u200athe ability to verify zk-SNARKs efficiently on-chain. zk-SNARKs is an abbreviation of \u201czero-knowledge succinct non-interactive arguments of knowledge.\u201dSimply, a zero knowledge proof is one which demonstrates the truth of a statement without revealing any additional information beyond what it\u2019s trying to prove.Here\u2019s a simple example. I need to prove to John that I know the passcode to a random cell phone. In order for me to do that, I need to unlock the phone without revealing the passcode entered.A zero-knowledge proof is when a prover (me) convinces a verifier (John) that they have certain knowledge without revealing the actual knowledge. In this example, I can type in the passcode into the phone and show that the phone is unlocked without revealing what I typed.So, how does this impact Ethereum? Certain contact variables can be made private. Instead of storing this secret information on the blockchain, it can be stored with users. Some things that can be hidden in a transaction include the sender, recipient, amount, and data.In addition to zkSnarks (used in zCash), Ethereum will get ring signatures as well (used in Monero\u2019s privacy scheme). This is a fancy way of setting that Ethereum will get the best of both!Account abstractionIn software engineering, abstraction is a tool that allows programmers to think on a certain level of complexity, hiding the details not important to the problem at hand. Developers use abstractions to prevent overloading the end user with details when they care more about higher level concepts.This will give users more control over their private keys while also adding the ability for contracts to pay mining fees. Abstraction will also reduce the risk of being hacked by quantum computing.Mining difficulty-bombThe time bomb is to begin the process of moving Ethereum away from Proof of Work (PoW) over to Proof of Stake (PoS). This will make it more difficult for miners and make it less profitable for them in the future as we move from a miner-based PoW to a validator-based PoS system. Also, the number of ETH issued per block will drop from 5 to 3.", "responses": "5"}, {"title": "Programmable blockchains in context: Ethereum\u2019s future, by Vinay\u00a0Gupta", "author_name": "Vinay Gupta", "link": "https://medium.com/humanizing-the-singularity/by-the-end-of-this-article-youre-going-to-understand-blockchains-in-general-and-ethereum-a-next-e11df6a1d7cf?source=search_post", "post_date": "May 1, 2017", "readtime": "25 min read", "upvotes": "1.6K", "content": "Programmable blockchains in context: Ethereum\u2019s future, by Vinay\u00a0GuptaProgrammable blockchains in context: Ethereum\u2019s future, by Vinay\u00a0GuptaVinay GuptaBlockedUnblockFollowFollowingMay 1, 2017By the end of this article, you\u2019re going to understand blockchains in general (and Ethereum, a next-generation blockchain platform, in particular) well enough to decide what they mean to your life. This article was the Hacker News hit that framed the Ethereum Project launch in 2015.Spanish versionBehold SkynetEthereum brings up strong emotions. Some have compared it to SkyNet, the distributed artificial intelligence of the Terminator movies. Others once suggested the entire thing is a pipe dream. The network has been up for a few months now, and is showing no signs of hostile self-awareness\u200a\u2014\u200aor total collapse.But if you\u2019re not terribly technical, or technical in a different field it\u2019s easy to stare at all this stuff and think \u201cI\u2019ll get around to this later\u201d or decide to ignore it until the Guardian does a nice feature (e.g., Imogen Heap: saviour of the music industry? article).But, in truth, it\u2019s not that difficult to understand Ethereum, blockchains, Bitcoin and all the rest\u200a\u2014\u200aat least the implications for people just going about their daily business, living their lives. Even a programmer who wants a clear picture can get a good enough model of how it all fits together fairly easily. Blockchain explainers usually focus on some very clever low-level details like mining, but that stuff really doesn\u2019t help people (other than implementers) understand what is going on. Rather, let\u2019s look at how the blockchains fit into the more general story about how computers impact society.As is so often the case, to understand the present, we have to start in the past: blockchains are the third act of the play, and we are just at the beginning of that third act. So we must recap.SQL: Yesterday\u2019s best\u00a0ideaThe actual blockchain story starts in the 1970s when the database as we currently know it was created: the relational model, SQL, big racks of spinning tape drives, all of that stuff. If you\u2019re imagining big white rooms with expensive beige monoliths watched over by men in ties, you\u2019re in the right corner of history. In the age of Big Iron, big organizations paid big bucks to IBM and the rest for big databases and put all their most precious data assets in these systems: their institutional memory and customer relationships. The SQL language which powers the vast majority of the content management systems which run the web was originally a command language for tape drives. Fixed field lengths\u200a\u2014\u200aa bit like the 140 character limit on tweets\u200a\u2014\u200aoriginally served to let impatient programs fast forward tapes a known distance at super high speed to put the tape head exactly where the next record would begin. This was all going on round about the time I was born\u200a\u2014\u200ait\u2019s history, but it\u2019s not yet ancient history.At a higher, more semantic level, a subtle distortion in how we perceive reality took hold: things that were hard to represent in databases became alternately devalued and fetishized. Years passed as people struggled to get the real world into databases using knowledge management, the semantic web, and many other abstractions. Not everything fit, but we ran society on these tools anyway. The things which did not fit cleanly in databases got marginalized, and life went on. Once in awhile a technical counter-current would take hold and try to push back on the tyranny of the database, but the general trend held firm: if it does not fit in the database, it does not exist.You may not think you know this world of databases, but you live in it. Every time you see a paper form with squares indicating one letter per box, you are interacting with a database. Every time you use a web site, there\u2019s a database (or more likely an entire mess of them) lurking just under the surface. Amazon, Facebook, all of that\u200a\u2014\u200ait\u2019s all databases. Every time a customer service assistant shrugs and says \u201ccomputer says no\u201d or an organization acts in crazy, inflexible ways, odds-are there\u2019s a database underneath which has a limited, rigid view of reality and it\u2019s simply too expensive to fix the software to make the organization more intelligent. We live in these boxes, as pervasive as oxygen, and as inflexible as punched cards.Documents and the World Wide\u00a0WebThe second act is started by the arrival of Tim Berners-Lee and the advent of the web. It actually starts just a hair before his arrival. In the late 1980s and early 1990s we get serious about computer networking. Protocols like Telnet, Gopher, Usenet and Email itself provide a user interface to the spanning arcs of the early internet, but it\u2019s not until the 1990s we get mass adoption of networked computers, leading incrementally to me typing this on Google Docs, and you reading it in a web browser. This process of joining the dots\u200a\u2014\u200a\u201cthe network is the computer\u201d as Sun Microsystems used to say)\u200a\u2014\u200awas fast. In the early 1990s, vast numbers of machines already existed, but they were largely stand-alone devices, or connected to a few hundred machines on a university campus without much of a window into the outside world. The software and hardware to do networking everywhere\u200a\u2014\u200athe network of networks, the internet\u200a\u2014\u200atook a long time to create, and then spread like wildfire. The small pieces became loosely joined, then tightly coupled into the network we know today. We are still riding the technological wave as the network gets smarter, smaller and cheaper and starts showing up in things like our lightbulbs under names like \u201cthe Internet of Things.\u201dBureaucracy and\u00a0machinesBut the databases and the networks never really learn to get on. The Big Iron in the machine rooms and the myriads of tiny little personal computers scattered over the internet like dew on a cobweb could not find a common world-model which allowed them to interoperate smoothly. Interacting with a single database is easy enough: forms and web applications of the kinds you use every day. But the hard problem is getting databases working together, invisibly, for our benefit, or getting the databases to interact smoothly with processes running on our own laptops.Those technical problems are usually masked by bureaucracy, but we experience their impact every single day of our lives. It\u2019s the devil\u2019s own job getting two large organizations working together on your behalf, and deep down, that\u2019s a software issue. Perhaps you want your car insurance company to get access to a police report about your car getting broken into. In all probability you will have to get the data out of one database in the form of a handful of printouts, and then mail them to the company yourself: there\u2019s no real connectivity in the systems. You can\u2019t drive the process from your laptop, except by the dumb process of filling in forms. There\u2019s no sense of using real computers to do things, only computers abused as expensive paper simulators. Although in theory information could just flow from one database to another with your permission, in practice the technical costs of connecting databases are huge, and your computer doesn\u2019t store your data so it can do all this work for you. Instead it\u2019s just something you fill in forms on. Why are we under-utilizing all this potential so badly?The Philosophy of\u00a0DataThe answer, as always, is in our own heads. The organizational assumptions about the world which are baked into computer systems are almost impossible to translate. The human factors\u200a\u2014\u200athe mindsets which generate the software\u200a\u2014\u200adon\u2019t fit together. Each enterprise builds their computer system in their own image, and these images disagree about what is vital and what is incidental, and truth does not flow between them easily. When we need to translate from one world model to another, we put humans in the process, and we\u2019re back to processes which mirror filling in paper forms rather than genuinely digital cooperation. The result is a world in which all of our institutions seem to be at sixes and sevens, never quite on the same page, and things that we need in our ordinary lives seem to keep falling between the cracks, and every process requires filling in the same damn name and address data, twenty times a day, and more often if you are moving house. How often do you shop from Amazon rather than some more specialized store just because they know where you live?There are lots of other factors that maintain the gap between the theoretical potential of our computers and our everyday use of the\u200a\u2014\u200atechnological acceleration, constant change, the sheer expense of writing software. But it all boils down to mindset in the end. Although it looks like ones and zeros, software \u201carchitects\u201d are swinging around budgets you could use to build a skyscraper, and changing something late into a project like that has similar costs to tearing down a half-made building. Rows upon rows upon rows of expensive engineers throwing away months (or years) of work: the software freezes in place, and the world moves on. Everything is always slightly broken.Over and over again, we go back to paper and metaphors from the age of paper because we cannot get the software right, and the core to that problem is that we managed to network the computers in the 1990s, but we never did figure out how to really network the databases and get them all working together.There are three classic models for how people try and get their networks and databases working together smoothly.First Paradigm: the diverse peers\u00a0modelThe first approach is just to directly connect machines together, and work out the lumps as you go. You take Machine A, connect it over a network to Machine B, and fire transactions down the wire. In theory, Machine B catches them, writes them into its own database, and the job is good. In practice, there are a few problems here.The epistemological problem is quite severe. Databases, as commonly deployed in our organizations, store fact. If the database says the stock level is 31 units, that\u2019s the truth for the whole of the organization, except perhaps for the guy who goes down to the shelf and counts them, finds the real count is 29, and puts that in the database as a correction. The database is institutional reality.But when data leaves one database and flows into another, it crosses an organizational boundary. For Organization A, the contents of Database A are operationally reality, true until proven otherwise. But for Organization B, the communique is a statement of opinion. Consider an order: the order is a request, but it does not become a confirmed fact until after the payment clears past the point of a chargeback. A company may believe an order has occurred, but this is a speculation about someone else\u2019s intentions until cold hard cash (or bitcoin) clears all doubts. Up until that point, an \u201cordered in error\u201d signal can reset the whole process. An order exists as a hypotheses until a cash payment clears it from the speculative buffer it lives in and places it firmly in the fixed past as a matter of factual record: this order existed, was shipped, was accepted, and we were paid for it.But until then, the order is just a speculation.The shifting significance of a simple request for new paint brushes flowing from one organization to another, a statement of intention clearing into a statement of fact, is not something we would normally think about closely. But when we start to consider how much of the world, of our lives, run on systems that work much like this\u200a\u2014\u200afood supply chains, electrical grids, tax, education, medical systems, it\u2019s odd that these systems don\u2019t come to our notice more often.In fact, we only notice them when something goes wrong.The second problem with peer connection is the sheer instability of each peer connection. A little change to the software on one end or the other, and bugs are introduced. Subtle bugs which may not become visible until the data transferred has wormed its way deep into Organization B\u2019s internal records. A typical instance: an order was always placed in lots of 12, and processed as one box. But for some reason, one day an order is placed for 13, and somewhere far inside of Organization B, a stock handling spreadsheet crashes. There\u2019s no way to ship 1.083 of a box, and The Machine Stops.This instability is compounded by another factor: the need to translate the philosophical assumptions\u200a\u2014\u200ain fact, the corporate epistemology, of one organization into another organization\u2019s private internal language. Say we are discussing booking a hotel and car rental as a single action: the hotel wants to think of customers as credit card numbers, but the car rental office wants to think of customers as driving licenses. A small error results in customer misidentification, comedy as customers are mistakenly asked for their driving license numbers to confirm hotel room bookings\u200a\u2014\u200abut all anybody knows of the error is \u201ccomputer says no\u201d when customers read back their credit card details with no idea that the computer now wants something else.If you think this is a silly example, the Mars Climate Orbiter was lost by NASA in 1999 because one team was using inches, and the other, centimeters. These things go wrong all the time.But over a wire, between two commercial organizations, one can\u2019t simply look at the other guy\u2019s source code to figure out the error. Every time two organizations meet and want to automate their back end connections, all these issues have to be hashed out by hand. It\u2019s difficult, and expensive, and error prone enough that in practice companies would often rather use fax machines. This is absurd, but this is how the world really works today.Of course, there are attempts to clarify this mess\u200a\u2014\u200ato introduce standards and code reusability to help streamline these operations and make business interoperability a fact. You can choose from EDI, XMI-EDI, JSON, SOAP, XML-RPC, JSON-RPC, WSDL and half a dozen more standards to assist your integration processes.Needless to say, the reason there are so many standards is because none of them work properly.Finally, there is the problem of scaling collaboration. Say that two of us have paid the upfront costs of collaboration and have achieved seamless technical harmony, and now a third partner joins our union. And now a fourth, and a fifth. By five partners, we have 13 connections to debug. Six, seven\u2026 by ten the number is 45. The cost of collaboration keeps going up for each new partner as they join our network, and the result is small pools of collaboration which just will not grow.Remember, this isn\u2019t just an abstract problem\u200a\u2014\u200athis is banking, this is finance, medicine, electrical grids, food supplies, and the government.Our computers are a mess.Hub and Spoke: meet the new\u00a0bossOne common answer to this quandary is to cut through the exponential (well, quadratic) complexity of writing software to directly connect peers, and simply put somebody in charge. There are basically two approaches to this problem.The first is that we pick an organization\u200a\u2014\u200aVISA would be typical\u200a\u2014\u200aand all agree that we will connect to VISA using their standard interface. Each organization has to get just a single connector right, and VISA takes 1% off the top, and makes sure that everything clears properly.There are a few problems with this approach, but they can be summarized with the term \u201cnatural monopoly.\u201d The business of being a hub or a platform for others is quite literally a license to print money for anybody that achieves incumbent status in such a position. Political power in the form of setting terms of service and negotiating with regulators can be exerted, and over all an arrangement that might have started with an effort to create a neutral backbone rapidly turns into being clients of an all-powerful behemoth without which one simply cannot do business.This pattern recurs again and again in different industries, at different levels of complexity and scale, from railroads and fibre optics and runway allocation in airports through to liquidity management in financial institutions.In the database context, there is a subtle form of the problem: platform economics. If the \u201chub and spoke\u201d model is that everybody runs Oracle or Windows Servers or some other such system, and then relies on these boxes to connect to each-other flawlessly because, after all, they are clone-like peas in a pod, we have the same basic economic proposition as before: to be a member of the network, you rely on an intermediary who charges whatever they like for the privilege of your membership, with this tax disguised as a technical cost.VISA gets 1% or more of a very sizeable fraction of the world\u2019s transactions with this game. If you ever wonder what the economic upside of the blockchain business might be, just have a think about how big that number is.Protocols\u200a\u2014\u200aif you can find\u00a0themThe protocol is the ultimate \u201cunicorn.\u201d Not a company that is worth a billion dollars two years after it was founded, but an idea so good that it gets people to stop arguing about how to do things, and just get on with it and do them.The internet runs on a handful of these things: Sir Tim Berners Lee\u2019s HTTP and HTML standards have worked like magic, although of course he simply lit the fire and endless numbers of technologists gave us the wondrous mess we know and love now. SMTP, POP and IMAP power our email. BGP sorts out our big routers. There are a few dozen more, increasingly esoteric, which run most of the open systems we have.A common complaint about tools like Gchat or Slack is that they do jobs which have perfectly great open protocols in play (IRC or XMPP) but do not actually speak those protocols. The result is that there is no way to interoperate between Slack and IRC or Skype or anything else, without going through hacked together gateways that may or may not offer solid system performance. The result is a degradation of the technical ecosystem into a series of walled gardens, owned by different companies, and subject to the whims of the market.Imagine how much WikiPedia would suck by now if it was a start up pushing hard to monetize its user base and make its investors their money back.But when the protocol gambit works, what\u2019s created is huge genuine wealth\u200a\u2014\u200anot money, but actual wealth\u200a\u2014\u200aas the world is improved by things that just work together nicely. Of course, SOAP and JSON-RPC and all the rest aspire to support the formation of protocols, or even to be protocols, but the definitional semantics of each field of endeavor tend to create an inherent complexity which leads back towards hub and spoke or other models.Blockchains\u200a\u2014\u200aa fourth\u00a0way?You\u2019ve heard people talking about bitcoin. Missionary chaps in pubs absolutely sure that something fundamental has changed, throwing around terms like \u201cCentral Bank of the Internet\u201d and discussing the end of the nation state. Sharply dressed women on podcasts talking about the amazing future potential. But what\u2019s actually underneath all this? What is the technology, separated from the politics and the future potential?What\u2019s underneath it is an alternative to getting databases synchronized by printing out wads of paper and walking it around. Let\u2019s think about paper cash for a moment: I take a wad of paper from one bank to another, and the value moves from one bank account\u200a\u2014\u200aone computer system\u200a\u2014\u200ato another. Computer as paper simulator, once again. Bitcoin simply takes a paper-based process, the fundamental representation of cash, and replaces it with a digital system: digital cash. In this sense, you could see bitcoin as just another paper simulator, but it\u2019s not.Bitcoin took the paper out of that system, and replaced it with a stable agreement (\u201cconsensus\u201d) between all the computers in the bitcoin network about the current value of all the accounts involved in a transaction. It did this with a genuinely protocol-style solution: there\u2019s no middleman extracting rents, and no exponential system complexity from a myriad of different connectors. The blockchain architecture is essentially a protocol which works as well as hub-and-spoke for getting things done, but without the liability of a trusted third party in the center which might choose to extract economic rents. This is really a good, good thing. The system has some magic properties\u200a\u2014\u200asame agreed data on all nodes, eventually\u200a\u2014\u200awhich go beyond paper and beyond databases. We call it \u201cdistributed consensus\u201d but that\u2019s just a fancy way of saying that everybody agrees, in the end, about what truth (in your bank balance, in your contracts) is.This is kind of a big deal.In fact, it breaks with 40 years of experience of connecting computers together to do things. As a fundamental technique, blockchains are new. And in this branch of technology, genuinely new ideas move billions of dollars and set the direction of industries for decades. They are rare.Bitcoin lets you move value from one account to another without having to move either cash or go through the baroque wire transfer processes that banks use to shuffle numbers because the underlying database technology is new, modern and better: better services through better technology. Just like cash it is anonymous and decentralized, and bitcoin bakes in some monetary policy and issues the cash itself: a \u201cdecentralized bank.\u201d A central bank of the internet, if you will.Once you think of cash as a special kind of form, and cash transactions as paper shuffling to move stuff around in databases, it\u2019s pretty easy to see bitcoin clearly.It\u2019s not an exaggeration to say that Bitcoin has stated us on the way out of a 40 year deep hole created by the limits of our database technology. Whether it can effect real change at a fiscal level remains to be seen.Ok, so what about Ethereum?Ethereum takes this \u201cbeyond the paper metaphor\u201d approach to getting databases to work together even further than bitcoin. Rather than replacing cash, Ethereum presents a new model, a fourth way. You push the data into Ethereum, it\u2019s bound permanently in public storage (the \u201cblockchain\u201d). All the organizations that need to access that information\u200a\u2014\u200afrom your cousin to your government\u200a\u2014\u200acan see it. Ethereum seeks to replace all the other places where you have to fill in forms to get computers to work together. This might seem a little odd at first\u200a\u2014\u200aafter all, you don\u2019t want your health records in such a system\u200a\u2014\u200aand that\u2019s right, you don\u2019t. If you were going to store health records online, you\u2019d need to protect them with an additional layer of encryption to ensure they couldn\u2019t be read\u200a\u2014\u200aand we should be doing this anyway. It\u2019s not common practice to apply appropriate encryption to private data, that\u2019s why you keep hearing about these enormous hacks and leaks.So what kinds of things would you like as public data? Let\u2019s start with some obvious things: your domain names. You own a domain name for your business, and people need to know that your business owns that domain name\u200a\u2014\u200anot somebody else. That unique system of names is how we navigate the internet as a whole: that\u2019s a clear example of something we want in a permanent public database. We\u2019d also like it if governments didn\u2019t keep editing those public records and taking domains offline based on their local laws: if the internet is a global public good, it\u2019s annoying to have governments constantly poking holes in it by censoring things they don\u2019t like.Crowdfunding as a test\u00a0bedAnother good example is crowdfunding for projects, as done by places like KickStarter, IndieGoGo and so on. In these systems, somebody puts a project online and gather funds, and there\u2019s a public record of how much funding has flown in. If it\u2019s over a certain number, the project goes live\u200a\u2014\u200aand we\u2019d like them to document what they did with the money. This is a very important step: we want them to be accountable for the funds they have taken in, and if the funds aren\u2019t sufficient, we want them returned where they came from. We have a global public good, the ability for people to organize and fund projects together. Transparency really helps, so this is a natural place for a blockchain.So let\u2019s think about the crowdfunding example in more detail. In a sense, giving money to a crowdfunding project is a simple contract:If the account balance is greater than $10000 then fund the project, and if I contributed more than $50, send me a t-shirt. Otherwise, return all the money.expressed as let\u2019s pretend code, that might be:See an actual example at https://ethereum.org/crowdsaleIf you represent this simple agreement as actual detailed code, you get something like this. This is a simple example of a Smart Contract, and smart contracts are one of the most powerful aspects of the Ethereum system.Crowdfunding potentially gives us access to risk capital backed by deep technical intelligence, and invested to create real political change. If, say, Elon Musk could access the capital reserves of everybody who believes in what he is doing, painlessly selling (say) shares in a future Mars City, would that be good or bad for the future of humanity?Building the mechanisms to enable this kind of mass collective action might be critical to our future. (e.g. See Coase\u2019s Blockchain youtube video)Smart ContractsThe implementation layer of all these fancy dreams is pretty simple: a smart contract envisages taking certain kinds of simple paper agreements and representing them as software. You can\u2019t easily imagine doing this for house painting\u200a\u2014\u200a\u201cis the house painted properly?\u201d is not something a computer can do\u200a\u2014\u200ayet. But for contracts which are mainly about digital things\u200a\u2014\u200athink cell phone contracts or airline tickets or similar, which rely on computers to provide service or send you an e-ticket\u200a\u2014\u200asoftware already represents these contracts pretty well in nearly all cases. Very occasionally something goes wrong and all the legalese in English gets activated, and a human judge gets involved in a lawsuit, but that\u2019s a very rare exception indeed. Mostly we deal with web sites, and show the people in the system who help us (like airline gate staff) proof that we\u2019ve completed the transaction with the computers, for example by showing them our boarding passes. We go about our business by filling in some forms and computers go out and sort it all out for us, no humans required except when something goes wrong.To make that all possible today, companies offering those kinds of services maintain their own technical infrastructure\u200a\u2014\u200adotcom money pays for fleets of engineers and server farms and physical security around these assets. You can buy off-the-shelf services from people that will set you up an e-commerce website or some other simple case, but basically this kind of sophistication is the domain of the big companies because of all the overheads and technical skill you need before you can have a computer system take money and offer services.It\u2019s just hard and expensive. If you are starting a bank or a new airline, software is a very significant part of your budget, and hiring a technical team is a major part of your staffing challenge.Smart Contracts & the World\u00a0ComputerSowhat Ethereum offers is a \u201csmart contract platform\u201d which takes a lot of that expensive, difficult stuff and automates it. It\u2019s early days yet, so we can\u2019t do everything, but we are seeing a surprising amount of capability even from the first version of the world\u2019s first generally available smart contract platform.So how does a smart contract platform work? Just like bitcoin, lots and lots of people run the software, and get a few tokens (ether) for doing it. Those computers in the network all work together and share a common database, called the blockchain. Bitcoin\u2019s blockchain stores financial transactions. Ethereum\u2019s blockchain stores smart contracts. You don\u2019t rent space in a data center and hire a bunch of system administrators. Rather, you use the shared global resource, the \u201cworld computer\u201d and the resources you put into the system go to the people whose computers make up this global resource. The system is fair and equitable.Ethereum is open source software, and the Ethereum team maintain it (increasingly with help from lots of independent contributors and other companies too.) Most of the web runs on open source software produced and maintained by similar teams: we know that open source software is a good way to produce and maintain global infrastructure. This makes sure that there\u2019s no centralized body which can use its market power to do things like jack up the transaction fees to make big profits: open source software (and its slightly more puritan cousin, Free Software) help keep these global public goods free and equitable for everybodyThe smart contracts themselves, which run on the Ethereum platform, are written in simple languages: not hard to learn for working programmers. There\u2019s a learning curve, but it\u2019s not different from things that working professionals do every few years as a matter of course. Smart contracts are typically short: 500 lines would be long. But because they leverage the huge power of cryptography and blockchains, because they operate across organizations and between individuals, there is enormous power in even relatively short programs.So what do we mean by world computer? In essence, Ethereum simulates a perfect machine\u200a\u2014\u200aa thing which could never exist in nature because of the laws of physics, but which can be simulated by a large enough computer network. The network\u2019s size isn\u2019t there to produce the fastest possible computer (although that may come later with blockchain scaling) but to produce a universal computer which is accessible from anywhere by anybody, and (critically!) which always gives the same results to everybody. It\u2019s a global resource which stores answers and cannot be subverted, denied or censored (See From Cyperpunks to Blockchains video on youtube).We think this is kind of a big deal.A smart contract can store records on who owns what. It can store promises to pay, and promises to deliver without having middleman or exposing people to the risk of fraud. It can automatically move funds in accordance with instructions given long in the past, like a will or a futures contract. For pure digital assets there is no \u201ccounterparty risk\u201d because the value to be transferred can be locked into the contract when it is created, and released automatically when the conditions and terms are met: if the contract is clear, then fraud is impossible, because the program actually has real control of the assets involved rather than requiring trustworthy middle men like ATM machines or car rental agents.And this system runs globally, with tens and eventually hundreds of thousands of computers sharing the workload and, more importantly, backing up the cultural memory of who promised what to whom. Yes, fraud is still possible, at the edge of the digitial, but many kinds of outright banditry are likely to simply die out: you can check the blockchain and find out if the house has been sold twice, for example. Who really owns this bridge in Brooklyn? What happens if this loan defaults? All there, as clear as crystal, in a single shared global blockchain. That\u2019s the plan, anyway.Democratized access to the state of the\u00a0artAll of this potentially takes the full power of modern technology and puts it into the hands of programmers who are working in an environment not much more complex than coding web sites. These simple programs are running on enormously powerful shared global infrastructure that can move value around and represent the ownership of property. That creates markets, registries like domain names, and many other things that we do not currently understand because they have not been built yet. When the web was invented to make it easy to publish documents for other people to see, nobody would have guessed it would revolutionize every industry it touched, and change people\u2019s personal lives through social networks, dating sites, and online education. Nobody would have guessed that Amazon could one day be bigger than Wal-Mart. It\u2019s impossible to say for sure where smart contracts will go, but it\u2019s hard not to look at the web, and dream.Although an awful lot of esoteric computer science was required to create a programming environment that would let relatively ordinary web skills move around property inside of a secure global ecosystem, that work has been done. Although Ethereum is not yet a cakewalk to program, that\u2019s largely an issue of documentation, training, and the gradual maturation of a technical ecosystem. The languages are written and are good: the debuggers take more time. But the heinous complexity of programming your own smart contract infrastructure is gone: smart contracts themselves are simpler than modern JavaScript, and nothing a web programmer will be scared of. The result is that we expect these tools to be everywhere fairly soon, as people start to want new services, and teams form to deliver them.The Future?Iam excited precisely because we do not know what we have created, and more importantly, what you and your friends will create with it. My belief is that terms like \u201cBitcoin 2.0\u201d and \u201cWeb 3.0\u201d will be inadequate\u200a\u2014\u200ait will be a new thing, with new ideas and new culture embedded in a new software platform. Each new medium changes the message: blogging brought long form writing back, and then twitter created an environment where brevity was not only the soul of wit, but by necessity its body also. Now we can represent simple agreements as free speech, as publication of an idea, and who knows where this leads.Ethereum Frontier is a first step: it\u2019s a platform for programmers to build services you might access through a web browser or a phone app. Later we\u2019ll release Ethereum Metropolis, which will be a web browser like program, currently called Mist, which takes all the security and cryptography inherent in Ethereum and packages it nicely with a user interface that anybody can use. The recent releases of Mist showcase a secure wallet, and that\u2019s just the start. The security offered by Mist is far stronger than current e-commerce systems and phone apps have. In the medium term, contract production systems will be stand-alone, so nearly anybody can download a \u201cdistributed application builder\u201d and load it up with their content and ideas and upload it\u200a\u2014\u200afor simple things, no code will be required, but the full underlying power of the network will be available. Think along the lines of an installation wizard, but instead of setting up your printer, you are configuring the terms of a smart contract for a loan: how much money, how long, what repayment rates. Click OK to approve!If this sounds impossible, welcome to our challenge: the technology has gotten far, far ahead of our ability to explain or communicate the technology!The World SUPER Computer?Weare not done innovating yet. In a little while\u200a\u2014\u200awe\u2019re talking a year or two\u200a\u2014\u200aEthereum Serenity will take the network to a whole new level. Right now, adding more computers to the Ethereum network makes it more secure, but not faster. We manage the limited speed of the network using Ether, a token which gives priority on the network etc. In the Serenity system, adding more computers to the network makes it faster, and this will finally allow us to build systems which really are internet scale: hundreds of millions of computers working together to do jobs we collectively need done. Today we might guess at protein folding or genomics or AI, but who\u2019s to say what uses will be found for such brilliant software.I hope this non-technical primer on the Ethereum ecosystem has been useful, and as soon as we have a user friendly version of the system available for general use, you\u2019ll be the first to know!byVinay Gupta, CEO, Mattereum.@leashlessLayout by Eva Shon, along with icons from thenounproject.com", "responses": "29"}, {"title": "The Synergies Gained from Building on Ethereum\u2019s Decentralized App Ecosystem", "author_name": "Preethi Kasireddy", "link": "https://medium.com/swlh/the-synergies-gained-from-building-on-ethereums-decentralized-app-ecosystem-22a709a675d2?source=search_post", "post_date": "Sep 7, 2017", "readtime": "10 min read", "upvotes": "4.1K", "content": "The Synergies Gained from Building on Ethereum\u2019s Decentralized App EcosystemPreethi KasireddyBlockedUnblockFollowFollowingSep 7, 2017When the first home telephones were being installed in the 1870s, the companies selling them had a problem: phones aren\u2019t very useful if you can only call a few people.However, this challenge got easier and easier as the networks expanded, since every new customer\u2019s presence in the phone book increased the overall value of the product as a communication tool.This concept\u200a\u2014\u200acalled a \u201cnetwork effect\u201d\u200a\u2014\u200aentered its renaissance during the tech boom, as platforms like Facebook and the Apple ecosystem rapidly secured huge market shares on the power of large userbases.Just like the telephone, tech products with strong built-in network effects tend to become the most profitable and sustainable businesses around.I say \u201cprofitable\u201d because companies that have strong network effects typically result in a \u201cwinner-take-all\u201d dynamic that leads to massive market shares. I say \u201csustainable\u201d because once they\u2019ve secured a majority position, it becomes less and less attractive for people to fully leave or switch to another network.Fast forward to 2017, and everyone is looking around for the next runaway network effect.As I\u2019ve been developing for Ethereum and the decentralized web, I\u2019ve discovered that decentralized apps on Ethereum are empowered by a whole new type of network effect, or what I\u2019d refer to as \u201csynergies\u201d.Let\u2019s start by looking more closely at some classic network effects, and build up to show how Ethereum enables an attractive environment for application developers building on top of it.Direct network\u00a0effectsLinkedIn is a classic example of a network effect in action. Every new employee that joins the platform adds value for existing users by increasing their networking potential. The more members there are on the platform, the more attractive it is for employers to join.Every new employer that joins the platform adds value because you now have more employment opportunities to choose from. As this viral network grows, it becomes unattractive to switch to a LinkedIn clone with a smaller network.This virtuous cycle typically results in one or two companies taking 80% of the market in a power law distribution.YouTube, Airbnb, Uber, Facebook, WhatsApp, and eBay are also strong examples of businesses built on a direct network effect.Indirect network\u00a0effectsWhen we typically talk of these network effects, we\u2019re typically referring to direct network effects: increases in usage lead to direct increases in value.However, there\u2019s another type of network effect called \u201cindirect network effects\u201d, where increase in usage of the product creates more value for complementary products, which creates an ecosystem of sorts that increases the value of the original product.For example, let\u2019s take the Mac computer. It has some direct network effects\u200a\u2014\u200afor example, increase in the number of Mac users increases its value because a greater number of people can share compatible files.But the indirect network effects that arise from the complementary Mac applications are probably much more important: the larger the number of Mac users, the greater the demand for compatible Mac applications, which leads to greater demand for software firms and developers to build Mac applications. More development leads to lower prices and a greater variety of applications, making Mac users better off.This hardware/software paradigm applies to a number of markets:iPhones (hardware) and iPhone applications (software)Android phones (hardware) and Android applications (software)ATM cards (hardware) and compatible teller machines (software)Televisions (hardware) and movies / TV-shows (software)Electric cars (hardware) and electric fueling stations (software)In each one of these cases, you have some standard hardware platform, and a variety of complementary software and services.Similarly, we can argue that indirect network effects exist between the web platform itself and all the applications built for the web\u200a\u2014\u200aspecifically, every new user added to the web platform creates more demand for web applications, which in turn creates a greater variety of web applications and benefits users.But can such indirect network effects also exist among two complementary software products built on the web platform?Friction in network effects between web apps: proprietary APIsOn the surface, a photo sharing service and a cloud storage service would seem primed for indirect network effects. We could argue that an increase in usage of the photo sharing service would lead to an increase in usage of the cloud storage service, since the photo sharing service has to store more and more photos somewhere, while cloud storage services need customers with lots of things (such as photos) to store.In theory, this increased demand for cloud storage services creates a greater variety of cloud storage services and lower prices (due to more competition), which in the end, is better off for the photo sharing service.But the problem here is that unlike the hardware/software paradigm, there\u2019s no single standard for \u201ca photo sharing service\u201d or a \u201ccloud storage service\u201d on the web today.Centralized platforms like Instagram often have to make a tradeoff between the openness they are willing to enable vs. control of their core technologies and data. Creating shared technology standards is great, but can be difficult when competing technology firms each want their R&D to be well-represented.So unlike the indirect network effects seen with a standard hardware platform and complementary software, we wind up with a proprietary cloud storage platform and a proprietary photo sharing service. How do they find synergies? Well, they do it by directly plugging together proprietary APIs.Consider Amazon S3\u2019s proprietary API for its cloud storage service. In order to create an integration between Amazon S3 and Instagram, the two products have to engage directly\u200a\u2014\u200aInstagram needs to sign up, create an Amazon account, pay for the service, and build new back-end code that plugs into Amazon\u2019s proprietary APIs. If Instagram finds a need for another cloud storage service (e.g. Google Cloud Platform), it would need to sign up, create an account, and pay for the service, and build additional back-end code that plugs into Google\u2019s proprietary APIs and so on. One proprietary API after another.Soon enough, your application architecture looks like this:Are you ready for the other shoe to drop? Well then, let\u2019s take a look at how this all changes when you\u2019re building on an open, decentralized platform like Ethereum.How Ethereum tackles the synergy\u00a0problemEthereum is a blockchain with a built-in Turing-complete programming language and state-management capabilities that make it simple to write smart contracts and decentralized applications. In theory, this enables us to build a more \u201cdecentralized web\u201d.Just like the current web, we find indirect network effects between the Ethereum platform and all the applications that get built on top\u200a\u2014\u200aevery new user that gets added to the platform creates more demand for decentralized applications, which in turn creates a greater variety of decentralized applications. It\u2019s a win-win.But there\u2019s more.The beauty of building an application on Ethereum is that its decentralized, permissionless and open nature allows complementary applications to seamlessly integrate with each other as first class citizens.Proprietary APIs aren\u2019t a problem because every application is written on the same virtual machine (aka Ethereum Virtual Machine (EVM)) and uses the same underlying language (aka EVM Code), the same primitives (aka Smart Contracts, Accounts, Addresses, Transactions, Messages etc.), same fee structure (aka gas price), same state validation logic (e.g. proof-of-work, proof-of-stake), same wallets, etc.In other words, everything is built around a single shared standard.As a result, it\u2019s clear to see that there\u2019s also indirect network effects among every complementary decentralized applications that get built on top of Ethereum\u200a\u2014\u200aevery new application that gets added can seamlessly integrate with every other existing application, which in turns increases the value of all applications on the platform.Every time any of these applications adds a new user, it increases the value of that application, which in turn indirectly increases the value of every other application on the platform (again, because of the ability to seamlessly integrate and benefit from one another).And the best part is, all these synergies emerge automatically.Overall, the decentralized web pushes applications away from building up disproportional direct network effects and monopolistic business practices, to one where there are indirect network effects and synergies among every application built on Ethereum. Hopefully, this opens up lots of choice, flexibility and freedom.An Example of Synergies among Decentralized applications built on\u00a0ethereumBut will this really happen? Well, it\u2019s already happening, at least in the decentralized app microcosm.First, consider this handful of Ethereum apps:Golem: A platform built on Ethereum which sources computing infrastructure in a decentralized manner to create a global market for computation. A \u201cworldwide supercomputer\u201d that anyone can contribute to and/or buy from.Oracalize: A data carrier between external Web APIs and a decentralized application on Ethereum, where security is enforced by cryptographic proofs.uPort: A digital identity service built on Ethereum that makes it simple and safe to make statements about who a person or entity is when interacting with smart contracts and other uPort identities, either on-chain or off-chain.Gnosis: A decentralized prediction market that operates on the Ethereum blockchain. By using the platform, individuals and companies will be able to forecast future events (e.g. expected stock fundamentals, price discovery, etc.)Aragon: A decentralized governance platform built on Ethereum that offers various services to managed decentralized services and entities.Finally, let\u2019s walk through an example of what real-world automatic synergies on Ethereum look like.Say you\u2019re building a decentralized insurance application. With the addition of uPort to the ecosystem, you no longer have to do KYC and digital signatures yourself, and can seamlessly use uPort to verify a user\u2019s identity. Similarly, every other application on Ethereum automatically benefits from the identity service uPort provides. And every time uPort adds a new user, it benefits the entire ecosystem because more users can be verified across any application that uses uPort.With the addition Golem to the ecosystem, you can use their distributed plug-and-play computation platform for running various services within your insurance application. Similarly, every other application on Ethereum natively and automatically benefits from their service. Every time Golem adds a new user (i.e. machine), it adds more compute power to the system and benefits the entire ecosystem.With the addition of Gnosis, your insurance application can get market predictions of the uncertain outcome that a borrower on your platform will default on their loan. Similarly, every other application built on Ethereum benefits from a predictions market for their own application. Every time Gnosis adds a new user, it makes its predictions market platform better, which benefits the entire ecosystem.With the addition of Oracalize, you can now fetch external information like price feeds, quotes, etc. Similarly, every other application built on Ethereum benefits from Oracalize by now having the ability to fetch external information.With the addition of Aargon to the ecosystem, you can now create a voting governance system that helps process insurance claims in a fast, cheap, and fair manner. Similarly, every other application on Ethereum can seamlessly use Aargon\u2019s governance system within their own applications. Every user that gets added to Aargon\u2019s platform makes their services better, which benefits the entire ecosystem.\u2026 and so on.All these integrations happen seamlessly, without custom integrations, back-ends, payment models, APIs, and so on.This is just a small scaled version of what\u2019s possible. There are seriously endless possibilities for these automatic synergies.The irony of Ethereum: removing friction makes monopolies difficultThe flip side of all this is that it becomes much harder to build giant businesses off direct network effects on Ethereum. The radically streamlined ecosystem makes the cost of switching to alternative services much lower. Even from an end user\u2019s perspective, it becomes much simpler to switch from one service to another, so long as they are on the underlying Ethereum platform and have an Ethereum account/address that works across any application.Unlike the LinkedIn example I used at the beginning of this post, creating a \u201cmoat\u201d around any service becomes difficult since most of the proprietary puzzle pieces have been removed from the picture. How this \u201cmonopoly resistance\u201d feature will play out as real-world businesses choose Ethereum as their playing ground remains to be seen.Regardless of the outcome, I\u2019m personally excited about the enormous potential for a system where apps as well as users can create value with little to no friction.", "responses": "23"}, {"title": "Ethereum Casper\u00a0101", "author_name": "jon choi", "link": "https://medium.com/@jonchoi/ethereum-casper-101-7a851a4f1eb0?source=search_post", "post_date": "Oct 21, 2017", "readtime": "25 min read", "upvotes": "5.1K", "content": "Ethereum Casper\u00a0101jon choiBlockedUnblockFollowFollowingOct 21, 2017tl;dr Casper will implement proof of stake in Ethereum. We begin with a review on why proof of stake matters and continue with its strengths & weaknesses. This post aims to provide a broad overview of Casper and clarify some of the confusion with respect to the two protocol design efforts related to Casper. The two proposed implementations share the same core design principle: applying cryptoeconomic mechanism design to secure the network while managing challenges regarding liveness, safety and synchrony assumptions. This post is also an overview of the progress so far and the challenges that lie ahead. Most importantly for fellow newcomers, the post identifies & defines key concepts and ties together various helpful resources under one context. The overarching intention is to make Casper and proof of stake more approachable to everyone in the community.Enjoy and please don\u2019t hesitate to reach out with questions, corrections or feedback (email, twitter).OutlineIntroductionProof of StakeA Tale of Two CaspersWhy Casper MattersDesign PrinciplesChallengesFuture WorkGlossaryConclusionIntroductionCasper is hardly a new project as it dates back to 2014, so fortunately it has a lot of related information online. However, despite the wealth of information out there, there\u2019s no easy jumping-off point for a beginner to ramp up and start engaging with the project. That\u2019s why I\u2019m writing this post.While other posts, videos and papers focus on the specification, implementation and verification of Casper. This post focuses on the various guiding design principles of Casper, how it differs from competing approaches, why you should care about it, and how you can contribute to this project.In addition, Casper has maintained an exceptionally open and collaborative culture among Ethereum researchers, developers and community members. I hope this post can continue that tradition by introducing you to Casper and convincing you why it\u2019s important to Ethereum as well as the larger public blockchain ecosystem.To summarize, this post is:A quick and broad introduction to PoS and Casper.Discussion on why Casper matters, its design principles and its challenges.A list of key resources and terms to get you started with PoS and Casper.This is not:A full history of Casper.Specification of Casper.Implementation details of Casper.Formal verification of Casper.If this is review for you, a list of resources are linked throughout the post.With that, I hope you enjoy this beginner-friendly introduction to Casper: Ethereum\u2019s proof of stake research and implementation.Proof of\u00a0Stake(If you\u2019re already familiar, please feel free to skip ahead to the next section: \u201cWhat is Casper?\u201d)Proof of Stake (PoS) is a category of consensus algorithms for public blockchains that depend on a validator\u2019s economic stake in the network.In proof of work (PoW) based public blockchains (e.g. Bitcoin and the current implementation of Ethereum), the algorithm rewards participants who solve cryptographic puzzles in order to validate transactions and create new blocks (i.e. mining). In PoS-based public blockchains (e.g. Ethereum\u2019s upcoming Casper implementation), a set of validators take turns proposing and voting on the next block, and the weight of each validator\u2019s vote depends on the size of its deposit (i.e. stake). Validators are rewarded for their service to the network, but the stake also acts as an economic disincentive for bad actors.Significant advantages of PoS include security, reduced risk of centralization, and energy efficiency.Explicit Economic\u00a0SecurityIn PoW, your downside is capped at how much energy cost and hardware depreciation you incur and therefore has an implicit cost that adjusts dynamically (via 10 min block time target). While PoS has its own challenges (discussed later in the post), one of its major strengths is the flexibility to explicitly design the penalties of Byzantine behavior (i.e. not following the protocol). This gives the protocol designer increased control over dialing in the \u201cshape\u201d of the asymmetric risk & reward profile of various actions within the network. One proxy for security is the cost of doing damage to the utility and correctness of the network, and therefore the ability to have explicit penalties (perhaps at levels that are more draconian than PoW) can increase the security of the network (i.e. economic security).On a related note, Vitalik further argues that PoS has better recovery properties. In PoW, there\u2019s an issue of \u201cspawn camp\u201d attacks that can render a blockchain unusable. In PoS, the network can delete the attacker\u2019s stake and prevent repeated attacks. The economic analysis further clarifies this concept. The marginal cost of repeated attack is the same as the first round in PoS. Whereas in PoW, the main marginal cost for another round during a 51% attack is the power cost (the incremental hardware depreciation & physical space cost is minimal for repeated attacks). To drive the point home, let\u2019s paraphrase Vlad Zamfir, the cost profile of a repeated 51% attack in PoS is as if \u201cyour ASIC farm burned down\u201d with each additional round.Mitigation of CentralizationProof of Stake mitigates the impact of economies of scale in making consensus. In proof of work, we can already see that the network trusts a relatively concentrated set of mining pools (e.g. AntPool) to secure the network. Larger proof of work mining pools can lower the unit cost of their technical and operational infrastructure (datacenter costs, power costs, personnel) by both (1) amortizing a fixed cost over a larger operation and (2) having bargaining power by operating as a larger entity.This means that two sets of mining pools with equal economic cost, one may be able to achieve a higher hash rate and have more influence in the network, dollar for dollar. For example, 10,000 miners that each spend $1/min ($87.6M/yr) may have less hashing power than one mining pool that spends $10,000/min (despite also spending $87.6M/yr). (Further work: quantifying the benefits to centralization in PoW mining would be fascinating. i.e. is it 1bps, 1% or multiples in hashing power per dollar invested?)However, in proof of stake, a dollar is a dollar. The benefit here is that you can\u2019t pool together to make a dollar worth more. Nor can you develop or buy application-specific integrated circuits (ASICs) to have an advantage technologically. So, PoS intends to mitigate the regressive distribution of PoW mining rewards and move directionally towards proportional distribution. (Going beyond proportional to progressive distribution will require mature decentralized reputation/identity management services).Energy EfficiencyProof of work relies on wasting resources to secure the network. Bitcoin currently uses over 20 TWh per year of power, which is close to the power consumption by the entire country of Ecuador. In order for Bitcoin to have broader adoption and operate at Visa\u2019s scale, it would have to waste as much power as a much larger country. Extrapolating it\u2019s current pace, one can see why proof of work may not be a sustainable path forward.While Bitcoin may serve an important social function that may indeed exceed its financial costs and environmental externalities (i.e. Nick Szabo\u2019s social scalability argument), proponents of PoS believe it is possible to replicate the incentive mechanisms of a PoW blockchain without wasting as much energy (by orders of magnitude). Alternatively, some may argue there exists a price of negative externalities where even the benefits of social scalability might be outweighed by the environmental costs.While the exact answer is hard to ascertain a priori, I believe the crypto ecosystem as a whole has the responsibility to explore all promising consensus mechanisms to weigh their pros/cons and feasibility. (For example, it\u2019s great that other projects are testing the benefits and feasibility of various forms of proof of storage, among others.)Taking a step back, it\u2019s also worth noting the two kinds of costs to PoW issuance. There are internalized costs, which are paid by miners and passed on to currency holders. Then there are externalized costs, such as the environmental costs and subsidies from governments (most likely in the form of cheaper electricity). In PoS, there are low consensus costs (no power & hardware costs), which allows for low issuance. As the network matures, it may even allow for negative issuance (net of burned tx fees as well as any penalties and slashing), which can have a price-stabilizing effect.Therefore, not only is lower energy consumption better for the environment but it also enables simpler mechanism design. That is because lower energy consumption allows for substituting realized costs (power and depreciation costs are nonreversible) with potential economic value-at-loss (i.e. believable risk of unrealized costs) in order to secure the network. This is a key underlying hypothesis of PoS: both realized costs and prospect of losing money can incentivize participants to secure the network. Therefore\u2013while difficult\u2013it is possible (and thus preferable) to secure public blockchains via loss aversion, which can decrease the public costs and deadweight losses in a system.Proof of Stake:\u00a0SummaryThat sums up the main benefits of PoS. While Casper provides specific benefits to Ethereum (discussed below), a significant portion of its importance are the general benefits of PoS: explicit economic security, mitigation of centralization and energy efficiency.So, now that we\u2019ve discussed PoS, let\u2019s dive into Casper.Further Reading on\u00a0PoSProof of Stake FAQ in Ethereum wikiProof of Stake Design Philsophy by Vitalik ButerinCritique of PoS by Tuur Demeester (and comments 1, 2, 3)Tendermint Whitepaper by Jae KwonCryptocurrencies without Proof of Work by Iddo Bentov et al. (Slides)Bitcoin Wiki on Proof of StakeSelect examples: Tendermint, Polkadot, Peercoin.A Tale of Two\u00a0CaspersIn simple terms, Casper is Ethereum\u2019s Proof of Stake work stream.Casper is not a specific implementation but a family of two main projects under active research by the Ethereum team. Informally, there\u2019s \u201cVitalik\u2019s Casper\u201d aka Casper FFG and \u201cVlad\u2019s Casper\u201d aka Casper CBC (explained below). This subtlety isn\u2019t clear until you start diving deep into Casper materials online, which can be very confusing to the \u201cuninitiated.\u201d (In fact, that is a main motivator for this post). While independent implementations, they have the same goal in mind: moving Ethereum over to proof of stake.(Despite a surprisingly common impression that Ethereum is already implementing PoS, it is still a PoW chain (using ethash). While being memory hard and more ASIC-resistant than Bitcoin, Ethereum is a PoW chain nonetheless and has the same drawbacks with respect to energy efficiency.So with that, let\u2019s briefly discuss the two Caspers.FFG vs\u00a0CBCCaveat: both of these projects will present more detailed papers and proof of concepts the weeks following Devcon3, but here\u2019s a quick preview of their approaches.Casper the Friendly Finality Gadget (\u201cFFG\u201d)\u200a\u2014\u200aaka \u201cVitalik\u2019s Casper\u201d\u200a\u2014\u200ais a hybrid PoW/PoS consensus mechanism, which is the immediate candidate for Ethereum\u2019s first bridge to proof of stake. More specifically, FFG implements a proof of stake mechanism as an overlay on top of a proof of work chain (such as Ethereum\u2019s ethash PoW chain). Simply, the blockchain would grow every block with the familiar ethash PoW algorithm, but every 50 blocks is a PoS \u201ccheckpoint\u201d where finality is assessed via a network of validators.Casper the Friendly GHOST: Correct-by-Construction (\u201cCBC\u201d)\u200a\u2014\u200aaka \u201cVlad\u2019s Casper\u201d\u2014differs in approach from traditional protocol design: (1) the protocol is partially specified in the beginning and (2) and the rest of the protocol is derived in a way that is proven to satisfy the desired/requisite properties (typically protocol is fully defined then tested to satisfy the said properties). In this case, one way to derive the full protocol is to implement an estimate safety oracle (\u201can ideal adversary\u201d), which either raises exceptions of a fault of a justified estimate or enumerates the potential future faulty estimates. More specifically, Vlad\u2019s work focuses on designing protocols where one can extend local views of a node\u2019s estimate of safety to achieve consensus safety.Taking a step back, FFG focuses more on a multi-step transition to introducing PoS for the Ethereum network. This prepares for an iterative implementation that increases the role of PoS in the network over time. (PoS will claim a smaller portion of the rewards to start). In contrast, CBC focuses on formal methods that derive safety proofs \u201cby construction\u201d from first principles. Albeit confusing, the different approaches to solving this problem created two distinct work streams that complement each other well. The final form of Casper will likely draw from learnings from both FFG and CBC.Next stepsWhile substantial progress was achieved, many of the details\u200a\u2014\u200aboth at the higher mechanism design level and at the lower implementation level\u200a\u2014\u200aremain to be finalized. This is openly acknowledged by both Vitalik and Vlad, and this can be an invitation for more of the community to engage to move the conversation forward.In sum, both research projects are very active, and more updates should be available at Devcon3 in November. The role of this overview does not include going into more detail, but please feel free to dive into more implementation and design details in the links below (This doc will likely be updated or followed up once FFG and CBC papers are released).Links for\u00a0FFGCasper FFG Basics Paper by Vitalik Buterin and Virgil Griffith (Draft)Casper Github Repo (FFG)Karl Floersch\u2019s FFG Implementation on pyethereumFurther Reading on\u00a0FFGSimple explanation on Reddit by Vitalik Buterin. August 2017.Minimal Slashing Conditions by Vitalik Buterin. March 2017.Safety Under Dynamic Validator Sets by Vitalik Buterin. March 2017.Slasher by Vitalik Buterin. January 2014.Weak Subjectivity by Vitalik Buterin. November 2014.On Settlement Finality by Vitalik Buterin. May 2016.Triangle of Harm by Vitalik Buterin. July 2017.Casper Economic Incentives Overview by Karl Floersch. Sept 2017.Formal Methods on Another Casper by Yoichi Hirai.Github. ethereum/casper.Links for\u00a0CBCWill be updated after Devcon3Further Reading on\u00a0CBCCasper CBC CESC deck and video by Vlad Zamfir. September 2017.Casper CBC EDCON deck by Vlad Zamfir. (Video part 1, part 2) February 2017.Devcon2 CBC Casper Deck and video by Vlad Zamfir. October 2016.2016.12.06 History of Casper: Chapter 1 by Vlad Zamfir\u200a\u2014\u200aHow Vlad started working on Ethereum and PoS. Slasher and deposits (Mar 2013\u200a\u2014\u200aSep 2014)2016.12.07 History of Casper: Chapter 2 by Vlad Zamfir\u200a\u2014\u200aNothing-at-stake. Bribing attack. Long range attack. Game theory and security research. (Fall 2014)2016.12.11 History of Casper: Chapter 3 by Vlad Zamfir\u200a\u2014\u200aFinality. Synchronicity Assumptions. Slashing Conditions. Tendermint. (Sep \u201914\u200a\u2014\u200aDec \u201914)2016.12.12 History of Casper: Chapter 4 by Vlad Zamfir\u200a\u2014\u200aCooperative Game Theory. Oligopolies. How Casper is different than other PoS consensus designs. (Dec\u201914\u200a\u2014\u200aJan \u201915)2016.12.30 History of Casper: Chapter 5 by Vlad Zamfir\u200a\u2014\u200aCensorship. Defining decentralization. Availability vs Consistency. Friendly GHOST (Feb \u201915\u200a\u2014\u200aMarch \u201915)History of Casper series is to be continued\u2026Why Casper\u00a0MattersNow that we have decoded what this mysterious Casper project is. Let\u2019s synthesize what we learned about PoS and Casper to understand why this matters.In simple terms:Decentralization (covered in PoS)Energy efficiency (covered in PoS)Explicit Economic Security (covered in PoS)Scaling EthereumGentle Transition from PoWBecause of Proof of\u00a0StakeThe first three points are covered in the Proof of Stake section. However, it is worth mentioning that at ~$28B, Ethereum is the second largest cryptocurrency and represents ~18% of the total market cap of the space. So any incremental decentralization and gains in energy efficiency can have a non-trivial impact today and a very significant impact in the future.As a review, (1) PoS has less available economies of scale because\u200a\u2014\u200a\u201cdollar for dollar\u201d\u200a\u2014\u200aa miner/validator can\u2019t achieve outsized influence on the network. In PoW, a large mining pool might get more hashing power per dollar than an individual miner, whereas in PoS, a dollar is a dollar, which will likely mitigate the centralizing forces in mining.And (2) whereas PoW relies on energy wastage for network security, PoS relies on the potential of losing a deposit for network security. The challenge then becomes (3) how we mimic (and enhance) the positive features of PoW and mitigate the weaknesses of PoS with economic mechanism design.Because of\u00a0ScalingNext, let\u2019s talk about something new: (4) scaling. The key to understanding this is two-fold: (a) Casper is about establishing explicit finality (as opposed to probabilistic finality) and (b) explicit finality enables maintaining network security while scaling via sharding.In PoW chains, finality is implicit (just as \u201cskin in the game\u201d is implicit via power wastage). The implicit nature of finality in PoW chains is apparent when you examine how transactions are finalized in real use cases. Depending on the magnitude and importance of the payment, you wait for additional number of block confirmations (number of block times since a transaction appears in the longest chain). For example, for a coffee, you might be okay with a few confirmations, but for buying a car, you may need more than the average number of confirmations.In contrast, Casper provides a concept of explicit finality. For example, Casper FFG begins to overlay finality on top of the PoW chain. So the underlying chain continues to have an implicit way of determining how final a transaction is. However, Casper FFG provides explicit finality after about 2.5 \u201cepoch times.\u201d (Each epoch time being a sequence of 50 PoW blocks. A checkpoint is the last block in an epoch. It is first \u201cjustified\u201d then \u201cfinalized\u201d by a validator set. More details available in the paper linked above and potentially a future post.)At that point, with certain Byzantine Fault Tolerance assumptions, we can be sure that either our assumptions have been violated or that the checkpoint is final. Since we are also aware of the validator set a priori (which can also be dynamic), bad actors are penalized through fault attribution.So how does this relate to sharding & scalability? Having this explicit finality allows more flexibility in how much (more accurately, how little) each node in the network has to do. Having more regular explicit finality allows further exploration of questions such as: what if not every node had to hold all of the state or all of the transactions? what if not every node had to validate every transaction? These questions of having heterogenous \u201cresponsibilities\u201d of nodes in public blockchains are tackled by a workstream around blockchain sharding.So to go back to the point, if we are to explore each node in the network \u201cdoing less\u201d or \u201cknowing less,\u201d it is hugely beneficial to consider only the past few epochs of finality rather than the entire probabilistic chain since the genesis block. Therefore, at this epoch time interval, finality doesn\u2019t actually help with confirming a simple transaction, since transactions clear in number of confirmations fewer than the epoch time. Instead, finality will enable public blockchains to scale beyond the current ~10 transactions per second to larger orders of magnitude.Because Ethereum is worth\u00a0~$28BThe final point is (5) a gentle transition from PoW. Here\u2019s the context for newcomers such as myself. Ethereum\u2019s explicit goals to move to PoS predates the significant increase in the value of ether this year. The plan is to start with a hybrid PoS overlay on top of the ethash PoW chain and to ramp up gradually towards \u201cpure\u201d PoS. Given the significant increase in ETH network value, this gradual transition to PoS is a prudent strategy to prevent potential value destruction while transitioning a significant piece of the underlying Ethereum infrastructure.Further ReadingSharding FAQ, Ethereum wikiOn Slow and Fast Block Times by VitalikDesign PrinciplesThis is a collection of design principles found in various posts by Vlad and Vitalik. Currently, the guiding design principles for Casper are scattered around various resources. Hope reading them in one go provides more clarity on the overall design principles.Economics to design behavior. Explicit economic mechanism design can achieve implicit economic incentives found in other social contracts (i.e. consensus protocols like proof of work). If you like analogies, search \u201cbig games\u201d in History of Casper part 3.Maximize cost of attack. For example, the amount of damage that an attacker can do to a protocol\u2019s utility should be bound by some \u201cgriefing factor.\u201d In order to do $100 of damage, it shouldn\u2019t cost $0.01. It should hopefully cost in the order of $100. In other words, we want to minimize the \u201cattack multiple\u201d of each dollar used for attacking the protocol (more on this coming in another post).Public cost-benefit, not just private. Protocol economics should account for social (i.e. \u201cpublic\u201d) cost & benefit (negative and positive externalities) as we begin scaling public blockchains. Energy cost, environmental impact and wealth distribution are some notable examples.Prevent economies of scale. Centralization weakens the main value proposition of public blockchains. Preventing economies of scale prevents those centralizing factors and build more secure blockchains.Network security is derived from \u201cskin in the game.\u201d Simple yet worth reiterating. The more you have to lose, the more we can trust you as a validator. Whereas burning energy secures proof of work chains, \u201cputting up economic value-at-loss\u201d secures proof of stake chains.Design for oligopolies. Cooperative game theory is the name of the game as a protocol won\u2019t be able to fully mitigate the inherent centralizing forces (e.g. economies of scale) in a network. This means analyzing all edge cases that involve self-interested cartel behavior. Notably, a protocol should disincentivize cartels from bullying non-cartel validators (i.e. be \u201cfriendly\u201d)Accountable safety. Design that makes it possible to attribute faults to bad actors as much as possible. Casper relies on the ability to slash attributable Byzantine behavior.Plausible liveness. Design that doesn\u2019t allow attackers to block the chain from continuing to propose and vote on checkpoints/blocks. This is where Casper differs from other implementations such as Tendermint, which will \u201clock up\u201d if safety isn\u2019t achieved synchronously.Minimal synchronicity assumptions. To allow for liveness and \u201cunblock\u201d the chain growing, Casper has minimal synchronicity assumptions. In fact, we expect nodes to log on as infrequently as every couple of months.Decentralized things should be able to regenerate. A protocol is decentralized only if it can fully recover from the permanent removal of all but one of its nodes. Availability, not just consistency (Again, Tendermint is susceptible to getting \u201cblocked\u201d and cannot regenerate; the validator set for each branch can keep getting smaller per Matthew Wampler-Doty and Vlad\u2019s observation)Disincentivize censorship. The major tradeoff is that validators have a new attack vector by deliberately going offline. However, cartel censorship is the greater evil here. Choosing the right relative cost of censorship vs. rewards and other penalties (as a % of deposits) will be the key to getting this right.Further ReadingPoS Design PhilosophyHistory of Casper (links above)ChallengesBroader list of Ethereum challenges are available here.Challenges for Proof of\u00a0StakeNothing-at-stake problem\u200a\u2014\u200aIf there\u2019s a fork in the chain, the optimal strategy for any validator is to validate on every chain, so that the validator gets their reward regardless of the outcome of the fork.Long range attack\u200a\u2014\u200aSame mechanism as 51% attack (make a longer chain that rewrites the ledger in the attacker\u2019s favor), but instead of starting the attack 6 blocks back, go much further back in the chain\u2019s history (i.e. 60,000 blocks). This is a problem for PoS since there\u2019s no proof of work (or equivalent time-intensive operation) required to rewrite a very long chain.These two main challenges are solved via ideas from slasher (and its improved variations). The main points are that (1) validators are known, which allow for fault attribution at a validator level and (2) by having \u201cslashing conditions\u201d that strongly disincentivize certain actions, it is possible to mitigate these issues. Again, this example is crucial in understanding the Casper team\u2019s view on consensus algorithm design: we can leverage economic mechanism design to a secure distributed system.Criticisms of Proof of\u00a0StakeAdverse selection\u200a\u2014\u200aGiven the potentially draconian penalties, many average or risk-averse \u201ccandidate validators\u201d may stay away from participating as a validator. Then, one may argue people with more to gain by \u201cgaming the system\u201d are more likely to join as a validator. More broadly, one may claim that\u200a\u2014\u200aon average\u200a\u2014\u200aa good actor may never have a better ROI than a bad actor.Response:\u00a0This falls under future work and an area of great focus for the research team: cryptoeconomics. As the parametrization of the mechanism is progresses, the team will iterate on optimizing the constants the balance the risk reward tradeoffs as well as their proportion to the size of the deposits and the action of others (Byzantine behavior).It\u2019s worth mentioning that this problem is also existent (albeit to a lesser degree given the nature of proof of work) in Bitcoin.\u201cThe rich get richer\u201d\u200a\u2014\u200aAnother common concern when people hear \u201ca consensus algorithm based on how much money you\u2019re staking\u201d is that this may exacerbate wealth inequality within the crypto ecosystem as well as more broadly in the global economy.Response:\u00a0The main takeaway here should be that Proof of Stake is considerably more egalitarian (i.e. gives less benefit to having more capital) than the incumbent Proof of Work based algorithm of Bitcoin.As discussed in the Proof of Stake overview above, PoS mitigates economies of scale, which diminishes the centralizing force among miners. Again, in PoS, a dollar is a dollar.Therefore, against the fair intuition that PoS can exacerbate wealth inequality, it is in fact a non-trivial improvement on the status quo.Quick aside: In order to have diseconomies of scale or progressive wealth distributions in PoS (one more degree of counteracting wealth inequality), I posit that it is necessary to have mature and reliable identity or reputation systems. Otherwise, larger pools of money will have \u201csybil behavior\u201d that spreads their wealth over many \u201cless wealthy\u201d false identities that will collectively capture the benefits of a progressive reward system. However, this challenge is out of scope for Casper and will be faced further down the road.Questions/Concerns around\u00a0Casper\u201cIt\u2019s confusing to have multiple Caspers.\u201dSorry about that! This post aims to lessen the cognitive dissonance around that fact. But to review, Casper is Ethereum\u2019s family of PoS research and implementations. These work streams will likely converge, but the nature of protocol research requires forking sometimes to explore various approaches until deciding on the best way forward. Things tend to get more complex before they get simpler \ud83d\ude42\u201cHow does Casper differ from Tendermint?\u201d\u00a0The simplified answer here is that Casper focuses on liveness (availability) and can accept less immediate safety (correctness). While Tendermint is a great project, its downside is that the chain will stall if a checkpoint doesn\u2019t have 2/3 of the votes. That is one of the reasons why Ethereum is working on Casper rather than working off of Tendermint.To quote Vlad Zamfir:Tendermint favours consistency over availability, Casper favours availability over consistency (see the CAP theorem).Tendermint doesn\u2019t punish online validators for potentially censoring potentially-actually-just-offline validators.For further reading on this topic: Hudson Jameson\u2019s explanation this quote, reddit discussion featuring Vitalik & Jae Kwon, and the Tendermint whitepaper.\u201c \ud83d\ude31 You\u2019re going to change the engine of a live $28B network?\u201d\u00a0Yes, that is very ambitious and daunting. However, moving to PoS was the intent since the early days, and one of the guiding principles of the project. The community members were very much aware of Ethereum\u2019s plans to switch to PoS (i.e. refer to Ethereum Ice Age\u200a\u2014\u200athe PoW chain difficult adjustment to encourage migration to PoS\u200a\u2014\u200awhich is commonly known in the ecosystem).This should go without saying, but the team will be rolling out the change in stages with the test network. Also, the initial implementation is a hybrid where the PoS elements have less of an economic impact\u200a\u2014\u200aand therefore impact on security\u200a\u2014\u200athan in the eventual \u201cpure\u201d PoS consensus.\u201cIn practice, transactions are cleared in 10 blocks. Why does finality matter over a 50 block epoch?\u201dWe covered this above, but let\u2019s go over this once again since it\u2019s important.First, Casper enables sharding.This was very unclear to me in the beginning, but that\u2019s because we need to take a step back from Casper for a moment. Ethereum has many goals, but one of them is to provide a scalable blockchain solution, both technically and environmentally. Ethereum is building for a world where cryptocurrencies have a larger place in the global economy and grow by many orders of magnitude. In that vision, Casper aims to prevent the wasted energy of PoW mining but we still need to scale Ethereum technically. That project is largely encompassed under sharding.Today, every node in the network does everything. Sharding explores various ways to decrease the average responsibility of each node. The details are out of scope of this post, but an example might be to pose the question: \u201care there ways to create a new mechanism, where only small subset of nodes verifies each transaction?\u201dThe takeaway is that the periodic finality provided by Casper will mitigate lower security related to implementing sharding.Second, explicit finality allows for a consistency-favoring blockchain. To quote Vitalik:In a PoW chain, if there is, for example, a geth/parity consensus split, then both chains keep growing, and exchanges running one client or the other risk finalizing deposits on a bad chain. But if exchanges wait for Casper finality, then in a 50/50 split it\u2019s likely *neither* chain will finalize. This increases the safety of the platform, as in extreme circumstances it \u201cdefaults toward finalizing nothing\u201d rather than finalizing *the wrong thing*.In sum, contrary to intuition, explicit finality matters less for transaction clearing and more for blockchain scalability and safety.Future WorkExecutionFinalizing the design of FFG and CBC.Implementing proof of concept code.Deploying into test nets.\u201cThe One\u00a0Casper\u201dThinking about about the final state of Casper PoS. How to leverage concepts from both FFG and CBC to converge on a final state that is compelling, secure and elegant.Parameter OptimizationFor a given mechanism, optimize parameters and constants for intended incentivization. Iterate on mechanism design with findings.Community EducationWriting more about the thought process beyond various research work streams to keep engaging with Ethereum, PoS and broader crypto communities.Potential Future\u00a0PostsHistory of Casper Part 6Deep dive into how Casper enables shardingDeep dive into how and why Casper is different from competing designsNon-monetary measures of \u201cstake\u201d and \u201cskin in the game\u201d (i.e. $10,000 is worth more to average person than billionaire)Griefing Factor Analysis 2.0GlossaryWe covered a lot of concepts in this post, and you will run into some other common ones as you dive into the maze of Chrome tabs that will inevitably ensue. Here\u2019s a rough summary of the most helpful and common concepts you need to grok. Hope it helps!Proof of Stake\u200a\u2014\u200aa category of consensus algorithms for public blockchains that depend on a validator\u2019s economic stake in the network.Casper\u200a\u2014\u200aEthereum\u2019s proof of stake research and projects.Finality\u200a\u2014\u200aOnce an operation in a system completes, the system doesn\u2019t allow for the operation to be reverted (Vitalik on settlement finality). Context: in proof of work, finality is probabilistic and implicit. Casper is designing mechanisms that explicitly enforce finality.Fork Choice Rule\u200a\u2014\u200aA fork choice rule is a function, evaluated by the client, that takes as input the set of blocks and other messages that have been produced, and outputs to the client what the \u201ccanonical chain\u201d is.Slashing Conditions\u200a\u2014\u200aSet of rules that, if violated, penalize the validator.Sybil Attack\u200a\u2014\u200aan attack wherein a reputation system is subverted by forging identities in peer-to-peer networks.3 E\u2019s of Sybil Resistance\u200a\u2014\u200a1. Entry Cost 2. Existence Cost 3. Exit Penalty. (coined by Dominic Williams).Nothing-at-stake problem\u200a\u2014\u200aA proof of stake implementation challenge that refers to the inherent lack of downside for validating both chains in the case of a fork. It is a well-known problem of proof of stake that is considered solvable. For example, refer to Slasher.Bribe attack\u200a\u2014\u200aAttacker uses a bribe to change the Nash Equilibrium of a validator\u2019s game theory framework to undermine the security of the protocol. (More context in History of Capser pt 2)Long range attack\u200a\u2014\u200aSame mechanism as 51% attack (make a longer chain that \u201crewrote\u201d the ledger in the attacker\u2019s favor), but instead of starting the attack 6 blocks back, go much further back in the chain\u2019s history (think 60,000 blocks).DAG\u200a\u2014\u200a\u201cDirected Acyclic Graph\u201d. A finite directed graph with no directed cycles. (ETH Stack Exchange).GHOST\u200a\u2014\u200a\u201cGreedy Heaviest Observed Subtree.\u201d It\u2019s a chain selection rule with the objective of fast confirmation times while limiting compromises in security or decentralization. (Original Paper, ETH GHOST)Synchronicity\u200a\u2014\u200aRefers to the timing assumptions around the messages (i.e. synchronous, partially synchronous and asynchronous).Liveness\u200a\u2014\u200a\u201cAvailability.\u201d Protocol-following nodes eventually decide on a value. Opposite would be a network state that is blocked from deciding on a value (i.e. Tendermint without 2/3 votes at a given depth)Safety\u200a\u2014\u200a\u201cCorrectness.\u201d Protocol-following nodes decide on the same value. Another intuitive proxy is whether two conflicting blocks can be committed.FLP Impossibility Theorem\u200a\u2014\u200a\u201cIt\u2019s impossible to have a live, safe and asynchronous network\u201d (formally proven as well).Accountable Faults\u200a\u2014\u200aFaults that can be attributed to a specific validator or specific set of validators.Byzantine Faults / Byzantine Behavior\u200a\u2014\u200aAny fault presenting different symptoms to different observers. Non-protocol following behavior.Byzantine Failure\u200a\u2014\u200aLoss of a system service due to Byzantine faults in a system that requires consensus.Byzantine Fault Tolerance (\u201cBFT\u201d)\u200a\u2014\u200aAbility for a system to tolerate Byzantine faults. 1/3 Byzantine fault threshold in asynchronous networks. 1/2 in synchronous networks. (BFT consensus algorithms include Paxos, PBFT as well as newer Casper and Tendermint).Nakamoto Consensus\u200a\u2014\u200aPoW-based bitcoin-style consensus building. Also, Nakamoto-style Consensus exists, which would be chain-based PoS as opposed to BFT-based PoS.Tendermint\u200a\u2014\u200aProof of Stake implementation that focuses on consistency. Never forks with less than 1/3 malicious actors, but downside is that the chain can stall if a chain lacks 2/3 of the validator votes.Validator\u200a\u2014\u200aAn entity that validates checkpoints/blocks of a blockchain for rewards. A miner analog in PoS.Validator Set\u200a\u2014\u200aSet of validators for a given chain at any given time.Checkpoint\u200a\u2014\u200aIn FFG, it is a block spaced in regular intervals (i.e. every 50 blocks) where the PoS validation mechanism is overlaid on top of the underlying PoW chain (e.g. Ethereum with ethash)Epoch\u200a\u2014\u200aIn FFG, it is a 50 block period where a validator can vote on the finality of its final block (i.e. checkpoint). PoW miners mine blocks and PoS validators validate checkpoints every epoch.Dynamic Validator Sets\u200a\u2014\u200aThe idea that a blockchain can have changing set of validators throughout a period. Treatment of this is a huge breakthrough in BFT-style consensus algorithms. Tendermint was first notable breakthrough. Casper is also working on this actively.Equivocation\u200a\u2014\u200aThe act of a validator sending two messages that conflict with each other (more specific definition on slide 28 of this deck).Dunkles\u200a\u2014\u200aMechanism that includes data from non-dominant block into the dominant block. This provides better incentive mechanisms and notably helps alleviate the nothing-at-stake problem (link).Proposal Mechanism\u200a\u2014\u200aMechanism by which a validator in the set will suggest a block to assess for justification or finalization.Justification \u2014In FFG for example, 2/3 of a validator set voting on a fresh checkpoint that a checkpoint is the accurate record. This is the intermediary step for a finalized checkpoint.Finalization\u200a\u2014\u200aIn FFG for example, 2/3 of a validator set voting on a justified checkpoint that a checkpoint is the accurate record. The completion of this step gives a checkpoint finality.State Transition System\u200a\u2014\u200aA system that maintains a given state (e.g. set of transactions or accounts) and its mutations over time (i.e. transition). Bitcoin, Ethereum, and other public blockchains can be considered state transition systems.Protocol Utility Function\u200a\u2014\u200a\u201c\u2026a formula that tells us how well the protocol is doing, that should ideally be calculable from inside the blockchain. In the case of a proof of work chain, this could be the percentage of all blocks produced that are in the main chain. In Casper, protocol utility is zero for a perfect execution where every epoch is finalized and no safety failures ever take place, with some penalty for every epoch that is not finalized, and a very large penalty for every safety failure. If a protocol utility function can be formalized, then penalties for faults can be set as close to the loss of protocol utility resulting from those faults as possible.\u201d (from Triangle of Harm)ConclusionOK, this was a lot of information for a \u201c101,\u201d but now you have all the basics covered and the context to dive into any Casper conversation. My intention in writing this post was (1) to provide an overarching thread of context across the plethora of information out there on Casper, (2) solidify my own understanding of Casper as I dive into cryptoeconomic research for Ethereum scaling (Casper, sharding, gas pricing), (3) to raise awareness and encourage conversation about PoS, Casper and Ethereum and (4) to convince talented mathematicians, economists, computer scientists and developers to start diving into the problems we are trying to solve.If you want to dive deeper, dive into the resources linked throughout the post, consider contributing to the future work, and talk to your math, CS, economics, game theory, and distributed systems friends (in and out of crypto) about Ethereum and Casper.If you\u2019ve made it this far, thank you for reading. Hope this helped and please reach out with questions, concerns or comments via email or twitter. We would love to hear your feedback!", "responses": "28"}, {"title": "Ethereum 2.0\u200a\u2014\u200aWho\u2019s building\u00a0it?", "author_name": "Darren Langley", "link": "https://medium.com/rocket-pool/ethereum-2-0-whos-building-it-54a735442e?source=search_post", "post_date": "Sep 6, 2018", "readtime": "4 min read", "upvotes": "6.3K", "content": "Ethereum 2.0\u200a\u2014\u200aWho\u2019s building\u00a0it?Darren LangleyBlockedUnblockFollowFollowingSep 6, 2018Ethereum\u2019s roadmap is ambitious. In our last article, we described the Ethereum 2.0 vision.As a recap, Ethereum 2.0 combines these key projects:Proof-of-stake (Beacon Chain, Casper FFG)ShardingeWASMOnce delivered, Ethereum 2.0 will support massive on-chain transaction throughput, while balancing decentralisation and security. With this foundation, Ethereum has the potential to be:A key piece of infrastructure for the world\u2019s transfer of value;A platform for new economic systems;A hub for global collaboration;Ethereum 2.0 is not being developed by a corporation; Ethereum is decentralised on multiple levels.Vitalik says it best:Blockchains are politically decentralized (no one controls them) and architecturally decentralized (no infrastructural central point of failure) but they are logically centralized (there is one commonly agreed state and the system behaves like a single computer)Vitalik Buterin (Meaning of Decentralization)Additionally, Ethereum is operationally decentralised (no single entity is responsible for keeping the blockchain running).So if no one controls Ethereum, how is Ethereum 2.0 being built?This is one of many fascinating aspects of Ethereum. It has an organic quality that hopefully will contribute to how human organisation can scale up but remain inclusive.The Ethereum protocol describes the interactions necessary to produce the Ethereum blockchain. It is a massive open source project. A large community of researchers and implementors propose ideas, discuss, refine, and implement the Ethereum protocol. The Ethereum Foundation are influential in this process and have highly regarded researchers and implementors, but decisions are made by the community through consensus.The software used to run Ethereum is called a client or node. Many Ethereum client implementations exist, written by different software development groups (all are open-source).In addition to client implementations, there is an entire ecosystem of open source software projects working on building different aspects of Ethereum.These include:Smart Contract Languages (Solidity, Vyper)RPC Libraries (web3js, ethers, Nethereum)Development Tools (truffle, ganache, solc, solium, embark)Enough context, let\u2019s get into the meat and potatoes.", "responses": "12"}, {"title": "Ethereum\u2019s Vitalik Buterin on the Bitcoin Bubble and Running a $125bn Blockchain", "author_name": "The Financial Times", "link": "https://medium.com/financial-times/ethereums-vitalik-buterin-on-the-bitcoin-bubble-and-running-a-125bn-blockchain-4ce5f25e7046?source=search_post", "post_date": "Apr 19, 2018", "readtime": "10 min read", "upvotes": "", "content": "Ethereum\u2019s Vitalik Buterin on the Bitcoin Bubble and Running a $125bn BlockchainThe coder on the highs and lows of being at the helm of one of the most successful cryptocurrenciesThe Financial TimesBlockedUnblockFollowFollowingApr 19, 2018Photo: BackyardProduction/Getty ImagesBy Chloe CornishUp in San Francisco\u2019s Monterey Heights district stands a modest detached house; a house that would be perfectly ordinary\u2026", "responses": ""}, {"title": "Announcing Ethereum & Litecoin\u00a0vaults", "author_name": "Jesse Pollak", "link": "https://blog.coinbase.com/announcing-ethereum-litecoin-vaults-b10c3250cbe6?source=search_post", "post_date": "Sep 21, 2017", "readtime": "2 min read", "upvotes": "3.1K", "content": "Announcing Ethereum & Litecoin\u00a0vaultsJesse PollakBlockedUnblockFollowFollowingSep 21, 2017Today, we\u2019re excited to launch Ethereum and Litecoin vaults for all customers, bringing these assets in line with our current Bitcoin storage offerings. With vaults for Bitcoin, Ethereum, and Litecoin, customers get additional layers of withdrawal security for stored digital currency, such as a 48-hour withdrawal delay and required email approvals.A little more than 3 years ago, we launched Bitcoin vaults for Coinbase customers. Our goal was to help eliminate the false idea that Bitcoin owners had to choose between security or convenience when it came to storage. Coinbase vaults gave customers the best of both worlds by providing a standard account for easy access and a vault for long-term storage.We\u2019re now bringing this product to Ethereum and Litecoin, continuing our mission to make Coinbase the easiest, most secure place to buy, sell, and hold digital currency.Visit coinbase.com/accounts and click \u201cNew Account\u201d to set up a BTC, ETH, or LTC vault today. To learn more about the vaults product, visit coinbase.com/vault.", "responses": "37"}, {"title": "Bitcoin & Ethereum: Prices are Down More than the Fundamentals", "author_name": "Chris Burniske", "link": "https://medium.com/@cburniske/bitcoin-ethereum-prices-are-down-more-than-the-fundamentals-88fd18a86d14?source=search_post", "post_date": "Dec 9, 2018", "readtime": "6 min read", "upvotes": "5.8K", "content": "Bitcoin & Ethereum: Prices are Down More than the FundamentalsChris BurniskeBlockedUnblockFollowFollowingDec 9, 2018To follow is a very rough analysis, zoomed out to give us perspective on Bitcoin\u2019s 10 years of life, and Ethereum\u2019s 3+ years. If you disagree with my approximations, I encourage you to perform your own exploration of fundamentals vs. price and share your findings with the world.Before going on Bloomberg or CNBC, I always run through the fundamentals of the network(s) I\u2019ll be talking about. When doing this last, I realized that fundamentals of quality cryptonetworks are down less than prices, and significantly so.For me, fundamentals of a cryptonetwork come down to the health of the supply-siders and demand-siders. Supply-siders are the folks who provision the network\u2019s service (currently, the most common form of supply-sider is a miner), and demand-siders are the ones who consume the service. For this post, I\u2019m going to focus on Bitcoin and Ethereum, comparing prices to fundamentals. You can do the same for other networks, so long as they actually exist (many ICOs still do not have operating networks).As a more accurate representation of price, I\u2019m going to use network value (\u201cNetwork Value\u201d = \u201cPrice per Unit\u201d x \u201cUnits of the Cryptoasset Outstanding\u201d), as this shows the aggregate value the market is placing on a cryptonetwork at present.In terms of demand-side and supply-side fundamentals, here are the simple ones I\u2019ll showcase:Bitcoin Demand-Side: Number of Daily Transactions (#), Estimated Daily Transaction Value (USD), Daily Unique Addresses Used (#).Ethereum Demand-Side: Number of Daily Transactions (#), Total Daily Gas Used (if you don\u2019t know what gas is, read this).Bitcoin & Ethereum Supply-Side: Hash Rate.In the graphs that follow, I\u2019m going to contrast how fundamentals and network values have performed since 12/17/17 and 1/13/18, for Bitcoin and Ethereum respectively. These two dates were the peak network values for both assets, per Blockchain.info and Etherscan, which is where I sourced all data.If a fundamental is down since those dates, then we\u2019ll look at how down and compare it to how much network value is down. If the fundamental is not down, then we already know it\u2019s outperforming the market\u00a0:-)Number of Daily Transactions (Demand-Side)Blue Line = Network Value, Orange Line = # of Daily TransactionsBlue Line = Network Value, Green Line = # of Daily TransactionsBitcoin is currently processing ~250,000 transactions per day, and Ethereum ~500,000. Looking at the tail end of both charts there is a clear divergence, where network value has continued to slide over the last few months, but the number of daily transactions is stable to ticking up.From peak, Bitcoin\u2019s and Ethereum\u2019s network values are down 81% and 93%, respectively, whereas daily number of transactions are only down 41% and 52%, respectively.To derive a proxy of value from network activity, I\u2019m going to use a very simple interpretation of Metcalfe\u2019s Law [1], squaring the network activity that remains.In the case of Bitcoin, 59% of the network activity remains since the peak, while for Ethereum only 48% remains. The proxy of value for Bitcoin is then 0.59\u00b2, or 0.35, which implies a 65% drawdown in network value is justified, much less than the 81% decline in Bitcoin\u2019s network value we currently witness in the market.In the case of Ethereum, 0.48\u00b2 = 0.23, implying a 77% drawdown in network value is justified, again much less than the 93% drawdown we currently see.Native Functionality (Demand-Side)Blue Line = Network Value, Orange Line = Estimated Daily Transaction Value\u00a0($)Blue Line = Network Value, Green Line = Total Daily Gas\u00a0UsedThe two charts above are my favorite, as they show what I consider the most native demand-metric of each network. For Bitcoin, that\u2019s securely moving value, and for Ethereum, it\u2019s processing smart contract computations.Bitcoin continues to regularly process over a billion dollars in transactional value a day (NOT trading volume), and it\u2019s clear how tightly the orange line of this fundamental is coupled with price. Meanwhile, developers and consumers using Ethereum\u2019s smart contracts continue mostly unabated, as witnessed by another divergence between this fundamental (green-line) and network value.Since their respective peak prices, Bitcoin\u2019s and Ethereum\u2019s network values are down 81% and 93%, respectively, whereas demand for their respective native functionalities is down 74% and 7%, respectively.In the case of Bitcoin, 26% of the network activity remains since the peak, while for Ethereum 93% remains. The proxy of value for Bitcoin is 0.26\u00b2 =\u00a0.07, which implies a 93% drawdown in network value is justified. In the case of Ethereum, 0.93\u00b2 = 0.87, implying a 13% drawdown in network value is justified, jaw-droppingly less than the 93% drawdown we currently see.Bitcoin\u2019s daily transactional value is the only fundamental metric I encountered in the brief analysis that constituted this post, which actually justified the market reaction we\u2019ve seen. It led me to look at daily active addresses (which I would have done for Ethereum as well, but that data is harder to find\u200a\u2014\u200aI\u2019d ask DAR, but it\u2019s the weekend!).Below is what I found for Bitcoin:Blue Line = Network Value, Orange Line = Daily Unique Addresses UsedBitcoin is currently in the 300,000\u2013500,000 daily unique active addresses range, with current values down 51% from the December 2017 peak. Once again, deriving the proxy for value, we have 0.49 of a network that remains. That network\u2019s implied value of 0.49\u00b2 = 0.24, implying a justified drawdown of 76%, close to the 81% that we currently see in the market, but still less\u00a0:-)Hash Rates (Supply-Side)Both Bitcoin and Ethereum\u2019s hash rates are higher now than they were at both of their peaks. Yes, hash rate is (usually) a lagging indicator that follows price, and both Bitcoin\u2019s and Ethereum\u2019s hash rates are on negative slopes which require us to keep a close eye on them. But right now, this fundamental is outperforming price.At this point, I\u2019m running out of steam. To round out the supply-side investigation, it would be good to look at the number of nodes supporting the network, and miner revenues for both networks (transaction fees + block subsidy).While I haven\u2019t posted the data here, developers are a core component of the supply-side (though often forgotten), and from Placeholder\u2019s internal analysis developer metrics are outperforming the market as well (some of this makes its way into demand-side metrics, most obviously with gas use).ConclusionFew people believe cryptonetworks have fundamentals. Even fewer have thought through how to quantify those fundamentals. Then, even fewer consistently have access to blockchain level data to perform the actual calculations [4]. Placing these points in the context of the idea that \u201ctheory follows price, price follows theory,\u201d it\u2019s clear to me that Mr. (Crypto) Market has only a vague idea of what he\u2019s doing right now.Most asset classes have widely agreed-upon models to value them; analysts just bicker over the inputs to those models. In crypto, we currently bicker over both the models and the inputs, hence the insane whiplash of the markets. Data availability for the inputs is also not great, though services like Blockchain.info, Etherscan, Coinmetrics, and CryptoCompare are helping\u200a\u2014\u200athat said, we\u2019re still a ways off from the Bloomberg of crypto.Fortunately, as the fundamentals of these networks grow, and their services become more mission critical to the world, swarms of analysts will converge upon models and inputs that will give Mr. Market better control over his tantrums. For now though, all the babies are out with the bathwater.", "responses": "27"}, {"title": "Introducing PepChain, an Ethereum compatible DPOS sidechain", "author_name": "PepChain", "link": "https://medium.com/@pepchain/introducing-pepchain-an-ethereum-compatible-dpos-sidechain-ac679f27876e?source=search_post", "post_date": "Sep 10, 2018", "readtime": "5 min read", "upvotes": "11K", "content": "Introducing PepChain, an Ethereum compatible DPOS sidechainPepChainBlockedUnblockFollowFollowingSep 10, 2018Demand for capacity to run decentralized complex smart contracts is increasing. The term smart contract was actually initiated by Nick Szabo in 1994, way before Bitcoin was launched and mined its first block.In the perception of the crowd, Bitcoin was a novelty up until 2014. However since a short time after its inception in January 2009, thousands of programmers have been working relentlessly on other cryptocurrency & blockchain projects, including early (second layer) platforms that supported digital assets like Nxt and Mastercoin/ Counterparty (runs on bitcoin).In 2014 Vitalik Buterin did one of the first known ICO\u2019s (Initial Crowd Offerings) for his big idea Ethereum; instead of only doing transactions and assets with Ethereum, it should become possible to enter (turing complete) logic on the blockchain; smart contracts.Since the launch of Ethereum (genesis block in august 2015), Ethereum has experienced exponential growth. At the peak in january 2018 it processed more than 1.3 million transactions on 1 day. The Ethereum network currently almost has 18,000 nodes running vs almost 10,000 bitcoin nodes.On a daily basis now, new ICO\u2019s are done, DApps are introduced and since the introduction and the huge commercial success of the game CryptoKitties, game developers are rushing to get their blockchain game out. Most if not all on Ethereum.Most if not all on Ethereum.Currently the Ethereum network can\u2019t handle that load, mempools (the place where transactions go after you click confirm transaction and before you can view them as pending or confirmed on e.g. etherscan) are getting completely full and overloaded. What happens to transactions that can\u2019t go into the mempool\u00a0? They are dropped and get cancelled.For these reasons there were several occasions where it wasn\u2019t possible to transact on the Ethereum network for several days. As the financial stakes get higher and higher, this is an undesirable situation.Enter PepChainPepChain is build upon the Parity codebase with a modified Aura consensus protocol to enable DPOS. The number of validators is liquid and is voted on by the active validators. This allows for bigger blocks and a 5 second block time offering a far more scalable networkEthereum needs to host thousands of ICO\u2019s DApps and games. PepChain doesn\u2019t have that burden so transaction costs (GAS) can be much cheaper and transaction times much lower.PepChain will therefore be more suitable for transaction intensive applications because of low-gas and faster confirmations.You could compare PepChain to for example Poa.network and Gochain but more decentralized in the sense that Poa.network and Gochain do not offer the possibility to own validators for the public whereas PepChain does offer that possibility. People who run validators get block rewards and have the possibility to vote in other validators and earn some predefined amount of their block rewards too. This will ensure much greater decentralization and a more democratic process overall.We wrote an earlier article in which we describe that process more in-depth on the CryptoPepes medium;https://medium.com/@cryptopepes/an-introduction-to-the-pep-chain-728962520375Up until now we have 2 projects that will launch on PepChain that we would like to introduce to you. The first one is a decentralized blockchain game called CryptoPepes (that will start on Ethereum initially) and the second one is an app that is called Airdrop Challenge.CryptoPepesCryptoPepes is a game where you can breed, collect and fight digital frogs. All CryptoPepes are ERC721 tokens living on the Ethereum blockchain and are 100% owned by you!No Pepe is the same due to our unique gene algorithm which mixes genes in a way very similar to humans. Some characteristics are more rare than others so they require careful breeding to get them to show in your Pepe. You can collect, breed, sell and in the near future battle your pepes in epic fights.You probably know the concept of CryptoPepes from the most popular blockchain game so-far; CryptoKitties. While CryptoKitties was an inspiring example for us with lots of innovation applied to it that we learned from, we think the underlying economy can be improved; there are 50,000 GEN-0\u2019s which doesn\u2019t make them really scarce.For those who don\u2019t know, generation 0\u2019s are the most valuable asset in CryptoKitties since all other kitties are descendants from them. Some of these Gen 0 kitties have been sold for extraordinary high amounts of money. With CryptoPepes only 1,100 Gen 0 Crypto Pepes will ever exist, so these are much more scarce.For more information on this project please read this post: https://medium.com/@cryptopepes/please-welcome-cryptopepes-to-the-blockchain-mineable-collectible-breedable-fightable-pepes-896efaaa6bd7Launch date will be in september.Airdrop ChallengeAirdrop Challenge is the tool for our (semi) internally developed\u200a\u2014\u200ayet to be announced\u200a\u2014\u200aCryptoPepes Airdrop.The tool will be transformed into a platform named AirdropChallenge.com, for ICO\u2019s and crypto currency startups to boost their social media presence and arrange distribution of their token at the same time. Participants have to complete tasks on a range of social media platforms and custom tasks can be added to it. It integrates well with Telegram and their are lots of possibilities like game integration to make sure people that engage in the Airdrop Challenge actually learn something about the project and become ambassadors instead of only raking in the tokens.Projects that will launch their project on the PepChain will have 65% discount on the AirdropChallenge fee.We are also considering a \u2018Provably Fair\u2019 system (known from gambling sites) and log all actions of users on the blockchain so there will be a publicly available audit trail for all projects and its challenges.DAPPB DApp\u00a0browserWe are working on an internally developed DApp browser, featuring a DAppStore. Next to the CryptoPepes DApp, one of the featured DApps is a wallet that supports a wide range of cryptocurrencies in which each wallet is derived from the same private key phrase.Imagine generating a key phrase once and then be able to use the same key phrase for all the wallets (e.g. Bitcoin, Ethereum, Aeternity, Litecoin etc.) that can be accessed in your DApp browser. In our eyes that would increase the usability of the wallet substantially. There is only 1 private key to backup, it will be a big relieve; much less administration to do.The DAppStore will also have DApp that will provide critical info to validators. They will be able to vote in other validators and see some statistics on the network and other validators key info.PepChain Social Media\u00a0ChannelsRead more on our website and social media channels;Website: https://pepchain.ioTwitter: https://twitter.com/pepchainFacebook: https://www.facebook.com/pepchain/Instagram: https://www.instagram.com/pepchain/Reddit: https://www.reddit.com/r/PepChain/Telegram: https://t.me/pepchainBitcointalk: https://bitcointalk.org/index.php?topic=5025823Youtube: https://www.youtube.com/c/PepChain", "responses": "9"}, {"title": "", "author_name": "", "link": "https://medium.com/@tuurdemeester/im-not-worried-about-bitcoin-unlimited-but-i-am-losing-sleep-over-ethereum-b5251c54e66d?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "", "responses": ""}, {"title": "Amazing news: savedroid accepts many coins and tokens for their ICO\u200a\u2014\u200anot only Bitcoin and\u00a0Ethereum", "author_name": "savedroid", "link": "https://medium.com/@savedroidapp/amazing-news-savedroid-accepts-many-coins-and-tokens-for-their-ico-not-only-bitcoin-and-ethereum-746aa488f67b?source=search_post", "post_date": "Mar 5, 2018", "readtime": "2 min read", "upvotes": "", "content": "Amazing news: savedroid accepts many coins and tokens for their ICO\u200a\u2014\u200anot only Bitcoin and\u00a0EthereumsavedroidBlockedUnblockFollowFollowingMar 5, 2018Shortly before the end of their ICO, the Frankfurt Fintech savedroid announces a great surprise. The company announced today effective immediately that it is now the first ICO worldwide to accept not just the standard cryptocurrencies, like Bitcoin and Ethereum, as payment for their SVD token\u200a\u2014\u200abut also a wide variety of coins and tokens.Normally companies that do an ICO accept the standard cryptocurrencies, like Bitcoin and Ethereum, alongside Fiat-currencies as a means of payment for their own tokens. savedroid is the first ICO to take a huge step further. savedroid allows participants of their ICO to pay with 56 other cryptocurrencies in total. These include well known tokens, like Stellar, EOS, Tron and Tether\u200a\u2014\u200abut also smaller and less well known cryptocurrencies, like, for example, Civic and Storj.savedroid founder and CEO Dr. Yassin Hankir sees this innovative step as the logical continuation of their business model: \u201cFor us, this was an obvious decision, because savedroid actively wants to contribute to crypto inclusion. With the new ability to be able to take advantage of more than 50 other cryptocurrencies to purchase the savedroid token, we create a unique use case in the crypto community. We are already making a valuable contribution to the easier use of cryptocurrencies today.\u201dHankir wants to especially highlight the Stellar token Lumen (XLM): \u201cWe are convinced that the Stellar Network and XLM have huge potential. That\u2019s why we will offer Lumen beside Bitcoin and Ethereum as one of the first three cryptocurrencies in our new crypto-saving app.\u201dPayment with these cryptocurrencies is possible starting from a purchase amount of 100,000 SVD (1,000 Euro). This is due to the higher administrative overhead associated with this type of payment. Anybody who wants to take advantage of this unique opportunity should hurry. The savedroid ICO is running only until March 9th at 3PM German time. Read more at ico.savedroid.com and in the savedroid Telegram group.Below is the complete list of the accepted cryptocurrencies:Stellar (XLM)EOS (EOS)TRON (TRX)Tether (USDT)VeChain (VEN)Qtum (QTUM)OmiseGO (OMG)ICON (ICX)Binance Coin (BNB)DigixDAO (DGD)Populous (PPT)RChain (RHOC)Dogecoin (DOGE)Maker (MKR)Status (SNT)Aeternity (AE)Augur (REP)0x (ZRX)Waltonchain (WTC)Bytom (BTM)Ethos (ETHOS)KuCoin Shares (KCS)Basic Attention (BAT)Dragonchain (DRGN)Golem (GNT)Aion (AION)Revain (R)aelf (ELF)Loopring (LRC)Zilliqa (ZIL)FunFair (FUN)QASH (QASH)Nebulas (NAS)SALT (SALT)Khyber Network (KNC)IOStoken (IOST)Dent (DENT)ChainLink (LINK)Power Ledger (POWR)Iconomi (ICN)Polymath (POLY)Enigma (ENG)Cindicator (CND)Bancor (BNT)Request Network (REQ)SingularityNET (AGI)TenX (PAY)Gnosis (GNO)WAX (WAX)Quantstamp (QSP)Genesis Vision (GVT)Raiden Network (RDN)Enjin Coin (ENJ)Santiment Network (SAN)Storj (STORJ)Civic (CVC)", "responses": "16"}, {"title": "One Ethereum trader just made $1,142,400 in seconds, thanks to an epic\u00a0glitch", "author_name": "Quincy Larson", "link": "https://medium.freecodecamp.org/one-ethereum-trader-just-made-1-140-000-in-seconds-thanks-to-an-epic-glitch-48af7e0ffe49?source=search_post", "post_date": "Jun 23, 2017", "readtime": "3 min read", "upvotes": "1K", "content": "One Ethereum trader just made $1,142,400 in seconds, thanks to an epic\u00a0glitchQuincy LarsonBlockedUnblockFollowFollowingJun 23, 2017Yesterday, a market where people trade the Bitcoin-like cryptocurrency Ethereum crashed instantly.The value of Ether (the Ethereum currency) plunged from about US $300 to $0.10 in seconds. Then it bouncing right back up to $300.Here\u2019s how this extremely unlikely event unfolded:Around 12:30 pm PST the price of Ether\u200a\u2014\u200awhich had been trading on the GDAX currency exchange at around $300\u200a\u2014\u200asuddenly dropped to $0.10. The official explanation is that a trader placed a multi-million dollar order to sell Ether.In the chaos, computers sold off Ether in automated, price-triggered \u201csell\u201d orders. Traders lost millions of dollars.But one trader had an automated \u201cbuy\u201d order telling computers to buy 3,809 Ether if it ever dropped so low as $0.10.Within a few minutes, the price of Ether completely recovered to around $300. This meant that the 3,809 Ether the trader had just bought was now worth $1,142,700. The trader had made a 300,000% return within a few minutes.We\u2019ve had \u201cflash crashes\u201d like this before (2010\u2019s sudden Dow Jones price drop of 9%). But nothing of this magnitude, where an asset lost 99.96% of its value in a matter of seconds.And in case you\u2019re wondering, no\u200a\u2014\u200aGDAX is not issuing refunds or reversing any of these trades. Here\u2019s their official explanation of what happened.Update from GDAX: \u201cWe will establish a process to credit customer accounts which experienced a margin call or stop loss order executed on the GDAX ETH-USD order book as a direct result of the rapid price movement.\u201dAll this leaves some lingering mysteries:Why did the price of ether crash so suddenly and so completely? Did someone intentionally manipulate the market with the multi-million dollar sell order?Why didn\u2019t GDAX have countermeasures in place to stop trading once the price started falling? If these countermeasures were indeed in place, did they fail to kick into effect?Did the person behind this extremely profitable trade create the $0.10 buy order as part of some broader strategy of exploiting extremely unlikely black swan events? Or did they just create it as a practical joke, never expecting for the price of Ether to drop that low?Who were they? Did the same person place both the multi-million dollar sell order and the buy order at $0.10 knowing it would crash the system? Since the holders of Ethereum \u201csmart contracts\u201d are anonymous, we may never know.You can read how cryptocurrency traders reacted to this transaction here.And if you want to read more about algorithmic trading, I highly recommend Michael Lewis\u2019s book Flash Boys: A Wall Street Revolt.Here are three other links worth your\u00a0time:What I learned from Apple rejecting me for a scholarship to the WWDC (6 minute read)I burned my first startup to the ground. Here are some hard lessons learned (9 minute read)The latest video in our series about Agile software development: The Definition of Ready (3 minute watch)Thought of the\u00a0day:\u201cThe crytpocurrency community hasn\u2019t decided whether they want to be anarchist rebels or to replace the establishment.\u201d\u200a\u2014\u200aAdi ShamirFunny of the\u00a0day:Webcomic by CommitStrip.Study group of the\u00a0day:freeCodeCamp Buenos AiresHappy coding!\u2013 Quincy Larson, teacher at freeCodeCampIf you get value out of these emails, please consider supporting our nonprofit.", "responses": "26"}, {"title": "Introduction of Ethereum wallet and how to create your own\u00a0wallet", "author_name": "STAR BIT", "link": "https://medium.com/star-bit/introduction-of-ethereum-wallet-and-how-to-create-it-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%8C%A2%E5%8C%85%E4%BB%8B%E7%B4%B9%E5%8F%8A%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E9%8C%A2%E5%8C%85-6a3bb210e898?source=search_post", "post_date": "Jul 1, 2018", "readtime": "3 min read", "upvotes": "7.4K", "content": "Introduction of Ethereum wallet and how to create your own\u00a0walletSTAR BITBlockedUnblockFollowFollowingJul 1, 2018The blockchain structure for Ethereum and Bitcoin is not the same. Bitcoin wallet doesn\u2019t support the storage of ETH. Therefore, ETH wallet is recommended if the users want to trade, send, and receive ETH. Here, we use MetaMask, a browser wallet, as an example and introduce how to create a wallet through simple steps.Before creating a wallet, there\u2019re several concepts users need to know\uff1aAddress\uff1aThe wallet address is similar to a bank account. When trading, the wallet address will be used to send or receive the ETH with other traders. Through wallet address, anyone can look up the account information such as trading records or token amount. However, the wallet address doesn\u2019t need to be bind with users\u2019 identity, so there are no concerns for the leakage of personal information.2. Private key\uff1aThe private key is similar to the personal signature but encrypted. The private key is the basis for signing transactions in Ethereum. When trading, it\u2019s the only way to access an Ethereum account and used to confirm the trade is authorized. As the result, anyone knows your private key can access your assets so it needs to be kept carefully.MetaMask creates your wallet on the local terminals and communicates with other blockchain networks, therefore the private key of your wallet is only stored on your local PC. Your wallet is 100% secure and you don\u2019t need to worry about assets loss due to any hacker attack to MetaMask servers. Currently MetaMask is supported on Chrome\u3001Opera, and Firefox.\u3010Install MetaMask\u3011Click HERE to visit the MetaMask download page on Chrome Web Store. Create a new wallet.2.Click on the \u201cAdd to Chrome\u201d on the upper right corner and confirm your\u00a0\u00a0installation.3.After installation completes, you will see MetaMask website, and fox head\u00a0\u00a0icon will appear next to your brewer\u2019s URL box, indicating that the\u00a0installation has completed.4.Click on NEXT to create your wallet.\u3010How to use MetaMask\u30111.Click on the MetaMask logo on the upper right corner of your browser.2.Read and Accept the MetaMask terms and Conditions.3.MetaMask requires a group of passwords for your wallet, for which purpose you must confirm your password.4.A 12-word seed phrase will be generated, and you must keep a record of these words. From now on, the seed phrase will be only stored on your PC and is the synonym of your account. Both MetaMask and Star Bit\u00ae exchange will not attempt to access your seed phrase, and you must keep it in good custody. The seed words will be required, if you lost your password or try to log in on a new PC.5.Now your MetaMask wallet is ready!\u203bhttps://www.starbitex.com/", "responses": "5"}, {"title": "Implementing Ethereum trading front-runs on the Bancor exchange in\u00a0Python", "author_name": "Ivan Bogatyy", "link": "https://hackernoon.com/front-running-bancor-in-150-lines-of-python-with-ethereum-api-d5e2bfd0d798?source=search_post", "post_date": "Oct 10, 2017", "readtime": "15 min read", "upvotes": "3.8K", "content": "Implementing Ethereum trading front-runs on the Bancor exchange in\u00a0PythonIvan BogatyyBlockedUnblockFollowFollowingOct 10, 2017Launching the attack: the green letters look just like on\u00a0TVThis post is a deep-dive into programmatically trading on the Ethereum / Bancor exchange and exploiting a game-theoretic security flaw in Bancor, a high-profile smart contract on the Ethereum blockchain. The full code can be found at https://github.com/bogatyy/bancor. We collaborated with the Bancor team to make sure the current exploit is protected against, although for a little while there would still be a chance to make some beer money for educational purposes.Imagine trying to hack Bank of America\u200a\u2014\u200aexcept you can read all of their code in advance, all of their transactions are public, and if you steal the money it\u2019s irreversible. Sounds like a paranoid worst-case scenario? Well, this is exactly the setup Ethereum smart contract developers have to deal with every day. Bitcoin and the blockchain technology unlocked tremendous possibilities in international payments, and the Ethereum further magnified it by allowing to manage these payments through programs called smart contracts. However, smart contracts also give hackers a much easier setup for attacks.Front-running is one such attack. The term originated in the stock market, back in the days when trades were executed on paper, carried by hand between the trading desks. A broker would receive an order from a client to buy a certain stock, but then place a buy order for themselves in front. That way the broker benefits from the price increase at the expense of their client. Naturally, the practice is unfair and was outlawed.On the blockchain, the problem becomes a lot more severe. First, all the transactions are broadcast publicly. More importantly, blockchain participants across the world are not bound by the same relationship as a broker and their client, so attackers can exploit their knowledge of a pending transaction with impunity.If you squint hard enough, you can imagine these guys trying to front-run each\u00a0otherSeveral months ago, researchers at Cornell uncovered that Bancor, an ICO that spectacularly raised over $150M in funding over a few minutes, was vulnerable to front-running. They pointed out that miners would be able to front-run any transactions on Bancor, since miners are free to re-order transactions within a block they\u2019ve mined. While the Bancor team gave a thoughtful response, up until very recently, there has not been any progress on fixing the issue (more on that later).Our research goes a step further. In fact, we show that it is both possible and practical to front-run Bancor as a non-miner. Which means you don\u2019t need to the lucky miner who happens to mine the block with a Bancor trade to profit from front-running. You simply need to be a regular user monitoring the blockchain to perform this attack.Surprisingly, the vulnerability does not seem to have been exploited so far (front-running is readily identifiable on the blockchain), so in this post we\u2019ll examine exactly how one implements such an attack. Turns out, all it takes is about 150 lines of Python to get a working front-running algorithm. We also ran simulations to determine how much money one could make from front-running consistently (spoiler: an attacker could have had a ~117% ROI on the money they invested into the attack over July and August, chipping away from other Bancor users). Finally, I executed the attack against a single trade, making~$150 net of all fees, after which I returned the money to the person I front-ran and stopped the program.Now, I know that relinquishing a working trading strategy would be a cardinal sin to any trader, but as it turns out, I am more curious than greedy. Implementing and countering attacks is not only a fascinating game, but also the cornerstone of advancing cryptographic security. Most importantly, I believe in the long-term impact of the blockchain ecosystem, and for the blockchain economy to fully develop, vulnerabilities like this need to be understood and protected against.So let\u2019s dig in.BackgroundBancor is a protocol for trading and pricing Ethereum ERC-20 tokens, as well as the eponymous token, abbreviated as BNT, with the current market capitalization of approximately 180 million dollars. The core problem Bancor solves is as follows: normally, for a trade to happen, there has to be a buyer and a seller, having opposing desires (to buy and to sell) at the same moment in time. This limitation may be fine for large publicly traded stocks, but for long-tail crypto tokens this can create a serious inconvenience.Bancor solves this problem by allowing anyone to trade against a public smart contract, which offers an automatically calculated token price following a precise formula. Essentially, Bancor is fulfilling the role of market-makers in traditional finance. The smart contract has an Ethereum reserve, and as more people buy the token, reserves grow and the price goes up. Consequently, when people sell, the contract adjusts the price to go down, so that the reserve is never depleted entirely. Unlike most other exchanges, where trades are managed off-chain, with Bancor every order is a self-contained Ethereum transaction (money + data).Unfortunately, the current setup contains a flaw, allowing anyone to front-run large transactions and make guaranteed profit. Let us expand on what makes the attack possible. When somebody broadcasts a transaction on the Ethereum network, it becomes available to other nodes almost immediately as a pending transaction and is added to the common queue, but it is not confirmed until the block confirmation hash is found by some miner (thus confirming all the transactions in that block), which tends to happen once every ~20 seconds. Further, up until the block is confirmed, the order of the pending transactions is up for grabs, and miners basically sort transactions by how much they\u2019re paid per gas (that is, per unit of computation they\u2019ll have to perform).This discrepancy creates an attack vector: any user running a full-node Ethereum client can spot a pending transaction and insert their own transaction in front of it by paying more per gas. If you see a large BUY is about to happen, you know the BNT price will increase (following their deterministic formula), so if you buy in before that transaction you get an instant appreciation of your tokens and a guaranteed return on your investment. Similarly, if somebody sent out a pending SELL, an attacker can sell their tokens in front.Ethereum blockchain (ordered) and pending transactions (partially ordered, but possible to get in\u00a0front)Given we will be implementing our attack using Ethereum client API, now would be a good time to take a step back and give a general overview of how the Ethereum distributed applications (or DApps for short) landscape looks like. At a high level, implementing DApps is fairly similar to regular Web applications. The backend is a smart contract, running on the Ethereum blockchain, typically implemented in Solidity and then deployed to the network. Then there is client software, which interacts with the backend by sending transactions.Just like in the regular world, smart contracts (the backends) receive most of the attention, with many high-profile smart contracts and several high-quality developer guides appearing recently (personally, what I\u2019ve found most useful was fiddling with the examples from Solidity official docs, as well as great intro guides by Hudson and Karl). However, on the front-end side, I currently do not know of any non-trivial client-side applications (an example of such an application would be a decentralized poker client, where the majority of compute has to happen off-chain, on the players\u2019 machines). Right now, the only way for users to interact with smart contracts is to send transactions manually, either by running their own full node (for example, by using the geth client), or by relying on third-party web services (like MyEtherWallet). Clearly, this would have to change: the current situation is about as convenient as manually sending POST requests through Telnet every time you wanted to browse the Web.Easy Mode: high-frequency trading by\u00a0handThe simplest way to confirm the vulnerability is by hand. We will not need any tools except a Web browser and a wallet with some Ether.First, separate your Ether between two wallets equally (it will not work from a single wallet). Second, go to MyEtherWallet and, following Bancor purchase instructions, set up two BUY transactions (do not click Send yet!). You should prepare two equivalent transactions from both wallets, but make sure gas price on the first wallet is lower than on the second.Sending ETH to the Bancor purchase contract automatically returns BNT to your account. Note: mind the\u00a0gas!Now, when it\u2019s set up, click \u201cSend\u201d on the first wallet (with the lower gas price), and then \u201cSend\u201d on the second wallet, with the higher gas price. If you did everything right, the transaction that was submitted second would actually be processed first, and get more BNT per same deposit!Transaction 1 (transaction from wallet 1, submitted first, fulfilled second)BNT tokens received: 11.014424733254973428Transaction 2 (transaction from wallet 2, fulfilled first, should get better price)BNT tokens received: 11.014423186864343663Notice the letdown: while the front-running transaction should\u2019ve gotten a better price, it actually got a slightly worse one. Upon careful investigation, I realized this is because the rather arcane implementation of the Bancor formula can deviate quite significantly from the theoretical formula, especially for smaller amounts (specifically, error in 4th digit for 0.1 ETH or roughly $20 transactions). After querying the BancorFormula contract for a bit, I learned that even for 1 ETH the precision is not good enough, but if we\u2019re willing to make 10 ETH-sized transactions or larger, we\u2019d actually observe a better price as predicted. The Bancor team recently updated the formula and mentioned it is a lot more accurate. Ultimately, I decided to skip re-doing this experiment with larger transaction sizes or the new formula in favor of the actual front-run.Hard Mode: trading automaticallyNow, unless we are ready to sit in front of a computer all day and hit refresh on etherscan.io, the process needs to be automated. Luckily, most Ethereum clients provide a JSON RPC to interact with the blockchain and automate away the low-level details of interacting with the blockchain.You just need to run a full node client and send API requests to localhost:8545.$ sudo apt-get install software-properties-common$ sudo add-apt-repository -y ppa:ethereum/ethereum$ sudo apt-get update$ sudo apt-get install ethereum$ geth --rpcHere is an example curl request that looks up a transaction by hash (in this case, a huge BUY order on Bancor):Now let\u2019s send the same request using Python:If you got the same output as from curl, congratulations! The hardest part of learning to programmatically interact with the blockchain is already over.Now implementing the front-running trader becomes a matter of putting together a few common API requests (pseudocode below for brevity). If the goal is to be maximally efficient, it is better to avoid cashing out in between transactions: front-running can be done in both directions, and it would be the most profitable to only sell once we see a pending sell, and only buy once we see a pending buy:In my case I only wanted to prove that the idea works (and yields non-negligible amounts of money), so I did the front-run once and sold immediately. Better yet, in this case the \u201closer\u201d of the trade is easy to pin-point (the only person losing money is the owner of the trade being front-ran), so it was easy to return that money too. More details to be found in the full code on my GitHub.The results of the front-run (transactions in reverse chronological order):We made 0.477 ETH, or a ~0.5% return in less than a minute! I calculated the amounts (my own principal and the threshold for front-running) so that the profit would be at least $100, which I deemed convincing enough for the purposes of my post. Noteworthy, just a few days later there was a whopping 5856 ETH trade purchasing Bancor, which would have yielded an approximately 9% return, or about $3000 given the same 100 ETH principal!The next part will explain where do these numbers come from and how to calculate the return from front-running a given trade.Simulations & ROI evaluationLet us describe the two core assumptions behind the Bancor pricing system, and the exact formula that is derived from those assumptions. First, Bancor maintains a constant ratio between the traded token market capitalization and total reserve token value. As of right now, the only traded token is BNT, and the only reserve token is ETH. Assume there is approximately 70K ETH in reserves (which is roughly the case) and the reserve ratio is 10%. This means the whole market cap of the system is implied to be 700K ETH, and the price per BNT is determined from this total market cap, divided by total BNT supply. If somebody buys BNT with ETH, the whole ETH amount is added to the reserves, thus pushing the price up (there was more value added to the reserves than tokens issued), increasing the value of everybody else\u2019s tokens. Conversely, selling BNT reduces the reserve and thus the price per token (this way, the reserve never gets depleted, you just get less and less of it per token).The second assumption is that a large trade should be equivalent to making a set of smaller trades of the same size (so to determine the final price, one would have to calculate an integral of Price d(Size)). Turns out these two assumptions are sufficient to uniquely define the behavior of the system in all cases. For those with a strong mathematical inclination, there is proof available. Here are the resulting formulas:For our practical purposes though, the exact formulas are not really necessary (and as we have learned, the actual implementation is not very precise anyway). Approximating the pricing formula with the linear part of its Taylor\u2019s series, we get:NEW_PRICE ~= OLD_PRICE * (1 + DEPOSIT / RESERVE_BALANCE)Interestingly, the RESERVE_RATIO is not a part of the approximation. I\u2019ll skip the full derivations here, but basically, it cancels out in the numerator and the denominator, so the only thing that ends up mattering is RESERVE_BALANCE = TOTAL_MONEY * RESERVE_RATIO. This pricing formula is a good approximation as long as the deposit is much smaller than the total reserve. So if BNT has 70K ETH in reserves, and somebody invests 700 ETH, the price goes up by 700 / 70K = 1%. If somebody withdraws 700 ETH out of the system, the price drops 1%. Thus in both cases front-running those transactions would give us instant 1% ROI. Note that our theoretical approximation matched practice quite well: a 350 ETH trade yielded a 0.477% return, against approximately 0.5% predicted.Based on these calculations, I wrote some code to evaluate how much money could have been made front-running Bancor in July and August. Assuming we leave small transactions alone and only go after big ones (> 100 ETH) so that gas prices don\u2019t really matter, we get:$ python simulation.py...ROI for front-running all transaction >= 100 ETH:July 88.7%August 28.6%With a principal of 100 ETH, that would make you $35190Not bad: an attacker can more than double the money they invested into the attack over a couple months, chipping away from other Bancor users. In practice, the profitability threshold is smaller than 100 ETH (the total fees one would need to beat come out to a few dollars), though it also depends on the principal invested by the attacker.Front-running other Bancor-exchangeable tokensWhile we did show that it was possible, BNT itself is relatively hard to front-run because of the large reserves: its price changes very little between transactions. But for any smaller token the 1 / RESERVE_BALANCE fraction would skyrocket an attacker\u2019s profits and rob honest investors very fast. To prove that, I have deployed my own token following the Bancor Protocol (address, code) and made instant 2X profit front-running a large transaction.Our FBT (short for Front-Runnable Bancor Token) was initialized to have a total supply of 1M wei (where wei is the smallest possible unit in Ethereum, equal to 10^-18 ETH ), and the total initial supply of 2M tokens. Given the 10% reserve rate ratio, the implied market capitalization of our token becomes 10M wei\u00a0, and the price per token 10M / 2M = 5 wei\u00a0. Now what happens when the front-runner makes a deposit before a large \u201chonest\u201d BUY, but sells after?TX1, front-run:1000 wei gives 199 FBT\u00a0, in line with the price we calculatedTX2: very large buy, increasing the price roughly 2XTX3: attacker withdraws 199 FBT for 1910 wei, doubling their moneySince the intended use of Bancor is to serve the lesser known tokens (which may not have enough demand and liquidity for regular exchanges), these tokens would naturally have smaller reserves, making this vulnerability especially dangerous. In an extreme case where the reserve is very low and an attacker has a lot of money, they can extract more value from an honest investor\u2019s deposit than the investor would get themselves!Further, all of this is possible as a mere full node (that is, a person with a decent laptop). Miners, and especially miner pools, are in a privileged position and can do an order of magnitude more damage. Full-node attackers have to broadcast their transactions and thus risk their principal, whereas miners can mine blocks with their own front-run included, but never reveal it publicly unless they do mine the block. That way, they can profit at no risk or cost to themselves. Further, they can rearrange transactions within a block in whatever way they want, arbitrarily creating winners and losers out of other participants.EthicsLike any new technology, this situation raises very interesting ethical questions. Is the strategy we discussed \u201chacking\u201d? Is it high-frequency trading? Is it simply an ability to make informed decisions based on public information faster than other investors? Ultimately, is this kind of trading \u201cbad\u201d?Personally, I took an easy way out and made the decision that lets me sleep the most soundly: returning the money after proving the point and stopping the program. Nevertheless, I would not have blamed someone in a similar spot if they decided to do otherwise.SolutionsOver the past month, Haseeb Qureshi and I discussed several solutions with the Bancor team, making sure the vulnerability is contained. Yesterday, the team released a fix that handles most of the risk in practice. Long-term, theoretically robust solutions are fairly complex, and while analyzing those can be a whole different post, I want to briefly mention the options available.TL;DR don\u2019t send large transactions and use Bancor Web3 UI that sets a minReturn for you.One partial solution is to set a minReturn on trades, basically canceling your order if you realize someone squeezed in front of you. This does prevent attackers from making guaranteed money instantly, but raises the question: what is a buyer supposed to do next? The order just revealed their intention to buy, and presumably they still want their Bancor, so they\u2019ll place another buy order sometime in the near future, which will eventually raise the Bancor price and, on average, will profit the attacker just the same.Yesterday, the Bancor team released a Web3 interface that implements the minReturn solution. Longer-term, and assuming perfectly intelligent adversaries, this might lead to some curious Nash equilibria (e.g. front-runners might block trades unless they are allowed a small profit margin, though a lower one than if they were front-running entirely naive users), but right now, this should solve most of the practical risk.The Bancor team also suggested setting a universal maxGasPrice, to make sure non-miner front-runners cannot bid higher. This would fully protect the users from non-miner attacks (at a cost of lower liquidity during network congestion), although the original front-runs by miners would not be affected. This fix will be out soon too.More robust solutions would involve a version of the commit-reveal scheme, one of the go-to instruments in a cryptographer\u2019s toolbox. Submarine sends by Cornell researchers proposes the most beautiful and general solution that I know of. However, given the specifics of the Bancor protocol, a much smaller solution could suffice: do a commit-reveal with a penalty for non-revealing in Bancor tokens themselves. Basically, whenever someone commits a hash of a trade and doesn\u2019t reveal, a percentage of both their Bancor and ERC-20 Ethereum tokens is burned (note that it works irrespective of the direction of the trade, thus revealing no information). If designed with careful attention to detail (for example, making sure that reveals are only accepted for commits in a previous block), this can fully solve the front-running problem, including front-running by miners.Of course, even the simplified scheme is so complicated that almost no one would want to perform it by hand in MyEtherWallet. As the ecosystem grows, more sophisticated client programs (like the auto-trader we just implemented, or the commit-reveal client) would have to take that role on behalf of the users. Again: people aren\u2019t sending their own Telnet requests every time they want to browse the Web, so why should the crypto world be any different?AcknowledgementsThis project started in collaboration with Haseeb Qureshi and Preethi Kasireddy at the IC3 Ethereum bootcamp under guidance from Ari Juels, Iddo Bentov and Phil Daian. The post was rewritten considerably with massive help from Haseeb and Nader Al-Naji, who is about to take over the world with Basis.A disclaimer just in case: this is a personal project and it does not represent my employer or anyone else\u2019s opinions. Since I worked on it in my spare weekends, the timeline ended up being very protracted, and I hope the attentive readers will forgive some small discrepancies (the Ethereum price may oscillate across the post, and some Bancor contract addresses had to be updated).", "responses": "26"}, {"title": "The Challenges of Building Ethereum Infrastructure", "author_name": "Jameson Lopp", "link": "https://medium.com/@lopp/the-challenges-of-building-ethereum-infrastructure-87e443e47a4b?source=search_post", "post_date": "Jan 8, 2018", "readtime": "12 min read", "upvotes": "3.9K", "content": "The Challenges of Building Ethereum InfrastructureJameson LoppBlockedUnblockFollowFollowingJan 8, 2018Several of our engineers, myself included, have spent a substantial portion of the past year working on building low level Ethereum infrastructure at BitGo. We\u2019ve encountered a plethora of challenges along the way; in this post we\u2019ll cover some of the more interesting ones.EthereumJ IssuesOur first attempt (in 2016) at building a highly indexed database of the Ethereum blockchain used EthereumJ to run the EVM in the JVM and thus parse every transaction and contract that ever occurred on the network. This ended up being a poor decision.EthereumJ was not production quality in 2016; it may be better today but according to my conversations with Ethereum developers, it\u2019s still unreliable. We experienced multiple crashes, subpar documentation, and not so great developer support from the small number of EthereumJ experts. We lost count of how many times our EthereumJ client got stuck or corrupted and we had to delete the entire chainstate and re-sync from scratch. We never managed to stabilize our EthereumJ indexer to the point that we were confident it was ready for production use. Interestingly, I came across this StackExchange post that noted stability issues as of June 2017.256 bit\u00a0supportA fundamental problem we\u2019ve had while dealing with Ethereum is how to handle 256 bit numbers. The design rationale for the Ethereum Virtual Machine states:If you\u2019re hoping to store them in any popular production quality database as numeric types that you can query and manipulate as such, you\u2019re in for a surprise. We found that mongo only supports 128 bit numbers, but due to a limitation in mongoose (the NodeJS mongo driver) the actual support was 32 bits. Because our indexer has traditionally been multithreaded in order to increase performance, we really needed the ability to atomically increment and decrement balances in mongo while we were processing many transactions simultaneously. It\u2019s quite likely that we could be processing different transactions that affect the same account, thus a simple \u201cget & put\u201d operation could overwrite data. As such, we ended up developing a new data structure we called the \u201cBitGo BigInt\u201d that supported 256 bit numbers by breaking the values apart and storing them into 6 separate database fields. A conversion library made it simple to switch between BigIntegers and BitGo BigIntegers.Here you can observe the loss of precision when performing 256bit math operations with\u00a0mongodbAfter working on it for several months, the Ethereum network itself then suffered a series of attacks that caused a loss in confidence for the network as a whole. We shelved the Ethereum project in late 2016 despite the demand from our exchange customers, determined to revisit it when we were more confident that we would be able to deliver the quality our customers deserve.If at first you don\u2019t succeed, try and try\u00a0againAs we saw the general rise in crypto assets beginning to occur, it was clear that we needed to transition from just supporting Bitcoin to supporting any crypto asset with sufficient transaction volume to make it worth diversifying our revenue streams. As such, a rearchitecting of our infrastructure was required in order to make it more flexible for supporting a variety of blockchains. We began writing a third indexing service from scratch, informally named the \u201cgeneric indexer.\u201d It was designed to be more modular and thus support speaking to a variety of full node RPC interfaces, with switchable support for both UTXO and account-based blockchains. This rearchitected indexer service made it immensely easier to add Ethereum support, though we still ran into a few challenges.We wanted to completely avoid the hassle of using a custom data type to store huge numbers, so we settled upon storing values as strings instead. The downside is that we can\u2019t query them using numeric operators, but we\u2019ve managed to avoid needing to do so by keeping this limitation in mind while developing the wallet. The other downside is that we can\u2019t atomically update the values\u200a\u2014\u200awe must instead read the string from the database, convert it to a BigInteger, modify the value in memory, convert it back to a string, and then store it. In order to account for this design limitation, we have single threaded our indexing service for Ethereum. By using a few neat performance tricks we picked up along the way, our single threaded Ethereum indexer is actually orders of magnitude faster than our original multi-threaded EthereumJ-based indexer. More specifically\u200a\u2014\u200awe no longer run the EVM in our indexer\u200a\u2014\u200awe outsource that work to Parity nodes. We also decided not to index the entire Ethereum blockchain and to only index transactions related to BitGo wallets. By throwing away the vast majority of data that we pull from the node, we were able to switch from a multithreaded indexing service to a single threaded service while still gaining an order of magnitude speedup and decreasing our data storage requirements by several orders of magnitude.Parity IssuesWe chose to use Parity as our node the second time around given that it had the reputation of being the most robust and performant. This has worked a lot better than trying to run consensus code inside of the indexing service itself, but it hasn\u2019t been foolproof. It\u2019s not quite as robust as Bitcoin Core in our experience\u2014 we have experienced a variety of unexplained crashes and stalls.thread \u2018IO Worker #1\u2019 panicked at \u2018Can\u2019t create handshake: Auth\u2019, /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/src/libcore/result.rs:837stack backtrace:\u00a01: 0x7f97790acafa\u200a\u2014\u200a<unknown>\u00a02: 0x7f97790b3e7f\u200a\u2014\u200a<unknownThose crashes occurred with 1.6.3 and we have since upgraded to 1.7.2 which seems to have fixed that issue\u200a\u2014\u200ahowever, this new version has issues with the initial sync in archive mode that causes it to completely blow out the disk usage and crash on a regular basis from filling up the disk. The only solution so far has been to use a cron script to restart the node every hour or so, which somehow cleans up all the excess data on disk. We\u2019re hopeful that this recent change will fix the issue.We also continue to experience complete loss of all peer connectivity on a regular basis with our Kovan network Parity nodes; this results in our test environment nodes falling out of sync with the network. The only fix we\u2019ve found for this is to delete the nodes.json config file and restart Parity. We\u2019re told it was an issue with the boot nodes that was recently fixed, but we\u2019ve still been experiencing stalls since upgrading.Running an archival Ethereum node requires a ton of disk I/O since you\u2019re executing every smart contract ever performed in the history of Ethereum and updating the state on disk. It\u2019s common knowledge now that if you try to sync an archival node on a machine with spinning disk drives, it will never catch up to the tip of the blockchain\u200a\u2014\u200athere simply aren\u2019t enough IOPs available. Thus, you MUST have a solid state disk to run an Ethereum node. However, this gets tricky on virtualized servers where IOPs on reliable data stores are not cheap.To give you a general idea of disk I/O performance.We started syncing a 1.7.2 archival node on a VPS with 2,000 IOPs provisioned, traveled to Japan, and when I returned 4 days later it was still only at block 3,800,000 out of 4,300,000.We then gave it another shot with a VPS that had 5,000 IOPs. It took 8 days to get to block 4,300,000. The further you progress along the blockchain, the harder the blocks become to verify due to the increased transaction volume. For example, we noted that it took over 4 minutes to verify this block (and many others) while the machine was pegged at a constant disk read of 50 MB/S and write of 50 MB/S. As of December 2017, the Ethereum network has become even more popular and our production Parity nodes sometimes struggle to stay synced with the tip of the chain due to the high disk I/O. One possible \u201csolution\u201d to this would be for us to switch to using ephemeral storage on AWS. This is a directly attached SSD that isn\u2019t metered or throttled. The drawback is that it\u2019s not guaranteed to be durable. Doing a \u201cstop/start\u201d on the instance will wipe out the data. Also, if the underlying drive fails, the data will be lost since it isn\u2019t mirrored.At time of writing the chatter I\u2019m hearing amongst other enterprise Ethereum-based services is that both geth and parity are suffering from performance issues due to the explosion of popularity of the network. Hopefully the next releases of popular Ethereum node software will be focused on performance improvements.BitGo\u2019s MultiSig\u00a0ContractUnlike Bitcoin and many other crypto assets, Ethereum does not have native multisignature functionality for securing funds. BitGo\u2019s business model requires that all crypto assets be secured in a 2-of-3 multisig wallet so that BitGo can act as an oracle / cosigner on transactions to enforce security policies. As a result, we had to implement multisig with a smart contract. You can check it out here:BitGo/eth-multisig-v2eth-multisig-v2 - Multi-Sig Wallet v2, supporting original Wallet.sol methods with additional confirmAndExecute\u2026github.comWriting a smart contract to secure crypto assets is pretty dangerous; it\u2019s not far from \u201crolling your own crypto\u201d which is one of the fundamental things to avoid in this industry. Smart contract security is a whole other can of worms; BitGo is dedicating a future blog post to covering the security issues we encountered and steps we took to resolve them.Smart Contract ComplexitiesWhen parsing events emitted by smart contracts it can be tricky to determine just where the money came from. In UTXO-based systems such as Bitcoin, all you have to do is look at the transaction inputs. In account-based systems, on a standard transaction you can just look at the \u201cfrom\u201d account. However, when the value is being sent via smart contracts it becomes much more complicated. BitGo\u2019s multi-sig contract also has \u201cforwarding address\u201d functionality that adds more complexity to this logic.Our first approach was to use EthereumJ to load our contract ABI and parse transaction receipts with it. It seemed to work well for parsing addresses out of the event log data, but it would consistently mangle the numeric values (which it parsed as Java BigIntegers.) After many frustrating hours of experimenting and trying to get help on the EthereumJ gitter, we ended up once again ditching EthereumJ and ended up doing manual parsing of the byte arrays from our contract transaction event logs. It feels rather hacky to say \u201cget the Nth 32 byte chunk of data out of this byte array\u201d but at least it works.Smart contract debugging is also quite challenging with the current state of developer tools. It is hard to know where a transaction failed - often you\u2019ll just get a vague error like \u201cbad jump destination\u201d. Hopefully we\u2019ll have better tools to debug smart contracts in the future.Network-Wide Lack of Smart Contract\u00a0SupportOther cryptocurrencies have taught us some lessons with regard to send/receive compatibility across services, especially with regard to address format compatibility. For example, LTC implemented a new P2SH address format in order to make their addresses incompatible with BTC P2SH addresses. Prior to this, the address formats were the same which allowed users to accidentally send BTC to LTC addresses and vice versa. This causes headaches for services to recover the assets.Unfortunately, 6 months later many services that support LTC /still/ don\u2019t correctly validate the new address format. This type of issue is inconvenient because it can cause users to not be able to send funds from one service/wallet to another because the sending service thinks the \u201cto\u201d address is invalid. However, Ethereum has a unique problem that enables users to send funds to a service but the service never sees the deposit. This is because many services take the easy route when implementing ETH support and they only listen for standard ETH transactions by inspecting the \u201cto\u201d and \u201cfrom\u201d address fields on the main transaction. However, if a transaction is executing a smart contract then the movement of funds by contract events that are fired do not get reflected in \u201cto\u201d and \u201cfrom\u201d address fields on the transaction. Rather, they are reflected by \u201cinternal transactions\u201d that must be generated by executing the smart contract and parsing the event output.Because many services don\u2019t bother to inspect smart contract events to see if they are making deposits to addresses owned by the service, BitGo wallet users may inadvertently send ETH to a service and not get credited, causing confusion and requiring intervention by human support staff. We expect that eventually this problem will subside as smart contract sending becomes more common and services realize that listening for deposits from smart contracts is not an optional \u201cnice to have\u201d feature.Nonce IssuesUnlike bitcoin, a nonce has to be included with every ethereum transaction. The nonces have to be sequential when sending from a particular address. Hence only nonce 5 can get confirmed after a nonce 4 transaction has been confirmed from a particular address. It is a challenge managing nonces for multiple wallets, particularly if a transaction fails to be broadcast or confirmed due to any number of reasons. We have built tools to manage this, but in general a transaction that fails to broadcast will block future transactions from confirming. This is similar to creating chains of unconfirmed transactions in UTXO based crypto assets. Wallet software needs to be able to handle failed or stuck sends so that they don\u2019t cause the entire wallet to become unusable.Address GenerationServices that accept deposits from many users need to generate a unique address for each user so that they know which user\u2019s account to credit when they receive money. However, generating addresses for smart contracts is more complex than generating addresses for other blockchains. On other chains you can generate as many addresses offline as quickly as you want and if they are never used, it\u2019s no big deal. But with smart contracts, each newly generated address must be posted as an event to the blockchain. As such, it costs money, takes time, and is a blocking operation. Because the blockchain must know about the address before it can receive a deposit, it\u2019s possible to generate an address and display it to the user, who then sends funds to it. But if their transaction gets confirmed before the transaction that generates the address, the user\u2019s money won\u2019t be detected as a deposit into the smart contract and will have to be manually recovered! To prevent users from shooting themselves in the foot, we don\u2019t allow users to see newly created addresses until after the address generation transaction has been confirmed.Network BacklogsBacklogs on the Bitcoin network have been common for over a year and we have made adjustments to our fee algorithms to compensate. However, backlogs in Ethereum are relatively new and have side effects we didn\u2019t anticipate. The primary problem is with wallet initialization, which is similar to the address generation issue described previously. Because a transaction must be broadcast and confirmed in order to initialize a wallet contract, if the contract creation transaction gets stuck in a pending state and the user begins sending other transactions to make deposits, it\u2019s not possible for the Ethereum network to fire the appropriate contract events because the contract doesn\u2019t exist yet! Thus we\u2019ve had to add extra logic that locks the wallet and prevents users from seeing the wallet\u2019s deposit address until after the contract creation transaction has been confirmed.The Road\u00a0AheadThe complexities in operating a smart contract based multisignature Ethereum wallet have surprised us on several fronts. We still have plenty of work to do in both the operational and user experience areas and we are eagerly observing the continued evolution of development tools and best practices for smart contract security. BitGo\u2019s next step with our Ethereum infrastructure will be support for ERC20 tokens; we expect that the system we have built will continue to undergo trial by fire as it has to handle higher loads and secure even larger amounts of value.", "responses": "13"}, {"title": "Scalability Tradeoffs: Why \u201cThe Ethereum Killer\u201d Hasn\u2019t Arrived\u00a0Yet", "author_name": "Georgios Konstantopoulos", "link": "https://medium.com/loom-network/scalability-tradeoffs-why-the-ethereum-killer-hasnt-arrived-yet-8f60a88e46c0?source=search_post", "post_date": "Jan 23, 2018", "readtime": "8 min read", "upvotes": "5K", "content": "Scalability Tradeoffs: Why \u201cThe Ethereum Killer\u201d Hasn\u2019t Arrived\u00a0YetGeorgios KonstantopoulosBlockedUnblockFollowFollowingJan 23, 2018Lately I\u2019ve seen a lot of crypto-enthusiasts on Reddit and Telegram making comments like:\u201cBitcoin is slow. It is expensive. There are many new coins, modern ones that are much better. They are fast and inexpensive.\u201dOr the very popular CryptoKitties argument:\u201cEthereum couldn\u2019t even handle CryptoKitties, how do you expect it to be Web3.0?\u201dOr about how Blockhain X is here to turn the tables:\u201c<insert coin ticker> is king, it can handle 60,000 transactions per second, has no fees and it can do smart contracts\u201dThe popular opinion is that the current leaders by market cap are not good enough, and that new projects are offering better features or alternative architectures (Tangle, Hashgraph) that are going to define a new standard and bring the capabilities of blockchains to new levels.While I do not dismiss the possibility of Bitcoin being dethroned in the upcoming years, or that the top-5 might change radically in the future, I believe that we need to be skeptical when a project advertises itself as a do-it-all solution, and rigorously investigate it before jumping to conclusions.There is no silver-bullet that will solve all problems.\u201cTouka Koukan\u201d (\u7b49\u4fa1\u4ea4\u63db) is a Japanese phrase which roughly translates to \u201cequivalent exchange\u201d. Nothing comes for free. There will always be trade offs.Below is the Scalability Trilemma as described by Vitalik Buterin:From https://github.com/ethereum/wiki/wiki/Sharding-FAQ\u0391 blockchain that claims to have solved the trilemma has either bent the laws of physics (highly unlikely), or it has discovered a breakthrough method that solves the major blockchain scalability problems that have stumped top mathematicians and computer scientists for the past decade.While this is not impossible, a more likely explanation is that the blockchain has sacrificed either decentralization, security, or both.What characterizes a blockchain or a cryptocurrency?What characterizes a blockchain or a cryptocurrency?In my debut article, A rant about Blockchains I provide the following definition of a blockchain:A blockchain is a database that can be shared between a group of non-trusting individuals, without needing a central party to maintain the state of the database.And cryptocurrency from Google dictionary:A digital currency in which encryption techniques are used to regulate the generation of units of currency and verify the transfer of funds, operating independently of a central bank.Note that both definitions (blockchain and cryptocurrency) emphasize the need to operate independently of a central party.", "responses": "29"}, {"title": "Fewer than 0.1% of ICOs ever release a product, but CoTrader is live on Ethereum before its\u00a0ICO", "author_name": "CoTrader.com", "link": "https://medium.com/@cotrader.com/fewer-than-0-01-of-icos-ever-release-a-product-but-cotrader-is-live-on-ethereum-before-its-ico-cb7d06a8a569?source=search_post", "post_date": "Jul 4, 2018", "readtime": "3 min read", "upvotes": "4.5K", "content": "Fewer than 0.1% of ICOs ever release a product, but CoTrader is live on Ethereum before its\u00a0ICOCoTrader.comBlockedUnblockFollowFollowingJul 4, 2018https://CoTrader.com has a working product before its ICO. This is very rare.Most ICO projects never make or release a blockchain project for their cryptocurrency.CoTrader aims to disrupt the $85 trillion global investment funds industry with the world\u2019s first trustless blockchain funds marketplace.CoTrader enables investors, called CoTraders, to invest with the best, and have their crypto funds managed by the best fund managers. Unlike in competing platforms, CoTraders always have control over their assets. Investors, or depositors into CoTrader Smart Funds, can withdraw their assets at any time.CoTrader decouples fund management from fund custodianship. Fund managers can only make trades to swap different assets in the Smart Funds, but can never withdraw anyone else\u2019s funds. That is, unlike anytime before in history, investors don\u2019t need to give up control of their funds to have them managed.Fund managers can choose a performance fee and compete for CoTrader funds in an open marketplace. For example, if a fund manager sets a 20% performance fee, and turns 10 ETH into 100 ETH, he\u2019d keep 20 ETH. Investors, or CoTraders, that see his past ROI of 10x, and agree to his 20% fee, can send ETH to his Smart Fund. Fees and ROI reporting is then assured by transparent smart contracts.Network effects: fund managers and influencers are strongly incentivized to do their best for their CoTraders, and spread the word, to multiply their investing leverage. If a top trader is managing 1000x their own funds, and charges 10% performance fee, he\u2019s 100x his normal earnings. If the manager would earn just 2x over some period of time, he\u2019d earn 200x if managing such a large pool.The CoTrader MVP already supports Cryptos, and plans to soon support ICOs, stocks, shorts, options and derivatives. CoTrader can tokenize entire exchanges with it\u2019s Smart Escrow exchange protocol, and can run on any smart contract powered platform, from Ethereum, to EOS, NEO, or Hashgraph.CoTrader pools together the liquidity of many decentralized exchanges (DEXs) such as Kyber, Bancor, 0x and more, to form a Super-DEX for maximim liquidity.Items in CoTrader\u2019s Road Map:CoTrader\u2019s patent-pending technology will hide the trading strategies of fund managers even while cryptographically proving fund fees and past ROIs. The algorithms are protocol-agnostic and can utilize any privacy-preserving smart-contracts mechanisms from zero-knowledge (ZK) proofs like zk-SNARKs, zk-STARKs, Bulletproofs, or ring signatures. The first implementation uses ZK interactive proofs using a hyperledger. CoTrader is working with teams such as Sedicii to implement these capabilities.CoTrader will have its own DEX to trade its funds tokens. Every CoTrader fund has its own tokens. This means that if a fund enters an ICO, to receive ICO futures tokens, CoTraders invested into the fund can trade away the ICO futures before the tokens arrive, in a trustless way.CoTrader will build a Smart Escrow exchange whereby users can trade with the liquidity and variety of any centralized exchange, from the likes of Binance to Ameritrade, with the safety and transparency of a DEX.CoTrader is the investment platform of the future, live now, on the Ethereum testnet. It will be on the mainnet within 2 weeks, in July 2018.Those interested in financial freedom can get tokens and ensure full access to the platform, now.CoTrader COT are a technological requirement, a utility, to hide the trading strategy of fund managers, while still allowing CoTraders to know their ROI. CoTrader will take a small fee from fund managers\u2019 performance fees, which will be used to buy back COT. A CoTrader DAO will manage these COT tokens to progress the platform forward, to future proof the platform.CoTrader\u2019s mission is to increase financial freedom for people all around the world by enabling them to invest with the best, instead of spending 24/7 researching the market in suboptimal investment strategies. CoTrader aims to direct funds to good projects to provide a win-win-win for investors, and for fund managers, and for good community projects.https://cotrader.com sale is starting soon, so make sure you join the social news channels and stay tuned.NEWSTwitter news: http://twitter.com/cotrader_comTelegram news: http://t.me/cotradersWant more? Here\u2019s an article on what makes a killer blockchain app: https://medium.com/@cotrader.com/after-9-years-of-blockchain-killer-apps-emerge-9fe923cc5ffc", "responses": "8"}, {"title": "Ethereum ERC-20 Compatible Wallets", "author_name": "Trex", "link": "https://medium.com/@trexmarket/ethereum-erc-20-compatible-wallets-c352c9395bc?source=search_post", "post_date": "Sep 28, 2018", "readtime": "5 min read", "upvotes": "6.8K", "content": "Ethereum ERC-20 Compatible WalletsTrexBlockedUnblockFollowFollowingSep 28, 2018What is\u00a0ERC-20?Before discussing ERC-20 wallets, let\u2019s quickly discuss ERC-20. A token can generally represent any asset that has a value attached to it. In this case, we are talking about tokens which represent a smart contract and use of the Ethereum blockchain. There are several tokens native to the Ethereum blockchain. These tokens can be traded, bought or sold. ERC-20 is a token protocol for all tokens implemented by the Ethereum blockchain (Token protocol means rules or standards that the token must follow). All tokens which implement the protocol become a compliant token of ERC-20. The technical specification of this protocol comprises six functions that ensure that all tokens based on the Ethereum system work anywhere on the platform. Most cryptocurrency wallets that support Ether tokens support ERC-20 based tokens. There are a few native wallets for these token a well. Here are a few of the best wallets for ERC-20 compliant tokens.Hardware WalletsMost users prefer to use hardware wallets. A hardware wallet is the most secure storage unit for cryptocurrency. There are several expensive and inexpensive hardware wallets on the market. Here are a few which support the ERC-20 token:TrezorTrezor is one of the most popular hardware wallets and costs only $99 USD. It is a cold storage device meaning it is always offline. Trezor can be used for Ethereum and any ERC-20 affiliated tokens with the MyEtherWallet web interface. Trezor is a small, key-shaped device and connects to a computer through a USB cable. It requires a pin code to access the device but also has a recovery 24-word seed which is created offline in case of loss or theft. Trezor supports many other cryptocurrencies as well, so it can serve its purpose for multiple uses.Ledger Nano SLedger Nano S makes our list of ERC-20 wallets. The Ledger Nano S costs $98 USD. It looks like a USB device and similar to Trezor, requires a 4 digit pin for signing in every time it is plugged into a computer. Transactions are safe as they are physically verified on the embedded screen with the press of a button. Ledger also uses the MyEtherWallet web interface to access ERC-20 tokens. What makes this wallet extra secure is the fact that it supports a second-factor authentication\u200a\u2014\u200aFIDO (Fast Identity Online), on websites and their subordinates (like Google, Google Dropbox). It also has a 24-word recovery seed which is created during setup.Mobile SupportWallets compatible with the iOS or Android platform are handy. They can be operated with ease and generally have a good GUI. There are significant worries over security issues, but good wallets are generally secure.TrustTrust makes ourmakes our list of ERC-20 wallets. Trust is open source and an official Ethereum wallet which supports all ERC-20 tokens. This application runs on both iOS and Android platforms. Private keys are stored locally and have multiple security layers. Trust has a partnership with Kyber Network. This allows for the instant purchase of coins on the exchange, and storage on the wallet. For those who prefer convenience and ease of access, this mobile wallet is for you.Other walletsMyEtherWalletMyEtherWallet is a web-based wallet. It is open source and allows for interaction with smart contracts. The GUI is user-friendly. The MyEtherWallet web interface is used to access and store ERC-20 tokens on Ledger Nano S and Trezor. As MyEtherWallet is essentially a hot wallet, it is best not to store large funds on it and make use of its compatibility with hardware wallets.ParityParity makes our list of ERC-20 wallets. Parity is a desktop wallet that has native support for ERC-20 affiliated tokens. The wallet will support the new ERC-223 protocol for Ethereum based tokens, and is quite popular among cryptocurrency enthusiasts. It allows registered users to access all the features of the Ethereum network, including dApps. This is possible through the Ethereum GUI browser. It is best not to store coins on a desktop wallet as a hacked computer can lead to a loss of funds.MetaMask (ERC-20 Wallet)MetaMask provides a convenient solution to store, manage and send ERC-20 tokens, as well as Ethereum coins. It serves as a browser to access the Ethereum and ERC-20 network. It is a plugin for Google Chrome and Mozilla Firefox users and is quite secure. Users are not required to download the entire blockchain as native Ethereum nodes can communicate with external Ethereum nodes. MetaMask does not store the private keys of users on its servers. They are stored on Chrome or Firefox and are password protected. MetaMask is really easy to use and setup with the MyEther Wallet as well.", "responses": "5"}, {"title": "Introducing PAYTHER\u200a\u2014 A Decentralized multipurpose payment ecosystem & management tool on ethereum blockchain.", "author_name": "Payther Foundation", "link": "https://medium.com/@payther.foundation/introducing-payther-a-decentralized-multipurpose-payment-ecosystem-management-tool-on-ethereum-8cce193bc218?source=search_post", "post_date": "Jun 8, 2018", "readtime": "9 min read", "upvotes": "6.6K", "content": "Introducing PAYTHER\u200a\u2014 A Decentralized multipurpose payment ecosystem & management tool on ethereum blockchain.Payther FoundationBlockedUnblockFollowFollowingJun 8, 2018One of the most disturbing issue among blockchain users is their hunt for a most convenient way of transacting over the internet with assurance of no risk of fraud and theft, while still having their transactions anonymously.Ethereum and bitcoin has worked towards achieving this lifelong goal and have proved to be the best and by far most reliable means of sending payment which can\u2019t be altered or erased. But this only lies with bitcoin as being only created as an alternative source for making payment and a means of storing value, but ethereum is more than that on the plain.While Both digital currency received a lot of praise for the way it allows for payments without worry\u00a0about foreign fees and currency exchange rates, they still lack some basic useful feature which will truly enhance daily transaction experience of their respective users.Transaction costs continue to rise. In some cases, they are on par with credit card payment processing fees. Additionally, transaction times are getting longer. The limited size of the blocks contributes to the longer times and that has some users frustrated, due to different reasons like the long waiting time to wait for payments to settle.There come the PAYTHER\u00a0IDEAPAYTHER, a decentralized smart wallet developed with a simple concept of enhancing digital payments over the ethereum blockchain using an advance elliptic curve.The project is solely based on aiding peer-to-peer payment by providing useful facilities such as escrowed transaction, batch payments, transaction scheduling, e.t.c. to mention the few which traditional ethereum wallets doesn\u2019t provide to ether users, speaking of escrow technology +\u00a0the power of smart contract.PAYTHER, a portmanteau of payment + ether, will run dependently on the ethereum blockchain as a multipurpose tool for securing and managing user funds, without users needing to entrust their personal wallet info to third parties including payther servers itself. This\u00a0platform\u00a0will\u00a0be\u00a0fueled\u00a0by\u00a0it\u2019s\u00a0own embedded\u00a0token\u200a\u2014\u200apaythers\u00a0(PYT).the innovative feature of the PAYTHER smart\u00a0walletPAYTHER has a lot of uses which an average ethereum or in nutshell, a cryptocurrency user will find very handy and useful, applicable to their day-to-day online transactions. Payther aims to be the PayPal of cryptocurrency, but smarter and more secure. Here are all of the amazing and handy feature the PAYTHER project is aiming to develop in the near coming months;Multiple payments\u200a\u2014\u200aits not a common trait and feature of most traditional ethereum wallet to facilitate multi transaction feature. Payther will be the first among numerous platform to offer a simple and convenient way for users to mark several payments to numerous recipients up to 10000 at the same time at no additional cost, while still maintaining the erc-20 standard and decentralized nature of the ethereum network. This is so easy as just providing all recipient ethereum address and specifying the amount for each address or simply send an equal amount of funds to all at once. We believe this should provide ease to users who are planning a large payment disbursement or running an airdrop of their custom erc-20 token.Payment scheduling\u200a\u2014\u200aone of the most prioritize goal of this project is creating a really smart and stress-free payment ecosystem for all ethereum users. With this feature, one can appoint his funds to be sent to a specific user and at a specific time and date, either one-time or recurring. This process is handled by an underlying smart contract and a web3 API which connects to an ethereum node, ensuring all interactions are between the end user and the ethereum network. A real use case for this feature is when a user needs to participate in an auction, ICO or an event where its strictly based on entry time whereas the user may not be fully available to participate manually.Task-payment exchange\u200a\u2014\u200aPAYTHER will not only provide way for making decentralized payments across ethereum blockchain but will also provide an innovative facility where anyone can exchange tasks and payment mutually. This feature aims at eradicating trust issue between task conductors and participants using an inbuilt proof-of-task algorithm to ensures tasks are performed by participants before a payment can be released to participating parties. This works on a proven concept where user A will create a task such as downloading music, content sharing or social media promotion, and sends it was a specific payment of choice to user B through email and ethereum address, and authorizing the smart contract to withhold the payment. user B will be notified of the pending payment and instruct to complete the attached task, where upon completion, the PAYTHER smart contract will be triggered by the PAYTHER platform AI API, and the funds will be immediately deposited to the address specified by user A or user B in case of no address provided by user A.Decentralized p2p escrow\u200a\u2014\u200aa well-secured smart contract powered escrow between users within the ecosystem to safely exchange any supported erc-20 token with one another. Any one can directly exchange tokens by sending a transaction notification to the second party email, which after it\u2019s accepted, the initiator will be alerted, and funds of the intend amount will be locked until the final transaction has taken place. This will only involve the sender, the smart contract, and the end recipient. A clear brief explanation of how this works is; user A needs to exchange his Token X for token Y with user B, but this deal needs trust implements. Both party can use PAYTHER to complete this transaction regardless of the trust reputation between both party, by imitating the PAYTHER escrow. User A will need to retrieve user B email address and his erc20 address, input them on the platform and send the transaction. Token X will be locked temporarily by the smart contract. User B on the other end will be notified by email of the incoming escrowed transaction and will accept it. He (user B) will be taken to a payment page where he\u2019ll send token Y to a specified ethereum address as provided by user A, and upon confirming the transaction on the ethereum network, the smart contract will release token X to user B.Payther user name domain\u200a\u2014\u200aOne of the innovative aim of PAYTHER is the development of a simulated Ethereum Name Service (SENS) which works almost similarly as ENS, but without going through tedious process of obtaining one and only works within the PAYTHER ecosystem. The PAYTHER SENS domain name allow any one turning their 0xUSERADDRESS address into something easy to remember such as payther.me/Amazinguser through domain-to-address mapping and further makes it possible to conduct a donation event, where a unique interface will be displayed to recipient to donate or contribute in any digital currency (ETH & PTY for now) as set by the sender/owner, where all the funds received through this SENS address will be automatically forwarded to the sender\u2019s underlying ethereum (mapped) address in real-time. The SENS will be most useful for users who tend to have something more unique when requesting payment from other within the PAYTHER ecosystem and in future, ETHEREUM network in general.Off-chain payment gateway & on-chain payment settlement for merchant\u200a\u2014\u200aPayther will also provide a facility to enable ecommerce; online stores and businesses, to easily accept and track ethereum/payther payments using our simple integrated API. We would like to extend ethereum to far more people in the world in respective to their choice of usage be it for every day use or for business purposes.Implementation of the ecosystem utility token\u200a\u2014\u200aPYT\u00a0tokensTo ensue long term stability and optimal performance of the platform, we created a token which will serve as the fuel that power the usability of the ecosystem.The\u00a0Payther Token\u00a0(PYT) is the necessary currency to exploit the PAYTHER services, most especially the decentralized task-payment exchange feature\u00a0which\u00a0basicly\u00a0works\u00a0with\u00a0Payther tokens\u00a0only. Without the Payther token it won\u2019t be possible to exchange cryptocurrencies using the escrow or be able to mark several payments in a single go on the app platform, since the commissions will be paid solely with the Payther token. The Payther token utilized in the services will be\u00a0used to\u00a0fund\u00a0the\u00a0operational\u00a0cost\u00a0of\u00a0the\u00a0project\u00a0and\u00a0as\u00a0incentives\u00a0to\u00a0developers\u00a0contributing\u00a0the\u00a0the\u00a0growth\u00a0of\u00a0Payther. The total amount of PAYTHER tokens that will ever exist is capped at 1 billion,\u00a0no\u00a0more,\u00a0no\u00a0less.No tokensale or crowdsalePAYTHER is an open source and non-profit oriented project meant to provide value added feature that enhance how funds are managed and how payments are being made over the ethereum network. The PYT token is but an utility token meant to be used as the fuel for obtaining some features of the PAYTHER ecosystem. Therefore, we are not organizing any public crowdsale or initial token offering. The PYT tokens will be distributed through series of airdrops and community bounties. Details regarding this will be available on the website soon, and official announcement will be made on all our official pages.Project development plansThis team behind this project mainly consist of cryptocurrency enthusiasts and researchers who ultimately devoted their time and focus on how they can improve cryptocurrency usability and finding ways it can suit the everyday needs of men in this ultramodern age. At first, the funds required to start the project was budget in some amount of eth, but as the market continues to crash, it almost halve these funds, and though that\u2019s really a threat, we still have some of our early partners providing much support as much as they could. however, a tree does not form a forest, so we have decided to partner with as many potential investors and Cryptocurrency experts. As the users and their results of using our platform will eventually determine the success of our platform, we have decided to focus on gathering potential users at an early stage. We are in contact with several investors who are interested in supporting the development of the platform so the Payther platform will definitely be developed, launched and accessible to everyone!To build a potential userbase and to introduce our Payther token we will launch one of the biggest airdrop ever by distributing 300 million tokens to 300,000 lucky registrants. That will primarily mean every participant will be entitled to 1000 PYT Tokens. To pull this off we will need the help of all our supporters!A public donation/fundraising programme will be organized to allow the public and all our willing supporters to donate to the development funding which will see the project come through. We will provide full details about the airdrop and the donation event in the next coming days.Building the community around\u00a0PAYTHERCrowds and community are the backbones and pillar of a successful project. We aim to receive full backing and support from the public as we embark on this journey to a better payment resolve on the internet. We therefore trying to seek a stronghold of the project from the public by requesting several volunteers to join the foundation and assist with any of their talents in any way such as management, web developing, bug assessments e.t.c. that will benefit everybody at the end of the day. Our telegram community is gradually\u00a0growing, and we truly appreciate everyone that has been there from the very beginning.Vision of\u00a0PAYTHERPAYTHER is a\u00a0blockchain-to-human\u00a0interface simplifying the interaction between the Ethereum blockchain and its users.The purpose of PAYTHER is not only to establish trust on the blockchain once again and accomplish things that others do not, but to do it in a very unique way, through a safer and simpler method, maintaining a special focus on the user safety when making cryptocurrency transactions and enabling the complexity of the ethereum blockchain to be more understandable.We want to make\u00a0a\u00a0platform, extremely easy to use, and bring the true benefit and power of ethereum smart contract to the end user; a bridge towards worlds that at this time, as a user experience, are not so close to one another.The challenge of this project is also creating a tool that manages different erc-20 standard along with embedded scripting technology through a unique user experience.PAYTHER plan to bring together technologies and services that today already exist and additional ones only imaginable at this moment.Useful linksWEBSITE\u00a0| TWITTER | TELEGRAM | WHITEPAPER | GITHUB", "responses": "8"}, {"title": "Designing the architecture for your Ethereum application", "author_name": "Santiago Palladino", "link": "https://blog.zeppelin.solutions/designing-the-architecture-for-your-ethereum-application-9cec086f8317?source=search_post", "post_date": "Nov 21, 2017", "readtime": "10 min read", "upvotes": "3K", "content": "Designing the architecture for your Ethereum applicationSantiago PalladinoBlockedUnblockFollowFollowingNov 21, 2017As you are beginning with Ethereum development, and after going through some of the many excellent tutorial posts out there, you are faced with the challenge of building your first Ethereum-based app.This brings up a set of new challenges around designing the architecture and layout of your application: traditional client-server applications now have a third new component in the mix, the blockchain.In this article I\u2019ll cover some of the most traditional scenarios for Ethereum applications, which arise from the different interactions between these three components. I\u2019ll discuss serverless apps, browser plugins, private nodes, offline signing, and other issues that play a role when designing the layout of your solutions.Client-blockchain in serverless appsThe canonical flavour of an Ethereum app is a serverless one, where the entire flow of your app happens entirely between the client and the blockchain.The first step here is to actually distribute the client code to your users. The easiest way is to set up a static page that contains a web3-enabled web app. Such page can be hosted anywhere: AWS S3, Google Cloud, Github pages, other cloud providers, or your own server. Furthermore, if you can count on your clients having either bzz or ipfs protocol support, you can even disitribute it via Swarm or IPFS for total decentralization.Querying the blockchainNext step is for the app to be able to read information from the blockchain, which, as you already know, requires a connection to an active Ethereum node. This will be set by your web3 provider, which is the piece that handles the actual web3 connection to a node.Now, some of your users may already have an established connection to a node, for instance, via the official Mist client, or through a browser plugin like the very popular Metamask, which acts like a lightweight client to the blockchain. Their FAQ even provides a code snippet on how to detect if it is available on a client, and use it as a provider for web3.What to do then for those users who don\u2019t have Mist or Metamask? If you only need them to query the blockchain without actually sending any transactions, you can establish a connection to a public Ethereum node. This should be a geth or parity node open to the public, but without exposing the personal API for managing accounts, and without any unlocked accounts. Such a node will only act as a gateway for querying constant contract functions. And if you don\u2019t want to host it yourself, the great folks at Infura offer public nodes at no cost.This way, users with a running Ethereum infrastructure can use their connections to their own trusted nodes, and less tech-savvy users can use the public nodes. This implies that the latter users are choosing to trust the information provided the third-party controlled node, for the sake of ease-of-use.Sending transactionsQuerying the blockchain is easy, but what if you want your users to submit transactions and actually perform state-changing actions on smart contracts?For those of your users who have Mist or Metamask installed, the problem is instantly solved, for both of them provide a way for managing the user accounts and requesting the user to approve a transaction at the application\u2019s request. Mist will provide a gateway to the user\u2019s local node and its accounts for signing transactions, while Metamask will sign transactions client-side and relay them to the Metamask public nodes.From Developing Ethereum Dapps with Truffle and MetaMask.As for the rest of your users, if you don\u2019t require them to install Metamask or use Mist to use your app, you\u2019ll need to direct them to manually send the transactions to interact with your application, from whichever wallet they work with.Most applications implement this by asking the user to send a certain amount of ETH to an address, optionally including a QR or a copy-to-clipboard button.Shapeshift Ethereum exchange\u00a0dialog.Your client-side application may then monitor the contract events to update the user interface as the transaction sent out-of-band is executed. Since watching events is simply a way of querying the blockchain, it can easily be done through a public node.Now, for executing contract functions, you may need to request the user to send ETH along with additional data to execute a specific function. You can use the request method of a contract function to easily obtain the data needed for running a method, and present that to the user along with the target address.SimpleToken.at(tokenAddress).transfer.request(\"0xbcfb5e3482a3edee72e101be9387626d2a7e994a\", 1e18).params[0].data// returns data for invoking transfer with args => '0xa9059cbb00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000de0b6b3a7640000'Personally, I am not a big fan of this pattern, for it requires a fairly complex interaction from the user. Not all users are aware of how additional data works in Ethereum, much less how to send it along in a transaction.If you do need to implement it, make sure that your contract\u2019s fallback function rejects all payments or has a reasonable default behaviour, so if the user forgets to include the additional data when manually sending the transaction, he does not lose the funds sent.Note that, in many scenarios, a cleverly designed fallback function may actually always execute the expected behaviour for the user sending a transaction. This way, your smart contracts just react to users sending funds, and run different functions depending on the current state, without requiring the user to set any additional data.Another trick is to add proxy contracts, where each of them execute a particular function in your main contract upon receiving Ether. As a simple example, let\u2019s say you are implementing a binary voting application: you have your main contract with a vote-yes and a vote-no function. Rather than asking the user to include the yes-or-no flag in their transaction, you can deploy two additional contracts, with no logic except for calling vote-yes or vote-no in the main contract on behalf of the message sender upon receiving any transaction. Needless to say, this approach only works in rather simple apps, but can often help reduce complexity for users who do not have Ethereum-aware software in their browsers.Implementing your own\u00a0walletAnother option for having your users perform complex interactions with your smart contracts is to actually bundle wallet management into your application. As a first step for a user, the application can create a new account for them, which will be used to send any transactions directly from your code.Coral Fundraiser asks for a password for the newly generated account, which is downloaded encrypted to the user\u2019s computer, so he can later access it in another session or even a different wallet.The user will then need to seed this account with some Ether, either from a different account or directly from an exchange service; consider dropping in a Shapeshift integration here for ease-of-use. Once the account has the required balance to pay for transaction fees, the client-side code may execute any needed operations on behalf of the user through a simple click.Behind the scenes, your application will use the private key of the generated account to sign any transactions client-side, and then relay them to a public node for execution.This pattern involves heavy coding, for you need to add the features of generating and encrypting, as well as importing, an ethereum account (you may want to take a look at the ethereum-wallet library for implementations of these tasks). Furthermore, all transactions need to be crafted and signed manually, and then sent as raw transaction to a node. It also requires more involvement from the user, who is tasked in setting up a new account, and having the responsibility of safekeeping the account file.Nevertheless, once set up, your user can perform Ethereum transactions directly from your application with zero friction at all, and without needing to install any software at all.All in all, which approach you use will depend heavily on the kind of users you are reaching out to, as well as the kind of interaction you expect they will have with your application, whether it is continuous usage, or infrequent or one-time accesses.Server-to-blockchainNow, let\u2019s add a server into the mix, and leave the client aside for this section. As such, the following may apply not just to app servers, but also to standalone apps, scripts, or batch processes.Setting up a local\u00a0nodeThe first solution is the vanilla one: set up a local Ethereum node and use its JSON RPC interface from your application to perform all your blockchain operations.You may also want to keep an unlocked account for running transactions from your application (the unlock flag for both Geth and Parity may come in handy here). Just make sure the JSON RPC interface of the node is not accessible from anywhere but your application, otherwise anyone may access your node and steal your funds. As an additional precaution, keep the funds on the unlocked account to a minimum, and seed it from a different source as needed.Offline signing and public\u00a0nodesAnother solution, similar to one explored in the previous section, is to have your app sign transactions offline, and relay them to a public node. This article explores how to set up a web3 provider engine in your Truffle configuration to transparently sign transactions offline and send them to an Infura node.If you go down this route, keep in mind that you are blindingly trusting the public node you are connecting to: albeit it cannot modify the transactions you send to it, it can choose to not relay them to the network, or to provide fake responses to your queries. This could be mitigated by connecting to multiple nodes simultaneously, and sending the same transactions or queries to all of them; but this makes your codebase much more complex.Tying it all\u00a0togetherAfter going through different ways of setting up client-blockchain and server-blockchain queries and transactions, it\u2019s time to discuss how to orchestrate everything together.Coordinating client and\u00a0serverHaving both client and server interacting simultaneously with the blockchain implies that you may need to coordinate both of them. For instance, you may want to have the server react to an action performed on-chain by a client, or visualize in a client certain state-changes on a contract.The canonical way for observing changes on a contract, from both client and server, is to listen for contract events. Design your events carefully, to ensure all relevant actions have an associated event, and use indexed arguments so observers can filter only the events relevant to them. Typically, a client will only listen for events that affect them directly, while servers may monitor all the contracts related to the app.You may also directly monitor specific transactions if they are issued directly from your application code, in order to check that they are successful.Clients may also post to the server the id of a transaction they issued as a proof of an action executed on-chain, rather than having the server listen for events. However, keep in mind that a malicious actor may be monitoring transactions on-chain, and could push to the server a transaction id from a different client, pretending it belonged to him. Make sure to use client-to-server messages only as notifications, and not as sources of truth.Regardless of relying on monitoring transactions or events, ensure to only react upon them after a reasonable number of confirmations. Even if you have a transaction mined, it could still be subject to a chain reorganisation, and eventually run in a different context, potentially becoming invalid. Wait for about a dozen blocks (more in testnets) before acting upon an on-chain event, though consider letting your end-user know that the transaction was successful yet is unconfirmed, so as not to keep them in the dark.Server responsibilitiesNow, a critical question that you need to answer is why do you need a server at all. In traditional client-server apps, the server acts as a permanent storage, enforces bussiness logic, and coordinates clients; all tasks that can now be performed on-chain.Nonetheless, there are still many uses for a server backing your app. First and foremost, on-chain code cannot directly work with off-chain services. This means that if you want to integrate with third party services, inject external data like USD/ETH rates, or perform basic actions such as sending an email, you need a server to take care of this.The server can also act as as cache or indexing engine for your smart contracts. While the ultimate source of truth is the blockchain, your clients may rely on the server for search capabilities, and validate the returned data on-chain.Large data storage is prohibitively expensive today on Ethereum, due to the gas costs incurred in using contract storage. As such, your application may also rely on a server for storing large blobs of data, while only a hash is kept on-chain for verification. The same happens with complex computations, which may exceed the Ethereum block gas limit, and thus need to be run in separate infrastructure.It\u2019s worth mentioning that more and more projects are appearing around the EVM that provide seamless integration with these services. Some examples are Filecoin or Storj for storage, Truebit for computation, or Oraclize for oracles. Eventually, servers may become thinner and thinner until they disappear into a myriad of side-chain services and integrations. Maybe, a few years from now, this post will be obsolete and our blockchain applications will be running in an absolutely decentralized fashion.Be part of the communityContinue the discussion on our forumJoin our Telegram groupFollow us on TwitterEven better, join the team \ud83d\ude80", "responses": "8"}, {"title": "Life Cycle of an Ethereum Transaction", "author_name": "Mahesh Murthy", "link": "https://medium.com/blockchannel/life-cycle-of-an-ethereum-transaction-e5c66bae0f6e?source=search_post", "post_date": "Dec 26, 2017", "readtime": "9 min read", "upvotes": "3.8K", "content": "Life Cycle of an Ethereum TransactionLearn How an Ethereum Transaction is Created and Propagated to the\u00a0NetworkMahesh MurthyBlockedUnblockFollowFollowingDec 26, 2017Transactions are at the heart of the Ethereum blockchain (or any blockchain for that matter). When you interact with the Ethereum blockchain, you are executing transactions and updating it\u2019s state. Have you ever wondered what exactly happens when you execute a transaction in Ethereum? Let\u2019s try to understand it by looking at an example transaction. In this post, we will cover the following.An end to end traversal of an Ethereum transaction starting from your browser/console to the Ethereum network and back to your browser/consoleUnderstand how transactions work when you use a plugin such as Metamask or Myetherwallet instead of running your own nodeWhat to do if you are too paranoid and don\u2019t trust any plugins to execute your transaction?This post assumes that you have a basic understanding of Ethereum and it\u2019s components such as accounts, gas and contracts. Here is a good explanation of these concepts. If you are a developer new to Ethereum, you might find this helpful. You can also learn to build a simple dapp here. This post will make more sense if you have executed few transactions yourself. An example of a transaction is you sending some ether to another person or a contract. Another example is if you have interacted with a dapp. For example, if you go here and buy some tokens, that would be a transaction. If you vote for a candidate, that would be another transaction.1. End to end overview of an Ethereum transactionLet\u2019s take the following contract call as an example and traverse through the entire flow of how this function call/transaction gets executed and gets permanently stored on the blockchain. You can find the entire contract here. At a high level, it\u2019s a voting contract where you initialize a few candidates contesting in an election and anyone can vote for them. The votes will be recorded on the blockchain.Voting.deployed().then(function(instance) {  instance.voteForCandidate('Nick', {gas: 140000, from: web3.eth.accounts[0]}).then(function(r) {    console.log(\"Voted successfully!\")  })})We assume that you have an Ethereum client (Geth or Parity) running locally on your computer which is connected to one of the networks (Testnet or Mainnet) and you have access to the contract address and ABI to execute the transaction.If you have built a dapp, the above code should look familiar. There is a contract called Voting which has already been deployed on to the blockchain. We instantiate that contract and execute a method called voteForCandidate and pass in the candidate name, gas limit for this transaction and the account that executes this transaction. As the name indicates, this function is used to vote for a candidate and the vote is recorded on the blockchain. Below we will try to deconstruct this call and understand everything that happens when you execute this javascript function.1. Construct the raw transaction objectThe voteForCandidate function call is first converted in to a raw transaction (rawTxn) as shown below. Web3js library is used to build the raw transaction object.txnCount = web3.eth.getTransactionCount(web3.eth.accounts[0])var rawTxn = {    nonce: web3.toHex(txnCount),    gasPrice: web3.toHex(100000000000),    gasLimit: web3.toHex(140000),    to: '0x633296baebc20f33ac2e1c1b105d7cd1f6a0718b',    value: web3.toHex(0),    data: '0xcc9ab24952616d6100000000000000000000000000000000000000000000000000000000'};Let\u2019s try to understand all the fields in the raw transaction object and how they are set.nonce: Each Ethereum account has a field called nonce to keep track of the total number of transactions that account has executed. Nonce is incremented for every new transaction and this allows the network to know the order in which the transactions need to be executed. Nonce is also used for the replay protection.gasPrice: Price per unit of gas you are willing to pay for this transaction. If you are executing your transaction on the Mainnet, here is a handy website from ETH Gas Station that recommends what you should set the gas price for your transaction to succeed in a reasonable amount of time. Gas prices are current measured in GWei and range from 0.1->100+Gwei. You will learn more about gas price and it\u2019s impact later in this article.gasLimit: Maximum gas you are willing to pay for this transaction. This value insures that in case of an issue executing your transaction (like infinite loop), you account is not drained of all the funds. Once the transaction is executed, any remaining gas is sent back to your account.to: The address to which you are directing this function call. This is the contract address (0x633296baebc20f33ac2e1c1b105d7cd1f6a0718b) of the Voting contract in our case.value: Total Ether you want to send. When we executevoteForCandidate, we are not sending any Ether and so the value is 0. If you were executing a transaction to send Ether to another person or a contract, you would set this value.data: Let\u2019s see how this data field is calculated.You first take the function signature from the ABI voteForCandidate(bytes32)and generate the hash of it.> web3.sha3('voteForCandidate(bytes32)')'0xcc9ab267dda32b80892b2ae9e21b782dbf5562ef3e8919fc17cab72aa7db9d59'You take the first 4 bytes of that hash. So, that would be: 0xcc9ab267.You then take the argument \u2018Nick\u2019 and convert to bytes32 and you get 52616d6100000000000000000000000000000000000000000000000000000000You combine the two to get the data payload.2. Sign the TransactionIf you remember, you used web3.eth.accounts[0] to execute the transaction. The Ethereum network needs to know that you actually own that account to make sure someone else doesn\u2019t execute this transaction on your behalf. The way to prove this to the network is by signing the transaction using the private key corresponding to that account. The signed transaction looks like this:const privateKey = Buffer.from('e331b6d69882b4ab4ea581s88e0b6s4039a3de5967d88dfdcffdd2270c0fd109', 'hex')const txn = new EthereumTx(rawTxn)txn.sign(privateKey)const serializedTxn = txn.serialize()3. Transaction is validated locallyThe signed transaction is submitted to your local Ethereum node. You local node will then validate the signed transaction to make sure that it was really signed by this account address.4. Transaction is broadcast to the\u00a0networkThe signed transaction is broadcast by your geth/parity node to it\u2019s peers who in turn broadcast to their peers and so on. Once the transaction is broadcast to the network, your local node also outputs the transaction id which you can use to track the status of your transaction. This transaction id is just the hash of the signed transaction object.transactionId = sha3(serializedTxn)If you execute the transaction on a public Ethereum network, the best way to track the status of your transaction is on etherscan.io. In the picture above, if you notice there are a couple of nodes marked as Etherscan nodes. The folks at Etherscan run a few nodes and they have a nice frontend webapp connected to it. When your transaction is picked up by their nodes, you can see your pending transaction on their website.One other thing to remember is, not all nodes will accept your transaction. Some of these nodes might have a setting to accept only transactions with certain minimum gas price. If you have set a gas price lower than that limit, that node will just ignore your transaction.5. Miner Node accepts the transactionAs you can see in the picture, the Ethereum network has a mix of miner nodes and the non miner nodes. As you probably know, the miners are the ones who do the job of including your transaction in the block. Miners maintain a transaction pool where your transaction gets added to before they start evaluating it.If you notice the picture above, the miners store all the transactions in the pool sorted by gas price. The higher the gas price, the more likely the transaction is included in the next block. This is the common configuration for a miner node (to optimize for higher pay). However, a miner can configure her node to sort the transactions however they like (say they want to help the network by mining only low gas transactions).In the picture above, you see how our voteForCandidate transaction is at the bottom of the miner\u2019s pool? Once all the high gas fee transactions have been mined and included in the block, the miners will work our transaction.One other thing to note is, the miner\u2019s pool can hold a finite number of transactions. Let\u2019s say there is a hot ICO sale going on or a really popular dapp (like Crypto Kitties) takes off\u00a0. People submit their transactions with high gas price hoping that the miners pick up their transaction before any other transactions. If higher gas price transactions fill up the pool, your low price transaction is discarded. There is no hope for our candidate Nick to receive any vote for a while. We might even have to rebroadcast the transaction in such cases.Another trick to bump your transaction up the pool is to resubmit your transaction with a higher gas price but using the same nonce value. That way, when the new transaction is received by the miners, the new higher gas price transaction overwrites your old transaction. If the nonce value is different, it is considered a different transaction (You will end up casting 2 votes to Nick). Here is an excellent article from Jim McDonald explaining this topic in depth.6. Miner Node finds a valid block and broadcasts to the\u00a0networkThe miner eventually picks our transaction to include in the block along with other transactions. The miner can only pick so many transactions to include in the block because Ethereum has set a block gas limit. i.e, the sum of all the gas limits on the transactions can not exceed the block gas limit. You can see the current gas limit at ethstats.net.Once the miners select the transactions to include in the block, the transactions are validated and included in a pending block and the Proof of Work begins. One of the miner nodes eventually finds a valid block (by solving the PoW puzzle) and adds that block to the blockchain. Just like the raw transaction was broadcast by your local node which was received by all other nodes, the miner node broadcasts this valid block to other nodes.7. Local Node receives/syncs the new\u00a0blockEventually your local node will receive this new block and syncs it\u2019s local copy of the blockchain. Upon receiving the new block, the local node executes all the transactions in the block.If you use truffle to execute your transaction, truffle constantly polls the blockchain for confirmation. Once it sees the transaction is confirmed, it executes the code inside the then() block and prints the console log (per our example).2. Using Metamask instead of the local\u00a0nodeIf you install the MetaMask browser plugin, you can manage your accounts in your browser. The keys are stored only on your browser, so you are the only one who has access to your account and the private key. When you execute a transaction in your browser, the plugin takes care of converting your function call in to a raw transaction and sign the transaction using your private key. Metamask runs their own nodes which they use to broadcast your transaction (Behind the scenes Metamask uses nodes hosted by Infura). This way, you don\u2019t even have to run your own Ethereum node.3. Offline\u00a0signingWhat if you are not comfortable using a plugin or if you are worried that your local geth node might be compromised? There is a secure solution to solve that issue.If you notice, the first 2 steps don\u2019t require you to be online at all. If you want to absolutely make sure your transaction isn\u2019t tampered with, you can use a computer which is offline to convert the function call in to a raw transaction and use your private key to sign the transaction. You can then copy the signed transaction string and use a computer that is online to broadcast it to the network. There are many services like Etherscan and Infura you can use to broadcast your signed transaction to the network.Another safe solution is to use a hardware wallet such as Ledger or Trezor. These wallets store your private key and the code to sign the transaction is programmed in to the hardware itself. They need to be connected to the internet only to publish your signed transaction.Hopefully this gave you a better idea of how Ethereum transactions work. If you find something incorrect in the post, please leave a comment and I will fix it.Thanks Jim McDonald for proofreading this article.Self promotion: If you are interested in learning to build Ethereum dapps, check out my site zastrin.com!", "responses": "39"}, {"title": "Understand why Ethereum exists, and you\u2019ll get why it\u2019s a big\u00a0deal", "author_name": "MIT Technology Review", "link": "https://medium.com/mit-technology-review/understand-why-ethereum-exists-and-youll-get-why-it-s-a-big-deal-df6765a5805d?source=search_post", "post_date": "Oct 26, 2017", "readtime": "2 min read", "upvotes": "", "content": "Understand why Ethereum exists, and you\u2019ll get why it\u2019s a big\u00a0dealThe world\u2019s second-most-valuable cryptocurrency is also its most interesting\u200a\u2014\u200abut in order to understand it, you must first understand its\u00a0origins.MIT Technology ReviewBlockedUnblockFollowFollowingOct 26, 2017Founder of Ethereum Vitalik Buterin during TechCrunch Disrupt London 2015\u200a\u2014\u200aDay 2 at Copper Box Arena on December 8, 2015 in London, England\u200a\u2014\u200aJohn Phillips/Getty Images for TechCrunchBy Mike Orcutt", "responses": ""}, {"title": "The Year in\u00a0Ethereum", "author_name": "Josh Stark", "link": "https://medium.com/@jjmstark/the-year-in-ethereum-87a17d6f8276?source=search_post", "post_date": "Jan 16", "readtime": "22 min read", "upvotes": "8.7K", "content": "The Year in\u00a0EthereumJosh StarkBlockedUnblockFollowFollowingJan 16by Josh Stark, Evan Van Ness, and Daniel ZakrissonEthereum began as a bold experiment. Can we build a universal platform for digital money and assets, un-censorable applications, and decentralized organizations?We started with a slightly smaller experiment: was it possible to launch a blockchain that could execute arbitrary programs? Over time, the Ethereum community began new experiments. Would developers find it interesting? What applications are actually useful? The community learned from its successes and failures, and iterated on their work. New people joined the community and started running their own experiments.In 2018, the Ethereum community ran more experiments than ever before. What did we learn? This summary of the year in Ethereum is our attempt to identify the most important developments\u200a\u2014\u200athe things that we\u2019ll say mattered, 10 years out.These developments took place at every level of the Ethereum \u201cstack\u201d. This includes the core protocol and the clients that implement it, commonly referred to as \u201cLayer 1\u201d. It includes the supporting developer tools & infrastructure, that make engineering on Ethereum possible. It includes \u201coff chain\u201d technologies, that let developers build fast and performant applications. And it includes the products and businesses built on Ethereum.Keeping track of everything in this ecosystem is becoming more and more difficult every week. There are competing implementations of many infrastructure technologies\u200a\u2014\u200aincluding two clients with ~50% (Geth) and ~40% (Parity) of the network. There are multiple competing off-chain technology stacks being built, multiple ETH 2.0 clients under development, and most markets have multiple competing businesses. It feels messy and chaotic\u200a\u2014\u200athe Ethereum ecosystem is a bazaar, not a cathedral. While this can make it hard to follow, it\u2019s a credit to the community: we\u2019re too big to measure with simple tools.Our goal is to help you sort through that noise and see the bigger picture. In our view, here are the most important developments in 2018:1. More people started using Ethereum, for more things\u200a\u2014\u200abut we\u2019re still far from mass adoption.2. Decentralized Finance (DeFi) and stablecoins\u200a\u2014\u200aa new class of applications that saw many product launches and some breakout successes.3. The year of #BUIDL\u200a\u2014\u200ait became radically easier to build applications on Ethereum. Our development and security tooling improved significantly, we got better at sharing best practices, and hackathons became a trend.4. Layer 2 scaling\u200a\u2014\u200amultiple \u201clayer 2\u201d applications launched, and we made critical progress towards making these scaling solutions easy to use for developers.5. Zero knowledge technology\u200a\u2014\u200athis year it felt like every technical conversation in Ethereum was \u201cWe can do it this way right now, but of course once we have good zkSTARKs\u2026\u201d6. ETH 2.0 / Serenity\u200a\u2014\u200athe roadmap solidified, and it moved from a research project to an engineering effort.1. Did adoption of Ethereum grow in\u00a02018?From 2015\u20132017, it was an open question whether there would ever be any demand for Ethereum. Today, that answer feels settled: since late 2017, the Ethereum blockchain has continued to be used near maximum capacity:Source: Google Bigquery Ethereum public\u00a0datasetThis graph shows the utilization of the Ethereum blockchain at different points in time. Specifically, it is a measure of the total gas used divided by the gas limit. When the line approaches 1, it means the Ethereum blockchain is being used at nearly 100% capacity.Yes, the graph above is encouraging\u200a\u2014\u200apeople are paying to use the Ethereum blockchain. But it means we started asking harder questions: we\u2019re near 100% capacity even with such a small user base? What would happen to fees if we on-boarded millions of users, when the total capacity of the network is so low? How many people actually use Ethereum? What are they using it for? And what are the right metrics to measure growth?Measuring \u201cuse\u201d of Ethereum isn\u2019t easy. For instance, we can get a basic picture using raw on-chain statistics, like the number of transactions on the network:Source: https://etherscan.io/chart/txBut this doesn\u2019t tell the whole story. If Ethereum was being used near full capacity, how can the number of transactions be declining? The composition of transactions on Ethereum shifted from a large number of simple ones, to a smaller number of complex ones. For instance, token transfers (~50K gas) or opening up a MakerDAO CDP (up to 900K gas) both \u201ctake up\u201d more of the network\u2019s capacity than a simple ETH transfer (21K gas).As Ethereum\u2019s app layer continues to grow, we should expect the transaction count to decline while the chain operates at full capacity. And as more activity moves into side chains, state channels, or plasma chains (see Layer 2), measuring on-chain transactions increasingly only tell part of the story.", "responses": "13"}, {"title": "The Dai Stablecoin is a Game Changer for Ethereum and the Entire Cryptocurrency Ecosystem", "author_name": "James Seibel", "link": "https://medium.com/@james_3093/the-dai-stablecoin-is-a-game-changer-for-ethereum-and-the-entire-cryptocurrency-ecosystem-13fb412d1e75?source=search_post", "post_date": "Apr 11, 2018", "readtime": "11 min read", "upvotes": "5.1K", "content": "The Dai Stablecoin is a Game Changer for Ethereum and the Entire Cryptocurrency EcosystemJames SeibelBlockedUnblockFollowFollowingApr 11, 2018In later December of 2017, the company Maker released their long-awaited system for a decentralized stablecoin named \u201cDai\u201d. Dai is an Ethereum ERC20 token that is pegged to $1 USD\u200a\u2014\u200aevery Dai is worth $1, and will always be worth $1, regardless of how much Dai is in existence. There is no centralized authority like Tether that backs its value, and no traditional bank that backs each Dai with a real US dollar. There is nothing that can be shut down, and no centralized authority that needs to be trusted. Dai lives entirely within the Ethereum blockchain using smart contracts.The way Dai accomplishes this without centralized trust is incredibly clever and interesting, and in this post I will try my best to explain why Dai can be trusted and why it\u2019s a game changer for cryptocurrencies.I won\u2019t say much about the Maker organization itself, except that it\u2019s one of the oldest Ethereum-focused companies and has been working on this project since before Ethereum existed. The team is very well-regarded in the space and is backed by Vitalik Buterin, the creator of Ethereum.NOTE: The author works for Airfox which created the AirToken. This post is unrelated to Airfox or AirToken.Why Dai is a Game\u00a0ChangerBefore I explain the details of Dai and how it works, assume the following is true:Dai is always worth $1 USD eachIt can be freely traded like any other ERC20 tokenAnyone with an Ethereum wallet can own, accept, and transfer itIt can be exchanged without any middlemanNo individual person or company has control over itNo government or authority can shut it downThis enables several features that were previously impossible.USD (Dai) can now be transferred instantly, across borders, and without fees (other than ETH gas fees).Merchants can accept Dai with all the benefits of blockchain technology without the enormous risk of volatility. For example, merchants no longer need to worry about the price of Bitcoin fluctuating 15% between when they receive payment and convert into fiat currency. If a merchant charges $19.99 USD for a T-Shirt and receives 19.99 Dai, they can be confident that they have $19.99 USD whether they cash out their Dai that same day or in 2 months.Similarly, customers no longer have to worry about spending an asset that consistently goes up in value. A customer is unlikely to purchase a product with ETH if they think the value is going up\u200a\u2014\u200awhy spend $19.99 USD of ETH today when it will be worth $24.99 tomorrow?\u200a\u2014\u200abut customers don\u2019t need to worry about price fluctuations when using Dai.The way most merchants currently accept cryptocurrencies as payment is to use a middleman like BitPay, which has all of the negatives associated with traditional payment processors. These include processing fees, limits, and rules on what industries they do business with. With middlemen like BitPay, merchants are simply offering another method of payment for their customers, but see no upside other than extra sales. Even worse, if BitPay decides they don\u2019t like you, they can shut you off without any warning for any reason.With Dai, a merchant can process payments directly, as if they were receiving cash. If they choose to use a third-party, it\u2019s only to provide value-added services like e-commerce integrations, accounting software, and wallet management. But there is no need for a third-party to process payments or temporarily hold funds\u200a\u2014\u200athe blockchain itself can handle everything. No one can shut off the merchant\u2019s ability to receive payment.Finally, some may ask why you need something like Dai at all. Doesn\u2019t Tether already fulfill the purpose of a dollar-denominated token? My answer is that Tether, or any other centralized stablecoin, can be hacked, shutdown, steal your money, and is always operating at the whims of politics and human fallibility. Indeed, there is an enormous amount of speculation that Tether is operating fraudulently.Not-so with Dai. As a true decentralized stablecoin, you only need to trust the blockchain.How Dai\u00a0WorksDai is a masterpiece of game theory that carefully balances economic incentives in the pursuit of one goal\u200a\u2014\u200aa token that is continuously approaching the value of $1 USD.When Dai is worth above $1, mechanisms work to decrease the price. When Dai is worth below $1, mechanisms work to increase the price. The rational actors that take part in these mechanisms do so because they earn money anytime Dai is not perfectly worth $1. This is why Dai is always floating slightly above or below $1\u200a\u2014\u200ait is an endless wave function bouncing infinitely close to $1, but never quite achieving it. The farther Dai goes from $1, the more incentive there is to fix it. This is the magic of Dai.The rest of this article will explain precisely how these pricing mechanisms function as well as risks, safe guards, and actions that occur in response to events.What is\u00a0Dai?Dai is simply a loan against Ethereum. Anyone can create Dai\u200a\u2014\u200aall that\u2019s needed is ETH and the technical know-how to use a decentralized app (dApp).Most users\u200a\u2014\u200a99.999+%\u200a\u2014\u200awill never need to create Dai, nor understand how it\u2019s created. The longer Dai is worth $1 USD, the more faith users will have in it, and users will spend, accept, and convert Dai as needed.Even most cryptocurrency enthusiasts won\u2019t need to create Dai, nor understand how it\u2019s created. They will simply acquire Dai by trading for it on exchanges, including decentralized exchanges that live entirely on Ethereum, which makes Dai an essential component of any decentralized exchange.Dai is quite complex, and some have argued this complexity makes Dai too obtuse to ever catch on. This is a fallacy, as the primary use-case of Dai is being a stable $1 USD pegged token, which requires no deeper understanding of how Dai works. Again, 99.999+% of Dai users will never need to understand how Dai works.However, if you truly want to understand why you can trust Dai, you must understand all aspects of the Dai system and the economic incentives involved.We will now go down the rabbit hole.How is Dai\u00a0Created?As I said, Dai is simply a loan against Ethereum. By using the MakerDAO dApp, advanced users can take loans out in Dai against their ETH holdings.First, ETH is turned into \u201cwrapped ETH\u201d (WETH), which is simply an ERC20 wrapping around ETH. This \u201ctokenizes\u201d ETH so it can be used like any other ERC20 token.Next, WETH is turned into \u201cpooled ETH\u201d (PETH), which means it joins a large pool of Ethereum that is the collateral for all Dai created.Once you have PETH, you can create a \u201ccollateralized debt position\u201d (CDP), which locks up your PETH and allows you to draw Dai against your collateral, which is PETH.As you draw out Dai, the ratio of debt in the CDP increases. There is a debt limit that sets a maximum amount of Dai you can draw against your CDP.Once you have Dai, you can spend or trade it freely like any other ERC20 token.Creating Dai is complex\u200a\u2014\u200awhy would anyone do this? Can\u2019t I just buy Dai on an exchange?Yes! Creating Dai is complex, and you can indeed buy Dai on exchange! This is one reason why 99.999+% of people will never go through the nonsense of creating a CDP.However, there are several important reasons why you would create Dai, despite the hassle:You need a loan, and have an asset (ETH) to use as collateral for your loanYou believe ETH is going up in value. You can use your CDP to buy ETH on margin\u200a\u2014\u200ayou lock up your ETH in a CDP, draw Dai against it, use the Dai to buy more ETH on an exchange, and then use that ETH to further increase the size of your CDP. This can be accomplished without any third-party or centralized authority allowing you to do so\u200a\u2014\u200amargin trading can be accomplished entirely on the blockchain.The demand for Dai has driven the price above $1 USD. When this occurs, you can create Dai then immediately sell it on an exchange for greater than $1 USD. This is essentially free money, and is one of the mechanisms the Maker system uses to keep Dai pegged to $1 USD. Dai being worth over $1 USD encourages more Dai to be created.These three reasons are enough to ensure that Dai is continually created.How does Dai ensure that the value is always $1\u00a0USD?Economic incentives ensure that the value is maintained.As I said in the last section, when Dai is worth over $1 USD, ETH holders are incentivized to create more Dai and sell it, as it\u2019s free money.When Dai is worth less than $1 USD, CDP owners can pay down their debt at a cheaper price! This is an extremely clever solution that requires further explanation.Let\u2019s say I open a CDP with $1000 in ETH. I then draw out 500 Dai. In order to close this position, I must pay back 500 Dai (paying down debt destroys the Dai).If Dai is trading for less than $1 USD, say for $0.99, then I can buy Dai for less than $1 USD and then pay off my debt with a 1% discount. This is essentially free money \u2014if I took out a $500 loan (500 Dai), then bought 500 Dai for $495 (0.99 * 500 = 495, a 1% discount), then paid off my loan, I earned a free $5 of ETH.Of course, my demand for Dai increases its price, and eventually Dai increases in value until it approaches $1 USD. If Dai stays below $1, CDP owners continue to pay down debt and remove Dai from the system. When Dai goes above $1 USD, Dai is created to feed the demand. It is this push and pull, creation and destruction, supply and demand which ensures that Dai always matches the $1 USD peg.What if the ETH price crashes? Won\u2019t the whole system\u00a0fail?The short answer is that provided ETH is worth something, and the value of ETH isn\u2019t extraordinarily volatile (i.e. dropping 60% of value in 10 seconds), the system successfully balances.The long answer requires more explanation.CDP\u2019s have varying degrees of debt. When you open a CDP, you can draw up to 60% of the value in Dai. This means that with $1000 of ETH, you can take out 600 Dai. But not every CDP takes the full amount\u200a\u2014\u200athe more you draw, the riskier it is. Some CDP owners will withdraw 10%, 25%, 30%, etc.As ETH changes in price relative to USD, the debt ratio of each CDP also changes. As ETH rises in price, every CDP becomes safer as they are less indebted. As ETH falls in price, every CDP becomes riskier and more indebted.As each CDP has a different debt ratio, each CDP can be ranked in order of riskiness. More risky CDP\u2019s have higher debt ratios.As ETH falls in value, each CDP gets closer to the 60% debt threshold. If a CDP crosses this threshold, any Dai holder can pay off the CDP and earn a profit, which destroys Dai from the system, closes the CDP, and penalizes the owner of the CDP.This is complex and requires further reading to understand, but to summarize, rational actors are incentivized to remove risky debt from the Dai system by paying it off. CDP owners who let the debt get so risky are penalized for doing so, which incentivizes them not to have risky debt.CDP owners can make their debt safer by paying down debt as the CDP gets more risky. Astute CDP owners will observe their CDP getting more risky, then pay down Dai early to prevent a penalty. But those who neglect their CDP will get penalized by the system if they cross the debt threshold.As the value of ETH fell from $1,400 USD in January 2018 to $400 in April 2018, the Dai system\u2019s incentive structure successfully kept the value of Dai pegged to $1 USD, which is an incredible accomplishment and proof that Dai succeeds even in a falling ETH environment.How is the price of ETH known? I thought this system was decentralized?Extremely good question, and this is actually the riskiest part of the entire Maker system.The value of ETH to USD has to come from somewhere, and in the Maker system it comes from oracles. Multiple oracles provide pricing data, which reduces the risk that any one oracle is compromised. Additionally, the amount that the ETH to USD price can change per block is capped to prevent rapid changes caused by an attacker.But the final fail-safe is that Maker (MKR) token owners can vote a \u201cglobal settlement\u201d in the case of catastrophic failure, such as a coordinated attack. This shuts the system down and gracefully unwinds all positions to return ETH to the rightful CDP owners. This is the nuclear option in the system, and shows that MakerDAO is a true \u201cDecentralized Autonomous Organization\u201d (DAO). The owners of MKR itself are the ones who vote on what happens.What is the purpose of the Maker token? It doesn\u2019t seem like you need it to create or spend\u00a0Dai\u2026The Maker (MKR) token has two distinct uses.The first is that owning MKR gives you the right to vote on the system itself. This is why Maker is a \u201cDecentralized Autonomous Organization\u201d (DAO)\u200a\u2014\u200aMKR holders can vote on various things like maximum debt ratios. MKR holders can also shut down the whole system in the case of catastrophic failure, which is an essential fail-safe mechanism.The second is that paying down debt in a CDP requires the owner to pay a 1% annual fee for taking out the loan, payable only in MKR. For example, if you took a 500 Dai loan against $1000 of ETH and held it for a year, paying off the loan would take 500 Dai and $5 USD worth of MKR. The MKR used to pay off the loan is then destroyed (\u201cburned\u201d).The burning of MKR encourages the value of MKR to increase over time. As MKR is divisible up to 18 decimal places, as long as a single MKR token exists, up to $1 quadrillion USD could safely be traded without issue, and the number of decimals could be increased later if needed. So there is no issue that MKR will run out, and the amount destroyed will will decrease as the MKR value increases.Why is ETH the collateral? Why not another ERC20\u00a0token?ETH is the most important asset within the Ethereum blockchain, and it makes sense to use it as the first asset that backs CDP\u2019s.However, the Maker system will work regardless of the asset, provided it exists within Ethereum and oracles can provide a USD valuation. Maker has plans to use Digix as its next asset, which is a token backed by physical gold. Eventually multiple assets could be used to create a single CDP, including other ERC20 tokens.Why is Dai pegged to USD? Why not the Euro or Swiss\u00a0Franc?The Maker system can work with any other currency or asset peg. In the future, similar stablecoins pegged to major currencies such as Swiss Francs, assets like gold, or even equity stocks can and will be created. All that\u2019s needed are pricing oracles.ConclusionThe proof that Dai works is that each Dai has been consistently worth $1 USD. As Dai continues to successfully maintain its USD peg, faith in Dai will increase.99.999+% of users do not need to understand how Dai works, they only need to trust it, and the history of Dai provides the trust needed. If you need to understand Dai deeper to feel comfortable using it, then you should carefully read and understand how it works, and plenty of additional information is easily accessible via Google.Dai is a game changer because it allows USD to be transferred in any amount, instantly, across borders, without fees, without any interference. This enables a new era of commerce that exists purely within the blockchain and cannot be shutdown.Maker is truly a technology that shows off the unique capabilities of Ethereum and provides a solution that was 100% impossible before blockchain technology.You will hearing much more about Maker and Dai\u200a\u2014\u200athis is only the beginning.", "responses": "11"}, {"title": "How to beat FOMO: What are Bitcoin & Ethereum worth in\u00a02020?", "author_name": "Bobby Ullery @bobbyullery", "link": "https://medium.com/@bobbyullery/how-to-beat-fomo-what-are-bitcoin-ethereum-worth-in-2020-bc9c84961025?source=search_post", "post_date": "Jun 13, 2017", "readtime": "6 min read", "upvotes": "1.8K", "content": "How to beat FOMO: What are Bitcoin & Ethereum worth in\u00a02020?6/13/17 Edit: updated with feedback from a few RedditorsBobby Ullery @bobbyulleryBlockedUnblockFollowFollowingJun 13, 2017It\u2019s been a big year for cryptocurrencies, with the total market cap for crypto jumping 6x since January 1st - from $18B to over $111B as of June 13th.The FOMO (fear of missing out) is real. New money is entering the market at a staggering rate - to the degree that many exchanges have had problems on-boarding and verifying their new customers to keep up with demand.These new investors are coming in droves after hearing about sky-high returns from a friend or friend\u2019s friend or a friend of a friend\u2019s friend.Once they\u2019ve gotten through the verification process on Coinbase or Gemini or Kraken, they execute their first market order and the rush of the cryptocraze washes over them. To the MOON!Then price drops by 10%, our new investor freaks out, convinces themselves that they\u2019re hardly ever right, that ETH or BTC is going to $0 and that they should just cut their losses. They panic sell, adding fuel to the micro-bear run and the price continues to drop. Whew, that was close. Got out just in time.A short time later, they see that the price is not only retracing back toward their entry price, soon they\u2019ll realize that it will exceed it. They just bought high and sold low. They leave the market.Recent moments of FOMO in BTC & ETH\u00a0tradingWe\u2019ve seen this play out a number of times this year, and as an investor myself, I too get concerned when I see the price of ETH & BTC begin a FOMO trend. I\u2019ve seen the value of my portfolio drop by 20\u201350% in hours.However, in order to counteract FOMO and any knee-jerk panic selling reaction I might have, I\u2019ve done two things:First, I\u2019ve taken my coins off of the exchanges. This prevents me from having my finger on the trigger and selling in any sell-off or panic. I suggest you do the same, even if only for the security of storing your coins in a wallet to which you alone own the private key.Second, I\u2019ve quantified what I think Ether and Bitcoin will be worth in 2020. This personal thesis keeps me confident of the longer term state of crypto and in my investment. I\u2019m not here to day trade, I\u2019m here for the long term\u200a\u2014\u200aand this helps me weather the storms. I\u2019m not even saying I\u2019m right, but it changes my long term perspective and makes be a more patient investor.I think Bitcoin and Ethereum will share a $4.5 trillion market cap by\u00a02020.Uh ok, whoa partner, how did you arrive there? Here\u2019s my simple explanation:Sizing the world economyThe nominal GDP of the world economy (as of 2016) is $78 trillion. By 2020 the IMF estimates the nGDP will be $91 trillion:http://www.imf.org/external/datamapper/NGDPD@WEO/OEMDC/ADVEC/WEOWORLDAsk yourself, in three years, do you think that 5% of the world\u2019s GDP could be stored and exchanged using blockchain technology?Me too\u200a\u2014\u200afor many reasons: The Enterprise Ethereum Alliance; the massive investment that world banks are making in blockchain technology; the interest in digitizing the currencies of countries like Russia, China and others; the leveling of global political power; because it\u2019s cheap, faster and more secure than current financial technologies.Ok, assumption granted. Now some math. If 5% of the world\u2019s GDP in 2020 is housed on the prevailing blockchains, then the value of crypto will be ~$4.55 trillion.If ETH/BTC are the anointed blockchains, what are the value of those networks?For simplicity and bi-partisanship, let\u2019s assume that BTC & ETH are equally dominant, each with 25% of the total market size of crypto, with the remaining 50% distributed across hundreds of other coins, perhaps private bank and treasury networks.This means that BTC and ETH would each represent 25% of that $4.55 trillion, or $1.1375T each.How much could one Bitcoin be worth?In 2020, there will be ~18,375,000 BTC in circulation. $1,137,500,000,000 divided by 18,375,000 = $61,900 per coin, ~+2,200% from today.How much could one Ether be worth?This is a little harder to calculate due to the somewhat unknown supply of Ether in the future, how Proof-of-Stake might change new Ether issuance, and the impact that the Ice Age will have on time between new ETH issuance.The original 2014 issuance model, stated a projection of ~162M ETH in circulation in 2020, however /u/manly_ pointed out that Vitalik has said it would be closer to 100M, so for our rough math we\u2019ll use 100M ETH.$1,137,500,000,000 divided by 100,000,000 = $11,375 per coin, ~+4,000% from today.Ok, what if BTC and ETH are much more dominant than a combined 50% of crypto?If BTC and ETH represent 33% of the total market opportunity each, then each would have a total value of $1.502 trillion.BTC would be worth $81,742 ~+2,900% from today.ETH would be worth $15,020 ~+5,300% from today.Again, this is just an apples to apples comparison, it doesn\u2019t take into account market speculations, dividends from Proof-of-Stake or incentives from new BIPs or EIPs, or other external forces that could factor in.So, if 5% of nGDP by 2020 is achieved, the question becomes which could be the dominant\u00a0coin?I don\u2019t know the answer to that. However, I do believe that there is room in the sandbox for not only BTC and ETH, but others as well. If I had to choose, I think ETH is not only at parity to BTC in it\u2019s ability to store and transmit value, but is also the underpinning for additional value-add networks to be built on top of it, in any industry. This might tip the scales in ETH\u2019s favor, but I do not believe this is a winner take all, zero sum game. What\u2019s good for BTC is good for ETH, what\u2019s good for ETH is good for BTC.What\u2019s good? Adoption.In conclusionDon\u2019t FOMO your coins, the long term implications of blockchain technology are bigger than any one company, bigger than any one market segment. Keep your eye on the long term and hold your investment through short-term dips.I\u2019m not saying my projections are correct either, I simply want to put into world how I foresee the value of ETH/BTC, where I get my justification for holding long-term, and how I am at peace during FOMO or any other market volatility.Edit: some readers pointed out a mistake in my math. I actually did the calculations based on 5% of the current GDP and not 2020\u2019s. I\u2019ve corrected the mistake.", "responses": "27"}, {"title": "Adding Ethereum Classic Support to\u00a0Coinbase", "author_name": "Coinbase", "link": "https://blog.coinbase.com/adding-ethereum-classic-support-to-coinbase-becb9a337e9c?source=search_post", "post_date": "Jun 11, 2018", "readtime": "4 min read", "upvotes": "4.5K", "content": "Adding Ethereum Classic Support to\u00a0CoinbaseCoinbaseBlockedUnblockFollowFollowingJun 11, 2018We are pleased to announce our intention to add support for Ethereum Classic (ETC) to Coinbase in the coming months. We are announcing this both internally and to the public consistent with our process for adding new assets.Per this process, we will now begin the engineering work (Step 4) for supporting Ethereum Classic. As part of this process, customers can expect to see public-facing APIs and other signs that the asset is being added. When we reach the final testing phase of the technical integration, which we expect to occur over the next few months, we will publicly announce a launch date for trading via our blog and Twitter (Step 5).What Ethereum Classic support means for our\u00a0productsCoinbase Custody\u200a\u2014\u200athe Custody team is planning to add support for deposits and withdrawals of Ethereum Classic. Note that Custody will likely support more assets than those available to trade on Coinbase Markets, Coinbase Pro, Coinbase Prime and Coinbase for the foreseeable future.Coinbase Markets\u200a\u2014\u200athe Markets team is planning to add trading support for Ethereum Classic. In accordance with our Trading Rules, all ETC books will open in post-only for a minimum of one hour. If sufficient liquidity is established, trading will then be enabled on Pro and Prime.Coinbase Pro\u200a\u2014\u200athe Pro team is planning to add trading support for Ethereum Classic. Note that customers who previously had an Ethereum Classic balance on the platform as a result of the 2016 Ethereum hard fork and did not elect to withdraw their funds prior to January 2017 will receive a corresponding Ethereum Classic credit.Coinbase Prime\u200a\u2014\u200athe Prime team is planning to add trading support for Ethereum Classic. Note that customers who previously had an Ethereum Classic balance on the platform as a result of the 2016 Ethereum hard fork and did not elect to withdraw their funds prior to January 2017 will receive a corresponding Ethereum Classic credit.Coinbase Asset Management\u200a\u2014\u200aany asset listed on Coinbase Markets will be added to Coinbase Index in accordance with the Coinbase Index methodology. Coinbase Index Fund will rebalance to include Ethereum Classic.Coinbase\u200a\u2014\u200aper our previous guidance, Coinbase will list assets only after they are listed on Coinbase Pro and Prime. After evaluating factors such as liquidity, price stability, and other market health metrics, we may choose to add Ethereum Classic to the Coinbase platform. It\u2019s also worth repeating that Coinbase Markets, Coinbase Pro and Coinbase Prime will likely have more assets listed on the platform than the Coinbase platform, i.e. listing on Coinbase Markets does not guarantee listing on Coinbase.", "responses": "17"}, {"title": "How to do an ICO on Ethereum in less than 20\u00a0minutes.", "author_name": "Moritz Neto", "link": "https://medium.com/bitfwd/how-to-do-an-ico-on-ethereum-in-less-than-20-minutes-a0062219374?source=search_post", "post_date": "Mar 19, 2018", "readtime": "9 min read", "upvotes": "7.5K", "content": "How to do an ICO on Ethereum in less than 20\u00a0minutes.Moritz NetoBlockedUnblockFollowFollowingMar 19, 2018Congratulations, you finally found it. This is exactly what you were looking for all over the internet.This tutorial will give you everything you need to deploy an Initial Coin Offer aka ICO contract on Ethereum main net #nojokes.After releasing the guide: How to issue your own ERC20 in less than 20 minutes we had some insane results:Ranking 1st on Google, above TechCrunch and Ethereum itself for \u201cHow to issue a Token\u201d. \ud83c\udf8920k people from different backgrounds went through the whole tutorial already. \ud83c\udf89113 Different Tokens Officially Issued so far.\ud83c\udf89The crazy amount of requests and amazing feedback inspired me to write this one.Being 100% open-source advocate, and working extremely hard to empower people with Blockchain that are TRULY accessible to everyone,I believe this can empower thousands of people to build meaningful things.Hopefully, it will inspire you to build the next big thing on cryptoland and NOT to be the next big fucking scam.", "responses": "86"}, {"title": "Want to buy VIT? Make sure you have an Ethereum\u00a0wallet", "author_name": "Candi @ Vice", "link": "https://medium.com/viceindustrytoken/want-to-buy-vit-make-sure-you-have-an-ethereum-wallet-1ab43fbaefcb?source=search_post", "post_date": "Feb 15, 2018", "readtime": "3 min read", "upvotes": "", "content": "Want to buy VIT? Make sure you have an Ethereum\u00a0walletCandi @ ViceBlockedUnblockFollowFollowingFeb 15, 2018The Vice Industry Token crowdsale is coming up on February 20. It represents the public\u2019s chance to purchase VIT and take part in a revolution in the adult industry\u200a\u2014\u200athe creation of an adult entertainment ecosystem in which everybody who accesses the platform will be rewarded.Here\u2019s how the crowdsale works. VIT uses Ethereum, a decentralized blockchain platform that runs smart contracts, to generate VIT proxy tokens to customers in exchange for ETH cryptocurrency paid out of customers\u2019 Ethereum wallets.It is important to note that buyers who want to participate in the VIT crowdsale MUST pay for their VIT out of an Ethereum\u00a0wallet.A digital wallet is simply a method of storing your crytptocurrency and/or crypto tokens. Certain kinds of wallets support certain types of platforms. In order to buy VIT, you need to have an Ethereum-compatible wallet and load it up with the amount of ETH you want to use to buy VIT. There are several different Ethereum-compatible wallets available. Buyers who attempt to purchase VIT using an Exchange or any other type of wallet or funding source will lose the currency paid, so it\u2019s crucial to set up your Ethereum wallet before you try to buy.VIT smart contractsSales of VIT are driven by smart contracts. These are applications that define the rules and terms of an agreement or transaction, as well as automatically enforce those rules. A smart contract ensures that a transaction occurs exactly as agreed without any middleman needed.One of the smart contracts involved in the VIT sale is the ERC20 token, or the token contract. This governs the token itself, including managing transfers and other functions, based on globally agreed Ethereum-powered (ERC20) standards.Another smart contract runs the sale itself. The VIT sales contract holds proxy tokens for buyers once the buyers\u2019 ETH are paid. The VIT sales contract includes a unique refund functionality. After the crowdsale ends, buyers can either claim their proxy tokens, which are immediately released into the customer\u2019s Ethereum wallet, or the buyer can request a refund, and the original ETH paid will be refunded back into the customer\u2019s wallet and the refunded VIT tokens will revert to Vice industry.While the refund function will expire on June 28, 2018, buyers will be able to claim purchased tokens indefinitely. After the refund contract expires, purchasers will also be able to redeem their claimed proxy tokens for the native Vice Industry Tokens from Vicetoken.com.The refund function was introduced in order to offer early buyers the opportunity to use and experiment with the platform to ensure that the VIT network offers them value.Looking for more details about Vice Industry and the VIT? Check out the whitepaper. Join us on Telelgram https://t.me/viceindustrytoken", "responses": "53"}, {"title": "Getting Started as an Ethereum Web Developer", "author_name": "Alex Miller", "link": "https://hackernoon.com/getting-started-as-an-ethereum-web-developer-9a2a4ab47baf?source=search_post", "post_date": "Apr 11, 2017", "readtime": "12 min read", "upvotes": "1.5K", "content": "Getting Started as an Ethereum Web DeveloperAlex MillerBlockedUnblockFollowFollowingApr 11, 2017UPDATE: I have created a repo for you to play around with that showcases most of the stuff covered in this article.I routinely build web applications that use Ethereum and I think I take for granted the amazing toolset that I use every day. Our ecosystem is growing rapidly and I think a lot of newcomers are feeling overwhelmed. Ethereum is an amazing technology, but it is also nascent and there simply hasn\u2019t been enough time for expertise to sufficiently permeate. I want people to know that Ethereum development is actually very compatible with modern web developer workflows\u200a\u2014\u200ait\u2019s relatively easy to integrate Ethereum functionality into any web application, and you can start today.Because I fancy myself a champion of Ethereum on a mission to show mainstream developers the light, I have decided to put a bunch of scattered knowledge into one place (not very decentralized, I know). You will of course need to consult the proper documentation at each step, but my hope is that this article will show you how everything, more or less, fits together.If you\u2019re ready to learn, please let me be your spirit guide. Come join the Ethereum ecosystem and help us conquer the world.Step 1: Get a blockchainThere are lots of clients to choose from, but I suggest not yet worrying about geth vs parity vs pyethapp (the up and coming python client\u200a\u2014\u200arepresent!). For everyone who just wants a freaking blockchain so they can start building stuff (e.g. you), I suggest testrpc for all your development needs. Once you have it installed, you can start it with:testrpcCongratulations, you now have a blockchain. Note that by default testrpc does not mine blocks, but the -b flag allows you to specify a block interval (e.g. 1 second). I like this configuration for a bunch of reasons I won\u2019t get into, but just keep in mind that it is available.Step 2: Talk to the blockchainOnce you have your blockchain spinning, you need a way to talk to it. You have probably already downloaded web3.js. If you haven\u2019t, you must be really new. Well, go ahead and make sure you have web3 installed, then open up a config.js file and put this in it:var web3 = require('web3');var web3_provider = 'http://localhost:8545';var _web3 = new web3();_web3.setProvider(new web3.providers.HttpProvider(web3_provider));exports.web3 = _web3;Any time you want to talk to the blockchain on your backend server, just do this:var config = require('./config.js');config.web3.eth.XThe X (i.e. whatever web3 API function you want) can be found here.Step 3: Write some smart contractsI\u2019ll save you some time here: you\u2019re going to be using solidity to write smart contracts. If you think smart contracting is scary, don\u2019t. For many applications, it\u2019s actually really easy as long as you follow one rule: keep your contracts simple.There are 2 reasons you want to always always always keep your contracts as absolutely stupid simple as is humanly possible:Every compute/storage operation costs gas, which equals ether, which equals money. We\u2019re talking the difference between paying $0.05 and $1.50 to call your contract. The point of Ethereum is not to replace your database (at least not in my opinion), so keep the logic short and the storage minimal.More complexity = more places for things to go wrong. This is bad when your code is responsible for people\u2019s money and can\u2019t be rolled back. Please take a minute to let that last sentence sink in.Okay, simple contracts\u200a\u2014\u200agot it. Let\u2019s move on.Step 4: Deploy those smart contractsIf you haven\u2019t heard of truffle, you should definitely check that out now. I like to manage my tester contracts in a truffle directory. The neat thing about this is that you can easily work it into your testing framework. Consider this script in package.json:\"scripts\": {  \"test\": \"cd truffle && truffle deploy && truffle test ./myTruffleTest.js && cd .. && npm run myOtherTests\"}What this is doing is 1. deploying your contracts, 2. running your truffle test, 3. running your regular tests\u200a\u2014\u200aall in the same script!Note that your truffle tests are \u201cspecial\u201d in that they inject a bunch of cool blockchainy stuff into your testing scope. There are a variety of ways to pass this information to the rest of your test suite. I personally use a truffle test to save the contract addresses into a config file and then import that config into my regular mocha tests. As long as I have the proper addresses, I can interact with my contracts in any test via web3.js. Anyway, you\u2019ll figure out what works best for you.Back to the main show. You can deploy your smart contract(s) by going to your truffle directory and typing:truffle deployNote that testrpc must be running in another window!This will print the address of your freshly deployed contract, which you will need later. As I mentioned, you can always save this address programmatically in a truffle test, but for now you can just copy and paste it into your config.js file:exports.contract_addr = '0xe73e8e0a4442e140aea87a4b150ef07b82492500'Step 5: Make a smart contract\u00a0callNow that we have a contract, we need to call it. Okay this one is going to seem janky\u200a\u2014\u200awe\u2019ll be calling contracts with pure hex strings. Sure there are libraries to make this easier, but when it comes to contract calls, I kick it old school. And remember, I am your sensei.The first thing to note is that everything must be in hex (see appendix for more details). Numbers, strings, etc. The second thing to note is that words in Ethereum are 256 bits. This means you need to left-pad everything with zeros to 64 characters. The third thing to note is that types must be declared canonically in the function definition.Okay this is getting really neckbeardy. Let\u2019s go through an example:function add(uint x, uint y) public constant returns (uint) {  return x + y;}Let\u2019s say you want to add 1 and 2. Here\u2019s how you call this function:1: Take the first 4 bytes of the keccak 256 hash of your tightly packed, canonical function definition.Say what? Well, I didn\u2019t make this up, but you can just type your function declaration into this website and take the first 8 characters. What do I mean by canonical? Well, in Ethereum there are canonical types and shorthand types (e.g. uint256 is uint\u2019s canonical type). I actually don\u2019t know where they\u2019re all defined, but check out the Ethereum ABI definition for examples as well as this post.Anyway, this is what our declaration looks like:add(uint256,uint256)Which returns the keccak256 hash:771602f7f25ce61b0d4f2430f7e4789bfd9e6e4029613fda01b7f2c89fbf44adOf which the first 4 bytes (8 characters) are:771602f72: Pad your parameters to 256 bitsThis one\u2019s a little easier to get a grasp on:x=1 is:0000000000000000000000000000000000000000000000000000000000000001y=2 is:0000000000000000000000000000000000000000000000000000000000000002And together they are:000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000023: Pack everything together and add a 0x prefixPretty self explanatory:0x771602f700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\u2014Now that we have our payload, we can call the contract with web3:var config = require('./config.js');var call = '0x771602f700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002'var to = config.contract_addr;var res = config.web3.eth.call({ to: to, data: call });After that, you should get back 3 for res. Actually, you\u2019ll get a BigNumber object:res.toString()>'3'You should probably read this to learn more about why you should use BigNumbers throughout your app.Okay fine, you can use the library I was talking about earlier.Wait, we\u2019re not done yet! I have only just shown you how to call a contract. But what if you want to write to it (i.e. update state)? The above will not work! You need to sign a transaction with your private key, but before that, you need some ether.Step 6: Setup your\u00a0accountLet\u2019s go back to truffle. In our test, we need to add something like this:var keys = require(`${process.cwd()}/../test/keys.json`);it('Should send me some ether.', function() {  assert.notEqual(keys.me.addr, null);  var eth = 1*Math.pow(10, 18);  var sendObj = {    from: accounts[0],    value: eth,    to: keys.me.addr  }    Promise.resolve(web3.eth.sendTransaction(sendObj))  .then(function(txHash) {    assert.notEqual(txHash, null);    return web3.eth.getBalance(keys.me.addr)  })  .then(function(balance) {    assert.notEqual(balance.toNumber(), 0);  })})Important note: we are actually sending 1 ether which is the same as 10^18 wei. We always make calls/transactions with wei values.Now, I\u2019m skipping a step here. You need to first get an Ethereum account, which is derived from a private/public keypair that you generate. I like using eth-lightwallet for key management on the backend. If you want more details/instructions on that, they are in the appendix.To keep things simple, let\u2019s just pretend I have this variable hardcoded in my ever growing config.js:exports.me = {  addr: \"0x29f2f6405e6a307baded0b0672745691358e3ee6\",  pkey: \"8c2bcfce3d9c4f215fcae9b215eb7c95831da0219ebfe0bb909eb951c3134515\"}Obligatory reminder: never share your private key, upload it to github, or publish it on Medium if there is or will ever be any money on it.Back to the test, you can see that ether is being moved from accounts[0]\u00a0, which by default has a bunch of ether, to me.addr, which is in your config file.Step 7: Transacting with your smart contractsNow that your account has some ether, it\u2019s time to spend it. There are 3 ways to spend ether:Sending it to another address as valueCalling a contract function that updates the state of the network, which requires gas to incentivize the miner to process your update.Call a contract that updates state, but also accepts ether as payment (FYI there is a payable modifier in solidity)\u200a\u2014\u200avalue will be sent and you will also have to pay for gas.What we\u2019re going to do next falls into category #2. Suppose we have the following function that keeps track of a user\u2019s balance of something:function addUserBalance(uint balance)public returns (bool) {  if (!accounts[msg.sender]) { throw; }  if (accounts[msg.sender].balance + balance < accounts[msg.sender].balance) { throw; }  accounts[msg.sender].balance += balance;  return true;}Note the second if statement, which is necessary because adding and subtracting in solidity can lead to numerical overflow and underflow\u200a\u2014\u200abe careful! Also note the undeclared msg object living in your function scope. This has all sorts of neat stuff you can reference in your function.When we call this function by sending a transaction, we are asking to update the global state of the network to say the following:The balance of msg.sender's account, within the scope of this contract, has been increased by balance.We don\u2019t have the power to update state ourselves, so we need a miner to do it for us. We pay him or her for this service with gas, which translates to ether.To appropriately call this function, we need to use ABI again:addUserBalance(uint256) --> 22526328 --> 0x225263280000000000000000000000000000000000000000000000000000000000000001And we use this data to form an unsigned transaction:var data = '0x225263280000000000000000000000000000000000000000000000000000000000000001';var nonce = config.web3.eth.getTransactionCount(keys.me.addr);var gasPrice = 20 * Math.pow(10, 9);var gasLimit = 100000;var txn = {  from: config.me.addr,  to: config.contract_address,  gas: `0x${gasLimit.toString(16)}`,  gasPrice: `0x${gasPrice.toString(16)}`,  data: data,  nonce: `0x${nonce.toString(16)}`,  value: '0x0'}As mentioned above, gas is required to make a transaction (i.e. update the state). gas * gasPrice is the amount of wei the miner can possibly spend to execute your transaction. If the operations cost more than what you provided, the transaction will not update the state and the miner will keep all your gas money. If less than the gas provided is used, you are refunded the remainder.If we submit this object to the network, it will fail because there has been no proof that I am actually authorizing this transaction. Who knows, some stranger could be updating my balance to 1 billion (although it\u2019s unclear why anyone would do that).Anyway, what I need to do is sign the transaction with my private key. Remember that old thing hanging out in your config file that I told you not to share with anyone? Do this with it:var Tx = require('ethereumjs-tx');var privateKey = Buffer.from(config.me.pkey, 'hex')var tx = new Tx(txn);tx.sign(privateKey);var serializedTx = tx.serialize();Here we are using one of my favorite libraries to sign a transaction object given your private key. This should return something like the following:0xf8aa808504a817c800830f424094a0f68379088f9aee95ba5c9d178693b874c4cd6880b844a9059cbb000000000000000000000000053b2188b0b100e68299708864e2ccecb62cdf0d000000000000000000000000000000000000000000000000000000746a5288001ca01f683f083c2d7c741a1218efc0144adc1749125a9ca53134b06353a8e4ef72afa07c50fb59647ff8b8895b75795b0f51de745fa5987b985f7d1025eb346755bca0Now, finally, we can submit this to the blockchain via web3. It will return a transaction hash that is simply a hash of the transaction provided (this is, very importantly, not proof that the transaction was successful!)var txHash = config.web3.eth.sendRawTransaction(raw_txn);Which looks something like this:0xac8914ecb06b333a9e655a85a0cd0cccddb8ac627098e7c40877d27a130a7293Now there\u2019s one last step, which is strictly speaking optional, but important to verify that your transaction has been accepted and processed: getting your transaction receipt.var txReceipt = config.web3.eth.getTransactionReceipt(txHash);If this returns null your transaction was not picked up (perhaps you signed with the wrong private key?). If it\u2019s not null, there may still be various other clues that your transaction failed that I won\u2019t get into now.Okay, just one clue\u200a\u2014\u200aif your gasUsed is equal to the total gas sent, it means your function call failed. This means either 1. you didn\u2019t provide enough gas and/or 2. your contract encountered a throw.And that\u2019s a wrap!ConclusionI know, that was a lot of stuff.If you\u2019re feeling overwhelemed, I suggest you take it slow and use this article as a reference. You will probably need to spend a lot of time at each step reading documentation and playing around.That said, what I\u2019ve described above is 80% of the battle. Once you\u2019ve mastered these things, I would personally consider you a capable Ethereum developer.If you\u2019re interested, start tinkering! The tools are getting better by the day and it\u2019s never been easier to jump in. Welcome aboard.\u2014If you liked this article, follow me on twitter or come join the community. Also check out my company, ConsenSys, because we do awesome stuff as well as my project, Grid+, which is using Ethereum to change the future of energy. If you want to join our mailing list, you can subscribe here:\u2014Appendix:Hex strings:I realized I didn\u2019t choose the best example for hexadecimal numbers (since 1 is the same value in both hex and base10 notation). If you were to instead call our add function with this as one of the parameters:0000000000000000000000000000000000000000000000000000000000000100You would actually be adding 256. So probably what\u2019s good practice for any function call is to do the following:var _x = 100;var x = `${x}.toString(16)`;This will ensure you are always calling with hex values.Keys and profilesIf you\u2019re stuck on how to generate keys, you can go ahead and look at this file I use in my apps:/** * Generate a test keypair */var keystore = require('eth-lightwallet').keystore;var Promise = require('bluebird').Promise;var crypto = require('crypto');var fs = Promise.promisifyAll(require('fs'));var jsonfile = Promise.promisifyAll(require('jsonfile'));var KEYSTORE_DIRECTORY = `${process.cwd()}/test`;var name = process.argv[2];var password = \"test\";/**  * Run the generator  */createKeystore(password).then(function(ks) {  return saveProfile(name, ks.keystore, ks.privateKey, ks.address); }).then(function(saved) { console.log('saved', saved); }).catch(function(error) { console.log(error); });/**  * Utility Functions  */function createKeystore(_password) {  return new Promise(function(resolve, reject) {    var password = Buffer(_password).toString('hex');    keystore.createVault({ password: password }, function(error, ks) {      if (error) { reject(error); }      ks.keyFromPassword(password, function(error, dKey) {        if (error) { reject(error); }        ks.generateNewAddress(dKey, 1);        var address = `0x${ks.getAddresses()[0]}`;        var privateKey = ks.exportPrivateKey(address, dKey);        var keystore = JSON.parse(ks.serialize());        resolve({ address, privateKey, keystore });      });    });  });}function saveProfile(name, keystore, privateKey, address) {  return new Promise((resolve, reject) => {    jsonfile.readFileAsync(`${KEYSTORE_DIRECTORY}/keys.json`, {throws: false})    .then(function(PROFILES) {      var profiles = PROFILES || {};      profiles[`${name}`] = {        keystore,        privateKey,        address      };      console.log('profiles', profiles)      return profiles;    })    .then(function(_profiles) {      return jsonfile.writeFileAsync(`${KEYSTORE_DIRECTORY}/keys.json`, _profiles, {spaces: 2});    })    .then(function() { resolve(true); })    .catch(function(error) { reject(error); });  })}This will save a keystore that you name in a file called test/keys.json. You can run it with plain old node keygen.js <account_name> and you should be good. I use this for test accounts, but you can reuse the functions if you need to e.g. automatically generate accounts.Hacker Noon is how hackers start their afternoons. We\u2019re a part of the @AMI family. We are now accepting submissions and happy to discuss advertising & sponsorship opportunities.If you enjoyed this story, we recommend reading our latest tech stories and trending tech stories. Until next time, don\u2019t take the realities of the world for granted!", "responses": "21"}, {"title": "Why Ethereum 1.0 failed and Bitcoin succeeded", "author_name": "Noah Ruderman", "link": "https://medium.com/coinmonks/why-ethereum-1-0-failed-and-bitcoin-succeeded-72e9594b9789?source=search_post", "post_date": "Jan 22", "readtime": "7 min read", "upvotes": "3.3K", "content": "Why Ethereum 1.0 failed and Bitcoin succeededNoah RudermanBlockedUnblockFollowFollowingJan 22IntroductionEthereum 1.0 wouldn\u2019t be undergoing a complete redesign unless it had major flaws. So how did we get here? And why did Bitcoin seem to fare much better? Two important factors are user experience and economics. At a minimum, for a product to succeed it needs to be a compelling alternative to an existing problem, and the transaction fee must not exceed the economic value of the actual transactions. Together these point to an upwards trajectory for Bitcoin and a downwards trajectory for Ethereum 1.0.Competing on User ExperienceThere\u2019s a saying that for one product to replace another with network effects, it needs to be ten times better. Specifically it must be good enough to justify the painful switching costs. Here we examine that first competitor and if those improvements could arguably be called a 10x better experience.Bitcoin was 10x\u00a0betterWho was Bitcoin\u2019s first competitor? Gold comes to mind, but Bitcoin\u2019s inflation in the early years was very large, far exceeding that of physical gold mining. There was little Bitcoin had to offer gold bugs in terms of longevity, inflation, decentralization, at least for now. It was not yet a competitive product.Rather, Bitcoin\u2019s first competitor was the wire / ACH transfer. In the developed world it\u2019s hard to think of someone without a bank account, and the base of people with experience using these workflows is about as high as the number of people who have ever filed taxes. Moving money could cost $30 for a wire, and take one business day which could mean three total days given that banks often don\u2019t operate on the weekend. ACH transfers are cheaper but much slower, taking 3\u20135 business days to process.Bitcoin was an obvious 10x improvement on the wire / ACH\u00a0transferBitcoin was an obvious improvement with 10 minute block times and fees that were for a very long time under a penny. Unlike banks, Bitcoin didn\u2019t shut down after 5 PM or on weekends. It was an obvious 10x improvement, so much so that years later many continued to think of Bitcoin as a consumer payments network rather than a settlement layer.That Bitcoin is today thought of as an alternative to gold rather than the wire transfer is irrelevant. During its most formative years it was able to onboard users by providing a clear alternative to bank transfers.Ethereum turned out to be 10x\u00a0worseWho was Ethereum\u2019s first competitor? Many think it was Bitcoin, but it was hardly better equipped to offer a substantial improvement with respect to payments. Rather, than being engineered for payments, it was a general purpose platform and originally branded a \u201cworld computer\u201d.This world computer where anybody could write their own decentralized applications was often referred to as ushering in Web 3.0, where Ethereum would presumably be the backbone of a secure and decentralized internet. Since the contemporary web is referred to as Web 2.0, I think it\u2019s a fair thing to say it was Ethereum\u2019s first competitor. Both the internet and Ethereum share the common trait of being permissionless platforms that anyone can build on.Ethereum was unfortunately 10x worse than the web 2.0 it sought to\u00a0replaceThe contemporary web is built out using the client-server model and is extremely scalable thanks to horizontal scaling (analogous to sharding). This ability to scale is its superpower: there are billions of internet connected users, tens of billions of internet connected devices, and room for more. Latency is often so small it\u2019s often not neurologically perceivable. Bandwidth is good enough to stream video and costs are largely free, subsidized by advertising.Ethereum is not exactly a platform ready in any sense to offer improvements on the contemporary web. Its bandwidth isn\u2019t enough to upload small images (the most data that can be uploaded per block is about 13 KB). At 15 transactions per second only about 1 million daily active users can be supported. Latency is far longer than the 2 second limit that will frustrate users on the web. Every state change is approximately $0.06, which bodes poorly given how much interactivity is part of the normal web browsing experience.Ethereum is unfortunately not the 10x improvement anyone is looking for. If we\u2019re polite, it\u2019s a 10x worse experience. And if we\u2019re honest, it\u2019s several orders of magnitude worse still. Ethereum was picking a battle that couldn\u2019t be won here. Web 2.0\u2019s superpower was scalability and that was Ethereum\u2019s weakness.Economics of transactionsIt\u2019s an economic reality that the value of the transactions must at a minimum exceed the transaction fees paid. Without this, we can\u2019t realistically expect to onboard users. Nobody is interested in leaving money on the table. Single fee markets behave like you might expect, but multiple competing fee markets can crowd out applications with low economic value.Bitcoin\u2019s single-application platform was smooth\u00a0sailingTransactions on Bitcoin were intended for wealth transfer. Although there were secondary uses of Bitcoin such as gambling and storing data, the primary function had the highest economic value. This meant that using the platform as intended was not impeded by secondary uses.Ethereum\u2019s multi-application platform had unexpected interactionsTransactions on Ethereum were meant to power dapps. Wealth transfer was meant to be a secondary use that unfortunately could not be designed out of Ethereum. So what happens when a low-value application is on the same platform as a high-value application? Unless they both offer comparable economic value, the low-value application may be entirely priced out. Picture dapp A\u2019s bottom 1st percentile of transactions justifying a fee of above $0.06 and dapp B\u2019s top 99th percentile of transactions justifying a fee of below $0.06.Wealth transfer out-priced dapps on\u00a0EthereumIn Ethereum\u2019s case, despite its intended use case being for decentralized applications, the most popular use of Ethereum is still just transferring wealth without the assistance of dapps. Ironically, what was surely considered to be a secondary use of Ethereum is now setting a transaction fee baseline that\u2019s putting dapps out of business.Interacting with the web, unlike transferring wealth, is not a high-risk workflow. If you try to authenticate to a website or update your Facebook status and there is some interruption or error, you can try again. There is no real risk of catastrophic loss and consequently little need for security, legal systems, or insurance like with wealth transfer. This is largely the reason that software engineering doesn\u2019t require licenses to work in, in contrast with other fields like medicine or other engineering fields.Web 3.0 applications have been crowded out by wealth transfer. This has been the fate of most dapps, failing to deliver economic value on a per transaction basis greater than the current median fee of $0.06.The Ethereum 1.0 dapps that survived lacked\u00a0tractionWith that said, there have been a few categories of dapps which have provided enough economic value to survive. Most notably they are gambling, decentralized exchanges for on-chain tokens, prediction markets, ICOs, and collateral-backed loans. What they share is that people are willing to pay on par with baseline transaction fee for these workflows. (It is not a coincidence that they involve moving potentially large sums of money at once.) The problem, however, is that these are niche applications whose values are way out of line.0x, one of the most popular dex protocols, has collected only $2000 in lifetime transaction fees despite having a market cap of $160M. The token is also not necessary for the protocol to function and will likely be forked out by major relayers. Augur, the most popular prediction market, has only $40k staked in predictions yet has a $170M market cap. No dapp has more than 1000 daily active users on a regular basis and only a couple dozen have more than 100 daily active users. Something is not right with these numbers.ConclusionsSo why did Bitcoin do so well and Ethereum always seemed to struggle?Bitcoin was a 10x improvement over the wire / ACH transfer. Bitcoin only had one use case which also had high economic value, so the fee market adjusted to what users were willing to pay.Ethereum 1.0 was 10x worse compared to contemporary web architecture. It was an unherently unscalable system (monolithic blockchain) competing with an extremely scalable system (modern web). The situation is so bad that they need a complete rearchitecture. Wealth transfer on Ethereum (not intended to be the primary use-case) created a baseline transaction fee which drowned out all applications with low economic value (i.e. most dapps). The dapps that did survive were less numerous and successful than what was expected.", "responses": "30"}, {"title": "The new age of DApps is here, and it\u2019s not based on\u00a0Ethereum", "author_name": "Mohit Mamoria", "link": "https://hackernoon.com/the-new-age-of-dapps-is-here-and-its-not-based-on-ethereum-2246fc4d9eee?source=search_post", "post_date": "Oct 5, 2017", "readtime": "7 min read", "upvotes": "3.2K", "content": "The new age of DApps is here, and it\u2019s not based on\u00a0EthereumWhat are the other options besides Ethereum that the developers have?Mohit MamoriaBlockedUnblockFollowFollowingOct 5, 2017ICOs are said to be the new way to raise money. We\u2019ve seen companies raising $100 million, $156 million, $185 million and even $232 million by selling tokens that will be used in the protocol that these companies have promised to build using this money.Against the money raised, the tokens they gave were created and sold on the Ethereum blockchain\u200a\u2014\u200ameaning that all the trade that took place happened on the Ethereum blockchain and the tokens created are tracked on the Ethereum blockchain. But that is changing.", "responses": "19"}, {"title": "Ethereum 2.0 and the Future of Scalable Blockchain", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereum-2-0-and-the-future-of-scalable-blockchain-389cfcc7760c?source=search_post", "post_date": "Sep 7, 2018", "readtime": "8 min read", "upvotes": "3.2K", "content": "Ethereum must scale or be overtaken and overthrown.Ethereum 2.0 and the Future of Scalable BlockchainThere\u2019s new ways to think about the blockchain stack in\u00a02018Michael K. SpencerBlockedUnblockFollowFollowingSep 7, 2018EthereumEthereum\u2019s 2.0 road map attempts to deal with scalability issues, primarily via Proof-of-stake (Beacon Chain, Casper FFG), Sharding and eWASM. Ethereum has a fair chance of becoming a scalable global platform for collaboration. However, while they are a first-mover, they may not achieve scalability first.To arrive at a platform for new economic systems will require a level of scalability that might honestly take Ethereum years to achieve. During that time, any number of other projects could eclipse it importantly in the scalability aspect; this is why it\u2019s so important.Increasingly Ethereum has off-chain techniques such as Plasma, Plasma Cash and State Channels. However, when even Vitalik Buterin says present day blockchain \u201csucks\u201d, you know today\u2019s public blockchains could be disrupted. Ethereum does decentralization better; however Silicon Valley and China can beat them to scalability without the decentralization aspect\u200a\u2014\u200ato monetize the public blockchain model better.Ethereum has attracted developers to blockchain, built communities, facilitated blockchain startups to achieve viability and introduced many protocols into how we think of dApp development. The entire ecosystem of open-source software projects working on building different aspects of Ethereum is rather impressive.Smart Contract Languages (Solidity, Vyper)RPC Libraries (web3js, ethers, Nethereum)Development Tools (truffle, ganache, solc, solium)Ethereum has given us hope for things like open-source decentralized systems, though the scalability bottleneck appears rather serious for Ethereum\u2019s future sustainability. However, Ethereum is migrating its consensus protocol from proof-of-work to proof-of stake. It\u2019s trying to adapt. By 2020, its fate will be known. The next couple of years are critical.If Sharding is how Ethereum will realize the performance gains necessary to scale, it will take years!DfinityDfinity has raised $167 million according to Crunchbase, it\u2019s actually closer to $200 million. DFINITY is your classical copy cat, where it\u2019s taken many of the concepts of Ethereum and replicated them with a flashier brand. The preposterous analogies here are blindingly of the \u201cfake it till you make it\u201d variety. Cloud 3.0, The World Computer, Ethereum on Steroids, The NASA of blockchain\u200a\u2014\u200abut in spite of the marketing gimmicks, the terminology of their stack is rather appealing.Dfinity proposes a decentralized cloud model. It sees itself as being similar to Ethereum but with fewer performance restrictions that will ultimately have unlimited capacity.Dfinity includes an innovative governance system called the Blockchain Nervous System (BNS) that is by design able to implement retroactive state changes without the need/option to fork.Dfinity aims to finalize computations at least 50X faster than on Ethereum, so it often compares itself to Ethereum as its baseline. Dfinity likes to invent terms and audaciously wants to be that neighborhood virtual computer in cyberspace that will support software systems, business applications and enterprise IT systems.Dfinity, for all its buzzword prowess, is probably one of the contenders to scale public blockchains in the race to scalability. However, in some respects Dfinity sees itself like a blockchain Cloud whereby it could improve on the traditional tech stack and one day perhaps rival AWS, Azure, Google Cloud. But then who knows, when it\u2019s calling itself an Internet Computer, akin to a blockchain supercomputer?Cardano\u2019s founder Charles Hoskinson.CardanoCardano is very well respected and sees itself as a technological platform that will be capable of running financial applications currently used every day by individuals, organisations and governments all around the world. Its academic roots are very strong with peer-reviewed quality.Cardano offers scalability and security through layered architecture and might be considered more mature than Ethereum and NEO. With an emphasis on scientific philosophy and peer-reviewed academic research, it\u2019s less gamified than EOS and is rooted as a second-generation blockchain.With a founder who was one of the original founders of Ethereum, he sees blockchain as the leading and dominant model of technology by 2030. With startups like Bakkt, indeed, the once visionary intersection of cryptocurrency and Wall Street appears to be manifesting.Cardano has ties in Hong Kong and Japan and a strong academic basis. With a lack of provisions for scalability he believes Ethereum is flawed and this is why Cardano too must be considered in the race of public blockchains to achieve scalability first.Cardano focus on solving problems ofScalabilityInteroperabilitySustainabilityIt definitely feels on point without being too gimmicky or trying to raise too much capital. Cardano\u2019s emphasis on philosophy and science feels credible in the sense of building a \u201ccollection of design principles, engineering best practices, and avenues for exploration.\u201dCardano sees scalability as a three-headed hydra:Transactions per second/ ThroughputNetworkData ScalingThe consensus mechanism of Cardano is called Ouroboros. It is a provably secure proof-of-stake algorithm that was peer reviewed back in 2017. Proof of stake will make the entire mining process virtual and replace miners with validators. Cardano is well underway to implementing how next-gen decentralization networks might work: for instance, Cardano is looking at a new type of technology called RINA, Recursive Inter-Network Architecture created by John Day.RINA\u2019s goal is to create a heterogeneous network which promises to give:PrivacyTransparencyScalabilityFor Data scaling Cardano is a firm believer that not everyone needs to see everything. The techniques that Cardano is looking into are:PruningSubscriptionsCompression.Cardano\u2019s work on Interoperability and side chains is also not to be overlooked. Cardano\u2019s vision is to create an \u201cinternet of blockchains\u201d and that\u2019s one that\u2019s compatible with the reality of a world with one foot in blockchain and the other in legacy systems.These guys are so new they don\u2019t even have a working website\u00a0yet.Harmony ProtocolHarmony wants to build open consensus for 10 billion people. Again, here is a team with a plan to implement scalability and the engineering talents are experienced in companies such as Microsoft, Apple, Google and so forth.They have received seed money and come with new ideas on how scalability could occur. They seem aligned with how Waymo and automation will occur and are poised to align with it as the Harmony protocol was created to build an open market place on a Google scale for a decentralized economy.Scalability here means a merging with accelerating layers of the technology stack itself.1\u200a\u2014\u200aTransport network (Google\u2019s UDP, Bloom tables, 5G mobile)2\u200a\u2014\u200aConsensus protocol (Byzantine committees, acyclic graphs, monopolist fees)3\u200a\u2014\u200aSystem tooling (unikernels, multi-core in Rust, zero-copy streaming).What they lack in blockchain dev experience I think they make up for with a strong engineering-experienced team. They could grow up to be a serious rival of Dfinity which is in the same neighborhood. Their focus on scalability is a bit more grounded.For their Transport Network the way they will use Google\u2019s UDP (Google\u2019s User Datagram Protocol), notably known as QUIC (Quick UDP Internet Connections) seems on point. This is also because QUIC improves the combination of different cases and achieves the latency of Zero Round-trip. Thus, broadcasting without the round-trip latency makes synchronization stronger and resistant to change and instability.They\u2019re aiming for all the right stuff:High throughoutLow LatencyLow-fee Consensus platformGlobal scale marketplace for digital assets and servicesAccording to Nick White, their testnet of 10,000 nodes and 25 shards achieved 10,184 transactions per second.They have been growing their team this summer and looking for exceptional talent. Their thought leadership has been pretty low key up until now, however a good starting point is this intro post. I just get a sense that this team will turn out to be something important in the landscape as their approach is highly cerebral and in tune with the best technology currently available.A quick look at their team inspires confidence. Their spirit of inclusion and entrepreneurship feels a bit more sincere than Dfinity\u2019s. They may not \u201ccare\u201d about decentralization the way the Ethereum community does, but they can solve the problem of scalability from a 2018 standpoint in a much more concrete way, able to develop a solution from what we already know now.Nervos can bring public blockchain to China in a way few projects\u00a0can.NervosFinally we come to Nervos, one of my favorite newcomers to the public blockchain domain. Here we have a team that\u2019s incredibly experienced with some of China\u2019s top blockchain engineers.Their CKB and Cell model feels very original and highly adaptable to scalability factors.They have a ton of experience from when the chief architect built a permissioned blockchain called CITA, a fast and scalable blockchain for enterprise users. So their understanding of blockchain research, academia, enterprise and what\u2019s needed to connect the dots in a public blockchain is unparalleled.Being located with a team in China is also a huge advantage for funding purposes and collaboration with an existing blockchain community there. It\u2019s arguably a better place to be than Silicon or Crypto valley even as they increase their U.S. based community and marketing.Nervos Network is an underdog in this race, compared to some of the others on this list, but I predict they won\u2019t be for long. You don\u2019t have to look far to see the errors in Ethereum or NEO\u2019s model. Blockchain 3.0 platforms are designed to solve scalability right off the bat, and that\u2019s the point of the future of decentralized applications. For mass adoption to occur, scalability needs to be solved and transaction speed optimized.Ultimately the future of public blockchains that I think 2019 will reveal will have less to do with Ethereum 2.0 than it will an army of contenders to become the heir apparent of scalable decentralized blockchain. Satoshi Nakamoto would not want us to stop at Bitcoin or Ethereum, but keep evolving the paradigm. The world might need Cardano, Dfinity, Harmony and Nervos to push Ethereum to keep evolving and it if cannot, others will take its place.There are many smart talented people working on making Ethereum awesome, but Ethereum is not the end-all and the be-all of the future of public blockchains as I think we\u2019ll find out before 2020.", "responses": "19"}, {"title": "Ethereum\u2019s Demise as a Cryptocurrency is Foreseeable", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereums-demise-as-a-cryptocurrency-is-foreseeable-d9240dcc061e?source=search_post", "post_date": "Sep 4, 2018", "readtime": "5 min read", "upvotes": "3.3K", "content": "Ethereum\u2019s Demise as a Cryptocurrency is ForeseeableMichael K. SpencerBlockedUnblockFollowFollowingSep 4, 2018The fate of cryptocurrencies is dynamic, the roadblocks to ETH are considerable. Last year we loved to speculate about Bitcoin, this year we are talking about Ethereum a bit more, it\u2019s only natural. This is also since decentralized app platforms and their interactions with cryptocurrencies and altcoins are more intimately tied to the evolution of public blockchains than niche coins such as privacy, stable or crypto assets.Ethereum is like a promise to the future that decentralization will one day actually matter.There\u2019s been talk lately that ETH the asset will inevitably be worth nothing one day, that its collapse is inevitable. That\u2019s an amusing dialogue since it forces us to consider just how fast things are moving. ETH has problems to mass adoption:ScalabilityTransactions are too expensiveThe technology is getting oldNewer more scalable blockchains will eclipse itDevelopers will migrate to more \u201cshiny\u201d ecosystemsIt\u2019s feasible in 2018 to talk about how many of the things Ethereum set out to do, others will do better. Ethereum has a massive community and is decentralization-orientated in a way that feels much more genuine than many other projects; however that\u2019s not to say that its value as ETH is eternal.It doesn\u2019t run unstoppable applications. It\u2019s created a shared global infrastructure for ICOs, something we must admit has damaged the reputation of crypto to be synonymous with fraud and scams, in dire ways. Bitcoin purists have many valid points for being critical of Ethereum. It\u2019s scaled \u201cmistrust\u201d, probably more than it\u2019s scaled trust and used blockchain to create a new world.Blockchain is and crypto is in early garden\u00a0modeAs TechCrunch points out, there\u2019s no future for GAS in its current state. It\u2019s expensive AF. ETH fees are not a sustainable model as they work circa 2018. The Gas metaphor is legit but an ugly model as the same time:The Ethereum network is like a shared car. When a contract wants to be driven by the shared car, the car uses up fuel, which you have to pay the driver for. How much gas money you owe depends on how far you had to be driven and how much trash you left in the car.\u200a\u2014\u200aTechCrunchBut we need blockchain platforms and dApps with the equivalent of self-driving and electric cars. We need clean energy. Is Ethereum ever going to be that model? In 2018 as dominant a position as ETH has, relative to other cryptocurrencies, we can\u2019t say it\u2019s so, or will be so. The ERC-20 won\u2019t be relevant forever, that\u2019s a given.Crypto has a regulation problem, there\u2019s a lot of manipulation in the space. Smart contracts are just in their infancy. Ethereum is the first-mover, not the end-game of this stuff. It\u2019s inspiring, rather than a delightful product. That\u2019s okay, that\u2019s how technology works and how innovation happens.But is Etheruem the solution to cryptoeconomics and economic abstraction obstacles?Lack of software support for economic abstractionDifficulty in pricing many tokensExistence of contracts not tied to tokens (speculative)Need for ETH for Proof-of-StakeIn the evolution of our understanding of cryptoeconomics, we can probably do better than ETH. It\u2019s what we compare public blockchains and some ecosystems to, (like how DFINITY chose to copy their branding lingo), but is it the end-game of public blockchains? Certainly not.ETH is in some respects, I think, a compromise between Vitalik Buterin and Vlad Zamfir, which is not necessarily a bad thing but doesn\u2019t solve all problems of economic abstraction. This and the scaling issue mean basically that ETH is vulnerable to disruption.Whatever issues in software support, market pricing, non-token contracts and PoS ETH might have, it\u2019s certainly still the dominant model in public blockchain cryptoeconomics today. We should be critical of the standard bearer, that\u2019s only fair. But then decentralization advocates have a way of turning crypto influencers into prophets. Google may have tried to hire him as an intern recently, but we have to remember he\u2019s just some mid-20s person who is dedicated to the development of the blockchain.Do we Need More Crypto Prophets?We have Satoshi Nakamoto, do we really need to evangelize the personal brands of more crypto influencers? Does Vitalik Buterin really want that kind of scrutiny and influence? Do we want him to think, like Musk or Trump, that Twitter is somewhat important to his legacy?Vitalik Buterin (Ethereum Foundation) at TechCrunch Disrupt SF\u00a02017The papers he works on with E. Glen Weyl, may turn out to be his most important contributions to humanity: Liberal Radicalism: Formal Rules for a Society Neutral Among Communities.ETH felt very new in 2017, but we have a tendency to get wrapped up too much in the cult of crypto. Bitcoin is a perfect example of this. The utility of these things as the founding crypto Bitcoin and the founding ecosystem Ethereum, is that they are inspirational and will not live forever.The current crypto marketplace has attracted a lot of free-riders, scammers, profiteers, pump-and-dump investors, shitcoins and regulatory hoodwinkers, and Ethereum is at least somewhat responsible for this. If Technology as a whole has trust issues, it\u2019s nothing in 2018 compared to the trust issues crypto has. In an era defined by misinformation, cyber hacking and fraud online, being skeptical is the least we can do.Free-riders are people or businesses that profit from the under-provision of public goods. While Vitalik Buterin explores this in his recent paper with Microsoft researcher Glen Weyl and Ph.D. of economics at Harvard Zo\u00eb Hitzig, the irony is ETH is being exploited by such types. So much for decentralization guys. ETH\u2019s ethereal value is a cryptoeconomics and decentralized use-case and obstacle in and of itself.TechCrunch argues that in a stateless ecosystem, replacing ETH is a Pareto Improvement (i.e., all parties are better off). That\u2019s an interesting interpretation to me. ETH is a success in terms of developer opt-in and public blockchain enthusiasm, but for technical reasons it does appear to be flawed. Ethereum\u2019s contribution to to the evolution of cryptoeconomics may or may not be important, it\u2019s too soon to tell.When the cryptocurrency entrepreneur Jeremy Rubin wrote the TechCrunch article where he outlines and stipulates that the price of ETH is bound to plummet it was nice to see that Vitalik Buterin agreed in a response on Reddit, \u201cIn Ethereum as it presently exists, this is absolutely true.\u201d Timeless Ethereum, immortal Bitcoin, what are we going to do with you?", "responses": "32"}, {"title": "Huge Ethereum\u00a0Mixer", "author_name": "Satoshi", "link": "https://blog.cyber.fund/huge-ethereum-mixer-6cf98680ee6c?source=search_post", "post_date": "Sep 21, 2017", "readtime": "6 min read", "upvotes": "2.1K", "content": "Huge Ethereum\u00a0MixerSatoshiBlockedUnblockFollowFollowingSep 21, 201768% of total Ethereum transaction value controlled by one systemUPDATE: We have released the Jupiter notebook on Github so that anyone can repeat the analysis done.Analyzing the Ethereum transactions, cyber\u2022Fund has come across a finding that struck us so much that we rushed to dig deeper into this issue. We now wish to share our findings with a community hoping to come up with an explanation together.What we\u00a0foundThe clusterization of all Ethereum addresses from the inception of Ethereum until 15.09.2017 revealed a class of addresses that we will call in this paper temporary. These are addresses where funds come and leave within a short time interval\u200a\u2014\u200ano longer than 1 hour, after which the addresses are never used again. The temporary addresses constituted 46% of all active addresses and processed 65% of total transaction value during the analysed period. Analyzing transactions where these addresses were involved, we managed to collect piece by piece a full picture of what was going on:In the centre of the picture above, one can see a core of the Mixer which consists of more than 95% of temporary addresses. This core interacts with a group of shell addresses, or a shell layer, which includes both permanent and temporary addresses. The shell layer in its turn receives ETH from what we will call input addresses and sends ETH to output addresses displayed left- and right-hand on the scheme respectively. We looked up the names of the owners of these addresses in Etherscan. Only a few of these addresses had a name of the owner attached to them on Etherscan. The other names displayed on the picture above are the names mentioned in users\u2019 commentaries on Etherscan, so we can only assume that they are the real owners of these addresses. In the end, it turned out that the total amount transferred into and out of the core is 4 times higher than the total that entered and left the shell and the core taken together. This made us think of a mixer mechanism (further referred to as Mixer).Of all transactions executed on the Ethereum blockchain during the analysed period, addresses with the incoming amounts of ~500, ~1000, ~2000, ~3000, ~5000 and ~10,000 ETH constitute 68.5% (2,601,041,693.6 from 3,791,195,132.0 ETH) in money terms and 10.7% (6,216,314 from 58,035,623) in terms of numbers. The further analysis shows that these addresses are linked with each other and might be controlled by a single entity.This is how the share of the Mixer in all Ethereum transactions has changed over time:The system seems to be first tested in 2016, and since the start of 2017 it came into active use. This might be explained by the increasing capitalization and liquidity of Ethereum. Most interesting is that an overall growth pattern of Ethereum transactions looks very differently when the Mixer share is excluded. If the Mixer transactions are left out of the analysis, it becomes evident that they contributed to most of the overall Ethereum transaction volume growth.Analysis that was\u00a0doneIn terms of the incoming transaction volume, these addresses are distributed as follows:Distribution of Addresses by Transaction VolumeOut of the total of 6,282,858 addresses involved in all transactions executed on the Ethereum blockchain since its inception till 15 September 2017 the following sets of addresses gained our attention:These addresses account for 67.5% of all transferred ETH and constitute 8.5% of the total number of transactions on Ethereum during the analysed period. So why do we think these addresses are linked?The graph below displays how these sets of addresses replace each other almost one by one. Take one set of addresses, e.g. addresses with incoming amounts of around 1000 ETH. After being active for some time, this set of addresses becomes inactive and this is when another set steps in, e.g. that with 3000 incoming ETH per transaction. Thus, addresses \u201cact\u201d as if orchestrated following one another over time which makes us think there is a certain system managing these activities. These addresses constitute the core of the scheme.FindingsAnalyzing the system further, we identified temporary and permanent addresses that surround the core and are linked with it. The calculations for the core and the linked addresses for the period starting from the inception of Ethereum until 15.09.2017 bring about the following results:HypothesesThese are possible explanations for the detected activities we could come up with:The protection offered to clients by crypto-exchanges: all clients\u2019 funds are mixed so that the funds\u2019 sources cannot be tracked and those holding clean money cannot be unjustifiably accused of any illegal activityA mechanism set in place to protect U.S. residents who wish to avoid control from U.S. regulatory bodiesA mechanism used by a large private exchange to preserve the privacy of its clients; this exchange might be operating with fiat moneyA mechanism used to securely transfer crypto-assets between crypto-exchangesAny kind of Ether-laundering schemeThese are only hypotheses which we would like to discuss with anyone interested in our findings. If you have any other suggestions or explanations, please do not hesitate to share them with us. You can find more details in the Appendix.You can always contact us at: datascience@cyber.fund, analytics@cyber.fundAppendixNote: If you wish to look up the addresses below on Etherscan by yourself, use the list in this Google Sheets doc.Top 20 input addresses (ETH transferred into the\u00a0Mixer)Top 20 output addresses (ETH transferred out of the\u00a0MixYou can read this article on Steemit.", "responses": "18"}, {"title": "CryptoFlix Joins the Enterprise Ethereum\u00a0Alliance", "author_name": "CryptoFlix", "link": "https://medium.com/@cryptoflix/cryptoflix-joins-the-enterprise-ethereum-alliance-2977a515ad41?source=search_post", "post_date": "May 3, 2018", "readtime": "", "upvotes": "2.3K", "content": "CryptoFlix Joins the Enterprise Ethereum\u00a0AllianceCryptoFlixBlockedUnblockFollowFollowingMay 3, 2018The CryptoFlix Team is proud to announce that we are now members of the Enterprise Ethereum Alliance (EEA), the world\u2019s largest open-source blockchain initiative.The Enterprise Ethereum Alliance is a non-profit corporation that helps in bringing together individuals and organizations around the globe interested in or developing Ethereum-base technology specifically for, or useful in, enterprise use cases.The EEA connects major financial firms such as ING, UBS, Sberbank, Banco Santander, JP Morgan among others as well as innovative startups and technology giants such as Microsoft, with Ethereum subject matter experts. Its mission is to enhance the privacy, security, and scalability of Ethereum-based blockchain technologies.As members of the EEA we will benefit from the collaboration and networking resources that will improve our chances of a successful ICO.The ICO begins on May 15th, please sign up for early bonus alert at www.cryptoflix.io", "responses": "2"}, {"title": "The Fall of\u00a0Ethereum", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/the-fall-of-ethereum-15c4b64467d8?source=search_post", "post_date": "Dec 14, 2018", "readtime": "9 min read", "upvotes": "3.4K", "content": "Bear market or seats empty towards a crypto extinction event?The Fall of\u00a0EthereumIf Ethereum doesn\u2019t prove scalability public blockchains may not have a future at\u00a0allMichael K. SpencerBlockedUnblockFollowFollowingDec 14, 2018It\u2019s possible the hope of decentralization and dApps rests on Ethereum. It\u2019s doubtful others could repeat what Ethereum has done. That being said, the price of ETH is down today to $84.66.Figure this, January of 2018 saw it at $1,358. So it has lost more than 10x its value. Sure, they will say it has more daily active developers than ever. Of course, ConsenSys will tell you the good side of the story. I mean of course, its livelihood depends on it. But do crypto users or ETH transactions matter in the big scheme of things?When the going gets dirty, will Ethereum ever scale to mass adoption?Is ETH\u00a0Dead?We need to be asking if there\u2019s a future in this iteration of public blockchains. Caught up in ICOs, fraud, security issues and certainly running amock with \u201cdecentralization\u201d pretenders, I would not trust ecosystems like EOS, Tron or XRP with a ten foot pole. You want to trust Ethereum, but their tech seems like legacy tech now. That\u2019s just how quickly things change.At the risk of sounding like a pathetic Forbes article and LinkedIn curated story on Bitcoin, the kids are not okay. They have been perpetuating fraud and get-rich-quick schemes and it\u2019s given all of crypto a bad name.Ethereum is the last hope for public blockchains, I really think so. I also think with the crypto winter it\u2019s running out of time to show it can scale. Ethereum was the biggest hope for an independent blockchain ecosystem, but its blockchain system has daunting technical problems to fix. Unfortunately, its disciples too need to figure out how to govern themselves. Decentralized governance has not provided a valid system to replace corporate governance structures and this has reached bottleneck proportions.Crypto could kill itself and the world may not\u00a0careWhat happens when you have a bunch of 20-year-olds trying to reinvent technology with products that don\u2019t yet exist? With ecosystems that are faked and crowdfunding projects that have a near certainty of failure?The cryptocurrency world is crashing down and it isn\u2019t just like stock volatility, it has to do with the extinction of crypto and altcoins and things that were much in vogue just 12 short months ago. The death of Ethereum is a real question, the validity of Bitcoin as a digital asset is very much a debate when it\u2019s been reduced to below 3k.Ethereum was the original one after decentralization, a paradigm beyond centralization and beyond seeming magic internet money. However with governance models, consensus systems that allow the tech to be upgraded continuously, with the size of the community not really mattering all that much. Like the Bitcoin Cash hard fork, crypto has a weird and viscous cycle of self-destruction.Unlike blockchain, crypto was always an experiment of the young. The ultimate signal for profiteers that here was something to ride through global recessions. Then something weird happened, there hasn\u2019t been a global recession for nearly 12 years.Ethereum is already the most famous cryptocurrency after Bitcoin and the third largest in total value. But does it matter\u00a0anymore?The central topic at Devcon is \u201cEthereum 2.0,\u201d a radical upgrade that would finally allow the network to realize its true power. But is it too late? Does it matter that the copy cats grow? Is Ethereum dying and pegged with Bitcoin like martyrdom for technological oblivion as we enter a tech dystopia dominated by the monster that is the Centralization of Silicon Valley and then Chinese companies?You can have all the idealism in the world, but what if your product simply doesn\u2019t scale, won\u2019t be allowed to scale by the system? Surely Ethereum has a handful of idealistic researchers, developers, and administrators in charge of maintaining its software\u200a\u2014\u200awho know that the time is nearly up to prove that public blockchains matter at all (under a long list of technical challenges and possibly irremovable limitations). Maybe we were too soon, maybe we were dumb to hype up a nascent technology where sentiment ran away from reality. I\u2019m ready to admit that. The idealism of youth can amount to being a scam, it\u2019s happened to us all once.As per etherscan, as many as 353 million transactions have been processed by the network to date. That\u2019s not a mind bending amount, all things considered. Since June 1, the average number of daily transactions has been roughly 610,000 [source]. That\u2019s not exactly impressive, to be honest.In the winners and the losers of crypto, we always thought Ethereum would be the one to reincarnate some leadership into crypto after Bitcoin\u2019s shine dimmed. However crypto is tied at the hip to Bitcoin\u2019s price, a huge failure of cryptoeconomics to differentiate itself from other markets. Market forces still rule\u200a\u2014\u200aand it shows the depravity of the current \u2018system\u2019. Innovation is stunted by the centralization of the system itself.Crackdowns by regulators and a growing understanding of how far most blockchain applications are from being ready for prime time have not just scared many cryptocurrency investors away, it\u2019s screwed the freedom that crypto could have brought us and instead replaced it with fraud, failures and a technology that doesn\u2019t scale very well either technically or for actual consumers. There\u2019s a bottom of sentiment on blockchain\u2019s readiness to disrupt, period.Ethereum as a ragtag community needs to crack a problem on human governance but how can we expect a bunch of bohemian engineers to do it? Failures of leadership are rife in nearly every industry and system of human society in 2018. We see it in corrupt politicians, greedy tech executives, unethical engineers and, of course, crypto profiteers who especially abused the ICO system. EOS is a perfect example of this. Ethereum might be more attractive to developers, but it may not have as bright a future as blockchain-as-a-service in the Cloud does, led by the likes of Alibaba and Amazon. The market necessitates centralized blockchains before we are ever near decentralization taking place. Crypto might have to die for its equivalent when it is ready to be born.It might be painful to accept, but Ethereum might have to die for public blockchains to evolve. Ethereum won\u2019t be able to organize a scattered global network of contributors and stakeholders without sacrificing \u201cdecentralization\u201d. It\u2019s just not realistic. It would be better if Amazon acquired it and funded it. You can\u2019t reinvent the wheel of how businesses and organizations can or should work. You need to strike a balance with reality.Bitcoin has been so spoiled by infighting and gridlock and a few wallets owning too much of it, it has been forever spoiled. Ethereum\u2019s demise could occur in any number of ways. First and foremost by failing to scale, or even failing to scale fast enough before something better comes along. These kids did not think long-term enough, they couldn\u2019t foresee the challenges of the future well enough. Decentralization was a spontaneous whim, but the world and the tech wasn\u2019t/isn\u2019t ready.You can peddle crypto kitties, but the world disrupts itself. Ethereum is no longer seen as a leader of the model of public blockchains. There is no world computer, or if there is it has more to do with the Cloud and the future of artificial intelligence\u200a\u2014\u200athe major macro trends of the 2020s. Blockchain is, at best, a minor trend in technology compared to those two. Let\u2019s not forget, crypto exists in an age of exponential technologies. If it doesn\u2019t work, it\u2019s not going to ruin the world, just seriously stunt the value proposition of decentralization and the idea that blockchains should be distributed in a decentralized manner. In 2018, the internet is a weapon. IP is stolen each month, worth more than the total crypto market cap combined.We live in uncertain times, and public blockchains like ETH are the most uncertain of long-term bets. The sad reality is that capitalism doesn't want to change, never mind democracy\u2019s crisis of leadership. The inertia of the world underestimates crypto and crypto overestimates itself.For Ethereum\u2019s most ardent dreamers and believers, crypto is like a religion. In its dogma is contained the promise of an entirely new kind of democratic society in which it is much harder to concentrate wealth and power, hide corruption, and exert shady, behind-the-scenes influence. Yet in the process crypto has become all the things it said it could erase from the corrupt and materialistic corporate world. Crypto because a fraud with our money. And for that it deserves some punishment. Some form of banishment, these rock-bottom prices, they are justified.A year ago\u200a\u2014\u200apractically centuries in crypto time\u200a\u2014\u200ainvestors were pouring billions of dollars into promising projects building dApps. Ethereum felt like the angel of blockchain innovation, but how quickly things do change. America shunned them, the banks called them a ponzi scheme, and the rest is history. The SEC is now targeting the shadiest ICOs and projects, and a raw pessimism has gripped the community, many of whom were nothing more than profiteers to begin with.Crypto, my dear, where to\u00a0now?Ethereum may have gotten too popular too fast and while tethered to ICOs they lost their way as a solution that seemed to be Bitcoin's heir apparent. Even the fad of Crypto kitties pointed to something inevitable\u200a\u2014\u200athey slowed Ethereum to a halt and it exposed the truth: Ethereum\u2019s technology is immature, incapable of handling the kinds of workloads that big dApps would demand. The dire realization that Ethereum (2.0) Serenity might take (years) too long was daunting.By the time Ethereum 2.0 might be ready, all of crypto might be\u00a0dead.Vitalik Buterin\u2019s white paper of 2013 might be forgotten. Bitcoin\u2019s Satoshi Nakamoto must be shaking its head. How did we come so far to suffer such a fate? Ethereum might die, along with all other cryptos. It could happen, we have to accept that possibility. What would come after it?The youthful immaturity of its founders, is probably part of the problem. Buterin, Ethereum\u2019s enigmatic young creator, uses an only slightly less pejorative comparison, calling it \u201ca smartphone from 1999 that can play Snake.\u201d Wtf\u00a0, I have no idea what he was talking about. Talk of \u201cworld computers\u201d and decentralization bores me, after realizing what projects such as EOS and Dfinity truly stand for.Were we misled by profiteers? Engineers of a fake new internet that was destined to fail? Scores of investors and entrepreneurs had overestimated what Ethereum\u2019s blockchain can do\u200a\u2014\u200awill become\u200a\u2014\u200aor that crypto was disruptive at all. 2019 might be the last year of the altcoin. Fiasco after crypto fraud, we\u2019ve lost a bit of the soul of what crypto was in the first place. The last temple and template might be Ethereum, but Ethereum isn\u2019t exactly a paradise. We might be witnessing the Fall of Ethereum, and I say this with no specific bias one way or the other (I don\u2019t own any ETH).There\u2019s something cynical and ridiculous in what blockchain and crypto has become in 2019. Just as Bitcoin HODLers felt somewhat fanatic in 2018. Where is the product, guys? Show me the shards, bro.In ConclusionDecentralized computing platforms are nice in theory, they might even have built incredible communities, but without the technology to scale and sustain them, what is the point? We re-invented what decentralization was, only to find the corrupt world hated the idea so much they helped us kill it, like a threat to their hierarchies, banks, false authorities and corrupt world order. If Bitcoin and Ethereum dies, I\u2019m not sure anything else will take its place, for maybe decades.There may realistically be no such thing as freedom from online censorship, surveillance, and other forms of centralized power. This is because we are entering a period of history characterized by centralized technology corporations, not exiting it. 2018 is not 2063, bro, the world has no intention of becoming more decentralized or letting a bunch of 20-something-year-olds hold the keys to the portal into the future.Ethereum is beautiful, and it is beautiful flawed. Bitcoin is not decentralized since its wallets belong to a few. The public blockchain is not growing like the Cloud is, nor will it impact the world like machine learning or any other number of important technologies.3,000 developers and entrepreneurs, largely men in their 20s and 30s, cannot save the world. Ethereum doesn\u2019t scale, and it won\u2019t be able to scale in 2019 any better than in 2018. That\u2019s a fact, let\u2019s kill the fiction and hype from crypto. Ethereum might not be the one.", "responses": "78"}, {"title": "Analyzing Ethereum, Bitcoin, and 1200+ other Cryptocurrencies using PostgreSQL", "author_name": "Sarah Pan", "link": "https://medium.com/@sarahpan/analyzing-ethereum-bitcoin-and-1200-cryptocurrencies-using-postgresql-3958b3662e51?source=search_post", "post_date": "Jun 28, 2017", "readtime": "9 min read", "upvotes": "1.3K", "content": "Analyzing Ethereum, Bitcoin, and 1200+ other Cryptocurrencies using PostgreSQLCryptocurrencies are fueling a modern day gold rush. Can data help us better understand this evolving\u00a0market?Sarah PanBlockedUnblockFollowFollowingJun 28, 2017Update: Thank you everyone for making this #1 on Hacker News!Read the HN discussion here.Lately it seems like money has been growing on trees.With trade volumes reaching billions of dollars a day and market caps hitting tens of billions of dollars, it\u2019s no wonder that cryptocurrencies fuel the gold rush of the modern day.We live in the age of digital currencies, with cryptocurrencies birthed within the decade. Yet already, there are more than a thousand cryptocurrencies in the market and an initial coin offering (ICO) almost daily.As we embrace this new, proliferous market, it\u2019s important that we try to understand what\u2019s going on. There are many risks to observe at both the micro-level (e.g., personal investments) and macro-level (e.g., prevention of market crashes and major loss of capital). That\u2019s where we come in.We\u2019re data people. Specifically, we\u2019re the developers of TimescaleDB, a new open source time-series database built up from PostgreSQL. And we thought it would be insightful (and fun) to analyze the cryptocurrency market using PostgreSQL and TimescaleDB (plus R for data visualization).For this analysis*, we looked at historical OHLCV price data on over 1200 cryptocurrencies (as of 6/26/2017; courtesy of CryptoCompare). While our current dataset represents only a daily record of rates, TimescaleDB scales easily to much finer-grained historical data. With the constant influx of new coins and exchanges, TimescaleDB can provide a reliable foundation for time-series data in the cryptocurrency market.Here\u2019s what you should take away from this post:Several high-level insights into the cryptocurrency marketA better understanding of how TimescaleDB + PostgreSQL make time-series data analysis easierInstructions on how to load this dataset yourself and draw your own insights (and perhaps find your own arbitrage opportunities!)*Please note that nothing in this analysis should be construed as financial advice. If you\u2019d like to draw your own conclusions, here are instructions to install TimescaleDB and download this cryptocurrency dataset.So if you had invested $100 in Bitcoin 7 years ago, it would be\u00a0worth\u2026Let\u2019s start with some good old-fashioned FOMO. If you know anything about cryptocurrencies, you\u2019ve probably heard of Bitcoin, the \u201cgranddaddy\u201d of all cryptocurrencies. Turns out that if you had invested $100 in Bitcoin in July 2010, it would be worth over $5,000,000 today.Bitcoin has had a pretty nice run since then (although taking a small dip recently):BTC closing price in USD over the last seven\u00a0yearsUsing PostgreSQL, we\u2019ve queried BTC\u2019s prices at 2-week intervals, analyzing the rates for USD exchanges. (Note that \u201ctime_bucket\u201d and \u201clast\u201d in this query are special TimescaleDB time-series data analysis functions not in PostgreSQL.)But hopefully you didn\u2019t buy in February\u00a02014\u2026It hasn\u2019t exactly been a smooth ride for BTC. Let\u2019s hone in on the day-by-day volatility of BTC. Here we calculate daily returns using the power of PostgreSQL window functions:BTC daily return (as a factor of the previous day\u2019s rate) over the last seven\u00a0yearsAs a relatively new market, bitcoin prices are notably subject to volatile fluctuations. While a steady increase in price marks the success of BTC, the highest spike occurred in early 2014. If we zoom in on 2014, we notice that the jump occurred specifically between February and March of 2014. For those who invested at the peak of this market, the price soon stabilized, forcing investors who bought then to hold for a long time to see returns.BTC daily return (as a factor of the previous day\u2019s rate) over\u00a02014Goodbye China, hello\u00a0JapanThe cryptocurrency market is global. When looking at trade volumes by currency, we noticed something interesting:Volume of BTC in different fiat currencies over the last seven years (in 14 day intervals, stacked)The year 2014 saw a minor jump for Bitcoin rates in China, presumably caused by the devaluation of the yuan and weakening domestic stock market. This was followed by a subsequent boom in 2016 and early 2017, as Chinese volume dominated Bitcoin trades.Volume of BTC in CNY over the last year (in 14 day intervals)Within a few months, the volumes dropped dramatically.Why? This is where we had to step out of the numbers and do some old-fashioned research. (And what we found shows how you can\u2019t just rely on quantitative data when trying to understand this market.)In early 2017 the People\u2019s Bank of China began reinforcing regulations and legal liabilities for risky cryptocurrency exchanges. By February, two of the largest Chinese exchanges (OKCoin and Huobi.com) had suspended withdrawals and by mid-2017, Chinese transactions had dried up. From there, Japan became the leader in bitcoin transactions by volume, even going so far as to recognizing bitcoin as legal currency in April 2017.Volume of BTC in all currencies after BTC/CNY dropped in 2017. BTC/JPY is now volume leader. (In 14 day intervals, stacked).Now, if you had invested $100 in ETH in January\u00a02017\u2026.Don\u2019t worry if you didn\u2019t hop onto the Bitcoin train in 2010. As volatile as Bitcoin has been, some would argue that Ethereum has been a crazier ride (and the recent \u201ccorrection\u201d shows it). Let\u2019s look at the Ethereum price over time in Bitcoin (as it\u2019s normally quoted):Last closing price of ETH in BTC over the last three\u00a0yearsBut as we know, Bitcoin itself has been fairly volatile, which renders the above chart less useful. So let\u2019s look at ETH prices in fiat currencies, using each day\u2019s BTC to fiat exchange rates. (Taking advantage of Postgres JOINs and some fancy filters):Last closing price of ETH in three different fiat currencies over the last three\u00a0yearsIn its first year, ETH surpassed any yearly BTC growth rate in all of BTC history\u200a\u2014\u200aa hefty 530% surge in average closing price from the previous year marked a good start. Cumulatively, the growth has since fallen to 200% going from 2016 to 2017, though still an impressively high rate for any other asset. And within the last half year, ETH prices have increased by 3000%. So, if you had invested $100 in ETH in January 2017 (less than 7 months ago), it would be worth over $3,000 today.Projecting the price of ETH in these stable currencies (USD, EUR, CNY), it appears that the trend lines remain consistent between the three fiat monies. A clear progression is apparent in the steep uprise within the last six months and trends reflect a massive growth for the coin when quoted in all currencies, except BTC. Relative to the fiat charts, the ETH/BTC chart is quite unstable due to the fluctuating price of BTC over the years. As a result, the representation of ETH by BTC price inflates the variability of ETH. Clearly BTC is still too immature to be considered a base currency.What about the 1200 other cryptocurrencies??With that brief examination of BTC and ETH trends, hopefully you have more context into the hectic world of cryptocurrencies. So what do we do with the other 1200 cryptocurrencies?Well first, let\u2019s use our dataset to trace the lineage of these cryptocurrencies:(Disclaimer: our dataset represents when we first have recorded data, which may not necessarily correspond to the ICO.)Date of first record for each cryptocurrency (listed by descending date)It\u2019s an evolving market. And one with no clear ceiling, as we can see when we query the number of new cryptocurrencies by day. Above are just the most recent 20 records, showing how many new currencies amass each week.Here\u2019s a look at that same day, but counting the number of new currencies with data each day:Number of new cryptocurrencies in the dataset, by day, over the last four\u00a0yearsNumber of new cryptocurrencies in the dataset, by day, in\u00a02017Number of new cryptocurrencies in the dataset, by day (listed by descending date)When we query each of the currencies by their first set of data (to track its \u201cage\u201d), it\u2019s clear that the market is not simply for investors, but also for creators of these digital assets. Most recently, a flood of new coins entered our dataset during May 25\u201328, amounting to over 300 new cryptocurrency records in less than a week. (Of course, these dates reflect when our data source first had price data for the currencies, which may not correspond to the ICO.)Who\u2019s at the head of the cryptocurrency long\u00a0tail?There are so many cryptocurrencies that it becomes hard to separate the good ones from the noise. How do we identify which ones worth focusing on? Here\u2019s one metric: total trade volume over the past week.Total transaction volume in USD for top 10 currencies over the past week (ranked by volume)Total transaction volume in USD for top 10 currencies over the past week (ranked by\u00a0volume)Quick note on what this query is doing: The BTC and crypto-currency data lives in separate tables. So we have to UNION the two queries. Also, as we established earlier, we want to quote volumes in a fiat currency (e.g., USD) and not BTC. So the second half of the query joins with the BTC table to convert BTC to USD.Top cryptocurrencies (measuring by transaction volume) are (not surprisingly) Bitcoin and Ethereum. But after that, seems like Litecoin (LTC), Ripple (XRP), and Ethereum Classic (ETC) are not far off. As a five-year old coin, Litecoin is almost identical to Bitcoin and is often considered a key player in the market. Meanwhile, Ripple targets a more specific audience as a banking coin in the global commerce arena, also showing promise as a progressively dominant coin. Interestingly in the top 5 for our query, both ETH and ETC make appearances, suggesting a major shift towards Ethereum in the market.What are the most profitable cryptocurrencies?Another way to sift through the long tail of cryptocurrencies is by profitability (e.g., as measured by total daily return). Our data contains a set of prices for over 1200 cryptocurrencies. If we hone in on the highest increase in rate by day, we can see which cryptocurrencies lead the daily market.Highest daily return and corresponding cryptocurrency (listed by descending date)Here we identify the cryptocurrency with the highest total daily return, by day, going backwards in time. (To do that, we again use a window function to calculate daily returns, and then use the TimescaleDB last function to find the cryptocurrency with the highest return for that day.)Our output for the last three months shows a numeric lead by AMIS (168x on 6/15), which appears as the cryptocurrency with the top increase for 15 distinct days. However, if we look more closely at AMIS\u2019 rates, we realize that this high increase is also due to high fluctuation rates: AMIS tends to drop back to a closing price of zero after each increase.Closing price of AMIS over the last\u00a0yearLikewise, the cryptocurrency YOVI appears 3 times in our list of daily leads but has a similarly unreliable trend like AMIS:Closing price of YOVI over the last\u00a0yearWhile both trends are rather unstable, they show more promise than ETH\u2019s down-sloping first year (2015):Closing price of ETH in\u00a02015(Repeat Disclaimer: TimescaleDB does not endorse any of these cryptocurrencies and is not liable for investments that you make / losses you may incur.)So money grows on\u2026 Merkle\u00a0Trees?Here we drew some conclusions from public cryptocurrency datasets, highlighting the power of both PostgreSQL and TimescaleDB. Yet we should remember that the cryptocurrency market will inevitably be different next month, week, even day.But if you\u2019d like to explore this dataset and draw your own conclusions, here are the instructions for downloading it (and installing TimescaleDB).If you\u2019d like to learn more about TimescaleDB, and how it makes PostgreSQL scalable for time-series data, we\u2019d recommend this technical post.", "responses": "48"}, {"title": "Full Stack Hello World Voting Ethereum Dapp Tutorial\u200a\u2014\u200aPart\u00a02", "author_name": "Mahesh Murthy", "link": "https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-2-30b3d335aa1f?source=search_post", "post_date": "Jan 30, 2017", "readtime": "7 min read", "upvotes": "3K", "content": "Full Stack Hello World Voting Ethereum Dapp Tutorial\u200a\u2014\u200aPart\u00a02Mahesh MurthyBlockedUnblockFollowFollowingJan 30, 2017[Tutorial was last updated in November 2018]This is part 2 of 3 part series of tutorials. You can access Part 1 and Part 3 here.In part 1 of this tutorial, we built a simple voting application in our development environment using ganache. Now, let\u2019s get this application on the real blockchain. Ethereum has a few public test blockchains and one main blockchain.Testnet: There are a few test blockchains such as Ropsten, Rinkeby, Kovan. Think of these as a QA or a staging server, they are used for testing purposes only. All the Ether you use on these networks is fake.Mainnet (also called Homestead): This is the blockchain which the entire world transacts on for real. There is real value to the Ether you use on this network.In this tutorial, we will accomplish the following:Install geth\u200a\u2014\u200athe client software used to download the blockchain and run the Ethereum node on your local machine.Install the Ethereum dapp framework called Truffle which will be used for compiling and deploying our contract.Make small updates to our Voting application to make it work using truffle.Compile and deploy the contract to the Rinkeby testnet.Interact with the contract through truffle console and then through a webpage.1. Install geth and sync the blockchain", "responses": "169"}, {"title": "90+ Ethereum Apps You Can Use Right\u00a0Now", "author_name": "ConsenSys", "link": "https://media.consensys.net/40-ethereum-apps-you-can-use-right-now-d643333769f7?source=search_post", "post_date": "Aug 15, 2018", "readtime": "9 min read", "upvotes": "3.6K", "content": "90+ Ethereum Apps You Can Use Right\u00a0NowNeed work? Buying art? Licensing music? Getting a loan? There\u2019s a dApp for\u00a0that.ConsenSysBlockedUnblockFollowFollowingAug 15, 2018This article was updated on April 24, 2019.Around the world, hundreds of thousands of technologists and developers are working to build applications and platforms that will bring the potential of Ethereum\u2019s decentralized world computer to fruition. Although the blockchain ecosystem will take time to fully develop and enmesh with economies-at-large, we\u2019re already seeing many organizations deliver applications that interact with the Ethereum blockchain to create new modes of creating and exchanging value.This wave of decentralized applications\u200a\u2014\u200aor dApps\u200a\u2014\u200ais evolving models in market segments as far-reaching as finance, music, gaming, marketplaces of all iterations, and social media with remarkable results, and is pushing the blockchain industry forward towards an era that\u2019s less about speculation and more about results, adoption, and making a substantive improvement in the lives of users.Below is a list of Ethereum dApps you can use right now. Most are available for download for free either through the Apple or Google Play stores, or directly through their websites as demos, betas, or fully-fledged releases.EssentialsBrowsers, wallets, and must-have utilities to engage with Ethereum.MetamaskWeb browser plug-in that connects your device to the Ethereum network.StatusEthereum mobile browser with a token wallet, chat, and dApp portal.uPortSecure user identity and data management for the Ethereum blockchain.BraveA web and mobile browser integrated with BAT and ERC-20 tokens.Coinbase WalletEthereum mobile browser with a token wallet, chat, and dApp portal.OperaDapp browser with built-in Ethereum walletBalanceAdd all of your Ethereum wallets and keep track of your tokens, loans, and investments.Ethereum Name\u00a0ServiceA utility to create personalized and simple ETH wallet addresses.CivicSecure identity and data management on the blockchain.SelfKeySelf-sovereign identity systemBurner WalletBurner wallet works in your mobile web browser like Safari, without app downloads or secret keysMyEtherWalletA free, open-source, client-side interface for generating Ethereum wallets and moreAlethioEthereum network analytics platform", "responses": "30"}, {"title": "Generalized State Channels on\u00a0Ethereum", "author_name": "Liam Horne", "link": "https://medium.com/l4-media/generalized-state-channels-on-ethereum-de0357f5fb44?source=search_post", "post_date": "Oct 31, 2017", "readtime": "3 min read", "upvotes": "3.7K", "content": "Generalized State Channels on\u00a0EthereumLiam HorneBlockedUnblockFollowFollowingOct 31, 2017Liam Horne and Jeff ColemanA fundamental limitation of blockchain applications is that blockchains are expensive. Sending transactions requires fees, and using ethereum to run smart-contract code is comparatively costly to other kinds of computation.The idea behind state channels is that we can make blockchains more efficient by moving many processes off-chain, while still retaining a blockchain\u2019s characteristic trustworthiness. Despite their conceptual simplicity as a natural extension of the \u201cpayment channel\u201d concept, this technique today remains heavily under-utilized and underdeveloped.This is why we are excited to share that we have started working on a generalized state channels implementation with a focus on privacy, speed, trust minimization, security, and modularity. We think this is one of the most important layers of infrastructure that needs to be built today.We will not be doing an ICO, token sale, or other kind of fundraising event involving a token. As has been pointed out by Fred Ehrsam, Elad Gil, Vitalik Buterin, and many others, the economic incentives for core protocol innovation and second-layer infrastructure are much too low, and so the token model of funding a project in these domains has unfortunately become overused. Instead, we will initially be funded by a donation from Vitalik Buterin.In our view, state channels are the basic foundation for usability in distributed applications. They reduce latency from the unacceptably high levels of today\u2019s blockchain applications to the weblike response times that users expect.Even with other scalability methods like sharding, many applications that rely on large numbers of individual operations (such as streaming payments, IoT devices, games, etc) cannot hope to achieve the cost reductions they require without the added savings that state channels are able to introduce.Rather than receiving the benefit of these savings across a wide number of different applications, today\u2019s blockchain application users will be lucky to find a one-off single-purpose state channel design that runs on its own network, isolated from other applications.These different applications may use the same types of assets, yet deploy separate and highly bespoke contracts that cannot interoperate. They must be audited for security concerns on an individual and ongoing basis; significantly increasing costs. They are rarely optimized to the theoretical limits, often consuming orders of magnitude more gas than is necessary, and frequently going to chain when doing so is not even strictly required.The state of the art advances slowly, and developers are often left struggling to solve the same problems over and over, where one mistake threatens the entire security model of the application. Even when secure, these custom implementations have significant privacy drawbacks; leaking detailed information about the network graph, participant assets and activity.We envision a different future.We want to see clearly designed general purpose state channels that do not reduce, and in fact in many cases greatly increase, privacy.We don\u2019t want to put anything on the chain that doesn\u2019t need to be.We want channels that can be easily incorporated into new applications without the requirement for those developers to also be state channel experts.We want to achieve a level of privacy where state channel operations are indistinguishable from other common types of on-chain activities.We want to see support for multiple parallel operations inside of a single channel that do not interfere with each other.We want to provide expertly optimized, formally verified, and highly audited components that developers of decentralized applications can rely on without repeatedly re-inventing the wheel.We want to support deploying or upgrading channel designs without requiring the user to make a single on-chain operation.And we want to establish clear standards for how all of these generalized state channels will fit together into a global, multi-blockchain network where any user can easily connect to any other.Together, we are working towards building this future.We will be making further announcements around our plans for this project soon. For now, we are entirely focused on building a working prototype using our approach and speaking to developers and founders of decentralized application projects. We intend on building the best possible interface for decentralized application developers to work with so they can deliver the web-like experience their users expect without compromising on any component of the decentralized internet.If you\u2019re interested in working with us or want to support the project, please send us an email.", "responses": "9"}, {"title": "", "author_name": "Vitalik Buterin", "link": "https://medium.com/@VitalikButerin/because-of-ethereums-exponentially-growing-blocksize-the-bottleneck-is-not-regulated-8c0acd77b3a2?source=search_post", "post_date": "May 24, 2018", "readtime": "2 min read", "upvotes": "6.3K", "content": "Vitalik ButerinBlockedUnblockFollowFollowingMay 24, 2018>Because of Ethereum\u2019s exponentially growing blocksize, the bottleneck is not regulated> At some point your node will fall out of sync because of this or a blocksize cap will be put in place.This is *severely* uninformed. Ethereum already has a block size limit in the form of its gas limit, and this gas limit is at 8 million and has been there for the last six months. Fast sync datadir growth has flatlined at 10GB per month for the last six months and it\u2019s not going to go much higher, if only because increasing the gaslimit much further would lead to uncle rate centralization issues. So we *already are* experiencing the worst of it and have been for half a year.Also, focusing on archive node size is highly fallacious because (i) you can have a much lower datadir size by either resyncing even once per year, or just running a Parity node, which prunes for you, and (ii) it includes a bunch of extraneous data (technically, all historical states, plus Patricia tree nodes) that could be recalculated from the blockchain (under 50 GB) anyway, so you\u2019re not even \u201cthrowing away history\u201d in any significant information-theoretic sense by doing so. And if you *are* ok with throwing away history, you could run Parity in state-only mode and the disk requirements drop to under 10 GB.> Now with sharding it can downgrade to a \u201cshard node\u201d\u00a0. None of this matters. You\u2019re still losing a full-node every time one downgrades.The whole point of sharding is that the network can theoretically survive with ZERO of what you call \u201cfull nodes\u201d. And if there are five full nodes, those five full nodes don\u2019t have any extra special power to decide consensus; they just verify more stuff and so will find their way to the correct chain more quickly, that\u2019s all. Consensus-forming nodes need only be shard nodes.Finally, you\u2019re using the term \u201cBCash\u201d wrong; it\u2019s an implementation, not a blockchain/cryptocurrency.So please learn about the tech before you criticize next time.", "responses": "7"}, {"title": "Toshi: A Dapp Browser for the Ethereum\u00a0Network", "author_name": "Brian Armstrong", "link": "https://blog.toshi.org/toshi-a-dapp-browser-for-the-ethereum-network-5a64bde25757?source=search_post", "post_date": "Dec 31, 2017", "readtime": "4 min read", "upvotes": "2.3K", "content": "Toshi: A Dapp Browser for the Ethereum\u00a0NetworkBrian ArmstrongBlockedUnblockFollowFollowingDec 31, 2017Toshi is an app we launched earlier this year. I\u2019ve been thinking more about the potential impact it could have on the world.What is Toshi\u00a0today?Toshi is sometimes difficult to explain because it is a combination of three different things.Steve Jobs introduces the iPhone as three things combined.A Dapp BrowserToshi is a way to use decentralized apps built on the Ethereum network. Early dapps (like CryptoKitties and Leeroy) have started to gain traction in 2017, and I would expect many more in 2018, with increasingly good usability. Our first goal with Toshi is to be the best dapp browser on mobile and web.A mobile Ethereum walletThere hasn\u2019t been an easy way to store and spend your own Ethereum on mobile to date. Toshi changes that, enabling p2p payments, commerce, and a way to store your Ethereum tokens securely. This can happen via QR codes (similar to WeChat) or sending to other users.An identity and reputation systemWith an identity and associated reputation for each user, we\u2019ve introduced a trust layer into the ethereum ecosystem. This system will eventually be moved to a decentralized system (uPort seems to be the most promising) but the technology still has a ways to go. Having a trust layer feels like a critical component to eliminate bad actors, get loans (replacement for credit reporting agencies), etc.If I had to pick one word to describe Toshi it would be a \u201cdapp browser\u201d. Similar to how \u201csmart phone\u201d came to mean many things, \u201cdapp browser\u201d may come to mean a combination of the above items.Toshi and dapp browsers are continuing to evolve quickly. We are in the primordial soup phase of this product.What can Toshi be in the\u00a0future?What we\u2019re really testing with Toshi is the idea that people anywhere in the world can lift themselves out of poverty if they\u2019re given some basic tools.Those tools are:Private property rightsAccess to sound moneyAbility to get a jobAbility to get an educationAbility to get a loanOur theory is that the smartphone + ethereum + dapps offer an unprecedented opportunity to bring this to people all over the world. We\u2019re attempting to increase the economic freedom of the world, and clean up some bad behavior in the lowest scoring countries.It can be easy to take the above tools for granted if you\u2019ve only ever lived in developed countries. But for the majority of people living in the world today, those tools are inaccessible.Imagine someone using Toshi in the future having the following experience:A user receives their first Ethereum from a friend, charity, or job. They write down a 12 word phrase that only they know. They now have access to their own wealth which cannot be taken from them (i.e. property rights).Ideally over time, the value of that wealth will go up (not down due to inflation etc). These first two steps alone are something that many people in the world have never experienced. Allowing people who create wealth to keep it, is probably a necessary (if not sufficient) condition for economic growth.They start to to complete small tasks within in the app (answering questions, labeling photos, translating text) to earn small sums. They now have a small way to earn money (a job) even if it is menial to start. With the ability to earn money legitimately, people may be less inclined to turn to crime or more desperate options. Providing opportunity can reduce crime.They are incentivized (via small payouts from a private charity) to complete some online classes, perhaps watching a Khan Academy video and taking a short test to demonstrate retention. With education and credentialing attached to their profile, their employability (for higher paying jobs) increases.With this new found surety, they decide it is time to launch their own business. They are able to obtain a loan via a dapp on the platform with the reputation they\u2019ve accumulated over time. Their business begins employing others in their community, creating a positive feedback loop toward economic growth in that region.Toshi has a long ways to go to reach the above vision, and let me emphasize again that this is just a theory we are testing. But it gives us an aspiration to shoot for in the coming years.CharityWe\u2019ve also been very inspired by charities like GiveDirectly.org who are making small unconditional payments to poor families. Imagine how many more countries could be reached with a global mobile money solution powered by digital currency.The dapps in 2018 may look more like derivatives of CryptoKitties, but my hope is that the decentralized web grows to become much more powerful. And we\u2019re doing our part to invent that future.If you haven\u2019t tried Toshi you can install it here to start browsing the decentralized web.If you\u2019re an engineer or designer interesting in joining us on this mission, please apply to join here.", "responses": "14"}, {"title": "Amazon AWS now offers Blockchain and Ethereum is a\u00a0Winner", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/amazon-aws-now-offers-blockchain-and-ethereum-is-a-winner-3d289a6c20e4?source=search_post", "post_date": "Apr 22, 2018", "readtime": "4 min read", "upvotes": "2.6K", "content": "Amazon AWS now offers Blockchain and Ethereum is a\u00a0WinnerMichael K. SpencerBlockedUnblockFollowFollowingApr 22, 2018AmazonDon\u2019t listen to the blockchain anti-evangelists, they do not know of what they speak. The truth is there has never been so much blockchain adoption among enterprise and new related startups mostly related to cryptocurrencies.Amazon Web Services launches \u2018blockchain templates\u2019Amazon wants to make it easier for developers to create projects based on the blockchain technology underlying bitcoin and other cryptocurrencies, with \u201cblockchain templates\u201d.The product gives users pre-set blockchain frameworks that support two versions of the technology: Ethereum and the Linux Foundation\u2019s Hyperledger Fabric.The templates allow users to create and launch secure blockchain network using open source frameworks in a fast and easy way.This means Ethereum has reached the big leagues in some respects.While Ethereum has seen its market cap plummet amid the 2018 Bitcoin correction, it\u2019s still one of the most promising blockchain technologies for the future.Blockchain is still one of the most promising technologies to help with the lack of trust of consumers in institutions, government, Tech companies and the like. This is because artificial intelligence is also being weaponized in democracy, consumerism, smartphone usage, app gamification, data harvesting\u200a\u2014\u200aamong other things. The U.S. is badly lagging in algorithm regulation. Cybersecurity and data breaches are a monthly occurence.Amazon launched AWS Blockchain Template, on April 19th, 2018.AmazonAmazon\u2019s foray into the world of distributed ledger technology is sort of a big deal given Amazon\u2019s ascent of importance in our lives. It\u2019s already with AWS, the leader in the Cloud. AWS Blockchain Templates for Ethereum and Hyperledger Fabric.The AWS blockchain template provides a quick and easy way to use source frameworks to build and deploy secure blockchain networks. Blockchain is a technology that makes it possible to create an application in which multiple parties can record transactions without the need for a trusted central authority to ensure that the transaction is verified and secure. The blockchain can achieve this goal by establishing a peer-to-peer network, and each participant in the network can access the common ledger that records the transaction. These transactions are artificially designed, immutable, and independently verifiable. (AWS Blockchain Templates).Given the recent increase in regulation around cryptocurrencies and ICOs, this provides a more legitimate tool for developers to develop peer-to-peer and decentralized solutions, as well as new consensus based distributed ledgers that could impact a broad range of industries. Blockchain itself is increasingly in the news being adapted by major firms in how they improve trust in their ecosystems.Amazon a Winner in Blockchain ImplementationThese templates will let you launch an Ethereum (either public or private) or Hyperledger Fabric (private) network in a matter of minutes and with just a few clicks.While Facebook was the first major platform to ban Crypto related Ads, it has also been rumored to look into how to monetize cryptocurrencies within its own platform. What followed were bans on crypto related topics from Google, Twitter, Snap Inc., meaning a complete shutdown of Bitcoin and its brethren.If the Government and mainstream media (Big Tech) helped put on the breaks of Bitcoin, Amazon is making blockchain more accessible in this move, and Ethereum has a big role to play in this.According to CNBC, start-ups and major corporations alike are working to apply the technology to supply-chain management, financial services, property records and many other industries. Bitcoin is the first application of blockchain, yet has also been called the world\u2019s biggest speculative bubble.However we live in the age of bubbles; debt bubbles, echo bubbles, digital immersion that has little to do with \u201creality\u201d, cryptokitties and Advertizing duopolies, and American companies protecting their assets while being assaulted by a rising Chinese technological dynasty.It\u2019s as if the entire global economy, venture capital and banking system was fixed, so rightfully speaking we might say that the biggest bubble is the wealth inequality amassed by the 1%. This will result in even greater losses of trust as the Middle class continues to decline, blockchain may be one of the technologies to help transform the web to what it has become, to what it could be.", "responses": "12"}, {"title": "Understanding Ethereum\u200a\u2014\u200aa full\u00a0guide", "author_name": "Thijs Maas", "link": "https://hackernoon.com/understanding-ethereum-a-complete-guide-6f32ea8f5888?source=search_post", "post_date": "Oct 4, 2017", "readtime": "13 min read", "upvotes": "2.2K", "content": "Understanding Ethereum\u200a\u2014\u200aa full\u00a0guideThijs MaasBlockedUnblockFollowFollowingOct 4, 2017Ethereum is the subject of a lot of hype lately. It is praised by some as the new internet or the world\u2019s computer and criticised by others as a platform that enables widespread scams and ponzi schemes to thrive. I see badly informed articles about Ethereum, smart contracts, DApps, DAO\u2019s, ICO\u2019s and tokens on the daily so it is time to analyse the subject. I will present the argument that Ethereum might form the main protocol enabling the \u2018internet of value\u2019.It is time to take a closer look at what Ethereum is, what it enables and what role it could play in the future. But first, we have to backtrack a bit. Time for a small reminder about the value of distributed ledger technologies.Decentralized and \u2018trustless\u2019To put it briefly, a blockchain is a database that is secured and maintained by a large number of nodes worldwide. Data is stored in blocks, which are time-stamped and linked to each other to form a chain. The blockchain makes sure that all data stored in the chain is secure and immutable forever, which is what makes the blockchain so interesting. Through its consensus mechanism, the blockchain is \u2018trustless\u2019, which means that one does not have to rely on the trustworthiness of a counterparty.It\u2019s trustless, so what?For the first time, the blockchain enabled a safe way to send value on the internet without needing a trusted third party. This led to the rise of Bitcoin and other cryptocurrencies.In essence, a Bitcoin transaction is just the execution of a piece of code stating that \u2018person A\u2019 sent X amount of Bitcoin to \u2018person B\u2019. This transaction is self-enforcing. To execute, it first checks if there is enough Bitcoin in person A\u2019s digital wallet and then sends the money to B\u2019s wallet. In itself, this transaction is a piece of code that automatically executes if a certain variable is met. It is a digital contract. This (smart) contract was the first application of a piece of code that could be fully trusted to (a) act in the way it was designed and (b) be immutable, without the need of a controlling authority.Computer code however, can be used to do much more than this.Vitalik Buterin realized early on that if a cryptocurrency could potentially disrupt traditional finance by eliminating the need for trusted third parties, then smart contracts can disrupt many more industries in which intermediaries are needed to provide trust. He started playing around with Bitcoin\u2019s coding (scripting) language, but found that it was not flexible enough for the amount of applications he imagined. As such, he created Ethereum.EthereumEthereum is a programmable blockchain. Like any blockchain, Ethereum is based on a peer-to-peer network protocol consisting of many computers worldwide. Instead of providing users the ability to use a few pre-defined operations (e.g. bitcoin transactions), Ethereum allows its users to run pretty much any code they want. The code is stored on the blockchain for others to interact with and is often referred to as smart contracts.The computers (nodes) in Bitcoin\u2019s network maintain and update the blockchain. In Ethereum, they also run the Ethereum Virtual Machine (EVM). The Ethereum Virtual Machine is a supercomputer that combines of all computing power of the nodes in the network combined. This computing power is used to run the user-submitted code (smart contracts) on the blockchain. To execute these, the EVM charges a very small transaction fee in exchange for the computational power used by the smart contract. This fee is called \u2018gas\u2019 and it is paid in Ether, which is why Ether should not really be seen as a cryptocurrency, but rather as the the oil to run the network.Ethereum is a supercomputer, which lets users run pretty much any code they\u00a0want.Smart ContractsAs mentioned, Ethereum allows people to deploy smart contracts on the blockchain. A smart contract is a self-executing piece of code, which defines and executes agreements between multiple parties. The idea of \u2018smart contracts\u2019 was first conceived by Nick Szabo in 1994. He reasoned that code is perfectly able to define a series of relations, parameters and actions.In Ethereum, smart contracts can be written in Solidity, an Ethereum specific programming language. These smart contracts can then be uploaded to the blockchain and will continue existing there. Because the blockchain is secure and immutable, one can fully trust that a smart contract on Ethereum will execute like intended. Self execution results in that counterparty risks and moral hazards are essentially eliminated from the equation, as the contract enforces its own provisions.Vitalik Buterin explains smart contracts as following in Ethereum\u2019s white paper:\u201cContracts in Ethereum should not be seen as something that should be \u201cfulfilled\u201d or \u201ccomplied with\u201d; rather, they are more like \u201cautonomous agents\u201d that live inside of the Ethereum execution environment (EVM), always executing a specific piece of code when \u201cpoked\u201d by a message or transaction, and having direct control over their own ether balance and their own key/value store to keep track of persistent variables.\u201dSmart contracts can be used for a wide variety of different transactions. They are very suitable for simple transactions, in which obligations of both parties can be boiled down to easily verifiable set of requirements. Think for example of financial products (such as derivatives, futures, options etc.), simple consumer transactions, Internet of Things data exchange or automatic payments of musicians or content creators per minute of \u2018use\u2019 of their intellectual property.As a further example, I could write a smart contract that acts as an insurance against drought for farmers. The basic parameters would be as follows:if, sensors from KNMI (Royal Dutch Meteorological Institute) indicate that less than 6 mm of rain has fallen in the past 3 months; andif, user has deposited a monthly insurance premium defined in the contractthen, send amount X money to user.In my example, the KNMI sensors act as an \u2018oracle\u2019 to get trustworthy up-to-date information for the contract to execute. An oracle is a trusted third-party, sensor or blockchain that can provide information needed for the contract.Illustration 1: Farmer Insurance visualisedDecentralized ApplicationsNow, let\u2019s say that, instead of just one insurance product, I want to start a whole insurance company on the blockchain. We\u2019ll call it BlockSurance. Firstly, I would want more than one product, and would code more than one smart contract. The different contracts would be coded for a variety of products and functions.That smart contracts on Ethereum can interact with each other, is very helpful for BlockSurance. After a very dry year, I would not want the \u2018farmer-drought insurance\u2019 contract to run out of funds to compensate the farmers. As such, I could make my different insurance products (smart contracts) send the insurance premiums to one central smart contract that would act as the general reserve. If the farmer-drought insurance contract concludes that a farmer is entitled to X amount, a message will be sent to the general reserve contract to pay the farmer X amount, which will then automatically execute.BlockSurance\u2019s smart contracts are stored and executed on Ethereum\u2019s blockchain, which means they are \u2018trustless\u2019: my customers don\u2019t have to trust me to know that they will receive a payout when they are entitled to one, as the contracts execute themselves. My customers are also ensured that these contracts cannot be hacked or changed because the blockchain is immutable. There is no counterparty risk as long as the code in the contracts is audited by the Ethereum community to confirm that they will work as intended/advertised.Of course, BlockSurance is going to need customers\u200a\u2014\u200aand I want their user experience to be as easy as possible. So, I will set up a website and create a great user interface. This website will be the front-end of my application, while Ethereum\u2019s blockchain and my smart contracts are the back-end.If I have done all of the above, I have essentially created a decentralized application, or DApp. However, A DApp is increasingly understood to not only be an application running on a blockchain, but also to have its own cryptographic token.TokensSo what is a token?A token is a new sort of digital property, the value of which is determined by supply and demand. A token grants a set of rights to its owner, in relation to the decentralized application it was created for. A token can for example be used for governance of the project, distribution of equity rights or access to the decentralized application it was created for. The widely varying characteristics of a token makes its legal nature a very interesting topic to examine.For BlockSurance, let\u2019s imagine I create a token as well. This cryptographic token could for example be used for access to the DApp: to use my insurance, one would have to pay the insurance premium with the token.Moreover, if the insurance turns out to make more profit than needed, I could have my token holders vote on what should be done with this profit. I could do so by setting a threshold in my general reserve contract, which, once every year, if crossed, allows token holders to vote for:a profit distribution among token holdersa reduction of the insurance premiuman increase of insurance payoutsthe deployment of funds to developersFor every voting option I just deploy a smart contract which allows users to send tokens to it during the voting period and returns them afterwards. The contracts communicate with each other at the end of the period to see which received the most votes. Whichever contract received the most will automatically execute.To make a my own cryptographic token, I used to be required to make my own blockchain. Building a whole blockchain is a time-consuming process as I would have to design its protocol, consensus mechanism and set up nodes. If I don\u2019t have enough nodes it could easily be subject to a sibyl or a 51% attack. As a hypothetical developer, I don\u2019t want to have to worry about security or designing a whole blockchain.Ethereum solved this problem by not only allowing the deployment of smart contracts, but also the creation of tokens on top of its blockchain. But how these tokens distributed?Initial Coin OfferingsTokens are often distributed for the first time through an Initial Coin Offering, or ICO. In an ICO, investors and potential users of the platform can buy tokens by exchanging them for Bitcoin or Ethereum. It is a form of crowdfunding which lets developers raise money while early adopters and opportunistic investors speculate on the future value of the project\u2019s tokens. The ICO is also known also known as a token distribution. This year, more than $2.2 billion has been raised with an ICO so far.By doing an ICO for BlockSurance, I can raise money to hire developers to improve the front and back-end of my decentralized application. The ICO also gives my insurance company a ton of exposure and helps kick start my business. Optionally, I could also put a part of the funds collected in the \u2018general reserve contract\u2019 or pay back my seed investors. I am also going to pocket a part of the tokens for myself, resulting in a distribution like this.Illustration 2: Distribution of tokensMost ICO distributions look something like this. Of course, the exact percentages can vary, but almost always developers give themselves a share of the tokens. The funds raised from ICO investors go towards the actual development of the project.Decentralized Autonomous OrganisationsA Decentralized Autonomous Organisation (DAO) is an organisation that is completely governed and managed by the rules encoded in its underlying bundle of smart contracts. A DAO is essentially a DApp in which the developers do not play a special role anymore once it is launched. The difference between a DApp and a DAO is one of governance and autonomy. A DApp\u2019s source code and future road map is governed by a group of developers or an organisation, while a DAO is truly autonomous. What the organisation does and what it will do is all previously determined in its code. In fact, the code is the organisation itself.In other words, in a DAO, the future development (if any) is fully determined by in-built governance mechanisms that let tokens holders vote for the deployment of the raised funds. Voters could for example vote for the DAO to invest in other projects. Another option is allowing any developer to submit proposals for changes or additions to the DAO, which can then be voted on. If successful, a developer will get permission to implement his proposal and get paid from the raised funds. For this to work, the smart contracts to allow for such voting-based implementations have to be built-in the DAO from day one.At the time of writing there are 266 DApps & DAO\u2019s. Most of these are deployed on Ethereum. Some notable examples are:Dapps:Augur\u200a\u2014\u200aA prediction marketGolem\u200a\u2014\u200aA market place for idle computing powerBasic Attention Token\u200a\u2014\u200aA digital advertising exchange and browser with an \u2018attention-based\u2019 revenue model for content creatorsStatus: A decentralized browser, messenger with in-built access to DAppsDAO\u2019s:The DAO: A crowd-sourced investment fund (also known as the biggest failure in the short history of smart contracts)MakerDAO: A DAO that aims to minimize price volatility of its own tokenDigixDAO: A marketplace that allows for trade in a gold-backed token on the blockchainUse cases and the \u2018internet of\u00a0value\u2019What Bitcoin did was allow individuals to exchange cash without involving any middlemen, like banks, payment processors or the government. For Bitcoin\u2019s use case, the trust these institutions provide is not necessary.Ethereum\u2019s impact may be more far-reaching. As almost anything can be coded and secured on its blockchain, other intermediary actors that provide trust could potentially be replaced. Depending on how much value you believe these intermediaries bring aside from trust, these actors could include notaries, bankers, the insurance sectors, real estate agencies, online marketplaces for goods and services like Uber and Ebay etc. The argument goes that almost anything of value for which intermediaries are necessary to provide trust can be done more efficiently on the blockchain.Although this argument has its flaws, it is clear that blockchain technologies empower individuals from around the world to deal with each other by eliminating counterparty risk from the equation. Inevitably, this means that, to some extend, trusted intermediaries lose their importance in our economic system. We will see a shift away from these parties towards peer-to-peer services and the sharing economy. A shift away from a centralized economy to a distributed one.The internet distributed information in a manner that was not conceivable before the rise of the technology. The blockchain allows for the trustless exchange of value over the internet, pushing us to challenge how we have structured society, defined value and rewarded participation. This is why blockchain technology is referred to as the driving force behind the \u2018internet of value\u2019 or the Internet 3.0. Ethereum is already the biggest protocol that allows the creation of smart contract, DAO\u2019s and DApps, and many believe it might just become the backbone of this new internet.The Enterprise Ethereum Alliance and permissioned chainsThe Enterprise Ethereum Alliance (EEA) is a network for academics, companies and startups to share knowledge and \u2018to define enterprise-grade software capable of handling the most complex, highly demanding applications at the speed of business\u2019. This network is quite extensive, with notable members such as JP Morgan, Microsoft, Master Card, Intel, Deloitte and BP. Considering the possible use cases for blockchain technology, it is logical that a wide variety of companies want to experiment with their own implementations to increase efficiency within their respective sectors.Illustration 3: non-exhaustive visualisation of Enterprise Ethereum Alliance MembersIt is often argued that the EEA is a driving factor in Ethereum\u2019s valuation, but this is not (or better said, should not) be the case. The companies are experimenting with the deployment of private (for use within one company) and consortium chains (in which multiple parties with existing relations can benefit from having a shared ledger for a specific use case). These \u2018permissioned\u2019 blockchains are private \u2018forks\u2019 or private versions of Ethereum. A private fork of Ethereum allows companies to restrict user access to certain parties. The nodes to secure the network are supplied by the companies involved. Because there is few parties to the network, there is more flexibility in changing the rules of the blockchain, reverting transactions, modifying balances etc. There are also less transaction costs (because there are less nodes) and common risks in public blockchains such as 51% attacks are not possible, as all validators are known.On a personal note, I would like to add that I believe most people overestimate the potential of permissionless chains and underestimate the potential of permissioned chains. I am not questioning the efficiencies that well-structured blockchains can bring to many sectors. However, as said before, permissioned chains are more efficient than their permissionless counterparts due to the differences in the difficulty of reaching consensus. I am not saying that transparency, censorship resistance and security are not great in and of itself, but for a decentralized project to succeed, much more is needed than just those attributes (think user experience, competitive costs etc.).ConclusionBlockchains give the potential to provide efficient, fast, secure, reliable and auditable transacting of value. Like the internet before it, the blockchain promises to upend business models and disrupt industries. Blockchain technologies are pushing us to challenge how we have structured society, defined value and rewarded participation. This is why some refer to blockchains as the enabling technology for the internet 3.0, or the internet of value.As almost anything can be coded and deployed on Ethereum\u2019s blockchain, Ethereum might just form the base of this new internet. However, high potential comes hand in hand with hype, and talk of the internet 3.0 brings problems resembling the ones surrounding the dot-com crisis.Edit: This piece has focused solely on the positive aspects of Ethereum. There is however, a lot of valid criticism on the project. Ethereum\u2019s weaknesses are summarized in a new article.", "responses": "7"}, {"title": "Ethereum Development Walkthrough (Part 1: Smart contracts)", "author_name": "dev_zl", "link": "https://hackernoon.com/ethereum-development-walkthrough-part-1-smart-contracts-b3979e6e573e?source=search_post", "post_date": "Jan 14, 2018", "readtime": "8 min read", "upvotes": "2K", "content": "Ethereum Development Walkthrough (Part 1: Smart contracts)dev_zlBlockedUnblockFollowFollowingJan 14, 2018Smart contracts, ICOs, Mist, Metamask, Remix, geth, web3.. You\u2019ve probably seen it all if you spent a little time trying to get into the world of Ethereum developement.Some deploy smart contracts to a test network, others tell you to read a yellow paper, while others advise you to use the truffle suite because it\u2019s great. And you are there, not knowing what exactly to do and how everything works together.If this is the first article that you read on Ethereum or the blockchain eco-system in general, you are going to love it! Experts calling each others names on twitter, unsafe standards and protocols, untested and buggy development tools. Not everything is figured out yet, everyone is going in different directions, and there still a lot to be done. The future of institutions, banks, and governments is being decided by mad developers! It\u2019s so great.Anyway, don\u2019t worry anymore, I\u2019ll try to connect all the dots for you in this tutorial series, and walk you through the universe of Smart contracts and dapps developement, and show you how everything fits together.While I will not get into every detail, I\u2019ll link some materials that will help you understand some concepts better, and it\u2019s up to you to research them and get into all the little details. The goal of this series is to help you understand better how things work together, in the simplest way possible, like a friend would explain it to you.I don\u2019t even know what Ethereum\u00a0isThe official website of Ethereum tells us this:Ethereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third-party interference.In other words, it uses the capabilities that gives us the blockchain technology to certify the execution of the code that we run.If you don\u2019t know what the blockchain, Ethereum, Bitcoin, cryptocurrency or any of these words mean, I advise you to listen to this excellent podcast by Tim Ferriss, interviewing Nick Szabo and Naval Ravikant: The Quiet Master of Cryptocurrency\u200a\u2014\u200aNick SzaboWhat are Smart Contracts?On Ethereum, Smart Contracts are scripts that can handle money. It\u2019s as simple as that.These contracts are enforced and certified by parties that we call miners. Miners are multiple computers who add a transaction (Execution of a smart contract, payment of a cryptocurrency etc.) to a public ledger that we call a block. Multiple blocks constitute a blockchain.We pay these miners with something called Gas, which is the cost to run a contract. When you publish a smart contract, or execute a function of a smart contract, or transfer money to another account, you pay some ether that gets converted into gas.If it\u2019s still unclear, or you want to know more details, here are some interesting links:A different introduction to Smart Contracts in video.Smart contracts page on Wikipedia.A more detailed explanation of Gas.Before diving into smart contracts developmentIn this tutorial, I\u2019ll assume that you already have some basis in software development, and have a basic knowledge of Javascript and Node.JS. Otherwise, you\u2019ll be quickly lost. Solidity, the programming language that we will use to develop, is close to Javascript\u2019s syntax, and since a lot of development tools around Ethereum are based on Javascript and NodeJS, it will be easier for you to get in if you are already comfortable with both. This is not a tutorial for beginners, and while I\u2019ll link some alternative tutorials for you if you didn\u2019t understand some concepts, it\u2019s up to you to research the rest.Smart contracts developmentNow, finally, we start the interesting part, as I said Solidity is close to Javascript, but they are not alike. On Solidity, and I\u2019m sorry to tell you that, frontend developer, you just can\u2019t slap JQuery on a piece of code and hope that it will work, you can\u2019t overlook security, and you just can\u2019t hack your way through. We will see why when we will discuss security, development patterns, and fail-proofing our code.Now, for our first example, I\u2019m thinking about a script inspired by the movie In Time, where, in a dystopian future, people trade their remaining time to live like money. In the movie, they have a variant of arm wrestling that involves playing with that time, and we will do just that! Wrestling money using a Smart Contract.And don\u2019t worry, I\u2019ll make available for you all the scripts we will see on Github.Also, if it\u2019s the first time you deal with smart contracts, it\u2019s fine if you don\u2019t understand everything now, it takes practice, reading the docs, and a bit of research to get accustomed to Solidity.The codeNow, onto the coding, first of all, the base of a Solidity script is the following snippet, the pragma directive to tell the compiler which version of Solidity we are using, and the name of our contract, a similar structure to a class in Javascript. Here it\u2019s \u201cWrestling\u201d.We want two wrestlers, so we will add two variables that hold the address of their accounts (Public keys of their wallets).In our little game, in each round, the wrestlers will be able to put in a sum of money, and if one put in double the money of the other(in total), he will win.One important thing about the public/private keywords is, even though, a variable is private, it doesn\u2019t mean that someone couldn\u2019t read its content, it just means that it can be accessed only inside the contract, but in reality, since the whole blockchain is stored on a lot of computers, the information that is stored inside the variable could always be seen by others, and that represents the first security consideration that you should keep in mind.On the other hand, the compiler automatically creates getter functions for public variables. To make it possible for other contracts or users to change the value of the public variable, you need to create a setter function.Now we will add three events, for every step of our game. The beginning, when the wrestlers register, during the game, for each round, and at the end, when a wrestler wins. Events are simply logs, and they can be used to call JavaScript callbacks in the user interface of distributed applications, also known as dapps. Events can even be used for debugging purposes during development since there is no equivalent to the \u201cconsole.log()\u201d function of JavaScript on Solidity.Now we will add the constructor, in Solidity, it has the same name as our contract and it will be called only once, upon the creation of the contract.Here, the first wrestler will be the one who created the contract. \u201cmsg.sender\u201d is the address of the one who invoked the function.Next we let another wrestler register with the following function:The require function is a special error-handling function within Solidity that will revert changes if a condition is not met. In our example, if the variable wrestler2 equals the 0x0 address (the equivalent of 0 for addresses), we can proceed, if the address wrestler2 is different from the 0x0 address, it means that a player has already registered as an opponent, and therefore, we will refuse new registrations.Again, \u201cmsg.sender\u201d is the address of the account that called the function, and we emit an event that signals the start of the wrestling.Now, every wrestler will call a function, \u201cwrestle()\u201d, putting in money. And if both have played, we see if one of them has won (our rule was that one of them have to put in double the cash of the other one). The \u201cpayable\u201d keyword means that the function can receive money, if it isn\u2019t set, the function will not accept ether. The \u201cmsg.value\u201d is the amount of ether that was sent to the contract.We then add the endOfGame(), and endOfRound() functions. The \u201cinternal\u201d keyword is the same as private, the only difference is that internal functions could be inherited by other contracts(since Solidity is similar to other object-oriented languages), while private functions cannot be inherited.Notice that we don\u2019t deliver the money to the winner directly, while in this case it\u2019s not that important, since the winner will take all the money off this contract, in other cases, when multiple users can withdraw ether off a contract, it\u2019s more secure to use a withdraw pattern, to avoid re-entrancy.It simply means, that if for example multiple users can withdraw money off a contract, one can simply call the withdraw function multiple times at once and get payed multiple times. So we need to write our withdraw function in such a manner that it will nullify the amount he should receive before proceeding to pay him.It looks like this:And that\u2019s it. You can find the whole snippet at the following link:devzl/ethereum-walkthrough-1ethereum-walkthrough-1 - Repository for the first part of the tutorial series on Ethereum, \"Ethereum development\u2026github.comUsing an\u00a0IDECopy the snippet now, and open the Remix IDE in a new tab of your browser:You can use Remix directly on your browser, and it has a lot interesting functionalities that you could hardly find elsewhere at the moment.Click on the button \u201c+\u201d on the top left of the page and create a new file named \u201cWrestling.sol\u201d, then past the code that you can find in the github repo linked above:Finally some syntax highlighting. Github doesn\u2019t support Solidity\u00a0.sol extension yet.On the right part of the page, you can find multiple interesting tabs such as the \u201cAnalysis\u201d one, that will show errors and recommendations. I leave you to discover this tool more. I wanted to show it to you, even though we will use other tools in the next part, the goal of this tutorial series, as I said before, is to connect the dots for you, and show you how things fit together, and it\u2019s up to you to decide whether or not you are at ease using an IDE on a browser. Invite you to read the docs of Remix if you do.Alternatively, you should start getting familiar with solidity by reading its docs.In the next part, we will see how to deploy the Smart Contract to two kinds of test networks, discover truffle, ganache, and geth, and how they can all fit together.If you liked this first part, you can find me on twitter @dev_zl.Part two can be found here.", "responses": "12"}, {"title": "INGOT News: Komorebi Alliance Detaching from Ethereum & Price Volatility", "author_name": "Ahmed Khawanky", "link": "https://hackernoon.com/a-single-platform-offering-diverse-numerous-utilities-komorebi-alliance-3b2710f6593b?source=search_post", "post_date": "Jun 24, 2018", "readtime": "3 min read", "upvotes": "6.4K", "content": "INGOT News: Komorebi Alliance Detaching from Ethereum & Price VolatilityAhmed KhawankyBlockedUnblockFollowFollowingJun 24, 2018Komorebi is a Japanese untranslatable word; which eloquently captures the effect of sunlight streaming through the leaves of the trees. INGOT Coin is pleased to announce the formation of a new alliance, Komorebi.https://t.me/KomorebiAllianceIt is no secret that the recent volatility in the market has been extreme with Bitcoin and Ethereum prices in freefall. Market participants are suffering losses but also given the opportunity to invest at lower prices to gain if the market pulls up.Cryptocurrency investor Brian Kelly, states on CCN \u201cReferring back to the basic rule of investing, Kelly noted that during a period in which the market is extremely bullish and optimistic, it is better to sell and eye a timely opportunity to enter and when the market is overly pessimistic, it is wise to look for a position to enter.\u201dBitcoin originally was supposed to offer an efficient means of transferring money over the internet and is controlled by a decentralized network with a transparent set of rules, thus presenting an alternative to central bank controlled fiat money.Market participants changed from geeks and believers in Blockchain to funds and investors looking to make profit with the uptrend volatile market. This led people to ignore the primary function of Bitcoin which was to efficiently transfer money over the internet with no control from central banks.This is affecting the whole markets including the new ICOs and tokens. New ICOs and tokens are simply being invested in to sell once listed and gain whatever discount rate the ICO is offering. Most of the time these tokens are tied to the price volatility and movement of Bitcoin and Ethereum. INGOT Coin has been studying the market carefully in order to develop in ways that are separated from Bitcoin and Ethereum as well as their price volatilityINGOT Coin, GMEX-Group, BolttCoin, Modern Finance Chain (MFChain), SwachhCoin, Black.Insure, PlaceToRent (PTRT), Bineuro and Stella have all formed a unified front under one alliance.The group of ICOs along with plan to establish a single platform that will allow all their communities to use their utilities simultaneously. Furthermore, plans of enabling different discounts among each one of the ICOs is being discussed in order to give edge to all participants.The Alliance believes that by bringing together different ICOs from different industries such as health, insurance, financial services, E-commerce and real estate, and combining the different existing Utility Functions a new meaning to Utility will be created.Instead of having a couple of utility benefits from one ICO, why not have many more benefits from a unified group of ICOs working together? All partners in the alliance will work together to create one user friendly and up-to-date platform providing access to their tokens and utilities.INGOT Coin is about building an interconnected global community of trust and cooperation\u200a\u2014\u200athe basis of which is honesty and transparency between its members. At INGOT, we believe that it is the right of all people to seize control of their lives; whether personally, socially, or financially. We are on our way in making a breakthrough in financial markets by presenting a revolutionary gateway towards an all-inclusive environment.Hirander Misra, Chairman and CEO of GMEX Group commented \u201cWe are entering an era where the value of individual Blockchain enabled ecosystems combining through joint ventures will lead to a new paradigm of Token Augmenting Partnerships (TAP) creating a network effect, which will propagate to create greater value.\u201d", "responses": ""}, {"title": "TRON Announces 30M TRX Airdrop To Ethereum Community", "author_name": "TRON Foundation", "link": "https://medium.com/tron-foundation/tron-announces-30m-trx-airdrop-to-ethereum-community-86ebefd601ec?source=search_post", "post_date": "Apr 20, 2018", "readtime": "2 min read", "upvotes": "3.2K", "content": "TRON Announces 30M TRX Airdrop To Ethereum CommunityEthereum users are welcome to experience the newest generation decentralized network and participate in community governanceTRON FoundationBlockedUnblockFollowFollowingApr 20, 2018TRON will airdrop 30M TRX to the Ethereum community as a show of our gratitude towards Ethereum for their support during TRON\u2019s ERC20 phase, in addition to preparing for the Super Representative Elections after mainnet launch. TRON will airdrop 30M TRX (equivalent to approx. USD$1.7M) to active user with a balance of over 1 ETH after January 1,2018. Each account will receive random TRX (an amount between 10 TRX\u200a\u2014\u200a100 TRX will be randomly selected for each user).Ethereum played a vital role in TRON\u2019s early stage development, and we want to express our appreciation through this airdrop event. However, we have also discovered many issues and bottlenecks during our time on the Ethereum platform. When we see a problem\u200a\u2014\u200awe will set out to solve it. That is why TRON wants to provide TRX to the Ethereum community, so people have a chance to experience our high TPS development platform and use TRX to vote, becoming part of our new generation decentralized network and the TRON democracy.Ethereum users who meet the following requirements will be eligible for airdrop:1. Any account on the public blockchain that transfers or receives ETH from Jan-01\u20132018 00:00:02 AM +UTC\u200a\u2014\u200aApril 20, 2018 00:00:04 +UTC (block 4832686 to block 5471198).2. Account has an ETH balance of over 1 on April 20, 2018 at 00:00:04 +UTC (block 5471198).We expect to complete data collection within one week and will distribute TRX shortly after.Please note! The TRON team will handle all processes for the airdrop event. We do not require any action from Ethereum users. TRON will not solicit users for tokens or addresses for ANY reason. If you encounter this type of suspicious activity, please contact customer service immediately at service@tron.network https://twitter.com/Tronfoundation to avoid any financial losses.(TRON reserves the right of final interpretation of this event.)Tron FoundationApril 21, 2018", "responses": "15"}, {"title": "Ethereum game developer makes over $500,000 in 1\u00a0day", "author_name": "Skirmantas Janu\u0161kas", "link": "https://medium.com/dappradar-com/ethereum-game-developer-makes-over-500-000-in-1-day-84178d5e5fc3?source=search_post", "post_date": "Feb 14, 2018", "readtime": "2 min read", "upvotes": "2.9K", "content": "Ethereum game developer makes over $500,000 in 1\u00a0daySkirmantas Janu\u0161kasBlockedUnblockFollowFollowingFeb 14, 2018History has just been rewritten. In the last 24 hours one game developer earned more than $500,000 from Ethereum game. But let\u2019s start from scratch.I am familiar with this data because I run a website called DappRadar. It tracks most of Ethereum games and ranks them based on the 24-hour performance. Check it out to find new apps! But let\u2019s keep going.What is an Ethereum game\u00a0?We call these games as Ethereum games because their code runs in Ethereum blockchain. Most often not all the code, but the one that is responsible for the main logic of the game.What is in it for me\u00a0?Almost all Ethereum games have one thing in common\u200a\u2014\u200athey are all open source. It means that everyone can read the code of the game and make sure it does not have any shady intentions.Imagine a private MMORPG game server where admins and owners have strict permissions and they have no way to sell superb weapons for real money. That is the power of blockchain. No corruption. You can code these permissions and everyone can read them to make sure you are not cheating.And CryptoCountries is one of these transparent Ethereum games.What is CryptoCountries\u00a0?CryptoCountries is an Ethereum game where you can purchase a land on virtual map. Once you purchase a land for a certain price, that price increases and anyone can buy it from you too. If that happens, you receive that amount to your wallet. Basically, if someone buys a land from you, you earn Ether.How does the developer earn\u00a0?I have read the code of the game and from each transaction developer gets a fee. The fee is 2\u20135% of transaction value. The bigger the value is, the lower the fee percent is. For example, buying a land for 10 ETH would have a 2% fee while purchasing one for 0.05 ETH would cost a 5% fee.But\u2026 $500,000 in 24\u00a0hours?Yep. Simple as that. CryptoCountries went viral this morning and in less than 24 hours its users made transactions for 31,546 ETH. That is roughly $28,600,000 (according to this moment\u2019s Ether course of $906).We already know that the lowest fee for a transaction is 2% and we stick to this number. $28,600,000 * 0.02 = $572,000. This is the lowest amount the developer could have earned if all the transactions were over 5 Ether. It could have been 1 million dollars, it is hard to calculate the exact amount. But we clearly know that it was over half a million in\u2026 one day.DappRadar.com", "responses": "8"}, {"title": "Inside an Ethereum transaction", "author_name": "CodeTract", "link": "https://medium.com/@codetractio/inside-an-ethereum-transaction-fa94ffca912f?source=search_post", "post_date": "Feb 15, 2017", "readtime": "4 min read", "upvotes": "1.97K", "content": "Inside an Ethereum transactionCodeTractBlockedUnblockFollowFollowingFeb 15, 2017Ethereum can be thought of as a transaction based state machine, where transactions can change the state and the state keeps track of interactions. Here we examine at a high level, the constituents of a transaction and explain how most of the gibberish hex values are determined.We will be using nodejs in this tutorial so we start off by installing the dependencies.$ npm install web3@0.19 ethereumjs-util@4.4 ethereumjs-tx@1.3Then creating a file tx.js and requiring the dependencies.var Web3 = require('web3');var web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/'));var util = require('ethereumjs-util');var tx = require('ethereumjs-tx');First we start with a private key. Ethereum uses public key cryptography for authentication. More specifically, Elliptic Curve Digital Signature Algorithm (ECDSA) with secp256k1\u2019s curve is used. The private key is just a random 256 bit data except for some restrictions. For examplevar privateKey = '0xc0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0de';To derive the corresponding public keyvar publicKey = util.bufferToHex(util.privateToPublic(privateKey));and you should get the following if you print out publicKey0x4643bb6b393ac20a6175c713175734a72517c63d6f73a3ca90a15356f2e967da03d16431441c61ac69aeabb7937d333829d9da50431ff6af38536aa262497b27The Ethereum address associated with this private key is the last 160 bit of the SHA3\u2013256 (Keccak) hash of the public key.var address = '0x' + util.bufferToHex(util.sha3(publicKey)).slice(26);//0x53ae893e4b22d707943299a8d0c844df0e3d5557As you can observe, it is actually possible for multiple private keys to have the same address. An Ethereum account is associated with each address and each have the following attributesnonce the count of the number of outgoing transactions, starting with 0balance the amount of ether in the accountstorageRoot the hash associated with the storage of the accountcodeHash the hash of the code governing the account, if this is empty then the account is a normal account that can be accessed with its private key else it is a smart contract whose interactions are governed by its codeNext we take a look at a transaction, there are 6 input fieldsnonce the count of the number of outgoing transactions, starting with 0\u00a0gasPrice the price to determine the amount of ether the transaction will costgasLimit the maximum gas that is allowed to be spent to process the transactionto the account the transaction is sent to, if empty, the transaction will create a contractvalue the amount of ether to senddata could be an arbitrary message or function call to a contract or code to create a contractA transaction to send 1000 wei (1 ether = 10\u00b9\u2078 wei) of ether and leaving a 0xc0de message can be constructed as followsvar rawTx = {    nonce: web3.toHex(0),    gasPrice: web3.toHex(20000000000),    gasLimit: web3.toHex(100000),    to: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',    value: web3.toHex(1000),    data: '0xc0de'};Notice that the from address is not specified, it will be derived from the signature after signing with the private key. To sign the transactionvar p = new Buffer('c0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0dec0de', 'hex');var transaction = new tx(rawTx);transaction.sign(p);The transaction can then be sent to the network and will be tracked by a 256 bit transaction id. This transaction can be viewed at Etherscan. The transaction id is the hash of the transactionconsole.log(util.bufferToHex(transaction.hash(true)));//0x8b69a0ca303305a92d8d028704d65e4942b7ccc9a99917c8c9e940c9d57a9662Next we look at what makes up the data for a function call. Take for example the data of this transaction to a contractconsole.log(web3.eth.getTransaction('0xaf4a217f6cc6f8c79530203372f3fbec160da83d1abe048625a390ba1705dd57').input);//0xa9059cbb0000000000000000000000007adee867ea91533879d083dd47ea81f0eee3a37e000000000000000000000000000000000000000000000000d02ab486cedbffffIn order to know which function it is calling, the functions of the contract must be known beforehand to create a hash table. The first 32 bit a9059cbb is the first 32 bit of the hash of the function. In this case the function is transfer(address _to, uint256 _value) and its hash isconsole.log(web3.sha3('transfer(address,uint256)'));//0xa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049bThis is followed by 256 bit for each argument, so in this case the address is0x0000000000000000000000007adee867ea91533879d083dd47ea81f0eee3a37eand the unsigned integer is0x000000000000000000000000000000000000000000000000d02ab486cedbffffNext, as discussed above, by omitting the to field, a contract will be created. But how is the contract\u2019s address determined? Take for example this transactionconsole.log(web3.eth.getTransactionReceipt('0x77a4f46ff7bf8c084c34293fd654c60e107df42c5bcd2666f75c0b47a9352be5').contractAddress);//0x950041c1599529a9f64cf2be59ffb86072f00111The contract address is the last 160 bit hash of the sender address and its nonce can be determined beforehand. For this transaction, the sender and nonce can be found byvar contractTx = web3.eth.getTransaction('0x77a4f46ff7bf8c084c34293fd654c60e107df42c5bcd2666f75c0b47a9352be5');console.log(contractTx.from);//0x84f9d8b0e74a7060e20b025c1ea63c2b171bae6fconsole.log(contractTx.nonce);//0Thus the contract address isconsole.log('0x' + util.bufferToHex(util.rlphash(['0x84f9d8b0e74a7060e20b025c1ea63c2b171bae6f', 0])).slice(26));//0x950041c1599529a9f64cf2be59ffb86072f00111Now we have gotten to know a little bit more about these hexadecimals!Ethereum and smart contracts have huge potential to disrupt many industries. There are many resources online and you can find a few below to continue your journey on exploring Ethereum!Ethereum main site https://www.ethereum.org/Mist, one of Ethereum\u2019s client https://github.com/ethereum/mist/releasesSolidity http://solidity.readthedocs.io/en/latest/Web3 api https://github.com/ethereum/wiki/wiki/JavaScript-APICommunity discussions https://www.reddit.com/r/ethereum/If you have any issues regarding this article, you can raise it at our Github under the nightlyHacks repo.Follow us on Twitter and Medium for more updates!", "responses": "11"}, {"title": "How to generate Ethereum ERC-20 compatible wallet\u00a0address", "author_name": "Invest in Brokers", "link": "https://medium.com/@investinbrokers/how-to-generate-ethereum-erc-20-compatible-wallet-address-89b039f012b6?source=search_post", "post_date": "Mar 22, 2018", "readtime": "3 min read", "upvotes": "1.3K", "content": "How to generate Ethereum ERC-20 compatible wallet\u00a0addressInvest in BrokersBlockedUnblockFollowFollowingMar 22, 2018You are going to be asked for a unique wallet address in your dashboard in order to receive your INV tokens.We strongly recommend using MyEtherWallet but other native Ethereum wallets are also acceptable as long as they are compatible with ERC-20. This includes Mist, Metamask or imToken.It is not recommended to send your INV tokens directly to your exchange because they could get lost and we will not be able to get them back.1. Go to MyEtherWallet.com and choose \u201cNew wallet\u201d.2. Enter a new password. Make sure you remember it.3. Click on \u201cCreate new wallet\u201d.4. Save your \u201cKeystore\u201d file and keep it safe on your PC.\u00a05. Proceed to \u201cI understand. Continue\u201d.6. Print out your \u201cPrivate key\u201d. You may also write it down on a piece of paper, save it on your USB stick or on your hard drive.7. Next, follow instructions to unlock your wallet. You will see your address. Additionally, you can click \u201cSend Ether & Tokens\u201d in order to unlock it.8. Scroll down in order to find your personal \u201cAccount address\u201d. It\u2019s a long sequence of numbers and letters that you will need to copy and paste into your dashboard in the next step.9. Proceed to your dashboard. Enter your copied Account address.10. You must add the INV token details in \u201cSend Ether & Tokens\u201d, in \u201cToken Balances\u201d section. This way you will see your INV tokens in MyEtherWallet.11. Click on \u201cAdd custom token\u201d. Enter the following:\u00a0Contract address: Will be given soon\u00a0Token symbol: INV\u00a0Decimals: 18Tokens will be distributed to your wallet after KYC approval.Join us in our exciting\u00a0project!Official Communication:Check our website: https://investinbrokers.comCheck our whitepaper: https://investinbrokers.com/whitepaper.pdfWhitelist registration: https://platform.investinbrokers.com/registerTwitter: https://twitter.com/InvestInBrokersTelegram: https://t.me/investinbrokersFacebook: https://www.facebook.com/investinbrokers/Bitcointalk: https://bitcointalk.org/index.php?topic=3072564Bounty: https://bitcointalk.org/index.php?topic=3072574Telegram Airdrop: https://bitcointalk.org/index.php?topic=3077045", "responses": "2"}, {"title": "Ethereum Sharding: Overview and\u00a0Finality", "author_name": "Hsiao-Wei Wang", "link": "https://medium.com/@icebearhww/ethereum-sharding-and-finality-65248951f649?source=search_post", "post_date": "Dec 26, 2017", "readtime": "9 min read", "upvotes": "2.8K", "content": "Ethereum Sharding: Overview and\u00a0FinalityHsiao-Wei WangBlockedUnblockFollowFollowingDec 26, 2017In Ethereum Casper 101 [1], Jon Choi gave a great clear overview of Casper and why explicit finality can be beneficial to scalability. The aim of this article is to give an overview of Ethereum sharding design and explain how explicit finality helps for blockchain sharding.To fully understand the specification of Ethereum sharding mechanism proposal, I highly recommend digging in sharding doc [2] by Vitalik.", "responses": "12"}, {"title": "Ethereum Will Eventually Achieve 1 Million Transactions Per\u00a0Second", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereum-will-eventually-achieve-1-million-transactions-per-second-dbdfc84772c7?source=search_post", "post_date": "Jun 2, 2018", "readtime": "3 min read", "upvotes": "3K", "content": "Ethereum Will Eventually Achieve 1 Million Transactions Per\u00a0SecondMichael K. SpencerBlockedUnblockFollowFollowingJun 2, 2018ForbesVitalik Buterin made some pretty awesome promises recently:With second-layer solutions such as Sharding and Plasma, the Ethereum network will eventually be able to process 1 million transactions per second and potentially more than 100 million transactions per\u00a0second.Vitalik Buterin, the creator of Ethereum, speaking in a recent OmiseGO AMA session, is giving his assurances in how he sees the dApp platforms will solve their scalability issues.In the past, whether at conferences or in presentations, Buterin emphasized that the Ethereum blockchain protocol and decentralized blockchain networks, in general, are struggling to deal with scalability issues. That\u2019s so 2017, now in 2018 with MainNet launches of EOS and Tron in process, and Ethereum making significant progress with sharding, it seems the creator of Ethereum, is seeing light at the end of the tunnel.Can Sharding and Plasma Give Ethereum Warp Speed Transactions Per\u00a0Second?In September 2017, during an interview with venture capital investor Naval Ravikant at the Disrupt SF 2017 conference hosted by TechCrunch, Buterin noted that bitcoin and Ethereum have been processing three to six transactions per second at peak capacity.While I\u2019ve written about sharding before, Plasma, a system of smart contracts that seeks to increase the computational potential of the world\u2019s second-largest blockchain can help overcome the bottleneck.According to Coinbase, Plasma was created by Buterin and Bitcoin Lightning Network co-creator Joseph Poon last year, the scaling solution is one of many under development that aims to boost the capacity of ethereum, specifically working by creating a layer of smart contracts that can interact with the main blockchain.When Ethereum Will Overtake Visa in Transaction Frequency?We know that for the blockchain to support large-scale payment networks such as Visa, stock markets like Nasdaq, and Internet of Things (IoT) networks, it will have to process hundreds of thousands of transactions per second.There is a specific point of his interview at TechCrunch Disrupt, that addresses this from the perspective of Ethereum vs. Visa.If you jump to 10 minutes and 45 seconds of this video, you will hear the relative comparisons and why Ethereum\u2019s work on Sharding and Plasma are so key. I do not think I\u2019ve ever watched a blockchain related YouTube clip as much as the above one, since I\u2019m fairly curious about the future of decentralized networks.Transaction Frequency Per\u00a0SecondEthereum has been doing five per second and if it goes above six, then it is also at peak capacity. On the other hand, Uber on average does 12 rides per second, PayPal several hundred, Visa several thousand, major stock exchanges tens of thousands, and in IoT, you\u2019re talking hundreds of thousands per second.Ethereum 2017: 5 per secondUber: 12 rides per secondPaypal: 100s per secondVisa: 1000s per secondStock Exchanges: 10,000s per secondIoT: 100,000s per secondNow if you are curious about Plasma, you can read this introduction. The fact that Vitalik Buterin, maybe the most recognizable face in cryptocurrencies is saying this now means Sharding and Plasma really could be the answer, or at least Ethereum is making strides on the problem. It may need significant progress to compete with newer dApp platforms that could have an edge in this regard such as EOS, Cardano, NEO and Tron. In the race for this speculative Blockchain 3.0 era, it\u2019s super interesting to watch Ethereum, as Bitcoin\u2019s price however volatile as a store of value, is more symbolic than representative of the innovative tech and value system that Ethereum on the other hand represents.It\u2019s no mistake that Vitalik Buterin often mentions \u201cdecentralization\u201d, it\u2019s at the heart of how GenZ and young Millennials want the future to be.", "responses": "16"}, {"title": "How To: Create Your Own Private Ethereum Blockchain", "author_name": "Mercury Protocol", "link": "https://medium.com/mercuryprotocol/how-to-create-your-own-private-ethereum-blockchain-dad6af82fc9f?source=search_post", "post_date": "Dec 8, 2017", "readtime": "5 min read", "upvotes": "2.3K", "content": "How To: Create Your Own Private Ethereum BlockchainMercury ProtocolBlockedUnblockFollowFollowingDec 8, 2017Dev highlights of this\u00a0weekReleasing a Dust Server update today to include client local time zone based login rewardsAndroid and iOS client updates are currently in QA and will release next week including promoted blasts now marked as \u201cpromoted\u201d, legacy Dusters will now get rewards, and other performance enhancements and bug fixes.Designing analytics of rewards in preparation for switching to mainnetDeveloping method of paying Ethereum gas costs with an ERC-20 tokenResearching different mechanisms for storing content on the blockchain", "responses": "10"}, {"title": "Ethereum will be the next Facebook\u200a\u2014\u200aA Fundamental Analysis", "author_name": "Katalyse.io", "link": "https://medium.com/the-mission/ethereum-will-be-the-next-facebook-a-fundamental-analysis-40bd95fde2a4?source=search_post", "post_date": "Dec 27, 2017", "readtime": "4 min read", "upvotes": "1.7K", "content": "Ethereum will be the next Facebook\u200a\u2014\u200aA Fundamental AnalysisKatalyse.ioBlockedUnblockFollowFollowingDec 27, 20172017 has been an amazing year for Ethereum. Prices has hit an all time high of $800, and it is now the processing nearly double the number of transactions of bitcoin at a million a day.As we enter 2018, I think Ethereum will be the next Facebook due to the massive amount of use cases that i am finding in major industries that benefit greatly from decentralization & transparency.Ethereum is basically the app store for blockchain. It allows creators to build and run apps without having to worry about the underlying \u201coperating\u201d system just like Apple.Here are some of the areas to look out for:Fundraising and ICOsICOs are the largest real world use case for ethereum. Traditionally, to fund your idea, you would have to borrow money from a bank, give up a lot of equity to a VC, or get an expensive loan from people lending sites. Basically, ICOs is a kickstarter on steroids.As the founder of fundyourselfnow.com, I have worked with entrepreneurs all over the world on their product to get it ready for their ICOs. Many come from developing nations such as Indonesia (EagleCoin) and India (WandX) where it would have been extremely hard to raise significant funding for their idea due to lack of local investors.ICOs are democratizing funding and spawning the next wave of innovation from young hungry entrepreneurs all over the world who will eventually contribute back to their local communities for a better future.Payments & LendingCurrently, the crypto-currencies are quite hard to spend. Crypto credit card companies such as TenX, Monaco, Tokencard are stepping in to fill in the gap. All of them are built on the ethereum network. I personally hold a TenX Card and have used it to spend on daily goods and services using bitcoin.Monaco in particular, has gotten official approval from VISA to issue cards to Singapore residents. Expect to see a huge increase in actual cryptocurrency spending & adoption 2018 as many of these crypto-card companies get official approval from VISA or MasterCard.There has also been a rise of ethereum based lending solutions, such as SALT lending and ETHLend. The interest rates are expected to be fairer than getting from a bank, and people globally can gain access to financing even without a bank account.I expect that 2018 will be the year where we will help lot of the unbanked get included in this new digital world.GamblingThe gambling industry is ripe for disruption. 2017 started off with a very simple dice game, etheroll. You send ether to a smart contract and winnings are sent to you in a matter of minutes. Etheroll has over 260,000 ethers wagered so far (Around 2000m USD), which is incredible considering how simple and basic the game is.Keep an eye out on Edgeless and Funfair in 2018 as one of them could potentially grow to become the largest online global casino. They have significant advantages over traditional real world casinos:There is no capital controlsAnonymous, money doesn\u2019t flow through the banking systemTrustless smart contract to process payouts and ensure fairness of game.GamingThe virtual nature of gaming lends itself incredibly well for the blockchain. Many successful gaming companies have started to include tokens in their games/product to fund their gaming ecosystem.Here are some of the interesting ways tokens are used (not exhaustive):Decentraland\u200a\u2014\u200aBuy Land in their virtual world. Virtual worlds has been around since 2003 with Second Life and Ethereum might be the fuel that makes it finally takes offEngin Coin\u200a\u2014\u200aUsed to create virtual goods that people that can on their marketplace. Instead of using \u201cgold\u201d in most games, expect games in 2018 to require you to use their own Ethereum game token to make & trade items.CryptoKitties\u200a\u2014\u200aTokens represents a digital cat in the blockchain. Over 17m worth of cats were transacted since they launched early Dec\u00a0, with the most expensive cat sold for more than 100k USD.What more interesting is that with the use of Ethereum tokens for games, this could potentially mean that you could eventually trade items across games. For example, you can trade an Enjin Coin Item for land in decentraland through decentralized exchanges using the ENJ/MANA trade pair. Virtual worlds economies which are currently \u201csilo-ed\u201d could potentially change with the ability to \u201ctrade\u201d across worlds.Final WordsI see the money flowing into Ethereum and the overall cryptocurrency market as a positive. The technology underpinning Ethereum has a lot of real world usage that has yet to be unlocked and money is being funneled into innovative ethereum projects via ICOs at an incredible rate.Mark Zuckerburg started facebook at the young age of 20 about 13 years ago, and it has completed changed the way we interact with our friends and family.Vitalik, founder of Ethereum, started Ethereum also at the young age of 20 too about 3 years ago. I strongly believe that within the next 10 years, Ethereum will radically change the we interact with our world.Happy New Year to everyone!Keen to find out more about FundYourselfNow? Join our crowdfunding revolution conversation on our Telegram group, or follow us on Twitter.", "responses": "3"}, {"title": "Tools and Technologies in the Ethereum Ecosystem", "author_name": "Mahesh Murthy", "link": "https://medium.com/blockchannel/tools-and-technologies-in-the-ethereum-ecosystem-e5b7e5060eb9?source=search_post", "post_date": "Mar 20, 2017", "readtime": "6 min read", "upvotes": "1.3K", "content": "Tools and Technologies in the Ethereum EcosystemMahesh MurthyBlockedUnblockFollowFollowingMar 20, 2017If you are a developer new to Ethereum/blockchain, it is possible you are overwhelmed (at least I was) trying to understand all the tools and technologies in the Ethereum ecosystem. So I decided to briefly describe the various components you come across frequently while starting to learn Ethereum. Hopefully this will help you get a big picture of the Ethereum ecosystem and how all the pieces fit together.1. EthereumEthereum is a smart contract blockchain on which you can build decentralized applications (called smart contracts). If you are a technologist, this white paper is worth reading: https://github.com/ethereum/wiki/wiki/White-Paper.If you have built web applications before, I wrote a post comparing Ethereum blockchain and web application architecture which might help understand Ethereum at a high level.2. GethGeth is the official client software provided by the Ethereum Foundation. It is written in the Go programming language. This software packages a few components which is worth understanding:Client DaemonWhen you start this client daemon, it connects to other clients (also called nodes) in the network and downloads a copy of the blockchain. It will constantly communicate with other nodes to keep it\u2019s copy of the blockchain up to date. It also has the ability to mine blocks and add transactions to the blockchain, validate the transactions in the block and also execute the transactions. It also acts as a server by exposing APIs you can interact with through RPC.2. geth consoleThis is a command line tool which lets you connect to your running node and perform various actions like create and manage accounts, query the blockchain, sign and submit transactions to the blockchain and so on.3. Mist BrowserThis is a desktop application used to communicate with your node. Anything you can do using the geth console can be accomplished through this Graphical User Interface.3. ParityParity is another good implementation of the Ethereum protocol and is written in the Rust programming language. It is an unofficial client and is maintained by a company called Parity Inc. Any one can implement the client software and join the Ethereum network. You can follow the specs in this yellow paper to implement your own client!4. Web3.jsJust like you have geth, mist browser and so on to communicate with the ethereum node, there is also a javascript library called Web3.js which can be used to interact with a node. Since it is a javascript library, you can use it to build web based dapps.5. SoliditySolidity is the most popular programming language used to write smart contracts to run on the Ethereum blockchain. It is a high level language which when compiled gets converted to EVM (Ethereum Virtual Machine) byte code. This is very similar to the world of Java where there are JVM languages like Scala, Groovy, Clojure, JRuby etc. All these on compilation generate byte code which run in the JVM (Java Virtual Machine). You can also create a language like Solidity as long as you follow the specs and your language compiles down to the valid EVM byte code!There is a also very nice browser based IDE where you can write contracts, compile and deploy to the blockchain here: http://remix.ethereum.org/6. Truffle/EmbarkJust like you have frameworks for web application development such as Ruby on Rails, Python/Django etc, Truffle and Embark are the two most popular frameworks used to develop dapps. They abstract away lot of the complexities of compiling and deploying your contract on the blockchain.If you are new to Ethereum dapp development, I wrote a series of guided tutorials to get started here, here and here.7. MetamaskIf you hang out in the Ethereum community for more than a week, you will inevitably come across Metamask. As of this writing, it is a chrome plugin used to interact with the Ethereum node. It is unrealistic for everyone in the world to run a node to interact with the blockchain. So, the folks at Metamask host a number of nodes so you don\u2019t have to. All you have to do is install Metamask and it automatically connects to their nodes.8. ENSEthereum Naming System is the DNS for the Ethereum world. Just like you map an IP address to a human readable name, you can map any Ethereum contract or wallet address to a human readable name.Ex: 146.115.22.177 \u2192 google.com. Instead of typing the ip address in your browser, you type google.com which resolves to that IP addressEx: 0x80C013d980aB049471c88E1603b8b4a60E03295C is my wallet address. If you are in the mood to send me some Ether, you don\u2019t have to memorize this address. Once ENS launches, I will probably map it to mvmurthy.eth and you can use that to send me money easily\u00a0:).9. SwarmThe blockchain is good to store small amounts of data. What if you want to store a patient record, a sale deed or some large file which needs to be publicly timestamped? It is expensive and also not scalable to store a blob in the blockchain. Swarm is used to solve this problem. Swarm is a decentralized content storage and distribution service. You can think of it as a CDN but instead of the entire CDN hosted on one company\u2019s servers, it is distributed on computers across the internet. Just like you run an Ethereum node, you run a swarm node to connect to the swarm network.When you deploy an Ethereum contract on to the blockchain, you get a deployed address and JSON interface of the ABI (The contract interface similar to API). When you want someone to use your contract, you have to give them the deployed address and the ABI. In the future, the ABI will be stored on Swarm so anyone can look up the ABI just by looking at the Ethereum address.10. IPFSIPFS (Inter Planetary File System) is conceptually exactly similar to Swarm. It is a decentralized storage system. It is not related to Ethereum directly but can be integrated with Ethereum.You can read about the differences between Swarm and IPFS here: https://github.com/ethersphere/go-ethereum/wiki/IPFS-&-SWARM11. WhisperYou don\u2019t hear a lot about Whisper but is an interesting technology in the Ethereum ecosystem. It is a communication protocol for Dapps to interact with one another. You can read more about it here: https://github.com/ethereum/wiki/wiki/WhisperBelow is an attempt to put all the pieces together:Hope this helps you get a 10,000 foot view of the Ethereum ecosystem and can now delve into each component and understand it better.If you are interested in learning more about Ethereum development, you can sign up here.", "responses": "15"}, {"title": "The Flippening: Ethereum vs.\u00a0Bitcoin", "author_name": "Kenny Li", "link": "https://hackernoon.com/the-flippening-ethereum-vs-bitcoin-2ac80a953ebb?source=search_post", "post_date": "Feb 5, 2018", "readtime": "7 min read", "upvotes": "2.5K", "content": "The Flippening: Ethereum vs.\u00a0BitcoinKenny LiBlockedUnblockFollowFollowingFeb 5, 2018If you\u2019ve been in the cryptocurrency space for more than a month, chances are you\u2019ve come across the term Flippening. As silly as it may be to pronounce, the term refers to the foretold event in the possible future that Bitcoin will be dethroned by another cryptocurrency. One of the major contenders for the championship belt has been Ethereum. In the current midst of the ongoing Bitcoin Crash, this legend is inching toward a possible reality.A couple of weeks ago, I published an article about the 9 Rules of Crypto Trading that focused on rules that Miles follows. He\u2019s one of the founders of Pure Investments, which is a Discord community that focus on cryptocurrency signals. Recently, he published a video on the official Pure Investments YouTube Channel regarding Ethereum and the Flippening.Take a look at the full Ethereum video posted by Miles from Pure InvestmentsMiles is a strong believer in the Flippening. While Bitcoin sustains its current dominance, Miles believes that Ethereum\u2019s strong value proposition will eventually outshine the current champion\u200a\u2014\u200awith strong reason. One of the major points that Miles argues is the \u201cFirst to Market Dominance\u201d claim with Bitcoin. Analogously, we have seen empires like Best Buy and BlockBuster crippled by innovative competition from the likes of Amazon and NetFlix. Apart from this, Miles also argues that\u2026Blockbuster: Rent 6, get 1 free; NetFlix: Get all you want for $10/month.\u201cMining Ethereum blocks takes about 14 seconds per confirmation compared to Bitcoin\u2019s 10 minutes.\u201dBitcoin, which is a behemoth that is becoming very comfortable on its throne, cannot offer the blockchain confirmation speed (well, arguably it can in the future with Lightning Network) of Ethereum. If you\u2019ve tried to send Bitcoin during a market correction, you\u2019ll know how much each second counts; in fact, Bitcoin Cash, a direct competitor to Bitcoin, has even been accused of exploiting Bitcoin\u2019s confirmation weakness in the past to congest the blockchain (look up the conspiracy Operation Dragon Slayer).Slower block confirmations on Bitcoin mean longer wait\u00a0times.\u201cThe majority of coins on Coin Market Cap are actually Ethereum-based tokens.\u201cBitcoin also does not have smart contract capability, which is what gave Ethereum many more use cases beyond transactional value. It is the foundation of the majority of past and current ICOs in today\u2019s cryptocurrency market.\u201cEthereum\u2019s transaction costs are fractions of what Bitcoin\u2019s transactions cost.\u201dBitcoin\u2019s notorious transaction fees, which are partly attributed to its scalability issue (which goes back to blockchain confirmation congestion), have been reported to hit an average of $28 per transaction mid December. This makes micro-transacting a losing game. Coffee shops can\u2019t take Bitcoin purchases for $2 coffee if the user will end up paying $30 including transaction fees. Again, the Bitcoin community is actively working to solve this issue with the Lightning Network.Network fees are Bitcoin and Ethereum\u2019s way of doing ATM\u00a0fees.\u201cA lot of my friends, if they\u2019re wanting to send Bitcoin quickly to another exchange, they\u2019ll actually trade their Bitcoin for Ethereum to send it over quickly and cheaply and convert it back to Bitcoin.\u201dThis is a common practice for users going through Coinbase/GDAX, which is a gatekeeper for a majority of US investors. While Litecoin (and now Bitcoin Cash) is an alternative option, the added benefit of transferring Ethereum is the fact that many exchanges have Ethereum marketplaces, too. This means that as soon as the Ethereum enters an exchange like Bittrex or Binance, a user can start trading it for coins that he or she wants.\u201cThe upcoming Casper update, which introduces Proof of Stake, is going to be very revolutionary for Ethereum\u2026\u201dProof of Stake is the new way of mining. In a nutshell, Proof of Stake lets you mine a coin by simply holding on to the coin. This means that, if you hold Ethereum, you will be \u201cmining\u201d more Ethereum, without having to actually set up a mining rig, buy expensive graphics cards, and consume electricity, which is the current way of mining, called Proof of Work. Apart from how expensive Proof of Work can be, it is harmful for the environment, too. Bitcoin\u2019s mining power, which still uses Proof of Work, is estimated to consume about as much electricity as Ireland.\u201c\u00a0\u2026and send the price through the\u00a0roof.\u201dYou can mine by simply holding Ethereum, so why not buy more Ethereum and hold it? With this logic, the price of Ethereum is expected to increase as sellers are more incentivized to hold their Ethereum.\u201cSpeaking of updates for Ethereum\u2026 the zk-SNARK update\u2026 is a major improvement for the security of Ethereum.\u201dThis adds privacy to transactions on the Ethereum blockchain. Privacy coins have been a big trend in the market recently, and we\u2019ve seen the market\u2019s interest through coins that have mooned like Verge (XVG), which has grown by almost 4,000x since 2016.\u201c[Ethereum\u2019s] core development team is very healthy.\u201dFunny, because while I wouldn\u2019t picture Vitalik as the figure of pristine human health, it is true that Ethereum\u2019s core development team is much more active and responsive than the Bitcoin team. In fact, we don\u2019t even know who Satoshi Nakamoto, the creator(s) of Bitcoin, is. The name is a pseudonym, and it could be a person, organization, government, or AI? While this may sound cool and mysterious, it also means we don\u2019t know the true intentions of Bitcoin apart from its whitepaper, which may be an issue.FitVitalik is a humor-minded ICO that is aimed at turning Vitalik into the next Statue of\u00a0David.\u201cThe crazy amount of forks [on Bitcoin]\u2026\u201dForks are clones of a current code-base that is modified with a different vision. Let\u2019s face it\u200a\u2014\u200athis happens because people don\u2019t agree. With Ethereum, we see the current version as a fork of Ethereum Classic, which was a fork to strengthen security against future attacks similar to the DAO. By contrast, the Bitcoin community has attempted/executed forks including\u2026 Bitcoin Cash, Bitcoin Gold, Bitcoin Diamond, and SegWit2x. The community is not unified.Bitcoin forks are like cellular mutations. Is this cow really the future of cryptocurrency?The Flippening: To Happen or Not to\u00a0Happen?Despite the features and value proposition of Ethereum that arguably make it superior to Bitcoin, the cryptocurrency community is well-aware of the financial forces that are entering the market. With futures trading from CME and CBOE, a large influx of institutional investors are starting to keep a keen eye on Bitcoin as well as other cryptocurrencies. Meanwhile, if you are keen to keep up-to-date on the flippening, take a look at a website dedicated to it: http://www.flippening.watch/What do you think? Will the flippening happen, or will Bitcoin continue to hold the championship belt? Feel free to post your opinions/discussion in the comments below, or talk with us in the Pure Investments community:Discord - Free voice and text chat for gamersStep up your game with a modern voice & text chat app. Crystal clear voice, multiple server and channel support, mobile\u2026discord.gg", "responses": "14"}, {"title": "ERC standards to move Ethereum forward? ERC-20, ERC-223,\u00a0ERC-721.", "author_name": "Lukas K", "link": "https://medium.com/wepower/erc-standards-to-move-ethereum-forward-erc-20-erc-223-erc-721-e1712456449d?source=search_post", "post_date": "Dec 19, 2017", "readtime": "5 min read", "upvotes": "2.2K", "content": "ERC standards to move Ethereum forward? ERC-20, ERC-223,\u00a0ERC-721.Lukas KBlockedUnblockFollowFollowingDec 19, 2017ERC-20 is a well-known term in the Ethereum and ICO community.For the last few years, I\u2019ve been consulting and contributing to various teams, helping them with token sale projects. Therefore, I had an opportunity to take a closer look at ERC standards, analyse and compare them.The information below should be valuable for every investor and ICO entrepreneur to understand what is hiding behind ERC standards.What does ERC\u00a0mean?ERC stands for Ethereum Request for Comments. An ERC is authored by Ethereum community developers in the form of a memorandum describing methods, behaviors, research, or innovations applicable to the working of the Ethereum ecosystem. It is submitted either for peer review or simply to convey new concepts or information. After core developers and community approval, the proposal becomes a standard.Therefore, as a result, we have a set of standards or proposals (e.g. for tokens). Actually, these rules are simple set of functions that Smart Contract should implement. In return, contracts, implementing the standard can be used via a single interface. The best example is ERC-20 standard. All Smart Contracts implementing this standard, by default can be listed to crypto exchanges without any extra technical work.ERC-20It is the most common and well-known standard within all crypto community. 99% (if not all) issued ICO tokens on top of the Ethereum implements this standard. Actually, it is just a simple set of functions that your token code has to have. For those who can read the code, the contract below is very simple to understand.contract ERC20 {  function transfer(address _to, uint256 _amount) returns (bool success);  function transferFrom(address _from, address _to, uint256 _amount) returns (bool success);  function balanceOf(address _owner) constant returns (uint256 balance);  function approve(address _spender, uint256 _amount) returns (bool success);  function allowance(address _owner, address _spender) constant returns (uint256 remaining);  function totalSupply() constant returns (uint);}The key benefit we get here, is that any application or other smart contract can interact with a token in a standard manner without a need of knowing other details about the token.Therefore, we have a very pleasant way to create any ICO token and have a standard way to interact with all of them like they are all the same. For instance, crypto wallet developers can avoid custom development and integrations to add new tokens. All they need to know is the Ethereum Token address that implements the standard.ERC-223This proposal was introduced by a developer, who decided to solve issues with current ERC-20 standard for tokens. Below I excluded main features of this proposed standard.Advantages:Provides the possibility of avoiding accidentally lost tokens inside contracts that are not designed to work with sent tokens. However, these accidental transfers, which are uncommon already, will probably become more uncommon with ENS in the future.ERC-223 transfer to contracts consumes less gas than ERC-20.Disadvantages and risks:ERC-223 is a proposal right now, not a standard. Therefore, there are none of the high-profile ICO tokens deployed with this standard. Also it is not yet implemented in any production tokens that I found from my research.Exchanges might need to do some modifications in order to support such token. There is options that some of the exchanges might not be prepared for it yet.http://cryptocurry.com/In my opinion, the benefits that this standard brings are not that high compared to risks of using unofficial token interface, which is not yet accepted by Ethereum foundation and is not a standard.ERC-721The goal of this proposal, is to create a non-fungible token. In ERC-20 and ERC-223 standards we have a supply of tokens, where tokens are fungible (i.e. single unit of that token is equal to another unit). This makes it easy to trade those tokens, as all of the token supply can be treated in the same manner.However, there are various cases when you need to have unidentical tokens, which are used within the platform, and add some extra parameters and price them differently. For instance, we could have a token which represents some part of real estate object, and each token might have some different parameters added to it. Or in WePower case, tokenised electricity tokens cannot be treated the same, as each of it might represent different time frame, amount or even type of energy (solar, wind, hydro).WePower Token\u00a0exampleSuch standard would make it easy to create marketplaces for multiple non-fungible token types.It is just a proposal yet, but hopefully someday Ethereum foundation will accept this standard and include it to the list.Other ERC standardsThere are many more proposals that should make the whole standardisation for Ethereum community better. It will just take time to agree and approve standards and adopt it to actually be used as it is with ERC-20.", "responses": "8"}, {"title": "Ethereum Payment Channel in 50 Lines of\u00a0Code", "author_name": "Matthew Di Ferrante", "link": "https://medium.com/@matthewdif/ethereum-payment-channel-in-50-lines-of-code-a94fad2704bc?source=search_post", "post_date": "Jun 5, 2017", "readtime": "4 min read", "upvotes": "1.3K", "content": "Ethereum Payment Channel in 50 Lines of\u00a0CodeMatthew Di FerranteBlockedUnblockFollowFollowingJun 5, 2017With the talk of state/payment channels being a \u201cfuture\u201d scalability option in Ethereum, I wanted to write a contract to show that they\u2019re more than doable now. You don\u2019t need to wait for Raiden, you can set up your own trustless channels right now.I\u2019ll walk through the solidity code in channel.sol here: https://github.com/mattdf/payment-channelLet\u2019s say Alice and Bob want to set up a payment channel for something that requires micropayments that they don\u2019t want to commit on chain to save on transaction fees. In this case, Bob may be paying Alice to manage a social media presence, and he pays her 0.001 ETH per tweet(24 cents)\u200a\u2014\u200aif Bob were to make an on-chain transaction for each tweet, 20% of Alice\u2019s income would be eaten up by fees.On one hand, Alice does not want to do 100 tweets of work and trust Bob will pay her at the end for all 100 tweets, and on the other hand, Bob doesn\u2019t want to pay Alice for 100 tweets all at once for her to just disappear and not do any work.We can solve this with a payment channel where Bob commits 100*0.001 = 0.1 ETH to the channel smart contract, where the money can only either go to Alice or back to Bob. We see the constructor here:Bob sends 0.1 ETH when creating the contract, and sets a timeout of 1 day, assuming the work will be done by then, or he can cancel the payment channel and return the funds to himself.Alice now sees that through the payment channel the funds are locked and begins tweeting. For each tweet, Bob signs a hash of (contract_address, value) with the private key he used to set up the channel, and sends it to Alice. So for the first tweet Bob signs (0x123\u2026, 0.001 ETH), for the second (0x123, 0.002 ETH), etc\u2026Each time Alice receives this, she also signs it but she does not send it to the blockchain. At any moment if Alice decides she has received enough and no longer needs to tweet, she can submit the multi-signed (by both Bob and Alice) message to the smart contract and the smart contract will send the agreed upon value to Alice (say, 0.05 ETH) and send the rest back to Bob.The function Alice can call to terminate the channel. Seeing as it requires both signatures, Bob cannot single-handedly close it and cheat Alice out of work she\u2019s already\u00a0done.Because the function requires both signatures to successfully execute, neither Bob or Alice can run it without submitting a value they both signed (and hence agreed to).If Alice is malicious and wants to extort Bob once he\u2019s locked his funds, by not doing any work and saying she\u2019ll only sign a tx that sends her half the money\u200a\u2014\u200athe timeout protects Bob in this scenario. He can simply wait for the day to end and he can call ChannelTimeout, which destroys the contracts and returns all funds back to him.Timeout function to protect Bob from being\u00a0extortedAlso, because Bob never has Alice\u2019s signatures until they\u2019re submitted to the blockchain, he cannot close the channel in a way that cheats Alice out of money. If Alice sees Bob stops paying her, she can simply close the channel, receive her funds, and be done with it. This way, at most, Alice is only at risk of not being paid for 1 tweet\u200a\u2014\u200aor losing out 24 cents. Neither party is at risk of more than 24 cents of loss, compared to 20 dollars in the non-payment channel example. They also both massively save in tx fees!That\u2019s it! This contract is enough for a payment channel between two individuals. Raiden and more complex setups enable multi-party channels that can be linked together, but you don\u2019t need to wait for that if you just want to use the simplest case now. Ethereum is already scalable with payment channels far more than Bitcoin, because it does not have tx malleability problems.", "responses": "24"}, {"title": "Different Approaches to Ethereum Identity Standards", "author_name": "Pelle Braendgaard", "link": "https://medium.com/uport/different-approaches-to-ethereum-identity-standards-a09488347c87?source=search_post", "post_date": "Jan 24, 2018", "readtime": "10 min read", "upvotes": "2.5K", "content": "Different Approaches to Ethereum Identity StandardsPelle BraendgaardBlockedUnblockFollowFollowingJan 24, 2018Identity as a concept affects all of us. Yet, depending on who you ask, there are many different ideas of what Identity is as a technology.For governments, Identity is a mechanism for taxing citizens and providing them benefits. In the case of large companies, they need to provide access control to their offices and systems for managing their employees and customers. For web 2.0 companies, Identity exists in the form of Facebook Connect, Google Login, or your good old email address.For fintech companies Identity is all about KYC. Ethereum dApps might just want to know your Ethereum address. For NGOs it\u2019s about providing Identities to refugees and others without valid forms of identification.And finally, we have Identity Standards activists who are extremely adamant that users take control of their own identity so that none of these other entities have ownership over it.As a result of trying to unify all of these different world views, proposed Identity Standards often have difficulties talking in terms that actually make sense to the people they will impact. You hear terms like Claims, Attestations, Credentials, Certificates, Directories, Registries, Identifiers, etc. all purporting to reflect a specific understanding of some Identity aspect.There have been many different attempts at creating open Identity standards:The ITU\u2019s attempt at the horrific x500 family of standards of which x509 is thankfully the only remaining (yet rapidly dying) traceOpenID was the first attempt at an open web-based standard allowing users to take control of their own identity. It is mostly used for enterprise login systems today.At uPort, we are part of the Decentralized Identity Foundation, where we are trying to learn from previous attempts and create a simple, unifying standard capable of supporting many different blockchain and non-blockchain technologies.Core Identity\u00a0ConceptsAlmost all Identity Standards support a few basic concepts:An identity has some sort of unique identifierParties (sometimes including the identity themselves) can make claims about an identity. Claims are basically attributes, such as a name, address, email, etc. The reason the identity world calls these \u2018claims\u2019 is that they are not necessarily treated as facts unless you trust who makes the claim.There is some way of asking a user for their identity.There is some way of looking up claims about an identity.ERC 725: a Proposed Ethereum Identity\u00a0StandardMost recently, Fabian Vogelsteller proposed a standard ERC 725 for managing Identity for users on Ethereum. It consists of the following parts:An Identity is identified by the address of an Ethereum Smart Contract implementing ERC 725An integrated key management schemeA proxy contract interface, for interacting on the Ethereum blockchain using the IdentityA claims registry for the given identity allowing any key pair-based account to make claims publicly on the blockchain about the identityA way of looking up claims in that registry (actually defined in ERC 735)Proposal to build up a standard Ethereum taxonomy of claim typesThe ERC 725 simply specifies an interface, just like the ERC 20 Token standard did before it. Thus people can implement them as they wish. This design decision has a bunch of implications on security and upgradeability, which we will discuss in this article.One important concept and a major difference to note about uPort is that each Identity manages all the above in a single, monolithic smart contract instance owned by the Identity holder.Other InitiativesuPort: an open Identity platform built on\u00a0EthereumuPort consists of a combination of Ethereum Smart Contracts, some which are shared and some specifically owned by the Identity owner, including:An Identity is identified by an MNID encoded Ethereum address. MNID includes the Ethereum network ID and a checksum, making it safer to use in a world where users regularly transition between Mainnet, multiple test networks, and private chainsA very simple optional proxy contract designed to live permanently with key recovery and management delegated to an upgradable Identity Manager contractOne or more shared registry contracts for storing public claims on chain (we\u2019ve recently proposed ERC-780)A decentralized PKI (Public Key Infrastructure) system allowing identities to share and verify signed data privately off the blockchain, but verified via the above registry contractsA JWT-based messaging standard built on top of the above PKI systemStandard methods and flows for requesting private dataStandard formats for signing private off chain claims about uPort identitiesImplementation of the proposed DID (Decentralized IDentifier) standard from the W3C Credentials Community Group and the Decentralized Identity Foundation.Views claim types as opaque, such that any new or existing claims taxonomy can be used, eg. W3C Verifiable ClaimsuPort has individual smart contracts for individuals, but is not a monolithic standard. It consists of a combination of smart contracts owned by the user and shared contracts for efficiency and safety\u2019s sake.Decentralized Identity FoundationThe Decentralized Identity Foundation (DIF) was created by uPort, Microsoft, Blockstack, Sovrin, and others to establish a very simple, common framework for making claims about identities using different kinds of decentralized technologies.With the rise of blockchain technology, there has been exponential growth in the different number of blockchains in existence, with Ethereum and Bitcoin establishing the most traction thus far. Additionally, there are also several non-blockchain, decentralized platforms, such as IPFS and SWARM.Since DIF was created to support interoperability between completely different types of implementations, it only has to concern itself with a very narrow layer.Any identity is represented by it\u2019s DID (Decentralized IDentifier) consisting of did:[method]:[method specific identifier]eg did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqXEach DID has a DID document which contains its public keys, any public claims made by the Identity, and optional endpoints that can be used for interacting with the Identity.A resolver is implemented to lookup the DID document for a given DID using the specific methods underlying that technology. For uPort, for example, this looks up an IPFS hash in the claims registry, which is used to look up the document on IPFS.W3C Verifiable ClaimsWhere the DIF is working on a high-level definition of what a Decentralized Identity is and how to interact with it, the W3C has been working on standards for different kinds of claims about an Identity.Any Ethereum address should be able to be an\u00a0IdentityAs a whole these standards are fairly similar to the on-chain aspects of what we have in uPort. One main difference however is that with uPort any Ethereum address is basically a uPort identity.With uPort, there is no need to implement a special interface, since regular key pair-based accounts are just as valid as smart contract-based uPort Identities.This is particularly important as deploying smart contracts involves serious costs. The costs may be fine in the beginning, but if we also want these standards to work for IOT, where there could potentially be millions of devices needing to make and receive claims about themselves, it is not realistic that each device starts by deploying a contract to the blockchain.An interesting part of ERC 725 is that only smart contracts can be identities, yet only key pair-based accounts are able to make claims.With uPort, both account types can sign and receive claims.UpgradabilityOur proxy contract and upgradable key management contracts are just one specific implementation; a proxy contract is essentially a multi sig wallet contract and it is critical that the basic logic can be upgraded.There are already other ERC standards for handling key management in multi sig contracts that should be built on instead of trying to reinvent the wheel.There is an incredible amount of innovation happening within the world of wallet contracts, which is why we believe that the exact interface and implementation of it should not be defined as part of an identity standard.In reality, as part of the identity flow, there is really no reason for any third parties to ever concern themselves with how you manage the keys for your identity contract.A claim system needs to be resilient to breakage in signature schemes that is likely to happen with the introduction of quantum computers. To accomplish this it needs to support the addition of new signature schemes.While ERC 725 does support different kinds of siguature schemes, the burden of verification of these signatures is given to the consumer of the claim.If the consumer is a smart contract, it needs to implement all the current schemes, but it can obviously not implement any future schemes. This means that when a new signature scheme is introduced it will not be supported by a majority of smart contracts that want to verify claims.In our proposed ERC 780, this problem is solved by simply using the regular Ethereum account abstraction, which can support any kind of signatures.Safety in the\u00a0CommonsClaims created by someone are meant to be trusted. This also means that the basic infrastructure used to store, view, and verify these claims need to be trusted.As a user, you want to be able to trust that the key management of your identity contract works, but for others, they are primarily concerned with whether they can trust that the claims listed in your identity contract are correct, regardless of if they represent good or bad information about you.Due to the potentially untrusted source code of ERC 725 implementations, it requires the complexity of actual signatures included in the on-chain claims.The uPort approach as represented by ERC 780 instead uses shared common contracts that are easily reviewable and understood. These contracts are not controlled by anyone and can thus be thought of as a form of common good, as anyone can deploy their own with newer features. We are now on our third version of this registry and welcome others to innovate in this area as well.Public vs Private informationOnce you work in the blockchain space it is very easy to fall into the trap that all information should be public. Public information is important and has its place, but it is not suitable for everything.We believe that Ethereum will be one of the most important technologies and touch all aspects of our lives. However that does not mean that I feel that all information about me should be available to anyone able to write a Web3 Javascript dApp.This is not just shared by us at uPort. The number one fear people/implementors/regulators have about blockchain identity is if private information has to be stored on the public blockchain.Currently, the only information uPort requires to be stored publicly in the registry is a public key that can be used to verify signed data.Most of the claims created about uPort Identities occur completely off the blockchain. The signatures are verified through our registry of course, but the claims themselves don\u2019t need to ever hit the blockchain.Gas costsAt uPort we are designing an identity platform that could potentially have billions of Identities (people, organizations, trees, shipping containers, devices, etc.).To do this we need to think about minimizing the amount of transactions needed to create, manage, and interact with your Identity.We are constantly thinking of how to improve this as well as improving the gas economy of our contracts.We realize it\u2019s early for ERC 725, but as currently written, it is very inefficient. Most operations require two transactions to be completed: one for proposing it and one for approving it.Adding a claim is a transaction, approving it a second. In the uPort approach, no transactions are needed in most cases as most claims are private.Monolithic vs\u00a0LayeredThe internet was built on a series of relatively simple standards that do just one thing. By layering these on top of each other, everything from Ethereum to Google to Tinder is possible, and works on different devices and network types.We think it\u2019s extremely important to follow the same approach when building standards on top of Ethereum. This allows us to focus on each problem area with one or multiple ways of solving it. It\u2019s not a take it all or leave it all approach. It also makes it easier to build hybrid applications that use Ethereum where it\u2019s needed and not where it isn\u2019t.uPort takes this approach and we are always ready to insert, swap, or remove layers as needed.The following Diagram shows the layers used for basic Identity use in uPort and ERC 725:Comparing Layered vs Monolithic Approach to ProtocolsThe key takeaway here is that ERC 725 has almost everything incorporated into a single Monolithic Standard/Contract.With uPort, almost any layer can be updated and innovated on separately. Each section from the bottom up to any arbitrary layer is useful on its own, without needing the rest.For example if you only need on-chain claims, all you need are the layers from ERC-780 and down. You could create your own off-chain applications using uPort by building on top of the uPort Compliant JWT\u2019s without interacting with the higher level identity constructs in the top two layers.Identity and its multitude of use cases is complex and not something you can just solve in a single document. We believe it makes most sense to create different layered standards, and where it makes sense, work with people outside of the Ethereum world as well.Join us in building and defining the next generation of identity standardsERC-725 is ultimately too narrow, and unfortunately, developers will likely quickly reach its limits. uPort has been designed from the beginning as an intentionally open platform. We even encourage others to build competing identity wallets on top of the uPort protocols.Our proposed on-chain claims registry, ERC 780 can be found here, and we need more eyes on it. Our current version, the uport-registry is also completely open for review. We will migrate to ERC-780 once it\u2019s finalized.We are constantly working on improving our Proxy and Access Control contracts in our uport-identity repo. Anyone can use these and we happily review and accept PRs if they make sense.Finally, the entire uport-protocol specs are also available on github. Remember identity is mostly off-chain in the real world. We are also constantly updating these. We are in particular interested in new use cases you might think of.So please take a look at our work thus far as well as our proposal for ERC-780, and let us know what you think. We look forward to working with the community on pushing forward the next generation of identity standards.", "responses": "10"}, {"title": "An AI Hedge Fund Goes Live On\u00a0Ethereum", "author_name": "Richard Craib", "link": "https://medium.com/numerai/an-ai-hedge-fund-goes-live-on-ethereum-a80470c6b681?source=search_post", "post_date": "Jun 21, 2017", "readtime": "3 min read", "upvotes": "780", "content": "An AI Hedge Fund Goes Live On\u00a0EthereumRichard CraibBlockedUnblockFollowFollowingJun 21, 2017In February, Numerai announced Numeraire, a cryptographic token to incentivize data scientists around the world to contribute artificial intelligence to our hedge fund (see Forbes, Wired, Smith+Crown). Earlier today, the Numeraire smart contract was deployed to Ethereum, and over 1.2 million tokens were sent to 19,000 data scientists around the world.A Protocol For\u00a0AINumerai is building the protocol to connect machine intelligence to the stock market, and we want you to build on top of it.Numerai has made over $200 000 in payments to our users. We have used bitcoin to make these payments. The problem with bitcoin is that it exists on a different blockchain to the Numeraire token. This drastically limits the extent to which decentralized applications based on Numerai can be automated and unstoppable because these applications cannot receive payment in bitcoin, they can only receive and use ether.If Numerai made payments in ether, then a decentralized application on Ethereum could automatically use that ether to fund its operations (for example, its gas costs). Bitcoin payments make sense for people not for decentralized autonomous organizations (DAOs). We want to move more of Numerai onto Ethereum to accommodate DAOs. Making payments in ether will have large cascading effects for the kinds of applications that can interface with Numerai.Today we are announcing that we are abandoning bitcoin. It will be phased out of Numerai by September 30th. From that point on, all payments will flip into ether and Numeraire.Numeraire Live On\u00a0EthereumStarting today, data scientists can withdraw Numeraire tokens to any Ethereum address, and interact with the smart contract. Data scientists can also use Numeraire to earn more money by staking it on their predictions. If their predictions perform well, they earn more money. If their predictions perform badly, their Numeraire is destroyed on the blockchain.The staking mechanism creates a powerful new incentive to build the best machine learning model on Numerai. For thousands of people, staking Numeraire will be the first time in their lives they have interacted with an Ethereum smart contract. And they can do it all from Numerai\u2019s website without needing to manage keys or use an Ethereum client. This is not speculative; you can stake Numeraire right now, and the Ethereum transaction will influence the course of Numerai\u2019s hedge fund.Staking Numeraire on the Ethereum blockchainProof Of IntelligenceNumerai has already raised $7.5 million in traditional venture capital from Union Square Ventures, Joey Krug (Augur), Juan Benet (FileCoin), Fred Ehrsam (Coinbase), and Olaf Carlson-Wee (Polychain). So the Numeraire token will not be sold in a \u201ccrowdsale\u201d or \u201cICO\u201d.It is important to us that the holders of Numeraire are the people who it is most valuable and useful to: the data scientists building Numerai. So we have distributed the initial allocation of Numeraire for free to our data scientists based on their past performance in Numerai\u2019s tournament. Numeraire can only be earned by competing in Numerai\u2019s data science tournament.The Numeraire token is the reward for proving the intelligence of a machine learning model on Numerai.Interacting With The\u00a0ContractNumeraire follows the ERC-20 token standard. Here is the ABI to communicate with the contract: https://github.com/numerai/contract/blob/master/abi.jsonThe Numeraire contract address (numeraire.eth) is: 0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671https://etherscan.io/address/0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671The Numeraire contract\u2019s entire source code is here: https://github.com/numerai/contract", "responses": "6"}, {"title": "Diving Into The Ethereum Virtual\u00a0Machine", "author_name": "Howard", "link": "https://blog.qtum.org/diving-into-the-ethereum-vm-6e8d5d2f3c30?source=search_post", "post_date": "Aug 6, 2017", "readtime": "9 min read", "upvotes": "2.4K", "content": "Diving Into The Ethereum Virtual\u00a0MachineHowardBlockedUnblockFollowFollowingAug 6, 2017Solidity offers many high-level language abstractions, but these features make it hard to understand what\u2019s really going on when my program is running. Reading the Solidity documentation still left me confused over very basic things.What are the differences between string, bytes32, byte[], bytes?Which one do I use, when?What\u2019s happening when I cast a string to bytes? Can I cast to byte[]?How much do they cost?How are mappings stored by the EVM?Why can\u2019t I delete a mapping?Can I have mappings of mappings? (Yes, but how does that work?)Why is there storage mapping, but no memory mapping?How does a compiled contract look to the EVM?How is a contract created?What is a constructor, really?What is the fallback function?I think it\u2019s a good investment to learn how a high-level language like Solidity runs on the Ethereum VM (EVM). For couple of reasons.Solidity is not the last word. Better EVM languages are coming. (Pretty please?)The EVM is a database engine. To understand how smart contracts work in any EVM language, you have to understand how data is organized, stored, and manipulated.Know-how to be a contributor. The Ethereum toolchain is still very early. Knowing the EVM well would help you make awesome tools for yourself and others.Intellectual challenge. EVM gives you a good excuse to play at the intersection of cryptography, data structure, and programming language design.In a series of articles, I\u2019d like to deconstruct simple Solidity contracts in order to understand how it works as EVM bytecode.An outline of what I hope to learn and write about:The basics of EVM bytecode.How different types (mappings, arrays) are represented.What is going on when a new contract is created.What is going on when a method is called.How the ABI bridges different EVM languages.My final goal is to be able to understand a compiled Solidity contract in its entirety. Let\u2019s start by reading some basic EVM bytecode!This table of EVM Instruction Set would be a helpful reference.A Simple\u00a0ContractOur first contract has a constructor and a state variable:// c1.solpragma solidity ^0.4.11;contract C {    uint256 a;    function C() {      a = 1;    }}Compile this contract with solc:$ solc --bin --asm c1.sol======= c1.sol:C =======EVM assembly:    /* \"c1.sol\":26:94  contract C {... */  mstore(0x40, 0x60)    /* \"c1.sol\":59:92  function C() {... */  jumpi(tag_1, iszero(callvalue))  0x0  dup1  reverttag_1:tag_2:    /* \"c1.sol\":84:85  1 */  0x1    /* \"c1.sol\":80:81  a */  0x0    /* \"c1.sol\":80:85  a = 1 */  dup2  swap1  sstore  pop    /* \"c1.sol\":59:92  function C() {... */tag_3:    /* \"c1.sol\":26:94  contract C {... */tag_4:  dataSize(sub_0)  dup1  dataOffset(sub_0)  0x0  codecopy  0x0  returnstopsub_0: assembly {        /* \"c1.sol\":26:94  contract C {... */      mstore(0x40, 0x60)    tag_1:      0x0      dup1      revertauxdata: 0xa165627a7a72305820af3193f6fd31031a0e0d2de1ad2c27352b1ce081b4f3c92b5650ca4dd542bb770029}Binary:60606040523415600e57600080fd5b5b60016000819055505b5b60368060266000396000f30060606040525b600080fd00a165627a7a72305820af3193f6fd31031a0e0d2de1ad2c27352b1ce081b4f3c92b5650ca4dd542bb770029The number 6060604052... is bytecode that the EVM actually runs.In Baby\u00a0StepsHalf of the compiled assembly is boilerplate that\u2019s similar across most Solidity programs. We\u2019ll look at those later. For now, let\u2019s examine the unique part of our contract, the humble storage variable assignment:a = 1This assignment is represented by the bytecode 6001600081905550. Let\u2019s break it up into one instruction per line:60 0160 0081905550The EVM is basically a loop that execute each instruction from top to bottom. Let\u2019s annotate the assembly code (indented under the label tag_2) with the corresponding bytecode to better see how they are associated:tag_2:  // 60 01  0x1  // 60 00  0x0  // 81  dup2  // 90  swap1  // 55  sstore  // 50  popNote that 0x1 in the assembly code is actually a shorthand for push(0x1). This instruction pushes the number 1 onto the stack.It still hard to grok what\u2019s going on just staring at it. Don\u2019t worry though, it\u2019s simple to simulate the EVM line by line.Simulating The\u00a0EVMThe EVM is a stack machine. Instructions might use values on the stack as arguments, and push values onto the stack as results. Let\u2019s consider the operation add.Assume that there are two values on the stack:[1 2]When the EVM sees add, it adds the top 2 items together, and pushes the answer back onto the stack, resulting in:[3]In what follows, we\u2019ll notate the stack with []:// The empty stackstack: []// Stack with three items. The top item is 3. The bottom item is 1.stack: [3 2 1]And notate the contract storage with {}:// Nothing in storage.store: {}// The value 0x1 is stored at the position 0x0.store: { 0x0 => 0x1 }Let\u2019s now look at some real bytecode. We\u2019ll simulate the bytecode sequence 6001600081905550 as EVM would, and print out the machine state after each instruction:// 60 01: pushes 1 onto stack0x1  stack: [0x1]// 60 00: pushes 0 onto stack0x0  stack: [0x0 0x1]// 81: duplicate the second item on the stackdup2  stack: [0x1 0x0 0x1]// 90: swap the top two itemsswap1  stack: [0x0 0x1 0x1]// 55: store the value 0x1 at position 0x0// This instruction consumes the top 2 itemssstore  stack: [0x1]  store: { 0x0 => 0x1 }// 50: pop (throw away the top item)pop  stack: []  store: { 0x0 => 0x1 }The end. The stack is empty, and there\u2019s one item in storage.What\u2019s worth noting is that Solidity had decided to store the state variable uint256 a at the position 0x0. It's perfectly possible for other languages to choose to store the state variable elsewhere.In pseudocode, what the EVM does for 6001600081905550 is essentially:// a = 1sstore(0x0, 0x1)Looking carefully, you\u2019d see that the dup2, swap1, pop are superfluous. The assembly code could be simpler:0x10x0sstoreYou could try to simulate the above 3 instructions, and satisfy yourself that they indeed result in the same machine state:stack: []store: { 0x0 => 0x1 }Two Storage VariablesLet\u2019s add one extra storage variable of the same type:// c2.solpragma solidity ^0.4.11;contract C {    uint256 a;    uint256 b;    function C() {      a = 1;      b = 2;    }}Compile, focusing on tag_2:$ solc --bin --asm c2.sol// ... more stuff omittedtag_2:    /* \"c2.sol\":99:100  1 */  0x1    /* \"c2.sol\":95:96  a */  0x0    /* \"c2.sol\":95:100  a = 1 */  dup2  swap1  sstore  pop    /* \"c2.sol\":112:113  2 */  0x2    /* \"c2.sol\":108:109  b */  0x1    /* \"c2.sol\":108:113  b = 2 */  dup2  swap1  sstore  popThe assembly in pseudocode:// a = 1sstore(0x0, 0x1)// b = 2sstore(0x1, 0x2)What we learn here is that the two storage variables are positioned one after the other, with a in position 0x0 and b in position 0x1.Storage PackingEach slot storage can store 32 bytes. It\u2019d be wasteful to use all 32 bytes if a variable only needs 16 bytes. Solidity optimizes for storage efficiency by packing two smaller data types into one storage slot if possible.Let\u2019s change a and b so they are only 16 bytes each:pragma solidity ^0.4.11;contract C {    uint128 a;    uint128 b;    function C() {      a = 1;      b = 2;    }}Compile the contract:$ solc --bin --asm c3.solThe generated assembly is now more complex:tag_2:  // a = 1  0x1  0x0  dup1  0x100  exp  dup2  sload  dup2  0xffffffffffffffffffffffffffffffff  mul  not  and  swap1  dup4  0xffffffffffffffffffffffffffffffff  and  mul  or  swap1  sstore  pop  // b = 2  0x2  0x0  0x10  0x100  exp  dup2  sload  dup2  0xffffffffffffffffffffffffffffffff  mul  not  and  swap1  dup4  0xffffffffffffffffffffffffffffffff  and  mul  or  swap1  sstore  popThe above assembly code packs these two variables together in one storage position (0x0), like this:[         b         ][         a         ][16 bytes / 128 bits][16 bytes / 128 bits]The reason to pack is because the most expensive operations by far are storage usage:sstore costs 20000 gas for first write to a new position.sstore costs 5000 gas for subsequent writes to an existing position.sload costs 500 gas.Most instructions costs 3~10 gases.By using the same storage position, Solidity pays 5000 for the second store variable instead of 20000, saving us 15000 in gas.More OptimizationInstead of storing a and b with two separate sstore instructions, it should be possible to pack the two 128 bits numbers together in memory, then store them using just one sstore, saving an additional 5000 gas.You can ask Solidity to make this optimization by turning on the optimize flag:$ solc --bin --asm --optimize c3.solWhich produces assembly code that uses just one sload and one sstore:tag_2:    /* \"c3.sol\":95:96  a */  0x0    /* \"c3.sol\":95:100  a = 1 */  dup1  sload    /* \"c3.sol\":108:113  b = 2 */  0x200000000000000000000000000000000  not(sub(exp(0x2, 0x80), 0x1))    /* \"c3.sol\":95:100  a = 1 */  swap1  swap2  and    /* \"c3.sol\":99:100  1 */  0x1    /* \"c3.sol\":95:100  a = 1 */  or  sub(exp(0x2, 0x80), 0x1)    /* \"c3.sol\":108:113  b = 2 */  and  or  swap1  sstoreThe bytecode is:600080547002000000000000000000000000000000006001608060020a03199091166001176001608060020a0316179055And formatting the bytecode to one instruction per line:// push 0x060 00// dup180// sload54// push17 push the the next 17 bytes as a 32 bytes number70 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00/* not(sub(exp(0x2, 0x80), 0x1)) */// push 0x160 01// push 0x80 (32)60 80// push 0x80 (2)60 02// exp0a// sub03// not19// swap190// swap291// and16// push 0x160 01// or17/* sub(exp(0x2, 0x80), 0x1) */// push 0x160 01// push 0x8060 80// push 0x0260 02// exp0a// sub03// and16// or17// swap190// sstore55There are four magic values used in the assembly code:0x1 (16 bytes), using lower 16 bytes// Represented as 0x01 in bytecode16:32 0x0000000000000000000000000000000000:16 0x000000000000000000000000000000010x2 (16 bytes), using higher 16bytes// Represented as 0x200000000000000000000000000000000 in bytecode16:32 0x0000000000000000000000000000000200:16 0x00000000000000000000000000000000not(sub(exp(0x2, 0x80), 0x1))// Bitmask for the upper 16 bytes16:32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00:16 0x00000000000000000000000000000000sub(exp(0x2, 0x80), 0x1)// Bitmask for the lower 16 bytes16:32 0x00000000000000000000000000000000 00:16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFThe code does some bits-shuffling with these values to arrive at the desired result:16:32 0x00000000000000000000000000000002 00:16 0x00000000000000000000000000000001Finally, this 32bytes value is stored at position 0x0.Gas Usage600080547002000000000000000000000000000000006001608060020a03199091166001176001608060020a0316179055Notice that 0x200000000000000000000000000000000 is embedded in the bytecode. But the compiler could\u2019ve also chosen to calculate the value with the instructions exp(0x2, 0x81), which results in shorter bytecode sequence.But it turns out that 0x200000000000000000000000000000000 is a cheaper than exp(0x2, 0x81). Let's look at the gas fees involved:4 gas paid for every zero byte of data or code for a transaction.68 gas for every non-zero byte of data or code for a transaction.Let\u2019s compare how much either representation costs in gas.The bytecode 0x200000000000000000000000000000000. It has many zeroes, which are cheap.(1 * 68) + (16 * 4) = 196.The bytecode 608160020a. Shorter, but no zeroes.5 * 68 = 340.The longer sequence with more zeroes is actually cheaper!SummaryAn EVM compiler doesn\u2019t exactly optimize for bytecode size or speed or memory efficiency. Instead, it optimizes for gas usage, which is an layer of indirection that incentivizes the sort of calculation that the Ethereum blockchain can do efficiently.We\u2019ve seen some quirky aspects of the EVM:EVM is a 256bit machine. It is most natural to manipulate data in chunks of 32 bytes.Persistent storage is quite expensive.The Solidity compiler makes interesting choices in order to minimize gas usage.Gas costs are set somewhat arbitrarily, and could well change in the future. As costs change, compilers would make different choices.", "responses": "10"}, {"title": "Criticizing Ethereum\u200a\u2014\u200aweaknesses of \u201cthe internet\u00a03.0\u201d", "author_name": "Thijs Maas", "link": "https://hackernoon.com/the-top-critiques-on-ethereum-a-bubble-waiting-to-pop-6ccf9b577d11?source=search_post", "post_date": "Oct 4, 2017", "readtime": "9 min read", "upvotes": "1.6K", "content": "Criticizing Ethereum\u200a\u2014\u200aweaknesses of \u201cthe internet\u00a03.0\u201dHow a new dot-com bubble might be\u00a0forming.Thijs MaasBlockedUnblockFollowFollowingOct 4, 2017In my last article I focused on the question I hear more often than ever: \u201cWhat is Ethereum?\u201dthe potential of smart contracts, decentralised applications and the rise of Ethereum as the backbone of the Internet 3.0. However, hype often comes with a positive bias so staying critical is of great importance. To balance out all the positivity about Ethereum, I will present the most well-founded arguments by Ethereum\u2019s critics.Scalability & centralisationEthereum\u2019s most valid criticism, as articulated by Vitalik Buterin, is its (lack of) scalability. The network is currently capable of handling about 5 transactions per second, which is nowhere near the capacity needed if Ethereum is ever going to function as the backbone of the internet of value. For contrast, an application like \u00dcber handles 12 rides a second. Ethereum\u2019s developers are currently working on a number of technical solutions to increase the transaction capacity. These include plasma, sharding, the raiden network and changing the consensus mechanism from proof of work to proof of stake.Illustration 1: Transactions per second in Ethereum. Credits to Etherchain.orgCentralisation is also arguably going to become a bigger problem for Ethereum than Bitcoin.The ledger that keeps track of your balance is secured on thousands of nodes instead of one centralized server. In other words, a malicious party would have to hack thousands of computers on the same time, instead of one single server. The ledger is secure, because it is decentralized. In my last post I said that if the size of the blockchain gets too big, it becomes difficult for normal users to run nodes. This was a huge problem for Bitcoin, but Ethereum\u2019s blockchain size is growing even faster than Bitcoin\u2019s.The change to Proof of Stake might help both scalability and decentralization, but changing the consensus mechanism this late in the game is also a potential issue. In proof of work consensus is reached through the process of mining, in which miners use large amounts of computational power to solve a cryptographic puzzle in order to add a block to the chain and get the block reward. In proof of stake on the other hand, the probability of adding a block is not based on computational power, but on the amount of wealth held by the staker (also forgers or minters). This eliminates the waste of energy needed to run the GPU\u2019s but is criticized itself as well. Some believe that it is irresponsible to even try such a transition, criticize the lack of peer review of the code and see it as adding an untested and insecure component to the network. There is a large debate about PoW vs PoS in general.Another critique often raised at Ethereum is the cult-like following that has formed behind its creator. Undoubtedly, Vitalik Buterin is a smart man, and he is acting as a benevolent dictator for Ethereum. However, Buterin is a dictator nonetheless in the sense that he, due to his large following in the Ethereum community, single-handedly has a gigantic impact on the future development decisions of Ethereum. This makes him the single point of failure in a world that aims to eliminate such points.Smart contractsWhile smart contracts are praised widely, it should be noted that they, too, have their disadvantages.First of all, smart contracts are only as good as the people that write them. A hacker almost stole $50 million from the original DAO due to bad coding last year.Secondly, immutability can be a big problem if the contract has a mistake in it.Smart contracts are, for now, only really useful for really simple contracts. Contracts function to divide risks between parties and to understand the complexity hereof we have a huge body of case law and legal nomenclature. Most contracts cannot be boiled down to an easily verifiable set of requirements.Third, smart contracts ignore the social context in which contracts operate.Fourth, smart contracts need reliable data as input in order to come to the right execution. Thus, either a third party or an oracle is needed. While a third party brings back concerns of centralisation, oracles are not well-developed enough for the foreseeable future. Prediction markets, other blockchains and the internet of things might start to play a role in this respect.Finally, smart contracts raise interesting legal questions as well (is code law?).Bubble TroubleAnother criticism of Ethereum is that the hype around it has reached bubble-like proportions. Projects without any proof of concept, consisting only of a whitepaper and a website are raising many millions through ICO\u2019s. Take, for example, the Gnosis project. Gnosis is a prediction market that sold out its ICO in 15 minutes, raising about $15 million. However, only 5% of all tokens were distributed, meaning it was valued at $300 million! The ICO was based on a whitepaper and an alpha version without any actual proof of concept. Such blatant over-valuations are sadly not uncommon as speculation in the space is at an all-time high. Meanwhile, celebrities like Jamie Fox, Paris Hilton and Floyd Mayweather are happily promoting ICO\u2019s on social media. This all very much resembles the irrationality of the markets during the dot-com bubble, when celebrities were publically hyping up stocks and a website like pets.com, was valued at $300 million.Because ICO valuations are out of control, the quality of projects on the Ethereum network is going down rapidly. If my startup was to be valued at $300 million after half a year of work and I would personally pocket a good 10%, how much incentive do I have to keep working? I could just sell my tokens and retire. To participate in the ICO madness, many developers do not seem to care whether they have a functioning product or not. They don\u2019t have to, as they know people will throw money at their project anyway. If this gets you excited, here is a complete guide to profiting from the ICO hype:Step 1: Launch website with a nice catchphrase like: \u201cThe First Ever Distributed (\u2026..) That Democratizes And Disrupts Traditional (\u2026..), Empowers Citizens and Benefits Holders Through Trustless Blockchain Technology\u201d.Step 2: Write a mediocre white paper and be vague about how the project actually makes any economic sense.Step 3: Say you will actually build the DApp.Step 4: Retire and profit.Without regulation, developers believe they can just make the most blatant claims about the future of their project. For your financial health, do this quick exercise when investing in an ICO. Do a quick google search for \u2018project name\u2019 + scam. If this gives thousands of results, maybe it\u2019s time to reconsider your plans. If it doesn\u2019t, ask yourself: Is the project solving a real problem? Why should this solution be decentralized? Does the project actually benefit from peer-to-peer networking? Why does this project even need a token, what is the token for, and could the same goal be achieved differently? Do they have a working prototype?That the quality of projects on the Ethereum network is going down, can also be seen by the amount of hacks during ICO\u2019s. An estimated $225 million worth of Ethereum has been stolen from ICO-related activity in the last 12 months. There are also widespread \u2018scam coins\u2019, whose developers are probably at Step 3 of my (not so) unique step-by-step plan to financial freedom. Some examples of scams include Onecoin, Paycoin and the recently by the SEC investigated REcoin and DRC. There are many more projects which I suspect are less than legitimate, but at the risk of losing my mind, I will not go into those. For a good frame of reference, at one point there was an ICO for a coin that on its website \u201cwww.ponzi.io\u201d (I am not kidding) literally stated it was \u201cthe first ever distributed pyramid scheme\u201d. The project received millions in funding (I really wish I was kidding).Researchers at the University of Cagliari state that:\u201cin the first 1.5 years of life of Ethereum, there have been a multitude of experiments to implement Ponzi schemes as smart contracts: indeed, \u223c 10% of the 1384 contracts with verified source code on etherscan.io are Ponzi schemes.\u201dAside from the large amount of scams, Ponzi schemes and hacks, the (perceived) regulatory grey area also resulted in widespread spoofing of price orders and pump and dump schemes. This all inevitably attracts the attention of regulators which brings us to the last, and perhaps biggest, issue: legal uncertainty.Illustration 2: Regulatory uncertainty is prevalentAs of yet, there is little regulatory certainty around the legal status of tokens and their distributions. While China has banned the ICO altogether until the enactment of suiting legislation, many countries have no idea if and how to address the topic yet. Whether a token is a security will inevitably depend on its characteristics, way of distribution, and the rights it gives to its holder. It is clear however that a token can definitely be a security, depending on how it is structured (see the SEC\u2019s decision on the DAO). Many tokens, with characteristics resembling that of a security, do not comply with any of the applicable regulations. This means investors are not getting the information they need as a lack of compliance results in a lack of transparency.While I would love to go into the subject here, I could write a whole thesis about this (and as a matter of fact, this is exactly what I am doing). Celebrities promoting ICO\u2019s should be careful though: a tweet that takes 10 seconds to write might just have immense consequences.As a final point, I would like to raise the question of what it is that fuels the demand for Ethereum. At the moment, a reasonably valid argument can be made that it is mostly the ICO hype. To buy tokens, you need Ethereum/Bitcoin. Now if we follow this line of reasoning, and if a large part of Ethereum\u2019s value is indeed determined by the irrationality of the current ICO market, then what will happen when this market inevitably collapses under its own hype?ConclusionBlockchains give the potential to provide efficient, fast, secure, reliable and auditable transacting of value. Like the internet before it, the blockchain promises to upend business models and disrupt industries. Blockchain technologies are pushing us to challenge how we have structured society, defined value and rewarded participation. This is why some refer to blockchains as the enabling technology for the internet 3.0, or the internet of value.As almost anything can be coded and deployed on Ethereum\u2019s blockchain, Ethereum might just form the base of this new internet. However, high potential comes hand in hand with hype, and talk of the internet 3.0 brings problems resembling the ones surrounding the dot-com crisis.Looking back, the dot-com bubble upset the market for quite a while. However, it did make the world aware of the possibilities made possible by the internet. At the high-point of the bubble, the combined market cap of the top 280 internet stocks was almost 3 trillion dollars. At the time of writing, the total market cap of the crypto market is $0.145 trillion.\u201cWe always overestimate the change that will occur in the next two years and underestimate the change that will occur in the next ten.\u201d\u200a\u2014\u200aBill GatesIllustration 3: Visual representation of the relation between human perception of potential and development thereof", "responses": "12"}, {"title": "Calculating Costs in Ethereum Contracts", "author_name": "Danny Ryan", "link": "https://hackernoon.com/ether-purchase-power-df40a38c5a2f?source=search_post", "post_date": "Jun 28, 2017", "readtime": "7 min read", "upvotes": "2.1K", "content": "Calculating Costs in Ethereum ContractsDanny RyanBlockedUnblockFollowFollowingJun 28, 2017GAS PRICE PSA (2017\u201308\u201323): The median gas price at the time of writing this article was 28 Gwei, and continues to be in the realm of 20 Gwei. This is far greater than the typical average and safe-low found on EthGasStation (4 and 0.5 Gwei respectively). The median is so high because of bad gas-price defaults found in many wallets. I highly recommend using EthGasStation\u2019s average gas-price or lower in order to not pay high fees and to help drive down the market rate for gas-price.UPDATE (2017\u201309\u20136): I ported the Google Spreadsheet of OPCODES to a github repo. This repo will be maintained and updated as the yellow paper evolves.What are users storing when they hold Ether? In one sense, they are storing the ability to perform computation on the Ethereum network. This computation is done in a decentralized fashion:A miner executes the computation associated with each transaction being included in a block, resulting in an updated state. Upon successfully mining a block, a miner broadcasts the block to the network. Each of the other miners and non-mining nodes verify the validity of the transactional computation and resulting state change before accepting the block as valid, incorporating the block into their copy of the blockchain, and moving on to the next block.You may have noticed that there is incredible amount of redundancy for every bit of computation on the network. Namely, each node verifies the results of each transaction\u200a\u2014\u200aread: every node runs all of the computation.I\u2019ve been researching Ethereum and other blockchain application platforms for a long time now, and rarely, if ever, do people outright say this. Once you get into the more technical side of things, it becomes an obvious feature of the system, but to the less initiated this is not so obvious. Wouldn\u2019t this be far more costly than just running the computation on a server? Yes, by the nature of the protocol, it has to be. The following is likely a fundamental principle of economics or computation or both:More machines running code == More money spent on running codeWe must remember that executing code and updating state on Ethereum is far different than doing the same on a simple server. The resulting state changes in Ethereum have different properties than that of a server\u200a\u2014\u200anamely: immutability and public verifiability. Let\u2019s first take a look at how much computation actually costs on the network and then we can try to decide if it\u2019s worth it.How much does it\u00a0cost?GasEach low level operation available in the EVM (Ethereum Virtual Machine) is called an OPCODE. These include operations such as ADD\u200a\u2014\u200aadding two integers together, BALANCE\u200a\u2014\u200agetting the balance of an account, and CREATE\u200a\u2014\u200acreating a new contract with supplied code. Each of these OPCODEs has a number called \u201cgas\u201d associated with it. Gas is an abstract number that represents the relative complexity of operations. For example, ADD uses 3 gas while MUL (multiply two integers) uses 5 gas, so MUL is more complex than ADD.I\u2019ve compiled the gas required for each OPCODE in the EVM (Ethereum Virtual Machine) here. This information is pulled from the most recent version of the Ethereum Yellow Paper (EIP-150 Revision)\u2014 the formal specification of the Ethereum Protocol.It is important to note that all transactions cost 21000 gas as a base. So if you are just transferring funds and not interacting with a contract, your transaction takes 21000 gas. If you are interacting with a contract, your transaction takes 21000 gas plus any gas associated with running the contract.Gas PriceWhile gas is fixed per operation, the amount a user pays per gas\u200a\u2014\u200agas price\u200a\u2014\u200ais dynamic and dictated by market conditions. Gas price is a value representing how much Ether the user is willing to pay per gas. When a user sends a transaction, they specify the gas price in Gwei/Gas (1 Gwei equals 0.000000001 ETH), and the total fee that they pay is equal to gas_price * gas_used. Miners are paid out this fee and so they prioritize transactions with a higher gas price. The higher gas price you are willing to pay, the faster your transaction will be processed.ETH Gas Station is a great resource for understanding the current gas market conditions. \u201cRecommended User Gas Prices\u201d shows the range of gas prices you might pay and the expected transaction times.No Really, how much does it\u00a0cost?Operations in Ethereum cost gas_price * gas_used, but what does this translate to in both ether and dollars? I\u2019ve compiled a spreadsheet of some example operations and associated costs at the current median gas price (28 Gwei) and current USD/ETH exchange rate ($295/ETH). Each line shows a task, the gas required for the task, the cost in ETH and USD, the number of this task you can perform with 1 ETH and 1 USD, the number of tasks you can perform per block, and the number of blocks it takes to perform this task.Adding NumbersThe following is a sample from the spreadsheet. This shows the costs associated with adding or subtracting two integers.Cost of Adding\u00a0IntegersWe can see here that it costs 0.09 ETH or $26.55 to add two numbers together 1 million times. Compared to running on a local computer or cloud server this seems pretty high. Let\u2019s do a quick price comparison to AWS.I can add two numbers together 1 million times in python in 0.04 seconds. Amazon charges $0.0059/hour for their cheapest EC2 instance\u200a\u2014\u200at2.nano. This costs $0.000001639/second or $0.000000066 for the operation. Compared to $26.55, this is about 400Million times more expensive (or 40Million if you are willing to pay a low gas price). Whoa!Storing DataAnother common operation we might be interested in is storing data whether it be storing a single value such as the number of days until a contract expires or something a bit more ambitious such as the contents of a short story.Cost of Storing\u00a0DataWe can see from the above snippet that storing data to the blockchain is extremely expensive, but for good reason! When you store data in the blockchain, you store data into an immutable database replicated across 10s of thousands of nodes. Doing operations like uploading your favorite movie to the blockchain is and should be entirely cost prohibitive to keep the growth of the blockchain manageable. This intuition is captured by the fact that storing a single 256-bit word requires 20000 gas, over 6000 times more expensive than adding two numbers together.Another bottleneck of storing large amounts of data is the current Block Gas Limit of approximately 4700000 gas/block. At this cap of gas per block, it would take over 132 blocks to write 1 MB of data to the blockchain, and that is assuming you can manage to hog all of the gas per block and that there are no other operations required!What does it\u00a0mean?To be fair, adding two numbers together 1 million times is a bit contrived. A well written contract would likely move such computational complexity off-chain and deal more with updating state in the contract. Storing vast amounts of data to the blockchain is also not an ordinary task. Depending on the task, a user would likely store a cryptographic reference (a hash) of the data on-chain and keep the rest of the data off-chain.That said, we as developers need to be aware of these costs, and design dApps accordingly. We need to find the balance between on-chain and off-chain complexity, while still leveraging the decentralized capabilities of the blockchain.We also need to understand that at the end of the day we are comparing apples to oranges. With the increased cost and inefficiencies of the blockchain, we gain guarantees of open, censorship resistant code execution and publicly available, immutable data. We have never had such properties in computation before, and we do not yet fully understand the financial and societal gains that we might see.Over the next year, I expect increased adoption and hopefully some long-awaited launches on the Ethereum blockchain. Only when we get significant activity on the blockchain will we truly be able to assess the costs and benefits.Hacker Noon is how hackers start their afternoons. We\u2019re a part of the @AMI family. We are now accepting submissions and happy to discuss advertising & sponsorship opportunities.If you enjoyed this story, we recommend reading our latest tech stories and trending tech stories. Until next time, don\u2019t take the realities of the world for granted!", "responses": "9"}, {"title": "Step-by-Step Guide: Getting Started with Ethereum Mist\u00a0Wallet", "author_name": "Attores Pte Ltd", "link": "https://medium.com/@attores/step-by-step-guide-getting-started-with-ethereum-mist-wallet-772a3cc99af4?source=search_post", "post_date": "Aug 22, 2016", "readtime": "5 min read", "upvotes": "1.7K", "content": "Step-by-Step Guide: Getting Started with Ethereum Mist\u00a0WalletAttores Pte LtdBlockedUnblockFollowFollowingAug 22, 2016According to Coin Market Cap, Ethereum has the second largest market cap amongst Crypto-Currencies, after Bitcoin. Bitcoin and crypto lovers all around have seen Ethereum as an interesting platform that promises scalability, reliability and growth potential.If you still haven\u2019t started using (or at least experimenting with) Ethereum, it\u2019s high time you should try your hands on it. The speed with which Ethereum is evolving and grabbing the market share is astonishing.\u2018That\u2019s great. But hey, where do I start?\u2019If that\u2019s what you\u2019re thinking, you\u2019ve landed in the right place. In this guide, we\u2019ll cover everything to help you get started with Ethereum.What is Ethereum?EthereumBy standard definition:Ethereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third party interference.To operate the distributed application platform Ethereum, you need a fuel: Ether. It is a form of payment made by the clients of the platform to the machines executing the requested operations. To put it another way, ether is the incentive ensuring that developers write quality applications (wasteful code costs more), and that the network remains healthy (people are compensated for their contributed resources).That\u2019s pretty much what you need to know at this stage to get started. If you\u2019re still intrigued and want to learn more, go here and here.A.Downloading the Ethereum Mist WalletTo store, accept and send ether, you need a wallet. Download the latest release of mist wallet. Scroll down to Downloads and choose the release as per the system you\u2019re using.Downloading theEthereum Mist\u00a0WalletChoose Ethereum-Wallet-YourSystem. For this guide, I\u2019m working through the installation of the wallet for Mac OS i.e. I select Ethereum-Wallet-macosx-0\u20138\u20131.zipOnce you click on the link, it\u2019ll automatically start to download the zip file. After you unzip the folder, look for Ethereum-Wallet application and launch it.B. Installing the WalletAfter you launch, you\u2019ll see this:Installing The\u00a0WalletOnce the node is fully synced, you\u2019ll be asked to choose the network. For testing purpose, choose \u2018USE THE TEST NETWORK\u2019 option.Choose the TEST Network Once Node is\u00a0syncedChoose your password:Choose Your Password. And REMEMBER YOUR\u00a0PASSWORDProtect your account with a strong password. Put in the strong password and remember it. Seriously! You cannot EVER change the password of this account once it\u2019s created. So, remember the password.C. Your AccountEthereum Mist Wallet Accounts\u00a0OverviewThis is what the Wallet\u2019s overview screen looks like.At the top of your Wallet overview screen, you\u2019ll see the info related to the sync status of your node. If the node has stopped syncing (e.g. zero peers or block number not changing), try restarting the Wallet app or wait for some time.Under Accounts, you can see the number of accounts and Ether balance in every account.Your Account AddressGo inside the \u2018MAIN ACCOUNT\u2019. The string below your account name is your account address. It starts with 0x.Ethereum Mist Wallet\u200a\u2014\u200aYour Account\u00a0AddressNote: Ethereum Account addresses are in hexadecimal format. They are made up of 40 characters (hexadecimal digits). Read more about it here.0x1ae42D3054b8079Ff0694E7B43c230394aFc2426This is my testnet account address, if you want to send some ether.\u00a0;)To receive the ether from other party, simply share the address. You can see the status of transaction at http://testnet.etherscan.io/. Simply put your account number or the transaction number sent by other party in search bar.Note: If you can\u2019t find anyone to send you ether, go here and share your address.\u00a0:) With this Ethereum Faucet, you can receive free ether simply by adding your wallet address and start claiming. Here are 2 ether I received from them:Receive Free Ether From Ethereum\u00a0FaucetsSending EtherGo to SEND.Put in the address of the receiving party.Choose the amount of ether you want to send.Sending Ether from Ethereum Mist\u00a0Wallet4. Try sending it without changing any fees.Fees\u200a\u2014\u200aSending Ether with Ethereum\u00a0Wallet5. And enter your password.Password\u200a\u2014\u200aSending Ethe with Ethereum\u00a0WalletThat\u2019s all.Your TransactionsTo see all of your transactions, go to Wallet overview \u2192 Latest TransactionsLatest Transactions\u200a\u2014\u200aEthreum\u00a0WalletClick on the particular transaction to display the Transaction box.Transaction Number & Block Hash\u200a\u2014\u200aEthereum Mist\u00a0WalletThe same can be checked on http://testnet.etherscan.io/. Search with transaction number or your account number.That\u2019s it! Need any help? Put it in the comments below and we\u2019ll be happy to help.Go mine some!\u00a0:DP.S. Check out Indorse by Attores\u200a\u2014\u200aLinkedIn Disruptor on Ethereum [Decentralised Professional Network powered by Ethereum Blockchain]Important: All announcements\u200a\u2014\u200aBounty, Pre Token Sale, Token Sale, will be first made exclusively on Indorse Slack: Join Indorse Community on Slack", "responses": "31"}, {"title": "Valuing Bitcoin and Ethereum with Metcalfe\u2019s Law", "author_name": "Clearblocks", "link": "https://medium.com/@clearblocks/valuing-bitcoin-and-ethereum-with-metcalfes-law-aaa743f469f6?source=search_post", "post_date": "Feb 13, 2018", "readtime": "14 min read", "upvotes": "2.8K", "content": "Valuing Bitcoin and Ethereum with Metcalfe\u2019s LawClearblocksBlockedUnblockFollowFollowingFeb 13, 2018Bob Metcalfe\u2019s 1972 sketch of his vision for the original \u201cethernet.\u201d Credit:\u00a0PARC.Keywords: valuation, metcalfe\u2019s law, NVT, PMR, bitcoin, ethereumData sources: etherscan.io, blockchain.info, coinmetrics.io current to Feb 9/10 (BTC/ETH) of 2018tl;dr:Here we report that Metcalfe\u2019s Law, and similar laws, nearly perfectly correlate with ETH and BTC\u2019s USD priceThis suggests that cryptoassets that have reached critical mass behave like online social networks such as Facebook with their value defined by their usage (as measured by daily transactions or active addresses)We examine the Network Value-to-Transactions (NVT) ratio\u200a\u2014\u200aa popular metric for potentially identifying when the USD price of a cryptoasset has exceeded or fallen below the value suggested by its underlying daily USD transaction volumeWe propose a similar formula\u200a\u2014\u200athe Price-to-Metcalfe Ratio (PMR)\u200a\u2014\u200aand propose that it may have some advantages over NVT; however, we recognize that more research is needed before an optimal PMR is determinedNote: an earlier version of this article incorrectly stated the formula for Metcalfe\u2019s Law as M^(1.5). This was a typo in the formula only. M\u00b2 was used for all calculations denoted as M.BackgroundIn the 1980s, Robert Metcalfe, the inventor of Ethernet, proposed a formula:the value of a telecommunications network is is proportional to the square of the number of connected users of the system (n\u00b2)Since its inception, \u201cMetcalfe\u2019s Law\u201d (M) as it is now known, has become an influential formula for studying network effects and valuing online networks.In 2015, Zhang et al. found that Facebook\u2019s revenue\u200a\u2014\u200aa proxy for its value\u200a\u2014\u200awas proportional to the square of its monthly active users (MAU). In fact, M best fit Facebook\u2019s value when compared with other similar laws (Sarnoff\u2019s, Zipf\u2019s, and Reed\u2019s). Zhang also found that M best fit Tencent\u2019s revenue\u200a\u2014\u200aTencent is China\u2019s largest social network. What\u2019s more, Zhang found that the growth trend of Tencent\u2019s and Facebook\u2019s MAU fit the netoid function first defined by Metcalfe in 2013 (more on this later).Building off this work, Ken Alabi applied this thinking to the blockchain and found that Bitcoin, Ethereum and Dash also fit M.Here, we\u2019ll look closely at Bitcoin and Ethereum and show just how closely M fits their respective prices in USD. We\u2019ll also examine modifications of M (M1-M3) and other competing laws, Sardoff\u2019s and Zipf\u2019s, to explore how well these fit prices compared with M. We\u2019ll also examine how daily transaction volume in USD\u200a\u2014\u200awhich we\u2019ll term V\u200a\u2014\u200acorrelates with prices since this measure is the denominator of NVT. Finally, we\u2019ll explore whether we can use M or its variants to generate a ratio similar to NVT.First, our formulas:Sardoff\u2019s Law\u00a0(S)Metcalfe\u2019s Law\u00a0(M)M1M2M3Zipf\u2019s LawN = # daily transactions (or # unique active addresses)S = current supplyBitcoinLet\u2019s start by looking at the Pearson correlation of these 6 formulas with the USD price of BTC.Because we have data on both transactions and unique active addresses for Bitcoin, we\u2019ll examine both. TX will be used to refer to formulas that use transactions and ADR addresses. Also note that we only have data for every other day as opposed to daily which may affect precision. Finally, we\u2019ve removed any early data points at which the USD price was $0.Table 1 displays the Pearson correlation coefficients (r) of BTC\u2019s USD price with our formulas unadjusted (row 1), smoothed using 30-day backward-facing moving averages (row 2), or smoothed using 90-day backward-facing averages (row 3). Only our formulas are smoothed, price is not. Rows 4 to 6 measure the correlation of the natural log of USD price with the natural log of our formulas.Abbreviations: ln, natural log; MA, moving\u00a0averageAll formulas show near perfect correlation with BTC\u2019s USD price, particularly on a natural log scale. In any other field, such a correlation would be considered witchcraft. V, S, and M perform best across all rows. However, the difference in correlation between the formulas is so small, particularly on the natural log scale, that they can all effectively be considered equal.Now let\u2019s see what the data look like when using active addresses.Abbreviations: ln, natural log; MA, moving\u00a0averageUsing unique active addresses increases the correlation of our formulas with BTC\u2019s USD price. V still performs best on a non-log scale whereas S, M and M2 perform best on the natural log scale. As above however, the differences in correlations are so small they can effectively be considered equal.To illustrate the point of just how correlative these formulas are with BTC\u2019s USD price, we\u2019ll overlay the 30-day moving average of BTC USD with that of M2, both on the natural log scale. As seen below, they are nearly identical (note: M2 was chosen because it fits the price curve best and does so without having to adjust for scale).Abbreviations: LN, natural log; MA, moving\u00a0averageNow let\u2019s look at Ethereum.EthereumOnce again we\u2019ll look at the Pearson correlation of these 6 formulas with the USD price of ETH. However, because etherscan does not have data on unique active addresses, we\u2019re forced to rely only on the number of daily transactions as a proxy for network usage. As above, we\u2019ve removed any early data points at which the USD price was $0.Compared with BTC, our formulas show very strong correlation with ETH USD when using transactions even on a non-log scale. This may indicate that these formulas lose some correlative strength over time (we have nearly 8 years of data on BTC vs. <3 years on ETH) or it may suggest that there are features unique to BTC transactions such that active addresses is a better measure of network usage (more on this here).For ETH, V, S and Z show the best overall performance. However, as with BTC, the difference in correlation between the formulas is so small that they can effectively be considered equal.Once again we\u2019ll overlay the charts of M2 with USD price using log-transformed 30-day moving averages.Abbreviations: LN, natural log; MA, moving\u00a0averageRatio Analysis\u00a0(NVT)Given that price correlates so closely with transactions (or active addresses), we can question what current network usage suggests about current price. To do so we will compute a Price-to-Metcalfe Ratio (PMR). Stephen Powaga of ETF Momentum Investing suggests that such a ratio may be somewhat analogous to a price-to-book ratio in equity analysis.The idea here is to study the relationship between the price (or value) of a cryptoasset and its fundamentals (as suggested by network usage). This type of ratio analysis is gaining popularity with Network Value-to-Transactions (NVT) being the most widely studied. For a background on NVT please see recent articles on rethinking NVT by Dmitry Kalichkin and a further expansion of its use as a trading signal by Willy Woo.Let\u2019s start by looking at NVT and defining its formula:Kalichkin\u2019s recent revision uses a 90-day backward-facing moving average (previous versions used a 14-day backward-facing and 14-day forward-facing moving average).While data on daily market capitalization of cryptoassets is easily obtained, both etherscan.io and blockchain.info have this for example, daily transaction volume in USD is not readily available. Coinmetrics.io has this data freely available for both ETH and BTC but they acknowledge some difficulty in estimating it here. What\u2019s more, other researchers calculate it differently as Willy Woo explains here. This underscores one of the potential limitations of NVT: obtaining reliable data.Bitcoin (NVT)Below is a chart of the natural log of BTC\u2019s USD price against its revised NVT ratio.Abbreviations: LN, natural log; MA, moving\u00a0averageAt the \u201cyellow zone\u201d line that Kalichkin suggests (at an NVT of 20) we can see a few areas where NVT may have been useful in predicting major corrections\u2014 moments in time where the price of USD far exceeded its underlying fundamental value as determined by USD transaction volume and resulted in a rapid downward correction.Ethereum (NVT)Applying NVT to ETH, the metric is less convincing but still appears useful. The NVT of ETH throughout its early history pre-2017 was in the hundreds and therefore way above our threshold of 20. Zeroing in on 2017 and beyond however, we see a couple spots where NVT may have helped predict corrections when using a threshold of 20.This is probably a good time to mention that barring formal research the choice of cutoff is somewhat arbitrary, so it\u2019s possible that different assets may benefit from slightly different cutoffs or that more optimal thresholds may be later identified.Limitations of\u00a0NVTAbbreviations: LN, natural log; MA, moving\u00a0averageWhile NVT appears to be a useful metric for predicting major corrections, it does feel like there\u2019s room for improvement.NVT is limited by the fact that on-chain USD transaction volumes are difficult to calculate and different approaches at calculating NVT\u2019s denominator can lead to slightly different conclusions. The other issues is that the numerator and denominator are both a function of the USD price of a cryptoasset. It\u2019s typically not good practice to rely on a predictive ratio that includes what you\u2019re ultimately trying to predict in both its numerator and denominator.That brings us back to Metcalfe and its variations. We\u2019ve already seen that i) these formulas are slightly more correlative than transaction volume, at least on a natural log scale for BTC, ii) they are simpler metrics that rely on data easily obtained from blockchain.info and etherscan.io (in the case of Bitcoin, we can use active addresses and move away from transactions and its limitations), and iii) they are not a function of the USD price.Price-to-Metcalfe Ratio\u00a0(PMR)So what would a PMR look like?To be honest, this is where things got a bit experimental as we relied largely on trial and error rather than formal testing. While we ended up identifying an interesting metric, more formal research may arrive at an even better metric.Given how well our formulas correlated with price on a natural log scale, we decided to focus on log-transformed data and ultimately arrived at the following:To clarify the above, when we say 30-day moving average of M2, we first take the 30-day backward-facing moving average of unique active addresses (or transactions for Ethereum) and then use those values for our daily M2 calculation. 60- or 90-day moving averages could also be used and perform similarly (they are a bit less sensitive but potentially slightly more predictive). And as described above, M2 correlates highly with USD price on a natural log scale and amazingly fits on the same scale as the log-transformed USD price without any additional adjustment.Let\u2019s see how PMR fits with Bitcoin.Bitcoin (PMR)Abbreviations: LN, natural log; MA, moving\u00a0averageAt first glance, we have what appears to be a rather strong leading indicator that accurately predicted 3 of bitcoin\u2019s largest corrections when using a PMR of 1.0 as the cutoff. Using a PMR of -1.25 we can also identify potential accumulation zones.One specific point to highlight is the recent correction we just experienced in early 2018. Bitcoin shot well above a PMR of 1.0, reaching as high as 1.5, before correcting. What\u2019s interesting here is that even after its rebound, it\u2019s still dangerously close to a PMR of 1.0, which is in stark contrast to its NVT. Something worth monitoring.Now let\u2019s turn to Ethereum.Abbreviations: LN, natural log; MA, moving\u00a0averageAs with Bitcoin, a PMR of 1.0 accurately predicted 4 of ETH\u2019s major corrections while a PMR of -0.25 appears to identify strong buying opportunities.Also of note is that PMR did not predict the most recent correction in early 2018\u200a\u2014\u200ain fact, according to PMR, ETH is currently in a strong buy zone. Does this mean that PMR failed? No. We believe the reason for ETH\u2019s crash was Bitcoin\u2019s over-inflated NVT and PMR\u200a\u2014\u200aboth of which indicated that Bitcoin was due for a major correction. And because Bitcoin is the dominant cryptoasset, when it corrects, the entire market tends to move with it.Limitations of PMRDespite the fact that PMR appears to offer some advantages vs. NVT, it\u2019s not without its limitations.We can\u2019t explain why M2 works as well as it does or where it came from.Because PMR relies on transactions or unique active addresses, it cannot capture off-chain transactions. Off-chain solutions like Lightning Network, Raiden, other side chain or state channel scaling solutions that move transactions off the main chain may reduce the predictive power of M2 and its variants over time. Similarly, some proportion of transactions reflects exchanges moving money around (in terms of USD volume this may represent a decent chunk of total volume but in terms of raw numbers of transactions, it may be less an issue).In the case of Ethereum, ERC-20 transactions now represent upwards of one third of all on-chain transactions. Because ERC-20 transactions do not directly relate to trading of ETH, it\u2019s possible that we\u2019ll need to discount transactions in the future by some function to account for the rise in non-ETH transactions. Similarly, as dapps begin to launch and Ethereum sees increased non-speculative usage, further discounting may be needed. On the other hand, perhaps this increased usage will not affect M2\u2019s correlative power. Time will tell.Because of these limitations, we believe that both NVT and some variant of PMR will be useful metrics moving forward.ConclusionsThere is no single indicator that can accurately predict the price of a speculative asset like ETH or BTC as there are too many variables to consider; however, if we accept the premise that blockchain networks that are predominantly in the speculative stages of adoption behave like online telecommunications networks, then Metcalfe may help us to better understand where usage and price intersect and when one has significantly outpaced the other.Whether this continues to hold true is difficult to predict, particularly as networks such as Ethereum begin to see usage beyond speculation. During these early speculative stages, however, the number of transactions or number of unique active addresses likely serves as a close proxy for demand.Ken Alabi addresses this nicely in his paper:Due to the fact that the assets we consider have very little actual use currently\u200a\u2014\u200athey are not really used much as a transactional medium for payment systems, nor even significantly as a payment rail\u200a\u2014\u200ait may be reasonable to interpret their adoption to be based on their perceived future potential. If that potential or value proposition is presented to a selected number of people, the expectation is that the same ratio in that set would convert into acquiring the assets. That group would then communicate that same value proposition to their own social network of friends and acquaintances, and on. Therefore, the basic adoption process might not be very dissimilar from that of a social network.Indeed, when prices rise, demand rises and when prices drop, so too does demand. Price and usage therefore share a symbiotic relationship such that neither can be used to predict one without the other, but what PMR and NVT are likely telling us is that there is a threshold to the extent that one may outpace the other and that reversion to the mean will eventually take place.Kalichkin refers to this concept as reflexivity.Taken in context with other indicators and external factors, both NVT and some variation of PMR may serve as useful additions to the conscious investor\u2019s toolkit. We caution however that thresholds should not serve as markers for immediate action. Instead, we would suggest a conservative approach: when an asset crosses above an upper threshold one could cease buying (as opposed to selling in hopes of timing the top and re-buying at a lower cost) and when an asset crosses a lower threshold one could start buying. The former suggestion is important because our charts show that a cryptoasset may continue rising in price after an upper threshold is breached and may even remain valued at a higher price even after a correction. In other words, it\u2019s difficult to perfectly time the top.Future WorkKen Alabi\u2019s paper suggests a new formula for valuing blockchain networks derived from Metcalfe. It is a more complex function that requires curve-fitting. Future work might involve fitting this function and comparing its performance to our variants tested here.Ken Alabi\u2019s revised model for network\u00a0valueMr. Alabi\u2019s paper also details a model for predicting future growth of a network\u200a\u2014\u200athe netoid function. As with Alabi\u2019s value function, application of this growth function requires curve-fitting. Using the netoid function, Alabi predicted that Bitcoin would reach its maximum growth rate in October of 2017 and that Ethereum would reach its sometime in 2018. The netoid function for these networks should be re-fitted based on recent data.If such a function is a useful predictor of future growth (in terms of transactions or active addresses) then it follows that it may be an accurate predictor of price given how well price correlates with network usage. This could make it a very powerful tool for speculation.Of course, for this to be true, we need to make some assumptions and assert some precautions. For starters, this would require that Metcalfe and its variants continue to maintain their correlative power which might be problematic (see \u201cLimitations of PMR\u201d above). Second, no model of growth can account for external events. A black swan event or the rapid rise of a superior cryptoasset competitor could see network usage dramatically shift in ways that cannot be modeled.As Alabi writes:In as much as the value of the network correlates with the number of users actively participating in it, that value can also prove to be as fleeting as the ease with which those users can move to a different network or cease to participate. The idea behind some of the assets designated for use on the networks studied here is one of fungibility. That fungibility also means that users can create new addresses on different networks and move their assets there easily, or simply just pull their assets out. In short, the ease with which users can move from the blockchain networks of the types studied here exceeds that of networks such as social media, where the user may have cherished items including pictures, conversations, social contacts, and other historical items that may not be as easy to move.We however disagree with Alabi\u2019s assertion that users will readily move between different blockchain networks\u200a\u2014\u200aat least more readily than between social media networks. As blockchain protocols grow and capture significant network effects, particularly through mainstream dapps built on top of their protocols, users will naturally become more vested within the network and its ecosystem making it harder to exit. Social circles are also generated both online and in meatspace which further constrains individuals to their respective blockchains.Finally, future work is needed to formally test PMR, its thresholds, and its variants.\u2014 panek (follow me on Twitter here or email us at clearblocksconsulting@gmail.com)Thanks to Kevin for insights and inspiration for this article.Want to see more content from us?ETH: 0x48324F360fc691Ed3849FfeF0c5778789C3A7f84BTC: 3D7fNUpNtRcXrYubCasntr1HAvRjXVUgf7", "responses": "8"}, {"title": "Predicting Random Numbers in Ethereum Smart Contracts", "author_name": "Arseny Reutov", "link": "https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620?source=search_post", "post_date": "Jan 31, 2018", "readtime": "10 min read", "upvotes": "2.2K", "content": "Predicting Random Numbers in Ethereum Smart ContractsArseny ReutovBlockedUnblockFollowFollowingJan 31, 2018Ethereum has gained tremendous popularity as a platform for initial coin offerings (ICOs). However, it is used in more than just ERC20 tokens. Roulettes, lotteries, and card games can all be implemented using the Ethereum blockchain. Like any blockchain implementation, Ethereum is incorruptible, decentralized, and transparent. Ethereum allows running Turing-complete programs, which are usually written in Solidity, making it a \u201cworld supercomputer\u201d in the words of the platform\u2019s founders. All these features are especially beneficial in the context of computer gambling, in which user trust is crucial.The Ethereum blockchain is deterministic and as such it imposes certain difficulties for those who have chosen to write their own pseudo-random number generator (PRNG), which is an inherent part of any gambling application. We decided to research smart contracts in order to assess the security of PRNGs written in Solidity and to highlight common design antipatterns that lead to vulnerabilities allowing prediction of the future state.Our research was performed in the following steps:3,649 smart contracts were collected from etherscan.io and GitHub.These contracts were then imported into the Elasticsearch open-source search engine.Using the Kibana web UI for rich search and filtering, 72 unique PRNG implementations were found.Based on manual assessment of each contract\u00a0, 43 contracts were identified as vulnerable.Vulnerable implementationsAnalysis identified four categories of vulnerable PRNGs:PRNGs using block variables as a source of entropyPRNGs based on a blockhash of some past blockPRNGs based on a blockhash of a past block combined with a seed deemed privatePRNGs prone to front-runningLet\u2019s examine each category and examples of vulnerable code.PRNGs based on block variablesThere are a number of block variables that may be wrongly used as a source of entropy:block.coinbase represents the address of the miner who mined the current block.block.difficulty is a relative measure of how difficult it was to find the block.block.gaslimit restricts maximum gas consumption for transactions within the block.block.number is the height of current block.block.timestamp is when the block was mined.First of all, all these block variables can be manipulated by miners, so they cannot be used as a source of entropy because of the miners\u2019 incentive. More importantly, the block variables are obviously shared within the same block. So if an attacker\u2019s contract calls the victim contract via an internal message, the same PRNG in both contracts will yield the same outcome.Example 1 (0x80ddae5251047d6ceb29765f38fed1c0013004b7):// Won if block number is even// (note: this is a terrible source of randomness, please don\u2019t use this with real money)bool won = (block.number % 2) == 0;Example 2 (0xa11e4ed59dc94e69612f3111942626ed513cb172):// Compute some *almost random* value for selecting winner from current transaction.var random = uint(sha3(block.timestamp)) % 2;Example 3 (0xcC88937F325d1C6B97da0AFDbb4cA542EFA70870):address seed1 = contestants[uint(block.coinbase) % totalTickets].addr;address seed2 = contestants[uint(msg.sender) % totalTickets].addr;uint seed3 = block.difficulty;bytes32 randHash = keccak256(seed1, seed2, seed3);uint winningNumber = uint(randHash) % totalTickets;address winningAddress = contestants[winningNumber].addr;PRNGs based on blockhashEach block in the Ethereum blockchain has a verification hash. The Ethereum Virtual Machine (EVM) enables obtaining such blockhashes via the block.blockhash() function. This function expects a numeric argument that specifies the number of the block. In the course of research, we discovered that the result of block.blockhash() is frequently misused in PRNG implementations.There are three major flawed variations of such PRNGs:block.blockhash(block.number), which is the blockhash of the current block.block.blockhash(block.number - 1), which is the blockhash of the last block.block.blockhash() of a block that is at least 256 blocks older than the current one.Let\u2019s examine each of these cases.block.blockhash(block.number)The block.number state variable allows obtaining the height of the current block. When a miner picks up a transaction that executes contract code, the block.number of the future block with this transaction is known, so the contract can reliably access its value. However, at the moment of transaction execution in the EVM, the blockhash of the block that is being created is not yet known for obvious reasons and the EVM will always yield zero.Some contracts misinterpret the meaning of the expression block.blockhash(block.number). In these contracts, the blockhash of the current block was deemed known at runtime and was used as a source of entropy.Example 1 (0xa65d59708838581520511d98fb8b5d1f76a96cad):function deal(address player, uint8 cardNumber) internal returns (uint8) {  uint b = block.number;  uint timestamp = block.timestamp;  return uint8(uint256(keccak256(block.blockhash(b), player, cardNumber, timestamp)) % 52);}Example 2 (https://github.com/axiomzen/eth-random/issues/3):function random(uint64 upper) public returns (uint64 randomNumber) {  _seed = uint64(sha3(sha3(block.blockhash(block.number), _seed), now));  return _seed % upper;}block.blockhash(block.number-1)A certain number of contracts use another variation of blockhash-based PRNGs, relying on the blockhash of the last block. Needless to say, this approach is also flawed: an attacker can make an exploit contract with the same PRNG code in order to call the target contract via an internal message. The \u201crandom\u201d numbers for the two contracts will be the same.Example 1 (0xF767fCA8e65d03fE16D4e38810f5E5376c3372A8)://Generate random number between 0 & maxuint256 constant private FACTOR =  1157920892373161954235709850086879078532699846656405640394575840079131296399;function rand(uint max) constant private returns (uint256 result){  uint256 factor = FACTOR * 100 / max;  uint256 lastBlockNumber = block.number - 1;  uint256 hashVal = uint256(block.blockhash(lastBlockNumber));  return uint256((uint256(hashVal) / factor)) % max;}Blockhash of a future blockA better approach is to use the blockhash of some future block. The implementation scenario is as follows:The player makes a bet and the house stores the block.number of the transaction.In a second call to the contract, the player requests that the house announces the winning number.The house retrieves the saved block.number from storage and gets its blockhash, which is then used to generate a pseudo-random number.This approach works only if an important requirement is met. The Solidity documentation warns about the limit of saved blockhashes that the EVM is able to store:Therefore, if a second call was not made within 256 blocks and there is no validation of the blockhash, the pseudo-random number will be known beforehand\u200a\u2014\u200athe blockhash will be zero.The most well-known case of this weakness being exploited is the hack of the SmartBillions lottery. The contract had insufficient validation of the block.number age, which resulted in 400 ETH being lost to an unknown player who waited for 256 blocks before revealing the predictable winning number.Blockhash with a private seedIn order to increase entropy, some of the analyzed contracts employed an additional seed deemed private. One such case is the Slotthereum lottery. The relevant code is as follows:bytes32 _a = block.blockhash(block.number - pointer);for (uint i = 31; i >= 1; i--) {  if ((uint8(_a[i]) >= 48) && (uint8(_a[i]) <= 57)) {    return uint8(_a[i]) - 48;  }}The variable pointer was declared as private, meaning that other contracts cannot access its value. After each game, the winning number between 1 and 9 was assigned to this variable, which was then used as an offset of the current block.number when retrieving the blockhash.Being transparent in nature, the blockchain must not be used to store secrets in plaintext. Although private variables are protected from other contracts, it is possible to get the contents of contract storage off-chain. For instance, popular Ethereum client web3 has the API method web3.eth.getStorageAt(), which allows retrieving storage entries at the specified indices.Given this fact, it is trivial to extract the value of the private variable pointer from the contract storage and supply it as an argument to an exploit:function attack(address a, uint8 n) payable {  Slotthereum target = Slotthereum(a);  pointer = n;  uint8 win = getNumber(getBlockHash(pointer));  target.placeBet.value(msg.value)(win, win);}Front-runningIn order to receive the maximum reward, miners choose transactions to create a new block based on the cumulative gas used by each transaction. The order of transaction execution in a block is determined by the gas price. The transaction with the highest gas price will be executed first. So by manipulating the gas price, it is possible to get a desired transaction executed ahead of all others in the current block. This may constitute a security issue\u200a\u2014\u200acommonly referred to as front-running\u200a\u2014\u200awhen a contract\u2019s execution flow depends on its position in a block.Consider the following example. A lottery uses an external oracle to get pseudo-random numbers, which are used to determine the winner from among the players who submitted their bets in each round. These numbers are sent unencrypted. An attacker may observe the pool of pending transactions and wait for the number from the oracle. As soon as the oracle\u2019s transaction appears in the transaction pool, an attacker sends a bet with a higher gas price. The attacker\u2019s transaction was made last in the round, but thanks to the higher gas price, is actually executed before the oracle\u2019s transaction, making the attacker victorious. Such a task was featured in the ZeroNights ICO Hacking Contest.Another example of a contract prone to front-running is the game called \u201cLast is me!\u201d. Every time a player buys a ticket, that player claims the last seat and the timer starts counting down. If nobody buys the ticket within a certain number of blocks, the last player to \u201ctake a seat\u201d wins the jackpot. When the round is about to finish, an attacker may observe the transaction pool for other contestants\u2019 transactions and claim the jackpot by means of a higher gas price.Towards a safe(r)\u00a0PRNGThere are several approaches for implementing safer PRNGs on the Ethereum blockchain:External oraclesSignidiceCommit\u2013reveal approachExternal oracles:\u00a0OraclizeOraclize is a service for distributed applications that provides a bridge between the blockchain and the external environment (Internet). With Oraclize, smart contracts can request data from web APIs such as currency exchange rates, weather forecasts, and stock prices. One of the most prominent use cases is the ability of Oraclize to serve as a PRNG. Some of the analyzed contracts used Oraclize to obtain random numbers from random.org via the URL connector. This scheme is depicted in Figure 1.Figure 1. Oraclize scheme of operationThe key drawback of this approach is that it is centralized. Can we trust the Oraclize daemon not to tamper with the results? Can we trust random.org and all its underlying infrastructure? Although Oraclize provides TLSNotary verification of the results, it can be used only off-chain\u200a\u2014\u200ain case of a lottery, only after a winner has been chosen. A better use of Oraclize is as a \u201crandom\u201d data source using Ledger proofs that can be verified on-chain.External oracles:\u00a0BTCRelayBTCRelay is a bridge between Ethereum and Bitcoin blockchains. Using BTCRelay, smart contracts in the Ethereum blockchain can request future Bitcoin blockhashes and use them as a source of entropy. One project that uses BTCRelay as a PRNG is The Ethereum Lottery.The BTCRelay approach is not safe against the miner incentive problem. Although this approach sets a higher barrier compared to relying on Ethereum blocks, it simply takes advantage of the fact that the price of Bitcoin is higher than Ethereum, thus reducing but not eliminating the risk of cheating by miners.SignidiceSignidice is an algorithm based on cryptographic signatures that can be used as a PRNG in smart contracts involving only two parties: the player and the house. The algorithm works as follows:The player makes a bet by calling a smart contract.The house sees the bet, signs it with its private key, and sends the signature to the smart contract.The smart contract verifies the signature using the known public key.This signature is then used to generate a random number.Ethereum has a built-in function ecrecover() for verifying ECDSA signatures on-chain. However, ECDSA cannot be used in Signidice since the house is able to manipulate input parameters (specifically, parameter k) and thus affect the resulting signature. A proof-of-concept of such cheating has been created by Alexey Pertsev.Fortunately, with release of the Metropolis hardfork, a modular exponentiation operator has been introduced. This allows implementing RSA signature verification, which unlike ECDSA does not allow manipulating input parameters to find a suitable signature.Commit\u2013reveal approachAs the name implies, the commit\u2013reveal approach consists of two phases:A \u201ccommit\u201d stage, when the parties submit their cryptographically protected secrets to the smart contract.A \u201creveal\u201d stage, when the parties announce cleartext seeds, the smart contract verifies that they are correct, and the seeds are used to generate a random number.A proper commit\u2013reveal implementation should not rely on any single party. Although players do not know the original seed submitted by the owner, and their chances are equal, the owner may also be a player, due to which players cannot trust the owner.A better implementation of the commit\u2013reveal approach is Randao. This PRNG collects hashed seeds from multiple parties, and each party is paid a reward for participation. Nobody knows the others\u2019 seeds so the result is truly random. However, a single party refusing to reveal the seed will result in denial of service.Commit\u2013reveal can be combined with future blockhashes. In this case, there are three sources of entropy:owner\u2019s sha3(seed1)player\u2019s sha3(seed2)a future blockhashThe random number is then generated as follows: sha3(seed1, seed2, blockhash). Thus, the commit\u2013reveal approach solves the miner incentive problem: a miner can decide on the blockhash but does not know the owner\u2019s and player\u2019s seeds. It also solves the owner incentive problem: an owner knows only the owner\u2019s own seed, but the player\u2019s seed and future blockhash are unknown. In addition, this approach solves the case when a person is both owner and miner: that person decides on the blockhash and knows the owner\u2019s seed, but does not know the player\u2019s seed.ConclusionSecure PRNG implementation in the Ethereum blockchain remains a challenge. As our research suggests, developers tend to use their own implementations due to the lack of ready-made solutions. But when creating these implementations, it is easy to make a mistake because the blockchain has limited sources of entropy. When designing a PRNG, developers should be sure to first understand each party\u2019s incentive and only then choose an appropriate approach.", "responses": "11"}, {"title": "Technical Introduction to Events and Logs in\u00a0Ethereum", "author_name": "ConsenSys", "link": "https://media.consensys.net/technical-introduction-to-events-and-logs-in-ethereum-a074d65dd61e?source=search_post", "post_date": "Jun 6, 2016", "readtime": "5 min read", "upvotes": "2K", "content": "Technical Introduction to Events and Logs in\u00a0EthereumConsenSysBlockedUnblockFollowFollowingJun 6, 2016Events and logs are important in Ethereum because they facilitate communication between smart contracts and their user interfaces. In traditional web development, a server response is provided in a callback to the frontend. In Ethereum, when a transaction is mined, smart contracts can emit events and write logs to the blockchain that the frontend can then process. There are different ways to address events and logs. This technical introduction will explain some sources of confusion regarding events and some sample code for working with them.Events can be confusing because they can be used in different ways. An event for one may not look like an event for another. There are 3 main use cases for events and logs:smart contract return values for the user interfaceasynchronous triggers with dataa cheaper form of storageThe terminology between events and logs is another source of confusion and this will be explained in the third use case.1) Smart contract return values for the user interfaceThe simplest use of an event is to pass along return values from contracts, to an app\u2019s frontend. To illustrate, here is the problem.contract ExampleContract {  // some state variables ...  function foo(int256 _value) returns (int256) {    // manipulate state ...    return _value;  }}Assuming exampleContract is an instance of ExampleContract, a frontend using web3.js, can obtain a return value by simulating the contract execution:var returnValue = exampleContract.foo.call(2);console.log(returnValue) // 2However, when web3.js submits the contract call as a transaction, it cannot obtain the return value[1]:var returnValue = exampleContract.foo.sendTransaction(2, {from: web3.eth.coinbase});console.log(returnValue) // transaction hashThe return value of a sendTransaction method is always the hash of the transaction that\u2019s created. Transactions don\u2019t return a contract value to the frontend because transactions are not immediately mined and included in the blockchain.The recommended solution is to use an event, and this is one of the intended purposes for events.contract ExampleContract {  event ReturnValue(address indexed _from, int256 _value);function foo(int256 _value) returns (int256) {    ReturnValue(msg.sender, _value);    return _value;  }}A frontend can then obtain the return value:var exampleEvent = exampleContract.ReturnValue({_from: web3.eth.coinbase});exampleEvent.watch(function(err, result) {  if (err) {    console.log(err)    return;  }  console.log(result.args._value)  // check that result.args._from is web3.eth.coinbase then  // display result.args._value in the UI and call      // exampleEvent.stopWatching()})exampleContract.foo.sendTransaction(2, {from: web3.eth.coinbase})When the transaction invoking foo is mined, the callback inside the watch will be triggered.  This effectively allows the frontend to obtain return values from foo.2) asynchronous triggers with\u00a0dataReturn values are a minimal use case for events, and events can be generally considered as asynchronous triggers with data. When a contract wants to trigger the frontend, the contract emits an event. As, the frontend is watching for events, it can take actions, display a message, etc. An example of this is provided in the next section (a UI can be updated when a user makes a deposit.)3) a cheaper form of\u00a0storageThe third use case is quite different from what\u2019s been covered, and that is using events as a significantly cheaper form of storage. In the Ethereum Virtual Machine (EVM) and Ethereum Yellow Paper[2], events are referred to as logs (there are LOG opcodes). When speaking of storage, it would be technically more accurate to say that data can be stored in logs, as opposed to data being stored in events. However, when we go a level above the protocol, it is more accurate to say that contracts emit or trigger events which the frontend can react to. Whenever an event is emitted, the corresponding logs are written to the blockchain. The terminology between events and logs is another source of confusion, because the context dictates which term is more accurate.Logs were designed to be a form of storage that costs significantly less gas than contract storage. Logs basically[3] cost 8 gas per byte, whereas contract storage costs 20,000 gas per 32 bytes. Although logs offer gargantuan gas savings, logs are not accessible from any contracts[4].Nevertheless, there are use cases for using logs as cheap storage, instead of triggers for the frontend.  A suitable example for logs is storing historical data that can be rendered by the frontend.A cryptocurrency exchange may want to show a user all the deposits that they have performed on the exchange. Instead of storing these deposit details in a contract, it is much cheaper to store them as logs. This is possible because an exchange needs the state of a user\u2019s balance, which it stores in contract storage, but does not need to know about details of historical deposits.contract CryptoExchange {  event Deposit(uint256 indexed _market, address indexed _sender, uint256 _amount, uint256 _time);function deposit(uint256 _amount, uint256 _market) returns (int256) {    // perform deposit, update user\u2019s balance, etc    Deposit(_market, msg.sender, _amount, now);}Suppose we want to update a UI as the user makes deposits. Here is an example of using an event (Deposit) as an asynchronous trigger with data (_market, msg.sender, _amount, now). Assume cryptoExContract is an instance of CryptoExchange:var depositEvent = cryptoExContract.Deposit({_sender: userAddress});depositEvent.watch(function(err, result) {  if (err) {    console.log(err)    return;  }  // append details of result.args to UI})Improving the efficiency of getting all events for a user is the reason why the _sender parameter to the event is indexed: event Deposit(uint256 indexed _market, address indexed _sender, uint256 _amount, uint256 _time)By default, listening for events only starts at the point when the event is instantiated.  When the UI is first loading, there are no deposits to append to.  So we want to retrieve the events since block 0 and that is done by adding a `fromBlock` parameter to the event.var depositEventAll = cryptoExContract.Deposit({_sender: userAddress}, {fromBlock: 0, toBlock: 'latest'});depositEventAll.watch(function(err, result) {  if (err) {    console.log(err)    return;  }  // append details of result.args to UI})When the UI is rendered depositEventAll.stopWatching()  should be called.Aside\u200a\u2014\u200aIndexed parametersUp to 3 parameters can be indexed. For example, a proposed token standard has: event Transfer(address indexed _from, address indexed _to, uint256 _value)\u00a0. This means that a frontend can efficiently just watch for token transfers that are:sent by an address tokenContract.Transfer({_from: senderAddress})or received by an address tokenContract.Transfer({_to: receiverAddress})or sent by an address to a specific address\u00a0tokenContract.Transfer({_from: senderAddress, _to: receiverAddress})ConclusionThree use cases have been presented for events. First, using an event to simply get a return value from a contract function invoked with sendTransaction(). Second, using an event as an asynchronous trigger with data, that can notify an observer such as a UI. Third, using an event to write logs in the blockchain as a cheaper form of storage. This introduction has shown some of the APIs[5] for working with events. There are other approaches to working with events, logs, and receipts[6] and these topics can be covered in future articles.-Joseph Chow. Thanks to Aaron Davis, Vincent Gariepy, and Joseph Lubin for feedback on this article.References[1] web3.js could watch for the transaction to be included the blockchain, then replay the transaction in an instance of the EVM, to get the return value, but this is a significant amount of logic to add to web3.js[2] https://github.com/ethereum/yellowpaper[3] There are gas costs of 375 for a LOG operation, and 375 gas per topic, but when many bytes are being stored, these costs represent an insignificant fraction of the total cost of the storage.[4] Merkle proofs for logs are possible, so if an external entity supplies a contract with such a proof, a contract can verify that the log actually exists inside the blockchain.[5] https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethfilter[6] http://ethereum.stackexchange.com/questions/1381/how-do-i-parse-the-transaction-receipt-log-with-web3-js", "responses": "6"}, {"title": "Getting Deep Into Ethereum: How Data Is Stored In Ethereum?", "author_name": "vasa", "link": "https://hackernoon.com/getting-deep-into-ethereum-how-data-is-stored-in-ethereum-e3f669d96033?source=search_post", "post_date": "Aug 3, 2018", "readtime": "14 min read", "upvotes": "2.5K", "content": "Getting Deep Into Ethereum: How Data Is Stored In Ethereum?In this post, we will see how states and transactions are stored in Ethereum and how it is different from\u00a0Bitcoin.vasaBlockedUnblockFollowFollowingAug 3, 2018This post is a continuation of my Getting Deep Into Series started in an effort to provide a deeper understanding of the internal workings and other cool stuff about Ethereum and blockchain in general which you will not find easily on the web. Here are the other parts of the Series:Getting Deep Into Geth: Why Syncing Ethereum Node Is SlowDownloading the blocks is just a small part. There is a lot of stuff going on... This post marks the first in a new\u2026hackernoon.comGetting Deep Into EVM: How Ethereum Works BackstageAn Ultimate, In-depth Explanation of What EVM is and How EVM Works.hackernoon.comIn this post, we will dive into Ethereum\u2019s data storage layer. We will introduce the concept of blockchain \u201cstate\u201d. We will cover the theory behind the Patricia Trie data structure and demonstrate Ethereum\u2019s concrete implementation of tries using Google\u2019s leveldb database.What do we store in the storage\u00a0layer?First of all, we have to see that what all things we need to store for making the blockchain system work. Let\u2019s take a simple example of Alice giving Bob 10$.As we can see here that we can change the state by executing a transaction on it.Here we have to keep track of the balances and other details of different people(states) and the details of what happens between them on blockchain(transactions). Different platforms handle this differently. Here we will see how Bitcoin and Ethereum handle this.BitcoinBitcoin\u2019s \u201cstate\u201d is represented by its global collection of Unspent Transaction Outputs (UTXOs). The transfer of value in bitcoin is actioned through transactions. More specifically, a bitcoin user can spend one or more of their UTXOs by creating a transaction and adding one or more of their UTXOs as the transaction\u2019s input.This model of UTXO makes Bitcoin different from Ethereum. Let\u2019s see some examples to understand the difference.Firstly, bitcoin UTXOs cannot be partially spent. If a bitcoin user spends 0.5 bitcoin (using their only UTXO which is worth 1 bitcoin) they have to deliberately self-address (send themselves) 0.5 bitcoin in return change. If they don\u2019t send themselves change, they will lose the 0.5 bitcoin change to the bitcoin miner who mines their transaction.UTXO transactionSecondly, at the most fundamental level, bitcoin does not maintain user account balances. With bitcoin, a user simply holds the private keys to one or more UTXO at any given point in time. Digital wallets make it seem like the bitcoin blockchain automatically stores and organizes user account balances and so forth. This is not the case.A visualization of how wallets work in\u00a0bitcoinThe UTXO system in bitcoin works well, in part, due to the fact that digital wallets are able to facilitate most of the tasks associated with transactions. Including but not limited to:a) handling UTXOsb) storing keysc) setting transaction feesd) providing return change addressese) aggregating UTXOs (to show available, pending and total balances)One analogy for the transactions in the UTXO model is paper bills (banknotes). Each account keeps track of how much money it has by adding up the number of bills (UTXOs) in the purse (associated with this address/wallet). When we want to spend money, we use one or more bills (existing UTXOs), enough to cover the cost and maybe receive some change back (new UTXO). Each bill can only be spent once since, once spent, the UTXO is removed from the pool.To summarize, we know that:the bitcoin blockchain does not hold account balancesbitcoin wallets hold keys to UTXOsif included in a transaction, an entire UTXO is spent (in some cases partially received back as \u201cchange\u201d in the form of a brand new UTXO)EthereumIn contrast to the information above, the Ethereum world state is able to manage account balances, and more. The state of Ethereum is not an abstract concept. It is part of Ethereum\u2019s base layer protocol. As the yellow paper mentions, Ethereum is a transaction-based \u201cstate\u201d machine; a technology on which all transaction-based state machine concepts may be built.Let\u2019s start at the beginning. As with all other blockchains, the Ethereum blockchain begins life at its own genesis block. From this point (genesis state at block 0) onward, activities such as transactions, contracts, and mining will continually change the state of the Ethereum blockchain. In Ethereum, an example of this would be an account balance (stored in the state trie) which changes every time a transaction, in relation to that account, takes place.Importantly, data such as account balances are not stored directly in the blocks of the Ethereum blockchain. Only the root node hashes of the transaction trie, state trie and receipts trie are stored directly in the blockchain. This is illustrated in the diagram below.SourceYou will also notice, from the above diagram, that the root node hash of the storage trie (where all of the smart contract data is kept) actually points to the state trie, which in turn points to the blockchain. We will zoom in and cover all of this in more detail soon.There are two vastly different types of data in Ethereum; permanent data and ephemeral data. An example of permanent data would be a transaction. Once a transaction has been fully confirmed, it is recorded in the transaction trie; it is never altered. An example of ephemeral data would be the balance of a particular Ethereum account address. The balance of an account address is stored in the state trie and is altered whenever transactions against that particular account occur. It makes sense that permanent data, like mined transactions, and ephemeral data, like account balances, should be stored separately. Ethereum uses trie data structures to manage data.The record-keeping for Ethereum is just like that in a bank. An analogy is using an ATM/debit card. The bank tracks how much money each debit card has, and when we need to spend money, the bank checks its record to make sure we have enough balance before approving the transaction.A Comparison between UTXO and Account\u00a0approachThe benefits of the UTXO Model:Scalability\u200a\u2014\u200aSince it is possible to process multiple UTXOs at the same time, it enables parallel transactions and encourages scalability innovation.Privacy\u200a\u2014\u200aEven Bitcoin is not a completely anonymous system, but UTXO provides a higher level of privacy, as long as the users use new addresses for each transaction. If there is a need for enhanced privacy, more complex schemes, such as ring signatures, can be considered.The benefits of the Account/Balance Model:Simplicity\u200a\u2014\u200aEthereum opted for a more intuitive model for the benefit of developers of complex smart contracts, especially those that require state information or involve multiple parties. An example is a smart contract that keeps track of states to perform different tasks based on them. UTXO\u2019s stateless model would force transactions to include state information, and this unnecessarily complicates the design of the contracts.Efficiency\u200a\u2014\u200aIn addition to simplicity, the Account/Balance Model is more efficient, as each transaction only needs to validate that the sending account has enough balance to pay for the transaction.One drawback for the Account/Balance Model is the exposure to double spending attacks. An incrementing nonce can be implemented to counteract this type of attack. In Ethereum, every account has a public viewable nonce and every time a transaction is made, the nonce is increased by one. This can prevent the same transaction being submitted more than once. (Note, this nonce is different from the Ethereum proof of work nonce, which is a random value.)Like most things in computer architecture, both models have trade-offs. Some blockchains, notably Hyperledger, adopt UTXO because they can benefit from the innovation derived from the Bitcoin blockchain. We will look into more technologies that are built on top of these two record-keeping models.A closer look at the trie structure in\u00a0EthereumLet\u2019s look at the state, storage and transaction tries in a bit more depth.State trie\u200a\u2014\u200athe one and\u00a0onlyThere is one, and one only, global state trie in Ethereum.This global state trie is constantly updated.The state trie contains a key and value pair for every account which exists on the Ethereum network.The \u201ckey\u201d is a single 160 bit identifier (the address of an Ethereum account).The \u201cvalue\u201d in the global state trie is created by encoding the following account details of an Ethereum account (using the Recursive-Length Prefix encoding (RLP) method):- nonce- balance- storageRoot- codeHashThe state trie\u2019s root node ( a hash of the entire state trie at a given point in time) is used as a secure and unique identifier for the state trie; the state trie\u2019s root node is cryptographically dependent on all internal state trie data.Relationship between the State Trie (leveldb implementation of a Merkle Patricia Trie) and an Ethereum block\u00a0(Source)State Trie\u200a\u2014\u200aKeccak-256-bit hash of the state trie\u2019s root node stored as the \u201cstateRoot\u201d value in a given block. stateRoot: \u20180x8c77785e3e9171715dd34117b047dffe44575c32ede59bde39fbf5dc074f2976\u2019 (Source)Storage trie\u200a\u2014\u200awhere the contract data\u00a0livesA storage trie is where all of the contract data lives. Each Ethereum account has its own storage trie. A 256-bit hash of the storage trie\u2019s root node is stored as the storageRoot value in the global state trie (which we just discussed).SourceTransaction trie\u200a\u2014\u200aone per\u00a0blockEach Ethereum block has its own separate transaction trie. A block contains many transactions. The order of the transactions in a block are of course decided by the miner who assembles the block. The path to a specific transaction in the transaction trie, is via (the RLP encoding of) the index of where the transaction sits in the block. Mined blocks are never updated; the position of the transaction in a block is never changed. This means that once you locate a transaction in a block\u2019s transaction trie, you can return to the same path over and over to retrieve the same result.SourceConcrete examples of tries in\u00a0EthereumThe main Ethereum clients use two different database software solutions to store their tries. Ethereum\u2019s Rust client Parity uses rocksdb. Whereas Ethereum\u2019s Go, C++ and Python clients all use leveldb.Ethereum and\u00a0rocksdbRocksdb is out of scope for this post. This may be covered at a later date, but for now, let\u2019s explore how 3 out of the 4 major Ethereum clients utilize leveldb.Ethereum and\u00a0leveldbLevelDB is an open source Google key-value storage library which provides, amongst other things, forward and backward iterations over data, ordered mapping from string keys to string values, custom comparison functions and automatic compression. The data is automatically compressed using \u201cSnappy\u201d an open source Google compression/decompression library. Whilst Snappy does not aim for maximum compression, it aims for very high speeds. Leveldb is an important storage and retrieval mechanism which manages the state of the Ethereum network. As such, leveldb is a dependency for the most popular Ethereum clients (nodes) such as go-ethereum, cpp-ethereum and pyethereum.Whilst the implementation of the trie data structure can be done on disk (using database software such as leveldb) it is important to note that there is a difference between traversing a trie and simply looking at the flat key/value database.To learn more, we have to access the data in leveldb using the appropriate Patricia trie libraries. To do this we will need an Ethereum installation.Here is a easy to follow tutorial for setting up your own Ethereum private network.How To: Create Your Own Private Ethereum BlockchainDev highlights of this weekmedium.comOnce you have set up your Ethereum private network, you will be able to execute transactions and explore how Ethereum\u2019s \u201cstate\u201d responds to network activities such as transactions, contracts and mining. If you are not in a position to install an Ethereum private network, that\u2019s OK. We will provide our code examples and screen captures from our Ethereum private network.Analysing the Ethereum\u00a0databaseAs we mentioned previously there are many Merkle Patricia Tries (referenced in each block) within the Ethereum blockchain:State TrieStorage TrieTransaction TrieReceipts TrieThe following sections assume that you have installed and configured your very own Ethereum private network, or that you are happy to just follow along as we run some software and talk to Ethereum\u2019s leveldb database.To reference a particular Merkle Patricia Trie in a particular block we need to obtain its root hash, as a reference. The following commands allow us to obtain the root hashes of the state, transaction and receipt tries in the genesis block.Note: If you would like the root hashes of the latest block (instead of the genesis block), please use the following command.Installing npm, node, level and ethereumjsWe will be using a combination of nodejs, level and ethereumjs (which implements Ethereum\u2019s VM in Javascript) to inspect the leveldb database. The following commands will further prepare our environment.From this point, running the following code will print a list of the Ethereum account keys (which are stored in the state root of your Ethereum private network). The code connects to Ethereum\u2019s leveldb database, enters Ethereum\u2019s world state (using a stateRoot value from a block in the blockchain) and then accesses the keys to all accounts on the Ethereum private network.Output for the above\u00a0codeInterestingly, accounts in Ethereum are only added to the state trie once a transaction has taken place (in relation to that specific account). For example, just creating a new account using \u201cgeth account new\u201d will not include that account in the state trie; even after many blocks have been mined. However, if a successful transaction (one which costs gas and is included in a mined block) is recorded against that account, then and only then will that account appear in the state trie. This is clever logic which protects against malicious attackers continuously creating new accounts and bloating the state trie.Decoding the\u00a0dataYou will have noticed that querying leveldb returns encoded results. This is due to the fact that Ethereum uses its own specially \u201cModified Merkle Patricia Trie\u201d implementation when interacting with leveldb. The Ethereum Wiki provides information in relation to the design and implementation of both Ethereum\u2019s Modified Merkle Patricia Trie and Recursive Length Prefix (RLP) encoding. In short, Ethereum have extended on the trie data structures. For example the Modified Merkle Patricia contains a method which can shortcut the descent (down the trie) through the use of an \u201cextension\u201d node.In Ethereum, a single Modified Merkle Patricia trie node is either:an empty string (referred to as NULL)an array which contains 17 items (referred to as a branch)an array which contains 2 items (referred to as a leaf)an array which contains 2 items (referred to as an extension)As Ethereum\u2019s tries are designed and constructed with rigid rules, the best way to inspection them is through the use of computer code. The following example uses ethereumjs. The ethereumjs repositories are easy to install and use; they will be perfect for us to quickly peer into Ethereum leveldb database.The code below (when provided with a particular block\u2019s stateRoot as well as an Ethereum account address) will return that account\u2019s correct balance in a human readable form.Output from the following code (account balance for address 0xccc6b46fa5606826ce8c18fece6f519064e6130b)ConclusionWe have demonstrated above that Ethereum has the ability to manage its \u201cstate\u201d. This clever upfront design has many advantages.MobilityGiven that mobile devices and Internet of Things (IoT) devices are now ubiquitous, the future of e-commerce depends on safe, robust and fast mobile applications.As we acknowledge advances in mobility, we also acknowledge that the constant increase in blockchain size is inevitable. It is not practicable to store entire blockchains on everyday mobile devices.Speed, without compromising securityThe design of Ethereum\u2019s world state and its use of the Modified Merkle Patricia Trie provides many opportunities in this space. Every function (put, update and delete) performed on a trie in Ethereum utilizes a deterministic cryptographic hash. Further, the unique cryptographic hash of a trie\u2019s root node can be used as evidence that the trie has not been tampered with.For example any changes to a trie\u2019s data, at any level (such as increasing an accounts balance in the leveldb database) will completely change the root hash. This cryptographic feature provides an opportunity for light clients (devices which do not store the entire blockchain) to quickly and reliably query the blockchain i.e. does account \u201c0x\u00a0\u2026 4857\u201d have enough funds to complete this purchase at block height \u201c5044866\u201d?\u201cThe size complexity of a Merkle proof is logarithmic in the quantity of data stored. This means that, even if the entire state tree is a few gigabytes in size, if a node receives a state root from a trusted source that node has the ability to know with full certainty the validity of any information with the tree by only downloading a few kilobytes of data in a proof.\u201dSpend limitsAn interesting idea, mentioned in the Ethereum white paper is the notion of a savings account. In this scenario two users (perhaps a husband and wife, or business partners) can each withdraw 1% of the accounts total balance per day. This idea is only mentioned in the \u201cfurther applications\u201d section of the white paper, but it sparks interest because of the fact that, in theory, it could be implemented as part of Ethereum\u2019s base protocol layer (as apposed to having to be written as part of a second layer solution or third-party wallet). You may recall our discussion about bitcoin UTXOs at the start of this article. UTXOs are blind to blockchain data, and as we discussed, the bitcoin blockchain does not actually store a users account balance. For this reason the base protocol layer of bitcoin is far less likely (or perhaps unable to) implement any sort of daily spend limits.Consumer confidenceAs work continues in this space we will see a lot of development in light clients. More specifically, safe, robust and fast mobile applications, which can interact with blockchain technologies.A successful blockchain implementation in the e-commerce space must bolster speed, safety and usability. It is always possible to improve consumer confidence as well as increase mainstream adoption by providing superior usability, safety and performance through smart design.", "responses": "11"}, {"title": "Ethereum & Ethos: A Tale of Two Cryptocurrencies", "author_name": "Shingo Lavine", "link": "https://medium.com/ethos-io/ethereum-and-ethos-cf55ec09968f?source=search_post", "post_date": "Jan 10, 2018", "readtime": "6 min read", "upvotes": "3.3K", "content": "Ethereum & Ethos: A Tale of Two CryptocurrenciesShingo LavineBlockedUnblockFollowFollowingJan 10, 2018Understanding Ethereum is key to understanding Ethos. If Bitcoin is \u201cdigital gold\u201d, i.e. a secure, decentralized and universal store of value that can appreciate or depreciate then Ethereum is digital oil\u200a\u2014\u200aa commodity that powers an ecosystem.Ethereum was one of the original and first token offerings, now commonly referred to as an \u201cICO\u201d although at the time many referred to it as the \u201cEthereum IPO\u201d. In the original Ethereum offering, people who supported the original vision of what Ethereum wanted to develop, showed their support for the project by pre-purchasing the unreleased product with Ether tokens at a price of approximately 2000 Ether per Bitcoin. As Bitcoin at the time traded for approximately $500, each Ether was roughly $.04 each. Using the proceeds from the offering, the Ethereum foundation built the Ethereum Virtual Machine (EVM), a decentralized global virtual supercomputer that eventually used Ether as the gas to execute smart contracts.Smart Contracts refer to Javascript-like code that run on the Ethereum virtual Supercomputer, a decentralized system that pays network participants to execute these contracts. Contracts are programmatically \u201cimmutable\u201d meaning once created and agreed there is no backing out.The Ethos EcosystemIf Ethereum is oil then Ethos is the engine. Ethos is a technology platform that uses the Ethereum Virtual Machine (EVM) along with battle-tested industry standards such as BIP32 and BIP39, as well as new standards such as ETHOS-44. The ultimate objective is to create a cryptocurrency financial ecosystem that is designed to benefit consumers, businesses and developers while protecting the overall safety and soundness of this open system by remaining committed to market based rules, such as KYC & AML, and adopting a regulatory friendly structure to prevent bad actors from participating.The Ethos\u00a0MissionThe mission of Ethos is to create a financial ecosystem that is open, safe and fair for everyone.What does the ETHOS token\u00a0do?Similar to Ethereum, the ETHOS token is the \u201cfuel\u201d that powers the Ethos Ecosystem. This fuel powers a broad range of services including access to the Ethos API and many other services. For example, any developer can build applications that leverage Ethos wallets, keys or data in Bedrock by paying fractional ETHOS tokens for that application. ETHOS tokens reduce the cost for consumers, businesses and developers by enabling micropayments at very low cost to create a safe, secure and verified way for anybody to participate in the new economy.Ethos is open to everyone. Community participation is key to the success and development of the Ethos Ecosystem. The community can get involved in open source development, become a part of the Ethos movement and even in the future provide valuable services to the Ethos Ecosystem. Ethos is about using the powers of the blockchain to rethink how a digital financial ecosystem should operate.How does Ethos use the blockchain?Parts of the Ethos platform operate on the blockchain and other parts don\u2019t. This structure is due to the simple fact that there are certain things blockchains are good at doing (keeping track of assets, verification, high value data persistence) while there are other things (scalability, cost, data storage) that blockchains are not good at doing.The mistake a lot of projects and organizations are making at the moment, especially with the large public appetite for ICOs, is most are trying to force anything they can into the blockchain when in reality the actual uses of blockchain are fairly narrow. That being said, although the current use cases of blockchain are currently narrow, they are in fact quite powerful and have the potential to fundamentally change entire financial ecosystems.Ethos uses the blockchain in a number of ways. First Ethos keeps Nodes of all major coin transactions, and identifies which are \u201cverified\u201d transactions according to registration data held within the Ethos ecosystem. This data can then be accessible by verified stakeholders or interested parties through the Ethos API in exchange for ETHOS tokens.Secondly, Ethos can further identify source of funds for certain blockchain transactions if those funds come into the ecosystem through an Ethos-partnered service such as a registered investment advisor, broker dealer, investment company, etc. Identifying KYC and AML\u2019d funds and transactions enables Ethos to contribute to a safer and more secure blockchain.Thirdly, scalable micropayment channels, or layer 2 scaling solutions, can be utilized on Ethereum involving ETHOS token transfers. This enables extremely cheap financial services for people around the globe who often have no access to financial services while also keeping the integrity of the system with verified source of funds on the blockchain.Finally, smart contracts enable Ethos to build a new financial ecosystem that benefits consumers first. The Ethos Ecosystem also enables consumers to own, and benefit from, assets directly using the properties of provable ownership on the blockchain. While in the traditional economy, direct ownership of an asset is difficult or impossible in some cases, the blockchain allows advanced financial instruments to be owned and custodied by the individual, vastly democratizing access to a global financial ecosystem.How the Ethos platform\u00a0worksBroadly speaking, the Ethos platform has four major componentsThe Ethos Universal Wallet: a self-custodied blockchain asset management architecture open to consumers, institutions and developers.Ethos Smart Keys: a single secure digital key solution that allows secure self-custody or custodial management of hundreds of different coins, tokens and currencies with a single key.Ethos Bedrock: a \u201cStripe for Crypto\u201d processing and development platform that can run scalable applications, broadcast data and verify identity and source of funds on the blockchain.Ethos API: a way for financial institutions to seamlessly connect with financial institutions creating a new breed of FinTech applications.What are the benefits of\u00a0Ethos?Ethos is designed to use existing standards within the cryptocurrency ecosystem, while adding functional benefits and additional standards to make it safe, secure and capable of integrating into the traditional financial ecosystem.These include the following benefits:The Ethos Universal Wallet will include verified addresses to ensure there is a real person with a social profile behind every transaction securely stored on the blockchain. This practically means that before sending funds, a consumer will be able to know the history of a given address, and if it has been registered in the Ethos ecosystem or not.Ethos KYC / AML will enable verified source of funds and an extra level of security for wallets, addresses and accounts to combat money laundering and fraud. This will be a step up from a \u201cverified\u201d address.Ethos Premium Wallet addresses enable brands and individuals to officially register wallet handles, providing a safe identity, and a convenient email-like address for easier payments and a greatly reduced likelihood of error.Ethos transaction history will enable consumers and investment advisors to create tax-friendly transaction history, making it easier for consumers and businesses to properly manage and pay taxes.The Ethos Ecosystem provides a robust consumer and regulatory friendly experience that increases access to financial services, lowers cost to consumers and enables a people-powered movement towards a fair and open economy.How Ethos fits\u00a0inEthos is fundamentally changing an entire model by putting a few things on the blockchain. Asset management, pro-rated access and provable ownership are important ideas that blockchain allows you to rethink and rebuild. Blockchain enables a community powered, consumer-centric and regulatory friendly financial ecosystem to seamlessly operate with existing financial systems.Crypto Kitties Stress-Testing EthereumAn application that unexpectedly took the Ethereum virtual Supercomputer by storm is Cryptokitties, a way for users to buy tokenized pets that can be bred together to create new and distinct pets, kind of like a decentralized version of Tamagotchi. Some Crypto Kitties have sold for over 100 Ether, or over $100,000 USD given their unique and rare nature. Crypto Kitties should be viewed as something exciting since it is proof that Ethereum works and that the concept behind Ethereum really is as powerful as people say it is.Crypto Kitties, however, also demonstrates the need for Ethereum to scale without the price of gwei (gas in the Ethereum system) going up too much when an application gets popular. There are a lot of Ethereum scaling proposals being considered right now by the Ethereum Foundation (Raiden, Plasma, PoS, Sharding) which should provide a lot of confidence in the Ethereum platform and its ability to scale. This is especially true when looking broadly at the blockchain space as current scaling proposals being considered by other chains are either non-existent or untenable. Ethereum is also the only widely adopted smart contracts platform with over 1 million smart contracts\u200a\u2014\u200aeach representing a Dapp or decentralized application.Ethereum is clearly the platform of choice for an application like Ethos and we are excited for what we can build using this new, innovative technology.Shingo LavineFounder and CEOEthos.io", "responses": "10"}, {"title": "Twelve reasons I\u2019m bullish about Ethereum\u00a0today", "author_name": "Lane Rettig", "link": "https://medium.com/crypto-nyc/twelve-reasons-im-bullish-about-ethereum-today-809a234312b2?source=search_post", "post_date": "Sep 23, 2018", "readtime": "8 min read", "upvotes": "4.7K", "content": "Twelve reasons I\u2019m bullish about Ethereum\u00a0todayLane RettigBlockedUnblockFollowFollowingSep 23, 2018We\u2019ve got some fight in us yet. Photo by Xuan Nguyen on Unsplash.I\u2019m going to keep this short, straight, and to the point. I\u2019m more excited about Ethereum today than at any point before. (This should go without saying, but I am of course talking about the technology and the ecosystem in general, not about the price of ether.) Here\u2019s why:Reason 1: The Ethereum 2.0 roadmap is coming together. Yes, Shasper is going to take a while longer (did anyone really expect it to be delivered on time anyway?) and yes, the spec has evolved rapidly over the past year, but my spidey senses tell me that this time it\u2019s for real. The building blocks (Casper FFG, sharding, Beacon chain, libp2p, Ewasm, etc.) are fairly well solidified by now and we\u2019re primarily just working out the details. Lots of incredible minds have joined Ethereum research and development lately, and many independent, funded teams are working towards an Ethereum 2.0 proof of concept implementation. I\u2019m going to make a bold claim: there are no insurmountable challenges left. What\u2019s left is implementation details, parameterization, testing, and shipping the code. It\u2019s just a matter of time before Ethereum scales.Reason 2: Maker Dao is working. I mean, holy crap! It\u2019s actually working and the Dai supply is continually, steadily growing. Maker is complex and seeing it come to life is like watching a Rube Goldberg machine spinning up. It survived the insane bear market of the past few months, collateralization never fell to dangerous levels, and new CDPs continue to be opened. While lots of stable coin projects have been making a lot of noise over the past year, Maker shipped and just keeps on shipping. If this isn\u2019t proof positive of what\u2019s possible with the right set of incentives and primitives on Ethereum today, I don\u2019t know what is. I\u2019ve noticed people in the community beginning to use Dai regularly as a replacement for fiat. As if that isn\u2019t cool enough already, multi-collateral Dai is verified and coming soon. This is big.Dai supply this year\u00a0(source)Reason 3: Wallet UX is getting better. Much, much better. Think about where we were a year ago, and look at the landscape today: imToken, Coinbase Wallet, Walleth, Trust Wallet, Cipher Browser, and Status are all usable and their UX improves by the day. In the past couple of months alone Status has fixed several usability issues including storing the login password and user pseudonyms. It\u2019s not perfect, but it\u2019s now actually usable. Balance Manager is live, Balance Wallet and many other amazing wallet apps are coming soon, and Wallet Connect has emerged as an open-source standard to connect mobile wallet apps to the desktop. Initiatives like the Web3 Design Principles, #WalletConf/#UXUnconf, and #OpenSourceWeb3Design are really having an impact.Reason 4: Loom is working. They keep on shipping as well. They have a real, usable game called Zombie Battleground built on a working Plasma implementation. The entire thing runs on Ethereum and the users don\u2019t even know it, which is kinda the holy grail. And their monetization model, replacing obnoxious in-game purchases with marketplace fees, is promising. They stand as good a chance as anyone of delivering the first smash hit, 100,000-user Ethereum app.Zombie Battleground from Loom, which allows users to collect, trade, and battle using collectible, ERC721-based cards.\u00a0(source)Reason 5: More and more Ethereum clients are being developed. The past few months have seen the introduction of Nimbus, Pantheon, and, most recently, Lighthouse, joining an ever-growing list of now more than 10 client implementations. These clients are also increasingly being developed by large, professional, well-funded teams. Each of these clients optimizes for something slightly different: Nimbus, for example, is optimized for resource constrained devices like mobile phones, while Pantheon is designed to be fully modular and is built in Java to support enterprise use cases. More clients, more developers, and more researchers means more diversity in opinion, more decentralization in research, roadmap, and development, and more resilience against a bug in any individual implementation.The Ethereum 2.0 Implementers calls, hosted by Danny Ryan. The all core devs and research calls are truly getting\u00a0crowded!Reason 6: Staking is a thing, now, and the first time you try it, it\u2019s truly mindblowing, like minting money out of thin air. I had this experience recently when I delegated some Livepeer tokens (LPT) to a transcoder. It only takes a moment, and then you can forget it completely and come back later to collect your reward. As you can see below, I earned 11.82 LPT after staking 25 LPT for 102 rounds (around 13 weeks). That\u2019s a 47% return over the period, or about 189% annualized. Economically speaking, earnings will decrease as more people mine and stake their tokens, but as more projects enable staking (including Ethereum itself) and as the UX improves, staking will have enormous potential to become the \u201csavings account of the future\u201d for millions of people.Delegating on the Livepeer Protocol Explorer. Money doesn\u2019t grow on trees, but tokens do\u200a\u2014\u200aon Merkle trees, that is\u00a0:)Reason 7: Ethereum governance may move slowly and may be somewhat frustrating, but it grinds on steadily and it hasn\u2019t broken yet. The past few months have seen tons of progress: from the birth of the Fellowship of Ethereum Magicians and #EIP0 movements, to consensus around EIP-1234 which postpones the difficulty bomb and reduces the size of block rewards, to the finalization of the rest of the Constantinople hard fork. Lively, occasionally raucous discussion continues around ASIC resistance and changing the proof of work algorithm. Nearly a year after the Parity wallet funds were locked, even the most controversial topic, funds recovery, has not irreparably divided the community. Compared to the glacial pace of Bitcoin governance (which has led to multiple forks) and the dumpster fire that is Eos governance, Ethereum governance is in fine fettle.Reason 8: More and more excellent educational resources keep appearing. This year, Karl spearheaded the creation of Cryptoeconomics.study, a complete, free, open source online course. Blockgeeks continues to turn out mountains of excellent material. Andreas Antonopoulos is close to releasing Mastering Ethereum (which is also open source!). Chainshot lets you simultaneously learn Solidity design patterns, build a working dapp, and deploy it. Zeppelin released Ethernaut, a gamified Web3/Solidity learning platform focused on security. And Loom took the Ethereum world by storm with CryptoZombies. Collectively, these resources will introduce a new generation of developers and enthusiasts to the Ethereum technology and community.CryptoZombies uses a clever narrative (creating a zombie army) to introduce users to highly technical concepts such as non-fungible tokens. Dastardly!Reason 9: Ecosystem funds are popping up faster than I can keep track of, providing Ethereum projects with plenty of alternatives to traditional venture capital. The Stable Fund, ECF, Status Incubate, EF grants, ETHPrize, and Aragon Nest all launched this year and are all working hard to route grant funding towards the best, most capable teams and projects creating the most value for the ecosystem. The grant process can still be slow and frustrating, but it is improving and I\u2019ve recently seen lines of communication opening among the various grants teams. Similarly, bounty systems such as Gitcoin and the Bounties Network are proliferating.Reason 10: The ecosystem is finally beginning to dogfood its own apps. We cannot call Ethereum or Web3 a success until we begin replacing the constellation of centralized Web2 apps and services that we use every day\u200a\u2014\u200aSlack, GMail, Twitter, Reddit, etc.\u200a\u2014\u200awith decentralized alternatives. Status recently announced that they\u2019ll soon be replacing Slack with (you guessed it) Status itself (there\u2019s something elegantly recursive about that, isn\u2019t there?). ETHBerlin dogfooded a ton of dapps including Status, BRLN coin, and Zinc. Yes, many of these dapps still feel like toys and there\u2019s still a lot of work to be done to improve performance and usability, but this is a critical inflection point nonetheless.The #ethberlin public channel on Status. Tasty\u00a0dogfood!Reason 11: SpankChain is working and has built a thriving ecosystem. Like Loom Network (described above) SpankChain is severely under-hyped but the team continues to ship working code. They\u2019ve deployed a live, beta cam site with micropayment tipping functionality built on their own custom state channels implementation. They recently shipped a staking system, dubbed the SpankBank. They\u2019re close to shipping an in-house, state-channels based decentralized exchange. And, most importantly, their work is making a difference: I\u2019ve heard firsthand from their performers about the troubles they face when banks arbitrarily shut down their bank accounts and freeze their funds, problems that SpankChain solves.SpankChain\u2019s beta camsite is live with video, chat, and tipping, proving that micropayments on Ethereum can be a\u00a0thing.Reason 12: Last but certainly not least, there\u2019s the Ethereum community, which has exploded over the past year. Community is admittedly a vague concept and I\u2019m not going to try to clearly define it here, but I can say from tons of firsthand experience meeting the global Ethereum community the past year that it\u2019s extremely healthy and continually growing. One need only attend a conference like EthCC or an excellent ETHGlobal hackathon like the recent ETHBerlin to see what I mean. The community is about more than cool technology: it\u2019s taking on more and more of the characteristics of a fully-fledged social and even political movement. As the first \u201cEthereum killer\u201d chains begin to launch over the next few months and advanced blockchain technology increasingly becomes commoditized, I feel strongly that the size and strength of the Ethereum community will continue to set it apart for the foreseeable future. It\u2019s a community of missionaries, not mercenaries. With a few rainbows and unicorns thrown in for good measure. \ud83c\udf08\ud83e\udd84About the author: Lane Rettig is an independent Ethereum core developer and a member of the Ewasm team. He founded and helps run Crypto NYC, a Manhattan-based co-working space and community that strives to make Web3 technology accessible to all humans. Find him on Twitter at @lrettig.", "responses": "6"}, {"title": "Introducing Ethereum on\u00a0Zebpay", "author_name": "Zebpay", "link": "https://blog.zebpay.com/introducing-ethereum-on-zebpay-86a529e931dd?source=search_post", "post_date": "Feb 23, 2018", "readtime": "2 min read", "upvotes": "1.4K", "content": "Introducing Ethereum on\u00a0ZebpayZebpayBlockedUnblockFollowFollowingFeb 23, 2018We are excited to announce Ether trading support on Zebpay. Starting today all our users will be able to buy, sell, send and receive Ethereum (ETH) using Zebpay.According to the official website, \u201cEthereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third-party interference.\u201d It worked out as they had envisioned it. Only 3 years after the official launch, it has created a new ecosystem of decentralized applications working with each other in synergy.A large number of tokens in the top 100 of Coinmarketcap are built using the Ethereum technology. From renting out storage space and computing resources to useless tokens and viral cats on the blockchain, people are using the Ethereum technology for all kinds of things. At the heart of all this lies Ether, which is used as a fuel to run smart contracts on the Ethereum blockchain.Ethereum was bootstrapped with a presale in 2014 at the price of around Rs 20\u201330. At its peak, Ether reached an all time high of around Rs 1,00,000 in January 2017. Make sure you check price, total supply and other stats for ETH on Coinmarketcap before you start trading.SupportI cannot see ETH optionHow to send/receive ETH?How to check ETH transaction details?", "responses": "8"}, {"title": "The State of Scaling\u00a0Ethereum", "author_name": "ConsenSys", "link": "https://media.consensys.net/the-state-of-scaling-ethereum-b4d095dbafae?source=search_post", "post_date": "Apr 24, 2018", "readtime": "9 min read", "upvotes": "2.5K", "content": "The State of Scaling\u00a0EthereumConsenSysBlockedUnblockFollowFollowingApr 24, 2018A concise overview of the challenges and solutions to scaling the Ethereum NetworkEthereum developers have long known that scaling the network is a subject worth discussion and investment. The matter did not quite spill out from the developer community, however, until late 2017, when a decentralized application (dApp) named CryptoKitties attracted so much traffic it began slowing down the network. On top of network latency, the price of gas\u200a\u2014\u200athe fee required to run each operation within a contract on the Ethereum blockchain\u200a\u2014\u200asoared as users competed for their transactions to be validated.Though the story is now over-reported and exhausted, the CryptoKitties situation revealed that Ethereum in its current state may not be prepared for the amount of traffic that would accompany the launch of a successful dApp. Slow speeds and volatile usage-costs drive people away from platforms and applications. DApp developers are charging ahead to release the first widely-adopted application, so Ethereum developers must continue working to scale the blockchain.The \u201cTrilemma\u201dOne theory of blockchain technology is that a network can only support two of the following: security, decentralization, and scalability. This \u201ctrilemma\u201d\u200a\u2014\u200aas it has become known\u200a\u2014\u200ahas been the challenge of Ethereum developers as they they seek to maintain the core tenets of blockchain (decentralization and security) while scaling it for widespread adoption and implementation. Some of the more immediate fixes for scalability, for instance, severely impact security or decentralization:The use of altcoins is one theoretical solution to scalability concerns. The option is to abandon the idea of one blockchain off of which all transactions occur, and instead adopt a model where multiple altcoins coexist, all of which operate on separate blockchains. The reduced traffic-per-blockchain would allow this constellation of blockchains to scale. However, with fewer nodes acting on each blockchain, each blockchain is more susceptible to attack and malicious users. The use of altcoins, therefore, maintains decentralization and improves scalability, but severely impacts security.Increasing block size is another theoretical solution to scalability concerns. If the Ethereum community voted to increase the size of each block, all nodes could still perform all operations, but more transactions could be performed in the same amount of time, therefore speeding up the network. With larger block sizes, however, each transaction requires more energy, and fewer and fewer nodes will be able to expend that amount of energy. The result would be a future where the network is maintained by a handful of supercomputers with the tremendous processing power needed to verify each block. Increased block size, therefore, maintains security and improves scalability, but severely decreases how decentralized the network is.The primary concern with blockchain development was security and decentralization. The primary hindrance to scalability, therefore, is that every node currently must process every transaction. Though undeniably secure and decentralized, this process does not allow much room for scalable growth. The question becomes, therefore, how do we engineer Ethereum to be able to scale without compromising security and decentralization?There are four primary protocols in development that will address the issues of scalability. Sharding, Plasma, and Raiden were proposed specifically to help Ethereum scale. The fourth protocol, Casper, is much broader in scope, but will have scalability implications on top of many others.ShardingSharding is one method of scaling that maintains all transactions on the original blockchain, therefore known as an \u201con-chain\u201d solution. Sharding addresses the issue that all transactions on Ethereum are sequential, since every node must process every transaction. Sharding allows for operations to run simultaneously alongside one another, therefore increasing the number of transactions per second the overall blockchain can process. With sharding, the Ethereum network is divided into multiple groups of nodes. Each of these groups is a shard, and each shard processes all the transactions that occur within that group. This allows all shards to each process different transactions simultaneouslyWithin each shard, certain nodes called \u201ccollators\u201d would regularly create a \u201ccollation,\u201d or a set of information about that shard. Each collation contains the following information:Information about which shard the collation came from.Information about the state of the shard before the transactions are applied.Information about the state of the shard after the transactions will be applied.Digital signatures from \u2154 of the collators validating the information in the collationAcross the network, the collations from each shard are aggregated into a single block and added to the Ethereum blockchain. Sharding, therefore, allows these groups of nodes to process and verify transactions, while the only information added to the blockchain is the diluted information found in collations. If, for instance, there are ten shards, and each shard processes five transactions, then the next block would include a record of fifty transactions on the blockchain, rather than just a few had it run transactions sequentially.Two issues arise with sharding. First, each shard must contain enough nodes to ensure network security. If a shard contains too few nodes, \u2154 of the collators could be compromised and begin acting maliciously. Second, there is no easy way to process a transaction that occurs between two shards instead of within just one (an issue that doesn\u2019t exist with one, whole blockchain). The current method requires a cumbersome series of receipts and proofs.PlasmaPlasma is another method of scaling that processes transactions \u201coff-chain,\u201d i.e. not on the primary Ethereum blockchain. Plasma allows for many blockchains (called \u201cchild chains\u201d) to stem from the original blockchain (called the \u201croot chain\u201d). Each child chain, therefore, can process and maintain its own records of transactions while relying on the underlying security of the root chain. With Plasma, the root chain is the global enforcer of the computation happening on all the child chains. The root chain, however, only needs to be computed if a dispute arises within one of the child chains. This method allows for an entire network of child chains to divide up all the transactions on the blockchain in order to best optimize speed and efficiency. If the nodes on a child chain desire, they can submit an exit transaction and export a record of their transactions to the root chain.This method has one particular strength. Each plasma chain can have its own qualities and set of standards. This means that different child chains can support transactions with varying requirements (i.e. privacy), while all still occuring within the same, secure ecosystem.RaidenRaiden is another off-chain scaling solution that allows nodes to maintain a record between them without requiring the root chain to verify every transaction. Two nodes can open up a \u201cstate channel\u201d between them, which is a two-way channel between users. \u201cMessages\u201d\u200a\u2014\u200ain the form of transactions\u200a\u2014\u200aoccur between the two nodes and are signed by each party to ensure immutability. Raiden is particularly useful for payments that are frequent and expected\u200a\u2014\u200ai.e. a user that knows they will pay a company $10 a week for a service, or a user who knows they will spend money at their local grocery store regularly. With transactions recorded and verified between these two nodes instead of on each block, the root chain is freed of an immense amount of traffic. At any time, either participant in a state channel can choose to close the transaction, and the net result of all the transactions is exported to the root blockchain and included in the next block. That means that after a year of subscribing to the $10/week service, the user could have the block verify one $520 transaction instead of 52 separate $10 transactions.The Raiden solution comes with one primary caveat and one primary benefit. The caveat is that nodes can only communicate with their \u201cneighbors\u201d\u200a\u2014\u200ameaning that if node A and node B have a state channel open, and node B and node C have a statement channel open, node A cannot send funds directly to node C. However, transactions can be forwarded through channels in such a way that they cannot be stolen or locked up along the way. Node A could send a transaction to node C by using node B as an intermediary in such a way that node B could not possibly steal the funds. As the primary benefit, Raiden drastically reduces gas prices for each transaction. Transactions that happen off-chain between nodes require less gas to process than transactions that occur on the root chain.CasperCasper is a protocol by which Ethereum\u2019s current Proof of Work (PoW) model will change to Proof of Stake (PoS). With PoW, miners currently must expend energy in order to solve a cryptographic equation and mine a block. They are rewarded if they solve the equation, but the process requires immense energy (and will continue to require more and more). This is costly and energy-inefficient, currently costing $1.2 billion USD/year to maintain the PoW model.In PoS, \u201cvalidators\u201d replace miners, and they \u201cvalidate\u201d (instead of mine) blocks onto the blockchain. Instead of expending energy on a certain block, validators stake their funds on a certain block. The block that has the most funds staked on it is verified and added to the blockchain. Essentially, validators \u201cbet\u201d that a certain block will be added to the chain by locking their funds in a contract until the next block is added. They are rewarded if they placed their bet on the correct block. They lose their funds if they act maliciously by trying to validate a block with incorrect or corrupt information.Conceptually, this shift should protect the blockchain against malicious attacks. With PoW, a failed attack on the blockchain costs the attacker time and power. With PoS, a failed attack on the blockchain directly costs the user money, as s/he immediately loses all the funds staked on the wrong block.The final rollout of Casper will be preceded by two iterations of the protocol: Casper FFG and Casper CBC. These iterations will be deployed on Ethereum in order to test PoS on the network and identify potential issues before completely switching over.Casper FFGCasper FFG (Friendly Finality Gadget) will be the first iteration of Casper, likely released during Ethereum\u2019s next hard fork, Constantinople. In Casper FFG, blocks are still mined with PoW. However, every fifty blocks, validators step in to test the PoS mechanism. This \u201ccheckpoint\u201d uses the PoS protocol to assess and confirm finality. Finality means that an operation is complete and entirely immutable. In FFG, the validators stake funds to finalize the previous fifty blocks in the chain.Casper CBCCasper CBC (Correct-by-Construction) will be the second iteration of Casper. Typically, a protocol is formally specified and then proven that it satisfies all the given properties. With CBC, the PoS protocol is only partially specified, and then further fine-tuned in order to satisfy the properties it was meant to follow. Essentially, instead of being fully defined from the beginning, the protocol is actively and constantly derived. This is achieved through the implementation of a proof known as an \u201cideal adversary,\u201d which is able to raise exceptions, faults, and future failures of the protocol.The final Casper protocol will likely be deployed with learnings from both FFG and CBC. The protocol is much broader in scope than just scalability, including energy and security improvements as well. Less energy per node required to add a block to the chain, however, means that the network will improve current scalability hardships. Though Casper is not being developed specifically to address scaling concerns, it will certainly have a positive impact on the ability of the network to handle higher traffic.Looking Down the\u00a0RoadThe four proposals above are not mutually exclusive\u200a\u2014\u200athey can and likely will all be implemented to some degree to help the Ethereum network scale over time. Scaling will be top of mind for Ethereum developers in 2018. As more and more popular dApps are developed and launched, we will see a continuous fine-tuning of the scaling options available in order to allow Ethereum its full potential.Everett Muzzy, ConsenSysDisclaimer: The views expressed by the author above do not necessarily represent the views of Consensys AG. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": "17"}, {"title": "Onward with Ethereum Smart Contract\u00a0Security", "author_name": "Manuel Araoz", "link": "https://blog.zeppelin.solutions/onward-with-ethereum-smart-contract-security-97a827e47702?source=search_post", "post_date": "Aug 16, 2016", "readtime": "12 min read", "upvotes": "1.7K", "content": "Onward with Ethereum Smart Contract\u00a0SecurityManuel AraozBlockedUnblockFollowFollowingAug 16, 2016If you\u2019re new to Ethereum development, I recommend you read our Hitchhiker\u2019s Guide to Smart Contracts in Ethereum before proceeding.Learning Ethereum Smart Contract security is a very hard endeavor. There are few good guides and compilations, such as Consensys\u2019 Smart Contracts Best Practices, or the Solidity Documentation Security Considerations. But the concepts are very hard to remember and internalize without writing your own code.I\u2019ll attempt a slightly different approach. I\u2019ll explain some recommended strategies to improve smart contract security and show code examples where not following them results in problems. I\u2019ll also show you code samples you can use to protect your smart contracts. Hopefully, this will help create a muscle memory of things to avoid, which will trigger mental warnings when writing actual code.Without further ado, let\u2019s dive into the best practices:Fail as early and loudly as\u00a0possibleA simple yet powerful programming good practice is to make your code fail as promptly as possible. And be loud about it. Let\u2019s see an example of a function that behaves timidly:// UNSAFE CODE, DO NOT USE!contract BadFailEarly {  uint constant DEFAULT_SALARY = 50000;  mapping(string => uint) nameToSalary;  function getSalary(string name) constant returns (uint) {    if (bytes(name).length != 0 && nameToSalary[name] != 0) {      return nameToSalary[name];    } else {      return DEFAULT_SALARY;    }  }}We want to avoid a contract failing silently, or continuing execution in an unstable or inconsistent state. The function getSalary is checking for conditions before returning the stored salary, which is a good thing. The problem is, in case those conditions are not met, a default value is returned. This could hide an error from the caller. This is an extreme case, but this kind of programming is very common, and normally arises from fear of errors breaking our app. Truth is, the sooner we fail, the easier it will be to find the problem. If we hide errors, they can propagate to other parts of the code and cause inconsistencies which are difficult to trace. A more correct approach would be:contract GoodFailEarly {  mapping(string => uint) nameToSalary;    function getSalary(string name) constant returns (uint) {    if (bytes(name).length == 0) throw;        if (nameToSalary[name] == 0) throw;        return nameToSalary[name];  }}This version also shows another desirable programming pattern which is separating preconditions and making each fail separately. Note that some of these checks (especially those depending on internal state) can be implemented via Function Modifiers.Favor pull over push\u00a0paymentsEvery Ether transfer implies potential code execution. The receiving address can implement a fallback function that can throw an error. Thus, we should never trust that a send call will execute without error. A solution: our contracts should favor pull over push for payments. Take a look at this innocent looking code for a bidding function:// UNSAFE CODE, DO NOT USE!contract BadPushPayments {  address highestBidder;  uint highestBid;   function bid() {    if (msg.value < highestBid) throw;    if (highestBidder != 0) {      // return bid to previous winner      if (!highestBidder.send(highestBid)) {        throw;      }    }    highestBidder = msg.sender;    highestBid = msg.value;  }}Note that the contract calls the send function and checks its return value, which seems reasonable. But it calls send in the middle of a function, which is unsafe. Why? Remember that, as stated above, send can trigger the execution of code in another contract.Imagine someone bids from an address which simply throws an error every time someone sends money to it. What happens when someone else tries to outbid that? The send call will always fail, bubbling up and making bid throw an exception. A function call that ends in error leaves the state unchanged (any changes made are rolled back). That means nobody else can bid, and the contract is broken.The easiest solution is to separate payments into a different function, and have users request (pull) funds independently of the rest of the contract logic:contract GoodPullPayments {  address highestBidder;  uint highestBid;  mapping(address => uint) refunds;    function bid() external {    if (msg.value < highestBid) throw;        if (highestBidder != 0) {      refunds[highestBidder] += highestBid;    }        highestBidder = msg.sender;    highestBid = msg.value;  }    function withdrawBid() external {    uint refund = refunds[msg.sender];    refunds[msg.sender] = 0;    if (!msg.sender.send(refund)) {      refunds[msg.sender] = refund;    }  }}This time, we use a mapping to store refund values for each outbid bidder, and provide a function to withdraw their funds. In case of a problem in the send call, only that bidder is affected. This is a simple pattern that solves many other problems (such as reentrancy), so remember: when sending ether, favor pull over push payments.I\u2019ve implemented a contract you can inherit from to easily use this pattern.Order your function code: conditions, actions, interactionsAs an extension of the fail-early principle, a good practice is to structure all your functions as follows: first, check all the pre-conditions; then, make changes to your contract\u2019s state; and finally, interact with other contracts.Conditions, actions, interactions. Sticking to this function structure will save you lots of problems. Let\u2019s see an example of a function using this pattern:function auctionEnd() {  // 1. Conditions  if (now <= auctionStart + biddingTime)    throw; // auction did not yet end  if (ended)    throw; // this function has already been called  // 2. Effects  ended = true;  AuctionEnded(highestBidder, highestBid);  // 3. Interaction  if (!beneficiary.send(highestBid))    throw;  }}This is in line with the fail fast principle, as conditions are checked in the beginning. It also leaves potentially dangerous interactions with other contracts to the very end.Be aware of platform\u00a0limitsThe EVM has a lot of hard limits on what our contracts can do. These are platform-level security considerations, but may threaten your particular contract\u2019s security if you don\u2019t know about them. Let\u2019s take a look at the following innocent-looking employee bonus management code:// UNSAFE CODE, DO NOT USE!contract BadArrayUse {    address[] employees;    function payBonus() {    for (var i = 0; i < employees.length; i++) {      address employee = employees[i];      uint bonus = calculateBonus(employee);      employee.send(bonus);    }       }    function calculateBonus(address employee) returns (uint) {    // some expensive computation ...  }}Read the code: it\u2019s pretty straight-forward and seems correct. It hides 3 potential problems, though, based on platform limits.The first problem is that the type of i will be uint8, because this is the smallest type that is required to hold the value 0. If the array has more than 255 elements, the loop will not terminate, resulting in gas depletion. Better use the explicit type uint for no surprises and higher limits. Avoid declaring variables using var if possible. Let\u2019s fix that:// STILL UNSAFE CODE, DO NOT USE!contract BadArrayUse {    address[] employees;    function payBonus() {    for (uint i = 0; i < employees.length; i++) {      address employee = employees[i];      uint bonus = calculateBonus(employee);      employee.send(bonus);    }       }    function calculateBonus(address employee) returns (uint) {    // some expensive computation ...  }}The second thing you should consider is the gas limit. Gas is Ethereum\u2019s mechanism to charge for network resources. Every function call that modifies state has a gas cost. Imagine calculateBonus calculates the bonus for each employee based on some complex computation like calculating the profit over many projects. This would spend a lot of gas, which could easily reach the transaction\u2019s or block\u2019s gas limit. If a transaction reaches the gas limit, all changes will be reverted but the fee is still paid. Be aware of variable gas costs when using loops. Let\u2019s optimize the contract by separating the bonus calculation from the for loop. Please note that this still has the issue that as the employees array grows, the gas cost grows.// UNSAFE CODE, DO NOT USE!contract BadArrayUse {    address[] employees;  mapping(address => uint) bonuses;      function payBonus() {    for (uint i = 0; i < employees.length; i++) {      address employee = employees[i];      uint bonus = bonuses[employee];      employee.send(bonus);    }       }    function calculateBonus(address employee) returns (uint) {    uint bonus = 0;    // some expensive computation modifying the bonus...    bonuses[employee] = bonus;  }}Last, there is the call stack depth limit. The EVM\u2019s call stack has a hard limit of 1024. That means that if the amount of nested calls reaches 1024, the contract will fail. An attacker can call a contract recursively 1023 times and then call our contract\u2019s function, causing sends to silently fail because of this limit. PullPayment.sol was described above, and allows to easily implement pull payments. Inheriting from PullPayment and using asyncSend protects you from this.Update: EIP150 fixed this problem, removing the possibility of a call stack attack by reducing the amount of gas each recursive call gets.Here\u2019s a modified version of the code that fixes all these issues:import './PullPayment.sol';contract GoodArrayUse is PullPayment {  address[] employees;  mapping(address => uint) bonuses;    function payBonus() {    for (uint i = 0; i < employees.length; i++) {      address employee = employees[i];      uint bonus = bonuses[employee];      asyncSend(employee, bonus);    }  }  function calculateBonus(address employee) returns (uint) {    uint bonus = 0;    // some expensive computation...    bonuses[employee] = bonus;  }}To sum up, be sure to remember about (1) limits in the types you\u2019re using, (2) limits in the gas costs of your contract, and (3) the call stack depth limit.Write testsWriting tests is a lot of work, but will save you from regression problems. A regression bug appears when a previously correct component gets broken based on a recent change.I\u2019ll be writing a more extensive guide on testing soon, but if you\u2019re curious you can check Truffle\u2019s testing guide.Fault tolerance and Automatic bug\u00a0bountiesThanks to Peter Borah for inspiration on these two ideas. Code reviews and security audits are not enough to be safe. Our code needs to be ready for the worst. In case there is a vulnerability in our smart contract, there should be a way for it to safely recover. Not only that, but we should try to find those vulnerabilities as early as possible. That\u2019s where automatic bug bounties built into our contract can help.Let\u2019s take a look at this simple implementation of an automatic bug bounty for a hypothetical Token contract:import './PullPayment.sol';import './Token.sol';contract Bounty is PullPayment {  bool public claimed;  mapping(address => address) public researchers;    function() {    if (claimed) throw;  }    function createTarget() returns(Token) {    Token target = new Token(0);    researchers[target] = msg.sender;    return target;  }    function claim(Token target) {    address researcher = researchers[target];    if (researcher == 0) throw;        // check Token contract invariants    if (target.totalSupply() == target.balance) {      throw;    }    asyncSend(researcher, this.balance);    claimed = true;  }}As before, we\u2019re using PullPayment to make our outgoing payments safe. This Bounty contract allows researchers to create copies of the Token contract we want audited. Anyone can contribute to the bug bounty by sending transactions to the Bounty contract\u2019s address. If any researcher manages to corrupt his copy of the Token contract, making some invariant break (for example, in this case, making the total supply of tokens different from the Token\u2019s balance), he\u2019ll get the bounty reward. Once the bounty is claimed, the contract won\u2019t accept any more funds (that nameless function is called the contract\u2019s fallback function, and is executed every time the contract is sent money directly).As you can see, this has the nice property that it is a separate contract and requires no modification of our original Token contract. Here\u2019s a full implementation available on GitHub for anyone to use.As for fault tolerance, we will need to modify our original contract to add extra safety mechanisms. A simple idea is to allow a contract\u2019s curator to freeze the contract as an emergency mechanism. Let\u2019s see a way to implement this behavior via inheritance:contract Stoppable {  address public curator;  bool public stopped;  modifier stopInEmergency { if (!stopped) _; }  modifier onlyInEmergency { if (stopped) _; }    function Stoppable(address _curator) {    if (_curator == 0) throw;    curator = _curator;  }    function emergencyStop() external {    if (msg.sender != curator) throw;    stopped = true;  }}Stoppable allows one to specify a curator address that can stop the contract. What does \u201cstopping the contract\u201d mean? That\u2019s to be defined by the child contract inheriting from Stoppable by using the function modifiers stopInEmergency and onlyInEmergency. Let\u2019s see an example:import './PullPayment.sol';import './Stoppable.sol';contract StoppableBid is Stoppable, PullPayment {  address public highestBidder;  uint public highestBid;    function StoppableBid(address _curator)    Stoppable(_curator)    PullPayment() {}    function bid() external stopInEmergency {    if (msg.value <= highestBid) throw;        if (highestBidder != 0) {      asyncSend(highestBidder, highestBid);    }    highestBidder = msg.sender;    highestBid = msg.value;  }    function withdraw() onlyInEmergency {    suicide(curator);  }}In this toy example, the bid can now be stopped by a curator, defined when the contract is created. While the StoppableBid is in normal mode, only the bid function can be called. If something weird happens and the contract is in an inconsistent state, the curator can step in and activate the emergency state. This makes the bid function uncallable, and allows the function withdraw to work.In this case, emergency mode would only allow the curator to destroy the contract and recover the funds, but in a real case, recovery logic could be more complex (for example returning funds to their owners). Here\u2019s an implementation of Stoppable available on GitHub for anyone to use.Limit the amount of funds depositedAnother way to protect our smart contracts from attacks is to limit their scope. Attackers will most probably target high-profile contracts managing millions of dollars. Not all smart contracts need to have such high stakes. Especially if we\u2019re conducting experiments. In such cases, it might be useful to limit the amount of funds our contract accepts. This is as simple as a hard limit on the balance of the contract\u2019s address.Here\u2019s a simplified example on how to do this:contract LimitFunds {    uint LIMIT = 5000;    function() { throw; }    function deposit() {    if (this.balance > LIMIT) throw;    ...  }}The short fallback function will reject any direct payments to the contract. The deposit function will first check if the contract\u2019s balance exceeds the desired limit, or throw an exception. More interesting things like dynamic or managed limits are easy to implement too.Write simple and modular\u00a0codeSecurity comes from a match between our intention and what our code actually allows to do. This is very hard to verify, especially if the code is huge and messy. That\u2019s why it\u2019s important to write simple and modular code.This means, functions should be as short as possible, code dependencies should be reduced to the minimum, and files should be as small as possible, separating independent logic into modules, each with a single responsibility.Naming is also one of the best ways to express our intention when coding. Think a lot about the names you chose, to make your code as clear as possible.Let\u2019s study an example of bad naming of Events. Look at this function from The DAO. I\u2019m not going to copy the function code here because it\u2019s very long.The biggest problem is that it\u2019s too long and complex. Try to keep your functions much shorter, say, up to 30 or 40 lines of code max. Ideally, you should be able to read functions and understand what they do in less than a minute. Another problem is the bad naming for the event Transfer in line 685. The name differs from a function called transfer by only 1 character! This is inviting confusion for everyone. In general, the recommended naming for events is that they should start with \u201cLog\u201d. In this case, a better name would be LogTransfer.Remember, write your contracts as simple, modular, and well-named as possible. This will greatly facilitate others and yourself in auditing your code.Don\u2019t write all your code from\u00a0scratchFinally, as the old adage reads: \u201cDon\u2019t roll your own crypto\u201d. I think it also applies to Smart Contract code. You\u2019re dealing with money, your code and data is public, and you\u2019re running in a new and experimental platform. The stakes are high and the chances to mess-up are everywhere.These practices help secure our smart contracts. But ultimately, we should create better developer tools to build smart contracts. There are some interesting initiatives including better type systems, Serenity Abstractions, and the Rootstock platform.There\u2019s lots of good and secure code already written and frameworks are starting to appear. We\u2019ve started to compile some of the best practices in this GitHub repo we called OpenZeppelin. Feel free to take a look and contribute with new code or security audits.Wrapping upTo recap, the security patterns described in this article are:Fail as early and loudly as possibleFavor pull over push paymentsOrder your function code: conditions, actions, interactionsBe aware of platform limitsWrite testsFault tolerance and Automatic bug bountiesLimit the amount of funds depositedWrite simple and modular codeDon\u2019t write all your code from scratch", "responses": "19"}, {"title": "Ethereum ETH Blockchain Ready for Second Phase in Q4\u00a02018", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereum-eth-blockchain-ready-for-second-phase-in-q4-2018-50189b799a7e?source=search_post", "post_date": "Jul 11, 2018", "readtime": "5 min read", "upvotes": "2.6K", "content": "Joseph Lubin, image:\u00a0BCFocusEthereum ETH Blockchain Ready for Second Phase in Q4\u00a02018Michael K. SpencerBlockedUnblockFollowFollowingJul 11, 2018In the Spring of 2018, Ethereum\u2019s Vitalik Buterin hinted that sharding on Ethereum was coming this year. There has been massive speculation that Ethereum will be able to scale before 2020, with Casper, Plasma and Sharding.The time taken to process \u2018shard\u2019 blocks, those split up between groups of computers, would be around ten seconds, Buterin suggested back in April. You can read more about Sharding here.Ethereum developers have sought ways of providing on-chain scaling improvements for some time, but there is a sense now that the second phase of the ETH blockchain is approaching, maybe even faster than anticipated.Bitcoin Exchange\u00a0GuideTowards a World of Decentralized GovernanceAll these neat quotes about the world-computer and smart contracts going mainstream are great, but dApp platforms are still maturing. Ethereum Foundation\u2019s co-founder Joseph Lubin has a lot to offer on how Ethereum is evolving, and was recently quoted at the Rise conference.He spoke on an interesting panel whose participants were the Ethereum Foundation\u2019s co-founder himself Joseph Lubin, CEO of crypto merchant bank Galaxy Digital Mike Novgoratz, Crypto.com CEO Kris Marszalek, Tenx\u2019s Julian Hosp, and Wall Street Journal columnist Jacky Wong.Lubin mentioned that he believes the ETH blockchain is currently transition from phase one to phase two, where new layers are being built on top of the decentralized core. According to Lubin, the fundamental layer one of the blockchain has now been well established.Although we\u2019re still in the early stages of Ethereum, the community is filled with some of the smartest minds in tech, to quote Raul Jordan, Ethereum is also attracting the most daily active developers in blockchain. Ethereum might not have the global recognition of Bitcoin, which had essentially a 5-year head start plus being the first-mover, however Ethereum is a platform that spawned and continues to produce a lot of blockchain innovation, startups, altcoins and thus attracts software developers to the \u201cnew\u201d space.From Decentralized Foundations to Scalable\u00a0ProductsLubin characterizes layer two systems as those becoming more mature, with various on-, side-, or off- chain mechanisms that enable and will partake in greater scalability.If Ethereum is meant to be a world-computer, it\u2019s envisioned Ethereum will have thousands of transactions in the layer two systems that should be ramified in 2018.Sharding, Plasma and Casper are coming to the ETH blockchainPlasma as a Layer Two\u00a0SolutionLubin gave the example of Plasma, which is an on-chain scaling solution for Ethereum. This was introduced back in August 2017 by Vitalik Buterin and Joseph Poon, creator of Bitcoin\u2019s own Lightning Network, which could also be thought of as a \u201clayer two\u201d solution.How Lubin conceptualizes all of this is super insightful. He went on: unlike the early internet, which started \u201cnarrow,\u201d he added, blockchain is starting out with a \u201cvery broad\u201d offering for potential applications.The blockchain is like quantum computing, a new kind of potential in technology; just as AI is in a formative stage of its development. If dApp are just five year sold, imagine what they will become in five more years?Many see Ethereum is the real driver of innovation in the space now. Ethereum fueling an incredible array of ICOs in 2017, is a catalyst that\u2019s itself working hard to mature, and is to blockchain innovation as a form of \u201ccrypto-fuel\u201d for decentralized ecosystems.That\u2019s quite a more salient role to the evolution of blockchain, than say, Bitcoin\u200a\u2014\u200awhich is widely seen as more of a crypto Gold; a kind of crypto asset that has incredible price volatility and serves as a kind of baseline for the value of the cryptocurrency market as a whole.Uncertainty is the Time for Crypto\u00a0IdealismIf Ethereum's world computer means a moving away from \u201cfrictional analog contexts\u201d, Ethereum\u2019s partnerships in the Cloud with the likes of Amazon are also incredibly symbolic.Here is the ecosystem, the platform, that has the most value and enterprise partnerships that is also a cocoon for blockchain startups to demonstrate products that can integrate with the real world. Ethereum in this sense, is indeed like the \u201cether\u201d where blockchain innovation and crypto-innovation can take place. It\u2019s another layer of digital creation that was previous not possible.All to say that Ethereum is evolving and attempting to scale faster. Who knows if fungible digital tokens will overhaul existing systems and serve all aspects of the global economy? Would governments, tech companies and regulators allow it? Could consumers veto them? It\u2019s unlikely, but even the likes of PayPal and Alibaba are wracking up the blockchain patents, so who knows. The war of the future works in mysterious ways.A Paradigm Shift in Collective Infrastructure and\u00a0PowerIf places like Malta and South Korea lead the way in legal reform acknowledging cryptocurrencies, places like Singapore and China are the birthplace of some of the most interesting blockchain startups. Ethereum is by default, a leader in a global movement.Whatever \u201cnatively digital world\u201d that\u2019s manifesting, whether it be an algorithmic hierarchy, or an unchecked use of AI by corporations or facial recognition nets by Governments, it\u2019s clear that it\u2019s almost beyond our means to \u201cregulate\u201d in any effective way, as progress is occurring too fast on too many fronts simultaneously\u200a\u2014\u200athis is only bound to accelerate in the 2020s, and even faster in the 2030s.Indeed, it\u2019s likely our fundamental pillars and institutions like voting, democracy, capitalism, banking, and how to regulate corporate monopolies needs to be entirely rethought and redone. What does 3D-printing do to the construction industry or retail? What does quantum computing do to the cloud? What do dApp platforms do for democracy? We\u2019re starving for upgrades, and we\u2019re going to see them with accelerated returns.If Ethereum is a pioneer of blockchain, what that represents is bigger than whatever ETH becomes. Just as Bitcoin showed the world what distributed ledgers could do\u200a\u2014\u200a, and indeed if Ethereum is not a security (SEC), consumer utility tokens may offer \u201ca whole new model for delivering services and products to consumers. The way we investing in the future is changing, and the values of young people disadvantaged in an economic system that is stacked against them also is an environmental press that is bound to transform basically all infrastructures, industries and business verticals.It turns out the world-computer is at the center of a revolution that\u2019s going to take decades to come. Technology is undergoing a convergence that will combine blockchain, artificial intelligence, quantum computing and economics with business models and companies yet to be invented.", "responses": "8"}, {"title": "Why I\u2019m short Ethereum (and long\u00a0Bitcoin)", "author_name": "Tuur Demeester", "link": "https://medium.com/@tuurdemeester/why-im-short-ethereum-and-long-bitcoin-aee5b1c198fd?source=search_post", "post_date": "Oct 5, 2016", "readtime": "12 min read", "upvotes": "800", "content": "Why I\u2019m short Ethereum (and long\u00a0Bitcoin)Tuur DemeesterBlockedUnblockFollowFollowingOct 5, 2016Source: cryptowat.chWhen it passed a market cap of $1.5 billion, both in March and in May, Ethereum became the highest valued non-bitcoin cryptocurrency ever.The enigmatic project is no doubt the altcoin that has the most Bitcoin enthusiasts confused\u2014or even rattled. People are wondering whether Ethereum could be Bitcoin 2.0, like Facebook versus Myspace, or VHS to Bitcoin\u2019s Betamax.Others have stated that Ethereum is carving out its own space entirely, calling it the oil to Bitcoin\u2019s gold.I don\u2019t share either opinion. In my view, Ethereum is in direct competition with Bitcoin, and going forward it\u2019ll most likely lose market share against it.On March 18 I took a first ETH/BTC short position. I got stopped out, after which I suspected a double top and I initiated a new short position:In this article I explain why I have a bearish outlook on Ethereum\u2019s token $ETH, certainly when expressed in Bitcoin terms. I don\u2019t claim omniscience and I of course could be wrong. Still, I think the following list gives voice to substantially under-appreciated concerns about the Ethereum cryptocurrency and ecosystem.If after reading this article you feel inclined to also short ETH/BTC, I suggest keeping in mind the following:Professional traders risk less than 1% of their capital in a trade, 2% in a maximum commitment. This is also my personal rule of thumb.Trading positions can only be held by an exchange, which means you will be subject to (significant) risk of loss of funds in case of a hack.A number of smart people are ETH-bullish\u2014I suggest studying their arguments, maybe even their direct criticism of this article.Even if my analysis is correct, I could still lose money on my trade: markets can stay irrational longer than we can stay solvent.Alright, let us dive in\u200a\u2014\u200afirst with an overview of the appeal of Ethereum, then with a criticism of its main selling point: flexibility.Ethereum\u2019s ambitionThe idea behind Ethereum is to move way past digital cash that simply registers transactions in an immutable ledger, such as is the case with Bitcoin. Ethereum\u2019s vision is to build a Virtual Machine, a cloud based decentralized computer. Interfacing with that machine, people can then create strings of code called \u201csmart contracts\u201d or \u201cdecentralized applications\u201d and publish these on the Ethereum network. In exchange for a fee, the network will then execute the code for anyone calling on it.After Gavin Wood published his Ethereum Yellow Paper, lot of enthusiasm ensued, and programmers started discussing and developing ideas such as a decentralized airbnb, decentralized prediction markets, a decentralized gold exchange, a decentralized hedge fund, and so on. Ethereum\u2019s programming language is simple to learn and young developers jumped on the opportunity to create decentralized applications (\u2018dapps\u2019). So far there are 298 such dapps listed.Sounds great, right? An all-in-one decentralized financial system with its own native currency, greater functionality than Bitcoin, and much easier to code applications for. Truly a \u2018Bitcoin 2.0\u2019.However, I think there\u2019s a catch. Having followed the project since inception, I\u2019m concerned that a number of risks and fundamental issues are being overlooked in bootstrapping this ambitious project. I think the project at least needs to undergo a big overhaul, and at worst needs to be abandoned entirely, to prevent more intellectual and financial capital to be wasted in the pursuit of impossible goals.(Here is probably a good place to acknowledge that I\u2019m not a computer scientist nor even a coder. I hope to compensate for that by linking back to sufficiently technically credible sources.)Computer network trade-offsImagine a network of computers, from bottom to top: the hardware, the energy needed to run the processors, the operating system, and the protocols that coordinate the data exchange. No matter which configuration you choose, there will be a trade off between cost, security, speed, and flexibility.Bitcoin\u2019s core protocol does everything to maximize security so that it can be used as \u2018digital gold\u2019, a decentralized store of value. Therefore it operates at a fairly high cost, while generating low speed, low flexibility transactions. Indeed, it doesn\u2019t acquire new functionality quickly\u2014as illustrated by the many failed colored coin projects. Now, that doesn\u2019t mean that lower cost, higher speed, and high flexibility are impossible, but just that those things have to be built on other protocol layers on top of the Bitcoin module: layers such as the lightning network and sidechains.Ethereum has a different approach. It prioritizes flexibility and, I argue, compromises on security, speed, and even cost\u00a0.Let\u2019s go over each of these computer network categories one by one.FlexibilityThe Bitcoin \u2018digital cash\u2019 core protocol is a stern and barren environment. Its primary client is called Bitcoin Core, which runs on the C++ programming language. C++ is known for its precision in allocating memory and high speed, and for its steep learning curve. For constructing new transaction-commands, Bitcoin uses a scripting system: there\u2019s a list of less than 70 precise commands that can be executed at the core protocol level. Bitcoin smart contracts have been part of the roadmap since Satoshi, and a lot of thinking has gone into the limitations required to maintain consistency with the security confines of the Nakamoto framework.Ethereum is founded with different ambitions in mind. The Ethereum Homestead Guide, written mostly by Ethereum Foundation hired developers, states, \u201c\u2026unlike the Bitcoin protocol, Ethereum was designed to be adaptable and flexible.\u201dThe way Ethereum creates this adaptability and flexibility is in four ways: radical openness, multiple implementations, multiple contract specification languages, and institutionally endorsed hard-forks.First, the founders chose the opposite approach from Bitcoin\u2019s scripting system by pursuing Turing Completeness; in other words, by setting absolutely no restrictions on which type of code can be published and executed on the blockchain. In the words of Vitalik Buterin, \u201cInstead of having a protocol with lots of features, what you have is a protocol with a built in programming language, and then you can write whatever features you want on top.\u201dThe challenge here is that flexibility comes with a large attack surface. Ethereum code published on the blockchain can contain unintentional loopholes and other vulnerabilities. If any code can be embedded in Ethereum, so can code that is intentionally designed to crash the Ethereum software. We saw this exact scenario play out on September 18, when a specific smart contract on the Ethereum blockchain caused most geth and parity client nodes to crash at once, after which the hash rate dropped by 12%. Another such attack happened a few days later, on September 22nd, followed by more recent attacks which thwarted even the \u201ccome at me bro\u201d hotfix.The extreme openness of the Ethereum blockchain has been disapproved by several computer scientists and developers\u200a\u2014\u200acriticism that seems to have been validated by the recent client crashes:Secondly, the Ethereum developers created multiple interfaces to program and publish code on the blockchain, with the following motivation:Maintaining diversity in clients connecting to and running the Ethereum network forces the development and documentation of a cleaner protocol and enables increased robustness of the overall system: an issue with a single implementation will likely not take down the network assuming other implementations are unaffected.Ethereum Foundation director of technology Taylor Gerring adds:When a discrepancy occurs due to either human or computer languages, a roundtable of client developers can compare results and discuss the ramifications of a particular interpretation so as to determine a specific course of action.Today Ethereum features clients in different programming languages. While 90% of the nodes run on Geth, the Ethereum foundation also supports a python-based client and a C++ based client as official reference clients. There are currently also six active third party implementations.This strategy of supporting multiple implementations, rather than being a diversifying boon for the network, has been criticized as fundamentally undermining its goal of decentralized consensus:Even Satoshi Nakamoto was critical of multiple consensus implementations:I don\u2019t believe a second, compatible implementation of Bitcoin will ever be a good idea. So much of the design depends on all nodes getting exactly identical results in lockstep that a second implementation would be a menace to the network.For an in depth look into this issue, see the write up by Aaron van Wirdum: \u201cThe Long History and Disputed Desirability of Alternative Bitcoin Implementations.\u201d In it, Peter Todd argues that the September 18th Ethereum attack could have effectively resulted in an accidental split into two independently operating chains.Furthermore, in a recent article, Todd argues that Ethereum\u2019s multiple implementations do not make its network more reliable, because there exists no comprehensive protocol specification for those implementations to be based on. If we assume that geth, which recently had a 90% market share, is the de facto reference client, one could still argue that the other implementations form a serious distraction, and geth does not attract enough intellectual capital to make it an implementation that can compete with Bitcoin in terms of reliability. Gregory Maxwell points out that:\u2026In the last six months Bitcoin Core had 800 non-merge commits from 91 authors across 469 merges, while go-ethereum [geth] had 247 from 22 authors across 105 merges.Based on these numbers, one could say that Bitcoin displays four times as much activity and diversification compared to Ethereum.Furthermore, despite continuous cheers for the boons of diversification, the concerns about multiple implementations are not just theoretical musings. Ethereum\u2019s predecessor Mastercoin also had multiple implementations, causing numerous problems and leading them eventually to revert to a single reference implementation.It\u2019s my view that the multiplicity of implementations, in absence of a unambiguous specification, will lead to more problems down the road.A third way in which the Ethereum project has worked to adopt a flexible approach, is by supporting the creation of multiple contract specification languages (JS-esque Solidity, go-esque Mutan, python-esque Serpent,\u00a0\u2026).This \u2018shotgun approach\u2019 to protocol languages has not been universally lauded. One of the more popular Ethereum languages, for example, is Solidity. It was used to construct the now infamous TheDAO smart contract, a contract from which $50 million worth of ether was stolen (4.5% of the total supply at the time). Philipp Daian, Cornell graduate student under prof. Emin G\u00fcn Sirer, had the following to say in his post mortem analysis of TheDAO hack:I would lay at least 50% of the blame for this exploit squarely at the feet of the design of the Solidity language.\u00a0\u2026[T]he contract, even if coded using best practices and following the language documentation exactly, would have remained vulnerable to attack.Perhaps over time more and more bugs in Solidity and the other smart contract languages of Ethereum will be fixed.In comparison with the reinforced concrete of languages and implementations suitable for security, Ethereum\u2019s implementations and languages are weaker and more malleable\u200a\u2014\u200aone could compare it to straw. And of course, if you recommend entrepreneurs build houses with straw, you increase the risk of fire.It\u2019s important to mention that efforts are on the way to improve Ethereum smart contracts by working on better contract standards by means of formal verification. Though whether it\u2019s possible to formally verify the Casper protocol is still unclear.Finally, a fourth way in which Ethereum promotes adaptability and flexibility is by hard-forking the chain for security or scalability purposes.Simply put, a hard-fork is a change to the protocol that makes upgraded nodes incompatible with nodes running the older version of the software, and vice versa.Source: Bitcoin Developer GuideIn stark contrast to Bitcoin Core, which has never implemented such a drastic change to the code, most Ethereum developers see hard-forks as both an instrument for fixing undesirable features and acute problems with the network, as well as a legitimate tool with which to execute parts of the scalability roadmap.Core dev Vlad Zamfir said, \u201cI initially became a fan of protocol hard forks a long time ago, when I realized that they are a necessary part of the blockchain technology upgrade path.\u201dOf all its perceived sins against Satoshi\u2019s canon, Ethereum\u2019s pro hard-fork stance has probably garnered the most controversy\u200a\u2014\u200aI think for good reason. Here\u2019s a list of the criticisms against institutionally endorsed hard-forks that I agree with:Hard forks can result in two active, independent chains (which happened with Ethereum post TheDAO hard-fork). This introduces new security risks, political division, and consumer confusion.Institutional hard-forks destroy fungibility and annul settlement finality, which undermines Ethereum\u2019s status as a blockchain-based cryptocurrency as well as the autonomy of its users. The project\u2019s credibility has suffered too, as several key principles were violated.The Ethereum.org homepage, promising \u201cunstoppable applications\u201d without censorship or third party interference.Exchanges hate dealing with the risky repercussions of hard-forks.Institutional hard-forks open a political can of worms, leading to (in my opinion) an unstable and inevitably unfair system of lobbying and favoritism. Take for example the \u2018Buterin effect\u2019: when following the attack on TheDAO, Vitalik Buterin did not take a clear stance against a hard fork. People began to read between the lines of his statements (much like central banker tea leaf reading) and, probably correctly, assumed that he and the Ethereum Foundation were actually in favor. Supposedly the hard-fork was a decision by \u2018community consensus\u2019, even though voting on the issue only occurred during a 12 day window, during which owners of less than 6% of the Ether in circulation actually cast a vote.Institutionally endorsed hard-forks introduce legal risks for the core developers, which could endanger and discourage future development efforts. By supporting the hard-fork, core devs potentially \u2018prove\u2019 that they have the power to claw back funds, or fix other (perceived) unfairness on the network. As a result, they may be held liable in court by anyone who thinks they are a victim of some injustice (victims of theft, hackers, users of the old chain, FinCEN). One legal conflict-of-interest dance may have already begun, as Buterin, who was a trustee for The DAO, bought TheDAO tokens before the hard fork and then endorsed the new post hard-fork chain which re-allocated a large amount of DAO tokens, claiming community consensus. More legal issues could ensue based on the fiduciary obligations assumed by core devs Buterin and Zamfir over the funds transferred from The DAO into a trustee-like structure, or from the white hat attack group (consisting of several prominent Ethereum Foundation members) that tried to expropriate DAO tokens from the original attacker.Institutionally endorsed hard-forks are an unsustainable strategy to scale in the long term. Protocols are foundational layers on top of which infrastructure is built, and as an ecosystem grows, the vested infrastructure interests favor stability over predicted security or performance gains. Buterin agrees: \u201c\u2026hard forks will become technologically riskier and riskier over time and at some point assuming sufficient institutional adoption they just won\u2019t be available as an option anymore.\u201dIn conclusion, if Ethereum is to become the transaction ledger \u201cto securely execute a wide variety of services [\u2026] at the global level,\u201d then its contracts and programming language need to be sufficiently robust. The question remains whether the flexibility of the network is undermining this much needed robustness. I\u2019m afraid that it is.In closing part\u00a01In the forthcoming part 2 of this article, I plan to discuss three aspects of the Ethereum network: speed, cost, and security. I\u2019ll take a deeper look into the planned transition to a proof-of-stake protocol that uses sharding as strategy towards on-chain scalability. Meanwhile, I welcome comments and thoughts.I\u2019d like to thank Bryan Bishop, Christopher Allen, Pelle Braendgaard, MAbtc, and Jameson Lopp for reviewing a draft of this article. Of course, all errors remain my own.Disclaimer: Nothing contained in this article constitutes investment, accounting, tax or legal advice or a recommendation to buy, or sell any security or other investment, management product or service or pursue any investment strategy.Edits/corrections:Changed voting period on the hard-fork issue from 12 hours (source) to 12 days following comments from Vitalik Buterin.Removed \u201cSo can code that accidentally causes infinite loops\u201d. It\u2019s correct that in Ethereum infinite loops are extremely unlikely or even impossible due to the fact that writing to the blockchain costs gas.After consulting with a few people and studying the comments below (see also here) I decided to remove this passage: \u201cHowever, that could have sweeping repercussions for existing code. As remarked during a recent meeting of Bitcoin core devs, \u2018if you change something in Solidity, existing smart contracts might stop working.\u2019 \u201dNote (19 April 2017): I closed out the last tranche of this ETH/BTC short in December 2016 at around 0.008 BTC, turned out to be a profitable trade. So far I haven\u2019t written part 2, mainly because I\u2019ve been struggling to gather clear information about how Ethereum is going to scale. I did publish a new Ethereum article earlier this month: \u201cI\u2019m not worried about Bitcoin scaling, but I am losing sleep over Ethereum\u201d.", "responses": "48"}, {"title": "Ethereum Blockchain in a Real Project with 500k+\u00a0Users", "author_name": "Nikita Savchenko", "link": "https://hackernoon.com/ethereum-blockchain-in-a-real-project-with-500k-users-f85ee4821b12?source=search_post", "post_date": "May 29, 2018", "readtime": "11 min read", "upvotes": "1.8K", "content": "Ethereum Blockchain in a Real Project with 500k+\u00a0UsersNikita SavchenkoBlockedUnblockFollowFollowingMay 29, 2018This informative and technical story tells everything about Ethereum and its pitfalls that we\u2019ve encountered while binding Ethereum blockchain to our product, DreamTeam, the first esports and gaming recruitment and management network. At the time of writing this article, the total number of registered users on our platform stands at more than 500,000.Blockchain, on our platform, handles all operations in regards to payments. All \u201cmoney related\u201d operations are processed with the use of Ethereum smart contracts. Smart contracts are needed when users create teams, add or remove players, receive compensations, transact between each other, etc. Blockchain and smart contracts are used in such situations to guarantee payments and avoid scams, which are unfortunately, fairly common in esports.", "responses": "14"}, {"title": "", "author_name": "Georgios Konstantopoulos", "link": "https://medium.com/loom-network/million-user-dapps-on-ethereum-an-introduction-to-application-specific-sidechains-c0fdc288c5e5?source=search_post", "post_date": "Dec 18, 2017", "readtime": "6 min read", "upvotes": "2.7K", "content": "Georgios KonstantopoulosBlockedUnblockFollowFollowingDec 18, 2017Related articles:DAppChains: Scaling Ethereum DApps Through SidechainsAnnouncing ZombieChain: An EOS-Like DPoS Sidechain for Ethereum DAppsPlasmaChain, GameChain, SocialChain: The Loom Network Universe Expounded", "responses": "6"}, {"title": "Ethereum Classic has been added to Atomic\u00a0Wallet", "author_name": "Atomicwallet", "link": "https://medium.com/@atomicwallet/ethereum-classic-has-been-added-to-atomic-wallet-3badf90949e3?source=search_post", "post_date": "Jul 12, 2018", "readtime": "3 min read", "upvotes": "5.2K", "content": "Ethereum Classic has been added to Atomic\u00a0WalletAtomicwalletBlockedUnblockFollowFollowingJul 12, 2018We are happy to announce adding Ethereum Classi\u0441 (ETC) to Atomic Wallet!Now you can manage your ETC portfolio in a secure and decentralized way.Welcome ETC in Atomic\u00a0Wallet!Why adding ETC is so important to us?There are several main reasons why adding ETC to Atomic Wallet is cool.1. Ethereum Classic is included in the top 15 assets by market capitalization, according to www.coinmarketcap.com2. ETC is traded on most of the largest exchanges, also ETC / USD and ETC / BTC pairs are always among the most popular.3. And, of course, the main thing: ETC has a great community of supporters!First of all, these currencies are similar, but not identical.Ethereum Classic (ETC) is a cryptocurrency that was the result of a hard fork of the Ethereum network in July 2016. To understand the differences between ETH and ETC, it is necessary to recall one case:There was a smart contract running on the Ethereum blockchain called DAO (Distributed Autonomous Organization) used as a venture-capital fund for crypto-related projects. This contract included millions of ETH, and due to a bug in the contract\u2019s code, there was an exploit which a hacker used to drain the ETH balance of the smart contract. He stole millions of dollars in seconds!After this, the developers and community came together and decided that the best course of action was to enact a fork that reverted this enormous theft. This forked chain is what became Ethereum (ETH) and the old chain, where the hack was never reversed, is Ethereum Classic (ETC).Most of the Ethereum community and developers migrated to the new chain, which is where most development takes place these days. This also explains the higher market valuation on ETH compared to ETC.You can read more about Ethereum Classic here.Q: What Is A Hard Fork?The primary difference between a soft fork and hard fork is that it is not backward compatible. Once it is utilized, there is absolutely no going back whatsoever. If you do not join the upgraded version of the blockchain, then you do not get access to any of the new updates or interact with users of the new system whatsoever.Q: When will Ethereum Classic Atomic Swaps be available?Ethereum Classic Atomic Swaps is in our main goals, and we want to add it this summer!Q: What assets are you adding next?We have plans to add all the major coins and tokens, and also develop the Atomic Swaps functionality for all these assetsDownload latest version of Atomic Wallet here: https://atomicwallet.ioStay tuned and follow us on:Medium: https://medium.com/@atomicwalletFacebook\u200a\u2014\u200ahttps://facebook.com/atomicwalletTwitter\u200a\u2014\u200ahttps://twitter.com/atomicwalletJoin our Telegram chat: https://t.me/atomicwalletchat", "responses": "2"}, {"title": "11 Best Ethereum Development Tools to Grow Your\u00a0Stack", "author_name": "Zane Witherspoon", "link": "https://hackernoon.com/11-best-ethereum-development-tools-to-grow-your-stack-e782fd7156ab?source=search_post", "post_date": "Feb 25, 2017", "readtime": "5 min read", "upvotes": "1K", "content": "11 Best Ethereum Development Tools to Grow Your\u00a0StackZane WitherspoonBlockedUnblockFollowFollowingFeb 25, 2017Blockchain tech is getting chief officers hot and heavy. When it\u2019s your turn to show them your stack, will you distress or impress?Here\u2019s 11 tools for building on the Ethereum blockchainThe foxy doggo chrome extension is good\u00a0boy", "responses": "11"}, {"title": "A Gentle Introduction to Ethereum Programming, Part\u00a01", "author_name": "Facu Spagnuolo", "link": "https://blog.zeppelin.solutions/a-gentle-introduction-to-ethereum-programming-part-1-783cc7796094?source=search_post", "post_date": "Nov 14, 2017", "readtime": "6 min read", "upvotes": "1.6K", "content": "A Gentle Introduction to Ethereum Programming, Part\u00a01Facu SpagnuoloBlockedUnblockFollowFollowingNov 14, 2017Two months ago I was asked to build an Ethereum web application as a work test to join Zeppelin, but I didn\u2019t have any idea about blockchain technology at all. I had barely heard of Bitcoin, so there was no other option but to dive in.This will be a series of posts aimed at software developers who want to ramp up to Ethereum. Please keep in mind that I do not consider myself an expert in this subject, I\u2019d just like to teach you what I learned and save you some time if you are in the same place I was. By the end of the series you should be able to build a fully-fledged smart-contract-enabled web application (also known as DApp) on your own!Enjoy, and please do not hesitate to reach out with questions, suggestions or feedback.Index1. Taking the first steps1.1. Introduction1.2. Web32. Interacting with a contract3. Frameworks & Tools in the real world4. A real DApp, a token marketplace\u200a\u2014\u200acoming soon", "responses": "13"}, {"title": "Bitcoin in 2017, but 2018 is the year of\u00a0Ethereum", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/bitcoin-in-2017-but-2018-is-the-year-of-ethereum-4354990260b6?source=search_post", "post_date": "May 5, 2018", "readtime": "4 min read", "upvotes": "2.3K", "content": "Bitcoin in 2017, but 2018 is the year of\u00a0EthereumMichael K. SpencerBlockedUnblockFollowFollowingMay 5, 2018BlockgeeksThe Crypto correction of early 2018 saw Bitcoin fall a bit from its pedestal of nearly $20,000, yet this year Ethereum\u2019s sharding progress show dApps will solve major scaling hurdles this year, and by default then, 2018 is the year of Ethereum.If Bitcoin is like crypto gold, a choice digital asset, crypto is moving ever closer to utility coin and smart contact transactions which means Ethereum is the crypto platinum.Ethereum, the second-largest by market value, was up 2.5 percent over the past 24 hours at $933.24. However in spite of Ethereum being at forefront of the smart contract movement for blockchain smart contract platforms, its founder also has some ideals.When Ethereum founder Vitalik Buterin tweeted recently that he\u2019s boycotting this year\u2019s Consensus conference after CoinDesk since CoinDesk has been linked to fraudulent projects, it shows (unlike Coinbase) that some of the young people at the forefront of Crypto still have ethics and ideals that young decentralization advocates can relate to.Sharding Could Remove Blockchain\u2019s Speed BottleneckBitcoin is limited to ~3\u20137 transactions per second, Ethereum to 7\u201315, but not forever. The sharding proof of concept means the blockchain is starting to evolve faster and the scalability bandwidth issues could be solved before 2020.EthereumSome call \u201csharding\u201d the biggest breakthrough since the invention of smart contracts. You can read the proof of concept here. Different kinds of levels of nodes can improve efficiency.Ethereum sharding chain cross-linking.It doesn\u2019t really matter what the price of these things are, it matters what the blockchain becomes.The primary goal of implementing sharding is massive scalability improvement.Bitcoin is the DOS, Ethereum is the\u00a0WindowsIf Bitcoin is the \u201cDOS\u201d of blockchain, Ethereum could be the \u201cwindows OS\u201d. There\u2019s some chance that Ethereum fails as a first-mover smart contract platform and another one succeeds that\u2019s more technically sound, scalable and secure. It\u2019s too soon to say which one might rival Ethereum, but there is some competition.Blockchain has meant that thousands of new companies are sprouting up with highly innovative business models and even ICOs being regulated and facing rating systems, ICOs are still doing well in 2018 compared to 2017. While Bitcoin and crypto investing has been systematically suppressed by states, criticized by bankers investors, crypto has become in 2018 entirely a mainstream proposition.Bitcoin is the Yin, Ethereum is the\u00a0YangIf Blockchain is the yin, the negative potential of what blockchain could become, Ethereum is the yang, the positive development of smart contracts that could change fundamentally how the web works and how transactions and trust evolve.Ethereum sees itself as a global infrastructure computing paradigm that\u2019s open-source, decentralized and can build on a trust that could prevent fraud, censorship or third-party interference.It\u2019s hard to imagine Ethereum\u2019s price not ending 2018 on an all-time high given the important work it is doing. In early January Ethereum hit an all-time high price of $1,417.38, before dropping to well below half that price in the Bitcoin correction (not a bubble).Sharding will likely evolve from very simple levels of parallelization, to then gradually be developed until Visa levels scaling. VisaNet handles an average of 150 million transactions every day and is capable of handling more than 24,000 transactions per second.\u201cVisa-scale transaction levels\u201d or beyond may be necessary for Ethereum as the crypto platinum to reach its full potential and impact the lives of global citizens at large. In time it takes for this to occur, most central banks will have created converted their fiat money systems to fiat-blockchain digital money. While Japan enjoys features of Bitcoin transactions that is offered in retail and services there at an accelerating rate, Ethereum as a dominant smart contract platform would be much more transformative globally.", "responses": "14"}, {"title": "Buy and Sell Ethereum Classic on Coinbase\u00a0Consumer", "author_name": "Dan Romero", "link": "https://blog.coinbase.com/buy-and-sell-ethereum-classic-on-coinbase-consumer-5bb5a01f34bd?source=search_post", "post_date": "Aug 16, 2018", "readtime": "", "upvotes": "1.8K", "content": "Buy and Sell Ethereum Classic on Coinbase\u00a0ConsumerDan RomeroBlockedUnblockFollowFollowingAug 16, 2018Starting today, Coinbase Consumer supports Ethereum Classic (ETC) on Coinbase.com and the mobile app. Customers in every country where Coinbase operates can log in now to buy, sell, send, receive, or store Ethereum Classic, along with Bitcoin, Bitcoin Cash, Ethereum, and Litecoin.One of the most common requests we hear from customers is to be able to trade more assets on Coinbase. Ethereum Classic is just a first step in that direction. We announced last month that we are exploring a number of other assets to add to the platform. We hear your requests, and are working hard to make more assets available to more customers around the world.You can sign up for a Coinbase account here to buy and sell Ethereum Classic today.", "responses": "17"}, {"title": "Beyond Bitcoin: Why Ethereum Could Change The\u00a0World", "author_name": "Noam Levenson", "link": "https://medium.com/blockchain-for-grandma/beyond-bitcoin-why-ethereum-could-change-the-world-1b24a8ba1aef?source=search_post", "post_date": "Nov 30, 2017", "readtime": "12 min read", "upvotes": "4.3K", "content": "Beyond Bitcoin: Why Ethereum Could Change The\u00a0WorldSmart Contracts, DApps, and ICOs will become the new internet. Ethereum brings them all\u00a0togetherNoam LevensonBlockedUnblockFollowFollowingNov 30, 2017Part 1 and Part 2You\u2019ve read my two previous articles on Bitcoin\u200a\u2014\u200aand if you haven\u2019t, start with those\u200a\u2014\u200awatched a couple of YouTube videos, and finally saw that documentary on blockchain that\u2019s been sitting in your queue for a year. Maybe you even brought up Bitcoin at Thanksgiving during the lull between your grandma talking about how she doesn\u2019t usually like turkey because it\u2019s so dry and your cousin spilling gravy all over himself. The reception was strong and now you feel like an expert. Well calm down buddy, because we\u2019ve still got a lot to learn.Bitcoin is only the tip of the iceberg. If we really want to understand the potential of blockchain, let\u2019s talk about Ethereum. Established in 2014, Ethereum is the new kid on the block. If Bitcoin is the traditionalist, the guy who sits in coffee shops and reads Hemmingway, Ethereum is the visionary, the Red Bull drinking, hold-my-beer-while-I-try-this type kid. And it took the crypto world by storm.Vitalik ButerinThe Ethereum project is headed by Vitalik Buterin, a 23-year-old, and he truly is one of the geniuses of our time. In 2013, Buterin envisioned a decentralized internet, on which anyone could build applications. This system would solve the current issues of our internet: the lack of available trust. As we understand, Bitcoin uses the blockchain, a decentralized and unchangeable method of information storage, to secure and confirm transactions on the Bitcoin network. Buterin created a new blockchain, one that transcended the limitations of transactions. What were you doing at 19?When the internet was first developed, it was used for porn. The internet wasn\u2019t advanced enough to support YouTube, Facebook, and endless animal GIFs. But it could support basic images\u200a\u2014\u200aand teenagers everywhere rejoiced. Just as how in the early internet days, porn was the simplest application of the technology, Bitcoin utilizes the simplest function for the blockchain: transactions. Ethereum however, can do much more.The peak of our technological prowessWhat can Ethereum\u00a0do?Ethereum is the main platform of today\u2019s blockchain world. Ethereum is the operating system. Ethereum is the canvas, the paper, or that bar bathroom wall that you can\u2019t help but read. It is the protocol people build upon. Ethereum is a generalized blockchain; it\u2019s not specialized for any one purpose (unlike Bitcoin\u2019s). It is generalized so that anyone can program it for their specific needs. Information and transactions are still placed in blocks and secured by miners, but the information doesn\u2019t only need to be purely \u201csend and receive\u201d transactions; it can be used for far more complex applications. Just like with the internet, Ethereum is the toolbox for the development of this new technology\u200a\u2014\u200ait\u2019s up to developers and innovators to make use of the tools.Let\u2019s explore the toolbox of Ethereum and then we\u2019ll look at what those tools can build.When I came up with Ethereum, my first first thought was, \u2018Okay, this thing is too good to be true.\u2019 As it turned out, the core Ethereum idea was good\u200a\u2014\u200afundamentally, completely sound.\u200a\u2014\u200aVitalik\u00a0ButerinSmart ContractsEthereum\u2019s most revolutionary technology is smart contracts. Anyone can deploy an Ethereum smart contract and the blockchain secures them in a decentralized and transparent manner. In today\u2019s world, contracts can be any agreement, from corporate agreements to that fantasy football league that you WILL win one of these years! But a contract in its simplest form is a \u201cif\u201d and \u201cthen\u201d agreement. If Bob wins the fantasy football league, then he has bragging rights for the whole year. If Ron can eat 23 crepes in an hour, then he doesn\u2019t pay the bill (a questionable incentive\u2026but anything goes in college towns). But since the restaurant might still charge Ron for those crepes after he eats them, we put contracts in writing and rely on lawyers, judges, and our institutions to enforce their terms. A smart contract on the other hand, is simply a cryptographically secured digital contract that enforces the terms via code.Welcome to the\u00a0futureThe vending machine that you walk to every ten minutes at work because it\u2019s \u201cnot technically a break\u201d is the simplest example of a smart contract. There is a simple program running inside that receives an input and produces an output. If a dollar is put in and A4 pressed, then a Snickers will fall. Don\u2019t put in the dollar, don\u2019t get the Snickers, it doesn\u2019t matter how much your shake it. Ethereum enables anyone\u200a\u2014\u200awell, maybe not anyone considering my grandma still doesn\u2019t have an email account, but anyone with programming knowledge\u200a\u2014\u200ato program their own smart contracts.So what does that mean in reality? It means that an unchangeable contract can be created, that can be seen by everyone, and where the terms are automatically enforced. For example, imagine that for Bob, bragging rights are not enough to incentivize him to spend his weeks pouring over football stats. He wants prize money. So everyone playing in the league throws in $10. Currently, either one trustworthy member of the league holds the cash, or they must use a third-party site to hold the money. Trust must be placed in one of these entities; for a $10 bet, the risk is minimal. But with huge amounts of money, there are serious risks associated with trusting middle men\u200a\u2014\u200alet alone the additional fees. A smart contract could be programmed where all the money is sent to the Ethereum contract. The contract holds the money with the condition that the winner of the league will receive the funds. When proof of victory is provided to the contract, the funds release. If anyone breaks the terms of the agreement, their money is forfeited. No need for lawyers, judges, courts, or credit. There is no way to cheat and Bob gets his money. There\u2019s just unfortunately still no way of encoding bragging rights.DApps\u200a\u2014\u200aDecentralized ApplicationsEthereum allows any company to use their open source code to build upon the Ethereum blockchain. This allows people to have an easy-to-use and programmable blockchain that can be customized for their needs. Companies are created with fascinating ideas that utilize the toolbox that Ethereum provides. These applications address many issues and weaknesses that we have in our systems today, but likely most of the revolutionary ideas have not even been created yet.So what makes a DApp a DApp? First, the application is decentralized. This is the most important characteristic. The DApp has open source code that anyone can read and verify and it isn\u2019t controlled by any one entity. All the data from the application is stored in a public blockchain. And the application uses a token to allow users to interact with the DApp in a decentralized way.Here\u2019s a basic metaphor for how this system would work. Imagine a mall with lots of stores. The mall is Ethereum\u200a\u2014\u200ait provides the sellers with the framework for the store. The store\u200a\u2014\u200aPho Real (trademarked name so don\u2019t even think about taking it)\u200a\u2014\u200ais the DApp, but it\u2019s not owned by anyone. Instead, ownership of the store is shared by all those who work in the store in some manner. The rules of Pho Real are made public and can only be changed if a majority of the workers agree to the change. But you can\u2019t spend dollars at Pho Real. You can only spend X Coin. X Coin is the special token for the store. Just like how at a casino, you can\u2019t spend dollars, you can only spend purchased chips, it works the same at this store. And X Coin\u2019s information and transactions are all stored within the mall\u2019s vault, which is the Ethereum blockchain. Now when this store is created, to raise money for the general store operations, the store decides on how many of X Coin to create. Let\u2019s say they create 10,000 of them. They then sell these coins to anyone who would like to purchase them. This is what the cryptocurrency world calls an ICO\u200a\u2014\u200aInitial Coin Offering. Now the store is still in production; whether or not it delivers on its promise of providing a one-stop-shop for all your Pho-related needs remains to be seen. But since there are only 10,000 X Coins in creation, if this store offers a high demand product, the coin will also be in high demand and the price will rise. This is exactly what happens today. People purchase these tokens because they believe that one day, many people will want to use the product offered by the project, and that the demand for tokens will increase dramatically.An overview of many of the projects in the blockchain spaceExamples:\u00a0IEx.Ec and other cloud computing services: these DApps want to create a cloud computer. Today, when you aren\u2019t using your computer, your computer\u2019s processing power and graphics power stop working. But there are plenty of people around the world who, while you\u2019re catching up on some Zzz, are trying to digitally delete their ex-girlfriend from all their prom photos or download the entire collection of Friends and could use a little help. These programs allow users to rent out the unused computing power of other people on the network at a price. People would merely connect to the network and commit their GPU or CPU. A smart contract would hold their computing resources which would be made available to a buyer if that buyer put money into the smart contract (sounds like a vending machine, right?). That money must be in the form of that company\u2019s unique digital token. There is no risk, because if either the buyer or seller doesn\u2019t uphold their end of the bargain, the contract is reversed. It\u2019s 100% trustworthy. You don\u2019t need a lawyer to tell you that.The GOATGambling\u00a0:Both sides place their bets into the smart contract. The terms of the bet are programmed into the smart contract. If Tom Brady throws 5 touchdowns, Brad wins the bet. The contract only executes when it receives word of Brady\u2019s magnificent performance\u200a\u2014\u200aand good god, who wouldn\u2019t want to bet on the guy? Fees for setting a bet are paid with the ecosystem\u2019s token.There are tens of other use cases\u200a\u2014\u200afuture article idea?ICOsAs I mentioned above, and this deserves its own future article as well, ICOs are the new fundraising tool for blockchain startups. The companies create a business project and a token on the Ethereum blockchain. The token is offered for sale by use of a smart contract. The smart contract basically says that if you transfer this amount of Token Y, you will get this amount of our token. You buy the token as an investment opportunity and the company fundraises for initial capital.Greater use\u00a0casesAs our world transitions more and more into the digital world, this technology will be central in many of our industries. Soon, real world assets\u200a\u2014\u200aownership of cars and houses, diamonds and gold, and supply chain shipments\u200a\u2014\u200awill be digitized. They will have a digital identity and can be traded, sold, tracked, and verified. The blockchain can store these assets while also protecting the information associated with them. With the Internet of Things, every electronic device in your house, from your coffee pot, fridge, and car, will be able to communicate and coordinate with one another. All these developments, combined with smart contracts and blockchain, create enormous potential.Here are how smart contracts, DApps, and all the other tools in the Ethereum toolbox come together. Imagine how apartment renting works today. Creditors track social reputation and ensure that each party is relatively trustworthy. Sites like Airbnb have two options to provide security: One, they rely on reviews to provide confidence that Bill and Sally from Missouri aren\u2019t a modern day Bonnie and Clyde. But that\u2019s hardly foolproof. Or two, they request and hold lots of your personal information to hold you accountable, personal information that a middleman like Airbnb has no right to hold, is vulnerable to theft, and that ultimately they can (and do) abuse.Or instead, the traditional route uses contracts written by lawyers and enforced in a court of law if either party breaks the agreement. Each of these actors takes a fee for their services. With Ethereum smart contracts and the digitization of real world assets, those players become obsolete. Imagine that I have an apartment for rent. I use a DApp to create a smart contract with all the terms of the rental. I deploy this smart contract and transfer the digital key for the apartment to the smart contract. You come along and want to rent the apartment. You first transfer your payment to the contract. The contract executes and sends the key code to your phone. In the future, you will likely have a scanner on that door that reads the digital key on your phone. Viola! If you stop paying the rent, the code and ownership is transferred back to me. No work on your end needed. No lawyers, brokers, creditors, or real estate agents needed, and you can finally explore the Alaskan backcountry without needing to climb mountains to find that cell service.Here are some of the potential industries that this technology could\u00a0disruptSo what is\u00a0Ether?Ether is Pho Real\u2019s X Coin, but for Ethereum. Any interaction with the Ethereum blockchain costs a fee. That fee is paid in its native token: ether. This includes sending ether to other people or interacting with an Ethereum smart contract. You know how your inbox is full of emails promising \u201cPenis Enlargement\u201d and \u201cRussian Dates?\u201d\u200a\u2014\u200aok, maybe they\u2019re just targeting me. But regardless, if it cost a penny to send an email, spam would likely cease to exist. With Ethereum, it works the same way. Because the Ethereum blockchain uses the same mining principals of bitcoin, the speed with which it can process transactions is limited. Thus, to cut down on \u201cspam\u201d transactions that just bog down the network, a fee is charged. This fee also rewards miners on the network, just like with Bitcoin! Thus, the more DApps and users that utilize the Ethereum blockchain, the more demand there will be for ether, and the higher the price will rise.\u201cEthereum has taken what was a four-function calculator of a programming language in Bitcoin and turned it into a full-fledged computer.\u201d\u200a\u2014\u200aFred Ehrsam, Cofounder of\u00a0CoinbaseSummaryIf you feel like technology just slapped you in the face, welcome to the blockchain world. Welcome to the Internet 3.0. It\u2019s only going to get crazier from here.What people fail to realize about Bitcoin, is that it was simply the messenger for this technology. While Bitcoin very well might be the single greatest investment of the 21st century, it was Bitcoin\u2019s ability to create digital scarcity and a decentralized security system that was revolutionary. Blockchain, smart contracts, and digital assets could disrupt entire industries. As Uber disrupted the taxi industry, Apple the cell phone market, and top ramen beat out every other food option for college students, Ethereum could do the same for finance, online shopping, micro-lending, and ownership.Now you\u2019ve just finished your third article. Too bad Thanksgiving is gone and you missed your chance to talk about Ethereum. Well Christmas and Hanukkah are right around the corner and I\u2019m sure your family would appreciate some Ethereum-small-talk. So brush up on your lingo, ask lots of questions, and prepare to blow away your tech savvy Uncle Steve.Part 4: https://medium.com/blockchain-for-grandma/round-4-grandma-versus-bitcoin-f39ca4d2112b", "responses": "7"}, {"title": "Ethereum\u2019s Casper and Sharding New\u00a0Design", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereums-casper-and-sharding-new-design-14014e83d55f?source=search_post", "post_date": "Jun 16, 2018", "readtime": "4 min read", "upvotes": "2.4K", "content": "BlockonomiEthereum\u2019s Casper and Sharding New\u00a0DesignMichael K. SpencerBlockedUnblockFollowFollowingJun 16, 2018Ethereum\u2019s roadmap dictates it\u2019s about to make a quantum leap in the evolution of blockchain. Vitalik Buterin indicated at a meeting of the platform\u2019s open-source developers in mid June, 2018, that sharding and casper could be rolled out together.These are in short, two of the most anticipated updates for Ethereum. Ethereum is in a race to reinvent the blockchain with the likes of NEO, EOS and others. Ethereum has a majority lead in worldwide developers, blockchain startups and an early headstart.Ethereum May Release Casper and Sharding\u00a0TogetherCasper might be released on a sidechain, or shard, rather than as a smart contract, and this may be able to facilitate a simultaneous release. Casper refers to ethereum\u2019s long-planned consensus algorithm proof-of-stake. It thus promises to be more energy efficient and egalitarian than its current proof-of-work system. Sharding in and of itself may be the next-gen solution to scaling the system to a massive number of transactions.With the ability to process only up to 15 transactions per second (TPS), Ethereum needs to use Sharding and Plasma, to improve its tech to contemporary enterprise levels of transaction speed and scalability.Sharding is a scaling solution that will use shards, a neat term for micro-chains to process separate types of transactions on the Ethereum blockchain. With a system of transaction classification on individual chains within Ethereum, a specific group of nodes would need to verify a relevant transaction, instead of all of them.CryptoslateIn a world where Visa processes things 50 times as fast as Bitcoin, Ethereum needs to show real world application viability.We know that sharding is coming to Ethereum, but how Casper and Plasma altogether will improve Ethereum isn\u2019t entirely clear.If \u2018proof of work\u2019 (PoW)is too energy taxing at scale, proof of stake tech and implementation must be refined. Enabling Casper to go live without disturbing the ethereum blockchain itself is key and the simultaneous roll-out of the new design could enable Ethereum to work at orders of magnitude more efficiently.The primary goal is massive scalability improvement, and 100 shards live could enable this. In short, the proof of stake beacon chain (aka full casper) will just be merged into the main chain. Casper is a \u201cconsensus by bet\u201d, where proof of stake replaces proof of work, in that, the entire mining process goes virtual, and replaces miners with validators.In 2018, PoW feels a bit outdated, with the usual criticisms that it is extremely energy-inefficient process because of the sheer amount of power and energy that it requires. Thus in many ways early blockchains replicate wealth inequality and ownership that certainly isn\u2019t very decentralized.PoS is more democratic just as Sharding requires exceptional randomness, validators get a reward proportionate to their bets. Since Ethereum developers always planned to eventually move on to proof of stake, Casper, basically just the PoS protocol that Ethereum has chosen to go with. Ethereum is on the bleeding edge of how to incentive a PoS system:\u201cThe development process involves heavy exploration of both economic and game-theoretic considerations and Byzantine-fault-tolerant protocols, trying to create a protocol that satisfies one of several constraints simultaneously.\u201dIf Sharding itself removes the need for the entire network of nodes to process every individual transaction\u200a\u2014\u200aincreasing TPS on the Ethereum blockchain; Casper is the friendly ghost that can punish all malicious elements.Think of this way, I\u2019ll just let Vlad speak to this key point:So Casper is designed to work in a trustless system and be more Byzantine Fault Tolerant. If you care about decentralization, it must be enforced and implicit in the system you choose to use.Casper is an amalgamation of two research projects of Ethereum devs. Now it looks like Ethereum will combine Sharding and Casper \u2018upgrades\u2019. This is significant for the history of blockchains. No system in the world is likely to provides 100% finality. Risks of hacks and security issues will increase exponentially as our blockchain, cloud and other architectures mature, offense is better than defense. It\u2019s worth taking a look at Casper CBC, correct by construction. Easing the transition for Ethereum, from PoS to PoW is key; sharding and plasma does the rest.In 2018, there\u2019s reasonable confidence to assume with the huge developer community Ethereum has, it can evolve dynamically faster than new competitors arise. By 2022, we should basically know if Ethereum will be the dominant dApp platform or if valid competitors arise, it\u2019s still after all, very early days.", "responses": "16"}, {"title": "Ethereum. How the Internet will\u00a0be", "author_name": "Francesco Gadaleta", "link": "https://medium.com/data-science-at-home/ethereum-how-the-internet-will-be-426f51cd647b?source=search_post", "post_date": "May 25, 2017", "readtime": "6 min read", "upvotes": "427", "content": "Ethereum. How the Internet will\u00a0beFrancesco GadaletaBlockedUnblockFollowFollowingMay 25, 2017In the aftermath of the explosion of cryptocurrency Ethereum (from $65 to $100, then $150 and higher), I feel the urge of sharing my thoughts and trying to make sense of what is happening.DISCLAIMERDespite the amount of hours spent researching, programming and evaluating the blockchain world, this post is my personal opinion and should not be considered as a suggestion to buy/sell cryptocurrencies nor as a financial analysis.", "responses": "16"}, {"title": "Ethereum Constantinople Hard fork + St.Petersburg upgrade", "author_name": "Atomicwallet", "link": "https://medium.com/atomic-wallet/ethereum-forks-explained-9fb9c2561d93?source=search_post", "post_date": "Jan 28", "readtime": "4 min read", "upvotes": "5.1K", "content": "Ethereum Constantinople Hard fork + St.Petersburg upgradeAtomicwalletBlockedUnblockFollowFollowingJan 28Ethereum Constantinople and St.Petersburg hard forks are expected to be on 7,280,000 block height, on February 28. They will upgrade Ethereum codebase, reduce smart contracts execution cost and mining reward, will add off-chain transactions support and more.This article will answer the following questions:What is hard fork?When will be hard forks?What will be changed / updated?Will forks affect users?What will be with ETH price?What is Hard\u00a0fork?Hard fork is a codebase update. To resolve the blockchain issues or add improvements, you need to make the changes in the core code.\u00a0Usually, there are three main reasons for making a hard fork:Some security risks found in the previous version (i.e. that\u2019s why Constantinople hard fork has been postponed).You need to add new functionality to the blockchain.In some cases, you can make a fork to reverse transactions. (i.e. famous DAO breach).Hard forking requires code changing without backwards compatibility. After the hard fork all the previous blockchain with all the transactions will be copied and switched to the new rules.Ethereum Constantinople ForkThe Constantinople Ethereum hard fork is expected to be on 7,280,000 block height, on February 28.After being postponed, Ethereum developers seems to solve the hacking vulnerability in the EIP 1283.\u00a0The fork itself will affect the mining reward, improved sharding and P-o-S mining. Full P-o-S support is expected to be implemented in the future under the fork called Casper update. No new coins will be created with a fork, as it will contain only upgrades for miners and nodes, and the previous chain will die out as none will support it.Constantinople fork Improvements:(EIP\u200a\u2014\u200aEthereum Improvement Protocol).EIP 145: Make use of smart contracts much cheaper, smart contacts will use gas amount 10x time lower than before. (3 gas with EIP 145 and 35 gas before the improvement). This update will improve the information processing on the ETH blockchain the process itself called the \u201cbitwise shifting\u201d.EIP 1052: Code execution will be optimized. Hash adoption will make contacts verification more easier and rather effective.EIP 1283: The pricing method will be made fairer and simpler in case of contract storage (SSTORE opcode).EIP 1014: Off-chain transactions support. State payment channels will automatically improve the performance of the network.EIP 1234: Block mining reward reduced to 2 ETH instead of 3. It will add extra 12 months of mining before the Ethereum Ice Age will come. It means when there will be nothing to mine, it will freeze the network or make mining profitable on the blockchain. The reduction in block mining reward would delay the difficulty bomb for a period of 12 months. The developers would keep on improving and the miners has to adopt the update, else wouldn\u2019t be able to profit from mining.More details about the changes can be found on GitHub.Ethereum St.Petersburg ForkSt. Petersburg, apart from the city\u2019s name, is another Ethereum hard fork that will occur as at same block height and the same date as the Constantinople Hard fork. This hard fork is designed to remove the 1283 EIP from the test networks. Before implementing both forks on the main network, Ethereum developers are currently testing them.How the fork can affect\u00a0ETH?The lower block rewards will affect miners income, also there will be created an implementation of payment channels with smart contracts that will pike up the technological part of the asset. Major price changes are not expected after the hard fork.What will be with my ETH\u00a0coins?They will be stored safely on your address and do not require funds transfer at all. The fork itself won\u2019t affect the amount of ETH you have.Where to store\u00a0ETH?Atomic Wallet supports Ethereum hard forks and over 300+ other coins and tokens, including BTC, LTC, XRP etc. You can easily secure, manage, exchange and buy Ethereum in one interface. You can also track your portfolio, monitor the rates and transaction history. Atomic gives you full control over your funds by encrypting private keys on your device without any custody risks.Still got questions? Feel free to contact us: support@atomicwallet.ioDownload Atomic Wallet here: https://atomicwallet.io/Stay tuned and follow us on:Medium: https://medium.com/atomic-walletTwitter\u200a\u2014\u200ahttps://twitter.com/atomicwalletReddit: https://reddit.com/r/atomicwalletFacebook\u200a\u2014\u200ahttps://facebook.com/atomicwalletJoin our Telegram chat: https://t.me/atomicwalletchat", "responses": ""}, {"title": "Andrew Keys: Ethereum Has 30 Times More Devs than the Next Blockchain Community", "author_name": "ConsenSys", "link": "https://media.consensys.net/andrew-keys-ethereum-has-30-times-more-devs-than-the-next-blockchain-community-27980a5ddc09?source=search_post", "post_date": "Jan 8, 2018", "readtime": "6 min read", "upvotes": "2K", "content": "Andrew Keys: Ethereum Has 30 Times More Devs than the Next Blockchain CommunityAn interview with the ConsenSys Capital Co-Founder on the state of blockchainConsenSysBlockedUnblockFollowFollowingJan 8, 2018After meeting Joe Lubin at the first ever Ethereum Meetup, Andrew Keys was the first business hire at ConsenSys in 2014. His first endeavor, ConsenSys Enterprise, was amongst the first initiatives to ever connect the dots of blockchain and business. After launching the blockbuster Enterprise Ethereum Alliance that signaled the zeitgeist to massive worldwide interest in Ethereum, Keys has spent the majority of 2017 traveling to all corners of the globe, connecting the dots between blockchain, government, central banks, and enterprise\u200a\u2014\u200aand he\u2019s done most of it while wearing flip flops.As he switches gears to focus on a new venture of equally grand scope, ConsenSys Capital, we spoke with Andrew Keys about the state of blockchain in 2018, the role of centralized organizations in the decentralized revolution, and what to tell your friends and family who have recently developed an interest in digital assets.Andrew Keys speaking at Factory Berlin in December, 2017What excites you most about blockchain technology right now?The developer community is exploding. I see it everywhere I go. The sheer amount of people at Devcon this year was amazing. We have reports from a large analyst firm that suggest the Ethereum community has 30 times more developers than the next blockchain community. Just the fact that you\u2019re seeing that type of developer adoption is imperative. If you go back through history, whoever has the developers tends to succeed. It\u2019s different in this instance because it\u2019s an open source protocol that people are building applications upon, and a global community can build together on it collaboratively.The other thing that I\u2019m really excited about is the plan for protocol scalability that Vitalik laid out. My thesis is that we\u2019re in \u201993 of \u201996\u200a\u2014\u200aof the next generation of the internet\u200a\u2014\u200awhere in 1996, you were able to work in a permissionless setting. Until then, it was all intranets. There are two main considerations to this. One is privacy. In the most recent Ethereum upgrade, Byzantium, zkSNARKs were added, so you can essentially privatize transactions. Now that\u2019s been done, there are four main scalability upgrades: State channels, the transition from proof of work to proof of stake brought about by Casper, sharding, and finally Plasma. That\u2019s the outline of the future of the protocol that will illustrate that we can have Ethereum be the substrate for our social and political operating systems.How do you see centralized and legacy institutions responding to the blockchain disruption?The world-at-large is realizing that we are slowly upon the next generation of the world wide web in an essentially decentralized, peer-to-peer architecture. Singapore has led the way for all central banks to understand what a tokenized value of currency is, and from there, the central banks of numerous countries have signaled an interest. They are not necessarily ready to do it on permissionless networks, but they\u2019re able to do this in permissioned networks, where there is a central bank or regulatory body involved. This enables them to enact real time gross settlement, which is a huge development for central banks and multinational corporations alike, and a major legitimizing factor for the technology.How does working with centralized and legacy establishments balance with the decentralized ethos of blockchain and Ethereum?I think that there\u2019s an evolution. There\u2019s a long game, a medium-term game, and a short game. It\u2019s important to build the on ramps and educate. If you look in the offices, a lot of the ConsenSys people are coming from the banks. They understand that the writing is on the wall. People will still need financial services, but the days of paying a bank just to be a trusted middleman, I think those days are numbered. But there are multi-attack factors to opening up this technology. One is getting the foot-in-the-door with the regulatory bodies and central banks. But on the other hand, there are ten year old kids who don\u2019t have a bank, who are more used to their cell phones being a bank than a legacy, brick-and-mortar establishment. Ether and Bitcoin are great examples of not needing a central bank at all. As the security improves, we\u2019ll be moving money with our cell phones just like we do emails now. There have to be bridges built!Andrew Keys and Joe Lubin on day one of ConsenSys\u2019 Brooklyn office, before they even had\u00a0desks!What do you think will be the major milestones for Ethereum in Q1 2018?There have been utterings of Casper appearing on testnet. Hopefully, we should have a testnet of proof of stake in early 2018, which will actually be forming consensus through proof of stake mechanism. The electricity that\u2019s expended to secure the bitcoin and ethereum networks is the same expenditure of a medium sized country. Proof of stake will remove the tremendous waste of energy. If we can get to this virtual mineability, that\u2019s a great reduction of our carbon footprint and an evolution in computer science that will create stronger transactions per second and something of a flywheel.Interest in digital currency continues to expand rapidly. What advice do you have to people who may be new to the space, perhaps buying their first tokens?The most important thing is to learn as much as possible. Yes, these are assets, they can be speculated on. They fluctuate in price. Exponentially more important than that is the ecosystem that is being built around it, which I think will dramatically increase the price in the long-term. I think that it\u2019s also important for people to understand that in this new tokenized economy, we\u2019re essentially digitizing any type of asset. That\u2019s Beyonce concert tickets, loyalty points, a stock, a US Dollar, the British Pound, a security, or a software license, which many of these tokens are. I think that this is the first time ever that we are able to tokenize the protocol layer of the internet. I believe that there are 3 or 4 protocols that will really compose the next generation of the world wide web, but when we see this token fever, with all these different tokens, I think it\u2019s very important to understand that not all tokens are created equally, and to do your research, and to understand what you\u2019re buying.What are the functions of ConsenSys Capital?ConsenSys Capital is a constellation of three projects. First and foremost is Token Foundry, which is essentially a crypto-economic designer of tokens. We help blockchain companies with strong technologists do the crypto-economic design of their token, audit all of their smart contracts using our ConsenSys Diligence tools, do all of their financial reporting using Balanc3, and help them with marketing their token and business through the launch in a proper jurisdiction, with legal button up and the smart contracts audited.ConsenSys Ventures, which is driven by Kavita Gupta, is a venture capital fund that has already begun investing in opportunities. The last one is ConsenSys Capital Asset Management, which is creating a bridge for all of the legacy institutions, even the most heavily regulated, risk-averse ones possible, to get involved with digital assets. For example, creating custodial solutions, separately managed accounts, and helping create derivative products, so that all the institutional investors on Earth are able to acquire this risk if they so choose, in a compliant manner.ConsenSys has grown to over 500 people, mostly in a few short months. From someone who has been there since the beginning, how has the atmosphere changed with the influx of new faces?The one thing that I\u2019ve gotta say is that there is an overall energy of the ecosystem that is driving everybody. I remember going downstairs at Ethereal SF and it was just screamin\u2019. There\u2019s so much excitement. There\u2019s so much positive energy in the ecosystem and that\u2019s a positive, contributing factor to ConsenSys. I think that the fearless leader in this holocratic organization, Joe Lubin, is so positively intentioned and so ego-free and humble, that anybody who doesn\u2019t act in that same spirit kind of\u2026.it\u2019s odd. He\u2019s set a very chill example.I think there are growing pains as a company, like, how do we get to know everybody in the organization, how do we get in front of the work? There\u2019s business that we\u2019re saying no to because we\u2019re not IBM, we don\u2019t have 100,000 people that we can just put on a project right now. But overall, there\u2019s a very positive atmosphere.Want to learn more? Check out ConsenSys.net and the ConsenSys Media\u00a0blog.Disclaimer: The views expressed by the author above do not necessarily represent the views of Consensys AG. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": "7"}, {"title": "A guide to developing an Ethereum decentralized voting application", "author_name": "Timothy Ko", "link": "https://medium.freecodecamp.org/developing-an-ethereum-decentralized-voting-application-a99de24992d9?source=search_post", "post_date": "Mar 7, 2018", "readtime": "16 min read", "upvotes": "2.1K", "content": "A guide to developing an Ethereum decentralized voting applicationTimothy KoBlockedUnblockFollowFollowingMar 7, 2018Photo by Andre\u00a0FrancoisAfter the entire cryptocurrency market passed 700 billion dollars in market cap, the cryptocurrency space exploded over these last couple months. But this is just the beginning. As blockchain systems continue to evolve and scale, one great way to dip into this new space and leverage this technology is with decentralized applications, otherwise known as dApps.CryptoKitties, famous for its congestion of the Ethereum Blockchain, is a great example of a dApp, uniquely combining concepts of breedable and collectible cats with the blockchain. This sensational game is just one creative example out of a virtually unlimited number of opportunities.Although seemingly very complicated, certain frameworks and tools have been developed to abstract your interactions with the blockchain and smart contracts. In this blog post, I will go over one way to create a decentralized voting app on Ethereum. I will briefly go over Ethereum, but you probably should have an understanding of it to use this guide to the fullest. In addition, I do expect you to know Javascript.Why make a Decentralized Voting\u00a0app?Essentially, a great decentralized application utilizing blockchain technology allows you perform the same actions you would today (like transferring money) without a trusted third party. The best dApps have a specific real world use-case that leverages the unique characteristics of blockchain.In essence, the blockchain is a shared, programmable, cryptographically secure and therefore trusted ledger which no single user controls and which can be inspected by anyone.- Klaus\u00a0SchwabEven though a voting app might not be a great app for consumers, I\u2019ve chosen to use it for this guide because the main issues blockchain solves\u200a\u2014\u200atransparency, security, accessibility, audibility\u200a\u2014\u200aare the main problems plaguing current democratic elections.Since a blockchain is a permanent record of transactions (votes) that are distributed, every vote can irrefutably be traced back to exactly when and where it happened without revealing the voter\u2019s identity. In addition, past votes cannot be changed, while the present can\u2019t be hacked, because every transaction is verified by every single node in the network. And any outside or inside attacker must have control of 51% of the nodes to alter the record.Even if the attacker was able to achieve that while incorrectly entering user votes with their real IDs under the radar, end to end voting systems could allow voters to verify whether their vote was correctly entered in the system, making the system extremely safe.Core Components of\u00a0EthereumI do expect you to have an understanding of Blockchain and Ethereum for the remainder of this guide. Here is an awesome guide about it, and I\u2019ve written a brief overview of the core components I\u2019d like you to know.Smart Contracts act as the back-end logic and storage. A contract is written in Solidity, a smart contract language, and is a collection of code and data that resides at a specific address on the Ethereum blockchain. It\u2019s very similar to a class in Object Oriented Programming, where it includes functions and state variables. Smart Contracts, along with the Blockchain, are the basis of all Decentralized Applications. They are, like Blockchain, immutable and distributed, which means upgrading them will be a pain if they are already on the Ethereum Network. Fortunately, here are some ways to do that.The Ethereum Virtual Machine(EVM) handles the internal state and computation of the entire Ethereum Network. Think of the EVM as this massive decentralized computer that contains \u201caddresses\u201d that are capable of executing code, changing data, and interacting with each other.Web3.js is a Javascript API that allows you to interact with the Blockchain, including making transactions and calls to smart contracts. This API abstracts the communication with Ethereum Clients, allowing developers to focus on the content of their application. You must have a web3 instance imbedded in your browser to do so.Other Tools we will\u00a0useTruffle is a popular testing development framework for Ethereum. It includes a development blockchain, compilation and migration scripts to deploy your contract to the Blockchain, contract testing, and so on. It makes development easier!Truffle Contracts is an abstraction on top of the Web3 Javascript API, allowing you to easily connect and interact with your Smart Contract.Metamask brings Ethereum to your browser. It is a browser extension that provides a secure web3 instance linked to your Ethereum address, allowing you to use Decentralized Applications. We will not be using Metamask in this tutorial, but it is a way for people to interact with your DApp in production. Instead, we will inject our own web3 instance during development. For more information, check out this link.Let\u2019s Start!For simplicity, we actually won\u2019t be building the full voting system I described earlier. For ease of explanation, it will just be a one page application where a user can enter their ID and vote for a candidate. There will also be a button that counts and displays the number of votes per candidate.This way, we will be able to focus the process of creating and interacting with the smart contracts within an application. The source code for this entire application will be in this repository, and you will need to have Node.js and npm installed.First, let\u2019s install Truffle globally.npm install -g truffleTo use Truffle commands, you must run them in an existing project.git clone https://github.com/tko22/truffle-webpack-boilerplatecd truffle-webpack-boilerplatenpm installThis repository is just a skeleton of a Truffle Box, which are boilerplates or example applications that you can get in one command\u200a\u2014\u200atruffle unbox [box name]. However, the Truffle box with webpack isn\u2019t updated with the latest versions and includes an example application. Thus, I created this repo (the one linked in the instructions above).2. Directory StructureYour directory structure should include these:contracts/\u200a\u2014\u200aFolder holding all of the Contracts. DO NOT DELETE Migrations.solmigrations/\u200a\u2014\u200aFolder holding Migration files, which help you deploy your smart contracts into the Blockchain.src/\u200a\u2014\u200aholds the HTML/CSS and Javascript files for the applicationtruffle.js\u200a\u2014\u200aTruffle Configuration filebuild/\u200a\u2014\u200aYou won\u2019t see this folder until you compile your contracts. This folder holds the build artifacts so don\u2019t modify any of these files! Build artifacts describe the function and architecture of your contract and give Truffle Contracts and web3 information on how to interact with your Smart Contract in the Blockchain.1. Write your Smart ContractsEnough with the setup and introduction. Let\u2019s get into the code! First off, we\u2019ll be writing our Smart Contract, which is written in Solidity (the other languages aren\u2019t as popular). It may seem scary, but it\u2019s not.For any application, you want your smart contracts to be as simple as possible, even stupidly simple. Remember that you have to pay for every computation/transaction you make, and your smart contracts will be on the Blockchain forever. So, you really want it to work perfectly\u2013\u2013meaning, the more complex it is, the easier it is to make a mistake.Our contract will include:State Variables\u200a\u2014\u200avariables that hold values that are permanently stored on the Blockchain. We will use state variables to hold a list and number of Voters and Candidates.Functions\u200a\u2014\u200aFunctions are the executables of smart contracts. They are what we will call to interact with the Blockchain, and they have different levels of visibility, internally and externally. Keep in mind that whenever you want to change the value/state of a variable, a transaction must occur\u200a\u2014\u200acosting Ether. You can also make calls to the Blockchain, which won\u2019t cost any Ether because the changes you made will be destroyed (more on this in Section 3 when we actually make the transactions and calls).Events\u200a\u2014\u200aWhenever an event is called, the value passed into the event will be logged in the transaction\u2019s log. This allows Javascript callback functions or resolved promises to view the certain value you wanted to pass back after a transaction. This is because every time you make a transaction, a transaction log will be returned. We will use an event to log the ID of the newly created Candidate, which we\u2019ll display (check the first bullet point of Section 3).Struct Types\u200a\u2014\u200aThis is very similar to a C struct. Structs allow you to hold multiple variables, and are awesome for things with multiple attributes. Candidates will only have their name and party, but you can definitely add more attributes to them.Mappings\u200a\u2014\u200aThink of these like hash-maps or dictionaries, where it has a key-value pair. We will use two mappings.There are a couple more types that aren\u2019t listed here, but some of them are a little more complicated. These five encompass many of the structures a smart contract will generally use. These types are explained more in depth here.For reference, here\u2019s the Smart Contract\u2019s code. Note that this file should be called Voting.sol but I wanted the Github gist to have styling so I gave it a\u00a0.js extension. Like the rest of this guide, I will provide comments within the code that will explain what it is doing, and I\u2019ll explain the big picture afterwards while pointing out certain caveats and logic.Basically, we have two Structs (types that hold multiple variables) that describe a Voter and a Candidate. With Structs, we are able to assign multiple properties to them, such as emails, address, and so on.To keep track of Voters and Candidates, we put them into separate mappings where they are integer indexed. A Candidate or Voter\u2019s index/key\u2013\u2013lets call it ID\u200a\u2014\u200ais the sole way for functions to access them.We also keep track of the number of Voters and Candidates, which will help us index them. In addition, don\u2019t forget about the event in line 8, which will log the candidate\u2019s ID when it\u2019s added. This event will be used by our interface, since we need to keep track of a candidate\u2019s ID in order to vote for a candidate.I know, contrary to what I said earlier about making contracts super simple, I made this contract a little more complicated in comparison to what this application actually does. However, I did this so that it would be a lot easier for you guys to make edits and add features to this application afterward (more on that at the end). If you\u2019d like to make an even simpler voting application, the smart contract could work in less than 15 lines of code.Note that the state variables numCandidates and numVoters are not declared public. By default, these variables have a visibility of internal, which means that they can only be directly accessed by the current contract or derived contracts (don\u2019t worry about that, we won\u2019t be using it).We are using 32bytes for strings instead of using the string type. Our EVM has a word-size of 32 bytes, so it is \u201coptimized\u201d for dealing with data in chunks of 32 bytes. (Compilers, such as Solidity, have to do more work and generate more bytecode when data isn\u2019t in chunks of 32 bytes, which effectively leads to higher gas cost.)When a user votes, a new Voter struct is created and added to the mapping. In order to count the number of votes a certain candidate has, you must loop through all the Voters and count the number of votes. Candidates operate on the same behavior. Thus, these mappings will hold the history of all Candidates and Voters.2. Instantiate web3 and contractsWith our Smart Contract completed, we now need to run our test blockchain and deploy this contract onto the Blockchain. We\u2019ll also need a way to talk to it, which will be via web3.js.Before we start our test blockchain, we must create a file called 2_deploy_contracts.js inside the folder /contracts that tells it to include your Voting Smart Contract when you migrate.To start the development Ethereum blockchain, go to your command line and run:truffle developThis will live on your command line. Since Solidity is a compiled language, we must compile it to bytecode first for the EVM to execute.compileYou should see a build/ folder inside your directory now. This folder holds the build artifacts, which are critical to the inner workings of Truffle, so don\u2019t touch them!Next, we must migrate the contract. Migrations is a Truffle script that helps you alter the state of your application\u2019s contract as you develop. Remember that your contract is deployed to a certain address on the Blockchain, so whenever you make changes, your contract will be located at a different address. Migrations help you do this and also help you move data around.migrateCongratulations! Your smart contract is now on the Blockchain forever. Well, not really\u2026. because truffle develop refreshes every time you stop it.If you\u2019d like to have a persisting blockchain, consider Ganache, which is also developed by Truffle. If you are using Ganache, you will not need to call truffle develop. Instead, you will run truffle compile and truffle migrate. To understand what it really takes to deploy a contract without Truffle, check out this blog post.Once we have deployed the smart contract to the Blockchain, we will have to setup a web3.0 instance with Javascript on the browser whenever the application starts. Thus, the next piece of code will be placed in the bottom of js/app.js. Note that we are using web3.0 version 0.20.1.You don\u2019t really have to worry too much if you don\u2019t understand this code. Just know that this will be run when the application starts and will check if there already is a web3 instance (Metamask) in your browser. If there isn\u2019t, we\u2019ll just create one that talks to localhost:9545, which is the Truffle development blockchain.If you\u2019re using Ganache, you must change the port to 7545. Once an instance is created, we will call the start function (I\u2019ll define it in the next section).3. Add functionalityThe last thing we\u2019ll need to do is to write the interface for the application. This involves the essentials for any web application\u2013\u2013HTML, CSS, and Javascript (We\u2019ve already written a little of the Javascript with creating a web3 instance). First, let\u2019s create our HTML file.This is a very simple page, with an input form for user ID, and buttons for Voting and Counting votes. When those buttons are clicked, they will call specific functions that vote, and will find the number of votes for the candidates.There are three important div elements though, with ids: candidate-box, msg, and vote-box, which will hold checkboxes for each candidate, a message, and the number of votes, respectively. We also import JQuery, Bootstrap, and app.js.Now, we just need to interact with the Contract and implement the functions for voting and counting the number of votes for each candidate. JQuery will manipulate the DOM, and we\u2019ll be using Promises as we make transactions or calls to the Blockchain. Below is the code for app.js.Note that the code I provided in the previous step for creating a web3 instance is also here. First, we import the necessary libraries and webpack stuff, including web3 and Truffle Contracts. We will be using Truffle Contracts, which is built on top of web3 to interact with the Blockchain.To use it, we\u2019ll grab the build artifacts that were automatically built when we compiled the voting smart contract and use them to create the Truffle Contract. Finally, we set up the functions in the global variable window for starting the app, voting for a candidate, and finding the number of votes.To actually interact with the Blockchain, we must create an instance of the Truffle Contract by using the deployed function. This, in turn, will return a promise with the instance as the return value that you will use to call functions from the smart contract.There are two ways to interact with those functions: transactions and calls. A transaction is a write-operation, and it will be broadcast to the entire network and processed by miners (and thus, costs Ether). You must perform a transaction if you\u2019re changing a state variable, since it will change the state of the blockchain.A call is a read-operation, simulating a transaction but discarding the change in state. Thus, it will not cost Ether. This is great for calling getter functions (check out the four getter functions we wrote previously in our smart contract).To make a transaction with Truffle Contracts, you write instance.functionName(param1, param2), with instance as the instance that was returned by the deployed function (Check line 36 for an example). This transaction will return a promise with the transaction data as the return value. Thus, if you return a value in your smart contract function but you perform a transaction with that same function, it will not return that value.This is why we have an event that will log whatever you want it to write into the transaction data that will be returned. In the case of lines 36\u201337, we make a transaction to add a Candidate. When we resolve the promise, we have the transaction data in result.To get the candidateID that we logged with the event AddedCandidate() (check the smart contract to see it 0), we must go through the logs and retrieve it like this: result.logs[0].args.candidateID.To really see what\u2019s going on, use the Chrome developer tools to print out the result and look through its structure of result.To make a call, you will write instance.functionName.call(param1,param2). However, if a function has the keyword view, then Truffle Contracts will automatically create a call and thus you don\u2019t need to add the\u00a0.call.This is why our getter functions have the view keyword. Unlike making a transaction, the returned promise of a call will have a return value of whatever is returned by the smart contract function.I will now explain the 3 functions briefly but this should be very familiar if you\u2019ve built applications retrieving/changing data from a data store and manipulating the DOM accordingly. Think of the Blockchain as your database, and the Truffle Contracts as the API to get data from your database.App.start()This function is called immediately after we create a web3 instance. To get Truffle Contracts to work, we must set the provider to the created web3 instance and set defaults (like which account you\u2019re using and the amount of gas you want to pay to make a transaction).Since we are in development mode, we can use any amount of gas and any account. During production, we would take the account provided by MetaMask and try to figure out the smallest amount of gas you could use, since it\u2019s actually real money.With everything set up, we will now display the checkboxes for each candidate for the user to vote. To do this, we must create an instance of the contract and get the Candidate\u2019s information. If there aren\u2019t any candidates, we will create them. In order for a user to vote for a candidate, we must provide the ID of that certain candidate. Thus, we make each checkbox element have an id(HTML element attribute) of the ID of the candidate. Additionally, we will add the number Of candidates to a global variable numOfCandidates, which we will use in App.findNumOfVotes(). JQuery is used to append each checkbox and its candidate name to\u00a0.candidate-box.App.vote()This function will vote for a certain candidate based on which checkbox is clicked and its id attribute.One, we will check whether the user has input their userID, which is their identification. If they didn\u2019t, we display a message telling them to do so.Two, we will check whether the user is voting for a candidate, checking if there is at least one checkbox that\u2019s clicked. If none of the checkboxes were clicked, we will also display a message telling them to vote for a candidate. If one of the checkboxes is clicked, we will grab the id attribute of that checkbox, which is also the linked candidate\u2019s ID, and use that to vote for the candidate.Once the transaction has been completed, we will resolve the returned promise and display a \u201cVoted\u201d message.App.findNumOfVotes()This last function will find the number of Votes for each candidate and display them. We will go through the candidates and call two smart contract functions, getCandidate and totalVotes. We will resolve those promises and create an HTML element for that certain candidate.Now, start the application and you\u2019ll see it on http://localhost:8080/!npm run devResourcesI know, it\u2019s a lot\u2026 You might have this article open for a while as you slowly develop this application and really understand what\u2019s going on. But that\u2019s learning! Please supplement this guide with all the documentation from Ethereum, Truffle, and what I have provided below. I\u2019ve tried to hit many of the key points in this article, but it\u2019s just a brief overview and these resources will help a lot.Everything about Solidity and Smart Contracts\u200a\u2014\u200aI mean EverythingEverything about TruffleTruffle Contracts DocsWeb3 Javascript API\u200a\u2014\u200athis will be great to know and reference, but Truffle Contracts abstracts many parts of thisUseful DApp patternsEthereum Docs\u200a\u2014\u200alook to the side bar and there\u2019s plenty of stuffCryptoKitties Code Explanation\u200a\u2014\u200aThe writer goes through the important parts of CryptoKitties\u2019 Smart ContractSmart Contract Best Practices\u200a\u2014\u200aa must readConclusionBuilding applications on Ethereum is pretty similar to a regular application calling a backend service. The hardest part is writing a robust and complete smart contract. I hope this guide helped you understand the core knowledge of decentralized applications and Ethereum and will help you kick-start your interest in developing them.If you\u2019d like to build off of what we\u2019ve built, here are some ideas. I\u2019ve actually written the smart contract in such a way that it\u2019s easily implemented with everything I\u2019ve given you in this guide.Display the party of each Candidate. We already get the party of a candidate when we run getCandidate(id).Check if the User-entered ID is unique.Ask and store more information about a User, such as their date of birth and home address.Add in an option to see whether a person with a specific id has voted or not. You would create a new form to enter in an ID, which you would then search for that certain user in the blockchain.Write a new smart contract function that counts the votes for BOTH candidates at once. Currently, we have to make two separate calls for two candidates, requiring the contract to loop through all the Users twice.Allow new Candidates to be added. This means adding a new form to add Candidates, but also changing up a little on how we display and vote for candidates in the frontend.Require Users to have an Ethereum Address to vote. My logic for not including user addresses is because voters wouldn\u2019t be expected to have Ethereum to participate in this voting process. However, many DApps will require users to have an Ethereum Address.Also, here are some tips that could prevent some roadblocks from happening:Double and triple check your smart contract functions when something weird is happening. I spent a couple hours on a bug to figure out that I returned the wrong value in one of my functions.Check whether your URL and port are correct when you connect to your development blockchain. Remember: 7545 is for truffle develop and 9545 is for Ganache. These are defaults, so if you can\u2019t connect to your blockchain, you might\u2019ve changed them.I didn\u2019t go over this because this guide would\u2019ve been too long and I probably will make another post on this\u200a\u2014\u200abut you should test your contracts! It will help a lot.If you aren\u2019t familiar with promises, go through how they work and how to use them. Truffle Contracts uses promises and the beta for web3 will also support promises. They can, if you do them wrong, mess up a lot of the data you\u2019re retrieving.Cheers to working towards a decentralized and secure internet\u200a\u2014\u200aWeb 3.0!", "responses": "13"}, {"title": "Sharding centralizes Ethereum by selling you Scaling-In disguised as Scaling-Out", "author_name": "StopAndDecrypt", "link": "https://hackernoon.com/sharding-centralizes-ethereum-by-selling-you-scaling-in-disguised-as-scaling-out-266c136fc55d?source=search_post", "post_date": "Jun 7, 2018", "readtime": "46 min read", "upvotes": "3.3K", "content": "Sharding centralizes Ethereum by selling you Scaling-In disguised as Scaling-OutThe differences between Light-Clients & Fully-Validating NodesStopAndDecryptBlockedUnblockFollowFollowingJun 7, 2018Are you wondering what that even means? Don\u2019t worry, you will. Go make a cup of coffee first, it\u2019s another long one. If you haven\u2019t read this yet, start here:The Ethereum-blockchain size has exceeded 1TB, and yes, it\u2019s an issue(TL;DR: It has nothing to do with storage space limits)hackernoon.comThe following is an exchange I had with Vitalik following the publication of the article above. Although initiated by his response to my article, the purpose of the exchange from my perspective became to extract the underlying reason him and many other Ethereum fans don\u2019t see sharding as diminishing the integrity of the network it\u2019s being applied to. Fortunately he was cooperatively replying to the questions I asked, which were intentionally done to break down the logic so we could ultimately arrive to this semi-expected response:I meant nodes. He knew what I meant and responded accordingly.I\u2019m highlighting this because it sums the entirety of this article pretty well.Vitalik: \u201cThis is the way Ethereum is now, and Sharding will be no different when we switch to it, except that some things will be easier for some people.\u201dMe: \u201cI don\u2019t agree with that at all, and here\u2019s a full-length counter-response.\u201dThe aim of this article will be to explain the following information and their nuances in a digestible format (in no specific order)\u00a0:Differences in network architecture between Bitcoin, Old-Ethereum, and New-Ethereum (2.0). Very basic math, no fancy equations. Just a bit of logic.Blockchain-based networks, depending on their architecture, will inherently centralize or decentralize over enough time. This excludes bootstrapping & hype-cycles periods (however long they may be), and assumes no changes to the protocol are made. We can refer to this as the network\u2019s \u201cinherent direction\u201d.How changes to the protocol can have immediate or intermediate effects on the networks [de]centralization, but not necessarily change the \u201cinherent direction\u201d of the network over the long-term.Ethereum is inherently centralizing as it stands now, switching to Proof of Stake doesn\u2019t change that, and sharding only delays the inevitable by selling you a faulty scaling solution.It\u2019s going to be long, but easy. If you care about understanding this, read it.IndexConceptual PrimerTypes of scaling, and how they apply to decentralized blockchain networks.The importance of fully-validating nodes in decentralized networks.Inherent Centralization vs. Inherent DecentralizationNetwork DifferencesBitcoin\u2019s network topology, and how it\u2019s inherently decentralizing.Ethereum\u2019s Proof of Work topology, and how it\u2019s inherently centralizing.Ethereum\u2019s Proof of Stake topology, and how it\u2019s no different.ShardingEthereum\u2019s Proof of Stake topology w/Sharding, and how it\u2019s even worse.Counter RepliesA counter response to Vitalik\u2019s response.A counter response to this article:Keeping up with the Etherians\u200a\u2014\u200aA response to blockchain size concernsYesterday @StopAndDecrypt published a medium article discussing the growth of the Ethereum blockchain and concerns\u2026medium.comScaling-What? Scaling-Who? Scaling-Where?Scaling\u2026\u00a0\u2026When?Here is Vitalik saying Sharding is a Layer 1 scaling solution:Note that scaling is used here without context, so let\u2019s provide some context. We can\u2019t keep going around using the term scalability without an agreed upon definition of what the word even means. Even if the definition is different for different people, the one making an argument should at least provide theirs.When I talk about scaling in this article, I\u2019m talking about one thing and one thing only, increasing functionality without sacrificing decentralization, and the total set of validating nodes is one of the most direct representations of how decentralized the network is. Focusing on anything else when discussing scaling in regards to blockchain networks is either a result of not properly understanding this, disagreeing with it, or an act of intentionally misleading for whatever reasons one may have to do so.It\u2019s important to make that clear first, because understanding the differences in the following types of scaling and how they apply to decentralized networks require that baseline.Scaling Out: Increasing the number of fully-validating nodes on the base layer (L1) of the network, or, increasing functionality at the base layer without affecting the \u201cinherent direction\u201d of the network. Increasing functionality increases incentives to use the network, thus increasing the set of validating nodes. So in both cases, the validating node count increases by some degree.Scaling Up: Adding layers to the network above the base layer. Scaling up can be done correctly or incorrectly. The right way to do it, is to have little to no effects on the layers below it. Payment channel networks like Lightning are an example of good scaling-up. Sidechains are arguably an example of bad scaling-up, because they can potentially break the mining security model, but this article isn\u2019t about that.Conversely there\u2019s:Scaling In: Decreasing the number of fully-validating nodes. Adding functionality at the base layer that reduces the number of full-nodes is scaling-in. Sharding does this, and it\u2019s the reason I\u2019m writing this article.Scaling Down: Decreasing layer complexity. This is unnecessary in a decentralized network. This term is usually used in centralized systems like companies trying to downsize or reorganize their internal structure.The term \u201cnode\u201d gets thrown around a lot but more often than not remains undefined to an outsider trying to follow along. I have a friend who tried telling me that Nano lets everyone run a node and have their own blockchain. People just don\u2019t know what they\u2019re talking about, and it\u2019s because the right information isn\u2019t readily available for them. Increasing the node count is a meaningless endeavor if they aren\u2019t the right kinds of nodes. So when I say you\u2019re being sold a scaling-in solution, it\u2019s because the important kinds of nodes are going to go down as a result of the change. Not necessarily right away, but over time, and I\u2019ll touch on why that\u2019s important as well.The importance of nodes that fully-validatehttps://twitter.com/lopp/status/1001903809004736513 /// Read my BCash article if you\u2019re interested in why the \u201cBitcoin\u201d Twitter account blocked\u00a0me.The first thing I want to do is make a simple case for why these are important, then I\u2019ll present you with the common arguments against it. I\u2019ll respond to those arguments briefly, and then go in depth into how the Bitcoin network actually works later in this article, and then you\u2019ll be able to see just from my explanation where these anti-node arguments fall short.Just a heads-ups: If you came here to read about Ethereum and you don\u2019t want to learn about how Bitcoin\u2019s network functions, then you deserve to lose any money you\u2019ve invested, or any time you\u2019ll waste developing for Ethereum.My case here is pretty\u00a0simple:In Bitcoin, all nodes fully validate. If someone wants to submit anything that\u2019s not valid, it\u2019s not going to circulate around the network. Every node is a white blood cell. There is no better security than this for a blockchain network.Some common arguments used against the pro-node stance\u00a0are:Your nodes don\u2019t enforce consensus unless they are \u201cmining-nodes\u201d, and your nodes get in the way of \u201cmining-nodes\u201d.Edges matter more than nodes for decentralization so increasing node count doesn\u2019t always net you more decentralization.How many nodes are needed to be secure? Surely there\u2019s a \u201cgood enough\u201d quantity of nodes that can be reached?1: \u201cNodes don\u2019t enforce consensus unless they are\u00a0mining.\u201dThis one I\u2019ll respond to by diving straight into how Bitcoin\u2019s network works. You\u2019ll see very easily at the end of the \u201cBitcoin Network Topology\u201d section how it answers this. I also published that section as a standalone article because of how rampant misinformation is spread on this subject alone. (This will all circle back to Sharding and Ethereum, trust me.)2: \u201cEdges are more important than\u00a0nodes.\u201dJust to make this clear for the rest of the article, when I say decentralized I mean (c) in the following diagram (but in \u201c4D\u201d not 2D) that I stole from Vitalik, who used it to write about how bad this picture is:Edges are just the connections from one node to another. The following diagrams are networks of 16 nodes each. Same amount of nodes, but one has much less edges. The other one has every node connected to every other node.The difference between these?The first one has enough edges to propagate (we\u2019ll get further into this later) to every node on the network in a sufficient amount of \u201chops\u201d and none of the nodes are censorable because the connections (edges) are properly distributed.The other network?Everyone knows who you are.Everyone knows if the transaction you sent was created by you or not.Everyone knows the block a node relays was created by that node or relayed through that node from a potential miner they don\u2019t like.Now they know that IP address holds an address with a lot of Bitcoin on it.They know it was a miner, or they know what IP address is allowing an unwanted miner to relay those blocks.Anyone who controls the limited amount of validators can censor you, or any block your transactions are included in.It\u2019s the opposite of private, and it\u2019s the opposite of secure.In respect to edges, there is definitely an \u201cenough\u201d amount, as you\u2019ll see later. I also talk about propagation in my prior article and it\u2019s only getting better despite these \u201climited\u201d amount of edges. It\u2019s mostly an argument used by scam artists (who even Vitalik frequently calls out) that want to sound smart when they\u2019re scamming\u00a0:He also comparing a Layer 1 network to a Layer 2 network here, like an\u00a0idiot.3: \u201cHow many nodes are\u00a0needed?\u201dThe \u201chow many is enough to secure\u201d argument is probably one of the biggest signs, in my opinion, of someone not getting the bigger picture. By asking this question they\u2019ve already agreed to the condition that there needs to be some to be considered secure, and now they are just trying to take the argument towards figuring that value out. Sometimes they\u2019re genuine, other times they\u2019re diverting the subject.Here\u2019s some simple questions I don\u2019t necessarily expect you to have an answer to. Let\u2019s say we both determine and agree that number is 20,000 full-nodes.How do we code the protocol to ensure the node count stays above and doesn\u2019t drop below 20,000 nodes?Even if we figured that out, how does the network know how big or small it is without an external oracle telling it that it\u2019s at that number?We agreed it\u2019s 20,000 nodes, but why did we agree on 20,000? Did we measure something in \u201creal life\u201d and determine we needed 20,000 \u201cpeople\u201d to prevent government takeover? It\u2019s a silly example, but what happens if the population multiplies by 10? Is that 20,000 number still accurate?If we decide on some value now, and determine that was a bad value in the future, we then have to go through the process (and bear the risk) of trying to change the protocol to adjust to the new value. Is that worth it?My point here is, there is no way to do this. You can\u2019t code the network to \u201chover\u201d at a certain node count. I\u2019m very inclined to believe the following, and I\u2019ve seen no good arguments against this: Any blockchain network, if the protocol is left unchanged and demand continues to grow, will decentralize or centralize over time depending on how they are built. So if decentralization is a feature you want, the protocol needs to be inherently decentralizing. This means that the protocol needs to be designed in a way that ensures the validating node count will grow over time. If it\u2019s ensured growth, it\u2019s not ensured shrinkage, which brings me to the next section.Inherent Centralization/DecentralizationI want to begin this section by clearing up some of the confusion regarding how these chains compare. There\u2019s some admitted salt about the methods of comparison I and others have used in the past, so I aim to show you a fairer comparison that actually makes it all look worse.The Bitcoin blockchain \u201csize\u201d grows linearly because the data a node needs to process at max block capacity is static over time. So when you see the first chart below, it\u2019s equal to the second chart.", "responses": "9"}, {"title": "DAppChains: Scaling Ethereum DApps Through Sidechains", "author_name": "Georgios Konstantopoulos", "link": "https://medium.com/loom-network/dappchains-scaling-ethereum-dapps-through-sidechains-f99e51fff447?source=search_post", "post_date": "Feb 8, 2018", "readtime": "5 min read", "upvotes": "2.9K", "content": "DAppChains: Scaling Ethereum DApps Through SidechainsGeorgios KonstantopoulosBlockedUnblockFollowFollowingFeb 8, 2018In our previous article about sidechains we mentioned how we are aiming to be the blockchain platform for building and running large-scale online games and social apps.We envision a future where communites are run on a blockchain and sites such as Twitter, Reddit, Facebook, StackOverflow and even MMORPG\u2019s are totally community-driven and impossible to censor.Can\u2019t Ethereum do\u00a0that?Today\u2019s DApps have bottlenecks which do not allow them to scale:They\u2019re competing with all other DApps and financial transactions for resources (i.e. users pay more for gas to get a transaction confirmed faster, which creates a non-scalable fee market)Their transactions are treated with the same level of security as transfers of millions of dollars of wealth.Unless there is a central entity controlling them, they are not updatable.We noticed that not every action on these DApps requires the same highest level of security. An attacker has much less incentive to exploit small transfers of value in a game or posts on a social app compared to censoring or double-spending Ether transactions which are worth millions of dollars.Essentially, Ethereum\u2019s users are paying a premium to run functions on DApps when that level of maximum security is not necessary.Enter DAppChainsWhat is a DAppChain?Loom Network allows developers to build large-scale games and social apps by using DAppChains\u200a\u2014\u200aDApps running as their own sidechains.More specifically, a DAppChain is an Application Specific Sidechain, that runs parallel to a mainchain, Ethereum in this case. Its ruleset is customized based on the use-case, and its security is maintained by the mainchain\u2019s consensus algorithm.1 DApp = 1 DAppChain.DApps running on Loom DAppChains are democratic.Users who want to support the DApp and have voting rights in its development can run their own nodes on the DAppChain. This means if the developers release an update that the users do not agree with, they can configure their nodes to reject the update and fork away.Users are able to vote and express their opinions, compared to traditional games and web services where developers can issue a change that the community does not agree with.DApps running on Loom DAppChains are scalable.Since all transactions happening on a DAppChain are specific to its DApp, it can run a consensus algorithm that optimizes for those particular types of transactions.For example, in the case of a game, we can use a consensus algorithm like Delegated Proof of Stake that\u2019s extremely fast and cheap to run.This is analogous to how ASICs are used in order to achieve very high performance for specific use-cases.Each DAppChain is tailored and optimized for its\u00a0DApp.The data of DApps running on Loom DAppChains is public and shareable.With a traditional game or web service, if the developers decide to launch an update that users do not agree with or ban/censor an account, nothing can be done about it (except for filing a support ticket). Any data such as game progress up to that point in the game is impossible to access again.With a DAppChain, on the other hand, running a node gives its users a full copy of all the data since the DAppChain\u2019s Genesis Block.This shareable and public data also allows for further innovation and the surfacing of entirely new concepts, such as two games sharing the same state.You could have a World of Warcraft-type game, where the world is created by players in a Minecraft-type game. The actions of the players in each world would affect the world of the other game.Developers could release a new game that uses character data from another game world stored on a DAppChain. That way, new users of the game could immediately jump into a new world with their existing characters and assets (essentially airdropping your old game\u2019s data to the new game).DApps running on Loom DAppChains are\u00a0secure.As discussed before, algorithms that sacrifice decentralization for scalability are not ideal, as they increase the attack surface from powerful adversaries. This applies to Loom DAppChains as well, with one major difference, incentives.An attacker needs to spend enormous amounts of resources in order to attack a blockchain. In a general-purpose blockchain like Ethereum, there are huge incentives to do so, since there are large amounts of value being transferred and there is a high reward for double-spending or censoring a number of transactions.In a DAppChain which represents a community, the following apply:There is much less to gain from censoring a tweet compared to censoring a financial transaction. This disincentivizes malicious behavior, unless there is political gain, which we do not take into account.If an attacker is successful in attacking the community despite the low reward, the community is able to freely fork at an earlier point in time and take their own path, similarly to how Ethereum split to Ethereum and Ethereum Classic after the DAO hack.The end result is a way to have DApps that can achieve a balance between scalability and decentralization.Building Loom DAppChains is developer-friendly.Developers will be able to use Loom\u2019s Software Development Kit (SDK) to generate the foundation for a DAppChain.Then, they can focus on writing the application logic while all the blockchain logic is handled for them.The first release of our SDK will be in March.Loom Network DAppChain Generator\u200a\u2014\u200aIncludes templates, or you can\u00a0DIYWe enable the creation of more than just a DApp\u200a\u2014\u200aIt\u2019s a real blockchain.Block explorer for our pilot DAppChainConclusionThis post describes our vision for the scalable, yet decentralized future of DApps on Ethereum.Note that Ethereum\u2019s scaling solutions such as Raiden, Plasma, Sharding, Casper or Truebit are still very much necessary.Loom Network contributes to scaling by offloading the mainchain\u2019s computations to DAppChains, while still allowing the existence of DApps that run on a secure blockchain.Summarizing, Loom\u2019s DAppChains enable the following:A user-friendly way for developers to spin up their own blockchain-based apps without having to know anything about implementing the actual blockchain logic, allowing them to focus on the core app logic.Building full-scale apps such as MMORPGs and social media which are not limited by the high costs of gas on Ethereum and slow speeds.Running the entire DApp on a decentralized blockchain, contrary to popular DApps which partly run on Ethereum, and the rest on a centralized web server.DAppChains make DApps updatable, forkable, and have publicly shared data, allowing further experimenting and innovation.", "responses": "15"}, {"title": "Zero-knowledge proofs, Zcash, and\u00a0Ethereum", "author_name": "Matt Luongo", "link": "https://blog.keep.network/zero-knowledge-proofs-zcash-and-ethereum-f6d89fa7cba8?source=search_post", "post_date": "Sep 18, 2017", "readtime": "11 min read", "upvotes": "1.8K", "content": "Zero-knowledge proofs, Zcash, and\u00a0EthereumMatt LuongoBlockedUnblockFollowFollowingSep 18, 2017Part 3 of a series on \u201cPrivacy on the Blockchain\u201d.Photo by David Straight.In the third part of this series, I\u2019ll focus on zero-knowledge proofs, a building block for greater financial and data privacy in cryptocurrencies, including Zcash and Ethereum.At a bar, you\u2019re casually discussing privacy options with your fellow patrons. One gentleman swears by Dash\u2019s PrivateSend. Another fellow offers to sell you the finest Monero. The bartender is an Ethereum fan\u200a\u2014\u200ashe hasn\u2019t been concerned about privacy because it\u2019s \u201con the roadmap\u201d. Between mixers, ring signatures, and master nodes, you wonder aloud whether there\u2019s a better tool to ensure data and financial privacy.At the end of the bar, a thin, slightly balding man looks like he\u2019d like to join the conversation. You notice, and smile. The man leans nervously toward you, swallows, and in a hushed tone, says\u2026\u201c\u2026zero-knowledge proofs.\u201dZero-knowledge proofsZero-knowledge proofs are an uncomfortable topic.Mostly, they\u2019re uncomfortable because they make people feel stupid, or make people worry that they\u2019ll be made to look stupid. Cryptographers and developers alike struggle with the topic.Zero-knowledge proofs are a category of cryptographic tool with many different flavors. As a concept, they aren\u2019t scary, and are worth taking a little time to understand.Like most things, there are layers to the topic that can be peeled back and studied. A little analogy can go a long way to understanding what zero-knowledge proofs are and what they can do.Stranger dangerPhoto by Paul Garaizar.Imagine you meet someone on the street, and they claim to know your mother\u200a\u2014\u200ashe\u2019s in the hospital, and you need to get in the car with them right now to go see her. You\u2019re in a pickle. You\u2019re worried about your mother, but by now you should be feeling some serious \u201cstranger danger\u201d.You need to verify that this stranger is, in fact, a family friend you can trust. So you interrogate them, asking questions they should only be able to answer if they are indeed close to the family.Assuming you ask good questions, the protocol you\u2019ve just invented is an example of a zero-knowledge proof. You, the verifier, are verifying that the stranger, or prover, does indeed know your mother. You\u2019re doing this interactively, coming up with questions that are difficult to prepare for in advance, unless the prover is who they claim to be.That\u2019s it. A zero-knowledge proof is when a prover convinces a verifier that they have some secret knowledge, without revealing the knowledge directly to the verifier. In our example, knowledge can\u2019t be directly revealed, because we don\u2019t have an easy way to \u201cserialize\u201d and share human knowledge, like having met your mother\u200a\u2014\u200ajust the loose approximations of verbal and visual language.Challenge /\u00a0responseA good example of a common zero-knowledge proof is a cryptographic challenge-response protocol.Your friend Zooko tweets that he\u2019s just had a wonderful pizza, despite his long and vocal hostility toward carbs. Concerned his account has been compromised, you send a DM, asking him to encrypt\u00b9 the message \u201cYes, I really just ate an entire pizza. There wasn\u2019t even any meat on it!\u201d with his private key. If the ciphertext he sends back can be decrypted with his known public key, you know he still has access to his Twitter account\u00b2.An important point in that example is that you, as the verifier, chose the message. If the prover had chosen the message, and Zooko\u2019s account had been compromised, the attacker could use any past message Zooko had encrypted with his private key accessible to them. For example, suppose Zooko had legitimately encrypted the message \u201cI love meat\u201d some time in the past, and the attacker had access to the ciphertext and plaintext. The attacker, as the prover, could use that message, duping the verifier in what\u2019s called a replay attack.So as long as Zooko has never encrypted that message before, you\u2019re good. In practice, you should also include a nonce, or random number, in your message to ensure that it\u2019s unique\u200a\u2014\u200aor better, use a signature algorithm that handles that for you, rather than asymmetric encryption.While most zero-knowledge proofs are similarly interactive, requiring the verifier to somehow interrogate the prover, there are variants where the prover doesn\u2019t need to respond to a challenge from a verifier. Consider, for example, proving access to a file. The prover can publish a hash of the file. The verifier can be convinced that the prover has access to the file because of the computational infeasibility of otherwise coming up with that hash.It should be clear that zero-knowledge proofs don\u2019t \u201csolve\u201d privacy. Instead, they\u2019re building blocks for privacy-preserving systems. Different types of zero-knowledge proofs can provide different functionality to these systems.zk-SNARKsLewis Carroll wrote \u201cThe Hunting of the Snark\u201d in 1876, coining the term for his imaginary creature.When people in the cryptocurrency space say \u201czero-knowledge proofs\u201d, they\u2019re usually referring to a particular type of proof\u200a\u2014\u200azk-SNARKs.The math underpinning zk-SNARKs is difficult to understand, but unless you\u2019re implementing them, attacking them, or too paranoid to take a cryptographer\u2019s word for it, you can skip the math and focus on what they do.Let\u2019s talk about the name. The \u201czk\u201d stands for zero-knowledge. Amazingly, there are a number of other \u201csnarks\u201d in computer science, including a theorem prover and a type of graph, and outside of computer science, including imaginary creatures, video games, and sarcastic remarks.This particular SNARK stands for succinct non-interactive adaptive argument of knowledge\u00b3.You can read \u201csuccinct\u201d as \u201cefficient enough that it can be computed in a reasonable amount of time\u201d, which is especially important for verification.\u201cNon-interactive\u201d means that SNARKs don\u2019t require the verifier to interrogate the prover. Instead, the prover can publish their proof in advance, and a verifier can make sure it\u2019s correct, similar to hashing a file.Finally, an \u201cadaptive argument of knowledge\u201d refers to a proof of knowledge of some computation.What does that mean, exactly? Imagine your grade-school math teacher gives you a complex arithmetic problem. Instead of providing the answer (and showing your work!), zk-SNARKs let you prove you know the answer, without actually sharing it.That\u2019s a neat trick, but there are some caveats.SNARKs are resource intensive. As we\u2019ll see discussing Zcash, some of the computation involved makes certain use cases, including mobile and low-power device usage, difficult, though recent progress in this space has been encouraging.There\u2019s also the issue of losing access to a secret. SNARKs allows a user to prove they have access to a secret, but the onus is still on the user to maintain the integrity and availability of the secret. We\u2019ll discuss this restriction in more detail when we discuss SNARKs on Ethereum.The most significant, structural drawback to SNARKs, however, is what\u2019s called the setup phase.Setup phaseFor each type of problem you want to solve with SNARKs, there\u2019s an upfront communication step called the setup phase. In this phase, the circuit, or computation you want to prove, is fixed. Because of this restriction, SNARKs aren\u2019t a good fit to run arbitrary Turing-complete smart contracts\u200a\u2014\u200aeach new contract would require a new setup phase.To make this more concrete, each problem your math teacher gives you would need a separate setup phase. There might be one for addition, and another for multiplication. Once you\u2019ve done the setup phase between you and your teacher for addition, it doesn\u2019t need to be repeated again each time you\u2019re given an addition problem. Any new sorts of problems require a new setup.There\u2019s another noteworthy aspect to the setup phase. In this phase, a secret is generated that allows fake proofs to be published, undetected. In a 2-party setup, that\u2019s okay\u200a\u2014\u200athe verifier (your math teacher) is the one generating the secret, and as long as the verifier doesn\u2019t share the secret with the prover (you), security is maintained.If you want to use a particular circuit publicly, with more than one verifier, there needs to be a \u201ctrusted setup\u201d. Instead of a single verifier generating (and hopefully destroying!) the proof-manufacturing secret, a group of people can generate the secret together. As long as one of those people is honest, and destroys their share of the secret, the security of the setup is guaranteed.For a more detailed, yet remarkably accessible introduction to SNARKs, check out Christian Lundkvist\u2019s \u201cIntro to zk-SNARKs with examples\u201d. For more on the math, check out Zcash\u2019s explainer, \u201czkSNARKs in a nutshell\u201d or Vitalik Buterin\u2019s series on \u201cZk-SNARKs: Under the Hood\u201d.ZcashZcash is developed by the \u201cZcash Electric Coin Company\u201d. Photo by Fr\u00e9 Sonneveld.We\u2019ve discussed zk-SNARKs in more than enough detail to talk about its highest-profile application, Zcash.Zcash is a privacy-preserving cryptocurrency based on zk-SNARKs. In fact, it\u2019s built on one particular SNARK circuit, the Zcash transaction verifier, with its own trusted setup. Zcash users can publish transactions, with public amounts, senders, and recipients, just like Bitcoin. They can also choose to publish proof that a private transaction follows the rules of the Zcash network, concealing the sender, recipient, and amount. In Zcash parlance, these are called shielded transactions.As a privacy coin, Zcash often draws comparisons to Monero. The two projects take very different approaches to privacy.While Monero\u2019s ring signatures offer plausible deniability for each transaction, the size of the anonymity set is fixed\u200a\u2014\u200athe record for the most participants in a single Monero ring signature is 4,500.Zcash\u2019s shielded transactions, however, have an anonymity set spanning every coin used in a shielded transaction. This is a fundamentally stronger privacy guarantee than those offered by ring signatures.As discussed above, Zcash also inherits the downsides of zk-SNARKs.The burnt remains of one machine involved in Zcash\u2019s trusted setup. Photo by Peter\u00a0Todd.To create the currency, a group of cryptographers and well-known community members came together in a complex setup ceremony. Trusting the security of Zcash means trusting those participants didn\u2019t collude, and weren\u2019t compelled to hand over their share of the generated secret. If the shares did survive, anyone with access could produce counterfeit coins, though notably an attacker still couldn\u2019t unmask transactions. Peter Todd, a security expert heavily involved in Bitcoin, shared his account of his participation in the ceremony. It\u2019s well worth the read.The performance characteristics of SNARKs also mean private transactions can\u2019t be computed on less powerful devices, like the popular Ledger hardware wallet.The Zcash team has made great strides on performance since their initial release. In the pending Sapling network upgrade, users will see significant performance improvements.EthereumCopyright \u00a9 Ethereum\u00a02015So far in this series, we\u2019ve focused on financial privacy. Zcash is a high-profile application in the financial space, but zero-knowledge proofs are also a great tool to help ensure data privacy.Ethereum is the highest-profile smart contract blockchain implementation. Unfortunately, it\u2019s privacy story to date is poor. All details about a smart contract are public on the Ethereum blockchain or in full-node memory. All fund senders and recipients, all transaction data, all code executed, and the state in every contract variable are visible for any observer who cares to look.The contracts on Ethereum today that do need to maintain data privacy rely on secure commitments. These simple schemes allow a user to commit to a secret value by publishing its hash to the blockchain, later revealing the secret, either on the blockchain or off-chain.Unfortunately, by themselves, these hash / reveal constructions are incredibly limited. They have uses in gambling and simple digital asset exchange, but aren\u2019t expressive enough to enable greater private data usage.In Ethereum\u2019s next protocol upgrade, Metropolis, smart contract developers will get a new privacy tool\u200a\u2014\u200athe ability to verify zk-SNARKs efficiently on-chain.What can we do with a SNARKs-enabled Ethereum? Certain contract variables can be effectively made private. Instead of storing the secret information on-chain, it can be stored with users, who prove they\u2019re behaving by the rules of the contract using SNARKs. Each of these uses require their own trusted setup, but once a circuit exists, it can be easily cloned.Imagine an ERC20-like token that doesn\u2019t publish individual holders\u2019 balances, while still maintaining a public and predictable token supply, or a lending platform that keeps the terms of a loan private.As long as your contract data has a 1-to-1 correspondence with a user of the contract, and users can be trusted with access to the secret, zk-SNARKs is a great approach.What you can\u2019t achieve with SNARKs on Ethereum, however, is autonomous privacy, separate from a user. SNARKs on Ethereum rely on an off-chain party keeping a secret. Without an off-chain party, there\u2019s nowhere to keep track of the secret, rendering the proofs useless.Privacy without\u00a0usersFor many consumer applications, this isn\u2019t a heavy burden. After all, many in the public blockchain space are philosophically aligned with maintaining user control of private information.There are other valuable uses for private data on Ethereum, for both consumers and enterprises. A few ideas that would be difficult or impossible to implement on Ethereum:Advanced decentralized governance. Autonomous organizations can\u2019t store private information without delegating to a user as a \u201csecret holder\u201d.Autonomous trading in a number of on-chain exchanges, including the 0x project.Contracts that maintain sole \u201ccustody\u201d of off-chain assets. Consider an Ethereum contract that needs sole custody of a Bitcoin wallet, for example.Delegated access to identity, medical records, or other private information. SNARKs don\u2019t enable any sort of access control on private data, requiring users to share private information off-chain.Privacy on public blockchains, especially autonomous privacy, is hard. In the next post, we\u2019ll discuss private and permissioned chains, as well as other approaches to maintain data privacy.", "responses": "6"}, {"title": "Learn Solidity\u200a\u2014\u200aThe Ethereum smart contract programming language", "author_name": "Robbert Vermeulen", "link": "https://medium.com/@robbertvermeulen/learn-solidity-the-ethereum-smart-contract-programming-language-7f106fc26d6?source=search_post", "post_date": "Jan 12, 2018", "readtime": "2 min read", "upvotes": "2K", "content": "Learn Solidity\u200a\u2014\u200aThe Ethereum smart contract programming languageRobbert VermeulenBlockedUnblockFollowFollowingJan 12, 2018In the course of time that I am involved in Ethereum development, I have noticed that not much information exists yet to learn Solidity (outside of the Solidity documentation).I have saved the information that I found in the meantime and the goal of this article is to share all my gathered resources, so other people new in this world don\u2019t have to search, but can start learning Solidity immediately.1. Solidity video tutorialsCoursesSolidity by What\u2019s SolidityDeveloping Ethereum Smart Contracts for Beginners by DesignCourseUltimate Introduction to Ethereum \u00d0app Development by Decypher mediaBuilding Ethereum dapp using Solidity by Shlomi zeltsingerEthereum Smart Contracts In Solidity by What the Func?Solidity and smart contracts tutorial for beginners by Vlad WulfICO developmentHow to build an ICO crowdsale with Open Zeppelin by Roman StormIt\u2019s too easy to launch ICO by shlomi zeltsingerDapp developmentHOWTO: Building Ethereum Apps With Truffle by Tim CoulterTutorial dapp with Solidity, Truffle, Web3 and Javascript by Blockchain Talks2. Solidity tutorialsBasicsA 101 Noob Intro to Programming Smart Contracts on EthereumLearn Solidity in Y minutesLearning Solidity by ExampleFull stack Hello world voting Ethereum Dapp tutorialBuild Your First Smart ContractMonax smart contract tutorialHow To Learn Solidity: The Ultimate Ethereum Coding GuideInteractiveCryptoZombiesSpace DoggosBitDegree Basic of SoliditySpecialtiesTyping and Your Contracts StorageDeploying A Smart Contract, The Hard WayRevert(), Assert() and Require()Constant vs View vs PureDapp developmentThe ultimate end-to-end tutorial to create and deploy a fully decentralized Dapp in Ethereum3. Smart contract\u00a0examplesEtherdice (Ethereum-based dice game)Zeppelin Solidity (ICO and token smart contracts)Ethereum Slot machine Dapp (Ethereum-based slot machine)Etherpot (lottery)The DAO framework\u200a\u2014\u200aDecentralized Autonomous Organization4. Solidity communitiesEthereum Developers Facebook groupSolidity RedditEthereum StackexchangeSolidity GitterEthereum Gitter (solidity channel)5. Solidity tools & frameworksZeppelin Solidity (development framework)Truffle (development framework)Remix Solidity IDE (Integrated development environment)Web3.js (Ethereum Javascript API)Solium (Analyzes your code for style & security issues)Javascript TestRPC (local blockchain development)MetaMask (browser extension)Geth (command line interface to run a full Ethereum node)Solc (Solidity compiler)6. Solidity\u00a0booksSolidity Programming Essentials: A beginner\u2019s guide to build smart contracts for Ethereum and blockchainIntroducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for BeginnersEthereum Smart Contract Development: Build blockchain-based decentralized applications using Solidity", "responses": "9"}, {"title": "\u00b5Raiden: Micropayments for\u00a0Ethereum", "author_name": "Raiden Network", "link": "https://hackernoon.com/%C2%B5raiden-micropayments-for-ethereum-f0756cd400b3?source=search_post", "post_date": "Sep 19, 2017", "readtime": "2 min read", "upvotes": "1.3K", "content": "\u00b5Raiden: Micropayments for\u00a0EthereumRaiden NetworkBlockedUnblockFollowFollowingSep 19, 2017TL;DR: While the Raiden Network is not ready for prime time yet, its little sister \u00b5Raiden is an off-the-shelf micropayment solution which could be implemented to help solve some of the scalability and latency challenges of many use cases today.What is\u00a0\u00b5Raiden?The Raiden Network aims to provide scalable, low-cost, and instant token transfers for Ethereum. While it\u2019s not finished yet, \u00b5Raiden already offers these features in a more restricted environment today.Talking to Dapp developers, we noticed that many of them just want to use the Raiden Network as a robust many-to-one payment channel system; one service provider offering services to many recurring customers. Such systems do not require a full-blown network but instead already benefit greatly from direct payment channels. For these, we have designed \u00b5Raiden.Introducing \u00b5Raiden (Micro Raiden): a robust framework to implement instant and free pay-per-use payment channel technology in commercial applications.\u00b5Raiden is an open source, easy-to-use, off-the-shelf system to implement ERC20-based micropayments. It uses unidirectional payment channels to allow for frequent, fast, and free payments between two parties. These enable providers to easily charge for their services on a pay-per-use basis. Applications that encourage recurring customer payments or even micropayments can greatly benefit from a \u00b5Raiden setup. Examples include paywalls for news articles, pay-per-request APIs, micropayments for storage, bandwidth, and computations, livestream tipping, etc.\u00b5Raiden will also be used in the Raiden Network to pay auxiliary helpers for services such as path finding or channel monitoring.DemosWe built an interactive live demo of \u00b5Raiden where you can buy fortune cookies with \u00b5Raiden demo tokens on the Kovan Testnet.You can also check out our paywall demo that shows a basic example of the user experience of a \u00b5Raiden-powered website.Our second demo shows how \u00b5Raiden micropayments can be used for per-use API payments using just a few simple lines of Python code.Project Status\u00b5Raiden is currently undergoing an external security audit and will be ready to use on the Ethereum mainnet very soon. A testnet version is available on our GitHub. If you are already aching to get your feet wet and implement your own micropayment based application, check out the source code, documentation and the examples on GitHub or visit the website for more information.", "responses": "4"}, {"title": "Why Ethereum, when we already have Bitcoin\u2019s Blockchain?", "author_name": "Abhishek Chakravarty", "link": "https://hackernoon.com/why-ethereum-when-we-already-have-bitcoins-blockchain-3359eb7e087e?source=search_post", "post_date": "Jul 6, 2017", "readtime": "11 min read", "upvotes": "1.6K", "content": "Why Ethereum, when we already have Bitcoin\u2019s Blockchain?Part 2 of The Product Manager\u2019s Guide to the Blockchain series as I continue to explore blockchains, Ethereum and the possibilities these technologies offer.Abhishek ChakravartyBlockedUnblockFollowFollowingJul 6, 2017https://unsplash.com/search/high-rise?photo=Q3e5ucjJV5IWhen evaluating or learning about a new shiny technology, one of the first things one should seek to understand are the problems that necessitated it\u2019s development. So when I first learnt about a new blockchain called Ethereum, my immediate question wasWhy do we even need Ethereum\u200a\u2014\u200aanother blockchain\u200a\u2014\u200awhen we already have a blockchain that powers\u00a0Bitcoin?Looking for answers, the thing I quickly realized was that this was not a very accurate question.Ethereum wasn\u2019t just another blockchain, its in fact much much more than that.Ethereum is a\u00a0PlatformEthereum is a Platform. Underneath the platform is a custom-built blockchain that enables new applications to be built on top of it. Ethereum\u2019s blockchain promises that these applications will run securely forever without any censorship or downtime.https://en.wikipedia.org/wiki/National_Highway_System_(United_States)My favorite analogy to thinking about platforms is the American Interstate Highway system (or the highway system of any country, really).These highways are governed by a set of defined rules that everyone has to follow when using them. For example, getting in and out only through exits, no stopping anywhere, lane discipline and speed limits, no drunk driving etc. As long as you are following these rules, you can use the highway network to go wherever you want to go, stop at any exit you want to stop.The highways connect cities and towns and people living in them. They enable transportation and transaction of goods and services, power several businesses and over time unleash economic activity and commerce. Also, the more people use these highways, the more valuable they become. Nice!Ethereum PlatformThe Ethereum platform is a lot like a highway network, except the network in this case is made up of computers (nodes) connected securely via the internet. Ethereum, just like our highway system also has a set of rules that one can use to build and power new businesses, applications, exchanges etc.No one \u2018controls\u2019 Ethereum, just like\u00a0BitcoinThe American Interstate Network is managed and maintained by the government, which means the responsible authorities (if they wanted to) can control, limit or totally restrict access to any highway, or even multiple highways.Worse still, authorities can restrict all highways leading to a particular city, completely cutting access to it. That, in short, is the problem with centralization of authority. It leaves the majority vulnerable to the will of the minority. In this case, it requires that to enjoy the advantages of a highway system, the majority trust the minority.Ethereum is unlike the highway system in this regard. It is powered by a network of distributed computers that no one entity controls. Here, nobody can restrict access to a particular asset that belongs to you, and so there is no trusting any authority, but yourself. This system ensures that one can create apps, online businesses, contracts etc. in a completely trustless manner.If you create an asset on Ethereum, you can rest assured that you will have access to that asset securely, without any censorship or downtime. This promise of real world trustless applications is what makes the Ethereum platform so valuable.BUT wait a sec, secure and trustless apps can also be built on Bitcoin\u2019s blockchain, after all, the nice things that I just mentioned about Ethereum and what makes it really valuable are really functions of distributed, trustless blockchains? If so, we already have Bitcoin\u2019s blockchain, why Ethereum?Well, it all comes down to who will build these distributed, trustless applications of the future, and the tools they will use to build this aspirational future.The right tools to build the\u00a0futureYou see, building a software application (distributed or not, trustless or otherwise) needs one to write code. But you perhaps knew that. But what is not always obvious is that before writing software, serious developers choose their tools, carefully. One of the most important choices they make is what programming language to use, which is in turn driven by how developer friendly the language is. Developer friendliness of a language allows coders to focus on the end product\u00a0, instead of spending time learning how to use it. It is a function of features in a programming language that help developers write better & optimized code.One such feature is loops. Loops are what makes a the computer \u2018run\u2019 a piece of code over and over again. It is a time saving maneuver, because if there were no loops and say you wanted write a software to print out all natural numbers from 1 to 100, you\u2019d have to write the same code 100 times. Not very efficient, is it?.https://www.edureka.coBottomline\u200a\u2014\u200aLoops are super important and most developers when they write software, use loops and conditions to implement complex algorithms easily.Ok, but so what?Good question. Bitcoin\u2019s underlying blockchain scripting language (fancy word for programming language) does not support loops.This seemingly simple downside means building even trivial and simple applications on bitcoin\u2019s blockchain can often become a research project for most developers. Its hard to focus on the end product, when something that can otherwise be done by writing 3 lines of code, takes 3 weeks. This is by far the most important reason why we haven\u2019t seen a proliferation of distributed applications on top of Bitcoin\u2019s blockchain.Ethereum\u2019s programming language on the other hand support loops and other \u201cTuring-Complete\u201d features alleviating a lot of these frictions. Consequently, Ethereum has the potential to, and actually does, attract more developers to build applications on top of the Ethereum blockchain.Now, the lack of Turing Completeness is a problem, but the Bitcoin\u2019s scripting language has some other structural oddities that make it hard to build certain types of systems. (again, Not impossible, but hard)UTXOsWhen I first learnt about the concept of UTXOs in bitcoin transactions, it took me a while to understand them and why they were designed the way they\u2019ve been designed. We\u2019ll get to the details in a bit but to keep things from getting too complicated, here is the key takeaway from this section\u00a0:The way bitcoins transactions actually work under the hood makes creating new applications on the Bitcoin\u2019s blockchain very complicated. And this complexity was one of key drivers that led to Ethereum\u2019s development.OK, back to\u00a0UTXOsImagine you are in Bitcoin land and say you want to send bitcoins to a friend\u200a\u2014\u200athe following layout the basic ground rules of every such bitcoin transaction.Any bitcoin amount that you send is always sent to an address, which is a public key.Any bitcoin amount you receive is locked to your receiving address\u200a\u2014\u200awhich is (usually) associated with a wallet.Any time you spend bitcoin, the amount you spend will always come from funds you previously received and have not spent.Addresses receive bitcoin, but they do not send bitcoin\u200a\u2014\u200abitcoin is sent from a wallet.But here\u2019s the thing about bitcoins: they don\u2019t exist in reality, e.g on a hard drive or on the cloud. When you look inside somebody\u2019s address, you cannot see bitcoins, or point to something and say \u201csee, there is a bitcoin\u201d.So what\u2019s in you wallet, if its not bitcoins?In your wallet are transaction records of every bitcoin that you\u2019ve ever received from anybody, and not spent yet. When somebody sends you bitcoins, these amounts are termed as outputs in Bitcoin speak. These Unspent Transaction Outputs are abbreviated as UTXOs.When somebody sends you outputs, the UTXOs in their wallet are reduced by the amount they transferred, and UTXOs in your wallet go up by the same amount.These transaction records don\u2019t mix up or add up as they come in, but are stored exactly the way they were received. In other words, if you received a transaction#1 of 2 bitcoins, another transaction#2 worth 4 bitcoin, and yet another transaction#3 worth 5 bitcoins, your wallet will show 3 separate transactions with values 2, 4 & 5 bitcoins respectively.Sure, Your wallet balance will be the sum total of all these transaction records = 11 bitcoins\u00a0, but the thing to remember is \u2192 each transaction record is stored individually.Okayy\u2026so what has that to do with the original question of bitcoin vs ethereum?The complexity involvedLets say you want to send exactly 3 bitcoins to a friend\u2019s address. No problem! you have 11 bitcoins enough to cover the transfer, right?Right. But like I mentioned, your wallet has 3 different transaction records that add up to 11 bitcoins. And the problem with bitcoin\u2019s scripting language is that it is value-blind.In other words, the scripting language has no fine grained control over the bitcoin amounts that you can withdraw to transfer to your friend. All that complexity is left to you.Here\u2019s what I mean.To send 3 bitcoins to your friend, you will first have to create a transaction and to do the followingYou will need to choose an input, from amongst transactions that you have previously received AND have not already spent.You will have to prove that these input transactions belong to youYou will have to create an output to your friend\u2019s public key or wallet address as the destination for the 3 bitcoins you\u2019d like to transferNote that you have 3 transaction records that you can reference as inputs in step 1 above (txn#1 or #2 or #3). BUT you do not have any transaction records that is EXACTLY 3 bitcoins. Instead, you have 3 transactions with values 2, 4 & 5 bitcoins.Ok, so here\u2019s the problem. The way bitcoin\u2019s scripting works, you CANNOT simply say\u00a0:\u201c Take transaction#2 (with 4 bitcoins) and send 3 out of the 4 bitcoins to my friend\u2019s address\u201dInstead, you will have to spend all 4 bitcoins that you received in transaction#2.Now because you HAVE to spend all 4 bitcoins but you only want to transfer 3 out of those to your friend, you will need to create another output transaction sending the remaining 1 bitcoin to yourself. Weird.Before we move ahead, a lot happened above, so here is a picture to bring it all together.That is how UTXOs work under the hood, and by the way they are way more complicated to implement than this explanation above.If you want to write a bitcoin wallet application\u200a\u2014\u200athe \u201csend bitcoin\u201d function that you\u2019ll write will be super complicated. Such a function will take all the UTXOs a user has available in their wallet \u2192 then choose a subset of these UTXOs as inputs to the transaction, such that the sum of these UTXOs are greater than or equal to the desired outputs of the transaction.If there are two or more subsets of UTXOs that meet this criteria then one needs to write additional logic that will somehow decide which subset to use. Clearly, too much complexity for a simple transaction, for most developers anyway.To be sure though, these limitations of the bitcoin\u2019s scripting language are due to some important reasons that bitcoin\u2019s founder Satoshi probably foresaw and some that (he/she/they) did not foresee, but those reasons are beyond the scope of this post.What is important to this discussion however is that this value blindness introduces complexity in building applications on top of the Bitcoin\u2019s blockchain\u200a\u2014\u200ahence the need for a language/platform that better manages this complexity and therefore facilitates development of new apps. Ethereum fills that gap and therefore has seen rapid adoption.By the way, and maybe you already noticed, UTXOs have another property that makes them hard to configure. The fact that UTXOs can fundamentally assume only two states \u2192 Spent or Unspent.This binary state along with value-blindness makes it even more difficult to create multi-stage smart contracts over Bitcoin\u2019s blockchain, such as an application where multiple users contribute UTXOs to an agreed upon contract, then perform some additional operations and finally based on pre defined contract rules funds are disbursed out to appropriate parties. Again, coding this seemingly simple rule based algorithm is worthy of a research challenge for most developers if they were using bitcoin\u2019s scripting language. Ethereum on the other hand scores much much better in terms of ease of implementation for such a smart contract.https://phys.org/news/2016-07-blockchainsfocusing-bitcoin-real-revolution-digital.htmlBuilding the\u00a0FutureIf blockchain technology ever reaches its potential, it will be because a lot of factors facilitated it, and amongst the most important factors will be the ability to harness the power of blockchains easily, to build new things on top of them\u200a\u2014\u200anot just by rocket-scientist level programmers but by regular programmers armed with great ideas.Today, most developers that want to develop blockchains apps struggle because there are no easy platforms that lets them build things easily, and a platform like Ethereum aims to solve just that, so everyone including non-expert programmers like myself can also build things that are powered by blockchain. That is how you build the future, and distribute it evenly.As I read Vitaliks Buterin\u2019s White-Paper introducing Ethereum, and understood the mechanics of the platform, I am convinced that the Ethereum platform is a tectonic shift in how blockchains can be tamed, and its already showing. There are several development groups already working on decentralized apps ranging from value exchange, asset registry, device discovery and things you and I cannot fathom right now.Bottomline\u00a0? If you are in the business of building products, or even if you are not\u200a\u2014\u200ayou should not miss this tectonic shift in tech. It will define how things are built in the future. If this is the first time you are hearing about blockchains and Ethereum, then do yourself a favor and listen to this amazing podcast by Tim Ferris and Naval Ravikant talking to the crypto great Nick Szabo. You will thank me later. You can also read part-1 of my blockchain series too.In part 3 of this series, I hope to share how Ethereum really works under the hood, and also share how I built a basic 2 node test Ethereum blockchain and a simple smart contract!Thanks for reading, and follow me to be notified when part 3 is\u00a0up!If you found the post helpful, please recommend it to others by clicking the green heart below! If you have insights or comments, I would love to hear from you\u00a0. You can also reach out to me directly on\u00a0twitter.", "responses": "11"}, {"title": "Build a simple Ethereum + InterPlanetary File System (IPFS)+ React.js\u00a0DApp.", "author_name": "Michael Chan", "link": "https://itnext.io/build-a-simple-ethereum-interplanetary-file-system-ipfs-react-js-dapp-23ff4914ce4e?source=search_post", "post_date": "Mar 8, 2018", "readtime": "8 min read", "upvotes": "1.97K", "content": "Build a simple Ethereum + InterPlanetary File System (IPFS)+ React.js\u00a0DApp.Michael ChanBlockedUnblockFollowFollowingMar 8, 2018WHY ARE WE BUILDING THIS?It is prohibitively expensive to store a lot of data on the Ethereum blockchain. According to Ethereum\u2019s yellow paper it is approximately 20,0000 gas for 256bit/8 bytes (1word). Based on 02/28/2018 gas prices of 4 gwei/gas. See: https://ethgasstation.info for current prices.20,000 gas per Transaction of 8 bytes x 4 gwei/gas = 80,000 gwei for 8 bytes.80,000 gwei for 8 bytes. x 1000bytes/8 = 10,000,000 gwei/kB =\u00a0.01 Ether.01 Ether/kB x 1000kB = 10 Ether to store a 1Mb at $860/ether = $8600.00! It would cost $8,600,000.00 to store a 1 GB file on the Ethereum blockchain!To store Ethereum\u2019s 38 page PDF yellow paper (520Kb) = $4472 USD. See: http://eth-converter.com/ for conversions.If we can only afford to store a couple of Kb of data on the blockchain, then we would still have to rely on a centralized server to store data. Thankfully, a solution to store data on decentralized network called the InterPlanetary File System (\u201cIPFS\u201d) is available. See: https://ipfs.io/ to read more. When looking up files in IPFS, you are asking the network to find nodes storing the content behind a unique hash. From IPFS\u2019s own website:\u201cIPFS and the Blockchain are a perfect match! You can address large amounts of data with IPFS, and place the immutable, permanent IPFS links into a blockchain transaction. This timestamps and secures your content, without having to put the data on the chain itself.\u201dWHAT ARE WE BUILDING?A simple DApp to upload a document to IPFS and then store the IPFS hash on the Ethereum blockchain. Once the IPFS hash number is sent to the Ethereum blockchain, the user will receive a transaction receipt. We will use Create-React-App framework to make a front-end. This Dapp works with any user that has MetaMask installed in their browser.This is what the DApp will look like when we are done:HOW TO BUILD IT:NOTE: Please see my github at https://github.com/mcchan1/eth-ipfs if you just want the code.Before we begin, these are the assumptions I\u2019ve made:Assumptions about User: The User has Metamask installed to interact with DApp.Assumptions about you/Developer: You have some familiarity with JavaScript and/or React.js as well as Node.js/NPM. Important note: please make sure you are running a current version of Node and NPM. For this tutorial I\u2019m running: node v8.9.4 and NPM 5.6.0.Install MetaMask. If do not already have MetaMask installed, please go to https://metamask.io/ and follow the instructions. This DApp will assume the user has MetaMask installed.Create a directory to store our DApp. For this tutorial, I\u2019ll call it \u201ceth-ipfs.\u201dInstall Create-React-App and other dependencies using NPM. Use NPM and install the following:npm i create-react-appnpm install react-bootstrapnpm install fs-extranpm install ipfs-apinpm install web3@^1.0.0-beta.26Enter the \u201ceth-ipfs\u201d directory, type \u201cnpm start\u201d and Create-React-App should automatically render on http://localhost:3000/.Note: if you have not used create-react-app until now, you may have to install it globally first1. sudo npm install -g create-react-appor npm install -g create-react-app2. create-react-app eth-ipfs3. cd into eth-ipfs and \u201cnpm start\u201dDeploy the following Solidity code using Remix on the Rinkeby testnet. See, https://remix.ethereum.org. You will need some Rinkeby test ether, if you do not already have some go the Rinkeby faucet for free test ether. https://www.rinkeby.io/#faucet\u00a0.pragma solidity ^0.4.17;contract Contract { string ipfsHash;  function sendHash(string x) public {   ipfsHash = x; } function getHash() public view returns (string x) {   return ipfsHash; }}Save the contract address where it is deployed and Application Binary Interface (ABI). To obtain the ABI of the contract, in Remix go to your contract address:Click the \u201cCompile\u201d tab, then click the grey \u201cDetails\u201d button.This will bring up the Details window. Copy the \u201cABI,\u201d it is a JSON file.Personally I prefer put the ABI JSON into a formatter, such as https://jsonformatter.org and check if it is valid before using it in my javascript code. Save the contract address and ABI for later.Inside our \u201ceth-ipfs/src\u201d directory, create the following files: web3.js, ipfs.js, and storehash.js. The bulk of our code will be in App.js.web3.jsWe want to use the 1.0 version of web3.js\u00a0, because unlike the 0.20 version, 1.0 allows us to use async and await instead of promises in our javascript. At the moment, MetaMask\u2019s default web3.js provider is version 0.20. So, lets make sure we override the default version of Metamask\u2019s web3 version 0.20, and use our 1.0. Here is the code://overrides metamask v0.2 for our 1.0 version. //1.0 lets us use async and await instead of promisesimport Web3 from \u2018web3\u2019;const web3 = new Web3(window.web3.currentProvider);export default web3;storehash.jsIn order for web3.js to have access to the contract we deployed to Ethereum\u2019s Rinkeby testnet earlier, you will need the following:1) contract address and 2) the ABI from the contract. Be sure to import your web3.js file from your /src directory as well. Here is the code:import web3 from './web3';//access our local copy to contract deployed on rinkeby testnet//use your own contract addressconst address = '0xb84b12e953f5bcf01b05f926728e855f2d4a67a9';//use the ABI from your contractconst abi = [  {    \"constant\": true,    \"inputs\": [],    \"name\": \"getHash\",    \"outputs\": [      {        \"name\": \"x\",        \"type\": \"string\"      }    ],    \"payable\": false,    \"stateMutability\": \"view\",    \"type\": \"function\"  },  {    \"constant\": false,    \"inputs\": [      {        \"name\": \"x\",        \"type\": \"string\"      }    ],    \"name\": \"sendHash\",    \"outputs\": [],    \"payable\": false,    \"stateMutability\": \"nonpayable\",    \"type\": \"function\"  }]export default new web3.eth.Contract(abi, address);ipfs.jsIn this tutorial, we will run the ipfs.infura.io node to connect to IPFS instead of running an IPFS daemon on our own computer. In the code comments, you can also choose to run your own IPFS daemon if you install IPFS as a global dependency. See, https://infura.io/ for more information about using their nodes. Here is the code://using the infura.io node, otherwise ipfs requires you to run a //daemon on your own computer/server.const IPFS = require(\u2018ipfs-api\u2019);const ipfs = new IPFS({ host: \u2018ipfs.infura.io\u2019, port: 5001, protocol: \u2018https\u2019 });//run with local daemon// const ipfsApi = require(\u2018ipfs-api\u2019);// const ipfs = new ipfsApi(\u2018localhost\u2019, \u20185001\u2019, {protocol:\u2018http\u2019});export default ipfs;App.jsThis is the order of operations in App.jsSet the state variables.Capture the User\u2019s file.Convert the file to a buffer.Send the buffered file to IPFSIPFS returns a hash.Get the User\u2019s MetaMask Ethereum addressSend the IPFS for storage on Ethereum.Using MetaMask, User will confirm the transaction to Ethereum.Ethereum contract will return a transaction hash number.The transaction hash number can be used to generate a transaction receipt with information such as the amount of gas used and the block number.The IPFS and Ethereum information will render as it becomes available in a table using Bootstrap for CSS. NOTE: I didn\u2019t create an isLoading type variable to automatically re-render state for the blockNumber and gasUsed variables. So for now, you will have to click again or implement your own loading icon. A table describing the variables and functions, followed by the code itself are below:Finally, here is the App.js code:import React, { Component } from \u2018react\u2019;//import logo from \u2018./logo.svg\u2019;import \u2018./App.css\u2019;import web3 from \u2018./web3\u2019;import ipfs from \u2018./ipfs\u2019;import storehash from \u2018./storehash\u2019;class App extends Component {     state = {      ipfsHash:null,      buffer:'',      ethAddress:'',      blockNumber:'',      transactionHash:'',      gasUsed:'',      txReceipt: ''       };captureFile =(event) => {        event.stopPropagation()        event.preventDefault()        const file = event.target.files[0]        let reader = new window.FileReader()        reader.readAsArrayBuffer(file)        reader.onloadend = () => this.convertToBuffer(reader)          }; convertToBuffer = async(reader) => {      //file is converted to a buffer for upload to IPFS        const buffer = await Buffer.from(reader.result);      //set this buffer -using es6 syntax        this.setState({buffer});    };onClick = async () => {try{        this.setState({blockNumber:\"waiting..\"});        this.setState({gasUsed:\"waiting...\"});//get Transaction Receipt in console on click//See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceiptawait web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{          console.log(err,txReceipt);          this.setState({txReceipt});        }); //await for getTransactionReceiptawait this.setState({blockNumber: this.state.txReceipt.blockNumber});        await this.setState({gasUsed: this.state.txReceipt.gasUsed});          } //try    catch(error){        console.log(error);      } //catch  } //onClickonSubmit = async (event) => {      event.preventDefault();     //bring in user's metamask account address      const accounts = await web3.eth.getAccounts();           console.log('Sending from Metamask account: ' + accounts[0]);    //obtain contract address from storehash.js      const ethAddress= await storehash.options.address;      this.setState({ethAddress});    //save document to IPFS,return its hash#, and set hash# to state    //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add       await ipfs.add(this.state.buffer, (err, ipfsHash) => {        console.log(err,ipfsHash);        //setState by setting ipfsHash to ipfsHash[0].hash         this.setState({ ipfsHash:ipfsHash[0].hash });   // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract   //return the transaction hash from the ethereum contract //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send                storehash.methods.sendHash(this.state.ipfsHash).send({          from: accounts[0]         }, (error, transactionHash) => {          console.log(transactionHash);          this.setState({transactionHash});        }); //storehash       }) //await ipfs.add     }; //onSubmitrender() {            return (        <div className=\"App\">          <header className=\"App-header\">            <h1> Ethereum and IPFS with Create React App</h1>          </header>                    <hr /><Grid>          <h3> Choose file to send to IPFS </h3>          <Form onSubmit={this.onSubmit}>            <input               type = \"file\"              onChange = {this.captureFile}            />             <Button              bsStyle=\"primary\"              type=\"submit\">              Send it              </Button>          </Form><hr/> <Button onClick = {this.onClick}> Get Transaction Receipt </Button>  <Table bordered responsive>                <thead>                  <tr>                    <th>Tx Receipt Category</th>                    <th>Values</th>                  </tr>                </thead>                               <tbody>                  <tr>                    <td>IPFS Hash # stored on Eth Contract</td>                    <td>{this.state.ipfsHash}</td>                  </tr>                  <tr>                    <td>Ethereum Contract Address</td>                    <td>{this.state.ethAddress}</td>                  </tr>                  <tr>                    <td>Tx Hash # </td>                    <td>{this.state.transactionHash}</td>                  </tr>                  <tr>                    <td>Block Number # </td>                    <td>{this.state.blockNumber}</td>                  </tr>                  <tr>                    <td>Gas Used</td>                    <td>{this.state.gasUsed}</td>                  </tr>                                </tbody>            </Table>        </Grid>     </div>      );    } //render} //Appexport default App;I added a little bit of CSS in src/App.css to make it a little easier on the eyes:/*some css I added*/input[type=\u201dfile\u201d] { display: inline-block;}.table { max-width: 90%; margin: 10px;}.table th { text-align: center;}/*end of my css*/And add some imports to src/index.js:/*https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-a-stylesheet*/import \u2018bootstrap/dist/css/bootstrap.css\u2019;import \u2018bootstrap/dist/css/bootstrap-theme.css\u2019;That is it! Your DApp should be done. So all you need to do is a choose a file, send it, and get a transaction receipt. If you are connected to an IPFS node via your localhost:3000, then you should be able to see your file at one of the IPFS gateways. https://gateway.ipfs.io/ipfs/ + your IPFS hash#.For example: https://gateway.ipfs.io/ipfs/QmYjh5NsDc6LwU3394NbB42WpQbGVsueVSBmod5WACvpteA note about IPFS, is that unless your file is picked up by another node or you pin it, IPFS will eventually be garbage collect your file. There is a lot more about this on their website.Reference links:https://ipfs.io/docs/getting-started/https://web3js.readthedocs.io/en/1.0/index.htmlhttps://infura.io/https://react-bootstrap.github.io/getting-started/introductionhttps://metamask.io/https://github.com/ipfs/js-ipfs-apihttps://remix.ethereum.org/https://ethereum.github.io/yellowpaper/paper.pdfhttps://ethgasstation.infohttp://eth-converter.com/https://www.rinkeby.io/#faucethttps://developer.mozilla.org/en-US/docs/Web/API/FileReaderhttps://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#addhttps://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-sendhttps://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipthttps://github.com/mcchan1/eth-ipfs", "responses": "31"}, {"title": "In-Chat Transfers for Ethereum and ADAMANT Tokens Now Supported in Private Messenger", "author_name": "ADAMANT Messenger", "link": "https://medium.com/adamant-im/in-chat-transfers-for-ethereum-and-adamant-tokens-are-now-supported-69bd1256f2a5?source=search_post", "post_date": "Jun 22, 2018", "readtime": "3 min read", "upvotes": "11.4K", "content": "In-Chat Transfers for Ethereum and ADAMANT Tokens Now Supported in Private MessengerADAMANT MessengerBlockedUnblockFollowFollowingJun 22, 2018Online-messengers are a common form of communication in the digital-age, however, this basic concept on its own is simply not enough for the advancement of technology, and is slowly becoming outdated due to the introduction of cryptocurrencies and the global need for instant payment systems in our everyday lives.Understanding this technical concept, the ADAMANT development team is aiming to build a decentralized messaging-platform with complete cryptocurrency transfer integration.We\u2019re happy to announce that this major task for the ADAMANT Team has now been completed, and appropriate updates have been made. The ADAMANT Messenger platform now supports in-chat Ether transfers. We have made Ether transfers user-friendly and convenient, any user on the platform can now pay for goods and services directly in ETH. This simplistic feature should benefit even friends and relatives looking to send and receive secure, instant-payments with each other.There is incredible potential benefit for this feature, as a platform for communications and financial transactions, sellers looking for the sales of personal goods and services can choose ADAMANT as a private-platform for communication with their buyers.How in-Chat Ethereum transfers workOpen a chat with whom you want to send a payment.Click the \u201cPlus\u201d sign to the left of Message input field.Choose \u201cSend ADM\u201d or \u201cSend ETH\u201d (more options will be added soon).Enter amount and confirm your transaction.That\u2019s it!Absolutely Secure.As described earlier: How ETH transactions in ADAMANT Messenger work, using this feature is completely secure, only you own the Ether wallet in your ADAMANT account.To send ETH in-chats, you will need to top-up your ETH wallet in the ADAMANT Messenger. You can do this casually by transferring ETH from any other wallet (such as: MyEtherWallet) or exchange (e.g. Bittrex). You can find your Ethereum wallet address on the \u201cWallet\u201d tab, and copy it by tapping on the \u201cCopy\u201d icon.Feedback is always welcome. More features coming soon.", "responses": "1"}, {"title": "Ethereum Development Walkthrough (Part 2: Truffle, Ganache, Geth and\u00a0Mist)", "author_name": "dev_zl", "link": "https://hackernoon.com/ethereum-development-walkthrough-part-2-truffle-ganache-geth-and-mist-8d6320e12269?source=search_post", "post_date": "Jan 15, 2018", "readtime": "11 min read", "upvotes": "1.96K", "content": "Ethereum Development Walkthrough (Part 2: Truffle, Ganache, Geth and\u00a0Mist)dev_zlBlockedUnblockFollowFollowingJan 15, 2018We have seen in the first part of this tutorial series what a smart contract is, and how it works. Now, we will deploy it to two kinds of test networks.The tools we will\u00a0useThe most prominent tools at the moments are:Truffle: A development environment, testing framework and asset pipeline for Ethereum. In other words, it helps you develop smart contracts, publish them, and test them, among other things. You can read the docs of the Truffle suite for more informations.Ganache: It was called TestRPC before, if you have read a tutorial from a few months ago, chances are they use TestRPC with Truffle, but it was renamed upon the integration of TestRPC within the Truffle Suite. What Ganache does is simple, it creates a virtual Ethereum blockchain, and it generates some fake accounts that we will use during development.Mist: It\u2019s a browser for decentralized web apps. It seeks to be the equivalent of Chrome or Firefox, but for Dapps. It\u2019s still insecure and you shouldn\u2019t use it with untrusted dapps as of yet.Ethereum wallet: It\u2019s a version of Mist, but only opens one single dapp, the Ethereum Wallet. Mist and Ethereum Wallet are just UI fronts. And we need a core that will connect us to an Ethereum blockchain(It could be the real Ethereum blockchain, or a test one).Geth: Is the core application on your computer that will connect you to a blockchain. It can also start a new one (in our case we will create a local test blockchain), create contract, mine ether etc.We will start by using Truffle and Ganache, and then use Truffle with geth and Mist.InstallationsThe requirements for this tutorial are that you know what is and how to use a command-line tool, and you are a bit familiar with NPM.TruffleOpen up a command-line, and type the next part:npm install -g truffleIf something goes wrong I advise you to read more on Truffle\u2019s docs.GanacheThen, install Ganache\u2019s command-line interface:npm install -g ganache-cliIf you are unsure about something, here is Ganache\u2019s Github page.N.B: There is a GUI for Ganache, but because we are such haxors, we will use the CLI.Let\u2019s startFirst, create a new folder, and type the next line:truffle initIt will initialize an empty truffle project.Then copy the Wrestling.sol file from the last tutorial, into the folder \u201ccontracts\u201d.Next, open the folder \u201cmigrations\u201d and create a new file named \u201c2_deploy_contracts.js\u201d. Migrations are simply scripts that\u2019ll help us deploy our contracts to a blockchain.Paste the following code inside, and save.The first line is there to import the \u201cWrestling.sol\u201d file from the \u201ccontracts\u201d folder, and the 4th line deploys it to the blockchain.Now, back to the root folder, you\u2019ll see two files, \u201ctruffle.js\u201d and \u201ctruffle-config.js\u201d. If you are on Windows, remove \u201ctruffle.js\u201d, if you are on another system, remove one of them, or keep them both, it\u2019s not important. The reason for that is, on Windows there is a naming problem, and when we will want to execute Truffle commands, it will open the config file \u201ctruffle.js\u201d instead of reading what\u2019s inside.I\u2019m writing this tutorial on Windows, so I\u2019ll remove the \u201ctruffle.js\u201d file. Then I\u2019ll put this code inside of \u201ctruffle-config.js\u201d:It basically says, that, when using the development network, connect to the host at \u201c127.0.0.1\u201d (localhost), using the port 7545.Now we are ready to test our code on a blockchain!Testing our\u00a0codeIn the first part, we will use Ganache.Fire a new command-line and type in the following command:ganache-cli -p 7545What it does is, it tells ganache-cli to start at the port 7545.Ganache will generate test accounts for us, they have 100 ether by default, and are unlocked so we can send ether from them freely. The first account for example is the guy right here:Now, back to our first command-line interface, we execute two commands:truffle compiletruffle migrate --network developmentCompile will compile our Solidity code to bytecode (the code that the Ethereum Virtual Machine (EVM) understands), in our case, Ganache emulates the EVM.Migrate will deploy the code to the blockchain, in our case, the blockchain could be found in the network \u201cdevelopment\u201d we set earlier in the \u201ctruffle-config.js\u201d file.Now, if everything has gone as expected, you should see this on your terminal:Notice that it shows the address of the instantiated Wrestling contract.On the commande-line interface where ganache-cli is run, you can see the transactions being executed:Notice that it shows the address of the instantiated Wrestling contract.Now type the following command to start Truffle\u2019s console. It will help us interact with ganache\u2019s blockchain.truffle console --network developmentFirst, we will execute this commands:account0 = web3.eth.accounts[0]account1 = web3.eth.accounts[1]It will assign the address of the first account to the variable account0, the second to the variable account1. Web3 is a JavaScript API that wraps RPC calls to help us interact with a blockchain in an easy way.Then we will write this:Wrestling.deployed().then(inst => { WrestlingInstance = inst })It assigns a reference to the instance of the contract that truffle deployed to the variable \u201cWrestlingInstance\u201d.Execute the the next line:WrestlingInstance.wrestler1.call()It will return the address of the wrestler1, in our case it was the first account. Truffle, during the migration, picked up the default account from Ganache, which is the first account, because we didn\u2019t specify another account address during the migration, or another address in the configuration file of Truffle.We will then register the second account as an opponent:WrestlingInstance.registerAsAnOpponent({from: account1})Here, the \u201cfrom\u201d directive tells the function from which account the transaction should be fired.Upon executing the line, it should return something similar to this:Notice that the transaction used Gas, and it fired the event \u201cWrestlingStartsEvent\u201d.You could retrieve the address of the second wrestler by executing the following line:WrestlingInstance.wrestler2.call()Now, the players can wrestle:WrestlingInstance.wrestle({from: account0, value: web3.toWei(2, \"ether\")})WrestlingInstance.wrestle({from: account1, value: web3.toWei(3, \"ether\")})// End of the first roundWrestlingInstance.wrestle({from: account0, value: web3.toWei(5, \"ether\")})WrestlingInstance.wrestle({from: account1, value: web3.toWei(20, \"ether\")})// End of the wrestlingThe \u201cvalue\u201d directive is used to send ether with a transaction. The \u201cweb3.toWei(5, \u201cether\u201d)\u201d part sends 5 ether, that value is converted to Wei. Wei is the base unit (lowest denomination) of ether. More infos could be found at this link.Upon executing the last line, the account1 will be the winner, since we put 23 ether in total with it, and it\u2019s more than the double of what we put with the account0.A little exercise for you is to withdraw the ether from the contract.Now, it\u2019s up to you to research how to use Truffle\u2019s and Ganache\u2019s advanced features. You can start by reading the docs, and alternatively, here is an excellent introduction to Truffle if you felt lost or want to reinforce your knowledge on what we just saw.How geth will fit in the\u00a0pictureNow, if we used Ganache for development, we would want to use something closer to a real environment, if only just to be more familiar with it.InstallationsStart by downloading geth. On Windows, you might need to add geth\u2019s installation folder to your PATH variable.Download Mist or Ethereum Wallet. For our use, both will be alike, so it doesn\u2019t matter which one you pick.Onto the creation of the local private test\u00a0networkIn the same root folder, create a new file, and name it \u201cgenesis.json\u201d. Then past the following content in it.The file \u201cgenesis.json\u201d is simply the configuration file that geth needs to create a new blockchain. It\u2019s not important to understand the content of the file for the moment.If you run geth without specifying any parameter, it will try to connect to the mainnet. The mainnet is the main network of Ethereum, the real blockchain of Ethereum.If you run Mist without specifiying any parameter, it will throw an error if an instance of geth is running. If you tell Mist to connect to the geth instance that is actually running(what we will do in a little moment) it\u2019ll work just fine. If you run Mist while no instance of geth is running, it will start a new instance of geth, and eventually ask you from which blockchain network it should download blocks.There is a public Ethereum test network, but we will create our own private test network locally, using the \u201cgenesis.json\u201d file we created earlier.Fire up another command-line interface and type in the following (be sure to run it in your project root folder):geth --datadir=./chaindata/ init ./genesis.jsonWe launch geth and specify where our blockchain will be stored, here in the \u201cchaindata\u201d folder (it will be automatically generated), and we initialize it with our \u201cgenesis.json\u201d configuration file.We then start geth using the following command:geth --datadir=./chaindata/ --rpcThe \u201c--rpc\u201d parameter tells geth to accept RPC connections, it\u2019s needed so that truffle can connect to geth.Open another command-line interface, and start Mist (or Ethereum Wallet), using the same parameters:mist \u2013rpc http://127.0.0.1:8545The \u201c-rpc\u201d tells Mist (or Ethereum Wallet) to connect to the instance of geth we started.In the Wallets tab, press Add Account and create a new wallet:Notice that we are using a private network. Beware of that, you wouldn\u2019t want to use you ether on the Mainnet for development purposes.I will create an account using the password \u201c123456789\u201d. In a real environment, use a stronger password.Open up a new command-line interface and run this command:geth attachIt will run the console of geth, and we can now interact with it.With out main account created on the Mist UI, we will run this command inside of \u201cgeth attach\u201d console:miner.start()It will start a miner, the process that will confirm transactions, and after a few seconds or minutes (depending or your computer), you should start seeing ether being added to your balance (And also to your main account):Note that if you don\u2019t have enough RAM available, it may not start mining at all. You can stop the mining using the command \u201cminer.stop()\u201d.Now, open the \u201ctruffle-config.js\u201d file again, and modify it like this:The \u201courTestNet\u201d is the configuration necessary to connect to the geth instance. Geth starts by default on port 8545.In the command-line interface where we launched \u201cgeth attach\u201d, we will unlock the account, so we can use it to migrate the Smart Contract from Truffle, using the following command:personal.unlockAccount('0x6AC4660c960Aaf5d9E86403DDAcB4791767e5869', '123456789')Here, I used the address of the account I just created, it would be a different address for you, and the password \u201c123456789\u201d that I\u2019ll use for these tests. Notice that the password is shown in plain text, and you should use a different method with a real account.Now, back to the command-line interface where we previously launched Truffle, run this command:truffle migrate --network ourTestNetIt will start migrating the contract to the blockchain that geth is running. Start the miner if you previously stopped it, otherwise, the migration will not be executed.If the migration was successful, you would see an output like this:Now, run the following command to start Truffle\u2019s console:truffle console --network ourTestNetThen run these two commands:Wrestling.addressJSON.stringify(Wrestling.abi)You should have an output like this:The first line returns the address of the deployed Wresting contract instance.The second line, will return the Wresting contract ABI. The ABI is basically a description of the contract. It contains a list of its functions and variables among other things.When copying the address and the ABI, remove the apostrophes highlighted by a red arrow in the screenshot.Now, back to Mist, we will open the contracts tab, and click on watch contract.Then we will past the address and the ABI of the Wrestling contract we deployed:Click on \u201cOK\u201d, then it will be shown in your watched contracts list. Click on it and it will open the contract page. If you scroll down, you\u2019ll see something like this:Use the select a function part to interact with the contract. It\u2019s the same as we did above using Truffle\u2019s console.And that\u2019s it, we saw how Ganache and geth come in play. When you will want to deploy a contract to the real blockchain, you should use the second method and connect geth with the mainnet.N.B: You could deploy a contract directly on Mist without using Truffle migration system, here is an example video of that process. Using Truffle is more interesting in a real development process though, since you\u2019ll be able to include and import multiple other smart contracts and scripts if you use a modular approach to develop your smart contracts.N.B.2: You could always write your contract code on a basic nodepad application, and deploy it to the mainnet using some trusted third party\u2019s portal, but I advise you to not.The repository for this tutorial can be found here:devzl/ethereum-walkthrough-2ethereum-walkthrough-2 - Repository for the second part of the tutorial series on Ethereum, \"Ethereum development\u2026github.comIn conclusionWe have seen 4 ways of developing and deploying our Smart Contracts:The first one is to use Truffle and Ganache. Since we copied the code from the last tutorial, I want to tell you that there are plugins available for the most popular text editors and IDEs. Some offer only syntax highlighting, while others help with other areas.The second one is to deploy code from Truffle to geth (and the GUI app Mist).The third, is to use Remix to write small, simple contract when you are just learning Solidity, and deploying the code in Mist like shown in the video previously linked.Or like a real cowboy, you could use a simple text editor to write and then deploy your untested contract using a nameless third party\u2019s drag-and-drop deployment feature.In the next part, we will discuss security since our \u201cWrestling\u201d script is far from being ready to be launched in a real environment.After, that we will see Token creation, and Initial Coin Offerings (ICOs).If you liked this second part, you can find me on twitter @dev_zl.", "responses": "39"}, {"title": "Ethereum mining on AWS in\u00a05mins", "author_name": "Steve Ng", "link": "https://hackernoon.com/ethereum-mining-on-aws-in-5mins-713f5a40949f?source=search_post", "post_date": "May 9, 2017", "readtime": "4 min read", "upvotes": "1K", "content": "Ethereum mining on AWS in\u00a05minsSteve NgBlockedUnblockFollowFollowingMay 9, 2017If you have come into this post, you must have heard of bitcoin mining. Bitcoin mining refer to using a node to verify transactions, compile them to a block, solve computational puzzles and submitting the block to the network for a block reward. Most of the effort in the step above are in solving those computationally intensive puzzles.However, Bitcoin mining is no longer feasible for normal folks like you or me as the optimal hardware to mine is ASIC (Application-Specific Integrated Circuit) specially designed for solving for those computational puzzles. Using your own CPU or GPU will result in higher cost (electricity and hardware) than the potential reward.", "responses": "48"}, {"title": "Counterfactual: Generalized State Channels on\u00a0Ethereum", "author_name": "Liam Horne", "link": "https://medium.com/statechannels/counterfactual-generalized-state-channels-on-ethereum-d38a36d25fc6?source=search_post", "post_date": "Jun 12, 2018", "readtime": "8 min read", "upvotes": "3.1K", "content": "Counterfactual: Generalized State Channels on\u00a0EthereumLiam HorneBlockedUnblockFollowFollowingJun 12, 2018A typical state-channel, composed of counterfactually instantiated objects.At L4 we have been working on state channels and other blockchain scalability research. Today we\u2019re excited to share one of the foundational pieces of our work: Counterfactual: Generalized State Channels (pdf).State channels are the foundational technology for useable distributed applications. They can be used in any interaction with a defined set of participants, such as payments or games like chess or poker. \u201cChannelizing\u201d these applications makes them radically cheaper, and reduces the unacceptably high latency in today\u2019s blockchain applications, enabling the web-like response times expected by users.Despite this, state channels are underutilized in today\u2019s ethereum applications. Each project that wants to use state channels must effectively build their own custom implementation, leading to redundancies and unnecessary risks. Second, existing state channel implementations still put too many operations on-chain, and compromise privacy in unnecessary ways.We envision a better future. Earlier, we described two broad goals:Design a generalized state channels implementation that preserves privacy, is built using modular components, has support for multiple parallel operations inside a single channel, and allows users to upgrade channel designs without any on-chain operations.Make it easy for developers to utilize state channels by providing a framework and standard modular components for building secure, performant applications.Our paper (pdf) describes a state channels design that places as little on-chain as possible while still remaining secure. We believe it will become a standard reference for building secure and optimized state channels, something long-needed by the ethereum community.We will be attending Off the Chain in Berlin where we will discuss our technique in more depth. Needless to say, we\u2019re not doing an ICO or any other fundraising event involving a token.In this blog post, we summarize the approach described in our paper. If you\u2019re interested in a conceptual description of how state channels work, take a look at the state channels section of Josh Stark\u2019s Layer 2 scaling article. The rest of this blog post assumes the reader has some familiarity with the basic technique.State channels terminologyThe basic technique behind state channels has been known for several years. Since then, we have found new vocabulary that lets us abstract over particular implementations and discuss components and techniques that appear in all state channels.State channels work by \u201clocking up\u201d some portion of blockchain state into a multisig contract, controlled by a defined set of participants. The state that is \u201clocked up\u201d is called a state deposit. For instance, this might be an amount of ether or an ERC20 token, but could also be a cryptokitty or an ENS domain name.After the state deposit is locked, channel participants use off-chain messaging to exchange and sign valid ethereum transactions without deploying them to chain. These are transactions that could be put on chain anytime, but are not.Updating the state of the channel always proceeds by unanimous consent. All parties sign (and keep their own copies of) each off-chain transaction. Because these \u201cstate updates\u201d are taking place entirely off chain, they have zero transaction fees, and their speed is limited only by their underlying communications protocol.For this reason, state channels offer \u201cinstant\u201d transactions\u200a\u2014\u200ai.e., parties do not have to wait for any blockchain confirmations. An application can immediately consider an operation finalized and display that to users, without having to wait for a set number of confirmations. This is how state channels are able to offer web-like response times.We call this property instant finality. In consensus research, \u201cfinality\u201d means the extent to which a state transition is guaranteed not to be reverted. In the context of state channels, an operation is final if Alice cannot be prevented from realizing that operation on the blockchain if they choose to.If the latest \u201cupdate\u201d in a state channel says \u201cAlice = 5ETH, Bob = 1 ETH\u201d, then that state is \u201cfinal\u201d. Remember, the update is a valid transaction signed by both Alice and Bob, which could be deployed on-chain by either party at any time. As long as we assume Alice can broadcast that transaction to the internet at some point, she can consider that transaction final.The core property of state channels is the ability to refer back to the blockchain only when necessary. If a channel is properly constructed, then all parties can engage in fast operations that offer instant finality. If anything ever goes wrong, all parties always have the option to deploy the latest version of the state to the blockchain.Keep in mind that state channels\u200a\u2014\u200aand all blockchain technologies\u200a\u2014\u200ashould be considered within appropriate threat models. We examine in detail threat models appropriate for state channels in section 3 of our paper and limitations of state channels in section 7.Minimizing on-chain operationsExisting application-specific state channel implementations require users to open up a new channel for each application they would like to use, paying expensive transaction fees. For instance, two users would make one on-chain transaction to open a payment channel between them, and they would need to make another on-chain transaction to play a game of chess with each other.Our state channels minimize on-chain requirements to an extreme, moving as much logic as possible to the off-chain layer. This leads to one of the most significant insights of our paper: a sufficiently powerful multisignature wallet is the only necessary on-chain component of any individual state channel.Moving logic off-chain allows us to gain significant advantages over existing channels. We can install new applications into a state channel without ever going on-chain. We can even upgrade or re-design a state channel without requiring on-chain transactions or fees.This approach also has significant privacy benefits. Properly constructed, the multisignature wallet used to secure the state deposit should be indistinguishable from any other multisignature wallet. There would be no way to tell the difference, on chain, between a common multisig and one used to create a state channel.Counterfactual TerminologyWe are able to achieve these results using what we call \u201ccounterfactual instantiation\u201d. Explaining this technique requires first defining terminology.\u201cCounterfactual\u201d means something that could be true, but is not. This is an extremely helpful concept when discussing state channels, where we spend a lot of time reasoning about things that could be happening on chain, but are not.In state channels, we say \u201ccounterfactual X\u201d to describe a case where:X could happen on chain, but doesn\u2019tAny participant can unilaterally make X happen on-chainParticipants can therefore act as though X has happened on-chainFor instance, imagine a payment channel between Alice and Bob. Alice sends 4 ETH to Bob through the channel, which in practice means that both parties sign a transaction. This transaction could be deployed on chain at any time by either party, but it is not. So we can say \u201ccounterfactual Alice gives Bob 4 ETH\u201d. This allows them to act as though the transaction has already happened\u200a\u2014\u200ait is final, within appropriate threat models.Counterfactual instantiationIn the sections above, we said that our approach lets you install new applications into a state channel with zero on chain operations or fees. How it this possible?The key to this capability is what we call counterfactual instantiation. In the section above, we described counterfactual transactions between Alice and Bob. But we can also create counterfactual contracts. Counterfactual instantiation means to instantiate a contract without actually deploying it on-chain. When a contract is counterfactually instantiated, all parties in the channel act as though it has been deployed, even though it has not. This technique lets us move almost all channel logic off-chain.Counterfactual instantiation is achieved by making users sign and share commitments to the multisig wallet. These commitments say that if the counterfactually instantiated contract were to be instantiated on-chain, the multisig wallet (which holds the state deposit) will look at the instantiated contract and transfer the appropriate state deposits based on the state of that contract.For this to work, we need to refer to the counterfactually instantiated contract inside the commitment, before the contract is deployed. To do this, we introduce a global registry: an on-chain contract that maps unique deterministic addresses for any counterfactual contract to actual on-chain deployed addresses.\u00b2 The hashing function used to produce the deterministic address can be any function that takes into account the bytecode, its owner (i.e. the multisignature wallet address), and a unique identifier.For example, we might have a contract `C` with bytecode and constructor arguments `initcode`. The result of running a function call to the registry with the argument `initcode` would be that an entry would be added to the registry; its key being the counterfactual address and its value being the actual on-chain deployed address.This gives us a way of referencing off-chain contracts without needing to deploy them on-chain first. We simply do a lookup in the registry to see what address corresponds to the counterfactual address. In Solidity this is as simple as:Registry(registryAddress).resolve(counterfactualAddress)Object-oriented channel designOur channel design lets developers take an object-oriented approach to state channels. Any individual state channel will be composed of several counterfactual objects\u200a\u2014\u200ae.g. a payment channel object, or a chess-game channel object. Because these are counterfactually instantiated, they require no fees to be added into the channel\u200a\u2014\u200aonly signed commitments between the parties.For instance, Alice and Bob can at any point choose to counterfactually instantiate a contract within their channel\u200a\u2014\u200asay, a contract that defines a game of chess. They can then exchange state-updates between each other that reference that counterfactually-instantiated game, in order to actually play the game of chess, all with no on-chain fees.We believe this object-oriented approach offers many significant benefits:Application developers can program against a well-defined API, plugging into the core components necessary for every channel.We can ensure that, as long as the core components are heavily audited and remain secure, bugs in the application developer\u2019s code can be isolated to just the state it controls.Application developers can reuse existing components via counterfactual addressing just as they would reuse ethereum contracts\u200a\u2014\u200afor instance, a provably fair randomness source.Users can preserve privacy in a dispute, only putting on-chain the objects that are in dispute.We can access more points on the trade-off curve between messages passed during normal operation, and transactions that need to be posted in the case of a dispute, and in certain cases this lets us amortize responses to stale state across channels.ConclusionIf you\u2019re interested in learning more about generalized state channels and the counterfactual technique, we encourage you to read the paper. The paper includes significant content that we have not summarized in this post, including:Comparisons to other techniques like sidechains and PlasmaReview of existing state channel designsIn-depth examination of relevant threat modelsMeta-channelsAn example construction for generalized state channelsFor updates, follow us at @statechannels and keep an eye on our website.Lastly, we\u2019d like to thank the Ethereum Foundation for their continuing support of this important work. We are thrilled to be part of a talented community driven to scale the ethereum network, laying the groundwork for Web 3. We\u2019d also like to thank Vitalik Buterin, Erik Bryn, Tom Close, Josh Stark, Nima Vaziri, Armani Ferrante, Lisa Eckey, Kristina Hostakova, Yoichi Hirai, and Sylvain Laurent for their discussion and feedback on earlier drafts of the paper.NOTES\u00b2 In the future, once account abstraction is live, we\u2019ll be able to do this trivially, since a contract address will be computable based on its bytecode and constructor arguments.", "responses": "10"}, {"title": "ICO 101: how to participate in an ICO made with\u00a0Ethereum", "author_name": "Lordmancer II", "link": "https://medium.com/the-mission/ico-101-how-to-participate-in-an-ico-made-with-ethereum-cf57516183f6?source=search_post", "post_date": "Sep 19, 2017", "readtime": "8 min read", "upvotes": "1.5K", "content": "ICO 101: how to participate in an ICO made with\u00a0EthereumLordmancer IIBlockedUnblockFollowFollowingSep 19, 2017There\u2019s a lot of hype around cryptocurrencies and ICOs as it continues to grow exponentially every day, even experts couldn\u2019t predict where it is today. Quite a few of them seem attractive, but imagine I didn\u2019t know anything about cryptocurrency, wallets, and ethereum. I mean, nothing at all.I will participate in the ICO of a mobile MMORPG called Lordmancer II (their site is lordmancer2.io. My goal was to get familiar with the whole idea of an ICO, go through all the steps, and have some fun in the process. For the purpose of this article the exact ICO doesn\u2019t matter, the process will be the same for any. Let\u2019s take this article as a general tutorial.Let me remind you what an ICO is. The acronym stands for Initial Coin Offering, a mock-up of \u201cInitial Public Offering\u201d. Nowadays, any startup can issue its own currency, usually called tokens or coins, using blockchain technology. These tokens may be bought, sold, or exchanged for another cryptocurrency, such as Bitcoin, Ether, or for fiat (read: normal) currencies. The main goals for the issuer of the tokens or coins is to fund their project development, marketing, and help increase demand, which will then increase the value of the tokens. The final goal of the individuals who purchase tokens is to use them to exchange/buy/sell individual goods and items, or do what most people do and wait until their price has skyrocketed and then sell them for a HUGE PROFIT\u2026.Hopefully.There are various business models designed to make the tokens more valuable with time. As for Lordmancer II, the price for their tokens will continue to grow because there will be always be an increase in demand for tokens from their players, and there\u2019s a limited amount of tokens. Besides that, they also promise to burn a fraction of tokens with each trade, making for artificial deflation.Okay, enough about theory. Let me finally tell you what you need to do if you want some tokens now for your money.Step 1. Create your Ethereum\u00a0WalletMost of the ICOs are based on Ethereum; a blockchain technology and a cryptocurrency by the same name. So, first of all you will need to set up your Ethereum wallet. There are many tools and apps for that out there. But not all of them support new ERC-20 tokens, and you will need those.I recommend using one of the following:\u25cf Ethereum Mist Wallet,\u25cf Ethereum\u2019s online wallet\u25cf MyEtherWalletAlthough you can use any of these three, in this article I will use MyEtherWallet as an example.MyEtherWalletVisit www.myetherwallet.com. The first thing you see is Create New Wallet.Come up with a strong password, fill in the form, make sure to remember it by heart, and then press \u2018Create New Wallet\u2019.Now, save your Keystore File. Click \u2018Download Keystore File\u2019 and save the file somewhere on your computer or on a thumb drive for extra security. After you have saved the file (triple-check this!), go ahead and click the Continue button.On the next screen you will see your Private Key, it\u2019s a string of symbols. Make sure you write down or print your Private Key in order to create a Paper Wallet. Remember, there\u2019s no way to remind you of your password or Private Key, the technology simply doesn\u2019t allow that! If it\u2019s lost, it\u2019s lost forever! So, please take all of the warnings you will see on those pages seriously.Proceed to next screen.As you can see, there are many ways of accessing your wallet, but for clarity\u2019s sake we\u2019ll stick with the Private Key option. Simply paste or type in your private key, then click \u2018Unlock\u2019.Another option is to use the keystore file you saved on your computer earlier, then enter your password and then you\u2019ll be able to click \u2018Unlock\u2019.Now you have full access to your Ethereum Wallet and that\u2019s it! It was simple, right? If you want to access your wallet again, go to www.myetherwallet.com and click on \u2018View Wallet Info\u2019 in the top right corner.Step 2: Purchase your first\u00a0EtherNow you can actually start using your wallet. In order to fill your wallet with the Ether (ETH) needed to purchase someone\u2019s tokens offered on an ICO, you will need a cryptocurrency exchange.There are many exchanges out there, such as Coinbase, Kraken, Bitfinex, Bittrex, and many many more.Some of these allow you to trade fiat currency (dollars or euro) for Ethereum directly, while others only allow exchanging Bitcoin (BTC) or another cryptocurrency to ETH. Also note that exchanges offer different exchange rates. Some might be more favorable to you than others, and the spread may be quite big. Visit a few of exchanges before each transaction, compare their rates and choose wisely!I will not go into more detail about which exchange could be the best fit for you. Instead, I\u2019ll show you the easiest way to purchase ETH and receive it on the wallet you have just created. Note again that this is the easiest way to do it, but may not be the best for you.The easiest way to purchase ETH is to visit MyEtherWallet again and click on the Coinbase widget you see when you log in.Coinbase is one of the biggest cryptocurrency exchanges, and this widget allows you to easily purchase ETH and immediately send it to your wallet. The process is pretty straightforward and we won\u2019t get into detail here. Just click on the widget and follow their instructions. You\u2019ll be asked to fill in your name, the amount of ETH you\u2019d like to purchase, your email address, and your phone number.Alternatively, you may opt to purchase Ether on any cryptocurrency exchange that supports Ethereum. Luckily, most of them do. Simply send the currency of your choice to the exchange you like best and exchange it for ETH. If you do not know how to do this, ask Google like this: \u201cHow to buy ETH on Kraken\u201d, where you can substitute \u2018Kraken\u2019 for the exchange you prefer. In this latter case of \u201cnot Coinbase\u201d, don\u2019t forget to order the exchange to send ETH to your MyEtherWallet.Step 3: Send ETH to the\u00a0ICOWhether you already had a wallet full of cryptocurrency, or have just recently created one using the first two steps from this article, you are now ready to participate in the ICO.The next thing you need to do is visit the ICO website. Me, I\u2019m going to lordmancer2.io. Usually there is a lot of project-related information, whitepaper, team, mentors and most often there\u2019s a block dedicated to the ICO progression.Here you can see total amount of Ether raised by the project, in this case 260.61, number of investors (115) and the current exchange rate.In order to participate, I first need to read and accept the terms & conditions. After that I can click on \u2018CONTRIBUTE\u2019.Here, one is presented with all the necessary information to buy tokens of this project: address to contribute, minimal amount of contribution, and recommended Gas limit (I\u2019ll explain this later).The most important thing here is the target address. It\u2019s just another wallet like yours. Select the whole string of characters and copy it to clipboard (ctrl-c/cmd-c).Now open MyEtherWallet and click \u2018Send Ether & Tokens\u2018.Paste the target address into \u2018To Address\u2019 field (ctr-v/cmd-v), type in the amount of Ether you want to invest and volume of Gas you\u2019re expecting to spend.What is Gas and Gas limit? Every transaction in Ethereum network requires a resource called Gas to be executed. Amount of Gas corresponds to the complexity of a transaction. If you set Gas limit too low, your transaction will fail. Think of it just like having gas in your vehicle (ETH in your wallet), and the destination is the ICO address. If you don\u2019t put enough gas in your vehicle to get to the destination you\u2019re going to, you won\u2019t make it. Lower Gas setting will take longer such as driving a fuel efficient vehicle at slower speed. In MyEtherWallet you can set desired Gas price in the top right block.I recommend setting this value in a range from 50 to 60 Gwei. This is not cheap but the priority of your transaction will be decent.The last thing you have to do is to click \u2018Generate Transaction\u2019 and then \u2018Send Transaction\u2019.That\u2019s it! Now you\u2019re a happy owner of those much desired tokens. Let\u2019s put them into your MyEtherWallet.Click on \u2018View Wallet Info\u2019 menu and open your wallet as you did before. To the right you\u2019ll see a block called \u2018Token Balances\u2019.Click \u2018Add Custom Token\u2019You should receive all of the required info from the ICO team. Usually, it\u2019s clearly shown on their website. In a few seconds after you clicked \u2018Save\u2019, you\u2019ll see the balance of your tokens.That\u2019s pretty much it! You\u2019ve purchased the tokens you wanted, you\u2019ve supported a great team, and you believe in them and their groundbreaking and revolutionary ideas! See you again on the next promising ICO!Lordmancer II ICO successfully gained its target and raised $1 mln during main ICO round. Visit project site to get more info or start playing the first mobile MMORPG where players can trade for cryptocurrency http://lordmancer2.ioIf you enjoyed this story, please click the \ud83d\udc4f button and share to help others find it! Feel free to leave a comment below.", "responses": "15"}, {"title": "Ethereum 2.0", "author_name": "Darren Langley", "link": "https://medium.com/rocket-pool/ethereum-2-0-76d0c8a76605?source=search_post", "post_date": "Aug 7, 2018", "readtime": "7 min read", "upvotes": "3.1K", "content": "Ethereum 2.0Darren LangleyBlockedUnblockFollowFollowingAug 7, 2018Ethereum\u2019s rise over the last three years has been extraordinary. A whole new industry of software developers, innovators, and entrepreneurs are building products on Ethereum.As a small sample these companies are:Saving journalism\u200a\u2014\u200aCivilDisrupting digital advertising\u200a\u2014\u200aBATDecentralizing insurance\u200a\u2014\u200aEtheriscSecuring digital voting\u200a\u2014\u200aHorizon StateImproving supply chain transparency\u200a\u2014\u200aProvenanceRe-engineering charitable giving\u200a\u2014\u200aGivethAllowing music creators to grow and thrive\u200a\u2014\u200aUjoDemocratising energy markets\u200a\u2014\u200aPowerLedgerSolving data privacy\u200a\u2014\u200aUportDespite its success, Ethereum is still a nascent technology, to support these applications and those not imagined yet, it needs to address a key issue.", "responses": "7"}, {"title": "What we learned building our first Ethereum\u00a0Dapp", "author_name": "Brendan Lee", "link": "https://medium.com/coinmonks/what-we-learned-building-our-first-dapp-28b01f9fc244?source=search_post", "post_date": "Jun 7, 2018", "readtime": "13 min read", "upvotes": "1.3K", "content": "What we learned building our first Ethereum\u00a0DappBrendan LeeBlockedUnblockFollowFollowingJun 7, 2018Update: if you enjoyed this article\u200a\u2014\u200acheck out what we\u2019re building at Nodesmith. We\u2019re making it easier for developers to build blockchain based applications, by providing them with all the core infrastructure to make polished & scalable applications.IntroductionA couple of months ago, myself and my colleague Samm decided it was past time we learned Ethereum and Solidity development. After passively following Ethereum since its launch, we decided to build an Ethereum Dapp as a side project to help us better understand the underlying technology.We had a few goals in mind for the Dapp we wanted to build:The Dapp had to be small in scope, but cover all the meaningful features of Ethereum and Solidity.The Dapp had to run without us needing to manage any cloud services ourselves\u200a\u2014\u200ameaning we would only write client code and Ethereum smart contracts.We would open source whatever code we wrote and share what we learned.What we ended up building was a small game called Eth Plot! Eth Plot was inspired by Reddit\u2019s famous r/place April Fool\u2019s joke and by the million dollar homepage. It allows you to buy \u201cplots\u201d of digital space on a grid. In the plot you purchase, you can place an image and a link to a website of your choosing. You can also resell your plots at any given time.App screenshots showing a user purchasing a new\u00a0plotFeel free to check out the Dapp here! It is running on the mainnet as well as Ropsten, Rinkeby and Kovan. We hope some folks use the application, but our primary goal with this project was our own education. We learned a lot, and in this article, we will share with you what we learned during this endeavor.Warning: this is a bit of a long read! Want to skip directly to the code? Here\u2019s the main smart contract, and here is the React/Redux application that forms the UI. We hope the sample code will be helpful to those embarking on the journey of building their first Dapp.Our intended audience for this article is developers who are familiar with Ethereum, but perhaps haven\u2019t written their first Dapp yet and would like an overview of what it entails, accompanied by some tips and tricks we picked up along the way. We do not claim to be experts, and aren\u2019t aiming to write another in-depth tutorial on Dapp development. Here\u2019s what we will be covering in this article:A high level overview of our tech stack\u200a\u2014\u200aall the technologies we used to build Eth Plot.The details of the Eth Plot smart contract\u200a\u2014\u200aimplementing the functionality needed for this app in an efficient way was surprisingly complicated.Tips and tricks\u200a\u2014\u200aa catch-all collection of helpful tidbits we learned while developing Eth Plot.", "responses": "11"}, {"title": "Setup your own private Proof-of-Authority Ethereum network with\u00a0Geth", "author_name": "Salanfe", "link": "https://hackernoon.com/setup-your-own-private-proof-of-authority-ethereum-network-with-geth-9a0a3750cda8?source=search_post", "post_date": "Feb 11, 2018", "readtime": "14 min read", "upvotes": "2K", "content": "Setup your own private Proof-of-Authority Ethereum network with\u00a0GethSalanfeBlockedUnblockFollowFollowingFeb 11, 2018February 2018.updates:geth 1.8 was released a few days after this guide was published and fortunately does not break anything. This post is then valid and was tested for both geth 1.7.3 and geth 1.8. Awesome\u00a0:)I\u2019ve learned a posteriori that the gas limit per block is dynamic. Therefore I\u2019ve updated the section 2.3 to give more information about this particular case. In my private network where blocks are most of the time empty, I don\u2019t what the gas limit to decrease at all\u00a0!Clique requires int(N/2+1) sealers (where N is the number of sealers defined in the genesis file\u200a\u2014\u200ain extraData field) to be online in order to run.thx to Ivica Aracic for pointing out that clique PoA DOES WORK with a single node. For any reason I missed that and I apologize for the confusion. With a single node, we just need (A) create genesis file with only one sealer (only 1 address in extraData ) (B) create an account (C) init geth (D) run geth, unlock account and mine. No bootnode is required then.with geth 1.8 if you get the error \u201cinvalid host specified\u201d, try adding the option --rpcvhosts value to the geth command. See geth --helpGoal: step by step guide to help you setup a local private ethereum network using the Proof-of-Authority consensus engine (also named clique).In a nutshell: we will setup two nodes on the same machine, creating a peer-to-peer network on our localhost. In addition to the two nodes, a bootnode (discovery service) will also be setup.It took me quite some time and extensive research and googling to finally have a solid ethereum development environment for testing my smart contracts and my DApps.In this post, I\u2019ve decided to share how I am setting a Proof-of-Authority network using the clique consensus engine of Geth. It\u2019s my way to thank the community by giving back and hopefully making life easier for anyone willing exploring the Ethereum universe.OS and\u00a0SoftwareMy OS is Ubuntu 16.04 LTS (this tuto was done in a fresh virtual machine).For the Ethereum client, I am using Geth (the Go implementation of the Ethereum protocole). I believe that Geth is easy to install with plenty of great tutorials out there, so I am not gonna cover any installation here. I am currently running Geth 1.7.3-stable:$ geth versionGethVersion: 1.7.3-stableGit Commit: 4bb3c89d44e372e6a9ab85a8be0c9345265c763aArchitecture: amd64Protocol Versions: [63 62]and Geth 1.8.1-stable$ geth versionGethVersion: 1.8.1-stableGit Commit: 1e67410e88d2685bc54611a7c9f75c327b553cccArchitecture: amd64Protocol Versions: [63 62]I strongly recommend to check the Geth Command Line Interface documentation. You\u2019re gonna need it. A lot.1. Let\u2019s get\u00a0started1.0 overviewLet\u2019s start by the end\u2026 For clarity, this is what you are supposed to get when you will have completed Chapter 1.devnet$ tree -L 2.\u251c\u2500\u2500 accounts.txt\u251c\u2500\u2500 boot.key\u251c\u2500\u2500 genesis.json\u251c\u2500\u2500 node1\u2502   \u251c\u2500\u2500 geth\u2502   \u251c\u2500\u2500 keystore\u2502   \u2514\u2500\u2500 password.txt\u2514\u2500\u2500 node2    \u251c\u2500\u2500 geth    \u251c\u2500\u2500 keystore    \u2514\u2500\u2500 password.txt1.1 create a workspace$ mkdir devnet$ cd devnetdevnet$ mkdir node1 node21.2 create your\u00a0accountsThe accounts (also called wallet) hold a private-public key pair that are required for interacting with any blockchain. Any mining node (strictly speaking our nodes will not be mining but voting) needs to be able to sign transactions (using their private key) and to identify itself on the network (the address is derived from the public key). Therefore we need at least two accounts, one per node.In Geth jargon, a voting node is called a Sealer.for node 1\u00a0:devnet$ geth --datadir node1/ account newYour new account is locked with a password. Please give a password. Do not forget this password.Passphrase: pwdnode1 (for example)Repeat passphrase: pwdnode1Address: {87366ef81db496edd0ea2055ca605e8686eec1e6}for node 2\u00a0:devnet$ geth --datadir node2/ account newYour new account is locked with a password. Please give a password. Do not forget this password.Passphrase: pwdnode2 (for example)Repeat passphrase: pwdnode2Address: {08a58f09194e403d02a1928a7bf78646cfc260b0}This creates the keystore/ folder containing your account file. Notice that the last part of the file name in keystore/ is the address of your account (also printed in the terminal just above).I suggest to copy these two addresses from the terminal screen and to save them in a text file. That will ease some copy-pasting job later on. However remember that you can read those addesses from the UTC-datetime-address file in keystore/.devnet$ echo '87366ef81db496edd0ea2055ca605e8686eec1e6' >> accounts.txtdevnet$ echo '08a58f09194e403d02a1928a7bf78646cfc260b0' >> accounts.txtFor each node, I propose to save your password in a file. That will ease some process for later on (such as unlocking your account)devnet$ echo 'pwdnode1' > node1/password.txtdevnet$ echo 'pwdnode2' > node2/password.txt1.3 create your Genesis\u00a0fileA genesis file is the file used to initialize the blockchain. The very first block, called the genesis block, is crafted based on the parameters in the genesis.json file.Geth comes with a bunch of exectuables such as puppeth or bootnode\u00a0. You can find the complete list on the Geth github. Puppeth removes the pain of creating a genesis file from scratch (and does much more). Start puppeth\u00a0:devnet$ puppethand happily answer the questions (every value can be updated by hand later on, so don\u2019t spent too much time engineering it for your first trials).Please specify a network name to administer (no spaces, please)> devnetWhat would you like to do? (default = stats) 1. Show network stats 2. Configure new genesis 3. Track new remote server 4. Deploy network components> 2Which consensus engine to use? (default = clique) 1. Ethash - proof-of-work 2. Clique - proof-of-authority> 2How many seconds should blocks take? (default = 15)> 5 // for exampleWhich accounts are allowed to seal? (mandatory at least one)> 0x87366ef81db496edd0ea2055ca605e8686eec1e6 //copy paste from account.txt :)> 0x08a58f09194e403d02a1928a7bf78646cfc260b0Which accounts should be pre-funded? (advisable at least one)> 0x87366ef81db496edd0ea2055ca605e8686eec1e6 // free ethers !> 0x08a58f09194e403d02a1928a7bf78646cfc260b0Specify your chain/network ID if you want an explicit one (default = random)> 1515 // for example. Do not use anything from 1 to 10Anything fun to embed into the genesis block? (max 32 bytes)>What would you like to do? (default = stats) 1. Show network stats 2. Manage existing genesis 3. Track new remote server 4. Deploy network components> 21. Modify existing fork rules 2. Export genesis configuration> 2Which file to save the genesis into? (default = devnet.json)> genesis.jsonINFO [01-23|15:16:17] Exported existing genesis blockWhat would you like to do? (default = stats) 1. Show network stats 2. Manage existing genesis 3. Track new remote server 4. Deploy network components> ^C // ctrl+C to quit puppethSide note\u00a0: from Clique PoA EIP#225PoA doesn\u2019t have mining rewardsSo I would highly suggest that you allocate some ethers (defined in the unit of wei) to a bunch of addresses in the genesis file, otherwise you\u2019ll hand up without any ether and thus will not be able to pay for your transactions. You could have a gasPrice of zero but that sometimes leads to undesired behavior from the nodes that could go under the radar (like not broadcasting pending transaction depending on the config of the other nodes on the network). I encourage you nevertheless to play with every parameter\u00a0:)1.4 Initialize your\u00a0nodesNow that we have the genesis.json file, let\u2019s forge the genesis block\u00a0! Each node MUST be initialize with the SAME genesis file.devnet$ geth --datadir node1/ init genesis.jsondevnet$ geth --datadir node2/ init genesis.jsontada\u00a0! done.Side note\u00a0: how does your node know about the genesis parameters when joining the Ethereum Mainnet or the Ropsten testnet, or the Rinkeby testnet\u00a0? They are already defined in the source code in params/config.go.1.5 Create a\u00a0bootnodeA bootnode only purpose is to helping nodes discovering each others (remember, the Ethereum blockchain is a peer-to-peer network). Nodes could have dynamic IP, being turned off, and on again. The bootnode is usually ran on a static IP and thus acts like a pub where nodes know they will find their mates.Initialize the bootnode\u00a0:devnet$ bootnode -genkey boot.keyThis creates a value called the enode uniquely identifying your bootnode (more on this soon) and we store this enode in the boot.key file.1.6 Midway celebrationCongrats\u00a0! Chapter 1 is done\u00a0:) trydevnet$ tree -L 2and compare the output with the section 1.0. Hopefully you should get the same tree.At this point the setup is done and we are ready to make this blockchain live.2. Make it\u00a0live2.1 Start the bootnode\u00a0servicedevnet$ bootnode -nodekey boot.key -verbosity 9 -addr :30310INFO [02-07|22:44:09] UDP listener up                          self=enode://3ec4fef2d726c2c01f16f0a0030f15dd5a81e274067af2b2157cafbf76aa79fa9c0be52c6664e80cc5b08162ede53279bd70ee10d024fe86613b0b09e1106c40@[::]:30310I like to have some verbosity for my bootnode as it is nice to see when the nodes are playing ping-pong on the network (meaning it\u2019s working!).Feel free to use any port you like but please avoid the mainstream ones (like 80 for HTTP). 30303 is used for the public ethereum networks.2.2 Starting your\u00a0nodesBig time\u00a0! Finally (but usually here the troubles arrive too).Everything in one huge command\u00a0! I am gonna cover some options but please do your homework and refer to the doc.starting node 1devnet$ geth --datadir node1/ --syncmode 'full' --port 30311 --rpc --rpcaddr 'localhost' --rpcport 8501 --rpcapi 'personal,db,eth,net,web3,txpool,miner' --bootnodes 'enode://3ec4fef2d726c2c01f16f0a0030f15dd5a81e274067af2b2157cafbf76aa79fa9c0be52c6664e80cc5b08162ede53279bd70ee10d024fe86613b0b09e1106c40@127.0.0.1:30310' --networkid 1515 --gasprice '1' -unlock '0x87366ef81db496edd0ea2055ca605e8686eec1e6' --password node1/password.txt --mine--syncmode 'full' helps preventing the error Discarded Bad Propagated Block.--port 30311 is the enode port for node1 and has to be different from the bootnode port (that is 30310 if you followed my command) because we are on a localhost. On a real network (one node per machine), use the same port.--rpcapi allows the listed modules to be used over RPC calls (see section 3.3 for an example). See the Geth Management APIs for more info. Be mindful about hacks as everyone can call your RPC methods if no firewall is protecting your node.--bootnodes tells your node at what address to find your bootnode. Replace [::] with the bootnode IP. No domain name are allowed\u00a0! Only IPs. Check enode URL format.--networkId as defined in the genesis.json file. Please use the same id\u00a0!--gasprice '1' I don\u2019t like to pay on my own network\u00a0:) be careful with gasprice. If your transactions are not being broadcasted to the network but only the node receiving the transactions is processing them, this means you sent a transaction with a gasprice that is not accepted (too low) by the other nodes on the network. No error will be return. If you have two nodes, only one will be processing the transactions. This is sneaky and reduces your network throughput by a factor 2.--unlock --password --mine tell the node to unlock this account, with the password in that file and to start mining (i.e. voting/sealing for Proof-of-Authority)--targetgaslimit value see the update in section 2.3.same for node 2 (update parameters specific to the node)devnet$ geth --datadir node2/ --syncmode 'full' --port 30312 --rpc --rpcaddr 'localhost' --rpcport 8502 --rpcapi 'personal,db,eth,net,web3,txpool,miner' --bootnodes 'enode://3ec4fef2d726c2c01f16f0a0030f15dd5a81e274067af2b2157cafbf76aa79fa9c0be52c6664e80cc5b08162ede53279bd70ee10d024fe86613b0b09e1106c40@127.0.0.1:30310' --networkid 1515 --gasprice '0' --unlock '0x08a58f09194e403d02a1928a7bf78646cfc260b0' --password node2/password.txt --mineAt this point your bootnode should stream connections coming from node1 (port 30311) and node2 (port 30312) as shown in the upper terminal window. Node1 (middle terminal) and node2 (lower terminal) should be happily mining and signing blocks. Here I have a period of 1 second (defined in the genesis file) therefore the fast block creation.2.3 Update your genesis\u00a0fileI am sure you\u2019ll want to modify some values in your genesis file. Go ahead\u00a0! However in order for those changes to become effective, we have to initialize a new blockchain. Here is the genesis file I am currently using\u00a0:{    \"config\": {        \"chainId\": 1515,        \"homesteadBlock\": 1,        \"eip150Block\": 2,        \"eip150Hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",        \"eip155Block\": 3,        \"eip158Block\": 3,        \"byzantiumBlock\": 4,        \"clique\": {            \"period\": 1,            \"epoch\": 30000        }    },    \"nonce\": \"0x0\",    \"timestamp\": \"0x5a722c92\",    \"extraData\": \"0x000000000000000000000000000000000000000000000000000000000000000008a58f09194e403d02a1928a7bf78646cfc260b087366ef81db496edd0ea2055ca605e8686eec1e60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",    \"gasLimit\": \"0x59A5380\",    \"difficulty\": \"0x1\",    \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",    \"coinbase\": \"0x0000000000000000000000000000000000000000\",    \"alloc\": {        \"08a58f09194e403d02a1928a7bf78646cfc260b0\": {            \"balance\": \"0x200000000000000000000000000000000000000000000000000000000000000\"        },        \"87366ef81db496edd0ea2055ca605e8686eec1e6\": {            \"balance\": \"0x200000000000000000000000000000000000000000000000000000000000000\"        },        \"F464A67CA59606f0fFE159092FF2F474d69FD675\": {            \"balance\": \"0x200000000000000000000000000000000000000000000000000000000000000\"        }    },    \"number\": \"0x0\",    \"gasUsed\": \"0x0\",    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"}I\u2019ve cleaned the empty addresses that puppeth includes when creating the file (at section 1.3). I\u2019ve also added a third address that gets funded when the genesis block is created. Then I have changed the period from 15 second to 1 to get those blocks mined faster (be careful as one empty block weights 1024 bytes\u200a\u2014\u200ahere my chaindata/ folder gains 1024 bytes per second (and more if the blocks are not empty). Finally I\u2019ve increased the gasLimit to allow for more transaction (trully speaking, computation) per block.update: The gasLimit defined in the genesis file only applies to the genesis block\u00a0! The gasLimit of new blocks is DYNAMIC meaning its value is changing over time depending on how much gas was used in the parent (previous) block. The computation of the new gasLimit is done in the function CalcGasLimit (github source). If you want a constant gas Limit use the option --targetgaslimit intValue when running geth. I would recommend to set it equal to the gasLimit in the genesis file (the command option is an integer whereas the genesis value is hexadecimal) so that you get a constant gas limit that does not change over time anymore. Given the genesis file above with \"gasLimit\":\"0x59A5380\"\u00a0, I am running my node with --targetgaslimit 94000000 for a constant gas limit across all blocks.The field extraData contains the address that are allowed to seal (that\u2019s why puppeth is nice to have).I have investigate the impact of changing the period and the gasLimit on the number of transaction per second (transaction rate) that the blockchain can process. But that\u2019s gonna be another article; link here.When you are happy with your genesis file. Kill your nodes if they are running (ctrl C in the terminal). Then delete the folder geth/ in node1/ and geht/ in node2/\u00a0. Delete only geth/ folders!Then initialize your nodes. From section 1.4\u00a0:devnet$ geth --datadir node1/ init genesis.jsondevnet$ geth --datadir node2/ init genesis.jsonand start your nodes again with the commands in section 2.23. Interact with your\u00a0nodesGreat your network is now live\u00a0:) but how to connect to it and starting exploring\u00a0?3.1 Open a Geth Javascript ConsoleThe simplest and probably more straight forward way to play with a node is probably to attach a Geth javascript console to one of the nodes.3.1.1 Through\u00a0IPCIPC (Inter-Process Communication) works only locally\u00a0: you should be on the same machine as your node. Open an extra terminal and attach to your node. To connect to node1\u00a0:$ cd devnetdevnet$ geth attach node1/geth.ipcWelcome to the Geth JavaScript console!instance: Geth/v1.7.3-stable-4bb3c89d/linux-amd64/go1.9coinbase: 0x87366ef81db496edd0ea2055ca605e8686eec1e6at block: 901 (Sat, 10 Feb 2018 21:15:30 CET) datadir: /home/salanfe/privateNetworks/devnet/node1 modules: admin:1.0 clique:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0>The file geth.ipc is created only when the node is running. So do not expect to find it if your node1 is off.RPC gives access without restriction to all modules listed in the terminal\u00a0: admin: 1.0 clique:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.03.1.2 Through\u00a0RPCRPC (Remote Procedure Call) works over the internet as HTTP requests. Therefore be careful when you open RPC to the outside world as everyone will have access to your node. For this reason RPC is disabled by default and when enabled it does not give access to all modules. In this guide we allowed RPC on our Geth node with the command --rpc and gave access to the modules personal,db,eth,net,web3,txpool,miner (from section 2.2). To connect to node1 using RPC\u00a0:$ cd devnetdevnet$ geth attach 'http://localhost:8501'Welcome to the Geth JavaScript console!instance: Geth/v1.7.3-stable-4bb3c89d/linux-amd64/go1.9coinbase: 0x87366ef81db496edd0ea2055ca605e8686eec1e6at block: 945 (Sat, 10 Feb 2018 21:16:14 CET) modules: eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0>3.1.3 Using the Geth Javascript ConsoleHere are some examples of methods> net.version\"1515\"> eth.blockNumber1910> eth.coinbase\"0x87366ef81db496edd0ea2055ca605e8686eec1e6\"> eth.sendTransaction({'from':eth.coinbase, 'to':'0x08a58f09194e403d02a1928a7bf78646cfc260b0', 'value':web3.toWei(3, 'ether')})\"0x299a99baa1b39bdee5f02e3c660e19e744f81c2e886b5fc24aa83f92fe100d3f\"> eth.getTransactionReceipt(\"0x299a99baa1b39bdee5f02e3c660e19e744f81c2e886b5fc24aa83f92fe100d3f\"){  blockHash: \"0x212fb593980bd42fcaf3f6d1e6db2dd86d3764df8cac2d90408f481ae7830de8\",  blockNumber: 2079,  contractAddress: null,  cumulativeGasUsed: 21000,  from: \"0x87366ef81db496edd0ea2055ca605e8686eec1e6\",  gasUsed: 21000,  logs: [],  logsBloom: \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",  status: \"0x1\",  to: \"0x08a58f09194e403d02a1928a7bf78646cfc260b0\",  transactionHash: \"0x299a99baa1b39bdee5f02e3c660e19e744f81c2e886b5fc24aa83f92fe100d3f\",  transactionIndex: 0}> exit // to quit the Geth javascript consolefor the full list of methods, see Management APIs and JSON RPC API.3.2 Using\u00a0MistThe Mist browser provides a graphical user interface for deploying and interacting with smart contracts and managing accounts. To connect Mist to your local private network over IPC, simply do\u00a0:devnet$ mist --rpc node1/geth.ipcand over RPC (make sure RPC is enabled)$ mist --rpc 'http://localhost:8501'The procedure is exactly the same if you want to use the Ethereum wallet instead of mist. Just replace mist by ethereumwallet in the commands above.3.3 Making RPC calls with your favorite programming languageIn section 3.1, we saw how to interact with the Geth API by hand. Now let\u2019s use our PC for what it is best at\u00a0: automation.The reference and by far for sending JSON-RPC requests to your node is the web3.js javascript library. I believe the internet of full of great tutorial and example on how to use the web3.js library. Therefore I am not gonna covert any of it here.The JSON-RPC APIs are currently also being implemented in java with the web3.j library and in python with the web3.py library. Those libraries offer high-level methods for working with the ethereum blockchain just like web3.js.However, it\u2019s also possible to send raw JSON-RPC requests directly to your node. I think it is worth trying as it\u2019s providing a valuable understanding on how those high-level libraries work under the hood.Here is a simple example of sending a raw JSON-RPC request to my node using python 3\u00a0:$ pythonPython 3.6.4 |Anaconda custom (64-bit)| (default, Jan 16 2018, 18:10:19) [GCC 7.2.0] on linuxType \"help\", \"copyright\", \"credits\" or \"license\" for more information.>>> import requests>>> import json>>> session = requests.Session()>>> method = 'eth_getTransactionCount'>>> params = [\"0x627306090abaB3A6e1400e9345bC60c78a8BEf57\",\"latest\"]>>> PAYLOAD = {\"jsonrpc\":\"2.0\",...            \"method\":method,...            \"params\":params,...            \"id\":67}>>> PAYLOAD = json.dumps(PAYLOAD)>>> headers = {'Content-type': 'application/json'}>>> response = session.post('http://127.0.0.1:8501', data=PAYLOAD, headers=headers)>>> response.contentb'{\"jsonrpc\":\"2.0\",\"id\":67,\"result\":\"0x0\"}\\n'>>> json.loads(response.content)['result']'0x0'The method geth_transactionCount is documented here.The \u201caccount\u201d nonce is a transaction counter and has nothing to do with the nonce for Proof-of-Work. A account nonce of zero means that the address 0x627306090abaB3A6e1400e9345bC60c78a8BEf57 never did any transaction on the network\u00a0: 0x0 is the hexadecimal representation of zero.3.4 Deploy and test your smart contracts with Truffle on your private\u00a0networkDevelopment frameworks like Truffle (or Embark, Populus) are great tools for developing and testing smart contracts.When you initialize a workspace with$ truffle initTruffle creates a series of files and folders to help you get started. I usually edit the truffle.js file as suchmodule.exports = {    // See <http://truffleframework.com/docs/advanced/configuration>    // to customize your Truffle configuration!    networks: {        devnet: {            host: '127.0.0.1',            port: 8501,            network_id: '*'        },        ganache: {            host: '127.0.0.1',            port: 7545,            network_id: '*'        }    }};then use the command$ truffle deploy --network devnetto deploy your smart contracts defined in migrations/X_deploy.js\u00a0. Or for running your tests in test/$ truffle test --network devnetUsually the Ethereum Blockchain simulator Ganache is more than enough for running your tests. However I like to use my private blockchain for ultimate testing on a real node and not only on a simulator. With Ganache I believe that the layer of abstraction is too big, what is the beauty of it but also a danger as it requires no understanding what so ever of the complexity of a real node (transaction pool, gasPrice, gasLimit, broadcasting transactions between nodes, mining or voting, computation time, consensus engine, etc.).What\u2019s next\u00a0?That\u2019s pretty much it for this guide. If you understand everything here I believe you\u2019re already on very good tracks and you have a solid foundation on which you can continue your journey with confidence.You can start developing Dapps (Decentralized Applications) by grabbing a web3 library or by making your own custom JSON-RPC wrapper.In this post, I explore how to use python for deploying and transacting with a smart contract using only raw HTTP requests.Ethereum: create raw JSON-RPC requests with Python for deploying and transacting with a smart\u2026February 2018.medium.comFinal WordsCongratulation if you made it until the end. I hope this guide is comprehensive and helped you on your journey. I welcome any feedback to improve this guide\u00a0!And a BIG Thank you to the community for all the documentation, tutorials, Q&A websites and guides out there.Happy Hacking\u00a0!", "responses": "60"}, {"title": "Ethereum Growing Exponentially in\u00a0China", "author_name": "Andrew Keys", "link": "https://medium.com/@andrewkeys_88339/ethereum-growing-exponentially-in-china-31f1d24c8ee9?source=search_post", "post_date": "May 7, 2017", "readtime": "6 min read", "upvotes": "334", "content": "Ethereum Growing Exponentially in\u00a0ChinaAndrew KeysBlockedUnblockFollowFollowingMay 7, 2017Last week, I was fortunate enough to be invited to the city of Hangzhou for the Global Blockchain Financial Summit.During this trip to China, I learned about the burgeoning Ethereum communities in Beijing, Shanghai, Nanjing and Hangzhou. Every night we hosted an Ethereum meetup and it was standing room only in each city.DAY 1\u200a\u2014\u200aBeijingPeking UniversityThe first stop on the tour was Peking University, the #1 ranked university in China.Peking University is a comprehensive and national key university. The campus, known as \u201cYan Yuan\u201d, is situated at Haidian District in the western suburb of Beijing.The university has effectively combined research on important scientific subjects with the training of personnel with a high level of specialized knowledge and professional skill as demanded by the country\u2019s socialist modernization. Thus Peking University has become a center for teaching and research and a university of a new type, embracing diverse branches of learning such as basic and applied sciences, social sciences and the humanities, and sciences of medicine, management, and education.Peking University is creating an Ethereum Laboratory to work on protocol improvements and application use cases that effect China, specifically in supply chain and energy markets.Royal Chinese MintThe Royal Chinese Mint is the subordinate unit of China Banknote Printing and Minting, which is responsible for the electronic banking mission of China Bank, concentrating on the research and exploration of the forefront of digital money, taking part widely in innovation and practice in the fields such as digital currency, mobile finance, smart-city construction and Internet based finance; it also actively promotes the application of blockchain technology in finance and related fields.The Royal Chinese Mint is experimenting with the ERC 20 token standard and Ethereum smart contracts to digitize the RMB.iPayNowNext stop was iPayNow.iPayNow uses Quorum, a version of Ethereum incoporating transactional privacy open-sourced by JP Morgan. The company provides aggregated payment service to hundreds of thousands of business clients, such as JD.com, MI, Baidu, Meituan, Ctrip and etc. To them, it is clear that blockchain technology will lead the next generation of mobile payment market.Day 2\u200a\u2014\u200aNanjingNanjing is the capital of Jiangsu province, another key city in Yangtze River Delta Region.Jiangsu Huaxin BIockchain Research Institute (JBI)JBI was founded in Dec, 2016. The establishment of the institute is approved by provincial government aiming for promoting industrial upgrading on a strategic level. Currently, JBI focuses mainly on blockchain technology application to industry and personnel training service. JBI has 30 developers and researchers focused solely on Ethereum and have recently translated much of the Ethereum and EEA documentation into Mandarin. JBI will be a powerhouse in the Ethereum-ecosystem and will become a beachhead for corporations outside of China.Day 3\u200a\u2014\u200aShanghaiDianrongDianrong was founded in Shanghai in 2012 by the co-founder of Lending Club Soul Htite and private fund partner Yuhang Guo focusing on peer-to-peer lenging. It has been expanding quickly with 28 branches and 3500 employees all over China. As a leading fin-tech company, Dianrong started blockchain research in 2015 and spent many efforts on next-generation solutions based on Ethereum, and have open-sourced their permissioned Ethereum iteration, DChain.AnduiAndui, a founding member of Enterprise Ethereum Alliance, is playing a key role in enterprise ethereum standardization. The core team consists of entrepreneurs, investors, researchers and technical experts. As a pure blockchain company, its main business covers supply chain finance, asset digitization, asset exchange and smart city etc. Andui, the flagship product is fully designed based on ethereum protocol and smart contract with the purpose of deploying ethereum in private or consortium environment.Day 4\u200a\u2014\u200aHangzhouHangzhou is a modern city in a classic Chinese setting. The city hums with activities and an endless flow of traffic, signs of its place in the 21st century, while the beautiful West Lake lies peacefully at the heart of all commotion, soothing the senses. Hangzhou is also famous for hosting the G20 Summit where 20 of the world\u2019s most influential countries gathered to improve Earth.\u00a0In eastern China, Hangzhou is the capital of Zhejiang Province and one of the seven capitals of ancient China. The city is also the southern end of the Beijing-Hangzhou Grand Canal, the longest canal ever built in the world.\u00a0Nowadays,Hangzhou is aiming at building a Digital City,and the China\u2019s first Blockchain Industrial Park was officially established in Hangzhou.Ant FinancialAnt Financial, was officially founded in October 2014 and originated from Alipay, which is the world\u2019s leading third-party payment platform founded in 2004. With its vision of \u201cbringing small and beautiful changes to the world,\u201d Ant Financial is dedicated to creating an open ecosystem, enabling financial institutions and partners to make rapid progress towards \u201cInternet+\u201d goals through its \u201cInternet Booster Plan,\u201d and providing inclusive financial services to small and micro enterprises and individual consumers.Ant Financial runs Alipay, Ant Fortune, Ant Financial Cloud and other financial services. Ant Financial\u2019s invested companies and affiliates also work with these businesses units and support Ant Financial\u2019s ecosystem. The services provided by Ant Financial and its affiliates cover payment, wealth management, credit reporting, private bank and cloud computing.Ant Financial is experimenting with Ethereum technology to improve their global payment platforms.CrypTape & ETH FansCrypTape, founded by Jan Xie, who is the only core member of ethereum project in China, is working on ethereum protocol level optimization. Their first product CITA, written in Rust, is expected to show the highest performance ever when Ethereum is used in permissioned blockchain for enterprise use cases. Cryptape is also responsible for the Ruby-on-Rails implementation of Ethereum.ETH FansETH Fans is a the most commonly visited Ethereum website in China. Toya is the main content creator of the site. She is holding her phone showing the Chinese Gnosis WeChat group with 477 people that were speaking about the token launch on the day of the event.IMTokenIMToken is the first ethereum light wallet in China. This Dapp immediately become popular when formally released by ConsenLabs after one year\u2018s development because IMToken has designed functionality where users can purchase ether directly from exchanges in a single click, as well as participate in token launches seamlessly.Day 5\u200a\u2014\u200aGlobal Blockchain Financial SummitThe Global Blockchain Financial (Hangzhou) Summit 2017 was held in Hangzhou International Expo Center on Apirl 28.Vitalik Buterin gave his insights on why blockchain technology is disrupting the world. Many IT and blockchain companies also took part in the summit and expressed their ideas. The conference was featured with a dedicated EEA forum with more than 1000 people in attendance.This is just the opening act for the power house that China is.Xie-xie to all the wonderful friends I made,Andrew", "responses": "14"}, {"title": "How to generate your Ethereum ERC-20 compatible wallet\u00a0address.", "author_name": "Stefano Viegas", "link": "https://medium.com/swissborg/how-to-generate-your-ethereum-erc-20-compatible-wallet-address-7cc549717a6c?source=search_post", "post_date": "Jan 22, 2018", "readtime": "3 min read", "upvotes": "2.4K", "content": "How to generate your Ethereum ERC-20 compatible wallet\u00a0address.Stefano ViegasBlockedUnblockFollowFollowingJan 22, 2018In order to receive your CHSB tokens you will be asked to enter your unique wallet address in your dashboard.We recommend using MyEtherWallet but you may also use other native Ethereum wallets as long as they are ERC-20 compatible, such as Metamask, Mist or imToken.We do not recommend sending your CHSB tokens directly to your exchange as they might get lost and we will not be able to recover them.1.Go to MyEtherWallet.com and click on \u201cNew wallet\u201d.2. Enter a password you will remember.3. Click on \u201cCreate new wallet\u201d.4. Save your \u201cKeystore\u201d file onto your computer and keep it safe.5. Click on \u201cI understand. Continue\u201d.6. Print out your \u201cPrivate key\u201d or, alternatively, you can write it down on a piece of paper or save it onto a hard drive or USB stick.7. In the next step, follow instructions to unlock your wallet and see your address. You can also click \u201cSend Ether & Tokens\u201d to unlock it.8. Scroll down to find your \u201cAccount address\u201d. It\u2019s a long string of numbers and letters. This is the address you will need to copy and paste in your dashboard.9. Go to your dashboard and enter your Account address (the one you copied in step 8).10. To be able to see your CHSB tokens in MyEtherWallet, you must add the CHSB token details in the same \u201cSend Ether & Tokens\u201d page where it says, \u201cToken Balances\u201d.11. Click on \u201cAdd custom token\u201d and enter the following details:Contract address: 0xba9d4199fab4f26efe3551d490e3821486f135baToken symbol: CHSBDecimals: 812. Click \u201cSave\u201d.We will start the token distribution on January 31st 2018.You will be able to see your CHSB tokens in your MyEtherWallet account if you have completed the steps above and, if applicable, shortly after completing the KYC/AML process.If you have any questions, please use our Telegram channel or ask support.", "responses": "13"}, {"title": "How to Create your Ethereum\u00a0Wallet", "author_name": "BitNautic", "link": "https://medium.com/@bitnautic/how-to-create-your-ethereum-wallet-4b047e4c217d?source=search_post", "post_date": "Apr 30, 2018", "readtime": "4 min read", "upvotes": "236", "content": "How to Create your Ethereum\u00a0WalletNot all Ether wallets are compatible with Ethereum ERC20 protocol based token sales. To participate in any Ethereum ERC20 token sale, an individual must have possession of a compatible wallet. Here is how you can easily set one\u00a0up.BitNauticBlockedUnblockFollowFollowingApr 30, 2018A rising number of people recognize that one of the best ways to get involved in cryptocurrency is by participating in token sales. Nevertheless, one barrier that stops people from doing so is unfamiliarity with the token sale process. At a glance, funding your favorite project through a token sale might seem complicated. However, once you get there, it will be a piece of cake. This article will show you how to create an ERC20 Ether wallet, a step required to participate in most token sales issued on the Ethereum blockchain, including the Taylor token saleWhy do you need an ERC20 compatible Ethereum wallet?Most token sales are built on the Ethereum blockchain; therefore, you need to have an Ether wallet compatible with ERC20 protocol in order to participate. To ensure full control over your assets, you must use a wallet for which you have control of the private key. It is not recommended to use a third-party portfolio such as your wallet in an exchange or from a company that has custody of the resources. Having control of your own portfolio is key to appropriately controlling and moving your resources.DO NOT SEND COINS FROM ANY CRYPTOCURRENCY EXCHANGES FOR BITNAUTIC SALE TRANSACTIONS. YOU MUST USE AN ERC20 COMPATIBLE ETHEREUM WALLET. OTHERWISE, YOU WILL LOSE YOUR FUNDS.To clear the confusion, here is a list of Ethereum wallets that are compatible with our token sale requirements.Compatible walletsThese wallets have been verified to support Ethereum ERC20 tokens. The list is continuously updated at: TokenMarketMyEtherWallet (Online and local browser)MetaMask (Firefox and Chrome browser extension)Parity (Desktop)Jaxx (iPhone and Android)Incompatible walletsTo date, these Ethereum wallets are known to be incompatible with token sales. Before investing, you should move your ETH to one of the wallets mentioned above.Any Ethereum exchangeCoinbaseExodusBitrexxPoloniexKrakenBitfinexCex.ioBitstampNext, we will show you how to open a suitable Ethereum wallet that will serve your needs. For that, we will use MyEtherWallet as an example.How to open MyEtherWallet to participate in a token saleMyEtherWallet is the most convenient Ether wallet. So, it\u2019s no surprise that most people utilize it to store their tokens acquired via token sales. It is an online wallet, but it also provides offline and hardware wallet support, implying that users can generate wallet keys for a variety of Ethereum storage solutions. That makes it a great all-around solution for everyone interested in investing in a token sale.Here\u2019s how to set it all up.1. Go to\u00a0: MyEtherWalletYou will be greeted by several safety reminders and the option to create a new wallet.2. Create a password.Use a combination of letters, numbers, and symbols to make it as strong as possible. Write it down immediately, and safely back it up. Then, click \u201cCreate New Wallet.\u201d3. Download and store your keystore file.Do it for security reasons. As you know, there can never be too many safety precautions in cryptocurrency trading. Store your keystore file in a secure location and click continue.4. Save your private key.It may seem merely like a string of symbols, but your private key and its safety is of vital importance. Make sure to back it up and keep it safe. You should also print a hard copy to keep as a paper wallet. Remember, there is no way to retrieve your forgotten or lost private key and password; therefore, take all necessary safety measures suggested by the wallet provider.5. Use your private key or keystore file to open your wallet.There are many ways to unlock your wallet, but to keep it simple, let\u2019s stick with the files we just got\u200a\u2014\u200aprivate key and keystore file. Select and paste your private key or upload the keystore file to unlock your wallet.Unlock your wallet page at MyEtherWallet.com6. Congratulations, you\u2019ve just opened your fully functional Ethereum wallet.Next time you want to access it, go to: www.myetherwallet.com, click \u201cView Wallet Info\u201d in the top right corner and authorize yourself again. Within your wallet, you will find its address. This code serves to identify where transactions are coming from, and where funds must be transferred to. The principle is similar to a bank account number.All that is left now is to load your wallet up with some Ether. If you already have it, send it to your public address. MyEtherWallet also makes it easy to buy Ether via Coinbase.To know more visit: BitNauticFollow BitNautic news on:InstagramFacebookTwitterLinkedinRedditJoin our Telegram:BitNautic official Telegram channel: ChannelBitNautic official #Telegram chat: GroupAll credit goes to @SmartTaylorApp", "responses": "3"}, {"title": "How to Scale Ethereum: Sharding Explained", "author_name": "Raul Jordan", "link": "https://medium.com/prysmatic-labs/how-to-scale-ethereum-sharding-explained-ba2e283b7fce?source=search_post", "post_date": "Jan 10, 2018", "readtime": "8 min read", "upvotes": "2K", "content": "How to Scale Ethereum: Sharding ExplainedRaul JordanBlockedUnblockFollowFollowingJan 10, 2018UPDATED to reflect the latest research changes for Ethereum 2.0!The scalability debate is at the front and center of the crypto community. With major occurrences such as the Cryptokitties debacle clogging up the entire Ethereum network over the span of a few days, it is well-known that the biggest, public blockchains in their current state do not scale.So what are the approaches the community has decided to take? The solution is two-fold. The first approach is to improve scaling through off-chain solutions, also known as layer-2 scaling, where some transactions are handled off the blockchain and only interact with it sparingly. The other approach is to modify the design of the protocol altogether to fix the fundamental problems with parallelizability the blockchain faces. Unfortunately, many of us protocol devs often look at these problems and instantly feel put off by the immense difficulty they pose.Although we\u2019re still in the early stages of Ethereum, the community is filled with some of the smartest minds in tech, with so many innovations happening at breakneck speed. It\u2019s easy to feel that there are smarter devs out there that are probably way more qualified to tackle monumental problems such as scalability, but this feeling is what\u2019s holding us back. Truth is, the community is willing and ready to help anyone who wants to get involved, and yes that includes YOU! This post will break down the current approach the Ethereum core team is taking towards sharding and expose its current limitations and paths for improvement. By the end of this post, you\u2019ll know enough to explore this problem on your own and who knows, maybe you\u2019ll be the one to build the first sharding client!As the number of transactions on Ethereum keeps going up and up, we have no time to lose. Let\u2019s get started.What is Sharding?Currently, every single node running the Ethereum network has to process every single transaction that goes through the network. This gives the blockchain a high amount of security because of how much validation goes into each block, but at the same time it means that an entire blockchain is only as fast as its individual nodes and not the sum of their parts. Currently, transactions on the EVM are not parallelizable, and every transaction is executed in sequence globally. The scalability problem then has to do with the idea that a blockchain can have at most 2 of these 3 properties:DecentralizationScalabiltitySecurityIf we have scalability and security, it would mean that our blockchain is centralized and that would allow it to have a faster throughput. Right not, Ethereum is decentralized and secure.How can we break this trilemma to include scalability in the current model? Well can\u2019t we just increase the block size, or in Ethereum\u2019s case, the GAS_LIMIT, to increase throughput? While in theory this can be a right approach, the more we keep increasing it, the more mining will be centralized around nodes running on supercomputers that would bring a higher barrier to entry into the system.A smarter approach is the idea of blockchain sharding, where we split the entire state of the network into a bunch of partitions called shards that contain their own independent piece of state and transaction history. In this system, certain nodes would process transactions only for certain shards, allowing the throughput of transactions processed in total across all shards to be much higher than having a single shard do all the work as the mainchain does now.Before we dive into how a sharded blockchain actually works, let\u2019s go over some important vocabulary:State: the entire set of information that describes a system at any point in time. In Ethereum, this is the current account set containing current balances, smart contract code, and nonces at a given moment. Each transaction alters this state into an entirely new state.Transaction: an operation issued by a user that changes the state of a systemMerkle Tree: a data structure that can store a large amount of data via cryptographic hashes. Merkle trees make it easy to check whether a piece of data is part of the structure in a very short amount of time and computational effort.Receipt: a side-effect of a transaction that is not stored in the state of the system, but is kept in a Merkle tree so that its existence can be easily verified to a node. Smart contracts logs in Ethereum are kept as receipts in Merkle Trees, for example.With this in mind, let\u2019s take a look at how Ethereum 2.0 would work. We will create a sidechain known as a random beacon chain that stores hashes to main chain blocks in its own blocks. This sidechain will be a full Proof of Stake system implementing Casper FFG and will provide a source of distributed randomness that will allow us to build a sharding system on top of it.The problems with sharded blockchains become more apparent once we consider that possible attacks on the network. A major problem is the idea of a Single-Shard Takeover Attack, where an attacker takes over the majority of collators in a single shard to create a malicious shard that can submit invalid collations. How do we solve this problem?Credits Hsiao-Wei WangThe Ethereum Wiki\u2019s Sharding FAQ suggests random sampling of validators on each shard. The goal is so these validators will not know which shard they will get in advance. Every shard will get assigned a bunch of validators and the ones that will actually be validating will be randomly sampled from that set.To begin, we will deploy a contract on the main chain called the Validator Registration Contract, where people will burn 32ETH in exchange for becoming a validator in this sidechain. The beacon chain will periodically check for registered validators and consequently queue up those that have burned ETH into the contract. This beacon chain will serve as a coordination device for a sharding system, as it will allow for distributed pseudorandomness that will be critical for selecting committees of validators on shards. The source of randomness needs to be common to ensure that this sampling is entirely compulsory and can\u2019t be gamed by the validators in question.On each shard, we would have nodes called proposers that would be tasked with creating a cross-link on the beacon chain, which is a specific structure that encompasses important information about the shard in question.These cross-links are like mini-descriptions of the state and the transactions on a certain shard. A typical cross-link would tell us the following information:Information about what shard the collation corresponds to (let\u2019s say shard 10)Information about the current state of the shard before all transactions are appliedInformation about what the state of the shard will be after all transactions are appliedSignatures from at least 2/3 of all collators on the shard affirming shard blocks were legitimateWhat about if a transaction happens across shards? For example, what if I send money from an address that is in shard 1 to an address in shard 10? One of the most important parts of this system is the ability to communicate across shards, otherwise we have accomplished nothing new.An initial idea is use the concept of receipts for this system to work.Raul (Address on Shard 1) Wants to Send 100 ETH to Jim (Address on Shard 10)A transaction is sent to Shard 1 that reduces Raul\u2019s balance by 100 ETH and the system waits for the transaction to finalizeA receipt is then created for the transaction that is not stored in the state but in a Merkle root that can be easily verifiedA transaction is sent to Shard 10 including the Merkle receipt as data. Shard 10 checks if this receipt has not been spent yetShard 10 processes the transaction and increases the balance of Jim by 100 ETH. It then also saves the fact that the receipt from Shard 1 has been spentShard 10 creates a new receipt that can then be used in subsequent transactionsThis Sounds So Complex for Solidity Devs and Ethereum Users to Understand! How Will We Educate Them on Sharding?They don\u2019t need to. Sharding will exist exclusively at the protocol layer and will not be exposed to developers. The Ethereum state system will continue to look as it currently does, but the protocol will have a built-in system that creates shards, balances state across shards, gets rid of shards that are too small, and more. This will all be done behind the scenes, allowing devs to continue their current workflow on Ethereum.Beyond Scaling: Super-Quadratic Sharding and Incredible Speed GainsTo go above and beyond, it is possible that Ethereum will adopt a super-quadratic sharding scheme (which in simple English means a system built from shards of shards). Such complexity is hard to imagine at this point but the potential for scalability would be massive. Additionally, a super-quadratically-sharded blockchain will offer tremendous benefits to users, decreasing transaction fees to negligible quantities and serving as a more general purpose infrastructure for a variety of new applications.Resources and Where to Get StartedOk so now you want to start coding a sharded blockchain! How do you begin? At the most basic level, the proposed initial implementation will not work through a hard fork, but rather a sidechain known as a random beacon chain that will serve as a proof of stake + sharding system.This beacon chain will manage validators and their sampling from a global validator set and will take responsibility for the global reconciliation of all shard states. Vitalik has outlined a fantastic reference doc for implementing sharding here: https://ethresear.ch/t/convenience-link-to-full-casper-chain-v2-spec/2332/4To get explore this beacon chain architecture in detail and to learn more about how the system works, check out the following resources:Sharding FAQ: https://github.com/ethereum/wiki/wiki/Sharding-FAQSharding in Go: https://github.com/prysmaticlabs/geth-shardingBeacon Chain Research Synopsis: https://docs.google.com/document/d/19KyosgCFdsv_UzVdaApmIr0zh37Va0Tck1cca5uEtss/edit#Wanna Join My Team?Are you familiar with the inner workings of the Ethereum protocol? Are you a golang developer? Do you want to work with me and a team of developers building the first sharding client for Ethereum 2.0? Check out Prysmatic Labs, a team funded by the Ethereum Foundation to implement sharding.Check out our contributing guidelines and our open projects on Github. Each task and issue is grouped into the Phase 1 milestone along with a specific project it belongs to (beacon chain, validator node tasks, etc.).As always, follow us on Twitter, drop us a line here or on our Gitter chat and let us know what you want to help with\u200a\u2014\u200awe need all the collaboration we can get", "responses": "15"}, {"title": "The State of Ethereum Scaling, March\u00a02018", "author_name": "Georgios Konstantopoulos", "link": "https://medium.com/loom-network/the-state-of-ethereum-scaling-march-2018-74ac08198a36?source=search_post", "post_date": "Mar 27, 2018", "readtime": "12 min read", "upvotes": "2.3K", "content": "The State of Ethereum Scaling, March\u00a02018Highlights from EthCC on Plasma Cash, Minimum Viable Plasma, and\u00a0More\u2026Georgios KonstantopoulosBlockedUnblockFollowFollowingMar 27, 2018From the 8th to the 10th of March 2018, Paris got flooded with Ethereum professionals, researchers, investors and enthusiasts from all over the world for the Ethereum Community Conference (EthCC).EthCC is organized by Asseth which is a French non-profit organization that has been promoting and sharing knowledge on Ethereum and its ecosystem since early 2016.In total, more than 800 people attended (hint: me\u00a0too!).The metrics during the final talk on \u201cScaling\u00a0EthCC\u201dOver 100 talks were given over the 3 days of the conference, on topics ranging from Governance, Security, and Privacy to DApp development, Gaming, and Decentralized Exchanges. You can find most of the talks in the following spreadsheet.Describing each talk is out of scope of this article. So since our focus at Loom Network is on scalability, in this article we\u2019ll focus on covering the scalability talks of EthCC.", "responses": "10"}, {"title": "First official registration of a Zug citizen on\u00a0Ethereum", "author_name": "uPort", "link": "https://medium.com/uport/first-official-registration-of-a-zug-citizen-on-ethereum-3554b5c2c238?source=search_post", "post_date": "Nov 15, 2017", "readtime": "3 min read", "upvotes": "1.7K", "content": "First official registration of a Zug citizen on\u00a0EthereumOn November 15, 2017, the first digital Zug ID will officially be registered on the Ethereum blockchain in front of a live press audience.uPortBlockedUnblockFollowFollowingNov 15, 2017Over the summer we announced our partnership with the city of Zug, as we launched a pilot program to register residents\u2019 IDs on the blockchain to unlock access to government eServices like online voting and proof of residency.\u00a0\u00a0Since June, we have been improving the Uport platform and working with our Swiss partners at ti&m to prepare the city for an official launch. This launch is today. This major milestone demonstrates the power of Ethereum such that a city government can issue to its citizens a digital verification of their citizenship.Not only does digital citizenship enable more trust between citizens and government agencies, but it also opens up new and significant opportunities for improved digital interactions between people and governments. For Zug, there are plans to offer an e-Voting initiative in Spring 2018. These are very exciting times.", "responses": "10"}, {"title": "Plasma on Loom Network DAppChains: Scalable DApps With Ethereum-Secured Assets", "author_name": "Matthew Campbell", "link": "https://medium.com/loom-network/loom-network-plasma-5e86caaadef2?source=search_post", "post_date": "Apr 12, 2018", "readtime": "5 min read", "upvotes": "3.2K", "content": "Plasma on Loom Network DAppChains: Scalable DApps With Ethereum-Secured AssetsMatthew CampbellBlockedUnblockFollowFollowingApr 12, 2018Update:We released our Plasma Cash implementation in June 2018. Check out the release announcement here.Articles in this\u00a0series:Plasma on Loom Network DAppChains: Scalable DApps With Ethereum-Secured Assets \ud83d\udc48Practical Plasma (Volume I): GamingPlasma Cash Initial Release\u200a\u2014\u200aPlasma-Backed NFTs Now Available on Loom Network Sidechains", "responses": "4"}, {"title": "Full Stack Hello World Voting Ethereum Dapp Tutorial\u200a\u2014\u200aPart\u00a03", "author_name": "Mahesh Murthy", "link": "https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-3-331c2712c9df?source=search_post", "post_date": "Feb 14, 2017", "readtime": "5 min read", "upvotes": "1.5K", "content": "Full Stack Hello World Voting Ethereum Dapp Tutorial\u200a\u2014\u200aPart\u00a03Mahesh MurthyBlockedUnblockFollowFollowingFeb 14, 2017[Tutorial was last updated in January 2018]This is part 3 of 3 part series of tutorials. You can access Part 1 and Part 2 here.In Part 1, we built a simple voting dapp and got it working on our local machine. In Part 2, we moved our app to use truffle framework and deployed it to the public Ropsten testnet and interacted with it through the truffle console and through a webpage. In this tutorial, we will add few more features to our voting dapp in order to learn a few key concepts. Here is what you will learn in this tutorial:Learn to use new data types like struct to organize and store data on the blockchain.Learn the concept of tokens and its usage.Learn to make payments using Ether, the currency of the Ethereum blockchain platform.You can find all the code in chapter3 directory in this repository: https://github.com/maheshmurthy/ethereum_voting_dappAs you may know, in a general election, every citizen gets to cast one vote for their favorite candidate. However there are elections like electing a board of directors of a company where you are a shareholder, you get to vote based on the number of shares you own in that company. So, the more shares you own, the more votes you get.Let\u2019s enhance our voting dapp to support this type of election. We will add functionality for anyone to purchase shares in the company. They can then use those shares to vote for the candidates. We will also add a feature to lookup voter information. In the Ethereum blockchain world, these shares are more commonly referred to as tokens. We will refer to these shares as tokens in the rest of this tutorial.If you want to skip all the explanation and want to just see the contract file, you can find it here: https://github.com/maheshmurthy/ethereum_voting_dapp/blob/master/chapter3/contracts/Voting.sol.The first step is to declare the variables we need to store all the information we are interested in. Below are the contract variables with explanation.In tutorial 1 and tutorial 2, we initialized the list of candidates contesting in a constructor. Remember that the constructor is invoked just once when the contract is deployed on the blockchain. Here, we also have to initialize the contract with total number of tokens available for sale and the cost of each token. So, we update our contract constructor like below:/* When the contract is deployed on the blockchain, we will  initialize the total number of tokens for sale, cost per token and all the candidates */  function Voting(uint tokens, uint pricePerToken, bytes32[] candidateNames) public {    candidateList = candidateNames;    totalTokens = tokens;    balanceTokens = tokens;    tokenPrice = pricePerToken;  }In truffle, you deploy your code on to the blockchain using migrations. You can take a peek at a migration file here. An example deploy call in truffle migration file looks like this:deployer.deploy(Voting, 1000, web3.toWei('0.1', 'ether'), ['Rama', 'Nick', 'Jose']);// 1000 is the total number of tokens for sale and the price of each token is set to 0.1 ether.// We will revisit this section again later in this tutorial.Now that we have initialized the tokens and set the price, let\u2019s see how someone could purchase these tokens by paying ether. Here is the function to buy tokens./* This function is used to purchase the tokens. Note the keyword  'payable' below. By just adding that one keyword to a function,  your contract can now accept Ether from anyone who calls this  function. Accepting money can not get any easier than this! */function buy() payable public returns (uint) {    uint tokensToBuy = msg.value / tokenPrice;    if (tokensToBuy > balanceTokens) throw;    voterInfo[msg.sender].voterAddress = msg.sender;    voterInfo[msg.sender].tokensBought += tokensToBuy;    balanceTokens -= tokensToBuy;    return tokensToBuy;}An example purchase call looks like this:truffle(development)> Voting.deployed().then(function(contract) {contract.buy({value: web3.toWei('1', 'ether'), from: web3.eth.accounts[1]})})The value: web3.toWei(\u20181\u2019, \u2018ether\u2019) argument is accessed in the buy() function using msg.value and msg.sender gives us the account address of web3.eth.accounts[1]. Assuming the value of each token to be 0.1 Ether, the web3.eth.accounts[1] will receive 1 Ether/0.1 Ether = 10 tokens.Let\u2019s take a break from looking at the code for a moment and visualize the interaction between accounts (voters) and the contract.As you can see in the contract file on github, the rest of the new methods in the contract are mostly getters and should be easy to follow along.The index.html file has some new updates:To vote for a candidate, you now have to specify the no. of tokens you want to vote with.There is a new section where you can purchase tokens.You can now look up voter information\u200a\u2014\u200ahow many tokens they own and no. of votes they have cast to each candidate.The candidates are not hardcoded anymore. We fetch the candidates from the blockchain and populate it.The app.js file has the updates to support all the UI functionality above.Update the deployment file 2_deploy_contracts.js to pass in total tokens and token price along with candidate names.var Voting = artifacts.require(\"./Voting.sol\");module.exports = function(deployer) {  deployer.deploy(Voting, 1000, web3.toWei('0.1', 'ether'), ['Rama', 'Nick', 'Jose']);};To summarize, the four files we have updated in this tutorial are Voting.sol, index.html, app.js and 2_deploy_contracts.js. Once you have updated your truffle repository with these files, we can deploy the contract to the blockchain. The deploy process is exactly the same as the previous tutorial.You just have to compile and migrate using truffle command.maheshmurthy|~/dev/ethereum_voting_dapp/chapter3$ truffle migrateUsing network 'development'.Compiling Migrations.sol...Compiling Voting.sol...Writing artifacts to ./build/contractsRunning migration: 1_initial_migration.jsDeploying Migrations...Migrations: 0xc9249947010675b8a3b1defb12334148f7f59010Saving successful migration to network...Saving artifacts...Running migration: 2_deploy_contracts.jsDeploying Voting...Voting: 0x795d6d1f7cf467f27e48181da5f1ebd5bbd0a8dfSaving successful migration to network...Saving artifacts...If you are able to successfully deploy the contract and start your web server, your page will look like below:As you can see in the screenshot above, you will be able to purchase tokens, vote for candidates using the tokens and lookup voter information by their address. If you are able to get all these features working, congratulations!I hope this series of tutorials has given you an idea of what Ethereum is, its capabilities, and how to build decentralized applications. If you run into issues getting the application working (github repo), feel free to DM me on twitter @zastrinlab.You now know just enough Ethereum to be dangerous\u00a0:)If you want an even more challenging project, I created a course to build a decentralized eBay on Ethereum & IPFS.If you would like to get notified when I write more tutorials, you can subscribe here.Thanks Raine Rupert Revere and Evan Van Ness for all the feedback.", "responses": "25"}, {"title": "ERC-20 and Voltron: The 4 limbs that will make Ethereum live forever (and make your pockets\u00a0fatter)", "author_name": "Robert Ussery III", "link": "https://hackernoon.com/erc-20-and-voltron-the-4-limbs-that-will-make-ethereum-live-forever-and-make-your-pockets-fatter-699a19b65c7a?source=search_post", "post_date": "Jan 21, 2018", "readtime": "8 min read", "upvotes": "2.8K", "content": "ERC-20 and Voltron: The 4 limbs that will make Ethereum live forever (and make your pockets\u00a0fatter)Robert Ussery IIIBlockedUnblockFollowFollowingJan 21, 2018You guys remember Voltron, right?Let\u2019s skip to the point, Ethereum and every other ERC-20 token is neither sufficient nor sustainable. You already know that Ethereum is the most widely used digital asset on the market today, powering digital art, ICO\u2019s, cat games, gambling, and anything else that might have been cooked up from underneath your local high school\u2019s bleachers. This isn\u2019t a bad thing. In this article we\u2019re going to take a look at 4 problems with ERC-20 tokens (such as Ethereum) and the assets that, if successful, will make you handsomely wealthy.", "responses": "8"}, {"title": "Ethereum 2.0 Serenity could have a Happy Holiday\u00a0Season", "author_name": "Michael K. Spencer", "link": "https://medium.com/utopiapress/ethereum-2-0-serenity-could-have-a-good-holidays-156544845d98?source=search_post", "post_date": "Nov 7, 2018", "readtime": "3 min read", "upvotes": "2.1K", "content": "Serenity is poised for more testing, as the countdown to Ethereum 2.0 continues.Ethereum 2.0 Serenity could have a Happy Holiday\u00a0SeasonMichael K. SpencerBlockedUnblockFollowFollowingNov 7, 2018Ether could have a serene Christmas? You don\u2019t say! Let\u2019s not forget that on January 9th, 2017 Ether was worth $1,305.58. Today, it\u2019s worth $220.45. However if we are to believe Vitalik Buterin, proof of stake could be closer than we think.Speaking at a conference in Prague, Buterin outlined the path to Ethereum 2.0, which he now calls Serenity, that is designed to solve Ethereum\u2019s scalability issues. You can literally watch it here.Ethereum SerenityCasper and transition to proof of stakeScalability improvements via a process known as shardingProtocol enhancementsCoinTelegraphDubbed \u201cEthereum 2.0\u201d, it\u2019s under pressure to manifest its updates faster as the race to public blockchain scalability will become more intense in 2019 and 2020.Ethereum founder Vitalik Buterin has basically signaled a switch to so-called proof-of-stake is \u201cno longer so far away.\u201d We don\u2019t know if this amounts to PR or actual evidence of progress.However there\u2019s been a lot of press about Bitcoin\u2019s energy consumption of late and either way you look at it, in a PoS system, the energy cost of mining is far lower than it is in a PoW system, making Ethereum more adaptable to the future.Even if Bitcoin\u2019s price remains stable for the course during the Holidays, Ethereum\u2019s price could have an upswing. One reason is a more active Ethereum Futures product.U.S. bank JP Morgan Chase revealed it had created an enterprise version of the Ethereum blockchain. J.P Morgan Chase is of late behaving like a technology company and endorsing Ethereum.The Quorum ecosystem is an enterprise version of Ethereum that has been designed to run any application that requires high computational speeds as well as large throughput processing power. It\u2019s also getting increased backing, including from J.P. Morgan Chase. It amounts to Umar Farooq, Head of JPs Blockchain Initiatives, being apparently bullish on Quorums\u2019 use of tokenizing gold bars in the custody of various financial institutions. Sounds pretty Serene!If JP Morgan states that cryptocurrencies are here to stay, it\u2019s another layer of confidence for the digital asset market. With Bakkt and Fidelity Digital Asset Services on the way, Ethereum will be even more front and center.Jamie Dimon might not own BTC, but that hardly matters. Serenity is what it is and blockchain both centralized and public are becoming a bigger part of our lives each month, each year. Ethereum 2.0 \u201cSerenity\u201d is a 1000x scalability promise. Their ability to deliver it will decide the fate of Ethereum. Already it\u2019s one of the major contributors to GitHub and is attracting a steady stream of the world\u2019s most talented software engineers due to the incredible demand for blockchain engineers.Crypto is a bit like Cannabis, total legalization is inevitable and digital assets could be a bit part in the future economy that\u2019s destined to have a cryptoeconomics aspect. It\u2019s hard not to be bullish about Ethereum\u2019s chances of being a big part of this.", "responses": "6"}, {"title": "Never Use Passwords Again with Ethereum and\u00a0Metamask", "author_name": "Alex Miller", "link": "https://hackernoon.com/never-use-passwords-again-with-ethereum-and-metamask-b61c7e409f0d?source=search_post", "post_date": "Mar 23, 2017", "readtime": "6 min read", "upvotes": "714", "content": "Never Use Passwords Again with Ethereum and\u00a0MetamaskAlex MillerBlockedUnblockFollowFollowingMar 23, 2017I build a lot of proofs of concept at ConsenSys for various clients and usually they want something that leverages the Ethereum blockchain to solve some business use case. Strangely, these systems often get designed with standard web logins (i.e. with a username and password).I always ask myself why I\u2019m designing things this way since, after all, this is an annoying aspect of every web application that Ethereum can solve today.So I\u2019m finally putting my foot down and designing that solution.JSON Web\u00a0TokensOne very popular way to log into a standard web system (and/or use its API) is to submit a password (which is hashed client side) to an authentication endpoint and receive a token in return. This is (usually) called a JSON Web Token and is typically valid for some finite period of time (minutes to days). Here is a nice tutorial on a standard implementation.JSON Web Tokens are nice and dandy, but I got to thinking that it\u2019s very easy to authenticate yourself on the blockchain. In fact, when you use Ethereum, you are constantly doing it.If you think of an Ethereum address (which is just a sha3 hash of your public key) as an account on a website, it is very easy to prove you own that account by signing a piece of data with your private key. This data is arbitrary and can be any random string that the website\u2019s API serves up. Thus, we can use an address as a username and bypass the need for a password. In fact, we don\u2019t even need to use the blockchain to do this.Here\u2019s what it looks like using Express:First we need to do an elliptic curve signature with a private key:var ethUtil = require(\u2018ethereumjs-util\u2019);  // >=5.1.1var data = \u2018i am a string\u2019;// Elliptic curve signature must be done on the Keccak256 Sha3 hash of a piece of data.var message = ethUtil.toBuffer(data);    var msgHash = ethUtil.hashPersonalMessage(message);    var sig = ethUtil.ecsign(msgHash, privateKey);    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))    return serializedDon\u2019t worry too much about what these parameters are yet. There is some cryptography going on here and I encourage you to read up on elliptic curve signatures. The Bitcoin wiki is a decent place to start.Anyway, once we have our signature components, we can package them along with the user\u2019s address and send it all to an authentication endpoint.POST /Authenticatevar jwt = require(\u2018jsonwebtoken\u2019);var ethUtil = require('ethereumjs-util');function checkSig(req, res) {  var sig = req.sig;  var owner = req.owner;  // Same data as before  var data = \u2018i am a string\u2019;  var message = ethUtil.toBuffer(data)  var msgHash = ethUtil.hashPersonalMessage(message)  // Get the address of whoever signed this message    var signature = ethUtil.toBuffer(sig)  var sigParams = ethUtil.fromRpcSig(signature)  var publicKey = ethUtil.ecrecover(msgHash, sigParams.v, sigParams.r, sigParams.s)  var sender = ethUtil.publicToAddress(publicKey)  var addr = ethUtil.bufferToHex(sender)   // Determine if it is the same address as 'owner'   var match = false;  if (addr == owner) { match = true; }  if (match) {    // If the signature matches the owner supplied, create a    // JSON web token for the owner that expires in 24 hours.    var token = jwt.sign({user: req.body.addr}, \u2018i am another string\u2019,  { expiresIn: \u201c1d\u201d });    res.send(200, { success: 1, token: token })  } else {    // If the signature doesn\u2019t match, error out    res.send(500, { err: \u2018Signature did not match.\u2019});  }}So basically, given some piece of data, an address, and the components of an EC signature, we can cryptographically prove that the address belongs to the person who signed the data. Pretty cool, huh?Once we are satisfied the signature and address match, we can sign a JSON Web Token for that address server side. In this case, the token is valid for 1 day.Now we just need to put in some middleware to guard any routes that would be serving or modifying protected information.middleware/auth.jsfunction auth(req, res, next) {  jwt.verify(req.body.token, \u2018i am another string\u2019, function(err, decoded) {    if (err) { res.send(500, { error: \u2018Failed to authenticate token.\u2019}); }    else {      req.user = decoded.user;      next();    };  });}app.js// Routesapp.post(\u2018/UpdateData\u2019, auth, Routes.UpdateData);\u2026If the provided token corresponds to the user who sent the request, we continue to requested route. Note that the middleware modifies the request. It is this new `user` parameter that we need to reference because we know it got set in our middleware.POST /UpdateDatafunction UpdateData(req, res) {  // Only use the user that was set in req by auth middleware!  var user = req.user;  updateYourData(user, req.body.data);  ...}And there we have it! Your user has literally signed in, but didn\u2019t need a password.UI stuffBut how does a user actually sign this data in the browser? Metamask to the rescue! Metamask is a neat chrome extension that injects web3 into your browser window.mycomponent.jsxmakeSig(dispatch) {  function toHex(s) {   var hex = \u2018\u2019;   for(var i=0;i<s.length;i++) { hex += \u2018\u2019+s.charCodeAt(i).toString(16); }   return `0x${hex}`; }  var data = toHex(\u2018i am a string\u2019); web3.currentProvider.sendAsync({ id: 1, method: 'personal_sign', params: [web3.eth.accounts[0], data] },   function(err, result) {     let sig = result.result;     dispatch(exchange.authenticate(sig, user))    })  }}render(){  let { dispatch, _main: { sig } } = this.props;  if (Object.keys(sig).length == 0) { this.makeSig(dispatch); }  return (   <p>I am a webpage</p>  );}This will trigger Metamask to pop up a window asking the user to sign the message:Once the callback is invoked, it will call the following action:authenticate(sig, user) {  return (dispatch) => {    fetch(`${this.api}/Authenticate`, {      method: 'POST',      body: JSON.stringify({ owner: user, sig: sig}),      headers: { \"Content-Type\": \"application/json\" }    })    .then((res) => { return res.text(); })    .then((body) => {      var token = JSON.parse(body).token;      dispatch({ type: 'SET_AUTH_TOKEN', result: token})    })  }}And once you have the auth token saved in your reducer, you can call your authenticated endpoints. And there we have it!Note that v, r, and s values must be recovered from the signature. Metamask has a signature util module that shows how the signature is constructed. It can be deconstructed like this:var solidity_sha3 = require('solidity-sha3').default;let hash = solidity_sha3(data);let sig = result.result.substr(2, result.result.length);let r = sig.substr(0, 64);let s = sig.substr(64, 64);let v = parseInt(sig.substr(128, 2));where r will be parsed as either 0 or 1. Note also that this uses the solidity-sha3 module to make sure this hashing algorithm is the same one being used as solidity\u2019s native hashing method (we are hashing the hex-string that was signed earlier).Production readyI can\u2019t emphasize enough that every web application using JSON web tokens could easily take advantage of this today. Any user with a Metamask extension could simply bypass the login screen with arguably better security than whatever you\u2019re currently using to manage logins. This means fewer forgotten passwords, less wasted time, and a happier user base.And, you know, if you want your users to pay each other (or you, or users on on any other system that uses this) without an intermediary or if you want to take advantage of Ethereum\u2019s million other features, this sets you up to do that too.Make the switch today. Join us Ethereum folk and conquer the world.\u2014\u200a\u2014\u200a\u2014 \u2014The views expressed by the author above do not necessarily represent the views of Consensus Systems LLC DBA Consensys. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website. And if you liked this piece, sign up here for our weekly newsletter.Hacker Noon is how hackers start their afternoons. We\u2019re a part of the @AMI family. We are now accepting submissions and happy to discuss advertising & sponsorship opportunities.If you enjoyed this story, we recommend reading our latest tech stories and trending tech stories. Until next time, don\u2019t take the realities of the world for granted!", "responses": "10"}, {"title": "The Easiest Way to Create an Ethereum\u00a0Wallet", "author_name": "BitNautic", "link": "https://medium.com/@bitnautic/the-easiest-way-to-create-an-ethereum-wallet-8f9a7ee2a807?source=search_post", "post_date": "May 7, 2018", "readtime": "2 min read", "upvotes": "316", "content": "The Easiest Way to Create an Ethereum\u00a0WalletBitNauticBlockedUnblockFollowFollowingMay 7, 2018How to Create an Ethereum Wallet with\u00a0MetaMaskIn this tutorial we are going to show you the fastest and easiest way to get started in cryptocurrency trading by creating your very first Ethereum Wallet.The best way is to create one is by using MetaMask, an incredibly powerful and easy to use browser extension, compatible with all the most used browsers.First of all you have to install the extension/addon at one of the following links, depending on which browser you are using.ChromeFirefoxOperaIn this example we\u2019re going to use Chrome. First click on the \u201cAdd to Chrome\u201d button.Now click \u201cAdd extension\u201dIn the top-right corner of your browser you should now see the MetaMask fox logo. Click on it.The extension will ask you for a password. Choose an effective password and click on Create.Now you will be given a set of random words that will allow you to recover your account should you lose the password. Save them as a file or write them down and store them safely.And\u2026 It\u2019s Done! Now you can copy your ethereum wallet address and use it to buy Ether or Tokens!Thank you all for the support!To know more visit: BitNauticFollow BitNautic news on:InstagramFacebookTwitterLinkedinRedditJoin our Telegram:BitNautic official Telegram channel: ChannelBitNautic official #Telegram chat: Group", "responses": "3"}, {"title": "Coinbase Pro announces support for trading bitcoin, ethereum and other cryptocurrencies using British Pounds\u00a0(GBP)", "author_name": "David Farmer", "link": "https://blog.coinbase.com/coinbase-pro-announces-support-for-trading-bitcoin-ethereum-and-other-cryptocurrencies-using-2a8b82c4d19b?source=search_post", "post_date": "Sep 5, 2018", "readtime": "2 min read", "upvotes": "1.5K", "content": "Coinbase Pro announces support for trading bitcoin, ethereum and other cryptocurrencies using British Pounds\u00a0(GBP)David FarmerBlockedUnblockFollowFollowingSep 5, 2018Following our announcement earlier this month that we would be introducing support for British pounds (GBP) to our UK-based customers, today we\u2019re launching a number of new GBP trading pairs starting at 9am BST, Friday 7 September 2018.With support for UK domestic bank transfers in GBP via the Faster Payments Scheme, it is now significantly easier, faster and cheaper for UK customers to trade cryptocurrencies on the Coinbase platform. Coinbase Pro is the only major digital currency trading platform that supports UK Faster Payments and it\u2019s our goal to be the trading platform of choice for UK crypto traders. In advance of the launch of the new trading pairs, all UK customers now have access to send GBP to their Coinbase accounts via domestic bank transfer.The new pairs that we are launching are: ETH\u2013GBP, ETC\u2013GBP, LTC\u2013GBP and BCH\u2013GBP. Coinbase Pro already supports BTC\u2013GBP. The detailed launch process and timings are outlined below.The Stages of the GBP trading pairs\u00a0launchAs outlined below, there will be three stages to the launch. We will follow each of these stages independently for each new order book: ETH\u2013GBP, ETC\u2013GBP, LTC\u2013GBP, BCH\u2013GBP. Each phase will be announced in real time via Coinbase Pro\u2019s Twitter.If at any point one of the new order books does not meet our assessment for a healthy and orderly market, we may keep the book in one stage (as identified below) for a longer period of time, or suspend trading as per our Trading Rules.Post-only. In the first stage, customers can post limit orders but there will be no matches (completed orders). Order books will be in post-only mode for a minimum of 10 minutes.Limit-only. In the second stage, limit orders will start matching but customers are unable to submit market orders. Order books will be in limit-only mode for a minimum of 10 minutes.Full trading. In the final stage, full trading services will be available, including limit, market, and stop orders.", "responses": "18"}, {"title": "Ethereum, FOMO3D, and Dangerous Game\u00a0Theory", "author_name": "Matt Stephenson", "link": "https://hackernoon.com/fomo3d-and-dangerous-game-theory-97bd5f47ab3b?source=search_post", "post_date": "Jul 23, 2018", "readtime": "8 min read", "upvotes": "2.1K", "content": "Ethereum, FOMO3D, and Dangerous Game\u00a0TheoryMatt StephensonBlockedUnblockFollowFollowingJul 23, 2018Edit: It appears that the code for the Fomo-3D game is not fully verified as of 8/2. Check this article for details.FOMO3D is a blockchain game that currently has $12 million in ETH at stake, with all of it locked up in a very bizarre-looking set of rules. But upon closer inspection, the rules aren\u2019t so strange. In fact, it turns out to resemble a scaled-up version of a classic game in behavioral game theory. They teach it at Harvard Business School.This game, underlying FOMO3D (F3D), is called \u201cThe War of Attrition\u201d and it can produce some insanely irrational outcomes. Fortunately, variants of the War of Attrition have been extensively studied by economists and evolutionary biologists. Here are some core findings:\u201cWinning\u201d pays $0 in expectation.Human beings tend to play terribly and lose.Part two of this article gets a little more technical about how smart contracts can solve War of Attrition games. But let\u2019s describe it here using the first lesson you get in a Harvard Business School professor\u2019s negotiations class (the game was invented by Martin Shubick.)At HBS, professor Max Bazerman auctions off a normal $20 to the highest bidder, but with one catch: the second-place bidder has to pay too. Consider what you would do in this situation. Max waves a $20 bill, and offers it for sale starting at the low price of $1. Would you bid? Take a second and think about it.Credit: Vitaly Taranov on\u00a0UnsplashDid you bid? Of course you did! Who wouldn\u2019t pay $1 to get $20? So we all bid, and we follow the same logic next round\u200a\u2014\u200aafter all, who wouldn\u2019t pay $2 to get $20?But eventually something funny happens: \u201cWho wouldn\u2019t pay $2 to get $20?\u201d gets bid up until it becomes \u201cwho wouldn\u2019t pay $19 dollars to get $20?\u201d. Which then, of course, becomes \u201cwho wouldn\u2019t pay $20 dollars to get $20?\u201d. And this is where you can really feel the force of the \u201csecond bidder pays too\u201d issue.Let\u2019s say you\u2019ve bid $19. If the auction stops now, you\u2019ll get the $20 and make $1. But let\u2019s not forget about Competitive Carl, the second highest bidder. Carl bid $18 right before you bid, and so if the auction ends now he has to pay anyway. For Carl, the choice is to bid for a chance to break even or simply choose to lose $18.So Carl bids.The high bid is now $20It\u2019s your turn.Do you bid $21 for a $20 bill in this situation?", "responses": "18"}, {"title": "The $280M Ethereum\u2019s Parity\u00a0bug.", "author_name": "Matt Suiche", "link": "https://blog.comae.io/the-280m-ethereums-bug-f28e5de43513?source=search_post", "post_date": "Nov 7, 2017", "readtime": "3 min read", "upvotes": "1.3K", "content": "The $280M Ethereum\u2019s Parity\u00a0bug.A critical security vulnerability in Parity multi-sig wallet got triggered on 6th November\u200a\u2014\u200aparalyzing wallets created after the 20th\u00a0July.Matt SuicheBlockedUnblockFollowFollowingNov 7, 2017As you may have read, Parity issued a security advisory today to inform its users and developers about a bug that got \u201caccidentally\u201d triggered which resulted in freezing more than $280M worth of ETH, including $90M belonging to Parity\u2019s Founder & Ethereum former core developer: Gavin Woods.How long has this bug been around\u00a0for?As Dan Guido points out, this new vulnerable contract has been deployed more than 100+ days ago on July 20th, one day after the original multi-sig vulnerability had been exploited and fixed.The BugA user named devops199 claimed he triggered the bug \u201caccidentally\u201d and reported it through a GitHub ticket.The newly deployed contract, 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4, contains a vulnerability where its owner was uninitialized. Although, the contract is a library it was possible for devops199 to turn it into a regular multi-sig wallet since for Ethereum there is no real distinction between accounts, libraries, and contracts.The event occurred in two transactions, a first one to take over the library and a second one to kill the library\u200a\u2014\u200awhich was used by all multi-sig wallets created after the 20th of July.Transaction #1In the above transaction, the user initialized the owner to himself (0xae7168deb525862f4fee37d987a971b385b96952) of the Parity library using the initWallet() function which is the function that was originally exploited on July 19th. Assigning an owner to the library directly enabled the user to convert the library into a regular multi-sig wallet.// throw unless the contract is not yet initialized.modifier only_uninitialized { if (m_numOwners > 0) throw; _; } // constructor - just pass on the owner array to the multiowned and // the limit to daylimitfunction initWallet(address[] _owners, uint _required, uint _daylimit) only_uninitialized {    initDaylimit(_daylimit);    initMultiowned(_owners, _required); }Transaction #2After initializing himself as owner of the library (now regular multi-sig wallet), the user was able to call the kill() routine which resulted in paralyzing all the wallets that were dependent of this third party library. This affects all the wallets created after 20th July, since they can\u2019t use this library anymore.// kills the contract sending everything to `_to`.function kill(address _to) onlymanyowners(sha3(msg.data)) external {    suicide(_to); }ConclusionEven though the vulnerable smart-contract was open source and deployed months ago, this bug managed to escape code review done by the Parity team.Since by design smart-contracts themselves can\u2019t be patched easily, this make dependancies on third party libraries very lethal if a mistake happens.The fact that libraries are global is also arguable, this would be shocking if it was how our daily use Operating Systems would work. Modern O.Ss improved their security over the past 20 years mainly because of all the security mitigations being implemented (NX, KASLR etc.), those mitigations come from the compiler and the O.S. itself. Every time a new class of bug is discovered, hardware and O.S. vendors work on kill the class of bug\u200a\u2014\u200ahardforking should not be the only solution to problems. Writing virtual machines, and compilers is hard.We have seen a lot of enthusiasm from a lot of people about blockchain-based smart contracts, and the general assumption from users is that they would be secure. But just like any other piece of software a smart-contract can be vulnerable.All the recent security issues around smart contracts are challenging more and more the sustainability of storing money on a blockchain-based programmable software layer.If you want to know more about Ethereum internals and security, I invite you to watch my DEFCON talk of this summer.", "responses": "16"}, {"title": "Never, have I been so confident in\u00a0Ethereum", "author_name": "Nick Lombardi", "link": "https://medium.com/@nkmlombardi/never-have-i-been-so-confident-in-ethereum-ba58a6d0f88f?source=search_post", "post_date": "Nov 4, 2017", "readtime": "3 min read", "upvotes": "1.95K", "content": "Never, have I been so confident in\u00a0EthereumNick LombardiBlockedUnblockFollowFollowingNov 4, 2017Cancun was a fine choice,\u00a0VitalikHere I am, sitting on the beach front, as the moon illuminates the waters of Cancun below, and I think to myself\u2026I knew it would be worth it.Friends, family, the news; they all said it would be a bad idea to attend.Mexico is dangerous! The event is too expensive!I can\u2019t explain why, but I was so drawn to this convention, I just knew I had to be here. For too long have I been an investor; it was time that I stepped up and immersed myself in the development world of Ethereum. I knew it would change my life forever\u2026I\u2019ve been here in Cancun for 7 days now, and it has been such a surreal experience. This event has delivered more news and information than I ever could have imagined. I\u2019ve met so many interesting people in the Blockchain space, and every single one of them had something they were working on. Everyone was busy, everyone had ideas.The amount of long awaited projects that are releasing in the following months is crazy. Even the announcement that the foundation was nearing the finalization of Proof of Stake caught me off guard.Proof of Stake was something I hadn\u2019t imagined until the end of 2018, and even then I was worried about being too optimistic.Right after that, Vitalik comes out and starts talking about sharding. Like, in detail.Sharding was something I hadn\u2019t imagined until 4 years from now.Yeah, they aren\u2019t out yet, but to see the progress the foundation has made on these technologies is amazing. Most importantly, there is a roadmap, and they\u2019ve solved the hard parts.", "responses": "9"}, {"title": "Joe Lubin: Why Ethereum Will Become the Global Settlement Layer", "author_name": "ConsenSys", "link": "https://media.consensys.net/joe-lubin-why-ethereum-will-become-the-global-settlement-layer-9b5f90d85be2?source=search_post", "post_date": "Apr 9", "readtime": "10 min read", "upvotes": "4.8K", "content": "Joe Lubin: Why Ethereum Will Become the Global Settlement LayerThe ConsenSys Founder evaluates the state of blockchain in a landmark address at Deconomy in\u00a0SeoulConsenSysBlockedUnblockFollowFollowingApr 9The Deconomy conference in Seoul last week featured blockchain leaders like Vitalik Buterin, Andreas Antonopolous, and Changpeng \u2018CZ\u2019 Zhao taking the big stage at the Jangchung Arena for deep dives into blockchain, Ethereum, and cryptocurrency. Notably, ConsenSys Founder Joe Lubin delivered a landmark treatise that addressed a number of foundational issues currently facing the blockchain ecosystem as #Cryptospring comes into view.Lubin\u2019s Deconomy address laid out the path towards Ethereum 2.0, proof of stake implementation, and blockchain\u2019s development towards providing a global settlement layer for a decentralized world economy. He went on to acknowledge a number of other blockchain and distributed ledger platforms, and evaluated why Ethereum remains the only viable candidate for achieving the decentralization holy grail of a global settlement layer. The talk follows up on a similarly substantial keynote at SXSW Interactive this March, and together the two talks offer a clear waypoint on the direction of Ethereum and blockchain in 2019.Here are some highlights from Joe Lubin\u2019s address at Deconomy 2019. Head to Decrypt for the full transcript.Proof of Work vs. Proof of\u00a0Stake\u201cThe trust characteristic of blockchain systems derives from their degree of decentralization. Certain blockchain networks can\u2019t be improperly manipulated, can\u2019t be cheated, even if up to half of the nodes on those networks are malicious.If a network like Bitcoin or Ethereum has thousands of nodes, we can be confident that these systems are harder to improperly manipulate than nearly any system in human history. We would achieve maximal decentralization of a blockchain network if every person on the planet owned precisely one full node device connected to the network.Proof of work systems are vulnerable to reduction in decentralization at the node network level due to costs of hardware and energy, preferential access to optimal hardware, and efficiencies of scale. A well designed proof of stake system will remove these asymmetries, enabling more people to own or control hardware on the network. The barrier to entry will be low enough so that nearly anyone will be able to validate transactions on the Ethereum network and help secure it.Casper proof of stake will bring breakthroughs in scalability, while enabling the network to be more decentralized and therefore more secure. Casper on the Ethereum Beacon chain is live on testnets now, and the 8 teams building their own implementations of the protocol should be in sync on a shared testnet within a small number of months.\u201dSee Joe Lubin speak at Ethereal Summit NY\u00a0, this May\u00a010\u201311th!Closed Platforms = Corruption & Inefficiency\u201cClosed platforms promote corruption and inefficiency. The global economy is rife with improper manipulations of markets due to platform lock-in or capture. Even the liquid deep markets of the present economy are regularly corrupted. It has long been the case that well resourced and patient actors have been able to observe market realities and manipulate them for selfish purposes.In recent years, we have seen the gold and silver price fixing scandal involving entities like Barclays and Deutschebank. And even the base rate that sets the price of money around the world, LIBOR, was regularly manipulated by a cabal of banks for selfish purposes. UBS, Barclays, and others paid fines for decades of active corruption of this market.As we tokenize the world, well-resourced financial houses and traders will spare no effort to manipulate markets for gain or political advantage. We don\u2019t want the liquid deep token markets of the next generation economy to be similarly vulnerable. We must not choose anything other than a maximally decentralized base as the foundational settlement layer of the global economy.\u201dThe Ecosystem: What are the\u00a0Choices?\u201cAssuming we agree that freedom, choice, and maximal trust are good things, what would be the optimal choice at this point for a global settlement layer on which we can re-architect our industries and collective endeavors?Perhaps IBM\u2019s\u00a0Fabric?There is no chance of it evolving beyond relatively small networks for private, permissioned systems. Fabric can issue tokens, but only for narrowly circumscribed situations. The Fabric technology promotes platform lock-in.R3\u2019s Corda?R3\u2019s Corda is blockchain inspired software for mostly banking industry applications. It is more about point-to-point trust than a shared source of truth. Corda can issue tokens, but only for narrowly circumscribed situations. The Corda technology promotes platform lock-in.How about\u00a0EOS?As has been debated endlessly, a platform controlled by 21 crypto bros is just not all that decentralized. They can collude and censor if they wish. Governments and other well resourced actors can bribe them or force them to act against their will and against the well-being and security of the people using the platform.It has been argued that if these block producers start behaving badly, they will be voted out, and that is the main source of decentralization in the system. Unfortunately, there is no good way for anyone to detect that they are colluding, or have been corrupted or forced into some sort of improper action. I can imagine EOS being used for some games, but not even for games that have high value tokens. It will be too easy to organize to steal value on this platform.PolkadotThe Polkadot system is being built by Parity, the developers of the Ethereum Parity client. Parity is a strong team. Polkadot will achieve scalability by having one main heartbeat chain\u200a\u2014\u200athe relay chain\u200a\u2014\u200awith multiple parachains hanging off of it. Polkadot is scheduled to launch its relay chain mechanism in Q3 of 2019.The Polkadot worldview sees Ethereum connected as a potential \u201cvirtual parachain\u201d via a bridge. For any parachain to become attached to the Polkadot relay chain, it must be voted in by the holders of dots\u200a\u2014\u200athe Polkadot system token. These voters can also choose to pause a parachain or remove a parachain from the system if it is deemed to be out of compliance with what the majority prefers. Effectively, this is a permissioned system, and white listing and blacklisting of entire parachain networks is a core tenet of the governance system of Polkadot.One could imagine a parachain choosing to be permissionless and allowing anyone to upload any dapp, but ultimately the DOT holders might take issue with this, as they might be considered by authorities to be responsible, so it would probably be too dangerous a policy for a parachain to offer. It is likely that this will be a permissioned and highly controlled blockchain platform.CosmosCosmos also has a solid team of technologists. Cosmos doesn\u2019t really propose a base trust layer. It seems more focussed on enabling different sovereign platforms to interoperate side-by-side. And it doesn\u2019t appear that there will be much interoperation between platforms in the next few years beyond enabling tokens to move back and forth across network boundaries. The Cosmos team feels that this will be the main and most important interoperation use case.I expect Cosmos to have good utility as a layer two solution, linked into the base trust layer when necessary. Cosmos also expects to interoperate with Ethereum through a token bridge.DfinityDfinity has a strong team. Because Dfinity is currently a closed system controlled by a small number of investors and token holders\u200a\u2014\u200athough they have indicated that they will open source their project at some point\u200a\u2014\u200ait is hard to tell, but it appears to me that they are less interested in being a global base trust and settlement layer and more like a somewhat decentralized AWS replacement. They are likely to do a good job of this whenever it gets released.Ultimately it does not seem viable for Dfinity to be a base trust layer for the planet as there is one fundamental design choice that they and Cosmos made that will prohibit this. Both Dfinity and Cosmos favor safety or consistency over availability and liveness. This means that if 34% of the nodes on their networks find themselves on the wrong side of some great firewall that blocks traffic for a period, their entire global network will halt, freezing every system built on it. And there are other known related failure modes. This is a non starter for many different classes of application.\u201dWatch Joe Lubin\u2019s SXSW Interactive Keynote with Manoush Zomorodi of the ZigZag podcastEthereum 1.0\u201cEthereum is the largest blockchain ecosystem by a variety of measures. In terms of core protocol engineers it is ahead of Bitcoin and both are far ahead of all other systems combined. In terms of application layer developers, Ethereum was estimated by a Gartner analyst to have a developer ecosystem that is 40x larger than that of #2, IBM\u2019s Fabric.Ethereum is a truly permissionless system. There are no white lists or black lists. Anyone can attach to the network and validate transactions. Anyone can upload applications to Ethereum. It is a censorship-free base trust layer for the planet with no single central point of control or failure.Ethereum is the largest blockchain ecosystem by a variety of measures and in order for it to continue to grow into the base settlement layer for the planet, we are working on a few things: easier user onboarding, UI and UX, privacy and confidentiality, and scalability. Each of these are seeing great strides made.With respect to user onboarding, projects are doing more handholding of users early in the relationship, not forcing them to remember 12 words forever lest they lose their identities and all of their value tokens. Projects are putting more responsibility on the user later in the relationship when the users are more experienced. Blockchain introduces new modes of operation and just like Apple computer brought users gently up to speed in how we gesture, pinch, swipe and type on the iPhone, we will have to do the same. Product teams like MetaMask, Burner Wallet and 3box are finding ways to create simple and high-value UX to facilitate mass adoption.We are also making great strides with respect to privacy and confidentiality either on private networks that can be attached to Ethereum via the Plasma technology for instance, or via state channels, or protocols like Aztec that enable confidential transactions involving any token on public Ethereum.\u201dA snapshot of the Ethereum ecosystem, via\u00a0Kauri.ioEthereum [ERCs]\u201cEthereum is where most of the Web 3.0 standards are being forged. ERC activity on Ethereum is another demonstration of its momentum. Better-known standards such as ERC20 and ERC721 fueled the tokenization activity of the past few years and the growth in games with non-fungible tokens. ERC223 and ERC777 provide upgrades on the ERC20 standard. ERC998 extends the utility of ERC721s. ERC1337 allows for blockchain-based subscription payments. ERC1400 provides clarity for security tokens. ERC1155 will enable multi-token functionality. And those are just to name a few.\u201dEthereum [Momentum]\u201cEthereum 2.0, Polkadot and Dfinity have similar architectures and capabilities and are likely to arrive at around the same time, though my best is on Serenity (Ethereum 2.0) to be fully functional and in use by many earlier than this next generation of architectures. Architecting and building a platform requires an enormous amount of work, but launching a working platform is also a huge effort. The Ethereum ecosystem has the diversity, expertise and momentum to get this done well and quickly. It takes an enormous amount of work and network effect to build an ecosystem, so by that time, Ethereum\u2019s ecosystem will be orders of magnitude larger than the other two and will already have strong scalability at layer two.Ethereum is innovating fast with respect to scalability at both layer two and layer one. And layer one is the only current candidate to be a base settlement layer for the planet because it favors availability and liveness over consistency, bolstered by relatively fast finality, and the project is the most rigorous of any out there about being maximally decentralized.\u201dIn Conclusion\u201cOpen, shared platforms are natural. We live with them daily. The ground is a transportation layer that we can all walk on, the air we can all freely breathe, public parks enable us to gather and play together, and in oceans, lakes and rivers we can swim and fish for food. These are all common goods and we should strive to make as much of our digital infrastructure as possible a common good as well. The more value we can push down into lower protocol layers to be shared by everyone cheaply, the more value will accrue to society broadly.And with the ability to create natively-digital value on base settlement layers that everyone can trust, we can move from cut-throat competitive, resource-constrained, zero-sum mindsets to positive-sum endeavors. Unconstrained, abundance mindsets will promote collaboration as a guiding principle for economic competition, eventually perhaps leading to the collaboration characteristic dominating the competition characteristic. Effective crypto-economic mechanism design will encourage us to root for one another to succeed, because if others on your open platform succeed, your fortunes will grow as well.\u201d", "responses": "8"}, {"title": "How to predict Bitcoin and Ethereum price with RNN-LSTM in\u00a0Keras", "author_name": "Siavash Fahimi", "link": "https://medium.com/@siavash_37715/how-to-predict-bitcoin-and-ethereum-price-with-rnn-lstm-in-keras-a6d8ee8a5109?source=search_post", "post_date": "Feb 26, 2018", "readtime": "8 min read", "upvotes": "944", "content": "How to predict Bitcoin and Ethereum price with RNN-LSTM in\u00a0KerasSiavash FahimiBlockedUnblockFollowFollowingFeb 26, 20182017 was a great year for Artificial Intelligence and Cryptocurrency. There have been many researches and breakthroughs in AI industry and definitely AI is one of the trendiest technology these days and even more in the future. One thing that I personally did not see it coming to the mainstream in 2017 was cryptocurrencies. It was a massive bull run with some insane returns on investment on cryptocurrencies such as Bitcoin, Ethereum, Litecoin, Ripple and so on.I have started diving into details of Machine Learning techniques in early 2017 and as many other ML experts and enthusiasts, applying these technics into cryptocurrency market is very tempting. The interesting part is variety of ways and methods that ML and Deep Learning models can be used in stock market or in our case crypto market.I found building a single point prediction model could be a great start point to explore deep learning with time-series such as price data. Off course it doesn\u2019t end here, there is always room for improvement and adding more input data. My favorite is to use Deep Reinforcement Learning for automated trading agents. Which I\u2019m working on it currently, however, learning to use LSTM networks and building a good prediction model is going to be the first step.", "responses": "17"}, {"title": "Velocity could make Ethereum a bad investment, but still a great technology", "author_name": "Trent Eady", "link": "https://medium.com/protopiablog/velocity-could-make-ethereum-a-bad-investment-but-still-a-great-technology-d8ceebcef458?source=search_post", "post_date": "May 13, 2018", "readtime": "5 min read", "upvotes": "1.4K", "content": "Ethereum co-creator Vitalik Buterin at TechCrunch Disrupt. Photo by Steve Jennings/Getty Images for TechCrunch.Velocity could make Ethereum a bad investment, but still a great technologyTrent EadyBlockedUnblockFollowFollowingMay 13, 2018I recently sold 70% of my Ether (the built-in cryptocurrency of the Ethereum platform) after I came to doubt its promise as an investment\u2014 although my optimism about its potential as a technology remains as high as ever. This might sound paradoxical, but it isn\u2019t.The key realization I had is that there is a good chance Ether won\u2019t behave like shares in a company, but will instead behave like the currency of a country. If you want to invest in the U.S. economy, you should buy stocks in U.S. companies, not hold U.S. dollars. Holding a fiat currency is a bad investment because it\u2019s inflationary. It decreases in value over time. I\u2019ve begun to suspect the same might be true of some cryptocurrencies, like Ether. If you want to invest in the Ethereum economy, holding Ether might not be a viable way to do that.Unlike Bitcoin for instance, the supply of U.S. dollars increases indefinitely year after year, with no hard limit. With a fixed supply of Ether, some investors assume Ether will be deflationary. It will retain value, and even appreciate in value. Fixed supply is by no means a foregone conclusion for Ether; it\u2019s a topic of active debate. But even with fixed supply, Ether might still depreciate in value.Even with a static money supply, an increase in velocity will cause a decrease in the value of a unit of currency. Velocity is the average number of times that 1 Ether or 1 U.S. dollar changes hands in a given year. Velocity is the \u201cV\u201d in the equation of exchange: MV = PQ. The equation of exchange is the method that Chris Burniske and Jack Tatar use to value cryptocurrencies in their book Cryptoassets. Since I haven\u2019t heard of a rigorous alternative (and I\u2019ve looked), this is the valuation method I\u2019m using.Suppose the Ethereum platform facilitates $12 trillion in transactions per year\u200a\u2014\u200aequivalent to the GDP of China. Suppose also that the velocity of Ether is 40x the velocity of the U.S. dollar, which is currently around 5. $12 trillion divided by a velocity of 200 is $60 billion, so that would put the network value of Ether below its current (at the time of writing) network value of around $70 billion.Here\u2019s another scenario. Suppose Ethereum does $1 trillion in transactions per year, and the velocity is 15\u200a\u2014\u200aonly 3x the velocity of the U.S. dollar. That would put the network value at $67 billion. Again, below the current network value.I do not believe this guaranteed to happen. I just believe that it is enough of a possibility that I no longer consider Ether to be a wise investment. The opposite is also possible: Ether might have a lower velocity than the U.S. dollar, perhaps because of widespread use as a store of value (like gold). At half the U.S. dollar\u2019s velocity, $12 trillion in annual transactions would yield a market value of $4.8 trillion. $1 trillion in transactions would yield $400 billion.Here\u2019s why I think Ether\u2019s velocity might end up being much higher than the U.S. dollar\u2019s velocity. Imagine a world in which the Ethereum Foundation\u2019s development roadmap has been successfully executed, and transactions are so fast and scalable it\u2019s now possible to play StarCraft on the Ethereum blockchain. Imagine the Ethereum dapp ecosystem begins to explode like the iOS app ecosystem did after the launch of the App Store. What level of velocity might we see then?If a large portion of the Internet begins to run on Ethereum blockchain transactions, then I have to think that the typical Internet user will be involved in many more Ether transactions per day than fiat currency transactions. It isn\u2019t rare that I go an entire day without executing a single fiat currency transaction. By contrast, I use multiple apps every day.If some of those apps become Ethereum dapps, and every time I use an Ethereum dapp I execute multiple Ether transactions, then I have to imagine the velocity of Ether will be staggering. Every day, I\u2019ll be executing hundreds, maybe thousands, of Ether transactions, compared to a handful of fiat transactions on a busy day.This is why it doesn\u2019t strike me as crazy that the velocity of Ether could be 40x that of the U.S. dollar. I can see the daily number of Ether transactions for a typical Internet user being 40x higher than the number of fiat currency transactions they execute in a day.One last scenario. Let\u2019s suppose the Ethereum economy grows to the size of the entire world economy: $80 trillion. What velocity would Ether need in order to have a network value of only $50 billion (~70% of its value today)? It would need a velocity of 1600, which is 320x the U.S. dollar\u2019s current velocity. I\u2019d say that $80 trillion in annual transactions is probably close to the very best case scenario for Ethereum. So if you want to invest in Ethereum, you better be confident that velocity will be less than 1600.If a single game of blockchain StarCraft involves a few hundred or thousand transactions, then the investment case for Ether would seem to entirely fall apart. Doubly so for social media dapps.That future where we\u2019re playing video games and using social networks on the blockchain is one I want to live in. It sounds exciting, cool, liberating, and attainable. I haven\u2019t changed my mind about the potential of blockchain technology. Just the potential of Ether as an investment vehicle. Remember, we were never promised that Ether would be a good investment. The purpose of Ethereum is not to enrich investors. It\u2019s to build a new era of the Internet, to make money digital, and enable decentralized institutions.If you want to get rich off cryptocurrency, sorry, that might not happen. But if you want to live in a future where blockchains improve human life, I think your chances are a lot better.Edit (December 8, 2018): Jose Maria Macedo has a response to this argument about velocity that I recommend reading.", "responses": "24"}, {"title": "BlockChains explained to a 5 year old child! [Part 2 of the tutorial series on Ethereum\u00a0DApps]", "author_name": "Harsh Pokharna", "link": "https://medium.com/technologymadeeasy/blockchains-explained-to-a-5-year-old-child-part-2-of-the-tutorial-series-on-ethereum-dapps-f80b866e72de?source=search_post", "post_date": "Jul 29, 2016", "readtime": "3 min read", "upvotes": "676", "content": "BlockChains explained to a 5 year old child! [Part 2 of the tutorial series on Ethereum\u00a0DApps]Harsh PokharnaBlockedUnblockFollowFollowingJul 29, 2016We discussed about Public Key Cryptography, Hash Functions and P2P network in the previous tutorial available here. For those who have not read it, please go have a look as it explains these \u201ctough sounding\u201d concepts in a very simplified manner.In this article, we will mainly talk about blockchains. I have taken references from some resources on the internet and rightfully mentioned them after the article. This is just my take on the explanation they have provided. Writing something I have learned helps me retain the knowledge longer and also helps me spread the knowledge to others who might not know about it\u00a0:)In the next article, we will set up our development environment in under a minute! [Available here]Darth VaderWe are 2 friends sitting in a park. You are Alice, I am Bob.I have a toy. You have none.I give the toy to you.Now you have a toy. I have none.Pretty Straightforward, right?I had a toy. I gave it to you. We did not need a third person to make the transfer for us. I can\u2019t give the toy to someone else because I don\u2019t have it anymore. Whereas you can give it to whomsoever you wish to. And they can give to whoever they want to and so on.Digital Darth\u00a0Vader!Now suppose I have a digital toy.I give you my digital toy.Wait.How do you know I didn\u2019t give the digital toy as an email attachment to Charlie first? Or I saved a million copies on my laptop and gave it to everyone on the internet?So, sending digital toys is not the same as giving physical toys.This problem is called the double-spending problem!But isn\u2019t the solution very\u00a0simple?We can maintain a ledger. Similar to what people at shops maintain. An account book, where all the transactions are recorded.So, there will be a ledger where all the transactions of digital toys will be recorded. Someone, say Danny will be in charge of it.Problem Solved, right?No.Because how do we know if Danny is not cheating and adding digital toys to his and his girlfriend\u2019s account anytime he wants?Also, why do we need to involve Danny in transactions that concern only you and me?Enters BlockChain!What if everyone had a copy of the accounting book on their computer and all the transactions that ever happen are recorded there.This is tough to beat. Now Danny can\u2019t add toys that he doesn\u2019t have to his account. Because then it wouldn\u2019t match with everyone else\u2019s book.Everyone who has a copy of the ledger on their system and maintains it by validating the transactions get digital toys as rewards. This is the way digital toys are ever produced.This is blockchain. And these toys that I was talking about are bitcoins or for that matter anything of value.The ledger is visible to everyone.Now we don\u2019t rely on a third person (Danny) to maintain our balances for us.We don\u2019t need to worry about the double spending problem.This is a very simplified story but if you understand this well, you know more about blockchains than many people in the industry. And to develop DApps this much knowledge is enough for now. Rest we will figure out as we will move forward.If you enjoyed reading this article, hit the little green heart button to show your love! It gives me the energy to write more\u00a0:)To stay updated for the next article in the series, please follow\u00a0:)And if you want your friends to read this too, click share!References: https://medium.com/@nik5ter/explain-bitcoin-like-im-five-73b4257ac833#.iigacc6wt", "responses": "8"}, {"title": "Announcing ZombieChain: An EOS-Like DPoS Sidechain for Ethereum\u00a0DApps", "author_name": "James Martin Duffy", "link": "https://medium.com/loom-network/announcing-zombiechain-an-eos-like-dpos-sidechain-for-ethereum-dapps-e0eba6c244da?source=search_post", "post_date": "May 23, 2018", "readtime": "7 min read", "upvotes": "3.6K", "content": "Announcing ZombieChain: An EOS-Like DPoS Sidechain for Ethereum\u00a0DAppsJames Martin DuffyBlockedUnblockFollowFollowingMay 23, 2018Update:ZombieChain has since evolved and rebranded as PlasmaChain. We now have 3 sidechains in production\u200a\u2014\u200aPlasmaChain, GameChain, SocialChain.", "responses": "12"}, {"title": "", "author_name": "ConsenSys", "link": "https://media.consensys.net/ethereum-gas-fuel-and-fees-3333e17fe1dc?source=search_post", "post_date": "Jun 23, 2016", "readtime": "9 min read", "upvotes": "1.5K", "content": "ConsenSysBlockedUnblockFollowFollowingJun 23, 2016Ethereum is a platform for decentralized and truthful applications that run on a global, peer-to-peer network without any administrators or a single point of failure. These applications have zero downtime and anyone can create them: it is permissionless innovation. The applications are truthful, immutable and always interoperate as they are coded. From this perspective, the terminology of smart contracts is reasonable in that they are the ultimate in contracts that always follow the terms set at their creation.The core of what makes this possible is effectively a World Computer. Technically called the Ethereum Virtual Machine (EVM), it includes operations for computation and data storage. A transaction represents a single session within the World Computer. It is the unit of interaction, similar to how a sentence is the unit of grammatical meaning, even though a single sentence can contain many words.What is\u00a0Gas?Gas is the metering unit for use of the World Computer. As an analogy, electricity is metered by kilowatt hours. Using more computation and storage in Ethereum means that more gas is used. One fundamental reason for metering is that it provides an incentive for people (miners) to operate the World Computer. These miners get a fee for processing transactions, which is determined by the metering scheme: gas.Each operation in the EVM consumes gas. For example, a multiplication (MUL) consumes 5 gas and an addition (ADD) consumes 3 gas. Here is a spreadsheet of Ethereum\u2019s operations and their gas consumption.Consider gas to be synonymous with\u00a0fuelMetering is different from fees and gas is different from Ether. To help clarify this, consider gas to be synonymous with fuel. A transaction must provide enough fuel, or startGas, to cover its entire use of the EVM\u2019s computation and storage facilities. All remaining gas is refunded to the transaction\u2019s originator: the user who initiated the transaction. A transaction that runs Out of Gas is reverted, but still included in a block and the associated fee is paid to the miner.With an overview from the perspective of fuel, let\u2019s turn to an overview of fees. While every operation in the EVM consumes a predefined amount of gas (for example, a MUL operation always consumes 5 gas), a user can specify a gas price in every transaction. The current gas price is 0.02\u00b5 Ethers, or 0.00000002 ETH. The fee an originator pays a miner is the transaction\u2019s (startGas\u200a\u2014\u200aremainingGas) \u00d7 gas price.Here is a summary of the influences of transaction fuel and transaction fee:At the start of a transaction, the Ether required for the startGas is set aside, and the remainingGas is set to startGas. With each operation of the transaction, gas is consumed and remainingGas is lowered. If there\u2019s an Out of Gas exception, all operations are reverted and all the Ether that was initially set aside is given to the miner. If the transaction completes successfully, all the remainingGas is refunded to the originator and the rest is paid to the miner.Simple exampleIn the following mock scenario, assume that a STORE consumes 45 gas and an ADD consumes 10 gas. The scenario involves storing the number 31 in the EVM, summing 2 numbers, and then storing the sum. Let\u2019s assume that the originator specified a startGas of 150 and a gas price of 0.02\u00b5ETH. Below is an illustration as the transaction is processed by the EVM:The originator pays the miner a fee of:(150\u201350) \u00d7 0.02\u00b5ETH = 2\u00b5ETH = 0.000002\u00a0ETHFuel vs.\u00a0FeeThere is a difference between an originator providing enough fuel and providing enough fees. Here are the likely effects on a transaction:A transaction with too little fuel will not even reach miners, regardless of the fee supplied. If adequate fuel is provided for a transaction, but the fee is too low, even though the transaction may reach miners, upon seeing the fee miners will not perform any computation. Fees determine the order in which transactions will be included in the blockchain. The reason why providing high fuel can lead to a transaction taking longer to get mined is discussed in this article in the section Potential delays with high startGas.startGasLet\u2019s discuss the fuel needs at the start of a transaction. Abstractly, before allowing use of its computation and storage, the World Computer needs to know if the originator can pay for it. Concretely, before processing a transaction, a miner needs to know if it will get paid. A transaction must offer the maximum amount of fuel it is willing to consume. For this article\u2019s purposes, this offer will be called startGas. startGas is an essential part of a transaction. Unfortunately, different documentation has used different words to describe this critical component:startGas is the term in the Ethereum White PapergasLimit is the term in the Ethereum Yellow Paper,software, such as Geth and web3.js, simply uses the term \u201cgas\u201d.startGas keeps things simple (away from say a pay as gas is consumed approach) because it is impossible for a miner, in the general case, to know how much computation is required without running the actual computation (related to the Halting problem). As a user of an Ethereum application, it may seem complicated to have to provide startGas, but developers have some tools for estimating startGas and hiding the details from the user.Out of Gas exceptionA transaction offers the maximum amount of fuel it is willing to consume. This gas is consumed with each operation of the EVM. If all the gas is consumed without the transaction being completed, an Out of Gas exception occurs. The originator pays the miner for all the work that\u2019s been performed and the transaction is included in a block, but all state changes (such as contracts created, values stored, and logs written) are reverted.Let\u2019s use the same scenario as the first example, but this time the originator specifies a startGas of 90 (instead of 150). Here\u2019s an illustration of the execution:At the start of the transaction, the originator must set aside funds for all the fuel: startGas \u00d7 gas price = Ether placed in escrow. The amount of Ether in escrow is:90 \u00d7 0.02\u00b5ETH =\u00a01.8\u00b5ETHGas is consumed as each operation is performed and the operation to STORE sum is an Out of Gas exception. This causes all operations to be undone, meaning that the number 31 gets reverted to whatever value was previously stored, but the transaction is still included in the blockchain and the miner is paid the entire escrow amount: 1.8\u00b5ETH.Gas refundThere are 2 operations in the EVM with negative gas:Clearing a contract is -24,000Clearing storage is -15,000When the EVM executes such an operation, it is tallied in a separate refund counter. The gas refund is only provided at the end of the transaction. Also, the maximum refund equals half the gas consumed.A key point is that a transaction\u2019s fuel never increases. As the EVM performs operations, the fuel always decreases (with the refund counter increasing when some contract or storage is cleared). If the fuel reaches zero or negative, then an Out of Gas exception occurs immediately: it does not matter how much gas is in the refund counter. For a transaction to be able to use a gas refund, it must avoid an Out of Gas exception. Assuming that a transaction had enough gas, then it can make use of the gas in the refund counter.The amount of gas refunded is at most half the gas used. For example, if a transaction used 60,000 gas and cleared 2 contracts for a refund of 48,000 (24,000 each above), the originator would still pay the miner for 30,000 gas. This incentivizes miners to run transactions with negative gas operations, as it gives them revenue and ensures that it is impossible for a miner to pay for someone else\u2019s computation.Block gas limit\u00a0(BGL)Recall that startGas is the user-specified, maximum amount of fuel that a transaction will consume. So how many transactions can fit in a block? The answer is until the sum from each startGas reaches the block gas limit (BGL). The BGL is currently 4,712,388 (digits of 1.5\u03c0), meaning around 224 transactions that each have a startGas of 21000 can fit in 1 block (which is produced every 15 seconds on average). To prevent Bitcoin-like divisiveness over whether blocks should become larger, the Ethereum protocol allows the miner of a block to adjust the BGL by a factor of 1/1024 (0.0976%) in either direction. Separate from the protocol is a default mining strategy of a minimum BGL of 4,712,388.Potential delays with high\u00a0startGasSince an Out of Gas exception is practically a waste of money for an originator, it is always better to overestimate the startGas than to underestimate. So, why shouldn\u2019t an originator always specify a startGas of 4 million?The answer lies in the difference between a transaction\u2019s startGas and the gas it actually consumes. Miners only get paid for the actual gas consumed by a transaction; all unused gas is refunded to the originator.If there is a transaction with a startGas of 4M and another 100 transactions with a startGas of 40,000 each, a miner would probably choose the latter as the 100 transactions have more predictable revenue. If the transaction with 4M startGas actually only consumes 1M of gas, then the miner loses 3M gas of potential revenue. Thus, miners are likely to prioritize a set of \u201csmall\u201d transactions over a single transaction with a very high startGas (unless intrinsic gas is also very high). This can lead to a delay before a high startGas transaction is eventually mined and explains why an excessive startGas can be detrimental.Detour to ExchangesThere are 2 types of accounts in Ethereum:User accounts (controlled by private keys)Contracts (controlled by code)Sending Ether (ETH) to a user account has a fee of 21000 gas but sending ETH to a contract has a higher fee, which depends on the contract code and data being sent in the transaction. Some exchanges may have only been providing 21000 gas for all their transactions, which means that when a user wanted to send ETH from an exchange to their contract wallet in Mist (Ethereum Wallet), the transaction would run Out of Gas and the ETH would never make it to the user\u2019s contract wallet.Metering vs.\u00a0FeeOne more note on the difference between metering and fees. In Bitcoin, metering is done with bytes: the number of bytes in the transaction. In Ethereum, computation also needs to be metered because a small amount of code could still be a program that runs forever. Metering computation is one of the reasons for gas. But having gas doesn\u2019t mean requiring fees.For example, in a private chain each account could have X gas per day, or each account could have Y gas per transaction, or some other scheme. On the flip side, having fees doesn\u2019t mean requiring gas: fees can be based on different metering, such as bytes. Security in a public blockchain requires both gas and fees, while the alternatives are more applicable to private chains (for example, a scheme where each account has X gas per day can be Sybil-attacked in a public chain where anyone can create an account).ConclusionGas is metering and fuel for using the World Computer and is different from the Ether fee that is charged for using the World Computer. There is a difference between providing enough fuel and providing enough fee. Running Out of Gas costs money and it is safer to offer more gas, since all unused gas is refunded. Gas is a core part of Ethereum and the majority of its topics have been discussed. There\u2019s more to it, including estimating gas, intrinsic gas, the gas price oracle, effects on transaction size, and further exploration and understanding can be built on the foundations provided by this article.Joseph Chow is the Lead Developer of BTC Relay, an Ethereum contract that allows Ethereum users to pay with bitcoin. If you\u2019d like to learn more about it, send an email to info@btcrelay.orgLike this piece? Sign up here for our weekly newsletter!Disclaimer: The views expressed by the author above do not necessarily represent the views of Consensus Systems LLC DBA ConsenSys. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": "9"}, {"title": "Why Ethereum is great for\u00a0payments", "author_name": "Edmund Edgar", "link": "https://medium.com/@edmundedgar/why-ethereum-is-great-for-payments-ee80c5cb912a?source=search_post", "post_date": "Mar 10, 2017", "readtime": "8 min read", "upvotes": "459", "content": "Photo by Babak Fakhamzadeh (CC BY-NC-ND\u00a02.0)Why Ethereum is great for\u00a0paymentsEdmund EdgarBlockedUnblockFollowFollowingMar 10, 2017Tech people love cool new things, and when we talk about Ethereum we hardly ever talk about it as a way of doing things Bitcoin could already do. But the experience of using Bitcoin to pay for things is getting increasingly painful, and it\u2019s time has come to look at how Ethereum could help.Ethereum people have often tended to tip-toe around its usefulness for payments; many cut their crypto teeth on Bitcoin, and they are generally uninterested in picking a fight.But I\u2019m going to argue that Ethereum is not just capable of doing online payments, but actually seriously great.Ethereum payments are\u00a0simplerPeople often think of Ethereum as a complicated technology. It\u2019s true that to make full use of all its smart contract capabilities, you need to wrap your head around a bewildering array of technologies and sub-projects.But you don\u2019t have to use all that stuff, and where it counts, payments on Ethereum are simple.Here\u2019s why.UTXO Oh\u00a0NoThere is no such thing as a Bitcoin. A Bitcoin transaction consists of actions performed against a payment you received earlier: combining previous payments and splitting previous payments.If I send you 10 Bitcoins, I may simply be forwarding the result of a previous payment I received from someone else of exactly 10 Bitcoins. But more likely I\u2019m combining a number of previous payments together. And that hardly ever comes out at exactly the amount I want to send, so I\u2019m also sending another payment back to myself.This gives users a lot of control over the way they handle payments that depend on each other. But when you look at a typical bitcoin wallet, you see very little about UTXO: unspent transaction output.Wallet authors know they\u2019re doing: Elegant and powerful as it may be, the UTXO scheme doesn\u2019t match the normal user\u2019s mental model of what a wallet looks like.Wallet authors try hard to abstract this complexity away and hide it in the software internals, but the abstraction leaks. On a congested network, it leaks a lot.For example, every now and again someone will complain about the crazy fees they\u2019re being charged to send a bitcoin transaction. Bitcoin veterans will then usually look at that transaction, nod sagely and explain that their transaction had a large number of inputs, so what do they expect?They\u2019re right\u200a\u2014\u200abut this is complexity that the wallet was explicitly trying not to bother the user with.In Ethereum, this doesn\u2019t have to happen. A user\u2019s account can be modeled as\u2026 an account. You can have a single balance, and it doesn\u2019t matter how many payments it took to get you that balance. Wallets are simpler, less surprising stuff happens, and fees are easier to predict and explain. All payments cost the same, regardless of where the funds came from.Security is easier with\u00a0EthereumSmart contracts with\u00a0yourselfThere\u2019s no point in receiving money unless you can secure it, and securing private keys is hard.You can make a multi-sig address and put the keys in cold-storage, in bank vaults on multiple continents, but that makes it hard for you to spend. You can have an accessible key that you keep with you on your phone, but it\u2019s hard for you to secure.Sometimes these cases fall naturally into the way we like to use different devices. You might have a wallet on your phone for small amounts of change and another on a hardware device for your life savings. But in practice people often need the ability to shift fairly large sums of money reasonably fast. Every now and again, the hot wallet of a bitcoin exchange gets hacked, and even after they have detected the theft, people keep sending money to it. Because bitcoin\u2019s scripting system is so limited, they have no way of taking back control.There\u2019s a lot we can do to make this process work better.You want to be able to rate-limit routine payments secured by a particular process, so your money doesn\u2019t all vanish at once.When you\u2019re using multiple keys and some of them are in cold storage, you should be able to replace one of them without taking all the others out of cold storage.The way you secure the ability to *stop* money leaving your wallet needs to be different from the way you secure the ability to initiate one. The key that triggers, \u201cStop people spending this money\u201d needs to be readily accessible, whereas the key that says \u201cgo ahead and hand over my life savings\u201d needs to be highly secure.Smart contracts are usually mainly discussed as ways for different people to interact with each other, but they work just as well when we\u2019re talking about keys held in different places, or funds that should only move according to user-defined rules.This is a contract that secures funds in this way in Ethereum. It didn\u2019t take an academic paper to describe it, and it doesn\u2019t take a lot of study to be able to read it and understand what it does.This stuff isn\u2019t quite impossible in Bitcoin, but nobody does it because it\u2019s insanely complicated.Busting out of the nerd\u00a0ghettoA clear lesson from the early days of bitcoin is that regular users suck at managing private keys. This isn\u2019t yet a solved problem on any platform, but for crypto-currency to break out of a nerd ghetto, we\u2019re going to need some new kinds of tools. With state and a reasonably functional scripting environment, we\u2019re starting to see fresh and imaginative solutions like uPort, which allows you to distribute trust among your friends.A better scaling\u00a0gameEthereum fees are currently orders of magnitude lower than Bitcoin fees. But people moving from the one to the other will want to know why it won\u2019t end up meeting the same fate if it becomes more popular. The good news is that Ethereum is in a much better position to scale to handle substantial numbers of payments than Bitcoin.An established governance procedure for capacity increases, not an endless political food-fight.Bitcoin\u2019s block size has been stuck at 1 MB for years. Most bitcoin people say they support an increase in capacity, but Ethereum\u2019s grows naturally through an automatic adjustment.More mature scaling\u00a0techSetting up a fully validating bitcoin node is notoriously slow. To validate new blocks, your node needs to know about all the transactions that it is currently possible to spend.To create this database, it has to look through every single block since Satoshi generated the genesis block from a headline from The Times. Only once it has downloaded these blocks can it \u201cprune\u201d them, throwing away most of the data that it just downloaded and leaving only the data that it needs to validate new transactions.There are proposals to make this list, called the UTXO set, more easily available to clients with less historical information. With UTXO Commitments, you organize the database in a tree and store its hash in the header of each block. Everyone agrees that this would be useful. But the actual implementations are still at the stage of bad-tempered nerd fights on mailing lists.In Ethereum this was a fundamental part of the design. Every block contains a hash of the tree of the current state database. If you can work out what block belongs to the longest valid chain, you can confirm the state of anything in the database. Among other benefits, this makes it safer to sync up a node without downloading everything that ever happened on the network. The result is that despite the Ethereum block chain already holding much more data than Bitcoin\u2019s, you can get a fully validating node running in about 15 GB.Better prospects for off-chain systemsOff-chain payment systems are smart contract\u00a0systemsThe great hope for scaling bitcoin has long been that rather than needing to send every transaction to the blockchain, transactions can be exchanged out-of-band and only sent to the blockchain if there is a problem that needs to be resolved.This can be done on Bitcoin, with Bitcoin\u2019s very limited scripting language. But it\u2019s extremely hard to do, and even harder to do securely. People trying to build practical systems usually end up realizing that they need changes to Bitcoin\u2019s scripting language, at which point they have to wait while the Bitcoin developers stroke their beards and try to think of all the possible ways the new feature could be used and whether they consider them helpful or harmful.These systems are smart contract systems, and Ethereum is designed for smart contracts. Because it already has an unrestricted scripting language and the ability to store and read information in the state database, off-chain systems can be simple, elegant and include functionality that is simply not possible in Bitcoin, at least without many more iterations of \u201cplease add this soft fork\u201d.Raiden, Ethereum\u2019s equivalent to Bitcoin\u2019s much-awaited Lightening Network, now looks set to ship in useful form while Lightening is still waiting for bitcoin transaction system upgrades.The best approach for privacy, but not\u00a0yetThe weakness in all this is privacy. The UTXO model provides somewhat better privacy than the account model, so the simplest imaginable use of Ethereum will tend to provide less privacy than Bitcoin would have provided to date. And if you\u2019re moving from Bitcoin to something else, you have options like Monero and Z-Cash, which provide a huge step up.Ethereum does not, on its own, provide good solutions for sending funds privately. But because it lets developers write their own contract logic, insights from these systems can be ported to Ethereum systems without changing Ethereum. Rather than needing to define your currency based on its privacy technology, you\u2019ll be able to wrap existing coins and tokens in contracts that provide privacy. If a better technology comes along, you can move to it right away. This doesn\u2019t help you today, but it\u2019s a promising way to handle privacy tech, which is evolving fast and experiencing some teething troubles.Better moneyEthereum is a great technology for sending people money on the internet. Maybe it wasn\u2019t supposed to be, but it is.", "responses": "11"}, {"title": "What went wrong with Ethereum in\u00a02018", "author_name": "Deepit AG", "link": "https://medium.com/@deepitag/what-went-wrong-with-ethereum-in-2018-12e5603179a1?source=search_post", "post_date": "Nov 13, 2018", "readtime": "5 min read", "upvotes": "1.4K", "content": "What went wrong with Ethereum in\u00a02018Deepit AGBlockedUnblockFollowFollowingNov 13, 2018I am convinced that Ethereum is\u200a\u2014\u200aand has been, for the past couple of years\u200a\u2014\u200athe most important blockchain, and the one with the best prospects for development and adoption in the immediate future. I\u2019m not an \u201cethereum believer\u201d at all and actually I don\u2019t believe in any particular blockchain. If someone today showed me a more consistent and active ecosystem than what has come to be created around Ethereum I would change my mind in a moment. What is important for me and for the company I am a CTO for is the development of trustless technologies and social assumptions. The very concept of blockchain is non-essential provided that better technologies and/or social assumptions emerge that lead to a society as free as possible from mediation and the need to trust centralized bodies.With this article I want to talk about what, in my opinion, went wrong for ethereum this year. Or, if you will, what could have gone better.1:Ether is the best currency ever conceived by mankind. However, the Ethereum Foundation does not develop its lawful potential.To date, the killer application of each blockchain is the monetary function. Through the possibility of being exchanged through on-chain contracts (smartcontracts) too, Ether is not only a \u201ccrypto currency\u201d. It can also perform the following tasks:means of paymentvalue reserve over timevalue denomination (price)Ether can do so much more because it can be exchanged among parties also in view of rules and conditions written in a contract without having to depend on third parties for executing agreements or for resolving contractual disputes.Ether therefore is not only a currency, it is an evolution of the very concept of currency as humankind had conceived it before Ether itself.In order to be expressed, this enormous potential does not only need improvements on both a technological and social side, and I am referring particularly to scalability or simplicity and security in the management of private keys.I am specifically thinking of the issues in the relationship between Ethereum (and, by extension, of each and every blockchain) and the laws and regulations of the world, which are now the main source of friction when it comes to the mass adoption of Ether as a world-class currency.The Ethereum foundation does a commendable job in the development of the ecosystem. Its constituents, starting with Vitalik Buterin, as well as an enormous research work, bounce like pinball beads off every corner of the planet to promote Ethereum, but for reasons that I cannot explain to you today, the foundation has not provided for any award (grant) in the field of legal research.Research is not just about technology, code, social assumptions. Research can also lie in finding the best possible legislation(s) worldwide to develop Ethereum as a currency. Ethereum foundation\u2019s cash prizes could also be given to law firms that offer the best possible framework for each piece of legislation, or the best possible legislation globally, in an open source fashion, to base one\u2019s Ethereum-related business.Looking at the latest wave of grants reserved by the Ethereum foundation, for example,https://blog.ethereum.org/2018/08/17/ethereum-foundation-grants-update-wave-3/we find no trace of such fundamental issues.Likewise, during the last Devcon and, in fact, even in previous ones, I have never heard of projects that are pushing for adoption by trying to smooth the friction linked to the laws and governance systems of the various countries.2:MetropolisThe Ethereum evolution that goes by the name of Metropolis has had and continues to represent a painful, incomplete birth that will not reach (in my opinion) the main objective for the development of the ecosystem: the abstraction of the EIP859 account concept (link +link) even after the introduction of the Paygas opcode.Assuming that \u201cMetropolis\u201d after the split in 2 hard forks is still a reasonable concept (personally I consider the current Ethereum as \u201cByzantium\u201d and the coming one as \u201cCostantinople\u201d; I don\u2019t see why the two hard forks should be brought back to pieces of the same project seeing how things have gone), and assuming that finally on January 16th this last passage to Costantinople takes place, the fact remains that unfortunately what was by far the most important, useful and radical change for Ethereum has not been incorporated.I understand the ambition and difficulty (and the dangers) in terms of trade-off between innovation and security of the protocol but it was a shame that the Paygas op-code has not been introduced (neither it will be with Constantinople), so far smart contracts on Ethereum must always be \u201cstimulated\u201d with a transaction to change status, and this represents a significant technical and social limit for the DAPPs.The Ethereum development team decided to devote every effort to solving together the issues of scalability and efficiency of the blockchain through the transition to an innovative form of Proof of Stake, the Sharding, and a new and more efficient programming and compilation language that goes by the name of eWASM before introducing this type of feature in the protocol.However, the truth is that Metropolis cannot be said to have been a full success compared to the announcements and expectations generated in previous Devcons.3:The emergence of asics miningIt was supposed to happen sooner or later, and it did so exactly on time. Bitmain has placed on the market equipment dedicated to ethash (and equilash) mining, which suggests that it has long been mining its own dedicated ethereum hardware. This is not the place to discuss how much this represents a cancer for Ethereum and how much asics mining is a real poison for any blockchain.The overwhelming majority of the Ethereum community agrees with the need for a change in the Proof of Work (waiting for a POS that will require over a year to take over) as soon as possible. It appears that the ProgPow project currently being tested is a candidate rather close to replacing ethash.In this case one can say that S\u2026 Happens\u2026 it would have been better if it hadn\u2019t happened, though.This is what I think went wrong for ethereum in 2018. With that in mind, Ethereum is to date (and I fail to see how it cannot remain for a long time still) the spearhead of a cultural, conceptual and industrial movement linked to the notion of a trustless society.Originally published at funnyking.io on November 13, 2018.Author: Paolo Rebuffo, CTO @Deepit AGDeepit AG | LinkedInLearn about working at Deepit AG. Join LinkedIn today for free. See who you know at Deepit AG, leverage your\u2026www.linkedin.comwww.deepit.ch", "responses": "12"}, {"title": "Ethereum Probabilistic Micropayments", "author_name": "Gustav Simonsson", "link": "https://medium.com/@gustav.simonsson/ethereum-probabilistic-micropayments-ae6e6cd85a06?source=search_post", "post_date": "Oct 29, 2017", "readtime": "6 min read", "upvotes": "1.3K", "content": "Ethereum Probabilistic MicropaymentsGustav SimonssonBlockedUnblockFollowFollowingOct 29, 2017Most Ethereum projects in need of micropayments have, so far, focused on payment channels. Payment channels allow for the sending of arbitrary number of transactions while only requiring two on-chain transactions:One transaction to initialize the payment channel.One transaction to close the channel and settle total amounts transferred.Between these two we can send as many off-chain transactions as we want. This is a great improvement from regular on-chain transactions, as services such as video streaming and energy markets can be paid continuously for tiny amounts of service.Because two on-chain transactions are required, we can\u2019t simply send a tenth of a cent to someone we do not already have a channel with, as the transaction fees of channel initialization and settlement would be many times higher than the payment.What if we could send arbitrarily small amounts to an arbitrary number of recipients, without the need for initialization or settlement transactions?Ethereum Probabilistic Micropayments can send an arbitrary number of payments to an arbitrary number of recipients, without any per-recipient initialization or settlement transactions.Sounds too good to be true? It almost is\u200a\u2014\u200awe always need at least one on-chain transaction to settle payments, but it is possible to effectively receive payments without any on-chain transactions taking place.In the above claim, note the per-recipient qualification; a subtle but important distinction. Ethereum Probabilistic Micropayments require a single initialization transaction per sender, locking up an amount of tokens that is then used to send tokens to any recipients. And recipients do not need to settle payments per-sender. Below we go through an example to see how this works.The Orchid\u00a0ProtocolAt Orchid Labs we\u2019re working on removing surveillance and censorship from the Internet through a new decentralized overlay network. In the Orchid Network, bandwidth contributors (called nodes) share their bandwidth and relay traffic for users who access the Internet. Users continuously pay tokens to bandwidth contributors (automated by the user client).An Orchid node may service thousands of other nodes, and users may use hundreds of nodes to access different websites, the transaction fees of setting up a payment channel between each node (even if using networks of channels such as the Raiden Network) would be prohibitive.Instead, we use Ethereum Probabilistic Micropayments:The sender deposits tokens (can be ETH, ERC20 tokens or equivalent) into an Ethereum smart contract (shared by all senders) which maintains, for each sender, payment balance and penalty escrow.The sender locally creates and signs a ticket\u2014 a cryptographic data structure that includes payment data, such as recipient and amount.The sender sends the ticket directly to the recipient without posting anything on the Ethereum network.The recipient verifies the ticket. If it\u2019s valid the recipient now has cryptographic proof that they are being paid. Note that even if a ticket is not a \u201cwin\u201d the recipient still has absolute proof of being paid, since the randomness used to determine whether a ticket wins or not is derived from both the sender and the recipient in such a way that neither can manipulate the outcome.A valid ticket may be a \u201cwin\u201d, in which case it can be claimed by posting an on-chain Ethereum transaction.This scheme is detailed (and in part formalized) in the Orchid Draft Whitepaper, which discusses and references prior research on probabilistic micropayments and their applicability to blockchains.While we can\u2019t use this scheme for a single payments\u200a\u2014\u200asince the recipient has no guarantee of actually being paid\u200a\u2014\u200awe can use it to prove, cryptographically, to a recipient that the ticket they receive have a certain probability of resulting in a claimable payment.As we can configure the exact probability of winning, the winning amount, and frequency of tickets over time, we can reduce the variance (balance of trade) to such a degree that it becomes effectively negligible.In other words, probabilistic payments are more efficient than payment channels whenever the service provided is continuous and granular enough for the probabilistic variance to become negligible.Example: Video StreamingLet\u2019s imagine a decentralized YouTube where anyone can host video streaming to any viewer.Payment Channel Scenario:You\u2019re a video streamer host, charging $1 per hour of video streamed.A new user connects to your service and watches exactly 10 seconds of cute kittens.A transaction without data currently costs around $0.006, if one is OK waiting a few blocks for confirmation. However, as we need to setup the channel before streaming video (to avoid freeloaders), we probably want quicker confirmation, which would cost $0.026. Setting up a payment channel would cost a bit more, as it requires some smart contract execution. A rough estimate would be twice as much\u200a\u2014\u200a$0.052.The overhead of a payment channel here is several times what you, as a host, want to charge the user. If the user ends up watching more, the overhead may be reasonable, but there is some friction here for new or sporadic users.Probabilistic Payment Scenario:You\u2019re the video streaming host, charging $1 per hour of video streamed.A new user connects to your service and watches exactly 10 seconds of cute kittens.Every 4s, the user sends you a off-chain ticket with 1/2500 probability of winning. The winning amount is set to $2.78.If you do not receive a payment ticket every 4s (within some margin to account for network latency), you simply disconnect the viewer.If the viewer does not receive any video feed, they immediately cease sending payment tickets.When you receive a winning ticket, you claim it with an on-chain transaction, which transfers the wining value to you from the tokens locked up by the sender.Even if a ticket is not winning, you still have cryptographic proof that you\u2019re being paid, since neither the sender nor the recipient can manipulate the value that determines if a ticket wins. With the proof, you\u2019re happy to continue streaming video to the viewer. As thousands of (new) viewers connect to you, there is no overhead per viewer\u200a\u2014\u200athe only overhead is when you claim your winning tickets.For a given \u201caverage total payment\u201d, the odds of winning (and frequency of tickets) determine the number of on-chain transactions required. Thus, the higher the winning amount, the less transaction fees paid over time by the recipient. The lower the winning amount, the less tokens have to be locked up by the sender, lowering their liquidity cost.For video streaming, a reasonable winning amount might be $2.78. For electricity or energy markets maybe it\u2019s $27.Preventing Double\u00a0SpendingA crucial part of probabilistic payments is to ensure double spending is impossible, or, failing that, unprofitable for the sender. The \u201cpenalty escrow\u201d mentioned earlier makes double spends in our scheme unprofitable for the sender. The way this works is that the sender has to lock up (commit to) a certain multiple of the ticket winning amount before they can construct tickets. The recipient verifies that the sender has not only enough funds to cover a winning ticket, but that their penalty escrow has enough balance.In the event of a double spend, the on-chain claim of a winning ticket after the sender\u2019s balance is no longer sufficient to cover the ticket will cause a slash of the sender\u2019s penalty escrow account. This effectively burns a small deposit the sender was required to post, creating a economic disincentive for a sender to double spend. The size of the penalty escrow should be set high enough to deter double spends but low enough that it does not cause too much inconvenience for the sender.ConclusionEthereum Probabilistic Micropayments have several advantages over payment channels for systems where a continuous, granular service is provided to users. The reduction in transaction fees allows for not only efficient micropayments, but also for practical nano payments.Video streaming, electricity/energy markets and bandwidth sharing are good examples of applicable systems. Instead of incurring setup costs per each sender/recipient pair, or using complicated payment channel networks, we only require one on-chain transaction per recipient. Service providers are able to immediately begin servicing users without risking freeloaders. And users can quickly disconnect if they cease receiving the service.This allows services to completely avoid the cost of freeloaders as well as immediately block denial of service attacks as we can require even the very first request to have an attached micro payment.PS. David Salamon independently arrived at probabilistic micropayments during our research before we realized the concept is very similar to PoW mining pool rewards and actually dates back to 1996 in the literature (see our whitepaper for references).", "responses": "13"}, {"title": "Ethereum Constantinople: Everything You Need To\u00a0Know", "author_name": "MyCrypto", "link": "https://medium.com/mycrypto/ethereum-constantinople-everything-you-need-to-know-a47f3a16f3d2?source=search_post", "post_date": "Jan 8", "readtime": "6 min read", "upvotes": "2.2K", "content": "Ethereum Constantinople: Everything You Need To\u00a0KnowLearn about the Ethereum fork coming up around January\u00a016!MyCryptoBlockedUnblockFollowFollowingJan 8", "responses": "7"}, {"title": "Understanding the Ethereum ICO Token\u00a0Hype", "author_name": "BlockChannel", "link": "https://medium.com/blockchannel/understanding-the-ethereum-ico-token-hype-429481278f45?source=search_post", "post_date": "Jun 14, 2017", "readtime": "10 min read", "upvotes": "875", "content": "Understanding the Ethereum ICO Token\u00a0HypeBlockChannelBlockedUnblockFollowFollowingJun 14, 2017I\u2019ve been reading a lot from the community in regards to tokens and the rise of the ICO crowdsale as of late. It\u2019s been fascinating gathering and analyzing perspectives from experts all over the globe as this new method for funding ventures proliferates. There are many individuals sitting on the sidelines, waiting, wishing, for a concise explainer as to why they should get excited, too.This is my attempt to hardsell raising funds on a public chain to developers, investors, and anyone seeking to capitalize on this crucial shift in how businesses can be born.Author: Steven McKie\u200a\u2014\u200aHead of Growth & Product Content @ Purse.io, Founder/Creator of BlockChannelTokens and the Future of\u00a0CryptoSince the advent of bitcoin, the overall excitement around decentralized technologies has grown exponentially. The imagined possibilities of what these new systems will do for humanity have only just begun being explored in-depth. With a market capitalization of currently about ~$40 billion at the time of this writing, bitcoin remains the most valuable, and widely adopted cryptocurrency to date.However, the rise of cryptocurrencies has birthed a few new bread-winners for our growing crypto-family of public blockchains\u200a\u2014\u200aspecifically Ethereum (ETH).Ethereum, which broke onto the scene only within the last 2 years, thanks to a very successful crowdsale, has since experienced astronomical gains\u2026With an immense uptick in adoption from developers, institutions, and some of the largest enterprise level organizations in the world, such as: BP, Toyota, Intel, Microsoft, and more\u2026The core draw of generalized public blockchains like Ethereum is not purely a technical attraction, but more specifically \u201csocio-technical\u201d. The most disruptive aspect, thus far, for Ethereum, has been the growth of \u201ctokenized assets\u201d being created on the Ethereum public chain to create incentivized platforms; wherein the owners of the token use that asset to interact with and utilize the platform itself.The incentives for these tokens have many layers. Though the initial draw to these tokens is technical: the real benefit of tokens is the societal impact they have on the creation of new businesses, and raising funds in a borderless, global manner\u2026without having to ask permission. Let\u2019s jump into the specifics\u2026Smart Contracts 101\u200a\u2014\u200aAn Introduction to Irrational ExuberanceIf you read our previous article on our introduction to Ethereum, you should know by now that the project has the potential to solve major efficiency problems across a plethora of pre-existing industries; as well as create wholly new owned industries.At the center of Ethereum lies the EVM or \u201cEthereum Virtual Machine\u201d, a decentralized computer that can execute \u201csmart contracts\u201d (think mini-applications) that are submitted to run on the Ethereum public chain.These contracts are self-enforcing, meaning that they will run exactly as pre-programmed, without the ability of manipulation or censorship, retroactively (though some will argue that this aspect isn\u2019t true due to past events, that\u2019s a discussion outside the scope of this post). This poses a tremendous advantage, allowing programmers to automate many processes throughout e-commerce, finance, real estate, legal contracts and more.Imagine an escrow system where \u201cJohn\u201d sells a product to \u201cMary\u201d; a smart contract will securely store Mary\u2019s payment, and will release it to John after the confirmation of delivery is made by and outside oracle. This eliminates the need for third parties to oversee the transaction (which creates additional counterparty risk by adding another trust agent to the transaction).Similarly, one can imagine a smart contract that automatically settles countless transactions in the banking sector, eliminating the need for costly settlement systems like the SWIFT network; systems that not only expend a large amount of monetary resources, but also precious human capital and intellect as well; intellect that could be best utilized in other ways than simply moving value from Point A to Point B across the globe.Enter ERC20\u00a0TokensOne of the main capabilities of Ethereum is that it allows a user to create its own token. A token is a representation of value, a sort of digital asset (dasset). The Ethereum developers decided to standardize this process, and so the ERC20 \u2018Token Standard\u2019 was created. This templated-contract standardization contains a series of functions that enables the issuance, distribution and control of the assets in a formalized, standardized manner.A token standard allows for the ease of interoperability between DApps (decentralized applications built on the Ethereum public chain) and the tokens built by the programmers.What is an Ethereum Token\u00a0sale?Many developers have chosen Ethereum as the main platform to kickstart new projects; at the center of this, we have ICOs, which stands for \u201cInitial Coin Offering\u201d (there are other names as well but this is the most prevalent), similar to IPOs (initial public offerings, minus all the securities stuff, but that\u2019s an on-going point of contingency).ICOs are essentially a fundraising mechanism that allows a person/investor to receive a token in exchange for another well-known digital currency like Ether or Bitcoin. Typically, ICOs on the Ethereum network issue ERC20-compatible tokens to its users via smart contracts (barring the organization/individual holding the ICO from creating more tokens than originally specified in the initial contract); this allows developers to take advantage of the security the Ethereum protocol provides, minus all the additional technical overhead and complexity. Without having to worry as much about security (the initial token contract being secure is still of course, a top priority) developers can keenly focus on the application layer; creating a more refined user experience to aid in adoption of their platform/project.It is also the norm that each new team that hopes to raise funding via an ICO also presents a \u2018whitepaper\u2019: a document explaining in detail the pitch of the future company and platform, going as far as to describe in detail the technology behind the proposal itself. [Example: Status ICO Whitepaper]The various formats in which an individual or organization can hold an ICO crowdsale is ever-evolving, however; but, I believe we\u2019ll find a fair methodology that ensures optimal token distribution, and doesn\u2019t create a quick cash exit, burning crowdsale participants.What\u2019s Got People\u00a0Excited?The initial appeal of ICOs should be fairly easy to see. Due to the borderless and decentralized nature of public blockchains like Bitcoin and Ethereum\u200a\u2014\u200athe ease of transferring and moving wealth globally becomes almost effortless.Now, because those transfers are effortless and permissionless, the barrier to entry for investing in a good company/venture is now freely available to everyone\u200a\u2014\u200aeven your gardener.The tokens themselves do not offer the holder any particular rights or actual equity in these projects; however, it does enable the ability for individuals to speculate on the adoption and eventual real-world usage of those systems, creating liquidity and the ability for developers to fund their project and bring it to fruition. It also allows those users/investors to access any platforms or features that the developers create in the future with the token (think of it like an API key, that you pay for, Balaji puts that ever so succinctly, here).With tokens, entrepreneurs have the ability to open up their project to a global audience, allowing them to attract and raise funds from savvy investors all over the world salivating for the next \u201cbig thing\u201d in tech. Technical Expertise, Developer Evangelism, and Product Marketing play a key role in helping ICO holders to establish a base of early-adopters and fuel the initial bout of speculation to get the project off the ground (and enough attention to begin trading on prominent exchanges).Token Sales Thus\u00a0FarWe\u2019ve seen many high profile ICOs thus far. With companies like Storj, raising $30million for their decentralized cloud storage platform; Brave who raised a stagging ~$34mill in roughly 30 seconds; Aragon who raised ~$25 million in about 20minutes; and Gnosis, the originator of the Reverse Dutch Auction, who raised $12million in about 12 minutes.But, we also can\u2019t forget most recently, Bancor, who raised an astounding $140million in just a few hours (insert gasp here).If those figures are stagging and surprising to you, you\u2019re not the only one. But, who\u2019s to say if these are proper valuations or not? This is the first time in history we\u2019ve been given this ability to raise from a global audience, almost instantly. Perhaps these numbers are only a drop in the bucket for what\u2019s to come next? Time will tell, history will play out from here.Picking a Good\u00a0ICOCreating an ERC20 token is easy. Paying a team to create amazing design mockups and marketing pages is even easier. The difficult aspect of ICO investing is learning to filter out the noise, and determine if the team is in it for the technology and use case\u200a\u2014\u200aor a quick buck.Now, you\u2019d probably argue that\u2019s the job of modern day VCs, and in a way you\u2019re right\u200a\u2014\u200athat\u2019s what VCs are good at. Finding the diamonds in the rough from a Founder perspective. Investing in ICOs like Brave\u2019s Basic Attention Token Sale, an offering by an already established entity with a working product and sound team, are likely safer bets. But, the risk/reward there might not be satisfactory (especially after you\u2019ve gotten a taste of 5\u201310x returns, it can be hard to go back). Picking a great project is a combination of art, and science\u200a\u2014\u200adue diligence remains more important than ever, especially when investing your hard-earned savings into such an unregulated and \u201cWild West\u201d like industry.There is no clear cut formula for token investing; it\u2019s a matter of making informed and educated decisions, at the right time. But, fortune favors the bold, no?Legal RisksNo primer on ICOs would be complete without a section on legal risk. As mentioned above, this space is highly unregulated and filled with opportunistic money grabbers looking to make a quick buck on your poorly informed decisions.That said, regardless of how high-profile the token offering, there is nothing stopping a development team from running off with the funds raised via an ICO, except for maybe burning years of social capital. Which, will stop some, but not all (greed can do powerful things, remember this).Lock-up mechanisms (think vesting schedules and cliffs) with token contracts are becoming a more common norm; but, to think that\u2019s enough to give you peace of mind in this (somedays seemingly) lawless jungle of cut throats, would be naive.Since most of these ICOs run with a disclaimer of not guaranteeing returns to investors, if its associated token price plummets to zero based on negligence or malicious actions by the development team\u200a\u2014\u200athere is likely not much legal recourse will do if the developers are good at masking their trail\u2026this is the Wild West remember\u200a\u2014\u200awatch out for cowboys (and cowgirls, it\u2019s 2017).ClosingHopefully this was a concise quick introduction to this growing phenomenon. For now, VCs and traditional accredited investors will do all they can to gain influence and hold ground in this fledging industry; performing the appropriate due diligence to calculate risk; maybe even pick a few winners a long the way.But, once this powerful new paradigm evolves a bit more, we may have finally created the global answer to Silicon Valley\u200a\u2014\u200aonly this time on the internet, where all can be sovereign and free.If you enjoyed this post, be sure to follow BlockChannel on SoundCloud, and you can follow the author, Steven McKie, on Twitter, here.For a more in-depth understanding on the topics discussed above, we\u2019ve compiled a complete reading list for you to enjoy and learn\u00a0more.Ethereum Token Investing Reading\u00a0List:When Your Only Instrument Is Looking At Charts, & Everything Looks Like A BubbleTL;DR The only obvious bubble that appears to exist in the crypto space is this one.keepingstock.netHow Ethereum became the platform of choice for ICO'd digital assetsFor most of the history of blockchain-based currencies and assets, the story has been all about Bitcoin. At a market\u2026techcrunch.comAnalyzing Token Sale ModelsNote: I mention the names of various projects below only to compare and contrast their token sale mechanisms; this\u2026vitalik.caChange the Incentives, Change the WorldJason Kuznicki makes what is in my view an excellent observation about libertarian activism. Moral messages can indeed\u2026www.cato-unbound.orgWhat Initial Coin Offerings Are, and Why VC Firms CareExecutive Summary The venture capital industry is beginning to take a good, hard look at a new financial instrument\u2026hbr.orgThe 4 Stages of a Token SaleToken sales have emerged as a fundraising alternative to traditional venture capital. To this day, $380+ million have\u2026medium.comWho Needs VC? Ethereum and the JOBS Act Could Change Investing - CoinDeskFinance is already on the verge of being disrupted, thanks to blockchain platforms like ethereum. But now that\u2026www.coindesk.comCryptocurrency ICO Education - The BasicsOver the past few months, there has been an increased focus on cryptocurrency ICOs. These initial coin offerings are a\u2026themerkle.comWhat the hell is happening to cryptocurrency valuations?The total market cap for all cryptocurrencies just surpassed $100 billion. The vast majority of these gains have come\u2026techcrunch.comHow to Invest in Digital TokensA Walkthrough for Newcomersmedium.comWill Blockchains Disrupt Venture Capital?Note: These insights were compiled by Travis Scher, who is an employee of Digital Currency Group. They are not intended\u2026insights.dcg.coGoing Full Token\u200a\u2014\u200aThe Impact of ICOsThe world had gone full token. Over the past two weeks, I\u2019ve spoken at Consensus 2017, attended the Token Summit, and participated in a\u2026medium.comWhen is the right time to invest in digital currency?Using dollar cost averaging to build up your digital currency portfolioblog.coinbase.comEconomics of Initial Coin OfferingsBy Avtar Sehra and Vic Arulchandranmedium.comThoughts on TokensTokens are early today, but will transform technology tomorrow.medium.comThe Financial Tech Revolution Will Be TokenizedSince writing about bitcoin rival Ethereum and its visionary creator Vitalik Buterin for Fortune's 40 Under 40 issue\u2026fortune.comWTF is an ICO?It wasn\u2019t very long ago that bitcoin felt nascent, laughable and small. In the ensuing years, bitcoin has matured,\u2026techcrunch.comWhy ICOs are Very Different than Seed CapitalInitial Coin Offerings (ICOs) are all the rage these days and though I\u2019ve written already about how altcoins differ from Bitcoins, ICOs are\u2026medium.com", "responses": "15"}, {"title": "Develop DApps on Ethereum (Tutorial Series for Beginners) [ Part 1\u00a0: Basic Terminology]", "author_name": "Harsh Pokharna", "link": "https://medium.com/technologymadeeasy/develop-dapps-on-ethereum-tutorial-series-for-beginners-part-1-basic-terminology-866d2ce4cf34?source=search_post", "post_date": "Jul 29, 2016", "readtime": "4 min read", "upvotes": "832", "content": "Develop DApps on Ethereum (Tutorial Series for Beginners) [ Part 1\u00a0: Basic Terminology]Harsh PokharnaBlockedUnblockFollowFollowingJul 29, 2016Want to learn how to develop DApps? Can\u2019t figure out where to start from on the internet? Don\u2019t worry! Stay with me and follow this tutorial series (new articles posted daily) and you will be up and running in no time!You don\u2019t need to understand all the crypto economic computer science to start building cool apps. But it will be good to know some of the key terms we will be using and the concepts behind them. So, without wasting any more time, let\u2019s dive into it!The next article in the series is available here.Public Key CryptographyFirst I will give a technical explanation of the concept and then strengthen it with a real life analogy.Technical Explanation.The Public and Private key pair are 2 uniquely related long random numbers.The Public Key is what its name suggests\u200a\u2014\u200aPublic. It is made available to everyone via a publicly accessible repository or directory. On the other hand, the Private Key must remain confidential to its respective owner.Because the key pair is mathematically related, whatever is encrypted with a Public Key may only be decrypted by its corresponding Private Key.Another important aspect is Digital Signature. A digital signature is a \u201cstamp\u201d someone places on the data. This stamp is extremely difficult to forge. Anyone with the corresponding public key can verify that the document was signed with the private key or not (basically if the document is genuine or not).Real Life Analogy.Alice has a box with a lock, a very very special lock!A very very special\u00a0lock!And she has 2 SEPARATE keys. The first one can only turn clockwise (from A to B to C) and the second one can only turn anticlockwise (from C to B to A).Alice picks the key that can turn the lock from A to B to C and keeps it with herself. We will call this as her private key. She makes a thousand copies of the other key, which we call her public key and gives it to her friends, family or anyone who wants to have the key.Now if someone wanted to send Alice a personal document, they would put it in the box, lock it with the public key (from B to A) and send it to Alice. Since only Alice has the private key which can unlock the box (turn from A to B), there is no threat of anyone else opening it.Now suppose Alice wants to put a document in the box, lock it with her private key (from B to C) and send it to someone. Why would she want to do this? Because if I get this box which says \u201cFrom Alice\u201d on the label, how can I believe it? But wait, I have Alice\u2019s public key which when I turn clockwise on the box, nothing happens. But if turn it anticlockwise, it opens. This means the document actually came from Alice. This is called Alice\u2019s digital signature!Cryptographic Hash\u00a0FunctionIt is a function which takes a message as an input and returns a fixed length alphanumeric string, called \u2018hash\u2019 [not that one silly!]. What is the big deal about that?A hash function has 3 properties:1. It is super easy to calculate hash of a given message.2. It is super tough (like impossibly tough) to figure out the message from a given hash.3. Two messages differing only slightly will have their hashes nowhere close to each other.For now knowing these properties is enough. We will talk about how to use them in an upcoming article.Peer to Peer NetworkingServer based vs P2P\u00a0networkUnlike the Client Server model, peer-to-peer networks consist of networks of computers connected to one another directly without sending requests to any server. All computers taking part in the network are considered to be \u2018peers\u2019 and have equal standing within the network as one another.All Ethereum nodes are peers in a distributed network, there\u2019s no centralized server.Can you think of an example?Yes, BitTorrent!These are the core technologies that are used in Ethereum. In the next lecture (I will post it today itself), we will discuss on the other technologies such as Blockchain, Ethereum Virtual Machine, Node, Miner, Proof of Work, Ether and DApps.If you enjoyed reading this article, hit the little green heart button to show your love! It gives me the energy to write more\u00a0:)To stay updated with new technologies, please follow\u00a0:)And if you want your friends to read this too, click share!References: https://medium.com/@vrypan/explaining-public-key-cryptography-to-non-geeks-f0994b3c2d5#.ddtedzjp8", "responses": "5"}, {"title": "The Easiest Way to Create an Ethereum\u00a0Wallet", "author_name": "BitNautic", "link": "https://medium.com/bitnautic/the-easiest-way-to-create-an-ethereum-wallet-d895648967fa?source=search_post", "post_date": "May 9, 2018", "readtime": "2 min read", "upvotes": "218", "content": "The Easiest Way to Create an Ethereum\u00a0WalletBitNauticBlockedUnblockFollowFollowingMay 9, 2018How to Create an Ethereum Wallet with\u00a0MetaMaskIn this tutorial we are going to show you the fastest and easiest way to get started in cryptocurrency trading by creating your very first Ethereum Wallet.The best way is to create one is by using MetaMask, an incredibly powerful and easy to use browser extension, compatible with all the most used browsers.First of all you have to install the extension/addon at one of the following links, depending on which browser you are using.ChromeFirefoxOperaIn this example we\u2019re going to use Chrome. First click on the \u201cAdd to Chrome\u201d button.Now click \u201cAdd extension\u201dIn the top-right corner of your browser you should now see the MetaMask fox logo. Click on it.The extension will ask you for a password. Choose an effective password and click on Create.Now you will be given a set of random words that will allow you to recover your account should you lose the password. Save them as a file or write them down and store them safely.And\u2026 It\u2019s Done! Now you can copy your ethereum wallet address and use it to buy Ether or Tokens!Thank you all for the support!To know more visit: BitNauticFollow BitNautic news on:InstagramFacebookTwitterLinkedinRedditJoin our Telegram:BitNautic official Telegram channel: ChannelBitNautic official #Telegram chat: Group", "responses": "1"}, {"title": "Why Infura is the Secret Weapon of Ethereum Infrastructure", "author_name": "ConsenSys", "link": "https://media.consensys.net/why-infura-is-the-secret-weapon-of-ethereum-infrastructure-af6fc7c77052?source=search_post", "post_date": "Apr 27, 2018", "readtime": "5 min read", "upvotes": "1.3K", "content": "Why Infura is the Secret Weapon of Ethereum InfrastructureFind out how platforms like Metamask, CryptoKitties, Status, and UJO all utilize Infura for scalable blockchain solutionsConsenSysBlockedUnblockFollowFollowingApr 27, 2018Building a decentralized future is about more than tokenomics or cryptography, institutional adoption or even regulation. For Ethereum and the entire blockchain ecosystem to grow, it falls on the community to build the infrastructure components that keep the network running. Across the Ethereum network, there is a need for utilities that lower the barrier of entry and simplify access to Ethereum data. Among the most essential of these are Infrastructure-as-a-Service (IaaS) products. Leading the way is Infura, which offers developers a suite of tools to connect their apps to the Ethereum network and other decentralized platforms.Many of the blockchain space\u2019s most remarkable projects\u200a\u2014\u200aMetamask, CryptoKitties, UJO, Radar Relay, Cipher Browser, uPort\u200a\u2014\u200autilize Infura\u2019s APIs to connect their applications to the Ethereum network. In doing so, Infura provides the fundamental infrastructure required to handle both the short-term spikes that can often occur during token launches and essential, longer-term scaling solutions. An average of 6.5 billion JSON-RPC requests per day on the Ethereum network are channeled through Infura infrastructure, making the project an essential pillar of the ecosystem.\u201cOur mission is to facilitate access to Ethereum and the opportunities it provides,\u201d says Infura Lead Systems Engineer Nicola Cocchiaro. \u201cWe\u2019ve always believed that only through widespread adoption can the enormous potential of Ethereum be fully realized. One of the ways that we aim to help achieve that goal is by providing infrastructure as a service. Over the the last two years, this has put us in a privileged position to witness the growth of the Ethereum ecosystem firsthand, and the growth has been explosive both for it and us.\u201dSome numbers on the rise of Infura: \u201cWe now have more than 15,000 registered developers, we\u2019re serving over 6 billion API requests per day and transferring roughly 1.6 petabytes of data per month,\u201d says Cocchiaro. \u201cIn 2017 alone, we relayed transactions that moved more than 7 million ether, with almost 9 million more so far in 2018. And most of this growth happened over the second half of 2017.\u201dA view of transactions served by Infura from June 2017 to April 2018. The spike in December is the CryptoKitties launch.\u201cInfura essentially provides the necessary tools for any application to start developing on Ethereum immediately, without the need to run the complicated infrastructure themselves,\u201d says Mike Godsey, Product Manager. \u201cThis is equally necessary for developers with no traffic testing on networks such as Kovan, Rinkeby, or Ropsten, or ones with tons of traffic running on Mainnet. Infura provides a connection for all developers utilizing the Ethereum blockchain.\u201dThe most well-known portion of the Infura infrastructure is the network of hosted Ethereum clients that spans four Ethereum networks: Mainnet, Ropsten, Rinkeby, and Kovan. \u201cThese are load-balanced groups of nodes, that we can scale to meet demand fairly easily, and that we keep up-to-date and secure,\u201d says Cocchiaro. \u201cWe have TLS-enabled APIs including JSON-RPC, REST and websocket endpoints as ways to access our node network as if it was your local node. Infura also has additional features built on top of these endpoints for reliability and added value, like the feature we call Transaction Assurance.\u201dEthereum nodes are only one part of Infura stack: \u201cWe also host IPFS nodes and a public IPFS gateway. We\u2019re in the process of building additional decentralized storage products based on both IFPS and Swarm, that we will detail in the near future,\u201d says Cocchiaro.One of the central pieces of the Infura architecture is a middleware layer called Ferryman. Cocchiaro explains: \u201cFerryman is Infura\u2019s internal middleware layer that enables smart routing, which allows requests to be sent to different ends of the Infura infrastructure based on the RPC method and other factors. This provides the ability to scale and tune portions of the infrastructure independently depending on traffic needs; in addition to aggressive caching and indexing of blockchain data, smart routing can make it so that incoming requests don\u2019t need to hit a live node at all, and response times are greatly decreased.\u201dInfura\u2019s modular scaling solutions unlock essential network capacity for any project that is or expects to be pushing large amounts of traffic through the Ethereum Network. \u201cWith an ever-growing blockchain, keeping a local node synced and up to date has traditionally presented challenges that typically relate to a combination of storage, bandwidth and memory usage,\u201d says Cocchiaro. \u201cAdditionally, ICOs and other high-traffic dapps have concerns of scaling, sometimes transient, sometimes more permanent, that are not easily solved with local infrastructure.\u201dThe range of projects that utilize Infura\u2019s network is broad. For example, MetaMask uses Infura with a zero-client approach, connecting to Infura\u2019s remote infrastructure in order to serve over one million installed users. Some projects\u200a\u2014\u200alike Mist and Status\u200a\u2014\u200aare working towards utilizing a hybrid approach that relies on Infura\u2019s remote nodes in moments of network stress. In cases where scale is the main concern, like that of CryptoKitties, Infura worked together with developers across the ecosystem to keep the network running smoothly.Looking forward, Infura\u2019s growing platform of utilities will include a developer portal to give insight and monitoring to developers using the Infura network as well as more advanced scaling solutions. \u201cIn order to better serve developers using Infura, we are introducing a new version of our API key that will give apps better visibility into how they are using the network. We are also introducing an \u201cInfura for Business\u201d product that will help prepare developers for production traffic and provide them with the necessary support to keep their applications running smoothly,\u201d explains Mike Godsey.\u201cWe are actively involved in the expanding landscape of Ethereum and plan to incorporate many of the new developments directly into our infrastructure services,\u201d says Godsey. \u201cWe are very excited to see sharding, Plasma, Casper, and advanced state channels start to come online, and will continue to watch those very closely.\u201d", "responses": "4"}, {"title": "Ethereum Smart Contracts in C# - Introducing EthSharp", "author_name": "Jordan Andrews", "link": "https://hackernoon.com/ethereum-smart-contracts-in-c-introducing-ethsharp-12c7a5db0b5?source=search_post", "post_date": "Sep 5, 2017", "readtime": "3 min read", "upvotes": "1.2K", "content": "Ethereum Smart Contracts in C# - Introducing EthSharpJordan AndrewsBlockedUnblockFollowFollowingSep 5, 2017Note: This is a little outdated\u200a\u2014\u200aEthSharp was ultimately discontinued. However, the work has been furthered on Stratis. Learn more here.The Ethereum development ecosystem is young. As a result, the barriers-to-entry to get started building decentralized applications on the Ethereum blockchain are high. Budding Ethereum developers are limited to using unfamiliar languages and development environments, and command-line tools for just about everything.For enthusiasts, this isn\u2019t a problem, but it\u2019s a hindrance to mainstream adoption, especially considering the ridiculous pace at which developers already have to learn new frameworks to keep up. Companies that want to venture into Ethereum development have to either hire new talent or retrain their existing teams. Individuals looking to take that step and start building out their grand idea have to jump the mental hurdle of committing time to learn and understand new syntax before they can work on a prototype.This is why I\u2019ve created EthSharp, an organisation that plans to make Ethereum and blockchain development as easy as web development. And it starts with a new (old?) language for smart contract development.", "responses": "8"}, {"title": "Deep dive into Ethereum\u00a0logs", "author_name": "banteg", "link": "https://codeburst.io/deep-dive-into-ethereum-logs-a8d2047c7371?source=search_post", "post_date": "Jan 4, 2018", "readtime": "4 min read", "upvotes": "1.4K", "content": "Deep dive into Ethereum\u00a0logsbantegBlockedUnblockFollowFollowingJan 4, 2018Hey kids, today we are going low level trying to understand how Ethereum events and logs work. Put web3 away for a while as it abstracts things and we\u2019d like to get as bare as it gets.Smart contracts generate logs by firing events. Here\u2019s a transaction receipt that contains one log entry.The log entry consists of one topic and a data field. The first topic refers to the specific event, but we don\u2019t know which one yet. To decode the data we need to obtain ABI of the contract found in the address field.We are interested in items with the type event. Here\u2019s a sample event.{  \"anonymous\": false,  \"inputs\": [    {      \"indexed\": false,      \"name\": \"from\",      \"type\": \"address\"    },    {      \"indexed\": false,      \"name\": \"to\",      \"type\": \"address\"    },    {      \"indexed\": false,      \"name\": \"tokenId\",      \"type\": \"uint256\"    }  ],  \"name\": \"Transfer\",  \"type\": \"event\"}To find out which event the topic refers to we need to compute a signature of each event and find the matching one. Signature is a keccak hash of event name and input argument types, argument names are ignored. For event Hello(uint256 worldId) the signature will be keccak('Hello(uint256)').> keccak('Pregnant(address,uint256,uint256,uint256)')241ea03ca20251805084d27d4440371c34a0b85ff108f6bb5611248f73818b80> keccak('Transfer(address,address,uint256)')ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef> keccak('Approval(address,address,uint256)')8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925> keccak('Birth(address,uint256,uint256,uint256,uint256)')0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad5> keccak('ContractUpgrade(address)')450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305As we can see, the signature of Transfer event matches the first topic. Now we can decode the data.> types = [i['type'] for i in e['inputs']]['address', 'address', 'uint256']> names = [i['name'] for i in e['inputs']]['from', 'to', 'tokenId']> values = eth_abi.decode_abi(types, log['data'])('0x0035fc5208ef989c28d47e552e92b0c507d2b318', '0x646985c36ad7bf4f3a91283f3ea6eda2af79fac6', 107696)> dict(zip(names, values)){'from': '0x0035fc5208ef989c28d47e552e92b0c507d2b318', 'to': '0x646985c36ad7bf4f3a91283f3ea6eda2af79fac6', 'tokenId': 107696}We can finally read the log. The message says:\u201cTransfer from 0x0035\u2026 to 0x6469\u2026 of token\u00a0107696\u201d.Indexed fieldsEach indexed field generates a new topic which is excluded from the data. This allows for efficient search but makes parsing a bit more complicated.Let\u2019s look at another receipt:This one has three topic fields and a small data field. We can already tell that the first topic is Transfer(address,address,uint256) despite the different argument names in this contract.{  \"anonymous\": false,  \"inputs\": [    {      \"indexed\": true,      \"name\": \"from\",      \"type\": \"address\"    },    {      \"indexed\": true,      \"name\": \"to\",      \"type\": \"address\"    },    {      \"indexed\": false,      \"name\": \"value\",      \"type\": \"uint256\"    }  ],  \"name\": \"Transfer\",  \"type\": \"event\"}The remaining two topics are simply indexed inputs. The only value in data is the remaining uint256.> types = [i['type'] for i in e['inputs'] if not i['indexed']]['uint256']> names = [i['name'] for i in e['inputs'] if not i['indexed']]['value']> values = eth_abi.decode_abi(types, log['data'])(5000000000,)> indexed_types = [i['type'] for i in e['inputs'] if i['indexed']]['address', 'address']> indexed_names = [i['name'] for i in e['inputs'] if i['indexed']]['from', 'to']> indexed_values = [eth_abi.decode_single(t, v) for t, v in zip(indexed_types, log['topics'][1:])]['0x00b46c2526e227482e2ebb8f4c69e4674d262e75', '0x54a2d42a40f51259dedd1978f6c118a0f0eff078']> dict(chain(zip(names, values), zip(indexed_names, indexed_values))){'from': '0x00b46c2526e227482e2ebb8f4c69e4674d262e75', 'to': '0x54a2d42a40f51259dedd1978f6c118a0f0eff078', 'value': 5000000000}Note that Ethereum always uses integers to represent numeric values, so we got the value in the minimal denomination. Move the decimal point left by decimals found in the contract, 3 in this case. The message reads:\u201cTransfer from 0x00b4\u2026 to 0x54a2\u2026 of 5,000,000 tokens\u201d.QueryingNow you are ready to do some search. You can query the blockchain using json-rpc api which is provided by full nodes like geth or Parity or a service like Infura. Bloom filters allow you to scan the entire blockchain in seconds and find logs matching the specific topic.You can also specify search range with fromBlock and toBlock, limit the search to specific contract address and omit some of the topics with null which works like a wildcard. The full specification can be found here.Of course, everything described here is already implemented in web3 which allows you to conveniently query the events by name and decodes logs data automatically, but if you care about performance like I do, this approach could save you a lot of time.If you learned something new, clap and subscribe to crypto eli5.", "responses": "7"}, {"title": "Synergy in\u00a0Ethereum", "author_name": "CodeTract", "link": "https://medium.com/@codetractio/synergy-in-ethereum-52eb8fd6fa2e?source=search_post", "post_date": "Mar 21, 2017", "readtime": "9 min read", "upvotes": "288", "content": "Synergy in\u00a0EthereumCodeTractBlockedUnblockFollowFollowingMar 21, 2017Ethereum, this is just the BeginningIn recent days, we saw Ether, the native token of the Ethereum network hitting new highs in volume, price and market capitalization, closing the gap between Bitcoin and driving speculation to what some call a \u201cflippening\u201d\u200a\u2014\u200aa shift in attitude from Bitcoin to Ethereum. Here we take a look at the synergy Ethereum provides and attempt to convince you to explore Ethereum further.Ethereum went live in July 2015, a mere 1.6 years since its genesis, led by founder Vitalik Buterin with the goal of building decentralized applications. Starting from an online public crowdsale, Ethereum had since grown to a market capitalization of $3.6b. Ether, the native token of the Ethereum network is used to pay for state changes on the blockchain. Ethereum enables smart contracts to exist on the blockchain, akin to an open Application Programming Interface (API) of sorts, allowing public interactions with smart contracts. This brings unprecedented flexibility and potential beyond just mere payments and value transactions. In fact, Ethereum is so much more complex that even the New York Times quoted it to be \u201ccomplicated enough that even people who know it well have trouble describing it in plain English\u201d.To those who are new to Ethereum, the underlying technology running this system is the blockchain. The blockchain is like a permanent ledger that stores all the records of transactions that took place since the genesis. To interact with this, users can run a node by downloading all the blocks in this ledger. There is a group of miners performing proof of work to verify transactions and add them to the blockchain. Users performing transactions will need to pay a small fee in gas costs (ether) to the miners in order for their transactions to be verified and confirmed. People who are interested in more details can refer to the Ethereum whitepaper.The Potential of\u00a0EthereumTraders may be really happy to delve into another crypto-token (ether) and take more profits. And indeed this is one good opportunity as with all other currencies. But lets not lose ourselves just yet. Beyond just another trading instrument, ether is a means to run many services on the Ethereum blockchain, like fuel for energy. Smart contracts when deployed can provide many different use cases. Even as we write, we are already seeing many decentralized applications making use of smart contracts to provide a myriad of services on Ethereum. Below is just a small non exhaustive list of examples.AKASHA is a next-generation social media network creating a planetary-scale information network immune to censorship by design, where your thoughts and ideas will echo throughout humanity\u2019s existence.Attores is a Smart Contracts as a Service platform. We make it easy for you to write, submit and execute Smart Contracts on the blockchain.Augur combines the magic of prediction markets with the power of a decentralized network to create a stunningly accurate forecasting tool\u200a\u2014\u200aand the chance for real money trading profits.Balanc3 is a smart contract powered Triple-Entry Accounting system. Balanc3 uses the non-repudiability and comprehensive audibility of the blockchain to guarantee the integrity of accounting records.BoardRoom is a next-generation organization governance apparatus that enables distributed decision-making on the blockchain. The platform has systems associated with the stages and organization of decision-making.CodeTract provides a service for employees to receive their salary in Ethereum fiat money tokens and providing a seamless on-boarding experience onto Ethereum.Decentralized Capital provides users with a secure, convenient way to bring Dollars, Euros, and other government backed currencies onto and off of the Ethereum network.Digix is an asset-tokenisation platform built on Ethereum. They leverage the blockchain\u2019s immutability, transparency and auditability by applying it to precious physical assets.Edgeless is a Ethereum smart contract-based casino that offers a 0% house edge and solves the casino transparency question once and for all.Ethereum Name Service offers a secure and decentralised way to address resources both on and off the blockchain using simple, human-readable names.Etherisc is building decentralized insurance applications, making the purchase and sale of insurance more efficient, enable lower operational costs, provide greater transparency into the industry of insurance compared to traditional operations, and democratize access to reinsurance investments.EtherLoan is a decentralized crowd-lending platform that enables financing transactions without middle-men, at very low cost and with a high security level, thus facilitating access to loans for developing economies and small loaners.Etheroll is an Ethereum smart contract for placing bets on provably-fair dice game using Ether with no deposits or sign-ups.Etherplay is a skill game platform where players compete for highscores while playing fun little games. Similar to arcade machines, players pay a small fee to enjoy some fun time. The twist is that you get some money back if your score is among the highest.FirstBlood is a decentralized eSports gaming app that will allow individuals to test their skills and compete in 1v1 and team vs team matches for popular online games such as League of Legends, Dota 2 and Counter-Strike: Global Offensive.Gnosis is enabling complex predictions with an easy to use prediction market.Golem is a global, open sourced, decentralized supercomputer that anyone can access. It\u2019s made up of the combined power of user\u2019s machines, from personal laptops to entire data centers.hack.ether.camp is creating the ideal innovation environment for startups by utilizing blockchain technology for the release of a Virtual Accelerator.Humaniq is developing a completely new banking experience by dissolving all the barriers of archaic banks such as the need to come to a branch, doing endless paperwork, dealing with hard-to-use, buggy mobile apps, and protecting data with hard-to-remember, complex passwords.Iconomi enables the creation of your own Digital Asset Arrays\u2122 (DAA) from a wide variety of digital assets. Manage them and compare your performance with others. Attract supporters and make your mark in the new distributed economy.iEx aims to provide distributed applications running on the blockchain a scalable, secure and easy access to the services, the data-sets and the computing resources they need. This technology relies on the Ethereum smart contracts and allows building a virtual Cloud infrastructure that provides high-performance computing services on demand.JAAK connects songs, films, and TV shows directly to the artists, producers, writers, and organisations that create, own and distribute them.Lunyr is an Ethereum-based decentralized crowdsourced encyclopedia which rewards users with app tokens for peer-reviewing and contributing information. We aim to be the starting point of the internet for finding reliable, accurate information.Maker is a decentralized autonomous organization on the Ethereum blockchain seeking to minimize the price volatility of its own stable token\u200a\u2014\u200athe Dai\u200a\u2014\u200aagainst the IMF\u2019s international currency basket SDR.Matchpool will allow individuals to create \u201cpools\u201d based on particular interests. These pools aim to facilitate connections among friends and niche communities and will come with a number of features including messaging and a digital currency wallet.Melonport enables participants to set up, manage and invest in digital asset management strategies in an open, competitive and decentralized manner.Monolith brings the Visa payments network to Ethereum. It represents a generational leap from traditional debit cards by putting the user back in control, offering an entire platform of features and setting the bar for security.Project Oaken makes \u2018ACORNs\u2019, for each physical application within the real world. Our IoT blockchain platform design uses Nodejs to interact with the gpio of the machine where hardware can be monitored and controlled. Our secure hardware environment utilizes Secure Elements in each acorn to protect against external threats. Acorns each have a special purpose, but can be easily scaled and replicated for multiple applications.raidEX is a decentralized exchange built on Ethereum and Raiden off-chain state channel technology that fixes the custodian issue but preserving high throughput and low latency.Singulardtv is a blockchain entertainment studio, smart contract rights management platform and video on-demand portal.Slock.it makes Airbnb apartments become fully automated. Smart objects can be rented on demand and unused vehicles get a new lease on life. We\u2019re developing the future infrastructure of the sharing economy.Status is a mobile Ethereum OS. Seamlessly interact with the emerging ecosystem of DApps, wave goodbye to central intermediaries, and take control of your data.uPort is an open source software project to establish a global, unified, sovereign identity system for people, businesses, organizations, devices, and bots.Ujo is a new shared infrastructure for the creative industries that returns more value to content creators and their customers. Their open platform uses blockchain technology to create a transparent and decentralised database of rights and rights owners and automates royalty payments using smart contracts and cryptocurrency.Weifund is making crowdfunding user-friendly, thoroughly-tested, and interoperable. It is an open platform for crowdfunding campaigns.WeTrust is a collaborative savings, lending and insurance platform that is autonomous, agnostic, frictionless, and decentralized.Winsome is leading the gambling revolution powered by Ethereum through dapps that provides a full user experience to our players with a graphical interface, 3D and very fast play times.Since they all live on Ethereum, they are able to interact with each other easily, creating synergy and building an ecosystem of applications.Evidently, Ethereum has the vast potential to reach many parts of society and not just the technically inclined and the domain experts. These mentioned Dapps are just the tip of the iceberg; many practical problems remained to be solved and Ethereum could be the answer. The advent of IoT could bring much convenience to users but also problems in the management and communication of these smart devices. There is yet to be an international standard for all devices plugged into a network to be communicating with each other, bringing about inefficiencies when owners want to build their own smart homes or even manufacturing processes. Ethereum has the potential to monitor and track all such devices and interact with others on the same network. It doesn\u2019t stop here. Supply chain management had been a pain for many system integrators. Component and sub-component tracking is tough and companies spend millions each year to maintain a system just for database tracking. Ethereum might also just solve that.With the launch of Enterprise Ethereum Alliance, big corporations like British Petroleum, JP Morgan, Microsoft and Wipro have started to come on-board the Ethereum bandwagon. We can expect wider use of Ethereum in enterprises and better compliance with regulations. The list goes on.Further developments by the Ethereum Foundation like Casper and Sharding allows for the scaling of the platform, ensuring sufficient capacity to manage future growth in users and transactions. Swarm, on the other hand, will enable decentralized cloud storage of files.With this much potential in Ethereum, there is little reason why it can\u2019t be the top platform of choice for services and applications. Why build another blockchain when we can just concentrate on building apps on Ethereum to provide services? However, a fine line stands between hype and growth. To the man in the street, there is still much uncertainty to enter into this vibrant eco-system. As with all developments, sustained growth and long term progress requires mass or mainstream adoption beyond speculation and trading. Hence, mainstream adoption of Ethereum by all, enterprises and individuals alike, should and must be the aim.A Push and A Pull\u200a\u2014\u200aSteps Towards Mainstream AdoptionIt is important that Ethereum is developing as a holistic eco-system to sustain its own growth. Many initiatives and improvements in recent months to improve the user and dev experience had helped in attracting more participation in the Ethereum platform, both from other blockchains and people totally new to this industry. Many aspects are being worked on by the community, from making more stable clients, creating services distinct to Ethereum, creating payment options, creating proxies or substitutes of existing traditional services, to communicating with other chains. Yet it would be challenging to sustain this continual push without a pull to Ethereum.We believe Ethereum is poised for mainstream adoption. Beyond building familiar mediums of exchange like US dollars and an easy platform for exchange like our Token Auction, it is also imperative to create a stable and recurring usage of these services\u200a\u2014\u200aa pull factor. Salary satisfies these criteria as it is stable, recurring and is the source which spur other routine transactions such as expense on products and services to occur. Therefore, if the salary transaction occurs in Ethereum, it will increase the likelihood for subsequent transactions to be executed in Ethereum, pulling more people to use the platform.Direct salary credit and expense in\u00a0EthereumWe have set out to create a service in cooperation with employers such that employees have the option to receive their salary in USDCT, a US dollar backed Ethereum token. For existing Ethereum users, this will provide an avenue to reduce dependencies on centralized forms of exchanges. For many other users of this service, this will be their first contact with Ethereum and it is very important to leave them with a good impression consisting no less than a fully end to end mobile experience.The initial targeted markets will be academia, startups, venture capital firms, tech companies, companies already experimenting with Ethereum and blockchain, followed by the wider community. This has the potential to dramatically increase mainstream adoption of Ethereum.This indeed will be an exciting time for Ethereum. A beginning it shall be.Visit Ethereum main site to learn more.Visit our site to see how we are enabling employees to receive part of their salary in Ethereum tokens.", "responses": "8"}, {"title": "A 100% fair Ethereum-based mechanism for generating sets of random numbers for online\u00a0gambling", "author_name": "FireLotto", "link": "https://medium.com/@FireLottery/a-100-fair-ethereum-based-mechanism-for-generating-sets-of-random-numbers-for-online-gambling-528457b07b6f?source=search_post", "post_date": "Oct 1, 2018", "readtime": "3 min read", "upvotes": "8.2K", "content": "A 100% fair Ethereum-based mechanism for generating sets of random numbers for online\u00a0gamblingFireLottoBlockedUnblockFollowFollowingOct 1, 2018Firechain 3.0How it worksAt the beginning of a game session, the server generates a private 256-bit key to the game session by generating private keys to the Ethereum wallet, which ensures the key\u2019s strength and its unpredictability for the client. After that, a public key is created as a hash of the server private key and sent to the client. At the end of the session, after receiving the server private key, the client can check its authenticity by using the public key. In order to get a new random number from the server, the client generates its own random number which is unknown to the server (the client seed) and sends it to the server along with the minimum and maximum values of the random number being requested. While client seeds are generated and sent automatically, the player can see the random number being sent and change it if desired. Next, the server sends the random number received from the client, the range of the number being requested, and its own private key to the Ethereum smart contract, where a new random number is generated from the server secret key, the random number range, and the client\u2019s random number using the following equation:PublicRandomResult[i] = Hash(ServerSecretHash[i-1], ClientRandomSeed[i]) % (Max[i]\u200a\u2014\u200aMin[i] + 1) + Min[i];The value obtained is sent to the client. This value is the pseudo-randomly drawn number for this step of the game. Unpredictability and the big length of the hash (256 bits) ensure that random numbers are normally distributed. The server secret key to the next request is generated by the Ethereum smart contract as a hash of the previous private key and the current result:ServerSecretHash[i] = Hash(ServerSecretHash[i-1], PublicRandomResult[i])This is the way in which a chain of blocks is made where each secret hash is influenced by the initial server key, client random numbers, random number ranges, and results. In such a mechanism, both the initial server key and the sequence of client random numbers and their ranges determine game results. The inclusion of random number ranges into input data ensures that random numbers drawn are interpreted definitively. At the end of the game session, the client receives the private key to the game session and the entire game history. The player can send the history to the smart contract and the smart contract will confirm that the random numbers were generated according to the rules described above and the code of the smart contract itself, which means that the server could not tamper with the results and the client could not predict them either.TransparencyThe server affects game results only by generating a secret key at the beginning of the game session. The server does not know in advance what random numbers the client will send, so it cannot tamper with the results. The audited open-source smart contract acts as a pseudo-random number generator using the server key and client seeds, and it also acts as a decentralized auditor which ensures that the sequence or game results is calculated according to the rules and the smart contract code. After the end of the game session, all the server secret keys become available to players in the server statistics. The player can check if the game was fair. The player in their turn cannot predict the outcomes of the game because he or she does not know the server secret hashes and receives only the resulting hashes after sending the data to the server. It is impossible to calculate the initial data using the result of the hash function.AdvantagesThis mechanism allows users to play instant win games without delays or commissions. The smart contract generates random numbers and server secret hashes and audits game sessions without adding entries to the blockchain, which means that no gas is required and there are no charges for the game. The mechanism is perfect for any type of gambling games as it can generate a chain of random numbers for an almost infinite game session.Patented mechanism! Will use it:Blockchain lottery Fire LottoBlockchain poker room Cash Poker Pro", "responses": ""}, {"title": "Get Ropsten Ethereum\u200a\u2014\u200aThe Easy\u00a0Way.", "author_name": "Moritz Neto", "link": "https://medium.com/bitfwd/get-ropsten-ethereum-the-easy-way-f2d6ece21763?source=search_post", "post_date": "Feb 7, 2018", "readtime": "3 min read", "upvotes": "5K", "content": "Get Ropsten Ethereum\u200a\u2014\u200aThe Easy\u00a0Way.How to get Ropsten Ethereum in the easy\u00a0way.Moritz NetoBlockedUnblockFollowFollowingFeb 7, 2018Our Faucet Is LIVE ON PRODUCT HUNT\u200a\u2014\u200aSEND US SOME LOVE https://www.producthunt.com/posts/ethereum-ropsten-faucet\ud83e\udd14 What is Ropsten Ethereum?Ropsten Ethereum, also known as \u201cEthereum Testnet\u201d, are as the name implies, a testing network that runs the same protocol as Ethereum does and is used to testing purposes before deploying on the main network (Mainnet).Ethereum has several networks. Your Valuable ETHs are in the Main Net. The rETHs are on the Ropsten one.Ropsten ETHs are used for testing purposes. When developers are building dApps, or experimenting on the network, to avoid losing money paying real ETH for transaction fees and smart contract deployments, it\u2019s better to use the Ropsten Network.\ud83d\udcb0 How much Ropstens Ethereums are\u00a0worth?Monetarily, nothing. If they had any financial value associated with them, they would lose their testing purpose.Will they one day have real financial value?My answer to this question is:What is your definition of\u00a0real?A piece of paper that burns? Highly complex cryptographic assets of value that you don\u2019t understand? Minerals? Land? Love? Time?IMO reality is equals to perception.And perception changes all the time. Litecoin is viewed kinda\u2019 as the \u201ctest-net\u201d for BTC where features are tested and implemented earlier than they do on the bitcoin network.There is a tale of someone that once payed $500 for a few thousand Ropstens.But anyways\u2026I\u2019m just teasing you \ud83d\ude01. You won\u2019t get rich stacking up Ropsten ETH!!!\ud83d\udeb0 What is an Ethereum\u00a0Faucet?It\u2019s a pool of Ropsten Ethereum from where you require rETHs and it sends them to you automatically.Straight to your address. Instantly. Free. With one single click.\ud83c\udfd7\ufe0f Why Have You Built\u00a0One?Because the Ethereum-Community needs this. Even if simple, it is an extremely meaningful resource to help developers and users experiment with the technology.Every single time that someone starts to work on an application and smart contracts, they will need Ethereum Ropstens to start.At this point in time there are a few ways of getting Ropsten Eths:Mining with your computer.Asking someone who mines on their computer.Requesting from a faucet.There are a very few Faucets out there. All boring \ud83d\ude34.None of them look as good as the one we just launched \ud83d\ude0e\u200a\u2014\u200aLEGIT.You can check bitfwd\u2019s faucet HEREWhat can you do with Ropsten Ethereum? Your own\u00a0TOKEN!Alright, so you may be asking yourself, how could you actually use these Ropsten Ethereums?Well\u2026 It\u2019s your lucky day you future Crypto-Head.And the day just started\u00a0\ud83d\ude09I\u2019ve put together a killer TUTORIAL teaching you how to deploy your own ERC20 Token in less than 20 minutes. No coding experience needed.\ud83d\udc49\ud83d\udc49Here is the TUTORIAL.\ud83d\udc48\ud83d\udc48Yes, you will need Ropsten Ethereums to complete it!\ud83d\udea8\ud83d\udea8WAIT, THE BEST IS\u00a0NOW\ud83d\udea8\ud83d\udea8We are launching our Faucet on PRODUCT\u00a0HUNT!!!It means that it will reach thousands of people and help the Crypto-Community move forward!!!So SEND US LOVE ON PRODUCT HUNT \u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\u2764\ufe0fHere is the link for our project\u00a0: https://www.producthunt.com/posts/ethereum-ropsten-faucetLIVE ON PRODUCT HUNT\u200a\u2014\u200aSEND LOVE https://www.producthunt.com/posts/ethereum-ropsten-faucetP.S. If you like it give me at least a dozen claps for good luck in crypto this year\u00a0;)If you want to talk crypto and get more damn good Crypto Content add me on Linkedin Moritz Neto and Twitter @mrtzneto!!!", "responses": "5"}, {"title": "DFINITY vs.\u00a0Ethereum", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/dfinity-vs-ethereum-44c97b4ad55b?source=search_post", "post_date": "Aug 12, 2018", "readtime": "7 min read", "upvotes": "1.93K", "content": "DFINITY @ Nasdaq, PresentationDFINITY vs.\u00a0EthereumWith an introduction to\u00a0NervosMichael K. SpencerBlockedUnblockFollowFollowingAug 12, 2018There\u2019s no doubt that Ethereum is the leading public blockchain, that is, a decentralized platform that runs smart contracts. However NEO, DFINITY, Cardano and EOS are trying to out-do it now.While certainly public blockchain represent a new kind of shared global infrastructure that is interesting to watch, it seems as if how they scale and the 3rd generation dApp platforms are better iterations of the older and more established ones.Ethereum itself was bootstrapped via an ether presale in August 2014 by fans all around the world. If in 2014 EOS stole \u201cdecentralization\u201d from Ethereum as its buzz-word to replicate its mad success, four years later DFINITY is thoroughly milking the \u2018world computer\u2019 analogy to make its point. To the lay person this is somewhat perplexing.If Ethereum was developed in response to the lack of capabilities within the Bitcoin protocol, the tangents that Cardano and DFINITY represent need to be watched, along with even newer solutions that will come out of China, such as Nervos.When Jan Xie wrote about Nervos, I was immediately intrigued. The era of inter operable protocols that allows enterprises to build and deploy decentralized applications (dApps) is quickly coming. Needless to say, it\u2019s difficult to keep track of what is going on now as there are so many MainNets that have gone live and in particular Chinese blockchains are just getting their feet wet now.Jan Xie and his\u00a0friendsThe Blockchain Coding Boom has\u00a0ArrivedWhen elegant coders who grew up on Linux are now reaching into 3rd generation blockchain development such as Nervos, you get a feeling that blockchains will quickly become more scalable and important problems will be solved faster as more developers globally get into the space.If DFINITY raised funds from respected investors Andreesen Horowitz and Polychain Capital, Nervos might become the \u201cChinese DFINITY\u201d, where it\u2019s sometimes said NEO is the \u201cChinese Ethereum\u201d. The reason I say this is that Polychain, Sequoia China, Matrix partners and Multicoin, among other top-tier VCs and cryptofunds, have already taken an interest in the potential of Nervos.If You\u2019re Not \u201cNervos\u201d You\u2019re Not Paying AttentionThis isn\u2019t a consumer product. Developers and being open-source are what matters here. While Ethereum has a lot of developers working on it, with tons of ICOs, that doesn\u2019t mean Ethereum will always be the leader from a technical standpoint.Satoshi Nakamoto\u2019s 2008 Bitcoin protocol introduced the first means for independently operated computers to communicate peer-to-peer over the Internet in a remarkable manner that conjures up an indestructible shared virtual ledger\u200a\u2014\u200aDom Williams (DFINITY)However to me, while Cardano and EOS may have seemed like the new contenders in 2017, in 2018 I\u2019m a bit more excited about DFINITY and Nervos. They are bringing a new terminology of how things could work that\u2019s fresh and innovative.Nervos Interview.Nervos has a \u201cCell model\u201d for decentralized application to make development more flexible, more scalable, and more accessible to real businesses that, if you haven\u2019t heard about yet in 2018, you will in 2019.According to CryptoBriefing, the foundational layer provided by Nervos is completely decoupled from the dApp on which it runs. Five basic components comprise the system:CellsCell TypesValidatorsGeneratorsIdentityBoth DFINITY and Nervos give some concept of the blockchain being like a nervous system. Jan( Xie Hanjian) speaks about blockchain not just being about a trusted \u201cengraving on the stone\u201d metaphor, but as smart contracts that can punish bad actors. That is a new kind of automated security.With auditing and punishment built into a blockchain, this creates a complete system and allows people to build \u201ctrust\u201d amongst each other.This has important implications for how public blockchains and their communities are also experiments in new forms of digital governance. DFINITY, it turns out, has thought quite deeply about this as well. Where Binance has won easy adoption by being first a centralized crypto exchange, newer blockchains like Nervos also facilitate initial adoption by enterprises by being less hard core than Ethereum. You have to have one foot in the real world to facilitate how businesses can integrate what they do with blockchain.The Nervos Mainnet is set for May 2019. Nervos is a next-gen enterprise blockchain that\u2019s raised nearly nearly half ($28 million) of what DFINITY has. In an era of rapid appearance of crypto funds, Nervos already has a fair number of substantial allies and backers:You can check in on the GitHub of Nervos\u00a0here.The Nervos founders don\u2019t just have former experience in Ethereum, they have familiarity collaborating with academic institutions, banks and so forth. Nervos has an elegant layered network architecture:The LNA thus feels essentially fluid to meet enterprise needs. The layered architecture of Nervos separates data and computation, giving each layer more flexibility, scalability and the option to use different consensus methods. On the Nervos network, dApps can choose appropriate generators and consensus mechanisms based on specific needs.The Advent of Hybrid BlockchainsBy providing a hybrid solution that combines the advantages of a public blockchain and an application chain, Nervos Network will allow enterprises to build and deploy decentralized applications (dApps) without committing their entire tech stack to the blockchain. This is key so as to meet the needs of enterprise clients while allowing them still to benefit selectively from blockchain.The dual-layered design of Nervos thus to me is one of the more important blockchains to evolve in 2019, thanks to its layers:Secure public chain (Layer 1)High-performance application chain (Layer 2)What I like about DFINITY is it\u2019s also very aware that it\u2019s being compared to Ethereum and is even compatible with it. I\u2019ve edited a video they recently put out about how they are different from Etheruem and it\u2019s one of the best videos out there for quickly getting a handle on some of the terminology they use.Bravo to C\u00e9dric Waldburger.DFINITY vs. Ethereum in 10\u00a0PointsThey go into more detail here. Cedric\u2019s video is really like a crash course on how some of these 3rd-generation blockchains are trying hard to improve on the likes of Ethereum.Everyone wants to be the host of the world\u2019s next generation of software systems and services. The reality is few smart contract platforms or altcoins will survive in the long-run so, before 2021, we\u2019re still in the nascent phase of how this takes place as more developers continue to enter the space.The folks at DFINITY obviously have been in contact with Ethereum, since Dfinity will be compatible with EVM languages (such as Solidity) too, so you will be able to deploy any Ethereum contract on Dfinity, which is a definite advantage.DFINITY has its own \u201conion\u201d of layers that may be superior to Ethereum. The key differentiator here is how DFINITY and Nervos speak to enterprise clients more directly. One analogy that has been used is one internet/public blockchain, many LANs/private blockchains. Curiously, DFINITY has been quoted as saying it sees DFINITY\u2019s competition as that of the traditional IT stack, not (actually) other blockchains!Someone on Reddit said, \u201cDfinity is a Prius, Ethereum is a Lamborghini\u201d. However DFINITY speaks of itself by using the \u201cworld computer\u201d analogy (internet computer). It\u2019s obviously seeking essentially to do everything Ethereum can do and better, so it\u2019s definitely an Ethereum competitor in that sense.Dfinity is also mutable to business needs, so Dfinity\u2019s consensus rules by design which allows for state changes. Ed Posnak writes about DFINITY here. He postulates that DFINITY is pursuing a coevolutionary strategy. At the beginning this approach is smart since it builds alignment with what is popular today. In fact, DFINITY is packaged in a much more relatable way, even with the neuron-inspired governance model. It\u2019s Silicon Valley co-opting blockchain down to the 2nd office in Crypto Valley.Ethereum\u2019s immutability and tendency to hard forks means DFINITY\u2019s liquid democracy could be superior as both mature. DFINITY\u2019s approach employs an architecture that separates consensus, validation, and storage into separate layers, which makes sense for efficiency. DFINITY might turn out to be among the 3rd-generation network contenders that would natively be more scalable than Ethereum. If all goes well, Nervos, Cardano, Qtum and possibly EOS and NEO, among others, might join them.If Ethereum is a \u201ccode is law\u201d network, DFINITY is an \u201cAI is law\u201d one. Here is where Nervos and DFINITY might truly shine as third-gen platforms, since they will have better \u201cpunishments\u201d for hackers that are philosophically opposed to the system. Where formalized and automated on-chain governance mechanisms (i.e. \u201cpunishments\u201d) take place, bugs or rogue smart contracts or whatever could be dealt with accordingly.As we now know, Ethereum will take years to integrate Casper and sharding completely. If the likes of DFINITY and Nervos can evolve rapidly, there will be a race to scalability that pushes new winners on to the next level of dApp and smart contract adoption in the real world.", "responses": "4"}, {"title": "Buying bitcoin, ethereum and other cryptocurrencies with British pounds (GBP) just got easier and faster for Coinbase customers in the\u00a0UK", "author_name": "Zeeshan Feroz", "link": "https://blog.coinbase.com/buying-bitcoin-ethereum-and-other-cryptocurrencies-with-british-pounds-gbp-just-got-easier-and-6d808dfa9128?source=search_post", "post_date": "Aug 1, 2018", "readtime": "2 min read", "upvotes": "1.3K", "content": "Buying bitcoin, ethereum and other cryptocurrencies with British pounds (GBP) just got easier and faster for Coinbase customers in the\u00a0UKZeeshan FerozBlockedUnblockFollowFollowingAug 1, 2018Starting today, we\u2019ll begin rolling out British pound (GBP) support for UK-based customers of Coinbase (individuals), Coinbase Pro (active traders) and Coinbase Prime (institutions). This will enable faster payments with same day deposits and withdrawals from Coinbase to British bank accounts.Until now, the process of converting bitcoin, bitcoin cash, ethereum and litecoin into euros and then into pound sterling, via international bank transfer, took several days. Customers will now be able to transfer pound sterling and use it to directly buy and sell these cryptocurrencies.We\u2019ve worked hard over the last few months to add GBP support for Coinbase customers across several of our product offerings in the UK. We\u2019ve also taken major strides towards our goal of making Coinbase the most trusted and compliant brand in the space. These steps include obtaining an e-money license for our fiat operations from the Financial Conduct Authority (FCA), adding support for the Faster Payment Scheme, and becoming the first cryptocurrency trading platform to obtain a bank account with a major UK bank.Faster payments will benefit all UK customers, enabling almost immediate transfers. This is essential for Coinbase Pro and Coinbase Prime customers in particular who will now be able to transfer funds quickly.Coinbase, Coinbase Pro and Coinbase Prime GBP support is now live for some of our existing customers, and we will continue rolling this out to all UK customers in the coming weeks.If you\u2019d like to get started with your GBP payments, visit coinbase.com to log in or open your account today.For more information about Coinbase Pro, visit pro.coinbase.comIf you\u2019re an institution looking to get started on Coinbase Prime, connect with us at prime.coinbase.com", "responses": "16"}, {"title": "Vitalik Unveils Ethereum 2.0\u00a0Roadmap", "author_name": "COBINHOOD", "link": "https://medium.com/cobinhood/vitalik-unveils-ethereum-2-0-roadmap-conference-notes-505270a48674?source=search_post", "post_date": "Nov 26, 2017", "readtime": "4 min read", "upvotes": "1.2K", "content": "Vitalik Unveils Ethereum 2.0\u00a0RoadmapHow Ethereum plans to address current problems in the\u00a0protocolCOBINHOODBlockedUnblockFollowFollowingNov 26, 2017Vitalik publicly reveals plans for Ethereum 2.0. Credits to the organizers of BeyondBlock Taipei 2017 for the\u00a0photo.On behalf of the entire team at COBINHOOD, we are honored to be part of Beyond Block Taipei 2017, where we were able to stand alongside and exchange ideas with our peers in the Ethereum community. Most significant, perhaps, was the unveiling of the roadmap for Ethereum 2.0 by Vitalik Buterin, co-founder of Ethereum.Below is a short takeaway from his talk, followed by a short introduction to COBINHOOD (in case you don\u2019t know who we are yet \ud83d\ude0a).", "responses": "3"}, {"title": "Cracking the Ethereum White\u00a0Paper", "author_name": "Bo", "link": "https://medium.com/@FolusoOgunlana/cracking-the-ethereum-white-paper-e0e60c44126?source=search_post", "post_date": "Aug 30, 2017", "readtime": "13 min read", "upvotes": "1.2K", "content": "Cracking the Ethereum White\u00a0PaperBoBlockedUnblockFollowFollowingAug 30, 2017\u201cThe World Computer\u201dHi there,I\u2019m Bo, I read cryptocurrency white papers so you don\u2019t have to.There\u2019s just something about reading white papers that turns a lot of people off. If it turns you on, I strongly recommend reading the Ethereum white paper. In it, Vitalik Buterin describes the Bitcoin protocol, it\u2019s shortcomings and how Ethereum addresses them as a \u201cnext generation smart contract & decentralized application platform\u201d.I know it\u2019s not immediately obvious how a \u201csmart contract\u201d can help the average person. So before we begin, let\u2019s make it so with a brutal oversimplification.Imagine you have a website that beautifully conveys all your company\u2019s information in a precise and well thought out fashion. Now imagine all your customers demand you send them the same information via plain text email. Email is great, but conveying sophisticated information just can\u2019t be done via plain text. It would be slow, inefficient and grossly incomplete. The scary part is that you\u2019d happily have done this a few years back before knowing websites were possible.With cash, you directly express simple transactions i.e. payments, but you require intermediaries such as banks, brokers, and investment managers for more nuanced ones (e.g. your credit card, overdraft limits and investment portfolio). Through smart contracts, you can directly and independently express any of these complicated transactions. In fact, you can be your own investment manager, banker, broker and currency issuer if you choose. Profound as it sounds, this barely scratches the surface of what smart contracts on Ethereum can do.And smart contracts are only half the story.Title: \u201cA Next Generation Smart Contract and Decentralized Application Platform\u201dAuthor: Vitalik ButerinPublished: November 2013Reading duration: ~60 minutesReadability Score: \u2158To fully understand the implications of this ambitious project it is important not to overlook the unique circumstances under which Ethereum was born. We\u2019ll need to take a closer look at the Bitcoin protocol and the aftermath of its release\u200a\u2014\u200asituations that inspired the Ethereum project.After that, I\u2019ll use the white paper to walk you through Vitalik\u2019s motivations, Ethereum\u2019s quasi-Turing Completeness, the Tragedy of the Commons and the ambitious potential of The World Computer.What is Ethereum?Like its predecessor Bitcoin, Ethereum is a protocol (rules for information exchange) and community. Community members transact with the native currency called Ether or \u201cETH\u201d which is necessary for gas payments\u200a\u2014\u200amore on gas in a bit.Naturally, Ethereum inherits the censorship resistant, tamper-proof, economically secure and decentralised nature of Bitcoin\u2019s consensus process. Censorship resistant as transactions can be created and signed offline then issued secretly and remotely. Tamper-proof because each new block (group of transactions) is referentially embedded in every consequent block creating an unbreakable chain of references all the way to the first block. Economically secure because of the negative incentives for nodes, especially miners (those doing the Proof of Work), to game the system. Ethereum builds on these to go a few steps further.Read more about Bitcoin & blockchain-based platforms in my previous article\u200a\u2014\u200aCracking the Bitcoin Whitepaper.A closer look at BitcoinLet\u2019s quickly take a look at one important element of Bitcoin that Ethereum builds upon.Bitcoin records each of its blocks as a list of transactions. Each transaction is a software instruction to be executed by nodes (computers) running the Bitcoin protocol. So think of a block as a list of instructions to be executed in order\u200a\u2014\u200aJust like a you\u2019d execute a cake recipe.BBC food sponge cake recipe.\u00a0yumThe Bitcoin client understands only one language, so all transactions must be made of instructions from that language. When you spend Bitcoin, your software/website writes this for you! Developers can also write custom contracts for special purposes.So if a block is a cake recipe, then what\u2019s the cake? This is something we call the \u201cstate\u201d. In the case of Bitcoin, this state is just a list of \u201ccoins\u201d available for use. Each coin has an owner and an amount. So all nodes have identical state (an identical list of available coins) and each new block is a set of instructions on how to edit the state by deleting & adding coins.An owner spends a coin by referencing it in a transaction. So a basic transaction looks something like this attestation:\u201cI, User X, own this unspent coin [proof: signed coin reference showing coin is part of state/list] so please delete it and output a new coin (into the state/list) owned by and signed for User Y\u201d.The above transaction deletes the old coin and produces a new coin that User Y can now reference in a later transaction. Remember, each block is a list of such transactions with varying degrees of complexity. Hence each block produces a new state. Vitalik thus describes Bitcoin as a \u201cstate transition system\u201d and proposes a new system and a new method to perform the transitions. We\u2019ll explore the power of this new transition system after taking a look at why it was proposed in the first place.Example Bitcoin state transition diagram from the Ethereum white\u00a0paperFinally, a \u201ccoin\u201d is known as an Unspent Transaction Output or UTXO. Don\u2019t let any Bitcoiners catch you calling it a coin! Each of these UTXOs can have multiple input signatures (previous owners), multiple outputs (current owners) and an arbitrary number of Bitcoin. So \u201ccoin\u201d, implying a fixed amount with one owner is a pretty poor analogy\u2026Vitalik\u2019s MotivationsVitalik, creator of Ethereum, has been described as many things\u200a\u2014\u200a\u201cgenius alien\u201d being my favourite and probably the most accurate. He describes the moment he thought of Ethereum as \u201ctoo good to be true\u201d but for others in the community, it probably was no surprise. The guy was already a main player in Bitcoin by 2013 having authored a Bitcoin code library, contributed to Bitcoin\u2019s core development and co-founded Bitcoin magazine. Naturally, he had already exposed himself to a wealth of research in mathematics, cryptography and economics\u200a\u2014\u200abecause that\u2019s just what 19-year-olds did in 2013?!Vitalik\u2019s research brought him to the conclusion that several applications for some kind of shared identical database had already been established and were waiting for a sound infrastructure to be built upon. Why not use the blockchain?In the white paper, he cites at least three new applications trying to do just that. Namecoin, coloured coins and meta-coins. All of which either exist on the Bitcoin blockchain\u200a\u2014\u200adifficult to do\u200a\u2014\u200aor bootstrap an independent blockchain\u200a\u2014\u200adarn difficult to do. Plus it looks like most future applications will be too small to warrant their own blockchains.\u201cAdditionally, we predict that the set of applications for decentralized consensus technology will follow a power law distribution where the vast majority of applications would be too small to warrant their own blockchain, and we note that there exist large classes of decentralized applications, particularly decentralized autonomous organizations, that need to interact with each\u00a0other.\u201dSay we stick with option A\u200a\u2014\u200abuild applications on Bitcoin. We need to build an application by creating special transactions on the network. Remember how we described a transaction as an attestation that deletes a coin to produce a new one? Let\u2019s try creating a more complex attestation.\u201cI, User X, own this unspent coin [proof: signed coin reference] so please delete it and output a new coin owned by and signed for User Y at time 10/08/2019 if presidential candidate Z wins the election\u201d.You may recognise this as a bet. Unfortunately, this is much easier to articulate in words than in Bitcoin\u2019s language. Good luck translating. Here lies the problem and as it turns out, this problem is also a feature\u200a\u2014\u200abut more on that soon.The problem is that Bitcoin\u2019s language makes it difficult to describe complex transactions. Also, Bitcoin blocks are capped at 1Mb. Therefore, users will pay higher fees to incentivise miners to include their transactions sooner. Since a transaction can\u2019t be bigger than a block (transaction size is capped too anyway), the higher the demand for block space, the more users will pay for space to issue larger (and more complex) transactions. Transactions also cannot reference other transactions meaning they hold only their own information\u200a\u2014\u200athey are siloed.Vitalik would later argue that these properties made it difficult (not impossible) to create the applications that had been waiting patiently for Blockchain technology to arrive.\u201cUsing scripting is easy to implement and standardize, but is very limited in its capabilities, and meta-protocols, while easy, suffer from faults in scalability. With Ethereum, we intend to build an alternative framework that provides even larger gains in ease of development as well as even stronger light client properties, while at the same time allowing applications to share an economic environment and blockchain security.\u201dVitalik proposed updates to the Bitcoin protocol, but they were met with much opposition. And rightly so! Making complex untested protocol changes to Bitcoin is like changing the engine of a moving car\u200a\u2014\u200ait might end badly.Vitalik then went off to research, propose & eventually create Ethereum alongside other brilliant minds such as Gavin Wood & Joseph Lubin, present CEOs of Parity Tech & ConsenSys.Ethereum\u2019s quasi-Turing Completeness\u201cThe intent of Ethereum is to create an alternative protocol for building decentralized applications, providing a different set of tradeoffs\u201d\u00a0\u2026 \u201cEthereum does this by building what is essentially the ultimate abstract foundational layer: a blockchain with a built-in Turing-complete programming language, allowing anyone to write smart contracts and decentralized applications where they can create their own arbitrary rules for ownership, transaction formats and state transition functions.\u201dThe most significant difference between Ethereum and most other blockchains is its language. It is Turing Complete. In a non-technical nutshell, this means a short transaction describes either a simple or complex series of operations. It\u2019s not possible to tell which one by looking at the transaction\u2019s size. Remember Bitcoin users will pay more on average for larger transactions? Well, this effect means attackers can\u2019t issue complex transactions to slow down the blockchain. Because Bitcoin\u2019s language is not Turing Complete (intentionally), transaction size grows with complexity. So a cap on transaction size will thwart attackers (to an extent) and hopefully prevent excessive waste of blockchain processing effort. This inherent vulnerability of complexity is the most obvious \u201ctradeoff\u201d between Bitcoin and Ethereum.Pay attention, because this point is important.Bitcoin limits the power of smart contract developers to protect the blockchain from developer error & attackers\u200a\u2014\u200aa common pattern in programming platforms. It\u2019s not obvious to me that Satoshi Nakamoto invented Bitcoin for much other than storing and transferring value, so it seems like the right choice. Why let developers wreak havoc?Ethereum hands over the power (most, not all) to developers. Again a smart choice, given the purpose of the platform, but with great power comes great responsibility. And as we saw with the Parity hack & the DAO hack, the developers using this nascent technology still have much to learn about the platform. This isn\u2019t news, fortunately. Ethereum has been around for only three years so it might be a while before developer best practices are tried and tested.Best practices might thwart contract attackers, but not spammers who try to slow down the blockchain with complex transactions. We will see how placing a new limit on complexity in the Turing Complete environment avoids this tragedy of the commons.The Tragedy of the CommonsBefore looking at how Ethereum solves this potential abuse of the shared blockchain resource, let\u2019s quickly recap. Every computer on the blockchain runs through the transactions (instructions) in each block to identically modify the state of its own copy of the blockchain.Large transactions in a non-Turing Complete language (Bitcoin) imply more processing power required from the computers carrying out the transactions. Bitcoin limits the transaction and block size meaning this is not a problem.Ethereum\u2019s language is Turing Complete so an attacker can issue a tiny and seemingly harmless transaction that takes an infinite amount of time to execute. Fortunately, Ethereum protects its blockchain from misuse through gas payments.GasTo issue a transaction, one must pay gas\u200a\u2014\u200aan amount of gas proportional to the computational effort required to execute it. Miners (nodes that assemble blocks) will reject any transaction that does not pay enough gas as fees, keeping the insufficient gas for themselves.Here\u2019s an analogy that helped me get my head around this one. You call a cab, and on the phone, you get to specify the meter rate (how much you\u2019ll pay per minute) and your limit (how much cash you\u2019ll bring with you). If the meter reaches your limit before you arrive, the cab driver kicks you out, takes all your cash and teleports you back to your starting point. The meter rate is called the gas price and the limit is the gas limit. Fortunately, if you\u2019re a regular user, your wallet software will estimate the gas for you. Attackers, however, might find that they make no progress and run out of gas rather quickly.Separating gas from ETH prevents gas from being subject to price fluctuations. You can\u2019t buy or sell gas as it has only one purpose. Also, every possible instruction (each opcode!) has a predefined and constant gas cost. This means the same transaction will always cost the same gas. However, the conversion rate between ETH and gas can fluctuate with the price of ETH to keep fees stable or to allow miners cherry-pick transactions when there is pressure on them to process more and faster. The latter is an unfortunate consequence of the transaction fees solution to the Tragedy of the commons. Research into better alternatives is ongoing!That\u2019s not allEthereum also introduces better accounting. Most blockchain wallets keep track of all UTXOs that belong to a user (think counting coins in a purse), while Ethereum wallets can simply look up an account balance stored and updated by the blockchain (think checking your bank balance). In Ethereum, this list of accounts is its state.Ethereum\u2019s blocks include not only this list of accounts and associated information, but also a record of transactions made (similar to Bitcoin) and a list of receipts created by those transactions. Each of these lists is updated with every finalised block, producing a dense audit trail useful for external verification.Vitalik later explains how Ethereum also takes steps to further prevent mining centralization through Application Specific Integrated Chip (ASIC) resistant mining and an enhanced consensus protocol. To get a handle on those, you\u2019ll need to have a look at the paper yourself!The World ComputerBy using Ethereum, you pseudonymously pay the decentralised and arbitrary owners of computing power to execute instructions on an immutable, uncensorable and fully secure database of information shared with the entire network. Full anonymity is also on the way with the introduction of zero knowledge proofs.So using Ethereum might sound familiar to you. To me, it sounds like the current internet\u200a\u2014\u200aWhere I pay the owners of cloud services or bandwidth (Godaddy, AWS & BT) to serve customers or browse websites. Sites where I inadvertently give up private information as an identifiable and censorable customer of a usually centralised platform. I do this in exchange for access to siloed and un-auditable information over several insecure networks ripe for snooping and identity theft. But now I can say bye to most of the above.One could say that\u2019s an unfair comparison. Cyber-security and distributed systems were not as well researched and understood when the internet was first conceived at CERN. In fact, the immense body of knowledge that is Cryptoeconomics has only begun to take hold. It would be arrogant of us to assume that we\u2019ve figured it all out and that Ethereum will be the last iteration of the internet. That being said, I have no doubt it will be the next.So what is Ethereum really? In my previous article, I explained that Bitcoin acts as a trusted store of and means of transmitting value. I like to think of Ethereum as a means of transmitting value but also a trusted store for complex and shared interactive information and software. Understanding it is tough, but the reward might just be worth your time.That is exactly why early-adopters are rushing to figure out what killer applications can be built on this magic box. The first killer app was meta-coins\u200a\u2014\u200aseveral new currencies have been built on top of Ethereum with minimal effort. The next killer app is Initial Coin Offerings (ICOs)\u200a\u2014\u200aa decentralised crowdfunding methodology that has resulted in an estimated $1.3bn in ETH invested in prospective companies\u2026 And probably some scammers too. Remittance, decentralised storage and decentralised casinos are on the radar too; even decentralised social travel! But I\u2019m most excited about owning my identity online with uPort. That one\u2019s been a long time coming for me.Ethereum was built to support these cryptocurrencies, but it looks like it might also be able to support other blockchains as Joseph Poon recently proposed with plasma. This along with Ethereum\u2019s upgrade to Metropolis and impending transition to Proof of Stake might just provide an unprecedented boost in both scale and speed on the network. These much-appreciated upgrades will be the backbone for the decentralised protocols for projects such as server-less cloud hosting being led by the Ethereum Foundation.As you can see, the Ethereum community is moving at a breakneck speed just three plus years after the technology\u2019s inception and there\u2019s no sign of slowing down. I\u2019m pretty confident this technology will change the world as we know it soon enough. Not because I think it has magical powers, no. But because of the levels of raw talent and mental horsepower devoted to it. Ethereum attracted some of the best possible minds from the beginning. People like Gavin Wood, Joseph Lubin, Nick Johnson and many others are working hard to build a community of Ethereum users, developers, participants and leaders in the space. Whole companies have been built to improve Ethereum and aid its evolution and ensure it stays on track so we can build the new internet on top of it.You must realise by now that blockchain is much bigger than just currency. Like Andreas Antonopoulos said\u200a\u2014\u200aCurrency is only the first application. So don\u2019t worry about the price of ETH or whether or not there\u2019s a crypto-bubble. Invest in your knowledge of the space so you can contribute. And get ready for the decentralised web!Find me on twitter @bo_ogunlana to let me know what projects excite you most and what white paper to crack next.Thanks for reading and remember to share.", "responses": "7"}, {"title": "Lessons learned from making a Chess game for\u00a0Ethereum", "author_name": "Paul Grau", "link": "https://medium.com/@graycoding/lessons-learned-from-making-a-chess-game-for-ethereum-6917c01178b6?source=search_post", "post_date": "Sep 2, 2016", "readtime": "7 min read", "upvotes": "1.1K", "content": "Lessons learned from making a Chess game for\u00a0EthereumPaul GrauBlockedUnblockFollowFollowingSep 2, 2016Over the course of the past semester, we, a student project from Technical University of Berlin, engaged in making a Chess game for Ethereum, a blockchain-based distributed computing platform.The project was overseen by the TU department of Information Systems Engineering and Dr. Christian Reitwiessner from the Ethereum foundation.The goal of the project was to develop a real application using the available tools and evaluate challenges and advantages of this new platform.In this first article, we will explain the application we made, and go into detail about the main lessons learned. We are planning to release two more articles on Solidity data structures and Ethereum development tools.Online gamingTraditionally, most online games work using an intermediary to setup the communication and ensure everything works correctly. This is a third-party that players have to trust to do the right thing. If you consider gambling, players have to transmit money to a black box. They only do it because they have trust in the service provider, or because they value the upside of winning more than the risk of losing money to whichever party.Additionally, providing this service costs money, so the provider must generate some sort of income, be it through fees or advertisement.The idea of the decentralized web, and in particular platforms like Ethereum, is to eliminate trust, the need for continuously running servers and maintaining the service, and a central single point of failure. All transactions take place on a global, publicly verifiable database called blockchain. These operations are referred to as on-chain. Messages are sent via a peer-to-peer network. No central servers have to be deployed and maintained unlike in traditional web applications. There is no party that can shut down the service, cheat, or run away with any money.After forming a team of students who all had some prior experience in web development, we set out to make a usable online Chess game. Chess is a well-known turn-based two-player game with well defined rules. It is also well-studied in Computer Science, and thus a good candidate for a first project.On a high level, Chess consists of the following entities: two players, a board of 64 squares, 16 pieces per player, and a series of piece moves from one square to another. We will need data structures for all of these, plus logic for making and verifying moves and end game conditions. To really demonstrate the usefulness of making this a distributed Ethereum app, we will also add methods to bet and win money.ContractEthereum works with Smart Contracts, which are programs that are executed on the global blockchain. The code is public, as well as all messages and data, making the system reliable. If designed correctly, the system is uncheatable.After many iterations, this is the contract architecture that we ended up with. The contracts were written in Solidity, which supports inheritance and libraries to improve the design.We abstracted all code that applies to turn-based games in general into an abstract base class. Chess is the main contract the clients interact with. Game rules (state and move validation) are in a sub-library ChessLogic. Some helper functions like signature validation (Auth) and Elo score calculation are also outsourced into libraries.A complete game of Chess can be played reliably on-chain, meaning no other communication is involved except messages from and to the Smart Contract.However, there is one huge problem with Chess: Verifying a game\u2019s end is incredibly costly. For checkmate (king is in check and player cannot make any move to escape) and stalemate (same, except that king is not in check), to verify the condition all possible moves have to be calculated and verified, which is unfeasible on the blockchain. We actually implemented the logic in Solidity, only to find out it exceeds the current limits of a transaction.First lesson: Computationally expensive calculations are usually not suitable to be run on-chain.Challenge responseA possible solution for this is to rethink the problem and tackle it from the another side.What is the problem? Player A puts Player B into checkmate and wants the contract to verify and acknowledge this condition. If this cannot be done, can we verify the opposite?Consider that Player A simply claims that the condition has been reached, and then it is Player B\u2019s chance to refute that claim. Which is easy\u200a\u2014\u200athey just have to submit another valid move, and the original claim is proven to be false. This interactive way of verification also relates to how people play real (analogue) check\u200a\u2014\u200aI say \u201ccheck mate\u201d, and either you agree that you lost or you show me a move you can still make.This is a form of \u201cChallenge\u2013response\u201d. It seems easy, but you have to look at all possible states and provide ways to resolve them fairly and without deadlocks.For our game, after a challenge was created, a timer is started. If the other player does not respond within this time, the challenger can claim the game to be finished.Abstract diagram of Challenge-response procedureAt this step we also added a general \u201ctimeout condition\u201d which means a player can win the game if the other player stopped playing. Think of it as a turn time.A few more logical problems arose while implementing all protocols (win, draw, timeout). Finally we came up with this solution, which looks pretty complicated but mostly follows the abstract version above. Feel free to skip this diagram.Complete diagram of all Challenge-response flowsSecond lesson: For efficient distributed decentralized communication, rethink the problem and come up with alternative solutions.Off-chainThe biggest problem in making completely on-chain games, however, is the lack of real time. Ethereum transactions are processed in blocks which occur approximately every 14 seconds. This is pretty fast, but definitely not fast enough for a game that is supposed to feel real time.One approach to improve this is to move some part of the communication away from the blockchain (hereafter called off-chain). We still want to keep our serverless architecture, so we can use peer-to-peer web protocols to achieve this. In the future, Ethereum\u2019s own Whisper can be used for this exact use case. Until then, we implemented a dummy proxy server to imitate communication over Whisper to test out this kind of architecture.Let\u2019s think again about our problem. Which part of the game can be done off-chain without loss of the on-chain advantages?As long as the game runs smoothly, i.e. each player is alternatingly sending a correct move, we don\u2019t really need the blockchain to verify all these correct moves\u200a\u2014\u200athe clients can do that. What if we sent all moves directly between the clients and only resort to the blockchain for disputes and recording the end result?Turns out, this is pretty easy to achieve. We just need to give each player the possibility to independently prove the current game state. To prohibit them from cheating, each report to the blockchain should consist of the complete game state with a valid signature from the other player. That way it can be cryptographically proven that both players accept the current state.In other words, during normal gameplay each player keeps sending their next move and the resulting game state, plus a cryptographic signature. If the other player disagrees, they can submit this data to the Smart Contract for verification. The same can be done at the end of the game. Furthermore, clients will acknowledge each other\u2019s messages to discover problems faster.Apart from setting up the game (Initialize and Join), clients only send messages to the Blockchain when they want to claim something (timeout, win, draw), and to withdraw their prize.Simplified diagram of off-chain communicationThird lesson: To increase performance, move computation and communication to clients, ensuring security with smart communication protocols.Now, at first this might seem like a step back\u200a\u2014\u200aafter all, weren\u2019t we trying to make \u201cunstoppable applications\u201d by keeping all data and implementing all logic on the blockchain?We think that the main point still stands: The application is serverless, secure and trustless. In the end, the blockchain is the single source of truth, but the clients help in making it more efficient. In case of a problem, however, the game can fully degrade to run on the Blockchain.ConclusionFundamentally, the decentralised web is about a new way of modelling problems. For that, Smart Contracts provide a good framework of thinking, but additional ideas have to be employed.The Ethereum virtual machine is turing-complete, but that doesn\u2019t mean that everything should be computed on it. Since there is a clear cost assigned to every operation, we have to model our applications in creative ways to use the available resources effectively.In conclusion, we think that it is definitely feasible to implement decentralized games using Ethereum, but one needs a smart model to make them efficient and usable.PS: All our code is open-source and can be found here. The repository still needs some cleanup, but if you want to you can dig into the contracts right now.", "responses": "27"}, {"title": "Why Ethereum Should be Worried About\u00a0Filecoin", "author_name": "David Gobaud", "link": "https://medium.com/mobius-network/why-ethereum-should-be-worried-about-filecoin-ce9af5ecec6b?source=search_post", "post_date": "Jun 11, 2018", "readtime": "6 min read", "upvotes": "1.2K", "content": "Why Ethereum Should be Worried About\u00a0FilecoinA Plain English Overview of Decentralized File Storage\u00a0SystemsDavid GobaudBlockedUnblockFollowFollowingJun 11, 2018The Mobius Research & Development team is actively developing our Decentralized Data Marketplace and Proof of Stake Oracle Protocol. Broadly, one topic we are researching is second layer protocols that use Stellar as the root blockchain since it is up to ~100 times faster and over ~100,000 times cheaper than Ethereum today on average!A specific field we\u2019ve been researching is decentralized file storage, and while we aren\u2019t ready to announce a product yet, we want to highlight some current research.We also realized that pretty much no one actually understands Filecoin\u200a\u2014\u200ayou thought it was an Amazon S3 competitor right? Read on!First some background info on the three major decentralized file storage projects.I. StorjStorj is a decentralized file storage system that requires the party requesting a file be stored to keep: A) a copy of the file and B) a computer online in order to constantly check whether the file is being stored by another party.Here is a quick summary of how Storj works:A user U advertises that it will periodically pay $X to have file F stored.A provider P sees the advertisement and agrees to store F. It receives a copy of F from U and starts storing it.Periodically U asks P a question about F (technically it asks P to provide a Merkle proof for a specific challenge) such that if P answers the question correctly, U knows with some statistically significant chance that P has F stored. If P provides the correct answer, U pays $X to P.If U does not pay P, P deletes F\u200a\u2014\u200anot a big deal: P stored F for a short amount of time it wasn\u2019t paid for.If P answers the question wrong, U assumes P doesn\u2019t have the file, doesn\u2019t pay P, and advertises F for storage again to find a new provider.Problems with\u00a0Storj:U has to remain online asking P questions about F in order to test whether P has the file stored.U can only be certain one copy of F is stored\u200a\u2014\u200aP could pretend to be P2 and claim it also has F stored in a separate location but in reality there is only one copy of the file. U could overcome this problem by encrypting F with a secret key and creating F2 which it pays to have stored. The problem then is U must keep the encryption key secret to prevent cheating, which means the file cannot be shared publicly from the decentralized storage system.U has to keep a copy of F because P might just disappear.Trust between U and P is minimized with very frequent challenges and micropayments. However, very frequent micropayments is not practical with Storj because it is based on Ethereum which only runs at ~7 token transactions per second and can cost dollars per transaction.II. SiaSia improves on Storj by broadly making the following improvements:1. A blockchain automatically generates the periodic questions about F for P to prove it has F instead of requiring U to do it.2. Stores a Merkle tree of F on the blockchain (instead of solely by U) so any computer that is part of the network can verify the answer to the question is correct.These improvements mean that U does not have to stay online asking or checking the periodic questions P must answer to prove it has F.This is an improvement but Sia still suffers from Storj problems 2 and 3:2. U cannot know that more than one copy of F is being stored and3. U must retain a copy of F.III. FilecoinFilecoin improves upon Storj and Sia in two key ways:1. Proofs of Replication (PoRep)\u00b9 allows U (and the public) to know that multiple copies of F are stored in the system without encrypting F with a secret key. Being able to store multiple copies of F without encryption means the data of F in the decentralized storage system can be made publicly available to third parties while still guaranteeing multiple copies are stored.Note that while Filecoin allows the network/public to be sure multiple copies of a file F are stored, it does not allow anyone to be sure the copies are geographically distributed\u200a\u2014\u200ai.e. all the copies of F could still be on one hard drive! \ud83d\ude02Very briefly, PoRep works by creating derived versions of F e.g. F* such that: a) it is easy to convert F* to F and b) it is VERY SLOW to convert F to F*.If U wants F stored twice it asks for F and F* to be stored. U then asks questions about F and F* and if P provides the correct answers it knows F and F* are stored\u200a\u2014\u200ahence two copies. The fact that it is VERY SLOW to go from F to F* is important because if P is slow answering the questions about F*, the assumption is P does not have F stored (otherwise when P gets an F* question it could generate it from F and pretend it always had it stored).2. Proofs of Space Time (PoST) allow for less frequent question and answering of P to prove it has F stored.Very briefly, PoST works by having P start a wall-clock timed blockchain calculated based on data (e.g. F) at the beginning of storing the file. Since the blockchain calculation uses an algorithm that is A) based on the data in F and B) wall-clock time predictable, P needs to only post something such as the current head of the blockchain every e.g. 24 hours. At the same time the network, as in Sia, can check the answer once every 24 hours and know if it matches the expected value that P had F stored for the whole 24 hours.Some quick notes about the PoST algorithm:a. It is slow as in you can predict the wall-clock running time BUT it is NOT resource intensive like a mining function (if it was there is no way it could be cheaper than S3 and maybe not even practical at any scale of file storage!).b. It is constantly calculating on F throughout the time period so P must practically have the entire F stored for the period or it won\u2019t be able to produce the correct answer for the period.But Filecoin is MUCH MORE than File\u00a0Storage!Given the above you may think Filecoin is primarily a file storage competitor and that IS how it was pitched BUT it is much more than that \ud83e\udd29In the white paper on page 33 in \u00a7 7.1 (if you bought Filecoin you read the whole white paper in detail right?! \ud83d\ude02) it mentions support for \u201cgeneric smart contracts\u201d and states: \u201cUsers can associate programs to their transactions like in other systems (as in Ethereum [18]) which do not directly depend on the use of storage.\u201dYes right there in the Filecoin white paper in a tiny section it mentions that on top of file storage it is creating a full Ethereum competitor (aka a public global supercomputer)!So what is all the file storage stuff\u00a0about?!Instead of Proof of Work (PoW) mining, Filecoin uses Proof of Storage (PoS) to secure the network! Pretty cool \ud83d\ude0eSome have wondered how Filecoin will underprice big central file storage providers such as S3 given the decentralized no-trust environment requires many copies of a file be stored to know it is stored (so instead of storing once on S3 you may have to pay to have it stored 5 times on Filecoin)\u200a\u2014\u200ahere is how:File storage costs will be subsidized by people paying for compute! You know on Ethereum how you have to pay gas for every transaction and that money goes to fund miners who are running computers doing useless work and just eating electricity?In Filecoin the \u201cgas\u201d payments go to \u201cminers\u201d who instead of running massive computers doing useless mining are instead storing data that people are also paying them to store!Imagine if instead of the Ethereum miners doing useless work they were doing useful computation such as 3D rendering and Pixar was paying them to render the movies\u200a\u2014\u200ayes that is what Filecoin is doing via file storage!This means Filecoin \u201cmining\u201d is A) MUCH more energy efficient (no more killing the planet!) and B) subsidized by people paying for useful \u201cmining\u201d!What Does All This Have to do With\u00a0Mobius?Good question! More later \ud83d\ude1bAs mentioned the Mobius R&D team is actively working on developing our Decentralized Data Marketplace and Proof of Stake Oracle Protocol.", "responses": "9"}, {"title": "Ethereum is game-changing technology, literally.", "author_name": "Virgil Griffith", "link": "https://medium.com/@virgilgr/ethereum-is-game-changing-technology-literally-d67e01a01cf8?source=search_post", "post_date": "Mar 28", "readtime": "6 min read", "upvotes": "2.3K", "content": "Ethereum is game-changing technology, literally.Virgil GriffithBlockedUnblockFollowFollowingMar 28People often ask, \u201cWhat is Ethereum for?\". Previous answers to this question often included the term \u201cworld computer\u201d, but despite some interesting examples, it\u2019s been difficult to answer this question at a more abstract level. I propose an answer to this question. I hereby propose,Ethereum is an unprecedented arena for playing cooperative games.And moreover,Ethereum enables powerful economic vehicles we don\u2019t yet understand.Non-cooperative game theory, the original and most widely used branch of game theory, assumes the absence of an external authority to enforce rules. Fundamentally, I claim that the Ethereum ledger constitutes an incorruptible, omnipresent, external overseer that no matter the game is always available to enforce agreements among players. This implies that Ethereum, in theory, could turn any non-cooperative game into a cooperative game (sometimes called a coalitional game).The transmogrification from non-cooperative to cooperative games is achieved by a technique we term Game Warping defined as using transparent, triggerable, unstoppable burns and on-chain side-payments to move game-theoretic equilibria or to create new player actions. Game Warping stacks as a new layer atop an uncooperative game to make cooperation the Rational choice.Example 1: The Prisoner\u2019s DilemmaThe most well-known problem in game theory is the Prisoner\u2019s Dilemma\u2014it is the quintessential example of a non-cooperative game in which the Rational strategy puts players into the worst possible state. Under Ethereum, I kid you not, the Prisoner\u2019s Dilemma becomes a cooperative game. Say players A and B want to do something naughty. But before they commit their crime, they each deposit one million dollars (valued at 1000 utility points) into a smart-contract which states, \u201cIf I publish a defect message, my million dollars gets destroyed.\u201d Now that the smart-contract is in place, as long as the police don\u2019t offer more than a million dollars to defect, Rational prisoners will choose to cooperate.In the original Prisoner\u2019s Dilemma, Rational players will defect. But after the pay-off matrix has been warped to have a new equilibrium, Rational players will cooperate. See below,Game Warping the Prisoner\u2019s Dilemma. Green denotes Nash equilibria.For inspiration, this list of situations matching the Prisoner\u2019s Dilemma includes: carbon-emissions, sports doping, tragedy of the commons, and international weapons buildup. Could Ethereum have something to offer these areas? It seems plausible.Example 2: The Stag\u00a0HuntThe Stag Hunt is a canonical model of cooperation. The game posits two hunters choosing to hunt either Stag or Rabbit. The greatest pay-off is when both players hunt Stag (successfully hunting stag requires both hunters working together). But hunting stag is also the riskier strategy because if the other hunter goes Rabbit, the hunter who went Stag gets nothing\u200a\u2014\u200athe safer option is the guaranteed pay-off from hunting rabbit.The desired warping is the same as the Prisoner\u2019s Dilemma. Each hunter deposits a large sum (worth 1000 utility points), that is burned if the hunter hunts Rabbit.Game Warping the Stag Hunt. Green denotes Nash equilibria. Outcome is the same as in Prisoner\u2019s Dilemma and cooperation is now the sole equilibrium.After warping, Rational hunters will now consistently choose Stag. There exist variations extensions of Stag Hunt to make the game more realistic, but the warp to turn it cooperative can always be done.Example 3: The Chicken\u00a0GameIn addition to warping games for collective benefit, a player can also warp games to gain a competitive advantage. We illustrate this with the game of Chicken. In this game, there are two players A and B and two actions, Swerve and Straight. Chicken exemplifies the sort of a game where removing one of your options (Swerve), the other player\u2019s Rational response is to your benefit. This removal can be done by making a large on-chain deposit which burns if you Swerve, this informs the other player that you, being a reasonable person, would never Swerve. This is the Ethereum equivalent of \u201cpublicly throwing away the steering wheel.\u201dPlayer A publicly warps his own actions to force player B into a choice between -1 utility for Swerve or -100 for Straight. Acting Rationally, Player B chooses to Swerve, and player A gains the\u00a0reward.Chicken has two equilibria: [Straight,Swerve] and [Swerve,Straight]. But after the warp, the only remaining equilibrium is [Straight,Swerve], netting you (player A) the maximum pay-off. In an Ethereum world, Chicken becomes a race for who can first publicly toss out one\u2019s own steering wheel.Example 4: Warping Other Players\u2019\u00a0GamesNot limited to profiting from warping one\u2019s own games, one can even profit by threatening to warp games you\u2019re not even party to. Such extortion is obviously not endorsed, but we include it as a ramification of smart-contract technology. Consider the situation from this paper from Bono & Wolpert, where a third player C knows players A and B are about to play a game (and their pay-off matrix). With Ethereum, C can create a smart-contract in clear view of players A and B. This newly created contract states that unless A pays the contract, the contract will send a large payment to B conditional on B performing a rivalrous action against A. In essence, player C is extorting player A by credibly threatening to incentivize B to act rivalrous against A.More concretely, consider the case below. Player A has actions Up/Down and player B has actions Left/Right. Initially, they both so desperately desire to occupy (Up, Left) in a very positive-sum interaction of ten utility points. However, an external player C recognizes the game about to be played and instantiates a smart-contract to extort $5000 (worth 5 utility points) from player A. If A does not pay the contract, the contract will pay B a hefty $100,000 (100 utility points) to choose Right. Once Player A sees the smart-contract, A is faced with the choice between two worse options\u200a\u2014\u200aComposite Game I or Composite Game II. Unfortunately for player A, the Rational choice is Composite Game II, and A pays the extortion fee.Contract extorting A to pay money so that the contract will refrain from incentivizing B to always go Right. Green denotes Nash equilibria. This game-warp is equivalent to the infamous p+epsilon attack.One of the most surprising aspects of game-warping is that someone making a credible promise to pay can change the Rational strategy (and thus often the outcome of the game) without ever actually having to pay\u200a\u2014\u200aif everyone plays Rationally, the game can be influenced for free!Caveat. Ethereum payments and burns can only be triggered by an on-chain event. This is clearly a limitation\u200a\u2014\u200afor example, in the prisoner\u2019s dilemma, if a prisoner could defect without it being broadcast on-chain, the player sidesteps the million-dollar burn. The relevance of side-channel (off-chain) communication will vary case-by-case. But the fewer off-chain interactions between players, the more likely the game can be successfully warped. The biggest contributions to this area will be discovering the exact property that games must have to ensure the player actions being warped will always be broadcast on-chain.An additional caveat is that, for game-warping to succeed for individual gain, the recipient players must discover the warp has been performed; more precisely, the warp must become common knowledge. This limitation on anti-social contracts may turn out to be a blessing.What does Ethereum change? Technically speaking, game-warping doesn\u2019t require smart-contracts. However, an obvious niche for Ethereum smart-contracts is for cases when, due to your jurisdiction or subject matter, reliably impartial judges are hard to find. Beyond these niches, Ethereum (or another smart-contract platform) makes all game-warping vastly more practical by providing a deterministic, all-seeing, cheap, and expedient (!) judge.Ramifications. This framework provides a process for generating Ethereum startups. For example one could:Go through a classic game-theory textbook.Enumerate all of the common non-cooperative games.See for how many of those games cooperation could, via conditional payouts or deposit burns, yield a superior equilibrium than the original Nash equilibria.Discover prominent industries where these games appear.For each industry, determine if the player actions could be made into on-chain events. Then for each resulting industry,Submit a startup proposal to become a ConsenSys spoke.Seriously, steal this idea.Special thanks to Georgios, vi, and Dan for our joint research developing game-warping and feedback on drafts.", "responses": "8"}, {"title": "Costs of a Real World Ethereum\u00a0Contract", "author_name": "Danny Ryan", "link": "https://hackernoon.com/costs-of-a-real-world-ethereum-contract-2033511b3214?source=search_post", "post_date": "Aug 10, 2017", "readtime": "10 min read", "upvotes": "1.3K", "content": "Costs of a Real World Ethereum\u00a0ContractDanny RyanBlockedUnblockFollowFollowingAug 10, 2017GAS PRICE PSA (2017\u201308\u201323): The median gas price at the time of writing this article was, and continues to be, in the realm of 20 Gwei. This is far greater than the typical average and safe-low found on EthGasStation (4 and 0.5 Gwei respectively). The median is so high because of bad gas-price defaults found in many wallets. I highly recommend using EthGasStation\u2019s average gas-price or lower in order to not pay high fees and to help drive down the market rate for gas-price.I previously discussed calculating costs of ethereum smart contracts by taking a look at low level operations called OPCODES in conjunction with the market rate for running those OPCODES (gas-price). The examples given were simple but a bit contrived so I decided to take last week\u2019s analysis and apply it to an actual smart contract from start to finish.I\u2019m working on a series of simple smart contracts that are free and open for use. We\u2019ll use the first one in this series\u200a\u2014\u200aEscrow\u200a\u2014\u200aand do a deep dive on the costs associated with it.The ContractA quick background on the contract up for analysis. This contract involves three parties\u200a\u2014\u200aa sender, a recipient, and an agreed upon arbitrator. The sender initializes the contract with some amount of ether and specifies the recipient, the arbitrator, and an expiration date. If any of the two parties (sender, recipient, or arbitrator) confirm the payment via the confirm function, the funds are released to the recipient. If two confirms are not made prior to the expiration, then the sender can void the escrow agreement and retrieve their funds via the void function call.The CostsI deployed an instance of this contract onto the Rinkeby testnet which can be seen on Etherscan. This contract has three transactions associated with it, all of which use the gas-price of 20 Gwei which is the median price seen on Eth Gas Station.The first transaction initializes the contract and deposits 0.5 ether into the contract. Transaction Cost: 0.01072934 Ether ($3.21 at $300/ETH)In the second transaction the sender calls confirm. Transaction Cost: 0.00093492 Ether ($0.28 at $300/ETH)In the third transaction the arbitrator calls confirm, and the funds are dispersed to the recipient. Transaction Cost: 0.00164754 Ether ($0.49 at $300/ETH)If I were willing to wait about 20 minutes for my transactions to be picked up, I could have gotten these in on the main-net for 0.5 Gwei (according to Eth Gas Station\u2019s \u201csafe low\u201d). At this gas price, deploying the contract costs around $0.07 and the other two transactions cost $0.01 or less at $300/ETH.Considering this is a fixed cost for up to any amount of Ether held in this escrow contract, these fees seem reasonable. You would likely need to pay your arbitrator some amount to participate, but a lot of the costs and risk for the arbitrator (securely holding and dispersing funds) have been eliminated. You would have to pay solely for the arbitration\u200a\u2014\u200athe decision\u200a\u2014\u200arather than all of the book keeping.This is a great place to stop if you just wanted the straight up costs on a real world example. The rest of the article is a deep-dive on where exactly these costs come from.Read on at your own risk!Costs to\u00a0DeployIn solidity, the primary programming language currently being used for smart contracts, contracts are initialized via a constructor. You can see in the Escrow constructor that we pass in 4 pieces of data\u200a\u2014\u200athe addresses of the three parties involved and a timestamp in the future at which the contract can be voided.The initialization transaction for this contract is by far the most expensive operation. It required 536467 gas to deploy the contract and execute the constructor code. At 20 Gwei per gas, deploying the contract cost 0.01072934 ether, or about $3.21 USD at the current exchange rate of $300/ETH.The ConstructorTo further examine the initialization, let\u2019s take a look at the VM trace of the transaction. This shows the OPCODES executed by the EVM in the constructor of the Escrow contract. This accounts for 113539 of the gas used. The most expensive operations were a number of SSTOREs which were used to store the addresses of the actors, the expiration timestamp, and to initialize some memory locations for the actors array and the confirmations mapping. These SSTORE operations alone accounted for 110000 gas, or about 97% of the gas used in the constructor. The rest of the OPCODES were used for checking the validity of the timestamp and business logic around getting everything stored.What about the\u00a0rest?The constructor only accounted for about 20% of all gas used in this transaction. Where was the remaining 80% spent?In this transaction, we specified a maximum gas allowed to be used (\u201cGas Limit\u201d) as 1000000 gas. The EVM starts at this number and counts down with each operation to ensure there is enough gas remaining. If the EVM hits zero gas while in the middle of code execution, the transaction fails, changes are undone, and the fee associated with gas is still paid to the miner.We can see in the VM Trace that we begin the constructor execution at 837872 gas remaining. This means at that 162128 (1000000-837872) or about 30% of the total gas has already been used when we get to the constructor.What costs so much before we even get to the code execution? First, there is 21000 gas baseline transaction fee. This fee, called Gtransaction in the Yellow Paper, is paid on all transactions in the Ethereum network. Next is an additional 32000 gas (Gcreate) paid because this is a contract creation transaction. We\u2019re at 53000 gas\u200a\u2014\u200astill 109128 gas unaccounted for before the constructor. The bulk of this gas is used to pay for the size of the transaction data seen in the \u201cInput Data\u201d field on Etherscan. This is 3556 hex \u201cnibbles\u201d or 1778 bytes of data. As seen on page 20 of the Yellow Paper, Gtxdatazero costs 4 gas/byte and Gtxdatanonzero costs 68 gas/byte. We can calculate how many non-zero and zero bytes with the following equation\u200a\u2014\u200ax * 68 + (1778-x) * 4 = 109128, where x is the number of non-zero bytes and 1778-x is the number of zero bytes. Solving for x gives x = 1594, so there are 1594 non-zero bytes and 184 zero bytes. As a sanity check, I wrote a python script to count the zero and non-zero bytes in the txdata. The numbers add up.The remaining 50%This still leaves about 50% of the gas being used after the constructor. Our gas limit started at 1000000. The last instruction of the constructor code left us at 724333 available gas. The transaction used 536467 gas in total so the available gas at the end of the entire transaction was (1000000\u2013536467) 463533 gas. The amount available at the end of the constructor code less the amount available at the end of the transaction equals the amount of gas used after the constructor code finished\u200a\u2014\u200a(72433\u2013463533) 260800 gas.At this point, we have paid for the transaction data and for the initialization of the contract, but what about future calls to the contract? Future calls will have to execute code, so that code must live on-chain in the state of the contract itself. Page 9 of the Yellow Paper discusses the cost of the \u201ccode deposit\u201d to pay for adding bytecode to the blockchain state. cost = Gcodedeposit * |o| where o is the \u201cruntime bytecode\u201d and Gcodedeposit is 200 gas/byte. The runtime bytecode is the original bytecode sent in the transaction but stripped of the constructor and general initialization code. Because this initialization code is only executed upon initialization, it is extracted out to save you money and to save the node operators storage space.The Solidity compiler outputs both the bytecode and runtime bytecode. Remix, an in-browser solidity editor/compiler, also shows you these two values under \u201ccontract details\u201d. Remix is great for some quick info and sanity checks.From the compiler output, I see that the size of the bytecode is 1650 bytes, while the size of the runtime bytecode is 1304 bytes. This implies that 346 bytes (1650\u20131304) are initialization code. The cost of the code deposit on the runtime bytecode is thus 1304 * 200 = 260800 gas which is exactly the amount we expected.Again, the contract initialization transaction is by far the most expensive operation related to the Escrow contract and likely for most contracts. We are sending a transaction full of bytecode, running constructor code that initializes a number of places in memory, and then paying a fee for all of the code we are leaving on the blockchain in perpetuity. Increasing the size of the blockchain\u200a\u2014\u200athe globally distributed and replicated database\u200a\u2014\u200ais and should be expensive.Costs to\u00a0ConfirmConfirmation #1The first confirmation on the Escrow contract simply updates the state to show the user confirmed. The money is still held and not released until the second confirmation.This transaction had a gas limit of 90000 gas and used 46746 gas. Code execution began at 68728 gas and ended at 43254 gas, so running the code used 68728\u200a\u2014\u200a43254 = 25474 gas. If you take a look at the trace, there is one SSTORE costing 20000 gas. This is to store the fact that the user sent in their confirmation. This is the majority of the code execution cost. The next most expensive operations are a number of SLOADs which load words from memory each costing 200 gas.Because code execution began at 68728 of the original 90000 gas limit, 90000 \u2013 68728 = 21272 gas was used prior to this. 21000 gas is the base cost for any transaction so there\u2019s a remaining 272 gas to account for. Remember non-zero transaction data costs 68 gas/byte. This transaction had 4 bytes of data costing 4 * 68 = 272 gas.21272 pre-execution gas plus 25474 execution gas equals 46746 gas, which is the total\u200a\u2014\u200aall gas accounted for.Confirmation #2The second confirmation on the Escrow contract both updates the state to show the user has confirmed and releases the funds to the recipient. We expect this transaction to be a bit more expensive than the first confirmation because it is doing what the first did plus sending ether.This transaction had a gas limit of 90000 gas and used 82377 gas. Code execution began at 68728 gas and ended at 7623 gas, so running the code used 68728 \u2013 7623 = 61105 gas. The code execution started at exactly the same gas count as the first confirmation so 21272 gas was used prior to code execution, accounting for the 21000 base transaction cost plus 4 bytes of txdata. The amount used in code execution, 61105 gas, plus the amount used prior to code execution, 21272 gas, equals 82377 gas\u200a\u2014\u200aall gas accounted for.Let\u2019s take a deeper look at the VM trace. Like the previous transaction, there is one SSTORE to store the fact that this user confirmed. The bulk of the remaining 41005 gas is used on an OPCODE named CALL. This operation used 32400 gas.In the trace, it looks like 39981 gas is used on a CALL operation, but this is a bit misleading. This is actually just the amount of gas allotted to the CALL operation rather than the total consumed. Gas is allotted to CALL operations rather than simply spent because CALLs can execute code if the receiving address is a contract, and the exact amount of gas required to run the code is not known until executed. We can look at the operation before and after the CALL to calculate how much was actually used. The operation before the CALL ends at 40064 gas, and the operation after begins at 7664 gas. So the CALL operation sandwiched between uses (40064\u20137664) 40064 \u2013 7664 = 32400 gas.Let\u2019s take a look at page 20 and 29 of the Yellow Paper to understand why the CALL operation costs what it does. Executing CALL costs 700 gas (Gcall) no matter what. Using CALL to transfer a non-zero amount of ether costs an additional 9000 gas (Gcallvalue). A CALL operation that adds new account to the blockchain state costs an additional 25000 gas (Gnewaccount). In this instance, the CALL did add a new account to the blockchain because the recipient address previously had no value or contract associated with it. A CALL operation with a non-zero value transfer also gets a stipend of 2300 gas (Gcallstipend) that is subtracted from the other costs associated with the operation. So in total700 (Gcall) + 9000 (Gcallvalue) + 25000 (Gnewaccount) - 2300 (Gcallstipend) = 32400 gasCALL gas is accounted for.The expensive 25000 gas used for Gnewaccount was a bit surprising. If the recipient had previously been a non-empty account, our gas costs would have been significantly smaller. When doing gas calculations/estimates there are a number of complexities like this depending on the current state.Costs to\u00a0VoidI\u2019ll leave calculating and analyzing the cost of executing a successful void transaction to the reader. We would expect this operation to cost a similar amount to the second confirmation because it does a value transfer via a CALL operation, but it should cost a bit less because it does not update the state of confirmations via an expensive SSTORE.Further NotesIt should be noted that the expensive CALL operation in confirm likely should have been avoided entirely. Directly sending funds after an effect is actually an anti-pattern in solidity. The pattern is instead to update state via one function call that allows for a subsequent withdrawal. In the Escrow contract, the second confirmation should change the state of the contract to \u201cconfirmed\u201d, disabling calls to void and enabling the recipient to call a new function named withdraw. This would avoid issues related to unexpected fees or operations related to the CALL.The red flag in this analysis was the fact that we had an operation that could balloon in gas costs due to the unknown nature of what account/code would be called and executed. This unknown can lead to bugs such as the DAO reentrancy bug.Smart contracts are incredibly powerful but, as we\u2019ve seen, can be quite complex. The languages, tools, and best practices surrounding them are still in their infancy. I urge the community to focus a significant portion of its efforts on building out the underlying tools and architecture to ensure that we can create both correct and affordable smart contracts.If we\u2019re going to do this, let\u2019s do it right.", "responses": "9"}, {"title": "", "author_name": "Jim McDonald", "link": "https://medium.com/@jgm.orinoco/releasing-stuck-ethereum-transactions-1390149f297d?source=search_post", "post_date": "Dec 6, 2017", "readtime": "6 min read", "upvotes": "1.2K", "content": "Releasing Stuck Ethereum TransactionsJim McDonaldBlockedUnblockFollowFollowingDec 6, 2017", "responses": "17"}, {"title": "Long Term Outlook for Ethereum\u00a0Classic", "author_name": "Anthony Lusardi", "link": "https://medium.com/ethereum-classic/long-term-outlook-for-ethereum-classic-b6f1643f8f70?source=search_post", "post_date": "Feb 19, 2018", "readtime": "5 min read", "upvotes": "2.3K", "content": "Long Term Outlook for Ethereum\u00a0ClassicAnthony LusardiBlockedUnblockFollowFollowingFeb 19, 2018Lately there\u2019s been a lot of speculation about ETC, the price is rising, the Callisto airdrop is happening, and Crypto Twitter is tweeting up a storm about ETC. Some are certainly trading for short term profits, and it\u2019s their right to, but they\u2019re not seeing the forest for the trees. Even worse, some have dubbed ETC a shitcoin, as if we\u2019ve existed this long to just be another pump and dump. We haven\u2019t, we aren\u2019t, and we won\u2019t be if I have anything to say about it.This article sets out to give some insight into the advancements ETC has made and the bright roadmap it has for its future.The future of ETC is the future of all Cryptocurrencies, and that future is interoperability, there will be no one winner. ETC will become highly interoperable while others naively fight to be dominant.At the core of our sidechains is SputnikVM which can run smart contracts anywhere... You can do this today. Not at some nebulous time in the\u00a0future.SidechainsWe\u2019re going to have sidechains this year, transactions on them will be free, and even very low powered devices will be able to use them. We\u2019ll be the first blockchain to properly address the needs of IoT devices. While others claim to, and start announcing partnerships before anything even works, we\u2019ll be the first to really get it done.At the core of our sidechains is SputnikVM which can run smart contracts anywhere, such as in the browser or you can put it in embedded devices. You can do this today. Not at some nebulous time in the future.Our sidechains will be highly flexible. They\u2019ll allow whoever created them to choose between PoA or PoS approaches. They can be public, private or otherwise permissioned depending on your needs.Ease of\u00a0useEvery blockchain still needs to improve their usability but we\u2019ve made great strides. We\u2019ve got beautiful, well-working wallets (Emerald Wallet, CEW). A simple DNS-like system (via CEW). Mobile wallets exist and more are coming. We\u2019re supported everywhere, we\u2019re on every major exchange, we\u2019re very popular internationally, we\u2019re even making our way into Cardano\u2019s wallet.Sent myself some ETC and it showed up in Emerald Wallet in about 20\u00a0seconds.Easier developmentCurrently developing for blockchain tech is fairly low-level, while we have languages like Solidity which very much look like JavaScript, they function like a low-level language. This leads to a lot of difficulty in development and a lot of bugs cropping up.Emerald Project will provide a common high-level framework to ease development on Ethereum Classic. Imagine libraries where integrating with hardware wallets is as easy as ledger.connect(), or interacting with tokens is as simple as Token t = new Token(0xbeef..); t.transfer(0xfa34..). This is just pseudocode but that\u2019s where we are\u00a0heading. No messing with RPC or hunting down ABIs necessary.Emerald Project doesn\u2019t end at just the code though, it also extends to the UI. Check out Emerald Wallet, look how great it looks, your apps will be able to seamlessly drop in the same elements. On the user end the consistent UI will create a familiar and cohesive feel across ETC projects.Improved developer documentation is also coming and will be announced in the coming months.Emerald WalletInstalling Emerald Wallet took me literally 1 minute to install and immediately start using ETC.I\u2019ve also just installed Mist for Ethereum and it looks like I\u2019ll be waiting a while. I clicked on \u201cLaunch Application\u201d several times and nothing is happening. I seem to just be stuck on block 10,240 now.While in Emerald Wallet I sent myself some ETC and it showed up in Emerald Wallet in about 20 seconds.Mist on the other hand appears to have crashed. I restarted it.Back to waiting.In fairness it did eventually sync. And before you get mad that this is a dig at Mist developers, it\u2019s really not, developing a good wallet is hard work, it is not easy, errors happen, and I\u2019m sure they\u2019ll fix these above issues.This is simply to illustrate that ETC does have a good wallet which is able to go from install to using the ETC network in about a minute. Those who claim ETC can\u2019t accomplish a \u201csimple\u201d task like a wallet are misinformed at best and willfully ignoring the issues within their own communities.Open communityThe Subreddits, Forums, Discord, and Telegrams all have separate owners. Discussion is very open and you\u2019re not required to agree with the crowd.We\u2019re very anti-pump and dump, want to know why ETC\u2019s price doesn\u2019t rise endlessly like other coins? Because when you join our forums you may very well find that many in the community won\u2019t promise you the moon, and we\u2019re aware of our flaws and working hard to fix them. We think this will make ETC much more widely used in the long term, at the cost of short term lambo-moon pipe dreams.We\u2019re also not going to police you and tell you what to believe in or what not to. And we\u2019re not going to put our names/faces on every project that comes along. We have principles and we will stick to them.", "responses": "7"}, {"title": "The Birth of Enterprise Ethereum in\u00a02017", "author_name": "Jeremy Millar", "link": "https://media.consensys.net/the-birth-of-enterprise-ethereum-in-2017-ebe7f7abed92?source=search_post", "post_date": "Jan 9, 2017", "readtime": "5 min read", "upvotes": "239", "content": "The Birth of Enterprise Ethereum in\u00a02017Jeremy MillarBlockedUnblockFollowFollowingJan 9, 2017Enterprise use of blockchain technology has evolved at an almost unfathomable rate over the past 24 months.From early bitcoin experiments, senior bankers joining start-ups, the launch of the public Ethereum decentralized application platform and the many private, permissioned systems currently under development using the Ethereum technology, to the creation of industry consortia, blockchain has emerged as one of the top enterprise IT trends entering 2017.The market has already moved beyond the incubation phase where innovators effectively build the technology along with their initial applications, and possibly beyond the early adopter phase too. Increasingly, mainstream enterprise IT organizations are not only educating themselves and experimenting with blockchain but also are aiming to tackle novel use cases and complex IT challenges with the technology. More and more frequently, our clients are asking for assistance building MVPs not POCs, or hardening environments for production readiness.With this whirlwind, dare we say tornado, of adoption, it is also clear that certain key technologies are emerging as potential de facto standards as blockchain platforms, while at the same time IT organizations can be overwhelmed at the complexity and capabilities of the technology.Ethereum is arguably, the most commonly used blockchain technology for enterprise development today. With more than 20,000 developers globally, the benefits of a public chain holding roughly $1bn of value, and an emerging open source ecosystem of development tools, it is little wonder that Accenture observed \u2018every self respecting innovation lab is running and experimenting with Ethereum\u2019. Cloud vendors are also supporting Ethereum as a first class citizen: Alibaba Cloud, Microsoft Azure, RedHat OpenShift, Pivotal CloudFoundry all feature Ethereum as one of their, if not the, primary blockchain offering.Why? The software is widely available: simply download an Ethereum client, pick your favorite development environment, and get going. Ethereum is general purpose and easy to program: full stack / web developers can pick-up the Solidity smart contract programming language in a matter of hours and develop initial applications in only a few days. Documentation is plentiful, as are code samples, deployment frameworks, and training. Little wonder that so many companies are using Ethereum as their blockchain of choice.Today, enterprises are deploying private Ethereum networks in or near production in areas as diverse as supply chain tracking, payments, data privacy, compliance, and asset tokenisation just to name a few. Certainly, we are some time away from seeing investment banks fully migrate securities clearing and settlement to Ethereum networks, but we already do see private Ethereum blockchain networks in production, even in financial services.But enterprises adopting Ethereum face a number of challenges, notably:Ethereum was developed initially for public chain deployment, where trustless transaction requirements outweigh absolute performance. The current public chain consensus algorithms (notably, proof-of-work) are overkill for networks with trusted actors and high throughput requirements.Public chains by definition have limited (at least initially) privacy and permissioning requirements. Although Ethereum does enable permissioning to be implemented within the smart contract and network layers, it is not readily compatible \u2018out of the box\u2019 with traditional enterprise security & identity architectures nor data privacy requirements.Naturally, the current Ethereum Improvement Process is largely dominated by public chain matters, and it has been previously challenging for enterprise IT requirements to be clarified and prioritised within it.As a result, many enterprises who have implemented private Ethereum networks have either \u2018tweaked\u2019 or forked open source implementations or have relied on proprietary vendor extensions to meet their deployment requirements. Some of these are extremely sophisticated and are on the cutting edge of computer science: BlockApps STRATO, Hydrachain, Quorum, Parity, Dfinity, and Raiden. While understandable, and in fact until now the only effective approach, the downsides are obvious: lack of application portability, code base fragmentation, and vendor lock-in.Not surprisingly, this has been a point of conversation for some months between enterprise technology vendors, corporate users and Ethereum startups. These discussions have expanded, with the blessing and involvement of Vitalik Buterin, into a dedicated group of enterprise technology vendors, the largest corporate users and Ethereum infrastructure leaders collaborating to define a roadmap, legal structure, governance and initial technical developments to define \u2018Enterprise Ethereum\u2019.To some extent this parallels the paths of other significant platform technologies, such as TCP/IP & HTTP and perhaps (from a software perspective) more relevantly Java and Hadoop.Java was never intended to be a broadly used enterprise development tool; it was in fact developed originally for interactive television (specifically set-top boxes and smart cards\u200a\u2014\u200awho remembers Java Card?). However, Java had many advantages for web development with database back-ends (known as web client-server or three-tier architecture): it had comprehensive web and database APIs, it provided \u2018write-once, run anywhere\u2019 platform portability, simplified object-oriented programming constructs with familiar syntax, and a rapidly development ecosystem. Indeed, it was not even Sun that created Java Enterprise Edition (at that time, J2EE); it was a plucky start-up (WebLogic) and a group of enterprise customers and other vendors. Similarly, Hadoop was originally created to index the web and for advertising serving. And who knew TCP/IP would emerge into a protocol that today, literally exists everywhere?Ethereum is one of the few, indeed perhaps the only, blockchain technology with a similar trajectory and potential. Even the early \u201cpublic permissionless\u201d vs. \u201cprivate permissioned\u201d differentiation to expedite enterprise adoption strongly echoes the internet vs. intranet deployment considerations that were so prevalent before enterprises became comfortable with security and scalability issues of the then available public infrastructure.By banding together the key adopters, supporters and shapers of enterprise usage of Ethereum, we are seeking to provide a platform not only for the technology, but also to provide the governance and tools to create a standard for \u2018Enterprise Ethereum\u2019. It is a group of builders & doers, developing sufficient governance for enterprise requirements but not \u2018death by committee\u2019 and without \u2018pay to play\u2019. Some of our collaborators have noted the refreshing nature of this approach and the pace of technical progress that is achievable from working off a single standard and open source code base. Moreover, Enterprise Ethereum will build upon the current Ethereum scaling roadmap and maintain compatibility and interoperability with public Ethereum. In fact, we believe Enterprise Ethereum will contribute significantly to the overall development of Ethereum.We\u2019ll soon be releasing formal information regarding the many stakeholders who are already forming Enterprise Ethereum. If you are a large corporate user of Ethereum (or anticipate you will be soon) and are interested in learning more about this initiative, please feel free to contact me so that we can register your interest: jeremy@ethent.org.Stay tuned\u2026 the best is yet to come.Jeremy Millar is Chief of Staff at ConsenSys. He began his career as one of the first Java architects at Oracle, before moving into sales management and strategy roles, both within Oracle and at a number of start-ups. He went on to complete his MBA at Oxford University before joining the M&A team at Goldman Sachs. At ConsenSys, Jeremy has multiple focuses within enterprise and product, and is the chief instigator of Enterprise Ethereum.Like this piece? Sign up here for our weekly newsletter.", "responses": "8"}, {"title": "Sharding is coming according to Ethereum\u00a0Founder", "author_name": "Michael K. Spencer", "link": "https://medium.com/@Michael_Spencer/sharding-is-coming-according-to-ethereum-founder-71b188c722fd?source=search_post", "post_date": "May 1, 2018", "readtime": "2 min read", "upvotes": "1.1K", "content": "Sharding is coming according to Ethereum\u00a0FounderMichael K. SpencerBlockedUnblockFollowFollowingMay 1, 2018TechStartups.comEthereum mastermind Vitalik Buterin released a new proof of concept that demonstrates how the sharding scalability solution can be \u201cbolted on\u201d to the Ethereum main chain.This is good news for the smart contract world computer Ethereum, since scalability is a major issue.The demonstration follows a current \u201cminimum sharding protocol\u201d initiative by the Ethereum cofounder that plans to radically improve the trade throughput and scalability of their Ethereum blockchain. In times when Crypto appears to be rebounding in April, there\u2019s light at the end of the tunnel for dApp platforms and the future of decentralization.What is Sharding?The number of Ethereum transactions has dramatically increased over the last several years, which has caused transaction fees to rise accordingly.The concept of sharding involves splitting the Ethereum blockchain into potentially myriad smaller sections that are able to process transactions in a parallel manner, thereby speeding up transaction throughput and capacity.A recently available upgrade printed by Buterin about the 29th of April summarizes cross-linking for a remedy to match the execution of the minimum sharding specification, speeding up shard collation.In essence, Sharding is a solution that optimizes the process of verifying transactions and smart contracts by splitting the blockchain network into partitions called shards. (CNN)A \u201cMinimal Sharding Protocol\u201dAccording to Cryptoslate, the integration of the sharding scaling solution appears to have kicked into high gear over the last month.", "responses": "4"}, {"title": "ICO Help: Here\u2019s How to Create your Ethereum\u00a0Wallet", "author_name": "Simona Vaitkune", "link": "https://medium.com/swlh/ico-help-how-to-create-your-ethereum-wallet-4a78c1ef9022?source=search_post", "post_date": "Dec 5, 2017", "readtime": "9 min read", "upvotes": "1.8K", "content": "ICO Help: Here\u2019s How to Create your Ethereum\u00a0WalletSimona VaitkuneBlockedUnblockFollowFollowingDec 5, 2017Growing number of people recognize that one of the best ways to invest in cryptocurrency is by participating in Initial Coin Offerings, a.k.a. ICOs. However, one barrier that stops people from investing is unfamiliarity with the ICO process. At a glance, funding your favorite project though ICO might look complicated. However, once you get there, it will be a piece of cake. This article will show you to participate in ICO issued on Ethereum blockchain.The first step is setting up Ethereum ERC20 compatible wallet.Why do you need an ERC20 compatible Ethereum\u00a0wallet?Most ICO tokens are issued on Ethereum blockchain. It means that people who want to participate in ICO need to have Ethereum and its wallet. However, not all digital wallets support Ethereum powered ICO tokens. For example, to participate in Fast Invest ICO, you need to set up an Ethereum ERC20 compatible wallet where you and only you hold its private keys. You probably know that ICO is about sending and receiving coins. Your private keys are necessary for correct interaction with smart contracts to transfer and receive tokens.DO NOT PARTICIPATE IN ICO BY SENDING COINS FROM ANY CRYPTOCURRENCY EXCHANGES. YOU NEED A ERC20 COMPATIBLE ETHEREUM WALLET. OTHERWISE, YOU WILL LOSE YOUR FUNDS.To clear the confusion, here is a token compatible Ethereum wallets list.Compatible walletsThese wallets have been verified to support Ethereum ERC20 tokens. The list is continuously updated at Tokenmarket.MyEtherWallet (Online)MetaMask (Firefox and Chrome browser extension)Mist (Desktop)Parity (Desktop)imToken (iPhone)imToken (Android)Incompatible walletsTo date, these Ethereum wallets are known to be incompatible with ICO\u2019s. Before investing, you should move your ETH to one of the wallets mentioned above.Any Bitcoin exchangeAny Ethereum exchangeCoinbaseExodusBitrexxJaxxPoloniexKrakenBitfinexCex.ioBitstampNext, we will show you how to open a suitable Ethereum wallet that will serve your needs. For that, well use MyEtherWallet and Mist wallets.How to open MyEtherWallet to participate in\u00a0ICOMyEtherWallet is the most convenient Ether wallet which is capable of smart contracts. Thus, it\u2019s no surprise that most people use it to store their tokens acquired via ICOs. It is an online wallet, but it also provides offline and hardware wallet support, meaning that users can generate wallet keys for a variety of Ethereum storage solutions. That makes it a great all-around solution for everyone interested in investing in ICO.Here\u2019s how to set it up.1.Go to www.myetherwallet.com. You will be greeted by several safety reminders and option to create a new wallet.2.Create a password.Use a combination of letters, numbers and symbols to make it as strong as possible. Write it down immediately and, if possible, make several copies. Then, click \u201cCreate New Wallet.\u201d3.Download and store your keystore file. Do it for security reasons. As you know, there can never be too much safety precautions in cryptocurrency trading. Store your keystore file in a secure location and click continue.4.Save your private key.It may look just like a string of symbols, but this is your private key and its safety is of critical importance. Make sure to back it up and keep it safe. You can also print it to keep it as a paper wallet. Remember, there is no way to retrieve your forgotten or lost private key and password, therefore, take all necessary safety measures suggested by the page.5.Use your private key or keystore file to open your wallet.\u00a0There are many ways to unlock your wallet, but to keep it simple let\u2019s stick with the files we just got\u200a\u2014\u200aprivate key and keystore file. Select and paste your private key or upload the keystore file to unlock your wallet.6.Congratulations, you\u2019ve just opened your fully functional Ethereum wallet.\u00a0Next time you want to access it, go to www.myetherwallet.com, click \u201cView Wallet Info\u201d in the top right corner and authorize yourself again.All is left now is to load your wallet up with some Ether. If you already hold some of it, send it to your public address. MyEtherWallet also makes it easy to buy Ether via Coinbase (although it sells at a more expensive rate than usual).If you want further instructions on how to buy Ethereum with fiat or Bitcoin, click here.Mist wallet step by step\u00a0guideCryptocurrency wallets are categorized into four categories: online (cloud-based), software (desktop and mobile), hardware (external device) and paper (printed keys). You may already be aware that desktop wallets are considered as more secure than online wallets. Therefore, if you want that extra layer of safety, it is recommended to use the desktop wallet. For that, we suggest using official Ethereum wallet Mist. Here\u2019s how you can set it up.Download Mist wallet.Look for the latest Mist wallet version here. Scroll down to downloads and choose the release according to the system you\u2019re using. In this tutorial, we\u2019re using the Ethereum-Wallet-win64 file.2. Installation.Once downloaded, unzip the file and look for Ethereum Wallet application file and launch it.If you choose to download Ethereum Wallet installer file, you\u2019ll be asked to select an install location for the wallet and its blockchain data. Put it on a drive which has sufficient hard disk space, so that it can use some of it. All blocks combined can take up to 30Gb of space.When the screen loads, you should see this window.Select \u201cUSE THE MAIN NETWORK\u201d option. The test network is a function for developers and is not connected to the actual blockchain network.3. Setting up your wallet.Once you select the main network, a window will pop up asking if you have a wallet file. Let\u2019s assume that you don\u2019t possess one and click skip.Next, you\u2019ll be asked to create a secure password for your new account. Use a unique mix of letters, numbers and symbols to make it impossible to guess. You won\u2019t be able to change it later on, so write it down immediately.When you establish a secure password, click next and you will see a reminder to backup your password and keystore file. It is critical that you do that because if you lose them, you will also lose access to your wallet and its assets.Click OK, backup your keys and here you have it! Your Ethereum wallet is ready to use. Next thing you\u2019ll need to do is load it up with Ether. You can immediately top it up with Bitcoin or transfer Ether from your other wallets. If you need help on how to purchase Ether, read our write-up on how to top up your wallet for ICOs.Be aware that you won\u2019t be able to take advantage of your wallet until it finishes downloading all of the network blocks. Depending on your network speed it might take a while, so it\u2019s better to just leave your computer on for a while. Again, Mist can use up a lot of your disk space and might be too big to store it locally, so make sure to put it on a drive where it can fit.Here is how your new, safe and sound Ethereum wallet for ICO\u2019s and storage will look.If you need further guidance on how to top-up your wallets, please check our other guide.ICO participation stepsInvesting in Fast Invest ICO will require undergoing the following sequence of actions.If you don\u2019t yet own any ETH, buy some Ether on any cryptocurrency exchange (Coinbase, Bitstamp, Kraken or any other).Skip this step if you already have ETH in your wallet. Transfer your Ether to your ERC20 compatible Ethereum wallet (MyEtherWallet, Mist, Parity, imToken etc.).Copy-paste the payment address from the official Fast Invest ICO page: https://fastinvest.com/en/ico/. It will be published as soon as the ICO starts, that is December 4th, 10:00 AM UTC.\u00a0Be AWARE of scams, do not copy this address from any other resources.Open your Ether wallet and send a deposit to the ICO payment address. Please specify the amount you want to contribute and use correct Gas value. A recommended Gas limit is 200.000.Confirm the transaction to the specified address and hit the send button.Add your newly acquired tokens. It depends on your wallet interface, but for MyEtherWallet go to \u201cView Wallet Info\u201d -> \u201cToken Balances\u201d -> \u201cAdd Custom Token\u201d and for Mist head to \u201cContracts\u201d -> \u201cWatch Token\u201d. All you need to do here is paste Fast Invest ICO Ether contribution address (the one where you sent your Ether) and all of the fields should be filled automatically. If it doesn\u2019t, all of the necessary info can be easily found on the company\u2019s website.\u00a0Click save and here you have it! Your FIT coins will immediately appear in your wallet once and of your previous transactions have been processed.Beware of\u00a0GasBefore you contribute your Ether to Fast Invest ICO, be aware that all the necessary information to buy tokens will be published on our website:Address to send funds\u200a\u2014\u200agiven at official Fast Invest ICO page: https://fastinvest.com/en/icoMinimal amount of contributionRecommended Gas limit\u200a\u2014\u200ait tells the system that it\u2019s a smart contract transaction, which is more complicated than a regular Ether transfer.But what is Gas and its limit?All transactions in Ethereum network require Gas. The set amount of Gas reflects the complexity of an operation. Regular Ether transactions don\u2019t need to have a default Gas limit (transaction maximum Gas) because they are rather straightforward. However, token sale transactions are more complex than simple transfers. Therefore, it needs more processing power to execute smart contracts. If the gas limit is too low, the network won\u2019t be able to carry out your transaction and it will fail.Think about it this way: Gas is like fuel in your vehicle. If you don\u2019t fill it with enough gas, you won\u2019t reach your desired destination. In ICO case, the transaction is your vehicle, Gas is its fuel and the final destination is the ICO wallet address. You have to allocate sufficient Gas if you want to make your Ether reach its goal and deliver you the tokens.Closing notesFor more information, take a look at Fast Invest ICO white paper.Remember that your success is our priority.If you succeed, we succeed!This story is published in The Startup, Medium\u2019s largest entrepreneurship publication followed by 272,171+\u00a0people.Subscribe to receive our top stories\u00a0here.", "responses": "7"}, {"title": "Ethereum for\u00a0dummies", "author_name": "vasa", "link": "https://hackernoon.com/ethereum-for-dummies-af5aeacb13d4?source=search_post", "post_date": "Jun 11, 2018", "readtime": "6 min read", "upvotes": "1.4K", "content": "Ethereum for\u00a0dummiesvasaBlockedUnblockFollowFollowingJun 11, 2018Ethereum for\u00a0dummiesEthereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third party interference.Even though Ethereum was founded in late 2014, and the volume of articles explaining the intricacies of the technology has grown in the past year, the concept remains complex to grasp. This yellow paper written by Ethereum CTO Gavin Wood or the original white paper written by founder Vitalik Buterin are indicative of the underpinning complexity of the concept.\u00a0\u00a0This post is intended for the average user of the internet\u200a\u2014\u200asomeone who uses apps but does not necessarily develop them, makes online purchases but does not necessarily understand how they are transacted behind the scenes.\u00a0\u00a0\u00a0We recommend checking out these resources from the Ethereum founding team and decide if you even need a simplified explanation.Ethereum for Dummies by Dr. Gavin Wood [CTO, Ethereum]Ethereum explained in 100 seconds [Gavin & Vitalik]What is Ethereum? [slides from Ethereum team]If you\u2019re still with us\u2026Let\u2019s start with the computer.If you watched at least part of the above video, Ethereum\u2019s CTO Gavin Wood describes it as:Source: Deviantarta \u201cglobal computer\u201dWe\u2019d like to stick with Gavin\u2019s theme and explore what he really means. A computer is, simply put, a computational machine: it takes inputs, processes these inputs using certain instructions, and creates outputs.\u00a0\u00a0\u00a0Now, let\u2019s imagine that you want to record a song on your computer. You could fire up some recording software, start singing and save the song as a file on the computer. You have full control and ownership of this file.\u00a0\u00a0Or you could use an app like Soundcloud and record your song directly onto the cloud. You still own this song, but Soundcloud technically can at a later time decide to change its ownership policy.\u00a0\u00a0\u00a0Cloud capabilities in essence have allowed end users to transfer ownership of resources such as computational power and storage to companies whose sole business is maintaining such resources. By design, this is centralized control of resources.\u00a0\u00a0\u00a0Instead of recording your song to Soundcloud, imagine if you were able to save the song on thousands of computers around the world. If you\u2019ve used a torrent service, you\u2019d instantly know what we\u2019re talking about. This is, by design a decentralized system.\u00a0\u00a0\u00a0At it\u2019s core, Ethereum uses blockchain technology. In lay terms, this means that Ethereum\u2019s global computer is designed to process instructions in a decentralized way, relying on the processing power and storage resources of multiple computers or \u201cnodes.\u201d With this new understanding, we will extend Gavin\u2019s description of Ethereum to call it:a \u201cdecentralized global computer\u201dWhat types of instructions does Ethereum\u00a0process?In the video, Gavin goes on to use another analogy to describe Ethereum.If bitcoin is cryptofinance, Ethereum is cryptolawAgain, let\u2019s take Gavin\u2019s cue and make sense of his statement in a real way. In an effort to generalize the benefits and applications of a decentralized currency (Bitcoin) system, Ethereum founders looked at law, more specifically contracts, as the next logical evolutionary step. In a world of currencies and transactions, contracts seemed like the most effective mechanism to enforce trust.Source: Merchant\u2019s Agreement on\u00a0DeviantBy tapping into the computational and programmatic advantages of blockchains, Ethereum aimed to make contracts smarter. As a result, Ethereum evolved into a platform to run smart contracts. According to Ethereum, anything that can be mathematically represented can be programmed and put into a smart contract. Further extending our definition from earlier, Ethereum can be described as:a \u201cdecentralized global computer that processes smart contracts\u201dHow do these smart contracts work?Let\u2019s go back to our computer analogy: we established that Ethereum\u2019s \u201cglobal computer\u201d is capable of processing instructions. Additionally, Ethereum expects these instructions to be programmed as a contract, i.e., an agreement between two or more parties that enables a transaction.\u00a0\u00a0\u00a0To simulate an agreement, let\u2019s imagine that you want to sell a recording of your song. Ignore for now how or where the song is hosted.\u00a0\u00a0\u00a0First, we define a contract stating that the song will be made available to download when a payment of $1 is made. Technically, real world currencies cannot be directly made available on the Ethereum network.\u00a0\u00a0\u00a0Next, in order to add this contract on the blockchain, it needs to be converted into a piece of code that executes the simple instruction:\u2018pay $1 \u2192 download file\u2019.Programming this instruction is made possible by Ethereum\u2019s own contract language \u2019Solidity\u2019. [note: Ethereum allows developers to use such tools to build applications for end users. Users will not need programming knowledge to create contracts]\u00a0\u00a0When this instruction is coded and deployed to the blockchain, the contract is assigned an address which looks something like:\u201c0xdaa24d02bad7e9d6a80106db164bad9399a0423e\u201d.This is an address that resides on the blockchain, and becomes the basis of all future transactions.\u00a0\u00a0\u00a0In our example, when some user Alice wants to download your song, she\u2019d copy this address to her crypto wallet (or create a wallet first), and within a few seconds, the funds will be verified by the blockchain, $1 will get deposited into your crypto wallet, and the song will be available for Alice to download.\u00a0\u00a0Since the blockchain ecosystem is still in its infancy, transaction processing is not as intuitive or straightforward as typical online transactions we\u2019re accustomed to. This is changing rapidly, however, with a number of new apps focused on improving user experience. A future post will delve into the mechanics of blockchains to describe why they are effective, immutable and foolproof.Why is it smart to execute contracts this\u00a0way?To appreciate the genius behind Ethereum\u2019s smart contracts, we\u2019d have to take a look at how contracts are being executed today. Let\u2019s review what happens behind the scenes when purchasing our song from iTunes.\u00a0* When Alice purchases our song on iTunes using her credit card (assume Chase), the bank (assume BoFA) that processes credit card transactions for Apple sends a payment authorization request to Chase.\u00a0\u00a0* Chase then returns an authorization code if Alice\u2019s balance checks out. However, no money has exchanged hands yet.\u00a0\u00a0* Alice\u2019s transaction along with every other transaction at BoFA is saved and sent for processing to MasterCard (credit card processor) the next day.\u00a0\u00a0* MasterCard sends Alice\u2019s transaction to Chase, pulls $1 from her account, pockets a small transaction fee, and sends the remaining amount to Apple via BoFA.\u00a0\u00a0* Finally Apple deducts its own share of the $1 before depositing money into our bank account.\u00a0\u00a0\u00a0As you can see, a typical agreement between two parties requires arbitration or audit from third parties to legitimize the agreement. In the above example third parties are required to process the payment (credit processor) and hold money (bank). Ethereum is designed to do away with both these entities.\u00a0\u00a0First, blockchain technology replaces payment processing entities by using an immutable and foolproof verification process that executes instantly. Secure record keeping is one of the main reasons large financial institutions are evaluating the blockchain technology.\u00a0\u00a0Second, banks on either ends of the transaction are replaced by digital wallets, linked directly to individuals and secured by complex mathematical cryptographic functions.\u00a0To answer our original question, the intelligence afforded by Ethereum to programmatically execute contracts and enforcing trust via the blockchain makes these contracts smart by design.", "responses": "9"}, {"title": "Ethereum is Built for Software Developers", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereum-is-built-for-software-developers-ccdab9f9aad2?source=search_post", "post_date": "Jun 26, 2018", "readtime": "4 min read", "upvotes": "2K", "content": "Ethereum is Built for Software DevelopersChinese blockchain startups have the best chance of disrupting itMichael K. SpencerBlockedUnblockFollowFollowingJun 26, 2018Let\u2019s just face it, the biggest dApp platform sooner or later is likely to come out of China: NEO, Qtum, VeChain, TRON, etc\u2026However in the meantime, we have to think realistically about the 1,600+ altcoins out there, attracting software developers and startups to your solution means you are the blockchain hub; in 2018 it is Ethereum.Ethereum escaped regulatory scrutiny as it was deemed by the SEC to not be a security. This means it\u2019s likely to become the defacto leader of dApp platforms for years to come.With easily 30k developers worldwide and well over 500+ startups, Ethereum has all the beginnings of what we envisioned the blockchain would be like, with smart contracts and a plan in place for overcoming scalability limits with sharding, plasma and an evolving architecture.For dozens of blockchain startups, Ethereum replaced early-round funding options and completely out-maneuvered traditional Venture Capital options. ICOs flooded the global economy in 2017, and while under regulatory scrutiny now with many of them likely to be deemed securities by the SEC, it\u2019s still a nexus of innovation. Software developers are increasingly attracted to the lucrative blockchain space, as blockchain funds, cryptocurrency trading platforms and corporate backed blockchain experiments pop-up all over the world.In part, this is all thanks to what Ethereum has accomplished in a very short period. We give too much credit to Bitcoin\u2019s price that skyrocketed approaching $20,000 in December, 2017, but the reality is in the code, and Ethereum is now what all dApp platforms compare themselves with, not the decade old Bitcoin model.As Ethereum solves the scalability problem, it will effectively untether itself from Bitcoin\u2019s speculative price volatility. If Bitcoin is a bet, Ethereum is a sure thing. The main reason that is is because of the developer community it has attracted and the wide range of startups that use it especially in the early phases of their development. As TRON might find out, once they go independent they may have a more difficult time attracting software developers.Ethereum must take the piggy-back of ICOs of 2017 and be the open-source public distributed world operating system it was designed to be. It has massive potential to fill and in a crypto vacuum of hype and declining prices, Ethereum is perhaps the last chance before 2020, as the Chinese blockchains take over. The window is disappearing guys.The future of blockchain can change very quickly. Whether you are NEO, Cardano, EOS or another, there is some semblance of pressure and competition to evolve. Ethereum is clearly the dApp platform of choice for developers, but it may not always be that way.Reddit co-founder Alexis Ohanian.Noam Galai/Getty Images\u201cI\u2019m most bullish about Ethereum simply because people are actually building on it.\u201d\u200a\u2014\u200aAlexis\u00a0Ohanian.As many of the 1,600+ cryptocurrencies won\u2019t survive, Ethereum has a fair chance of being among the eventual winners. Nothing embodies the spirit of the future quite like Ethereum.The \u201cCrypto Sculpture\u201d\u200a\u2014\u200aEidooYou cannot call Ethereum a bubble when it has spawned so much innovation and so many startups; fueled incredible software developer enthusiasm and is being studied in China by those who will end up building the future of the blockchain. Ethereum is built for software engineers, and is thus attracting more not less, talent.We talk about the price of cryptocurrencies too much, and not enough about the innovation and future potential of these things. The hype misses the fun stuff. The future of software development ecosystems are being born. That\u2019s what dApp platforms running smart contracts amount to. In an era where Microsoft thinks it can buy that ecosystem, with its acquisition of GitHub, it makes projects like Ethereum feel even more attractive to software developers.Ethereum was created by Vitalik Buterin, a young programmer who was told about bitcoin by his father and decided to create a similar platform for smart contracts; which bitcoin is not designed to do. The Moscow-native began working on ethereum after he dropped out of college, according to CNBC.Innovation is born from taking risks. New forums of digital consensus and decentralized ledgers have immense business opportunities; but you need to foster communities of like-minded developers who share a common vision. Ethereum has the most coherent vision and real-world application for software developers to build stuff on the blockchain.It doesn\u2019t matter that Ethereum\u2019s price has dropped below $500, when it once flirted above 1k, it matters that more software developers are working on it than the total number of software developers that had code on GitHub. Think about what that means for the future of blockchain startups and smart contracts. Ethereum is a new layer in the cloud that popped up as if out of nowhere. It\u2019s now attracting some of the brightest young minds on the planet.The project was bootstrapped via an ether presale in August 2014 by fans all around the world. Just four years later, we are getting a taste for what Ethereum might become.", "responses": "8"}, {"title": "Ethereum, for Earthlings", "author_name": "Nancy Herriman", "link": "https://hackernoon.com/ethereum-for-earthlings-e12ec293011a?source=search_post", "post_date": "Jul 16, 2018", "readtime": "12 min read", "upvotes": "2.2K", "content": "Ethereum, for EarthlingsNancy HerrimanBlockedUnblockFollowFollowingJul 16, 2018a.k.a. How To Understand Ethereum Without Traumatizing Your Brainby @NancyHerrimanWhen I began my journey down the rabbit hole into cryptocurrency land last year, it was very challenging to understand technologies like Ethereum. The more I read about the technologies that enable cryptocurrencies to exist, the more questions would come up. And in my experience, the majority of guides to Ethereum out there are either overwhelmingly technical, or just too simplistic.The reason, I believe, is because it is easier to describe the individual components of this technology (Merkle trees, hashes, keys) rather than to try and conceptualize the big picture; the sum of every moving piece, combined.But as Albert Einstein once said:\u201cIf you can\u2019t explain it to a six year old, you don\u2019t understand it yourself.\u201dI don\u2019t mean to discredit the authors that have written extensive technical posts on this - I just know from my own experience that trying to understand this technology can be a little disheartening if you don\u2019t begin with a macro perspective of what Ethereum is.Regardless of technical complexity, I think more needs to be done to educate non-engineers about this technology because, at the end of the day, better education is the only way of getting people excited about this incredible platform.And this is what I\u2019ll attempt to do in this post: explain Ethereum to \u2018six year olds,\u2019 aka- myself last year.Ethereum is a network of computers that are constantly sharing informationSource: Nancy Ellen\u00a0HerrimanIn the real world, in order for a group of people to understand each other, they need to communicate using a set of rules; a common language. Similarly, all individual computers in a network need to follow a set of rules; a common (network) protocol.The basis of Ethereum is a network protocol that shares information amongst thousands of computers around the world. That information represents money in the form of computer code. Networks like Bitcoin and Ethereum use a shared database, and every participant in these networks stores transactions that are valid, and spread the word amongst their peers.Text, videos, music, apps\u2026 we know that everything in a digital format can be duplicated by copying (Ctrl+C) and pasting (Ctrl+V). Ethereum\u2019s native token, Ether, is digital, so what stops people from just copying their balance and tricking the system? The short answer is: every participant is hyperaware of every event that has ever happened in the network\u200a\u2014\u200aAnd what facilitates that hyperawareness is something called a blockchain.Many meanings over the past years have been assigned to the word blockchain, but simply put, a blockchain is a type of database; a way to store data (often in the form of ledgers) over a period of time. When a transaction occurs in a network like Ethereum, it is grouped with other unprocessed transactions in something called a \u201cblock.\u201d Every 20 seconds or so, a new block is created and \u201cchained,\u201d to the previous block. So, in essence, the Ethereum blockchain is just a series of blocks that contain transactions that occurred over a period of time.Source: Nancy Ellen\u00a0HerrimanEvery network participant stores a copy of the blockchain in their computers, which contains all transactions from the first block, the genesis block, up until the most recent block the software is able to find. Users running the Ethereum software are the backbone of the network and are called nodes. Ethereum nodes are able to verify the validity of transactions by checking whether the sender has enough balance to send funds.Source: Nancy Ellen\u00a0HerrimanThere is no hierarchy within the network, everyone has equal power to transact, verify, and keep track of all transactions. And the greatest benefit of having every node maintain a copy of the blockchain is that, once a block has been added to the chain, it is very difficult to revert the transactions inside that block. The \u201cchain\u201d connecting blocks together uses complex math to connect blocks, which makes this database very difficult to tamper with.So what is the hype all\u00a0about?If we look at the way business is conducted in the real world, there is a great amount of trust involved even with the simplest business transactions. Everything involves a contract, and things are generally supposed to work because of fear; one party is afraid that other will sue, so there is an incentive for the terms of the contract to be honored.But in reality, the requirement of trust introduces a huge problem in the digital world. Business are global, and at times it can be hard to fully assess who you\u2019re dealing with. And the same is true for online services. Ask yourself, when was the last time you read the terms of service of an app that you love and use?Terms of service have become so long, and update so frequently, that it\u2019s nearly impossible to keep track of them. Most people (myself included) don\u2019t spend hours reading these documents, and this allows companies like Facebook to collect and sell sensitive data on their users.The keyword here is trust. We are forced into trusting institutions because we don\u2019t have a choice other than not using their services. But I believe that\u2019s about to change. Technologies like Ethereum can bring the power back to users through virtual agreements called smart contracts.Smart ContractsThe basic idea of a smart contract is to execute the terms of a contract automatically by a computer, or a network of computers. Cypherpunk pioneer Nick Szabo coined this term back in 1994 and created some clever examples to help us understand the concept.When I began learning about smart contracts, one of Nick\u2019s simple analogies was particularly helpful; vending machines. I mean if Mini Oreos can\u2019t be the light at the end of the tunnel, what really can?Similarly to smart contracts, vending machines are predetermined agreements that are executed automatically and without the involvement of a third party. When we select a good that we want to purchase from a vending machine, it first tells us how much it will cost. We then make a payment and the machine checks the validity of the money we provided and if the quantity inserted is sufficient. If these conditions are met, the machine will then deliver the Mini Oreos you requested.In essence, a smart contract works the same way, but digitally. If certain conditions are met, the contract is executed automatically. No need for trust, no need for lawsuits.(Ethereum) Smart ContractsIn order to understand how smart contracts work, let\u2019s look at how a decentralized version of Uber could be implemented on the Ethereum platform.Just like the vending machine example, this service could be implemented using a series of if, then statements in the form of code. Consider the following example: Alice is in uptown Manhattan and she wants to go meet her friends downtown using dUber (decentralized Uber).Source: Nancy Ellen\u00a0HerrimanThe basis of any application is user identity. In Ethereum, identities are defined as accounts. Generally speaking, there are two types of accounts: user accounts and smart contract accounts.Alice\u2019s account address is: 0xA74fe11fcD265e8caCa0d82E677E4FD71df3044bUsers in Ethereum interact with smart contracts through transactions.Alice invokes dUber by sending an Ethereum transaction to dUber\u2019s smart contract that basically says: \u201cAlice (0xA74), located at [\u2026], wants to go downtown.\u201d dUber\u2019s contract will match her address with Bob, who is a driver looking for passengers in the same area.dUber\u2019s contract will match her address with Bob, who is a driver looking for passengers in the same area.Once both Alice and Bob agree to the terms of their business engagement, dUber\u2019s contract will use GPS coordinates to track their locations. In this case, the GPS is used as the contract\u2019s oracle.Oracles, in the context of smart contracts, are third party verifiers which are generally agreed upon by both parties and written into the smart contract. dUber users must agree that the GPS coordinates in their smartphones will be used to trigger the payment within the platform.Source: Nancy Ellen\u00a0HerrimanThe GPS oracle will keep track of Alice and Bob for the duration of the ride.The oracle informs dUber\u2019s smart contract (through yet another transaction) when both smartphones reach the predetermined destination.Bob\u2019s app wallet will automatically send the contract a request for payment.That leads Alice\u2019s dUber app to triggers a transaction that pays Bob for his services.So, to recap, here are the transactions that took place in this example:Alice -> dUber: Alice shared her location with the dUber app and requests a driver willing to take her downtown. Like real world Uber, dUber calculates the cost of the ride in advance and Alice funds a temporary account for payment that dUber has temporary control of.Bob -> dUber: Bob communicates to dUber that he\u2019s looking for a passenger in the area and is connected with Alice.Oracle -> dUber: the prearranged oracle proves to the dUber contract that both Alice and Bob reached their destination.Bob -> dUber: Bob requests dUber to release the payment for the ride.Alice (temporary account controlled by dUber) -> Bob: Alice\u2019s temporary account sends Bob the payment.Ethereum smart contracts aren\u2019t able to generate external transactions by themselves, but use cases like dUber can use temporary accounts (often called escrows) to facilitate payment, as shown in transaction #1.Why this new system changes everythingI imagine that this all makes sense so far, especially for those of you who live in metropolitan areas where car services are popular. And it probably seems very similar to digital car services that are up and running today\u200a\u2014\u200aso you might be asking yourself, what justifies switching to a decentralized platform?There are many benefits but let\u2019s start out with economic incentives for both drivers and passengers.On average, digital car service companies take 25% from all revenue that drivers earn. And the popularity of this type of service granted companies like Uber multi-billion dollar valuations (yep, that\u2019s an illion with a B!). An intermediary this big leaves drivers with very little for their time, gasoline, car insurance, and other operational costs associated with the activity itself: taking Alice from point A to point B. And who then has to pay higher costs? The user. That doesn\u2019t seem to add up correctly, or at least fairly, and here\u2019s why a decentralized system makes sense\u2014 it cuts out intermediaries.Yes, dUber will probably carry a founders\u2019 fee and have many operational costs like the salaries of the developers improving the platform as well as the committee, or co-op, in charge of business-related decisions. While these operational costs can add up, they pale in comparison to the need of turning a profit. By not requiring a profit margin, a decentralized version of Uber would be putting money back into the (digital) pockets of both drivers, who expect to profit from fair margins, and passengers who now have lower costs.Another point I want to focus on is the ability to create an institution where economic incentive is stripped from decision making, where morals and economic gain don\u2019t clash. Allegations of sexual misconduct against drivers on popular car service applications are popular and the way some of these companies have dealt with these allegations is disgraceful. And the sad part is that it often boils down to economic incentives. There is no incentive to fire a driver that misbehaves when the company is struggling to make the supply of drivers meet the demand for the service (and this is in large part because of how big of a chunk of the drivers\u2019 revenue the company takes).There is no incentive to refund riders who have had horrible experiences or, at the very least, run background checks on all drivers because that would ultimately hurt profit margins. What if, in this decentralized system, the much smaller fee taken from drivers was solely used for overhead costs, legal fees/refunds, and a founders\u2019 fee that is algorithmically determined? What if incentives could be perfectly designed so that there is no clash between ethics and profit margins?Sounds utopian, right?It might. But for the first time in human history we have the technology that allows us to create this type of institution.Back to the Tech (& Its Current Limitations)We are at a point where the basis of the technology exists, but there are scalability constraints that make it difficult for it to be widely adopted. As you saw in the dUber example, one simple ride resulted in five transactions, and Ethereum\u2019s current throughput is limited at ~15 transactions per second.One of the complicating factors is that each dUber transaction as well as all information/code attached to them is verified by Every. Single. Ethereum. Node. On one hand, this comprehensive verification system makes it difficult to commit fraud in the network, but on the other, it also makes it difficult for it to scale.Different cryptocurrencies use different methods of verifying transactions in their network, and there is an ongoing debate about how to make this verification more efficient. Ethereum nodes use a set of rules, a.k.a a consensus protocol, that involves a competition called mining to agree on what\u2019s valid from what\u2019s not. Mining is important because it protects the network against cyberattacks.Any Ethereum user can become a miner if they have the correct hardware and are willing to become a node by downloading the entire Ethereum blockchain going back to its genesis block (the first block to ever exist). Miners are responsible for gathering unprocessed transactions, adding them to a new block, and, most importantly, solving a complex math problem with the help of specialized hardware.If that puzzle is solved, the miner is awarded Ether as payment for putting in the work to help secure the network. Miners also get all transaction fees paid by the senders. How quickly a pending transaction is mined depends on how much the sender is willing to pay in transaction fees. And as you can imagine, the more the sender is willing to pay, the quicker the transaction is added to the blockchain.The essence of the puzzle described above is to make it so that miners have skin in the game; a collateral in the form of electricity. Solving the puzzle is required to add a block to the blockchain, and it is a costly process in terms of electricity and the necessary hardware. The idea behind it is to create an incentive layer so that, when a miner solves the puzzle, she is incentivized to cooperate with the rest of the network, rather than include a fake transaction in the block, and be scrutinized later.This system is called Proof-of-Work (PoW) because solving the puzzle means proving that work was done and that miners have skin in the game. In a near future, Ethereum will migrate to something called Proof-of-Stake (PoS). Instead of proving skin in the game by using lots of electricity and fancy hardware, Proof-of-Stake involves locking a balance of tokens in an escrow account before adding a block to the blockchain. Under PoS, if a block contains a scam transaction, the miner loses her tokens in escrow.This new system may help us find better ways to scale the network, but there are other limitations too that I should note. The infrastructure behind the oracles that I used in my dUber example is still under construction, and very primitive at the moment.You made\u00a0it!There you go! Hopefully you enjoyed reading this article and learned something new:)This is my first medium post and writing it was for educational purposes for both the community and myself. I would like to thank Lucas Nuzzi for editing this piece for me.Any constructive feedback is welcomed- no heckling! If you enjoyed this piece, please share and give it as many claps as possible-let\u2019s spread awareness about this amazing technology:)", "responses": "6"}, {"title": "Ethereum Classic (ETC) is launching on Coinbase\u00a0Pro", "author_name": "David Farmer", "link": "https://blog.coinbase.com/ethereum-classic-etc-is-now-launching-on-coinbase-pro-2c4fb1519b4d?source=search_post", "post_date": "Aug 7, 2018", "readtime": "3 min read", "upvotes": "1.5K", "content": "Ethereum Classic (ETC) is launching on Coinbase\u00a0ProTransfer ETC immediately to your exchange account and place limit orders in advance of\u00a0tradingDavid FarmerBlockedUnblockFollowFollowingAug 7, 2018We announced final testing for Ethereum Classic (ETC) last Friday, with a goal of accepting ETC transfers for exchange users by Tuesday August 7th. Our testing has gone according to plan and we will be launching ETC support first on our exchanges, and then at Coinbase.com. Our launch will proceed in four stages: transfer-only, post-only, limit-only, and full-trading mode.Ethereum Classic launches first on Coinbase\u00a0ProWe are beginning the launch of ETC on our exchange at Coinbase Pro. We plan to add support for ETC at Coinbase.com when sufficient liquidity is established. We expect this to occur approximately 1\u20132 weeks after trading begins on Coinbase Pro.As background, we recently split GDAX into Coinbase Pro and Prime. Coinbase Pro is our exchange for individual traders, and Coinbase Prime is our exchange for institutions. Institutional customers will be contacted directly from the Coinbase Prime team. Unless you have received an email from our institutional team, if you traded on GDAX you are a Coinbase Pro user.The Stages of the Ethereum Classic\u00a0LaunchThere will be four stages to the launch as outlined below. We will follow each of these stages independently for each new order book: ETC\u2013USD, ETC\u2013BTC and ETC\u2013EUR. If at any point one of the new order books does not meet our assessment for a healthy and orderly market, we may keep the book in one state for a longer period of time, or suspend trading as per our Trading Rules.Transfer-only. Customers will be able to transfer Ethereum Classic beginning at 10am PT on Tuesday August 7th. Traders cannot place orders and no orders will be filled on these order books. Order books will be in transfer-only mode for 24\u201348 hours.Post-only. In the second stage, customers can post limit orders but there will be no matches (completed orders). Order books will be in post-only mode for a minimum of 10 minutes.Limit-only. In the third stage, limit orders will start matching but customers are unable to submit market orders. Order books will be in limit-only mode for a minimum of 10 minutes.Full trading. In the final stage, full trading services will be available, including limit, market, and stop orders.One of the most common requests we receive from customers is to be able to trade more assets on our platform. Ethereum Classic is just a first step in that direction. We announced last month that we are exploring a number of other assets to add to the platform, and customers should expect to see similar announcements when we are exploring new assets to add to the platform.You can sign up for a Coinbase Pro account here to start trading.", "responses": "12"}, {"title": "", "author_name": "Jim McDonald", "link": "https://medium.com/@jgm.orinoco/ethereum-smart-service-payment-with-tokens-60894a79f75c?source=search_post", "post_date": "Nov 23, 2017", "readtime": "8 min read", "upvotes": "1.96K", "content": "Ethereum smart service payment with\u00a0tokensJim McDonaldBlockedUnblockFollowFollowingNov 23, 2017", "responses": "15"}, {"title": "OMG, Ethereum Is So Hard\u00a0Forked", "author_name": "Joseph Lubin", "link": "https://media.consensys.net/omg-ethereum-is-so-hard-forked-e8099749c27c?source=search_post", "post_date": "Dec 12, 2016", "readtime": "10 min read", "upvotes": "344", "content": "OMG, Ethereum Is So Hard\u00a0ForkedJoseph LubinBlockedUnblockFollowFollowingDec 12, 2016Ethereum Learns To Use A Fork (And Other Signs Baby Is Growing Up)Written by Joseph Lubin, sam cassatt, and Amanda Gutterman.We\u2019ve been hearing some concern about Ethereum\u2019s latest hard fork and how it affects the platform, so we thought we might explain what happened and attempt to clear up any misinformation.Basically we think any consternation about recent (intentional and unintentional) forks or their effects is misplaced. In our view, the events of last week represent natural growing pains. The swift and effective way they were handled is further proof that our toddler-age platform is growing up into something special.Some background for the less nerdy readership: An unintentional fork is an event experienced by a blockchain-based system in which, due to a software flaw, more than one canonical history develops. Generally when this is discovered, the system is halted, the flaw is identified, fixed, and then the system is reactivated, often with some reorganization of how transactions that were formerly processed are folded into the newly agreed-upon canonical history.An intentional fork is achieved when software developers upgrade the software clients that run the system such that anyone who does not upgrade would find themself on a different and unsupported branch of the blockchain. This branch is basically a different and narrower view of the canonical history of the system, since it was not adopted by the majority.Interestingly, as we have seen with the Ethereum Classic event, such minority branches can take on a life of their own, if a sufficient community develops around that version of \u201creality\u201d.Learning to use a forkWhat happened with the latest hard fork?It starts with the fact that there are two major versions of the Ethereum client software (and six minor versions that also achieve consensus with one another every 14 seconds on the public chain). One is called Geth and maintained by the Ethereum Foundation, and the other is called Parity. During an update to the Ethereum software, there was a slight difference in the behavior of these versions. This caused each one to believe that there was a divergent history of transactions on the Ethereum blockchain, effectively creating two different Ethereum blockchains.This type of error is called a consensus failure. Fortunately once it was identified, developers acted extremely quickly to fix it, bringing Geth and Parity safely back into agreement. But the fact that the error happened at all temporarily lowered confidence in the network, either causing some ether holders to panic and naturally sell their ether, which led to a drop in price, or enabling speculators to short ether hard in the face of a piece of bad news, hoping to induce a bit of panic and a sizable price drop, enabling them to buy back in at far lower prices. This game has been played out over and over in bitcoin and other cryptocurrency markets for a few years.Is this normal?It\u2019s tempting to compare Ethereum to Bitcoin since they are the two most widely used blockchains. Those who are knowledgeable about the space are aware that the comparison makes sense in some ways, but not others. The frequent comparisons can obscure the fact that the two blockchains emerged in different contexts with very distinct capabilities due to the different intentions of their core developer teams.For example, if you compare Ethereum to Bitcoin in a total vacuum, the recent hard fork could seem existentially alarming. But if you understand the context in which the two blockchains emerged, you probably understand that Ethereum, Bitcoin\u2019s much younger and more ambitious cousin, is slated to undergo upgrades like any other ambitious software application platform that wishes to become and stay relevant. This will cause teething pains similar to those suffered by every other computer language, program, or platform in history.Bitcoin was invented in 2008 as an experiment in monetary theory and design. The news of its launch in 2009 was distributed to a small email list of cryptography enthusiasts. To all but a select group of computer scientists and people who identified as cypherpunks, Bitcoin sputtered along for years in relative obscurity. The first press coverage of Bitcoin came later in 2011, pegged to the fact that it enabled pseudonymous payments on Dark Web markets such as the Silk Road.At its foundation, Bitcoin always was, and remains, a monetary system. Its main use cases are those closely concentrated around creation, transmission, and storage of a value token: the bitcoin.Ethereum was never intended to be a money and payments system though many think that, in time, it can accomplish these and related use cases far better than Bitcoin does. Still Ethereum is first and foremost a decentralized application platform in the sense that TCP/IP and the web protocols layered on top can be considered the foundation of a client server-style application platform.In mid 2012, interest in using the Bitcoin technology to serve a more diverse array of use cases picked up speed. Developers explored colored coins, meta-protocols on top of Bitcoin, and entirely different blockchain architectures. Vitalik Buterin, the then teen prodigy who would go on to invent Ethereum, was involved in some of these projects. He realized that the approach of adding use cases to the Bitcoin blockchain one at a time at the protocol or client level was unscalable. So he set out to design and build a platform for decentralized applications, so any average developer could build out their own use cases in an application layer that was cleanly separated from the protocol layer, making decentralized app development roughly as easy as web or mobile app development.From the outset, Vitalik and the co-founders of Ethereum (including me, Joe) never intended to replace bitcoin (we were all bitcoiners) or create an alternative money or payments system. Ethereum is a software platform built to serve as the foundation of Web 3.0, the decentralized World Wide Web, which could offer the services that we know and love from Web 2.0, but using a decentralized, fully peer-to-peer architecture with your identity (e.g uPort) construct serving as the fundamental access point of interactions, rather than centralized services like Facebook.Instead of perpetuating a world in which internet users continue to feed the coffers of centralized power structures in the roles of either customer or product, the aim of Ethereum\u2019s founders was to replace the walled gardens and data silos of Web 2.0 that concentrate data and wealth in the hands of a small group of companies and their owners. That means, possibly, the eventual replacement of (or forcing a re-architecting of) Facebook, Twitter, AWS, Airbnb, Netflix, Amazon, Ebay, and others, an ambitious undertaking that at the core seeks to re-architect global systems to become more transparent and inclusive, and put you, the user, back in control of your identity, data, communications, and value, while accessing alternative or re-architected services like those we know and love from the Web 2.0.That awkward phaseThe growing pains of a technology platform are familiar to anybody that works in, or builds, technology. Not so long ago, back in 2013, Bitcoin experienced the very issue of having a consensus failure. It also encountered various other bugs and problems, including one that caused practically infinite amounts of bitcoins to be created by someone who discovered a flaw.However, unlike Ethereum which was released six years later, Bitcoin had the luxury of identifying and correcting these failures in obscurity. Bitcoin did not come into the public eye until the runup of its price in 2013 to over $1000 brought attention from media and investors.Because Ethereum represented such a strong advancement in blockchain technology much of the relatively large Bitcoin audience\u2019s attention was present right from the outset of the Ethereum project. The attention on Ethereum, as opposed to Bitcoin during its early days, makes it easy to forget that it\u2019s natural Bitcoin and Ethereum will have similar issues at various points technologically as they move from ideas to mature systems.All things considered, the governance and the adaptability of the developers of Ethereum has been pretty remarkable. We continue to be impressed that issues are identified and resolved, some very quickly, and some requiring thoughtful and vigorous debate, but all serving to strengthen and harden the platform. Each new challenge is met with an effective response, demonstrating that the Ethereum platform is an antifragile system: it gets stronger with each new sustained assault. And frankly, we need the assaults to continue, and we thank the hackers that spent their hard-earned ether to demonstrate minor flaws and vulnerabilities. They have enabled the platform to mature faster.Our baby blockchain will never develop into a world-class athlete without sustaining a few bumps and bruises along the way.A very special blockchainNot only is the recent hard fork an opportunity to strengthen Ethereum, it\u2019s also a chance to discuss the unique properties of the platform that set it apart from other blockchains.Unlike the Bitcoin blockchain, on which resides its most important element the bitcoin value token, Ethereum is not all about its value token, ether. Ethereum is a software platform for decentralized applications; ether is a token intrinsic to the proper functioning of the computation and data storage engine, that is often described as a cryptofuel, that enables the platform to run. The Bitcoin platform exists to serve the bitcoin token. Ether exists to serve the Ethereum platform, which represents far more than an opportunity to trade in a cryptocurrency. The value of ether comes from the fact that the platform has unprecedented potential to re-architect the way we live.The Ethereum World Computer is a shared permissionless global resource. Similar to how your computer can freeze or slow down if you have too many tabs open, if everyone were trying to do something that used too many resources on the world computer, the platform would be unusable. If you let everyone use all the resources they liked, Ethereum would run out of resources in terms of computational steps and storage operations, in what is effectively the processor and hard drive of the computer. By associating a micro-cost with the consumption of resources, requiring ether payments economically disincentivizes overuse of the Ethereum resources, guarding against a \u201ctragedy of the commons\u201d scenario.In the context of the public permissionless network, an economic disincentive to abuse is necessary since anyone can access it. But increasingly we are seeing the application of the Ethereum platform in a private corporate context or in semi-private contexts created by consortia of companies that want to do business more fluidly with each other. One example is how R3 connected 11 banks to do demonstration transactions with one another on an Ethereum-based private blockchain. Another example is our provenance project here at ConsenSys with BHP Billiton, the world\u2019s largest mining company.Use cases inside a permissioned system do not require ether, since resource consumption can be managed differently when all the actors are known and the resources are all owned by the users. The success of private Ethereum blockchains, which are making businesses work better every day, does not depend on the currency ether or even the existence of the public blockchain, but in time the synergies between private and public will prove immensely valuable.The reason the consensus failure happened on the public Ethereum blockchain in the first place is that there were two different versions of the software, with two entirely different development teams, that got out of sync with respect to an esoteric issue that escaped rigorous testing. This does not represent a fundamental technological problem. It\u2019s a simple, old-fashioned human coordination problem, and will drive development of even better version rollout processes. A private Ethereum blockchain, on the other hand, would generally be deployed with a unified architecture, so no such problem could occur.Baby is growing upAs industry continues to investigate blockchain platforms, it\u2019s apparent that Ethereum is becoming a de facto leader. For example, a few days ago JPMorgan publicly open-sourced its Quorum platform, architected and developed around the Go Ethereum client by Jeff Wilcke and his team. Several other major banks are using Ethereum, and Microsoft is anchoring its Bletchley platform on it as the foundational blockchain element. Industry, both publicly and confidentially, continues to contribute to Ethereum and work with us and others to help our promising, toddler-age codebase reach maturity. Stay tuned for news on this front.It takes a (global) village to raise a blockchain. The live network and the community of open source developers contribute significantly to this effort. They continuously refine and harden the Ethereum platform, helping it get faster at responding to industry demands for the value propositions it offers. These investments of time and resources speak to their faith in Ethereum governance and the value that businesses and developers see in its capabilities.May the fork be with you!Like this piece? Sign up here for our weekly newsletter.Written by Joseph Lubin, Sam Cassatt, and Amanda Gutterman. They are, respectively, the Founder, Chief Strategy Officer, and Chief Marketing Officer, of ConsenSys.Disclaimer: The views expressed by the author above do not necessarily represent the views of Consensus Systems LLC DBA Consensys. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": "20"}, {"title": "", "author_name": "", "link": "https://medium.com/@bobbyullery/ethereum-is-the-aws-of-blockchains-3345cb67448a?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "", "responses": ""}, {"title": "Ethereum or Hyperledger Fabric?", "author_name": "Niharika Singh", "link": "https://medium.com/quillhash/ethereum-or-hyperledger-fabric-259f3c9b8da6?source=search_post", "post_date": "Feb 9, 2018", "readtime": "12 min read", "upvotes": "1.3K", "content": "Ethereum or Hyperledger Fabric?Niharika SinghBlockedUnblockFollowFollowingFeb 9, 2018The sole purpose of the article is to analyse the key differences between Distributed Ledger Technologies (DLT) namely Ethereum, and Hyperledger Fabric. Both the frameworks are suited for very different visions in regard with their fields of application.Hyperledger Fabric provides customisable and extendable architecture that may be used in diverse fields ranging from banking to supply chain to healthcare et al. Ethereum\u2019s unique feature of providing us with a cross-disciplinary platform for all kinds of transactions and use cases.", "responses": "8"}, {"title": "6 Ways to Monetize Your Ethereum DApps (Part\u00a02)", "author_name": "Georgios Konstantopoulos", "link": "https://medium.com/loom-network/6-ways-to-monetize-your-ethereum-dapps-part-2-857a2820dec4?source=search_post", "post_date": "Mar 9, 2018", "readtime": "5 min read", "upvotes": "1.3K", "content": "6 Ways to Monetize Your Ethereum DApps (Part\u00a02)Georgios KonstantopoulosBlockedUnblockFollowFollowingMar 9, 2018In Part 1 of this 2-article series we had a theoretical approach towards monetizing your Ethereum DApps. In this part we will look at some code examples that show how you can actually implement them in Solidity.Withdrawing FundsTo start with, there needs to be a function that will allow the withdrawal of the funds to the owner\u2019s address. This is as simple as:This function will transfer the balance of the calling contract to the address at owner (using the very popular onlyOwner modifier pattern). If you are unfamiliar with how the keywords above work, you might want to stop reading here and resume after completing our lessons at CryptoZombies.ioDisclaimer: All of the following examples are simplified to illustrate how you can implement only the discussed functionalities. We make assumptions about the business logic, and we do not take any rigorous security measures that we would take when creating a suite of smart contracts. Always do a full security audit of your code before pushing to production!1. Create a Crowdsale / Launch a\u00a0TokenThis has been described in the Official Ethereum Webpage. In order to create a secure crowdsale, it is recommended to use the audited contracts created by Open Zeppelin.You can follow this guide, or this video for that purpose.2. Premium Functionality / Skip the\u00a0EffortView the whole code at: https://ethfiddle.com/O3_2o-oqaZIn this case, we can see that a user can bypass the winCount requirement for leveling up, by paying 1 ether. The owner would then call the previously discussed withdraw function so that they get their funds.Note that the price of Ether may go up (or down) drastically in the future, which would change the cost of your premium feature. So in a lot of cases it makes sense to add an onlyOwner function that allows you to change the cost in the future, otherwise your app may become prohibitively expensive. This goes for all the following examples as well.3. Take a percentage of marketplace transaction feesIn this (much simplified) example, when someone wants to buy a zombie, 10% of the price gets sent to your wallet, while the rest gets transferred to the zombie\u2019s owner.View the whole contract at: https://ethfiddle.com/MuApSyO3jxIn order to save some gas costs, you can skip the first line of the function, which will instead leave the ether at the contract\u2019s balance. By using the withdraw function we described earlier, you can at a later point in time withdraw all the ether that the contract has.4. Subscription / MembershipHere we will look at examples of implementing subscription / membership business models for:LifetimeTime-basedUsage-basedWe will create a contract where certain functions will only be callable by individuals which have been marked as eligible.Lifetime MembershipThis is a simple case of creating a boolean mapping, a modifier that checks if the boolean is true, and a function that allows a user to become a member for some price.View the whole contract at: https://ethfiddle.com/LgzLNtIIVFAlternatively, instead of using a boolean for member/non-member, we could use a uint8 and have different membership tiers with access to more and more features: tier 0 for free users, tier 1 for silver membership, tier 2 for gold membership, etc. Then onlySilver() could check if the membership tier is >= 1.Simple enough, let\u2019s move on.Time-Based Membership / SubscriptionHere our business model will assume that the subscription costs 0.005 ether per day.View the whole contract at: https://ethfiddle.com/Dx1jQlgazKIn this case when a user calls the renewSubscription function, the subscriptionExpiration gets initialized to now if necessary, and then increased by a number of days depending on how much the user paid. The onlyMember modifier can be used to check if the current time has passed the expiration date.Usage-Based Membership / Pay-per-useHere the business model involves a user buying function calls upfront, similarly to how you can buy API calls at a set price.In this example, a user can buy 1000 calls per ether. Every time a user makes a call to a function that has the onlyIfEnoughCalls modifier, after checking that they are eligible for the call, the availableCalls variable is decremented.View the whole contract at: https://ethfiddle.com/rO0xD9nIl6In all of the above scenarios, you could simply add the corresponding only{property} modifier to any function, and then it would only be callable by the users who are authorized to access it.", "responses": "5"}, {"title": "Ethereum Smart Contracts in Python: a comprehensive(ish) guide", "author_name": "Nick Williams", "link": "https://hackernoon.com/ethereum-smart-contracts-in-python-a-comprehensive-ish-guide-771b03990988?source=search_post", "post_date": "Apr 12, 2018", "readtime": "15 min read", "upvotes": "1.3K", "content": "Ethereum Smart Contracts in Python: a comprehensive(ish) guideNick WilliamsBlockedUnblockFollowFollowingApr 12, 2018It\u2019s one thing to get a basic smart contract up on Ethereum\u200a\u2014\u200ajust google \u201cERC20 Token Tutorial\u201d you\u2019ll find plenty of information on how to do it. Interacting with a contract programmatically is another thing entirely, and if you\u2019re a Python coder, then tutorials are scarce.One, by my count, and it\u2019s soooo\u00a02017.Fortunately for us, Version 4 of Web3.py has just been released, which means it\u2019s now easier than ever to run a python script and watch as magical things happen on the blockchain. Spooky.A big shout out Piper Merriam, Jason Carver and all the others who\u2019ve worked so on hard on Web3.py to make life easy for the rest of us\u200a\u2014\u200aat Sempo we\u2019re using Ethereum to make Disaster Response more transparent, and it\u2019s only really possible thanks to Web3.py.", "responses": "11"}, {"title": "Ethereum Market Map\u200a\u2014\u200aJune\u00a02017", "author_name": "Jordan Odinsky", "link": "https://hackernoon.com/ethereum-market-map-june-2017-d13928e4319e?source=search_post", "post_date": "May 30, 2017", "readtime": "4 min read", "upvotes": "238", "content": "Ethereum Market Map\u200a\u2014\u200aJune\u00a02017An in-depth look at startups and opportunities built on\u00a0EthereumJordan OdinskyBlockedUnblockFollowFollowingMay 30, 2017If you prefer to view the spreadsheet with the links to the startups, click\u00a0here.I\u2018ve always been fascinated by technology that changes the way people engage with the world. Facebook, Amazon, Airbnb, and Uber all played a role in shaping the way people view the world. They made it normal to share moments and thoughts online. They taught us that it\u2019s okay to hop into a stranger\u2019s car or even sleep in their spare bedroom. They forever changed the way we purchase goods and services from one another. And I believe that blockchain technology will be the next innovation that changes the way we think about and interact with the internet. Viewed as a revolution of cryptocurrency, technologists, venture capitalists, startup junkies, and even my Dad has come off the sidelines to learn more about this new wave of innovation.Over the past few weeks, I\u2019ve dived deep into blockchain technologies and its use cases. While the market map above is only a piece of the larger blockchain puzzle, I believe that Ethereum has the potential to overtake Bitcoin as the digital currency and framework of the future because of its strong developer ecosystem, coding simplicity, and the variety of applications that can utilize smart contracts.What is Ethereum?If you\u2019re just beginning to learn about Ethereum, I\u2019d suggest starting with this really well written post.Tl;DR: Ethereum is a decentralized blockchain technology that allows users to develop and run smart contracts. A smart contract is a digital contract that allows users to exchange money, or anything of value, in a transparent, conflict-free way, while avoiding middlemen.Ethereum\u2019s Powerful Use\u00a0CasesEthereum is radically different from Bitcoin. Built as a user-friendly platform for developers to make applications easily, Ethereum not only allows for peer-to-peer transactions but allows developers to program their applications to utilize smart contracts.Source: Deloitte University PressAnd this is only the tip of the iceberg! Additional use cases are being developed in healthcare, marketplaces, banking, token exchanges, eSports, gaming, entertainment, loans, identity management, file storage, business services, payments and more.Being a passionate investor, I recently jumped into a conversation on Twitter with Semil Shah sharing an interesting use case that leverages smart contracts for investments. (Side note: if you\u2019re not following Semil, you\u2019re missing out.)What does this all\u00a0mean?Ethereum has the potential to change the face of the internet, commerce, and the applications that we interact with on a daily basis. I see Ethereum as an ecosystem that has only begun to scratch the surface. Think of Apple pre the App Store or iOS. By providing developers with an easy language to build valuable applications that leverage smart contracts, cryptocurrencies, and protocols, Ethereum will pave the way for a new type of commerce. As new applications and use cases flood the market, consumers will naturally become more inclined to test out the technology\u200a\u2014\u200aespecially if it saves them money (see what Project Oaken is working on)\u200a\u2014\u200aand many won\u2019t turn back to their old systems and practices. I see this as a classic network effect. As application offerings increase, more individuals will adopt the new technologies, thus the making the Ethereum technology and various tokens more valuable.As this new wave of innovation has surely been the talk of the town following the recent Token Summit and Consensus 2017 conferences, it\u2019s become increasingly clear that this isn\u2019t a fad, rather the beginning of something great.", "responses": "7"}, {"title": "6 Ways to Monetize Your Ethereum DApps (Part\u00a01)", "author_name": "Georgios Konstantopoulos", "link": "https://medium.com/loom-network/6-ways-to-monetize-your-ethereum-dapps-part-1-28e9bb18f87e?source=search_post", "post_date": "Feb 23, 2018", "readtime": "5 min read", "upvotes": "1.4K", "content": "6 Ways to Monetize Your Ethereum DApps (Part\u00a01)Georgios KonstantopoulosBlockedUnblockFollowFollowingFeb 23, 2018In our last article, we went over why you should learn to build Blockchain DApps.In this article, we will talk about how you can monetize them.Before getting into DApp-specific cases, let\u2019s try answering a popular question:How do traditional apps make\u00a0money?AdvertisementsSimply said, advertisers pay content providers and technology companies (you, the developer) to put advertisements in front of consumers (your users). Consumers in turn are influenced by the advertisements (whether they think they are or not), and spend money on the advertiser\u2019s products.Freemium ServicesIn the old App Store days, there were the \u2018Lite\u2019 or \u2018Regular\u2019 and the \u2018Pro\u2019 versions of apps. Users would try out what the product offered, and if they liked it would purchase the full version of the App.Using that business model, companies such as Spotify, Slack or Onedrive generated revenue from their users who would purchase a paid subscription for their service.Other examples of the freemium model include gaming apps which allow the purchase of in-game items for real currency.Free-to-play MMORPG\u2019s have utilized the so-called \u2018Free to Play Restrictions\u2019. As a free player in World of Warcraft, the maximum allowed level is Level 20. Other games, had limitations on the areas you could explore. The best content of such games is reserved for the \u201cPay to Play\u201d gamers.With the above in mind, there is a lot of low hanging fruit a DApp developer can go after when looking to monetize their DApp.How to Monetize Your\u00a0DApps1. Make a Crowdsale and launch a\u00a0tokenAs discussed in the previous post, you can always bootstrap your project through a crowdsale backed by a token.In this case you need to define the need for your token[1]:Core functionality of your DApp (Golem, Aragon, Request)Provides access to your network (BAT, Bloom)Distribute profits of the product to token holders (TenX, Numerai)Note that in this case you need to be careful with regulations and KYC compliance depending on if your token is considered a security or not.2. Take a percentage of transaction feesCryptokitties charged a 3.75% fee for each successful auction. This proved to be a very profitable revenue model.Last Week CK usage peaked 800 ETH in transaction fees. Source: DappRadar.comAs a more general example:A buys something from B using your serviceY% of that amount goes to the service provider (you)(100-Y)% goes to BThere is a caveat here. If you make a decentralized service that has an \u201cunfair\u201d fee towards the end-user, someone will eventually copy your Smart Contracts and release a version of them with lower fees or no fees at all (given that your contracts are Verified and Open Sourced, which is typically expected of Ethereum DApps).Finding the right amount to charge your users is the key here; however we will not get into pricing models in this post.3. Charge an amount for premium functionalityInspiring ourselves from the freemium model discussed before, and by using the game we\u2019re building in CryptoZombies as an example, think of the following:Let\u2019s say that your CryptoZombie requires 10 wins in order to level up, and that gets harder as its level increases.Leveling up from Level 10 to Level 11, will be harder than leveling up from Level 1 to Level 2. Users need to consume a lot more effort in order to level up their Zombie Army.Law of Diminishing ReturnsHere you can implement a function, which allows the Zombie to \u201cskip\u201d the effort and level up directly, and in return the user would need to pay some amount of ether.That way, players who play for free are still able to achieve end-game results, but the ones who are willing to pay a premium can skip the effort.The same could apply for resetting the cooldown of a Zombie. Zombies typically need to wait for cooldown seconds before fighting again, but we could make it so users can pay a small fee and skip the cooldown.There are a lot of different ways you could monetize DApps here, and we will talk about specific code implementations in part 2 of this article.4. Subscription / MembershipYou could add a subscription or membership functionality to your contracts\u00a0, to make it so that certain functions can only be called by subscribers, or by premium members.The duration of the subscription could be:Time-Based: The user is allowed to call a function until X time has passed, e.g. they could pay for 1 month of access.Usage-Based: The user is allowed to call a function X times.You can read more about Subscription models on Wikipedia.Again, we will look at specific code examples of how to implement this in part 2 of this article.5. AdvertisementThis has been a less-popular method, considering we are talking about advertisements on the DApp itself. The ThousandEtherHomepage does just that. You are able to claim a number of array slots in the Contract, which get represented by pixels in the DApp\u2019s front-end. As seen by the picture below, these pixels have been used by projects (among others) in order to advertise their brand.6. Take donationsIf any of the above sounds like too much a hassle, you can always just add your cryptocurrency address at your service/DApp for any generous donors.You could also add the eth-button to your webpage for Metamask integration.eth-button.github.io/eth-button", "responses": "3"}, {"title": "The Realistic Lucrative Case of Ethereum Classic attack\u200a\u2014\u200aToday", "author_name": "Husam ABBOUD", "link": "https://medium.com/@HusamABBOUD/the-realistic-lucrative-case-of-ethereum-classic-attack-with-1mm-today-8fa0430a7c25?source=search_post", "post_date": "May 21, 2018", "readtime": "10 min read", "upvotes": "1.8K", "content": "The Realistic Lucrative Case of Ethereum Classic attack\u200a\u2014\u200aTodayHusam ABBOUDBlockedUnblockFollowFollowingMay 21, 2018We argued in the H/Rindex (Hashing Power and Robustness index) Paper and in the simplified introduction of the previous post Rindex\u00a0:: The Robustness Index, that in the crypto universe it all boils down to one word \u201cSecurity\u201d. Both in our research and while we\u2019re constructing an index to benchmark security and robustness we have come across some interesting findings and realistic models for potential lucrative attacks. We\u2019ll discuss all of this in this articleTo Recap..The consensus attack cost is what it would cost to control 51% of the total hashing power of a cryptocurrency network, doing so would make it possible to 1) Prevent transactions from being confirmed, 2) Reverse recent transactions that have been sent, \u2018double-spending\u2019 your coins 3) Execute some sort of denial-of-service attacks against specific addresses like exchanges, or other miners or pools.Any of this would collectively erode confidence in network, and, with a very high probability, cause a significant price decline.How much that 51% consensus attack\u00a0costThe Classical model calculate is as:Total Network Hashrate / Efficient Miner Hashrate = Miner Units neededMiner Units needed * Miner Unit Cost + Electricity = 51% Attack costETC Nethash averaged of 7000 GH/s (6600 to 7200 GH/s according to ETCstats\u00a0, BitInfo respectively)Most efficient miners are Antminer E3 with 0.18 GH/s and Radeon Rx 480 with 0.025 GH/s7000 nethash / 0.18 = 38888 Antminers E3 Needed * $2150 = $83,611,111 + $150,000 per day Electricity = $83,761,111 (~85 million with electricity for couple of days)The same calculation with Radeon Rx 480 we found the cost to be about $55 millionWe can safely estimate The Cost of a 51% attack on Ethereum Classic today to be between 55 to 85 million (averaged $70 million)I\u2019m confident you\u2019re probably familiar with all that, and for years we argued about the 51% attack and its cost and the usual conclusions are:Barrier of entry is high you still need to buy miners, setup farm, and all logistics right.. orWell if you have all that hashing power you\u2019re better off mining coins than attacking the network!No, Not anymore and today, both assumptions can be challenged:The Barrier of Entry: Have we forgotten that many PoW blockchains share the same hashing algorithm,\u200a\u2014\u200aparticularly the forks\u200a\u2014\u200aEthereum Classic uses ETHASH (the same algorithm as Ethereum\u2019s) I mean you don\u2019t need to setup or buy anything at all, If you\u2019re already mining Ethereum, and your pool contributes with small percentage of only 2.5% of Ethereum Nethash, Switch to mine Ethereum Classic and you\u2019re now +51% of hashing power of Ethereum Classic network. First, there is no barrier of entry for you, and second, your cost of 51% attack on ETC is your ETH mining profit per day, for a miner mining 2.5% of ETH Nethash the gain is about 525 ETH per day which is ~$380k USD, which is pretty much the cost of 51% on ETC per day, and please let\u2019s not forget that the Ethereum Classic network has a ~2 billion market-cap.The \u2018Better off mining coins than attacking\u2019: No you\u2019re not, with that 7000 GH/s mining power you have which is about 2.5% of ETH Nethash you\u2019re making currently 525 ETH or ~380k USD per day. However, by attacking ETC, while short-selling ETC with n margin on the open market would make you 3x to 100x that profit from the ETC price decline\u200a\u2014\u200aWe will discuss this in details in a bit..This alternative leasing model of a 51% attack (calling Rindex v2.0 Model) works by leasing hashing power practically available for coins using the same hash algorithm. (BTC n BCH, ETH n ETC, ZEC n BTG.. etc)The cost of a 51% attack = Revenue per GH/s * Target network Nethashex. Ethereum Daily block Rewards of 20600 ETH per day, Ethereum Network HashRate 275 TH/s The Revenue per TH/s is 75 ETH per day (-electricity)For ETC: 75 (ETH revenue per TH/s day) * 7 (ETC nethash) = 525 ETH /dayIf an ETH miner with +2.5% of Nethash switches to mine ETC, he is +51% ETC Nethash, That brings the cost of 51% attack on ETC to 525 ETH/dayA Byzantine miner with +7.0 TH/s hashrate of the list below is able to perform a consensus attack on ETC today in an hour. and a miner, like Ethermine pool, can do that by allocating only 10% of their hashing power.List of Top Ethereum Miners with more +7 TH/s hashrate (byzantine candidates for\u00a0ETC)The Profitability with Price\u00a0DeclineAs we found out, the traditional methodology of calculating the cost of a 51% attack -from the cost of mining equipment acquisition- might be completely-off for networks with a total hashrate significantly smaller than others that use the same hashing algorithm, and you can perform that attack at a fraction of the cost.Now it\u2019s true that you as Byzantine miner (w/ +51% of network hashrate) can benefit with \u2018double-spending\u2019, by sending $10mm of ETC to one exchange then re-minting the blocks and sending it again to another one. However, the compelling true financial benefit you might be pursuing is through preventing transactions from being confirmed on the network + executing DoS on exchanges and other pool addresses, this makes it clear that the network is under 51% attack and erodes confidence in this cryptocurrency which would eventually cause a significant price decline.Nakamoto-consensus was designed with the assumption that rational miners working in their best financial interest, wouldn\u2019t perform such attack as they can\u2019t benefit from price decline.Today 9 years later clearly these assumptions are very outdated, We do have major exchanges with a lot of liquidity which allow you to short-sell with a trading margin from 2.2x to up to 100x (to benefit from price declines significantly) like Poloniex, BitFinex, Kraken and GDAX\u200a\u2014\u200aFutures market like CME and Exante(and many others lining up) we have derivatives markets like, BitMex, WhaleClub and CFDs like AVAtrade, and Plus500, Options like LedgerX and the decentralized prediction markets like Augur, and Gnosis\u200a\u2014\u200awhich have been becoming popular. You see where I\u2019m going with this.. it\u2019s just becoming easier everyday and the market is more liquid for opportunities where you can benefit from price decline.I\u2019ve promised you a realistic lucrative scenario, let\u2019s get to that.. so what is realistically the amount a malicious attacker a Byzantine miner could spare for this venture attacking our example here Ethereum Classic a $2 Billions market-cap? 1 billion? 500 or 100 millions? it becomes interesting as hell if you can do it with like 10 million or even only 1 million!Let\u2019s first simulate price % change, with your X margin and calculate your payoff as %a reasonably conservative sweet spot might be 5x to 8x margin with a range of 35% to 50% price declineDon\u2019t forget the cost of attack as we calculated above is 525 ETH or ~$380k per day, if you\u2019re not the byzantine miner and just an investor and you\u2019re going to rent from a mining pool at 7 TH/s ETHash for a day (which is what you need to control +51% mining ETC) They will be gladly willing to lease it for anything >$380k or 525 ETH, (which is what the 7 TH/s hashing power generates for them per day) Let\u2019s say you pay them $500k and your investment was $1.5 million, now you\u2019re left with $1 million to short-sell ETC on your favorite exchanges, ex. on BitFinex with 3.3x margin you break-even at -15% price decline anything else is profit, at -30% you net $500k, and -70% $1.8mm Voil\u00e0We take this one step further by putting some serious investment on this venture, to do so, we need to know how is the liquidity and how much the market can afford to pay us.The average trading volume of Ethereum classic is currently in the range of $150 million per day (with a history of up to 1.4B /day last year) we can take this as a reference for liquidity, and make a simulation for investment with a bigger stake.In this case now our investment will be $55 million, we will rent hashing power from a mining pool for 10 days paying $5 million and short-selling ETC with a margin using the leftover of $50 mmAs you can see in our simulation here, $50mm investment to short-sell ETC with 35x margin, a decline of 50% will net ~$ 1B and if the price continues to decline we would break the bank with a +90% price decline, which would net you $1.8B profit (currently that is the market-cap of ETC). And if 35x margin was a stretch for you to secure, then just increase the investment from $50mm to $200mm instead and with 10x margin you will get pretty much the same results\u200a\u2014\u200a$ payoff.The Models for the Calculation of a 51%\u00a0AttackThe Classical model (Based on cost of acquisition) we have used for years,\u200a\u2014\u200awell detailed in Mario Dian post here\u200a\u2014\u200a, calculates the cost of acquisition of enough miners (ASIC/GPUs) which will generate the total hash of a the target network + electricity, and the one used at beginning of this article and we used in Rindex v1.0:: The Robustness Index,ex. for ETC with current 7 TH/s nethash the 51% attack cost is $70 millionVlad Zamfir in Simple model of an internal PoW attacker introduced a sound assumption that honest miners working in their best financial interest would switch to mine on a different network when you add hashpower to current networks. That when you add a smaller % like 3.5 TH/s to ETC of 7TH/s, the total nethash truly becomes 10.5 TH/s and you\u2019re controlling only 33%, but as as difficulty adjustments make it no more profitable for honest miners to continue mining ETC, they would switch to mine on different networks and you end up with +51%\u00a0.ex. for ETC with current 7 TH/s nethash, 51% attack cost max $35 millionRindex v2.0 model\u200a\u2014\u200a(The cost of hashpower leasing)\u00a0Revenue per GH/s * Target network Nethash = 51% attack costex. for Ethereum Classic: 75 (ETH revenue per TH/s day) * 7 (ETC nethash) = 525 ETH per day = $380 Thousand dollarI\u2019m keen to believe a mixture of #2 and #3 is the more likely scenario, which would put the cost of Ethereum classic attack in our example here to less than $200k per day.What about the cost of attacking other\u00a0coins?Bitcoin Cash: Following the same logic you can observe that the cost of 51% on Bitcoin Cash Network is not the $300 million (which is what would cost you to to acquire miners with enough hashing power to be 51%) but only 250 BTC or $2 million, by switching from mining BTC to BCH.If a BTC miner with +14% of Nethash switches to mining BCH, he is +51% BCH nethash, That brings the cost of 51% attack on BCH to 250 BTC/day ~$2mmBitcoin Gold: Bitcoin Gold, a much smaller network(1/20 the size of Bitcoin Cash network), since the fork, has switched to become ASIC resistant hashing with Equihash algorithm,\u200a\u2014\u200asame as zCash\u200a\u2014\u200aIt is currently more secure against 51% attack from Bitcoin miners, but vulnerable to attacks from Zcash and other Equihash miners.If a zCash miner with +8% of Nethash, Switch to mine Bitcoing Gold, he is +51% BTG nethash, That brings the cost of 51% attack on BTG to 580 ZEC/day ~$200kCheck the table on RINDEX post, for the classic cost of a 51% attack -Top 10 PoWConclusionWe demonstrated how you can profitably attack a $2 billions cryptocurrency network like Ethereum Classic, with as little as $1.5 million, and how you can \u2018bankrupt it\u2019 with $55 million netting +$1B in profit.Now, a growing number of institutional investors are watching crypto-currencies, ruthless intimidating wizards and trolls, standing on the tips of their toes aiming to exploit opportunities for quick and big profits, they aren\u2019t the type of \u2018dudes\u2019 you\u2019re used to, the ones that care about the community, the ecosystem and the future of decentralization.The intention of this article is to raise the awareness of this attack vector so that we can take appropriate measures to increase our networks\u2019 robustness before it gets exploitedHow can we fix and increase the robustness of networks?Upgrade to PoS, check out Casper FFG, PoS in general is much safer and 51% practically infeasible, but by just adding Finality the Capser FFG style you will significantly increase robustness.Upgrade your hashing algorithm (In a way you\u2019re not using the same hash algorithm like other chains that have significantly more hashing power)Increase required confirmation (A LOT More) a byzantine miner can send an ETC equivalent of $100mm swap it for BTC, while mining his own in-shadow chain disconnected from ETC, and when he liquidates his $100mm he propagates his in-shadow blocks. As it has more hashing power behind it, and because it is the longer chain, it would replace the current one and the miner would now be \u2018double spending\u2019.Emergency preparedness, stay one step ahead with a miner, exchange and developers coordinated action planWhat do you think? What can we do to improve the robustness, security, and minimize the effect of a 51% attack particularly on these networks that use same hashing algorithm like bigger ones, with smaller nethash?Update 2018.05.24: removing 0 from BCH attack cost it\u2019s 250 BTC ~$2mm not 20mm", "responses": ""}, {"title": "How to save your Ethereum Dapp users from paying gas for transactions", "author_name": "Mahesh Murthy", "link": "https://medium.com/zastrin/how-to-save-your-ethereum-dapp-users-from-paying-gas-for-transactions-abd72f15e14d?source=search_post", "post_date": "Apr 17, 2018", "readtime": "6 min read", "upvotes": "1.4K", "content": "How to save your Ethereum Dapp users from paying gas for transactionsAnd instead you as a dapp owner pay for\u00a0itMahesh MurthyBlockedUnblockFollowFollowingApr 17, 2018One of the friction points for Ethereum dapp adoption is that the users have to pay gas(txn fee) to get their transactions recorded on the blockchain. For example, I have a simple voting dapp that lets anyone vote for candidates and the votes are stored on the blockchain. A user who wants to record her vote on the blockchain has to pay a transaction/gas fee. This is not ideal because as a dapp owner, you are expecting your application users to have Ether to pay for gas when all they want to do is perform a simple action which has nothing to do with transferring money. But if the transaction needs to be executed on the blockchain, there is no other option but to pay the fee. What if there was a way for users to execute transactions securely (vote for a candidate in our example) and let someone else (potentially contract owner) record the transaction on the blockchain and pay for it?Thanks to this tweet from John Backus which had just enough information to help me implement such a solution for my voting dapp.", "responses": "19"}, {"title": "Ethereum Zero to Hero: Introduction", "author_name": "Allan MacGregor", "link": "https://hackernoon.com/ethereum-zero-to-hero-introduction-4a2930d636a?source=search_post", "post_date": "Dec 25, 2017", "readtime": "3 min read", "upvotes": "922", "content": "Ethereum Zero to Hero: IntroductionAllan MacGregorBlockedUnblockFollowFollowingDec 25, 20172017 has arguably been the year of Cryptocurrency, with Bitcoin being getting most of the spotlight; at the core of Bitcoin, we have the Blockchain.Blockchain technology applications go way beyond digital currency, and one of the best examples is Ethereum which is a decentralized platform that runs smart contracts.This allows developers to build enormously powerful decentralized applications, at this point there is still a lot of active development and innovation happening both around blockchain and ethereum.The downside of all this constant innovation and development is that tutorials, documentation, and resources go out of date quickly, this has made it difficult for developers like me (or you) to get a solid footing when getting started.This guide is not to mean to the end all or be all, rather a quick introduction that can get you started quickly and hopefully agnostic enough that won\u2019t go out of date too fast. With that said, let\u2019s get started by reviewing some core concepts:Smart ContractsContracts live on the blockchain in an Ethereum-specific binary format (EVM bytecode).A smart contract is a piece of software that resides on the Ethereum Blockchain. Like traditional contracts, smart contacts not only define the rules and penalties around an agreement but additionally the enforce those obligations.Ethereum Virtual\u00a0MachineAt the heart of it is the Ethereum Virtual Machine (\u201cEVM\u201d), which can execute code of arbitrary algorithmic complexity. In computer science terms, Ethereum is \u201cTuring complete.\u201dThis is the core and primary innovation behind the Ethereum project. Each participant of the Ethereum networks runs an instance of the virtual machine, and its purpose is to execute the smart contracts in a completely isolated environment, meaning no access to Network, Filesystem or other processes.GasGas is a concept unique to the ethereum platform and is way to limit the resources available to a given smart contract. For every instruction executed in the EVM, there is a fixed Gas cost associated with it.SoliditySolidity is a contact-oriented, high-level language for implementing smart contracts. The syntax resembles javascript and is influenced by languages like C++ and Python, and it compiles directly to EVM assembly.Blockchain\u201cThe blockchain is an incorruptible digital ledger of economic transactions that can be programmed to record not just financial transactions but virtually everything of value.\u201d\u200a\u2014\u200aDon & Alex Tapscott, authors Blockchain Revolution (2016)The best way to think about the blockchain is as decentralized immutable database or ledger, that can permanently store any type data.The potential business applications for this technology are still being discovered and experimented with, but there are tons of examples online, to mention a few we have:CrowdfundingGovernanceFile StorageProtection of Intellectual PropertyIdentity ManagementProperty RegistrationIn the next entry in this series we will set up a local development environment for creating our first smart contract.This article was originally posted on my own site.", "responses": ""}, {"title": "A Beginner\u2019s Guide to\u00a0Ethereum", "author_name": "BlockChannel", "link": "https://medium.com/blockchannel/a-beginners-guide-to-ethereum-5e7e132a854d?source=search_post", "post_date": "Mar 7, 2017", "readtime": "6 min read", "upvotes": "481", "content": "A Beginner\u2019s Guide to\u00a0EthereumBlockChannelBlockedUnblockFollowFollowingMar 7, 2017When Bitcoin was created in 2009 it sparked a social and technological movement and has since sent ripples across the financial industry.A promising technology, one often times pushed by the wayside under the guise of \u201cblockchain\u201d or \u201cdistributed ledger\u201d in the press. It was the first technology that allowed us to securely send money across the internet, without fear of fraud or censorship. However, several pioneers saw some potential in the underlying technology that powered the secure payment system: the blockchain.What initially enabled many individuals to send money, also held the potential to decentralize the Internet as we know it.But there was one caveat (or several for that matter), Bitcoin wasn\u2019t designed to send anything more than a few kilobytes of data per transaction, nor was it capable of performing calculations that didn\u2019t fit into his limited (by design) scripting language. Satoshi Nakamoto, the creator of Bitcoin, believed that limiting the functionality of the system would significantly improve security.But Vitalik Buterin, the creator of \u201cEthereum\u201d, saw things a little bit differently. Vitalik imagined Ethereum as a \u201cworld computer\u201d; one that fits a virtual machine (the EVM), a Turing-complete language(Solidity, and soon Viper), a token (ETH), and fuel (gas) to power every transaction in its network. This combination allows the creation of complex programmatic computational instructions\u200a\u2014\u200acommonly known as smart contracts and decentralized applications or \u201cDApps\u201d.What previously took entire separate tokens and platforms, Ethereum could implement with a few lines of code. Some examples are currently under development or available right to the public: prediction markets, decentralized file storage and computation, insurance contracts, decentralized identity\u200a\u2014\u200aand much much more.Ethereum has its own token called \u201cEther\u201d (ETH); it can be used to pay other people or even machines. In essence, you can send ETH to a smart contract which will then execute itself (ETH is converted to \u201cGas\u201d when seeking to execute computations in the \u201cEVM\u201d) and perform its a complex set of instructions. With Ethereum, a person can pre-set withdrawal limits; you can even create a smart contract that will send your ether to a loved one when certain conditions are met, such as an outside oracle verifying your death.The DApps EcosystemThe main feature of Ethereum is the support for decentralized applications; among them are several of the most exciting projects currently in our fledgling, \u201cblockchain-based\u201d industry\u200a\u2014\u200alet\u2019s dig in:GolemGolem is an Ethereum-based decentralized computation network. With this platform, a user can buy or sell computational power, which means that you can either complete a computationally-heavy task on someone else\u2019s computer or sell your idle computing power to someone who needs it. Golem can distribute the task of rendering CGI, doing in minutes what would take days, and all computations take place in virtual machines and are fully isolated from the host\u2019s system.Golem is a powerful idea; one if executed appropriately, could lead to huge jumps in the accessibility of developers all over the world to access the same powerful resources to create the next big thing.Gnosis/AugurGnosis and Augur are two of the most important DApp projects in the Ethereum ecosystem, both powering decentralized prediction markets. Prediction markets allow users to purchase and sell shares in the outcome of an event (Yes or No, Win/Lose, etc) and be rewarded if you guessed (predict) correctly.The data can be used by individuals or organizations to make more accurate decisions thanks to the\u201d wisdom of the crowd\u201d \u2013a large group\u2019s aggregated answers to questions involving quantity estimation, general world knowledge, and spatial reasoning has generally been found to be as good as, and often better than, the answer given by any of the individuals within the group.Augur was launched in 2015, collecting more than $5 million in funding after the Initial Coin Offering (ICO) of its own token, Reputation (REP), to this date, Augur continues its developing phase, with an open beta for users to test. On the other hand, Gnosis is still preparing to launch its own ICO to distribute the tokens that will be used to power the decentralized platform.uPortOne of the most pressing issues on the internet today is the centralization of user\u2019s data. When you accept the terms and conditions of that app you just downloaded you aren\u2019t just getting free stuff, you are becoming the product that company capitalizes from in the future when it comes time to monetize.Another problem is that in today\u2019s internet, our identity and reputation is scattered across a myriad of services. If something bad were to happen to eBay\u2019s datacenter, your hard-earned reputation as a merchant would be destroyed forever. Sellers would then have to migrate to another platform and start all over again. A hassle for an individuals whose sole source of income is their reputation as a successful merchant.Solutions like uPort could help to securely store your encrypted information on Ethereum\u2019s blockchain, allowing you to share it whenever and with whoever you want to.StatusStatus is a very interesting project as well. Status seeks to be a sort-of WeChat/WhatsApp like service for Ethereum. A platform, and an application. One that allows users to access a variety of difference DApps in the Ethereum ecosystem, and browse/interact with them all directly through the client.Applications like Status are huge for Ethereum, as it blends a traditional messaging client, and a platform to quickly create and maintain a wallet/profile that you can then use to easily access the Ethereum network.Status aims to make the barrier to entry to Ethereum low; and allows for somewhat of an Ethereum DApp store on your mobile device.WeTrustBuilt on the Ethereum Blockchain, WeTrust is is attempting to be unlike traditional other traditional lending services. Their system utilizes Smart Contracts executed on the public Ethereum chain that allow for the creation of \u201cROSCAs\u201d(Rotating Savings and Credit Association.)ROSCAs built on WeTrust enable low-cost savings like accounts for participants (friend & family) to trustlessly save money; and have a pool of funds to full from in time of emergency, or when needing to make a large purchase (think car down payment).WeTrust lower costs and grants users greater privacy and control over your personal financial data. Their system introduces the ability to create networks of wealth easily, anywhere. Users can share funds based on self-reliance and take back power; rather than grant more to corporate, institutional or governmental agencies.Just a\u00a0TasteThat\u2019s just a small introduction to some of the DApps thats are being developed on Ethereum. That doesn\u2019t include the numerous tools and developer resources that are also being created to expand Ethereums reach to people all over the world.Ethereum itself, the core protocol, is constantly undergoing improvements through a series of pre-planned hard forks (upgrades); and sometimes some are unplanned (emergency upgrades). But, overtime, the ecosystem of DApps built on this public system will eventually interoperate to form the basis of the next generation of the internet.Total amount in $ raised by various ETH DApplications. Image courtesy of Coinbase\u00a0BlogResourcesThis post is just a brief introduction to the potential of this new system. The Ethereum ecosystem, and the blockchain industry as a whole, matures/changes at a rapid pace.When researching these topics, if you find it difficult to keep up with the pace of new information, you\u2019re not alone. Take your time and be patient, learn as much as you can\u200a\u2014 it\u2019s a journey.If you think all this Ethereum stuff sounds great, below are some links to help you get a deeper perspective into the space. If you enjoyed this post, share it with a friend!Join the BlockChannel Slack, too: http://blockchannel.signup.team; discuss trading, development, and make some like-minded friends.Essential Medium posts on\u00a0EthereumJust Enough Bitcoin for Ethereummedia.consensys.netEthereum: Bitcoin Plus EverythingBy Mike Goldinmedium.comEthereum is the Forefront of Digital CurrencyWe have sat here for the last 3 years seeing only infrastructure apps like wallets and exchanges emerge on top of\u2026blog.coinbase.comethereum/wikiwiki - The Ethereum Wiki -github.comThe History of Casper\u200a\u2014\u200aPart 1Republished from the Ethereum blog at the request of Steve D. Mckie.medium.com11 Best Ethereum Development Tools to Grow Your StackBlockchain tech is getting chief officers hot and heavy. When it\u2019s your turn to show them your stack, will you distress\u2026hackernoon.comThe Birth of Enterprise Ethereum in 2017Enterprise use of blockchain technology has evolved at an almost unfathomable rate over the past 24 months.media.consensys.netTruffle is now available on Microsoft Azure MarketplaceTruffle, aiming to make life as an Ethereum developer easier.media.consensys.net", "responses": "2"}, {"title": "How to prove that you know something, without revealing it? Zero-knowledge proofs, ZCash, Ethereum.", "author_name": "Lukas K", "link": "https://hackernoon.com/how-to-prove-that-you-know-something-without-revealing-it-zero-knowledge-proofs-zcash-ethereum-43ce35d4d1c5?source=search_post", "post_date": "Nov 23, 2017", "readtime": "5 min read", "upvotes": "829", "content": "How to prove that you know something, without revealing it? Zero-knowledge proofs, ZCash, Ethereum.Lukas KBlockedUnblockFollowFollowingNov 23, 2017Recently a new term started buzzing around in Crypto community\u200a\u2014\u200aZero Knowledge Proof or ZK-Snark.Zero-knowledge proof is a method or process, where one person (the prover) can prove something to another person (the verifier) that given statement is true without revealing no additional information about that statement apart from the fact that it is actually true.Let\u2019s take an\u00a0example.I managed to find a simple example to understand everything better. Imagine an experiment, where we have a color-blind person who cannot distinguish colors.And we have two balls of different colors.You know that those balls are different colors, however, for the color-blind person they seem identical. The question is, how you can prove him, that these balls are actually different without revealing any information which one is which, not even their actual color?This is where Zero-knowledge proof comes into\u00a0play.You conduct an experiment:The color-blind person takes both balls and hide them behind his back. Then he shows you one ball, returns it back, and shows you the same or the second ball one more time.Every time you have to say if he has swapped the balls or not. From now on, each time he shows the ball, there is a 50% probability that he swapped the ball.By looking at their colours, you can definitely say whether or not he switched them. On the other hand, if they were the same colour and hence indistinguishable, there is no way you could guess correctly with probability higher than 50%.If you repeat this proof multiple times, the color-blind person should be convinced that balls are actually different colour otherwise, you would not be able to guess right that many times.This is a perfect example of zero-knowledge proof. You never reveal what color and which ball is which, but the color-blind person is convinced that the balls are actually different color.A more technical example could be that given the hash of a random number, the prover can convince the verifier not only that the number exists, but that they in fact know such a number for that hash\u200a\u2014\u200aagain, without revealing any information about the number.So why everyone talks about this thing? Where it can be actually applied in Crypto space?ZCashCryptocurrency with market cap of more than $840,000,000 is fully powered by Zero-Knowledge proof. Zcash is the first open, permissionless cryptocurrency that can fully protect the privacy of transactions using zero-knowledge cryptography.Zcash is powered by zero-knowledge proof construction called a zk-SNARK.Zcash uses zk-SNARKs to prove that the conditions for a valid transaction have been satisfied without revealing any crucial information about the addresses or values involved. The sender of a shielded transaction constructs a proof to show that, with high probability:the input values sum to the output values for each shielded transfer.the sender proves that they have the private spending keys of the input notes, giving them the authority to spend.The private spending keys of the input notes are cryptographically linked to a signature over the whole transaction, in such a way that the transaction cannot be modified by a party who did not know these private keys.ZEC\u200a\u2014\u200ais the currency and the possibilities of transfer is displayed on the image\u00a0aboveTo be honest, I haven\u2019t deeply analysed Zcash before, but now it seems pretty fascinating from a technology perspective and at the same time pretty scary from money laundering perspective. Compared to Bitcoin, you can trace the route of a coin, and once it hit\u2019s some exchange\u200a\u2014\u200aEUREKA, most of the time you know the actual person behind some bad things. With ZCash you do not have that ability anymore.EthereumThe recent Ethereum Metropolis (Byzantium) upgrade added a zk-SNARKs\u200a\u2014\u200aa cryptographic tool developed by ZCash team. The building blocks of the verification algorithm was added to Ethereum in the form of precompiled smart contracts.Using zk-SNARKS on Ethereum you could implement Token transfers from one address to another without revealing the amount of the transaction. Consensys explained how it could work here.In DevCon3 there was presented The Open Vote Network, a system that enables anonymous voting on the Ethereum platform using Zero-Knowledge proofs.Still earlyIt is still early and there is not many applications on Ethereum developed yet using Zero-knowledge proof, but it shows a huge potential for privacy on Ethereum Blockchain.Side noteI had an opportunity to study cryptography for half a year. Even though the course was interesting, it was not that satisfying as I couldn\u2019t find real-world use-cases by that time. And just more than a year ago, I started to understand the actual value of cryptography in the whole CryptoCurrency economy, as everything is purely based on it and mathematics.This knowledge allows me to understand the true value behind cryptocurrency like Zcash and many more. I would highly recomend you to digg deeper into cryptography and the mechanics of it, as this knowledge gives you massive advantage no matter your goals.Most secure crypto currency hardware wallet is Ledger Nano. It provides hardware security for every user only for \u20ac59. Find out more here.", "responses": "6"}, {"title": "Dapps 101: How do I start developing on Ethereum?", "author_name": "Andy Coravos", "link": "https://blog.andreacoravos.com/dapps-101-how-do-i-start-developing-on-ethereum-da0d38ed973f?source=search_post", "post_date": "Oct 4, 2017", "readtime": "3 min read", "upvotes": "601", "content": "Dapps 101: How do I start developing on Ethereum?Andy CoravosBlockedUnblockFollowFollowingOct 4, 2017Note: I drafted this piece in early 2017 pre-ICO craze. There\u2019s been a lot of great advancements and tools to play with since then. Check out this Hacker News chain for more resources.If you\u2019re just starting with Ethereum, check out Fred Ehrsam\u2019s \u201cEthereum is the Forefront of Digital Currency\u201d (May 2017) and Linda Xie\u2019s \u201cA Beginner\u2019s Guide,\u201d both of which were published earlier this year.Let\u2019s say you want to dive in, get your hands dirty, and play around with the protocol and smart contracts\u200a\u2014\u200awhere to start?Building your first\u00a0dappWhen I was first diving in, I met with Ryan, co-founder of Dapphub Chat and Nexus, blockchain R&D firm specializing in the Ethereum technology stack, and he shared a few starting points. It was a goldmine. Although I\u2019m still working through the resources, I realized I\u2019m not the only person thinking about how to get started\u200a\u2014\u200aso wanted to share it with the broader community.Where to start: A 101 Noob Intro to Programming Smart Contracts on Ethereum by ConsenSys, a blockchain venture production studio building decentralized applications on Ethereum.Afterwards, I navigated over to the Ethereum Foundation, a Swiss nonprofit, which created a Greeter App, where you can build your first smart contract in the command line. While going through this, I realized I wanted more context before starting, which is when I reached out to Ryan. Here\u2019s some of his tips:dApps for Beginners. A wordpress site self described as the \u201ctemporary\u201d home of learning materials relating to development on Ethereum. Coming soon: EthAcademy, which will be Ethereum\u2019s official site for learning to build on the Ethereum platformReadTheDocs has a Solidity and Smart Contract PrimerBlockgeeks has a Basic Solidity CourseMonax an intro for how to write and structure smart contracts as well as intro to solidity tutorialsKaustav Haldar from the University of Waterloo put together a GitHub repo for building your first dapp (HT Anastasia)What dapp frameworks are out\u00a0there?Truffle is an ethereum development framework maintained by ConsenSys. It\u2019s among the most popular ones out there today. Dan Finlay wrote up a tutorial for developing dApps in MetaMask and Truffle. Here\u2019s another Truffle framework tutorial that comes recommended.Embark, a framework for serverless Decentralized Applications using Ethereum, IPFS and other platformsPopulus, a smart contract development framework for the Ethereum blockchain.If you\u2019re looking to get something up quickly to play with, Coinbase has developed Toshi, a dev-friendly tool that has three components (1) a private and secure messaging app, (2) a user controlled Ethereum wallet and (3) a browser for Ethereum appsHow about\u00a0testing?One of the first questions I asked was whether I needed to download the full blockchain on my local computer to do my dev work. As of the end of 2016, the full-mode size requirement was 75GB, growing at 1GB per month. I\u2019d need a lot more storage on my computer to manage that. Recommend using Test RPC, Node.js based Ethereum client for testing and development. It\u2019s managed by EthereumJS.Another option is to use Parity, developed by Ethcore, which is a fast and lightweight Ethereum client that can be used to access dapps.Where can I ask for\u00a0help?Check out the Ethereum Gitter channel and Ethereum Stack Exchange.What else is interesting out\u00a0there?Check out EthList, a popular GitHub repo hosting a crowdsourced Ethereum reading list.If you haven\u2019t skimmed State of the Dapps yet, you\u2019ll see some of the new projects for inspiration.Game on.Thanks to Ryan, Anastasia and the team at ETHWaterloo for sharing additional resources.", "responses": "5"}, {"title": "The Primary Difference Between Ethereum And Bitcoin: A Beginner\u2019s Guide", "author_name": "Quora", "link": "https://hackernoon.com/the-primary-difference-between-ethereum-and-bitcoin-a-beginners-guide-8a892afb7a4?source=search_post", "post_date": "Dec 18, 2017", "readtime": "4 min read", "upvotes": "746", "content": "The Primary Difference Between Ethereum And Bitcoin: A Beginner\u2019s GuideQuoraBlockedUnblockFollowFollowingDec 18, 2017By Samantha Radocchia, Emerging Technologies Entrepreneur and Scholar. Originally published on Quora.Today\u2019s hype surrounding Bitcoin, Ethereum, cryptocurrency, and blockchain technologies rivals the dot-com bubble in the 90s. There is a lot of money pouring into this space, and it doesn\u2019t seem to be slowing down anytime soon.Unfortunately, while the masses may be able to say, \u201cYeah, I\u2019ve heard of Bitcoin,\u201d a large percentage of people still aren\u2019t quite sure what it is\u200a\u2014\u200aand are even more confused about Ethereum.If you\u2019re even remotely interested in this space, consider this your beginner\u2019s guide.BitcoinThe easiest way to define Bitcoin is to call it a \u201cdigital dollar.\u201d That\u2019s really all it is\u200a\u2014\u200aminus all the formal regulations that come with a bank (which is what makes it such a disruptive concept). It\u2019s not a technology. It\u2019s not a company. It\u2019s your money, held in a digital form.Bitcoin - Hacker NoonBitcoin is a worldwide cryptocurrency and digital payment system. It's the first decentralized digital currency. The\u2026hackernoon.comAnyone can create an account to buy and sell Bitcoin through websites like Coinbase. The price of Bitcoin then fluctuates based on supply and demand. However, now people are beginning to convert their Bitcoin into what are called \u201ctokens,\u201d which companies issue during an ICO, or Initial Coin Offering, which allows people to invest in a company by purchasing tokens with their Bitcoin. Based on the supply and demand of those tokens, their price (just like a share of stock after a company holds an Initial Public Offering, otherwise known as an IPO) goes up or down. These tokens operate on a secondary market, separate from the rise and fall of Bitcoin\u2019s market as a currency.Some people buy Bitcoin because they want to store their money somewhere other than a bank. Some buy Bitcoin as an investment, believing that its price a few months or years from now will be substantially higher than it is today. And some people purchase Bitcoin as a means of investing in companies that raise money through an ICO, since equity in those companies cannot be purchased with traditional currency. You can only purchase tokens with Bitcoin or Ether, which is Ethereum\u2019s cryptocurrency.EthereumEthereum is another cryptocurrency, and one many people see as potentially overtaking Bitcoin as the dominant coin in the market.Ethereum - Hacker NoonEthereum is a smart contract cryptocurrency, but lets be honest, its just a top of funnel for cryptokitties. how\u2026hackernoon.comIn any economy, currency is relative. Since Bitcoin has been the leading coin since the beginning, the price of every other \u201caltcoin\u201d (and there are a lot of them) is measured against Bitcoin. Take Litecoin, for example. It is a currency that has its own market and holds its own merit, but while Bitcoin is priced at over $3,000 per, Litecoin currently sits around $45 per. So, while it has its own value, it is by no means a market leader.What makes Ethereum different is its technology, not the fact that it\u2019s yet another cryptocurrency. Ethereum\u2019s coin value is referred to as \u201cEther,\u201d and just like Bitcoin is bought and sold, and used by investors to buy into ICO opportunities.The difference between Ethereum and Bitcoin is the fact that Bitcoin is nothing more than a currency, whereas Ethereum is a ledger technology that companies are using to build new programs. Both Bitcoin and Ethereum operate on what is called \u201cblockchain\u201d technology, however Ethereum\u2019s is far more robust. If Bitcoin was version 1.0, Ethereum is 2.0, allowing for the building of decentralized applications to be built on top of it.In a nutshell: it\u2019s great for innovation.Furthermore, there is heavy support behind Ethereum\u2019s technology in what is called The Enterprise Ethereum Alliance. This is a super-group of Fortune 500 companies that have all agreed to work together to learn and build upon Ethereum\u2019s blockchain technology\u200a\u2014\u200aotherwise referred to as \u201csmart contract\u201d technology. In this case, \u201csmart contracts\u201d mean that demanding business applications can automate extremely complex applications.What has so many people\u200a\u2014\u200aincluding me\u200a\u2014\u200aexcited about Ethereum\u2019s technology is its potential to impact IoT projects and processes. It\u2019s by no means a perfect technology yet, but it has absolutely opened the door for all sorts of unique innovations. For example, my firm, Chronicled, recently worked with a 3D-printing company, Origin, to develop a \u2018smart tag\u2019 for sneakers and luxury goods that could guarantee their authenticity. This was done leveraging Ethereum\u2019s blockchain technology.All in all, and if you\u2019re as curious and excited about this space as I am, the major difference between Bitcoin and Ethereum is their separation of roles\u200a\u2014\u200aand the fact that they are aiming at parallel but different goals. This article on the topic summed it up perfectly, by citing that early adopters are beginning to see the separation as such: \u201cWhere Bitcoin is disrupting currency, Ethereum is disrupting equity.\u201dBy Samantha Radocchia, Emerging Technologies Entrepreneur and Scholar. Originally published on Quora.For more trending tech answers from Quora, visit HackerNoon.com/quora.", "responses": "1"}, {"title": "Introduction to Ethereum: The Internet\u2019s Government", "author_name": "Karl Floersch", "link": "https://media.consensys.net/introduction-to-ethereum-the-internets-government-35bdd25f572a?source=search_post", "post_date": "Dec 7, 2016", "readtime": "5 min read", "upvotes": "393", "content": "Introduction to Ethereum: The Internet\u2019s GovernmentKarl FloerschBlockedUnblockFollowFollowingDec 7, 2016Credit to the incredible film Castle in the\u00a0SkyBitcoin has catchy slogans like digital gold and internet money, but what is Ethereum? Sometimes it\u2019s called the world computer. But what in the world is a \u201cworld computer\u201d? Without having to take a course in computer science, here is a straightforward explanation of what Ethereum really is:Ethereum is the internet\u2019s government, and smart contracts are its\u00a0laws.To understand Ethereum\u2019s profound implications, let\u2019s examine the functioning of this new internet government.Creating and Enacting\u00a0LawsLaws in Ethereum work a little differently than laws in traditional governments. First, in Ethereum laws can be created by anyone. That means you, your neighbor, and President Obama are all on equal ground.These laws are traditionally called smart contracts. They are written in code. The code is just a language in which there is no room for interpretation, unless explicitly authorized. So if you learn the language, congratulations! You are now a member of the legislative branch of the internet government.Once a law is written, it must be enacted by the government\u2019s executive branch: a network of computers running the Ethereum software. You must pay the computers upfront for the cost of enforcement. However, it is extremely cheap. It costs about half a penny for a law to be executed and enforced. So if you\u2019ve got half a penny to spare, congratulations! You\u2019re now in charge of the executive branch.Following LawsBut wait! There\u2019s a catch. Creating a law doesn\u2019t mean everyone is going to follow it. All Ethereum laws are opt-in. For your law to be adopted, you\u2019ll need to convince fellow citizens that following your law is in their interest.You must also decide which laws you choose to follow. Good laws will provide distinct advantages to those who follow them. They allow for cooperative action and greater trust within the group.One example of cooperative action enabled by laws could be a service like Uber. The drivers will follow laws that protect them from bad passengers, and passengers will follow laws that protect them from bad drivers. To illustrate the concept of these smart contract laws, two Uber laws could be:If you (a passenger) assault your driver, and they report it, you are kicked out of the service.If you are reported but you file a counterclaim within one day, you will be appointed a random arbiter to resolve the dispute.These laws provide the protections required to organize groups with minimal overhead.These diagrams get much more complicated when one law depends on another. For instance, to be an Uber driver you also have to follow the insurance laws. While this might be hard to represent with cute smileys, this is how the internet government will be able to handle the complexities of modern governance.Breaking LawsThe internet government has another interesting property: it is impossible to break laws. All laws are executed exactly as they are defined. For instance, in our Uber example, having an assault filed against a passenger will always cause them to be kicked out of the service. It doesn\u2019t matter if they are a new user or the president and founder of Uber. This is great for battling corruption, but sometimes corruption is not the problem.Many laws are poorly designed or unfair. These laws are also executed exactly as defined. This may seem terrible, but it\u2019s essential for weeding them out. It is easy to identify a bad law if following it is actively harming you. I would be broke in a week if I had to pay a fine every time I jaywalked.While it is impossible to break laws, you can explicitly choose not to follow them. Remember, all laws are opt-in. This provides a simple mechanism for weeding out bad laws: they simply cease to be followed.Governing with the Scientific MethodGovernance is one of the most ancient conundrums of humankind, and it is by no means solved. Inequality, injustice, and corruption have been defining features of the modern era. Today humanity faces some of its most difficult challenges. We will need effective governance if we want to stand a chance.The internet government is probably our best bet. With low cost opt-in laws that cannot be broken, for the first time we can easily apply the scientific method, trial and error, to governance. Laws being opt-in means they are under every citizen\u2019s scrutiny. Laws being unbreakable lets us accurately measure their effectiveness. Law creation being available to everyone means new laws can rapidly replace old ineffective ones. And then we repeat. We will be able to turn governance into a science and discover laws that are effective and fair for all.Ethereum is not just the internet\u2019s government, it\u2019s\u00a0yours.", "responses": "13"}, {"title": "Ethereum: Signing and Validating", "author_name": "Angello Pozo", "link": "https://medium.com/@angellopozo/ethereum-signing-and-validating-13a2d7cb0ee3?source=search_post", "post_date": "Jun 9, 2017", "readtime": "4 min read", "upvotes": "1.1K", "content": "Ethereum: Signing and ValidatingAngello PozoBlockedUnblockFollowFollowingJun 9, 2017A core primitive of Ethereum and other cryptocurrencies is the ability to sign data that can be verified by anyone. This powers the distributed nature of blockchain. In Bitcoin you sign a transaction saying you want to give Sally 4 bitcoin. Without this property, anyone could make fake transactions giving themselves all coins.", "responses": "18"}, {"title": "Summary of Ethereum Upgradeable Smart Contract\u00a0R&D", "author_name": "Jack Tanner", "link": "https://blog.indorse.io/ethereum-upgradeable-smart-contract-strategies-456350d0557c?source=search_post", "post_date": "Mar 5, 2018", "readtime": "7 min read", "upvotes": "1.1K", "content": "Summary of Ethereum Upgradeable Smart Contract\u00a0R&DJack TannerBlockedUnblockFollowFollowingMar 5, 2018This article is a summary of research and development in the area of upgradeable Ethereum smart contracts. It is meant to be a convenient resource to centralise the research to date, and to continue this technical discussion. In addition, I have created a summary table of the pros and cons of different strategies that are being proposed. If you are working/watching this area of R&D please comment on this article as to your agreements, disagreements or opinions on this table and my descriptions of strategies.Other than my own contributions as part of the AvanceHub project several months ago, this article does not add new technical R&D. The ordering of the strategies in this articles should not be interpreted as their level of adoption or preference by myself or the developer community. As part of the indorse.io project, this article will begin our own formulation of an upgradeable strategy which we consider necessary.Update June 2018: indorse.io has continued to research and deployed contracts that use the proxy contract pattern.At the bottom can be found what I believe to be a comprehensive list of links of R&D to date.100% Upgradeable MechanismsCreating a smart contract that can be completely replaced with new logic is possible just by using more smart contract infrastructure. There are two main streams of strategies: proxies and the separation of logic and data into different contracts. Separating logic and data in a contract can be done in two ways.The fundamental problem that both methods solve is how to update a contract\u2019s logic while still retaining access to a contract\u2019s state.I have given a brief summary of how these strategies work below but I recommend going to the latest resources at the bottom of this article to become intimately familiar with how they work (especially if you are just starting down the rabbit hole of upgradeable contracts).Proxy ContractsA proxy contract uses the delegatecall opcode to forward function calls to a target contract which can be updated. As delegatecall retains the state of the function call, the target contract\u2019s logic can be updated and the state will remain in the proxy contract for the updated target contract\u2019s logic to use. As with delegatecall, the msg.sender will remain that of the caller of the proxy contract.Due to the recent Byzantine hard fork, which now gives access to the return size of a function call, this method can now be generic (compared to when it was first proposed by Nick Johnson). An example of a generic proxy contract can be seen in Daonomic\u2019s resources which is also is a great article to read about this mechanism in more detail to get a simple overview.Update June 2018: There are several ways to create an upgradeable contract using a proxy with delegate call. Zeppelin has a very good articles explaining the three patterns that they have researched and tested. The pattern that has been chosen for the ZeppelinOS smart contract system is called the Unstructured Storage pattern and has now gone through a full security audit by Nomic Labs. This audit identified one critical issue with the pattern which has now been fixed.Separate Logic and Data ContractsThis involves separating the smart contract into a data contract which contains the data (variables, structures, mappings etc) with appropriate getters and setters, and a logic contract which contains all of the business logic of how to update this data. The logic contract updates the data through the setters and the data contract only allows the logic contract to call the setters. This allows the logic to be replaced while keeping the data in the same place, allowing for a fully upgradeable system.The contract can be updated by pointing users to use the new logic contract (through a resolver such as ENS) and updating the data contract permissions to allow the new logic contract to be able to execute the setters.Check out @Thomas Wiesner\u2019s video to get a better understanding of this mechanism.Separate Logic and Data Contracts with Data as Key-Value pairsThis strategy works with a similar principle to the one above, except that instead of using the final desired data structures that your contract would normally use (structs, mappings etc), all data is abstracted down and stored in primitive key-value pairs. A standard naming system along with the sha256 hash algorithm is used to find the values of data.Check out David Rugendyke\u2019s article to get a better understanding of this mechanism.Partially Upgradeable StrategiesCreating a fully upgradeable contract sounds great but there is a large trust compromise required: the immutability of the contract. Using only partially upgradeable contract systems may make sense in many cases.In this strategy, core features of your smart contract can be left as non-upgradable. Other components that may be less-integral or more complex (and hence have high probability of requiring upgrade) are implemented with an upgradeable strategy.I have seen a few good examples of this but if you know of any more please let me know:The Ethereum Name Service \u201cENS\u201d: The core ENS contract is a very simple contract and cannot be changed. Domain registrars (eg for the\u201c.eth\u201d domain) however can be upgraded by administrators. The registrar for the \u201c.eth\u201d domain is a contract factory for Deed contracts which are created one per deed, so that if a new domain manager is used, it can be relinked with all previous deeds and their state without much hassle.The 0xProject: The 603 line core DEX (Decentralized exchange) smart contract can be fully upgraded while the proxy contracts (one for each user) remain the same. The 0x \u201cproxy\u201d contract (not the same as the proxy strategy mentioned above) contains the user funds and settings. For this reason it requires more trust and is not an upgradeable part of the 0x contract system.Other ChallengesIn all cases, a governance tradeoff is made that compromises the immutability of a smart contract. A strong governance strategy is also needed as part of an upgradeable strategy.Creating an opt-in upgradeable smart contract system is possible and valuable to users but adds complexity.Changes to Solidity compilers may break compatibility between new and old contracts.There are gas overheads to consider when formulating an upgradeable strategy.ConclusionNo one strategy is perfect and selecting the right strategy depends on the smart contract system to be implemented. All strategies are complex and smart contract designers should be very comfortable with their chosen upgradeable strategy to avoid security vulnerabilities.My opinionsTo create an upgradeable smart contract, the proxy mechanism seems the best well rounded strategy because it allows programmers to separate the upgradeable mechanism from their contract design and this makes things much easier to reason with and use, and will create less errors (which is a principal reason why we need upgradeable contracts in the first place).Update June 2018: The Unstructure Storage pattern that is in the final stages of being released as part of ZeppelinOS appears to be the most mature and tested pattern, and will likely be widely adopted.The use of a hybrid partially upgradeable strategy where the simplest, core logic is immutable also a good idea to maintain strong trust with users.Designing your non-upgradeable smart contract system first and then formulating an upgradeable strategy seems like a practical and ideal way to go about this.Twitter: @theblockstalkIndorse: indorse.ioResearch ReferencesGeneral2018\u201302\u201301 Zeppelin Solutions: Zeppelin and the Evolution of Smart Contract Development (Epicenter Youtube Video)2016\u20132017\u00a0: Upgradable Smart Contracts Stackexchange threadConsenSys: Ethereum Smart Contract Best PracticesEvoluchain: EvoluchainProxy Contracts2018\u201310\u201330 Nick Mudge: ERC Transparent Contract Standard #15382018\u201305\u201311 Nomic Labs: ZeppelinOS Smart Contract Audit2018\u201304\u201318 Zeppelin: Proxy Patterns2018\u201304\u201313 Zeppelin: Upgradeability using Unstructured Storage2018\u201302\u201322 Jorge Izquierdo: ERC DelegateProxy #8972018\u201302\u201315 Daonomic: Upgradeable Ethereum Smart Contracts, Github Project2018\u201301\u201311 Team B9lab: Upgradeable Github Project2018\u201301\u201310 Manuel Araoz\u00a0: Solidity-proxy Github Project2017\u201306\u201302 @Ownage\u00a0: Ether-routher Github Project2017\u201305\u201324 Nick Johnson: Mad blockchain science: A 100% upgradeable contract, Gist File2017\u201303\u201315 Jorge Izquierdo: Advanced Solidity code deployment techniques2017\u201303\u201307 Manuel Araoz: Proxy Libraries in Solidity2017\u201302\u201313 Jorge Izquierdo: Library Driven Development in Solidity2017\u201301\u201321 Tjaden Hess: Upgradeable smart contracts2016\u201306\u201316 @Martin Swende: Implicit method proxySeparate Logic and Data Contracts2017\u201312\u201309 @Thomas Wiesner: Upgrade Smart Contracts on Chain2017\u201311\u201313 Jack Tanner: Upgradeable, Github Project2017\u201308\u201321 Lukas K: Upgradable smart contracts. What we\u2019ve learned building Insurance on a Blockchain2016\u201308\u201316 @nikolai: Dapp-a-day 6: Upgradeable Tokens@monax: Solidity 1: The Five Types Model@monax: Solidity 7: Updating Solidity Contracts@Z.com Cloud Blockchain: Solution\u200a\u2014\u200aVersion Upgrade IssueSeparate Logic and Data Contracts with Data as Key-Value pairs2018\u201301\u201320 Hassan Abdel-Rahman: Upgradable Contracts in Solidity2017\u201311\u201322 David Rugendyke: Upgradable Solidity Contract Design, Github Project2017\u201306\u201329 Chandan Gupta: Interfaces make your Solidity contracts upgradeable, Github Project2016\u201306\u201308 Elena Dimitrova: Writing upgradable contracts in Solidity", "responses": "10"}, {"title": "Building \u2018Google For The Economic Web\u2019 on The Ethereum Blockchain.", "author_name": "Maciej Olpinski", "link": "https://blog.userfeeds.io/building-google-for-the-economic-web-on-the-ethereum-blockchain-de27cb3d23b?source=search_post", "post_date": "Nov 2, 2016", "readtime": "14 min read", "upvotes": "462", "content": "Building \u2018Google For The Economic Web\u2019 on The Ethereum Blockchain.Userfeeds is the content ranking & reputation system for blockchain communities. It is inspired by the ideas of liquid democracy and Google PageRank. In the following article, we introduce its vision, economics and the incentive model.Maciej OlpinskiBlockedUnblockFollowFollowingNov 2, 2016For a TL;DR version you can just browse through the slides from the presentation I gave on the same topic. If you prefer to watch the entire presentation you can find it here.IntroductionIn the early 1990s when the Web 1.0 was in its infancy, the dominant method of discovering websites was through online catalogues like Yahoo. We applied the old discovery model of browsing topically organised paper catalogues to the new medium of digital websites.The business model was based on keeping users on a site, clicking through the catalogue. Paper catalogues edited by people were around for years and websites were digital \u2018pages\u2019 after all. So the \u2018directory of digital pages\u2019 was the natural answer to the website discovery problem.When Larry Page and Sergey Brin wanted to sell their Google search engine in 1998 for $1 million, they were rejected. Their big idea expressed in Google\u2019s PageRank algorithm was that the Web required a new discovery model\u200a\u2014\u200aa search engine based on links between websites rather than top-down directories. At the time it was a contrarian thought but today we know they were right.The Economic Web is About\u00a0PeopleIn our view, we\u2019re at the early days of the new paradigm\u200a\u2014\u200athe Economic Web enabled by the blockchains and decentralised technologies.Blockchains can be viewed as distributed databases with access control based on public-private key cryptography. You can find countless discussions on the web regarding the definition what blockchains really are. To us, blockchains are what routers, servers, and networking protocols were to the early Web\u200a\u2014\u200athe computer-to-computer communication layer that enables new way of human interaction on the layers above.The Economic Web is the web of humans transacting as economic agents using the blockchains as the interaction layer.Tokens are new links between\u00a0peopleIn our model, tokens are a critical component of the emerging Economic Web. Tokens are for people what code is for machines\u200a\u2014\u200aa means of programming their behaviours.Bitcoin proved that it\u2019s possible to use the concept of a token to change economic behaviours of a vast number of people, by linking them into a network and making them perform activity for the network. Tokens proved to be extremely effective motivators as they utilize survival instincts of our brains triggering experiences of gain, loss, fear-of-missing-out on opportunity etc.We are naturally hardwired to seek economic benefits and tokens exploit that quality of our psychology. We program them but then they start programming us. To economically incentivize large groups of people, distributed around the world, just a few years ago you required to be a government or a multinational corporation. Today, every smart 15-year old with a laptop can achieve the same result with the cryptographic token. Our survival instincts don\u2019t distinguish if the incentive is an apple on a tree, a corporate stock or a cryptographic token you can sell. People will do stuff for the reward.Economic Networks or the Web 3.0 consist of networks of people linked by ownership of same tokens (there are already thousands of them). This evolution is illustrated in this table:The Economic Web Needs a New Content Discovery Paradigm.\u201cHistory doesn\u2019t repeat itself but it often rhymes\u201d\u200a\u2014\u200aMark\u00a0Twain.As you can see from the table, we don\u2019t have the native content discovery model for Economic Networks.It\u2019s a similar problem that the early Web had in the 1990s. The new type of paradigm emerges but we apply the old content discovery model to it.What Yahoo catalogues and directories were to websites, social media and search are to economic networks. Going to FB/Twitter or searching Google about any type of cryptotoken is like going to Yahoo directory to browse the web.You\u2019re going to get suboptimal results. Why?Yahoo completely ignored the wealth of reputational signals that were stored in links between websites. They opted for the human curated directory instead. So they missed critical signals that were native to the network they wanted to curate. Google exploited that with PageRank and won.In the similar fashion, Google/FB/Twitter/Reddit completely ignore reputational signals of the token-based economic networks (Bitcoin, Ethereum and many others) to rank information on their platforms.Do you want to see the result of that?Or just visit any token-related subreddit on any day.Distributed Interest\u00a0GroupsThese autocomplete suggestions Google gives you are the effect of the activity of Distributed Interest Groups. While various interest groups pushing their own agenda and interests are nothing new, they were historically limited to certain geographies with fixed memberships. You could tell who is in, and who is out.Distributed Interest Groups are a new phenomenon enabled by tokens running on top of public blockchain networks. Tens of thousands of people can belong to them without disclosing that membership to others. You just need to buy a token to join or sell it to leave.Once people join the network they have a vested interest in pushing the same agenda and increasing chances of success for their token. These activities range from \u2018to the moon!\u2019 type of posts on Reddit, to elaborate technical blog posts by experts explaining why token X is the future and token Y is doomed to fail.Tokens not only make people burn electricity, but they also make people say things online.But the ranking algorithms are completely clueless regarding economics & incentives behind these statements. Google can\u2019t check how many X tokens you own and count that into ranking of your website. Facebook can suggest you articles liked by your friends but it can\u2019t tell you which ones were endorsed by people owning at least 1% of tokens you own.This is the problem we want to address with Userfeeds.userfeeds.io is a content ranking and reputation system inspired by the ideas of liquid democracy and Google\u2019s PageRank algorithm.It can be used as a foundation for content discovery applications based on economic ranking\u00a0factors.Facebook answers the question:\u201cwhat/who should I pay attention to based on my social links (same friends, interests)\u201dApplications based on Userfeeds will answer the question:\u201cwhat/who should I pay attention to based on my cryptoeconomic links (same tokens owned, same economic incentives)\u201dLiquid Democracy Meets Google\u00a0PageRankToken Holders Are Content\u00a0CuratorsThe core concept of our model is that tokens become reputational signals used for ranking of information.Token holders become Content Curators and can use their token holdings to:endorse content on the Webback other curatorsEndorsements and backings are timestamped transactions that transfer reputation instead of monetary value. And while the timestamp is objective the reputation is calculated individually and subjectively by each app.For example: account #1 owning 1000 ETH backs account #2 owning 1 ETH. No actual ETH changed hands. Both accounts still own same amounts. But account #2 now owns 1001 of ETH of app-level reputation (as long as 1000 ETH is present on account #1, the app monitors the blockchain for that)You can think of \u2018reputation\u2019 transfers as links or likes. They create a permanent relationship on the blockchain between identities and content.It is a combination of liquid democracy and Google\u2019s PageRank.The curation graph generated by activities of curators is open, permanent and publicly visible on the blockchain. Each curator owns their curation graph and controls reputation they accumulate, similarly to how they control tokens today. It is controlled by the same key.Subjective Reputation \u2018Mining\u2019By endorsing content (or backing other curators) users convert their token holdings into reputation generated for content & other curators.Reputation understood as a currency has different characteristics than money. Money is objective\u200a\u2014\u200aif I give you a dollar and Mark Zuckerberg gives you a dollar the value you receive is the same.Reputation is subjective. But if you get two Facebook likes\u200a\u2014\u200aone from me and one from Mark then the difference in value received will be huge. Mark\u2019s like will drive way more attention to you than mine. But that value will be realised only in the Facebook\u2019s reputation economy. Your like received from Mark is worthless in Twitter\u2019s reputation economy.That\u2019s because all of these platforms operate as silos controlling the entire closed stack.In Userfeeds, all reputation transactions are objectively timestamped on the blockchain. Identities, token balances and their respective curation graphs are publicly accessible.Each application can then access this graph and introduce their own subjective reputation \u2018mining\u2019 algorithm that will be used for ranking content in the context of this application.If the ranking algorithm proves to be valuable for users, they\u2019ll pay attention and drive traffic to that particular application. It will increase the value of the underlying, objective token and the subjective, app-level reputation currency. Reputation currency is a derivative currency based on the token, that only exists in the context of the app. We will explain the reputation currency model in more detail in our future posts.Network Effect HypothesisOur hypothesis is that reputation tokens used purely for content ranking will increase in monetary value due to their ability to attract attention.The feedback loop is as follows:the token has no monetary value outside of reputation in a particular distributed interest group.due to activity of token holders (endorsements, backings) in a given application, the application starts to attract attention (traffic).new joiners can either get reputation from backers or just buy the token themselves. Some of them decide to buy it on the market.demand for token increases, the price goes up.early curators get rewarded, the higher price drives more attention.a circular economy gets kickstarted which is based on exchanges of value between three scarcities: attention, reputation and money.Why It\u2019s Not a Decentralised Social\u00a0Network.It is not our goal to build a new, decentralised social network on the blockchain.The vision of Userfeeds is to provide a token-based discovery layer that will enable curation of the existing, centralised social networks. Instead of building new Twitter, we want to allow users to curate the existing Twitter using the token. And Twitter is just the start because our reputation model applies to other content on the Web as well.Of course, once the decentralised social networks emerge, you\u2019ll be able to curate those as well. However, our perspective is that tokens are essentially new socio-economic networks with their own particular dynamics.Today, the majority of interactions in these networks are money-based. With Userfeeds, we\u2019re enabling a new set of reputation-based interactions (such as endorsements, backings and others).How Curators Will Make\u00a0Money?The question how to reward curators often comes up in discussions about Userfeeds.Our model doesn\u2019t contain any protocol-level, direct reward schemes for curators.The protocol itself is very simple\u200a\u2014\u200atoken holders timestamp transactions on the blockchain that off-chain applications interpret as reputation transfers. Reputation is calculated individually in each app.This app-level reputation becomes valuable proportionally to the attention the applications will attract (represented as traffic, daily active users etc). Reputation in low usage apps will be worth nothing but it will grow in value along with user interest. It\u2019s also possible that the same user will be high-reputation in some apps and low-reputation in other apps.There are many possible scenarios where high-reputation curators can convert reputation into cash.Let\u2019s analyse one hypothetical scenario:A curator with high ETH reputation accumulated by curation of tweets launches a new token called \u2018Promoted\u2019 along with a new application with a sleek user interface. She keeps 100% of the issuance to herself. Aside from her activity using the ETH token she starts endorsing content with her \u2018Promoted\u2019 token.When approached by people who want her to endorse or sponsor their links she just sells them a fraction of her \u2018Promoted\u2019 token. This way they can curate the \u2018Promoted\u2019 timeline in her application. Or in other words\u200a\u2014\u200athey get access to her \u2018Promoted\u2019 timeline. Just like FB placing ads on your Newsfeed but in a peer-2-peer way and with full transparency.Our curator picks and chooses who she sells the token to in order to maintain the quality of the app. She understands that if \u2018Promoted\u2019 gets sold to everyone it may generate a quick profit but in the long run will decrease her reputation.In this case, Userfeeds is used as an open, transparent advertising network where identities, \u2018ad-buys\u2019 and prices are permanently visible to everyone.Imagine if you could look behind the banner on a website, check the identity of the advertiser and the history of all their transactions.Userfeeds can be used as a reputation-only, money-free attention economy or a greedy, capitalistic advertising network. On the protocol level, both cases look exactly the same. Users voting with their attention and reputation transactions will give value to either one of the use cases.Game Theoretical ConsiderationsThis brings us to the important issue of incentive compatibility of our model.According to Wikipedia incentive compatibility means:\u201cA mechanism is called incentive-compatible (IC) if every participant can achieve the best outcome to him/herself just by acting according to his/her true preferences.\u201dIn our context this means that actors in the system should be rewarded for behaving truthfully, revealing their true preference without strategising and gaming the system.We achieve that by introducing multiple levels of curation and various roles counterbalancing each other for the competition for scarce attention of users.Roles and\u00a0goals:Curators aim to curate content and other curators in a way that maximises their reputation as calculated by applications.Applications aim to optimise their ranking algorithms in ways that reward the best curators with the highest reputation.Users aim to optimise their attention by choosing apps that give them the best Return-On-Attention (the best informational value for their time spent).Interaction typesreputation transactions\u200a\u2014\u200aon chain, consensual, objective\u200a\u2014\u200apublicreputation scoring-\u2014 off-chain, app-specific, subjective (ranking algorithm)\u200a\u2014\u200apublic or private (app operator decides whether to make their algorithms public)attention transactions-\u2014 off-chain, app specific, objective (clicks, impressions, etc), mostly private (visible only to the app operator)Incentive compatibilityEach reputation transaction is recorded on the blockchain forever. At the same time, reputation scoring is evolving along with the applications\u2019 increasing intelligence.Curators can try to game the system for the short term increase in rankings and attention. However, in the long run, such behaviour will be noticed and penalised by the future applications with more evolved ranking algorithms.Curators playing the long game have to optimise for filtering heuristics that are unknown today.All we know is that the future apps will be exponentially more intelligent and that competition for attention will get fiercer (due to exponentially growing supply of information and constant supply of attention).How should the curator behave today not to get filtered out tomorrow?To answer this question, we need to guess what AI-enabled apps representing their users will consider attention-worthy in 10 years time.We can only hypothesise about that today. Our assumption is that all predictable, average, repeatable patterns will get filtered out. In our view, the best strategy for curators is to reveal their best behaviour and avoid engaging in game playing and abuse.This is in stark contrast to how the Internet is organised today, where the entire attention economy is optimised for short-term extraction via clickbait, sensation and scandal.From Organising World\u2019s Information To Allocating World\u2019s Attention.Google\u2019s early mission statement was to \u2018organise the world\u2019s information and make it universally accessible and useful.\u2019In 2016 we can say that Google has succeeded in their mission. But along the way a new problem has emerged. Given that I have all the information in world available to me, what information I should pay attention to? How should I allocate my scarce attention knowing that there\u2019s an opportunity cost of not paying attention to something else.Today the decisions of world\u2019s attention allocation are made by algorithms controlled by a few for-profit companies using closed algorithms to meet their quarterly revenue targets. While most people don\u2019t see the link between the stock market and their social media feeds, in reality, this relationship is extremely strong. Economic incentives influence the proprietary algorithms used for ranking information. That information then shapes the worldview in our minds.We believe that you can\u2019t change this system without changing the underlying economic incentives it operates on.The blockchain technology gives us a tool to experiment with new incentive models for algorithms that allocate our attention. With Userfeeds we build a conceptual framework and a technological platform to experiment with these algorithms.Think Big. Start\u00a0Small.The cryptocurrency community understands how inadequate the existing content ranking algorithms can be when faced with economic incentives introduced by tokens.Reddit brigading, trolling, spam or Twitter fights between prominent figures happen on a daily basis. Every single issue that could be decided in a day, is debated forever.So for our first experiments, we plan to target the existing communities\u200a\u2014\u200astarting with Ethereum. Ethereum already has many token communities so whatever we build immediately applies to all of them. And everything we learn with the Ethereum token, we can then quickly apply to communities operating on other blockchains starting with Bitcoin.First Alpha Prototype\u200a\u2014\u200aElect Twitter Representatives With\u00a0Ether.For the first prototype, we\u2019ll focus on Twitter.Ethereum token holders will be able to elect their Twitter representatives and create a \u2018Twitter feed backed by Ether\u2019. A simple demo of how that might look like is available in the video (please note that the UX will definitely change before the alpha release on testnet\u200a\u2014\u200awe just want to give you a general idea).We\u2019re adding some new features and will be ready for the testnet launch soon. If you are interested in joining the alpha test\u200a\u2014\u200aplease sign up for the alpha test.If you have any feedback or comments\u200a\u2014\u200aplease lets know down in the comment section.Sign Up for the Alpha Test of our Demo Apps at http://userfeeds.ioCredits:We\u2019d like to say thank you to people listed below for their contributions, inspiration and feedback. Each of them contributed in their own way and was substantial to the current shape of Userfeeds. While Kuba is pursuing other projects, Meher and Simon are actively exploring the blockchain \u2018attention economy\u2019 space from their angles\u200a\u2014\u200acheck out their Twitter and Medium for details.Kuba KucharskiMeher RoySimon de la RouviereFurther Reading:Liquid Democracy\u200a\u2014\u200athe Wikipedia entryGoogle PageRank- the original whitepaperMichael Goldhaber\u2019s article on the attention economy.Albert Wenger\u200a\u2014\u200aWorld After Capital-the bookJohn Hagel\u200a\u2014\u200aReturn on Attention and Infomediaries\u200a\u2014\u200athe blog postmy appearance on the Epicenter Bitcoin podcast discussing Attention, Reputation and Money economies.\u2026and my writings on my blog and here on Medium", "responses": "11"}, {"title": "Malicious backdoors in Ethereum\u00a0Proxies", "author_name": "Patricio Palladino", "link": "https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357?source=search_post", "post_date": "Jun 1, 2018", "readtime": "5 min read", "upvotes": "1.4K", "content": "Malicious backdoors in Ethereum\u00a0ProxiesA detailed explanation on how the Proxy pattern for smart contract upgradeability can be exploited.Patricio PalladinoBlockedUnblockFollowFollowingJun 1, 2018We recently audited the initial release of ZeppelinOS and discovered a vulnerability in the Proxy Pattern, which is used to implement virtually all upgradeable smart contracts.This vulnerability lets an attacker conceal malicious code that can be very difficult to spot without a deep understanding of how Solidity and the Proxy Pattern work. This has already been fixed on ZeppelinOS.Solidity function calls\u2019 internalsA simple smart contract written in\u00a0SolidityIf you are a developer building for Ethereum you most likely code and think about your smart contracts in terms of Solidity, but that\u2019s not how the network works with them.From the network\u2019s perspective, a smart contract is an account with a single chunk of code associated to it. If any other account sends a message\u00b9 to the contract, its code will be executed on the EVM.So how is it possible to call different functions if the contract only has one piece of consecutive code?Ethereum defines a standard way of communicating between its components, which is the Application Binary Interface, or ABI for short. You can think of it as a low-level API, specifying not only which features are available in the system, but also how many things that we normally take for granted work. Some of these things are how functions should be called, how to pass them arguments, and how they return values.The Ethereum ABI dictates that the data parameter of your transaction must start with a function selector, which identifies which method you are trying to call. Using the selector your contract\u2019s code jumps to the portion of itself that implements the function you\u2019re trying to call.Function selectors are just the first four bytes of thesha3 hash of the function\u2019s signature. For example, the get\u2019s selector is computed as sha3(\u201cget()\u201d)[0:4], which gives us 0x6d4ce63c. Similarly, set's one is the result of sha3(\u201cset(uint256)\u201d)[0:4].There is only one exception to function selectors and that\u2019s for the fallback function present in every smart contract, which doesn\u2019t have a selector. It has the special behavior of being called when no data parameter is provided, or when the given selector doesn\u2019t match any of the contract\u2019s methods.The Proxy Pattern revisitedMuch has been written about the Proxy Pattern, its different variations and their trade-offs. Regardless of the proxy pattern you choose, its core functionality will be the same: it forwards\u00b2 all messages it receives to the current implementation of the contract.Let\u2019s take a look at how this works.A proxy contract implementationDon\u2019t worry, you don\u2019t need to understand how that scary assembly block works. It forwards the current message to the implementation, sending it the exact same dataparameter it received.Placing the forwarding logic in the fallback function allows us to forward any call into Proxy, supposedly. Turns out, this doesn\u2019t quite always happen.The Proxy also needs its own meta-functionality, as it needs to be upgradeable. So functions like implementation() and proxyOwner() won\u2019t be forwarded, given that they exist and the fallback function isn\u2019t executed.Proxy selector\u00a0clashingBeing a clever Ethereum dev, you may have realized that any function in the Proxy contract whose selector matches with one in the implementation contract will be called directly, completely skipping the implementation code.Because the function selectors use a fixed amount of bytes, there will always be the possibility of a clash. This isn\u2019t an issue for day to day development, given that the Solidity compiler will detect a selector clash within a contract, but this becomes exploitable when selectors are used for cross-contract interaction. Clashes can be abused to create a seemingly well-behaved contract that\u2019s actually concealing a backdoor.Armed with some rust code, we found that clash550254402() has the same selector as proxyOwner(). It took less than 15 minutes to find it in a newish Macbook Pro. A motivated hacker can optimize the process and dedicate much more resources to finding discrete-looking function names.ExploitabilityThe Proxy pattern is the current approach being used across the Ethereum ecosystem to make smart contracts upgradeable, and the selector clashing attack allows any project using it\u200a\u2014\u200aor an attacker who\u2019s obtained access to the upgrading mechanism\u200a\u2014\u200ato deploy code that conceals malicious functionality.For example, most upgradability implementations have some notion of state migrations, which are functions that upgrade the contract\u2019s storage. These are especially useful to disguise a selector clash given that auto-generated strings, like commit numbers, can be acceptable names for those functions, making a selector clash attack easy to disguise.In the context of the security audit we conducted on ZeppelinOS, we found that this could be exploited by anyone and not just the Proxy owner, given that they intend to let any user of the network deploy implementations for other users to use. As another example, a function call that seems to move funds as it should may actually not be called at all, stealing someone\u2019s money.Proposed solutionBefore we found this vulnerability, Francisco Giordano from Zeppelin was already working on Transparent Proxies. It is an improved technique intended to let implementation contracts use the same function names as the Proxy without the possibility of a selector clash. This eliminates the attack.These new proxies work by forwarding any call as long as they don\u2019t come from the Proxy owner. Clashes still exist, but if the caller is anyone other than the Proxy owner, the call is forwarded. This makes the Proxy owner the only account that can fall into a clash, hence users not exposed to concealment.The only drawback is that other users won\u2019t be able to read the Proxy's own state (i.e. owner and implementation) using its ABI. They will need to use web3.eth.getStorageAt() instead. This is a reasonably small price to pay for being certain that upgradable contracts do exactly what their implementation source code shows.Exercise for the\u00a0readerFor those who want to dig deeper in how this vulnerability can be exploited, we put together a small exercise. Your task is to try to steal the ropsten-ETH in this contract, and figure out what\u2019s happening. Keep in mind that it is a Proxy contract, so you should take a look at its implementation too.You can do whatever you want with those contracts, just don\u2019t fully empty its balance so other people can also play.NotesMessages are how accounts communicate with each other. When you send a transaction, you are sending a message to another account. They are usually called internal transactions when the sender is a contract.Messages are not actually forwarded like in a traditional proxy. What\u2019s happening is that we execute the implementation\u2019s code as if it were the proxy\u2019s via a delegatecall.", "responses": "5"}, {"title": "The Python Ethereum ecosystem", "author_name": "Piper Merriam", "link": "https://medium.com/@pipermerriam/the-python-ethereum-ecosystem-101bd9ba4de7?source=search_post", "post_date": "Apr 6, 2017", "readtime": "5 min read", "upvotes": "810", "content": "The Python Ethereum ecosystemPiper MerriamBlockedUnblockFollowFollowingApr 6, 2017Given the recent influx of new users to the Ethereum ecosystem it feels appropriate to give an update on the state of Ethereum tools for Python developers.High Level\u00a0ToolsThe following tools sit at the top of the python stack, exposing high level interfaces and abstractions for application development and interaction with the Ethereum blockchain.Populus: http://populus.readthedocs.io/Populus is a smart contract development framework. It can be used as a command line tool to compile and deploy your contracts as well as a python library for high level scripting and automation. The framework also includes tools that make testing your smart contracts simple and painless.Web3.py: http://web3py.readthedocs.io/Web3.py is a python library inspired by the original Javascript based web3 library. This library exposes a standard and familiar way to interact with the JSON-RPC interface exposed by Ethereum nodes. In addition, it exposes a number of common utilities such as Ethereum currency denomination conversions, a contract class for interacting with smart contracts, and encoding/decoding utilities.Eth-TestRPC: https://github.com/pipermerriam/eth-testrpcThis is the Python implementation of the TestRPC server (not to be confused with the Javascript implementation). This can be run as either a command line tool or programmatically from your code to create a transient Ethereum blockchain that can be used for testing.PyEthApp: https://github.com/ethereum/pyethappPyEthApp sits on top of the PyEthereum library as a full Ethereum node written in python. It has atrophied a bit in the last year due to a lack of active maintenance and development. While I do not believe that this application can be run as a viable full Ethereum node, there is work being done now to fix this.Low Level\u00a0ToolsThese lower level tools attempt to \u201cdo one thing well\u201d. They are likely to prevent you from re-inventing the wheel as you develop your Ethereum applications.Ethereum Utils: https://github.com/pipermerriam/ethereum-utilsThis library is a \u201cswiss-army-knife\u201d for Ethereum projects. It exposes a number of useful utility functions that solve problems you are likely to run into. The functions are all designed to gracefully handle both unicode and bytestrings as well as having consistency in the types each function returns.Ethereum ABI Utils: https://github.com/pipermerriam/ethereum-abi-utilsSometimes the high level interfaces exposed by libraries like web3 are not quite what you need. When you need to dig deeper into transactions and contracts you will likely need to encode and decode the ABI encoded data. This ABI utils library exposes easy to use functions for performing these encoding and decoding operations.Py-Solc: https://github.com/pipermerriam/py-solcThis is a simple wrapper around the solc command line compiler providing a nice to use API for compiling contracts.Py-Geth: https://github.com/pipermerriam/py-gethThis is a simple wrapper around the geth client. It provides some nice abstractions for running nodes as subprocesses within a python script.Base Layer LibrariesPyEthereum: https://github.com/ethereum/pyethereumPyEthereum is the defacto Python implementation of the EVM. It contains useful utilities for testing as well as embedded versions of many of the utilities listed above such as ABI encoding/decoding, contract abstractions, utility functions, and solidity compilation. This library has primarily been authored by Vitalik Buterin who continues to use it as a tool for advancing his research and development of the base protocol.PyRLP: http://pyrlp.readthedocs.io/en/latest/This library implements encoding and decoding for the encoding scheme used by Ethereum for all of it\u2019s different data types. This tool is necessary for both communicating with other Ethereum nodes as well as interacting with most any low-level data store used to store blockchain data. You\u2019ll likely need this if you want to do things like manual signing of transactions.PyDevP2P: http://pyrlp.readthedocs.io/en/latest/This library implements the DevP2P wire protocol that is used by Ethereum nodes.What\u2019s Coming?Now that you have a relatively full picture of the current state of the ecosystem lets talk about what\u2019s in the works.I\u2019ll note that the following efforts are purely my own and are not being pushed forward by any other entity (including the Ethereum Foundation and the Enterprise Ethereum Alliance).1) Extracting PyEthereum\u2019s GoodiesAs mentioned above, the PyEthereum codebase includes a myriad of useful tools. I\u2019m currently in the process of extracting these into their own libraries with clearly defined public APIs and documentation. So far this has produced:py-trie: Implementation of the tree structure used by Ethereum to store the EVM state. https://github.com/pipermerriam/py-triepy-bloom: Implementation of the bloom filter used for log entries produced by the EVM. https://github.com/pipermerriam/ethereum-bloom2) An alternate Python implementation of the\u00a0EVMThe current Python implementation of the EVM has not proved to be a very stable foundation layer for Ethereum applications. As the EVM gains broader adoption we will need an implementation which can serve the ever growing diversity of needs. Things like pluggable consensus and the ability to easily configure the EVM with different opcodes and rules without requiring a change to the core library.Introducing py-evm: https://github.com/pipermerriam/py-evmThis is a greenfield project to write a completely new EVM implementation in Python. It is currently focused heavily on providing the following things.Composability: Rather than having the Homestead, DAO, and Anti-DOS fork rules hard coded, the EVM is instead a composition of the desired functionality. If you wanted to create your own EVM with only the Homestead and Anti-DOS changes but without the DAO rules you can do that without making any changes to the core library. The same goes for implementing new opcodes or alternate opcode logic. This can be done through the publicly exposed API rather than requiring changes to the core library.Testing: Testing is going to be a 1st class feature in this EVM. This functionality will actually be a result of the composability since the test EVM will simply be a slighly modified composition of the primary EVM with a swapped out consensus mechanism that allows for commonly needed testing functionality like fast-forwarding time, mining ahead some number of blocks, or sending transactions from addresses for which you do not hold the private keys.Stability: Once Py-EVM is released it will have a clearly documented public API. Any breaking API changes will undergo a deprecation cycle across multiple releases to ensure users have the appropriate warning to adjust their code.The work on Py-EVM is ongoing. I expect to have early releases available within a small number of months but as with any estimates in the software world, you should take that with a grain of salt.", "responses": "5"}, {"title": "Introducing Mainnet Ethereum Transactions on\u00a0Toshi", "author_name": "Brian Armstrong", "link": "https://blog.toshi.org/introducing-mainnet-ethereum-transactions-on-toshi-528d817ef5ae?source=search_post", "post_date": "Sep 19, 2017", "readtime": "3 min read", "upvotes": "984", "content": "Introducing Mainnet Ethereum Transactions on\u00a0ToshiBrian ArmstrongBlockedUnblockFollowFollowingSep 19, 2017Today, we\u2019re introducing mainnet support for Ethereum transactions on Toshi (e.g. real Ether!).Our developer preview launched about five months ago with testnet Ethereum only so we could start testing the platform. Today we\u2019re ready to open up the platform to a wider audience, and introduce real Ether.Using the new mainnet Toshi\u00a0AppIf you previously installed our developer preview app, you\u2019ll need to download and install the new mainnet Toshi app (it is a new, separate app). Your previous app will not automatically update.Mainnet Toshi is available today on Android and on iOS.You will have up to two weeks after each platform launches to reserve your username if you previously signed up during the developer preview. Simply install the new Mainnet app and sign in again with your same passphrase to claim your existing username. After two weeks, we will wipe out all unclaimed names to make way for new users.To help new users get started, we\u2019re giving out $0.05 worth of mainnet Ether to all users on the app. You just have to ask for it from @ToshiBot and the amount will be transferred to your wallet. When you need more Ether, you can always use an exchange service (such as Coinbase or others being built for the platform) to buy and send it to your Toshi address.Depositing funds to your Toshi\u00a0wallet.How developers can update their\u00a0appsDevelopers can check out the our recent update on how to upgrade bots to mainnet. Further documentation and help is available through the Toshi Developer Documentation, GitHub page and community Slack.What\u2019s NextIntroducing support for real Ether transactions is an important step towards achieving our vision for Toshi.We\u2019ll continue pushing out new updates every two weeks to improve the platform. We have a number of exciting features in the pipeline, such as group chat.In addition, our next major task will be to start building the foundational apps on top of Toshi that will make it useful. These include:A way to exchange Ether into and out of your local currencyA way to earn money on the platform, such as micro-jobs or AdBotA way to spend money, such as topping up cell phone minutes or marketplacesIf you\u2019re a developer who would like to try building an app, it\u2019s easy to get started.We are growing our team that is working on Toshi. Send us a note if our mission of creating universal access to financial services via a mass market interface for digital currency is exciting to you.Finally, install the new Toshi mainnet app here on Android and on iOS. Cheers!", "responses": "3"}, {"title": "Developing Ethereum Dapps with Truffle and\u00a0MetaMask", "author_name": "Dan Finlay", "link": "https://medium.com/metamask/developing-ethereum-dapps-with-truffle-and-metamask-aa8ad7e363ba?source=search_post", "post_date": "Nov 18, 2016", "readtime": "7 min read", "upvotes": "670", "content": "Developing Ethereum Dapps with Truffle and\u00a0MetaMaskDan FinlayBlockedUnblockFollowFollowingNov 18, 2016Feb 4, 2017 Update: A new version of Truffle has been released, Version 3, and is not yet reflected in this tutorial! To get the latest word on that migration process, check out the Truffle 3 migration guide. We will eventually update this tutorial for Truffle 3, but until then, if you just want to get your feet wet, maybe try this tutorial out with Truffle 2.0. npm install -g truffle@2. You might also find Truffle 3 to be easy to start with Webpack using this video tutorial.If you\u2019re interested in building web apps with the Ethereum blockchain, you may have found the Truffle web framework to be a nice fit for your needs.For many types of Dapps (Distributed Apps), Truffle does everything you could want: It compiles your blockchain contracts, injects them into your web app, and can even run a test suite against them!This is all great for you, but what about your users? Truffle has some great defaults for users who are willing to run a local Ethereum JSON RPC server on their computer, but what about your users who just want to sign on and get started?With Metamask, all your users need to do is install our Chrome plugin, and they will have their own secure blockchain accounts right there in the convenience of their browsers.Metamask is just a Developer Preview right now, and has not been released to the general public. We don\u2019t recommend putting serious funds in it, but instead encourage you to use it to help prepare your dapps for Ethereum browsers.It\u2019s possible your Truffle Dapp is already compatible with Metamask, but if you\u2019re like me, you want to go through your project and see what it\u2019s like from your user\u2019s perspective.Just in case you haven\u2019t used Truffle before, I\u2019m going to start by describing how to scaffold a minimal Truffle dapp. If you already have one set up, feel free to jump ahead to Setting up Metamask.Installing Truffle DependenciesYou\u2019re going to need to have installed node.js.From there, you need to install truffle (npm install -g truffle).Also, you\u2019re going to need to run a local blockchain RPC server to test and develop against. I recommend using testrpc, which you install by running npm install -g ethereumjs-testrpc.Next let\u2019s make sure we have our testrpc running in the background. Open your terminal and run the command testrpc. That's all! It runs on port 8545by default, just like most Ethereum RPCs, and so does Truffle.Also note that when testrpc first starts, it prints out a list of accounts that will be pre-funded with ether, along with a twelve-word seed phrase for re-generating those accounts. You can use this seed phrase to initialize your MetaMask client with the same accounts, and you\u2019ll have lots of Ether when you start! (Ether is used to pay for network usage, or gas, on the Ethereum network)If you wanted to start up testrpc with the accounts you already have in MetaMask, you can tell testrpc what seed phrase to use with the -m flag. For example:$ testrpc -m \"concert load couple harbor equip island argue ramp clarify fence smart topic\"Setting up a simple Truffle\u00a0DappNext, let\u2019s generate a basic Truffle dapp. The default result of truffle initis a simple example currency.To get it up and running, run these commands:mkdir my-money # Create a folder for your new dappcd my-money # Move into that foldertruffle init # Initialize a default truffle project in that foldertruffle migrate # Build, compile, & deploy the dapptruffle serve # Host your web interface on port 8080We just deployed a simple alt-coin called MetaCoin to our local blockchain, and it's available to our browser on http://localhost:8080!If you visit it, you\u2019ll see that by default this new Dapp template signs you in with the first account on your testrpc account list, which happens to be the same account that got pre-populated with 10k shiny new Metacoins! That's because when you ran truffle migrate, Truffle used your first account as the contract publisher, and the contract says to fund the creator's account with 10k coins.You can now send those coins to any account you want, for example, the second account in your testrpc list! If you enter an address and a value, and hit send, you'll see your balance go down!If that seems a little too easy, I\u2019d agree with you! That\u2019s why Metamask gives the user an opportunity to approve every transaction that a Dapp attempts, and that\u2019s more secure!Let\u2019s try connecting to the same account through Metamask, and see how easy it is!Setting up\u00a0MetamaskNow you\u2019ll want to install Metamask from the Chrome store.When you first open Metamask, it will let you either create a new wallet or restore from a seed. Since both Metamask and testrpc use the bip44 standard for wallet generation, you can Restore Existing Vault, and enter the mnemonic that testrpc output when you first started it. It should be 12 words long.You\u2019ll also need to provide a password, which is used to encrypt your wallet.By default you get three accounts, and they\u2019ll be the same as the first three accounts in your testrpc list.To use Metamask with your testrpc accounts, you need to point it at yourtestrpc address as its RPC provider, which by default is localhost:8545. MetaMask provides a menu item for quickly switching to this local port.Open MetamaskClick the current network name in the top right.Select your current testrpc address, which is probbly Localhost 8545.Metamask will close at this point to restart itself.You can now sign into your Dapp with Metamask.Open MetamaskEnter your passwordReload the Dapp page (some dapps will notice when you change accounts, but this basic one doesn\u2019t)You should now see your first account\u2019s MetaCoin balance! If you switch accounts, you should see theirs (none, unless you\u2019ve sent to one!).To send some Metacoin to one of your Metamask accounts, you\u2019re going to need that account\u2019s address.To copy a Metamask account\u2019s address:Open MetamaskClick the details arrow next to the account whose address you want.Click the \u201cCopy Address\u201d button.You now you have a copy of your address to send to!Sending Metacoin from Metamask: So\u00a0Meta!If you connect to your first account, you should see you have some MetaCoin, and if we look in our Metamask plugin, we should have some ether too!It\u2019s important that we have ether, because it\u2019s not only a currency for trade, it\u2019s also the currency for processing transactions on the Ethereum blockchain. This processing fee is referred to as \u201cgas\u201d.Let\u2019s try sending some Metacoin from one of our Metamask accounts to another.Select the account that has the Metacoin and Ether, so that the Dapp shows a MetaCoin balance.Now we want to copy the address of another account you control to send to. In MetaMask, click the Switch Accounts icon in the top right.If you only have one account, click the + at the bottom of this screen to add a new account.When you see another account in the list, click the Copy Address button on it, and then you can paste that into the Dapp\u2019s To field, along with how much MetaCoin you'd like to send, and hit Send!You should see a notification pop-up, notifying you that you have a transaction to approve.You can now Approve or Reject the transaction, or close the notification, and review the transaction in MetaMask later.This is one way that Metamask is a safer Ethereum browsing experience than running your own RPC. While a pre-authenticated RPC automatically approves all requests sent to it, Metamask gives the user an opportunity to review and approve or reject each transaction that\u2019s requested by the dapp. Long term, making transactions easy to intelligently review is an important priority for MetaMask.Wrapping UpThis has been a simple example, but hopefully shows how Truffle and Metamask work together. They are able to pretty much work out of the box! That\u2019s because Truffle helps you write web3-compliant dapps. Web3 is a Javascript API declared by the core Ethereum team, and Metamask injects it directly into the Dapp\u2019s context!This makes connecting to a Truffle Dapp with Metamask as easy as connecting with your own RPC, but it\u2019s a lot easier for your users.That\u2019s because Metamask is a hyper-light client that doesn\u2019t replicate the entire blockchain locally, but it does let users manage their own accounts, so they can casually benefit from the security of private key management, while placing trust for block validation on Metamask\u2019s configured RPC provider.We hope this has been a useful introduction to developing with Truffle and Metamask!Please, leave a comment or question, start a discussion on github, or Tweet at us on Twitter. We\u2019re trying to make Metamask the easiest tool to let anyone benefit from using Distributed Apps on the Ethereum Blockchain.", "responses": "8"}, {"title": "Here are the best courses and resources for learning Solidity (Ethereum dApps)", "author_name": "Indrek Lasn", "link": "https://medium.freecodecamp.org/here-are-the-best-courses-and-resources-for-learning-solidity-ethereum-dapps-600e18287381?source=search_post", "post_date": "Jun 4, 2018", "readtime": "4 min read", "upvotes": "1K", "content": "Here are the best courses and resources for learning Solidity (Ethereum dApps)Indrek LasnBlockedUnblockFollowFollowingJun 4, 2018Solidity learning resources are not that well-known. Here\u2019s a useful list for learning solidity and Ethereum development.First of all\u200a\u2014\u200awhat is solidity?\u201cSolidity is a contract-oriented, high-level language for implementing smart contracts. It was influenced by C++, Python and JavaScript. It is designed to target the Ethereum Virtual Machine\u00a0(EVM).\u201dSecondly\u200a\u2014\u200awhat is Ethereum?In a nutshell, Ethereum is a blockchain-based distributed ledger which keeps track of all the states/transactions. A single entity (computer) is called a node. All nodes combined creates the Ethereum network. Think of Ethereum as this \u201csuper-computer\u201d and solidity a way to give instructions to the \u201csuper-computer\u201d.But why is this even a\u00a0thing?Now, that\u2019s an excellent question. Ethereum is an interesting concept. Why?Ethereum allows us to build decentralized apps (dApps). Here are a couple dApp use cases top of my head:No one has the right to censor you nor delete your comments on the free web. Freedom of speech. It\u2019s especially important for modern media platforms. (Transparency)Cryptocurrencies/tokens. You have the full rights to your assets and no one has the privilege of freezing your accounts. Transferring cryptocurrencies only requires the raw computing power to compute the transaction.Check out this introduction if you need more info.So how do you get started building Dapps? Great question. I gathered a list to help you kickstart developing dApps with Solidity and Ethereum.Ethereum and Solidity: The Complete Developer\u2019s GuideYou will learn the following:How to design, test, and deploy secure Smart Contracts.Why engineers would want to create an app with Ethereum.How to use the latest version of Ethereum development tools (Web3 v1.0)Ethereum Smart ContractsThe following things you will learn from this course are:State, Functions, Modifiers and EventsPayable functionsInheritanceContract To Contract CommunicationLibrariesSmart Contracts and Decentralized Apps\u00a0101This course grants eye-opening experience in the following fields:Solidity and Ethereum basics (101).Interact with smart contracts from a UI. (Thanks to web3.js)cryptozombies.io\u201cCryptoZombies is an interactive code school that teaches you to write smart contracts in Solidity through building your own crypto-collectables game.\u201dDiscover Ethereum &\u00a0SolidityFrom the maker of the course:Many people are excited about the promises of Ethereum and are itching to create a new generation of decentralized applications for the web.However, navigating the Ethereum landscape as a developer can be very confusing, since writing apps for the blockchain requires grasping many new concepts. On top of that, most tutorials are out-of-date or use deprecated tools in a rapidly changing ecosystem, making it hard to even know where to start.That\u2019s why I\u2019ve created this course, where beginners can create a complete DApp from start to finish, using common best practices from the Ethereum ecosystem.By the end of the tutorial, you will have all the skills required to design your own smart contracts in Solidity, hooking them up to a modern web interface, and create your very own token sale to help you successfully kickstart future blockchain projects.Learning SolidityWhat you will learn:From basics to state modifiers.Auditing your code and finding security flaws.Truffle, Testrpc, ERC20 tokens.Capture the Ether\u200a\u2014\u200a(game)Ethereum Smart Contract Security Best Practices \u2014Awesome Solidity\u200a\u2014\u200a(Github repository)One of my favorite curated lists consisting of solidity stuff.ethereumdev.ioDapp UniversityDo you know any excellent high quality solidity courses? Post them below and I\u2019ll make sure to add them here!Thanks for making it to the bottom. If you find this useful\u200a\u2014\u200aplease give me some claps so more people can see it. You can find me on Twitter\u200a\u2014\u200a@lasnindrekIndrek Lasn (@lasnindrek) | TwitterThe latest Tweets from Indrek Lasn (@lasnindrek). Coder, writer, blockchain dev, startup guy. Opinions are my own\u2026twitter.comThe secret to being a top developer is building things! Here\u2019s a list of fun apps to build!You can only become a great developer by putting the effort in. Imagine for a moment\u200a\u2014\u200aYou can\u2019t become fit physically\u2026medium.freecodecamp.orgHow to set-up a powerful API with Nodejs, GraphQL, MongoDB, Hapi, and SwaggerSeparating your frontend and backend has many advantages:medium.freecodecamp.org\u2764", "responses": "6"}, {"title": "How to Build a Private Ethereum Blockchain", "author_name": "Michael Wuehler", "link": "https://media.consensys.net/how-to-build-a-private-ethereum-blockchain-fbf3904f337?source=search_post", "post_date": "May 24, 2017", "readtime": "7 min read", "upvotes": "770", "content": "How to Build a Private Ethereum BlockchainMichael WuehlerBlockedUnblockFollowFollowingMay 24, 2017The following instructions walk through the installation of a single node private installation of an Ethereum blockchain using the Go-Ethereum client.Prerequisite:Ubuntu 16.04 Virtual Machine (for example from Azure, a Standard_A1 size should be fine for this tutorial)Basic experience working on Linux command line\u00a0Step 1: Update Ubuntu installation with the latest packagessudo apt-get updatesudo apt-get -y upgradeStep 2: Install golang-go packagewget https://storage.googleapis.com/golang/go1.7.4.linux-amd64.tar.gzsudo tar -xvf go1.7.4.linux-amd64.tar.gzsudo mv go /usr/localexport GOROOT=/usr/local/goexport PATH=$GOPATH/bin:$GOROOT/bin:$PATHStep 3: Build go-ethereum from githubgit clone https://github.com/ethereum/go-ethereum.git ~/go-ethereumcd ~/go-ethereumgit checkout mastermake gethcd ~Step 4: Test geth installationgo-ethereum/build/bin/geth versionExpect a response similar to:GethVersion: 1.6.1-unstableGit Commit: e353f9c0886f0cc13fd01c8b3abf2fa63025c62fArchitecture: amd64Protocol Versions: [63 62]Network Id: 1Go Version: go1.7.5Operating System: linuxGOPATH=GOROOT=/usr/local/goStep 5: Create an account to use as the coinbase for your blockchain node\u00a0An Ethereum account is the public key that stores ether that will be used in your private blockchain to pay for gas fees. Before we start the blockchain, we need to create an account that the mining rewards will be deposited too.go-ethereum/build/bin/geth account newYou will be prompted to set a password for the account, DON\u2019T FORGET YOUR PASSWORD, you will not be able to recover it later and won\u2019t be able to spend the ether you mine or unlock that account. After entering the password twice, you should expect to get a response back like this:Address: {941f1f0b08757457be0b52d83a1e3e566473ed61}This is the public key of the Ethereum account. Ethereum convention is to prefix accounts with 0x so the account is sometimes seen as 0x941f1fobo8757457be0b52d83a1e3e566473ed61.\u00a0\u00a0Step 6: Create JSON File for Genesis Block to Bootstrap Private Blockchain\u00a0Using a text editor, create a file CustomGenesis.json with the following contents:{    \"config\": {        \"chainId\": 13,        \"homesteadBlock\": 0,        \"eip155Block\": 0,        \"eip158Block\": 0    },    \"difficulty\": \"200000000\",    \"gasLimit\": \"2100000\",    \"alloc\": {        \"941f1f0b08757457be0b52d83a1e3e566473ed61\": { \"balance\": \"100000000\" }    }}Step 7: Initialize the blockchain from your CustomGenesis.json filego-ethereum/build/bin/geth init ./CustomGenesis.jsonYou should expect to see output similar to this:INFO[02\u201323|20:20:03] Allotted 128MB cache and 1024 file handles to /home/ubuntu/.ethereum/geth/chaindata INFO[02\u201323|20:20:04] closed db:/home/ubuntu/.ethereum/geth/chaindata INFO[02\u201323|20:20:04] Allotted 128MB cache and 1024 file handles to /home/ubuntu/.ethereum/geth/chaindata INFO[02\u201323|20:20:04] successfully wrote genesis block and/or chain rule set: 5dd3be94dcbf5216aaa3e82700fb51a831257df5d45d984941a0a32ee0f960d8Congratulations! You have initialized a private Ethereum blockchain!!Before we move on, let\u2019s take a break for some optional exploration of the files we have generated. In your home directory you will now see a hidden directory called\u00a0.ethereum.\u00a0You will see two folders there, geth and keystore.\u00a0keystore contains the text files containing the Ethereum accounts you have available to the client. There should be just one files there corresponding to the account we created in Step 7. The file is a JSON-formatted ascii text and looks similar to this:{\u201caddress\u201d:\u201d941f1f0b08757457be0b52d83a1e3e566473ed61\",\u201dcrypto\u201d:{\u201ccipher\u201d:\u201daes-128-ctr\u201d,\u201dciphertext\u201d:\u201d16ad7e9df7036894a470520ed1d8aa241cbc1900c342f212 21acc62d548f0de0\",\u201dcipherparams\u201d:{\u201civ\u201d:\u201d220c432b1cd2925576902a3c9afe026b\u201d},\u201dkdf\u201d:\u201dscrypt\u201d,\u201dkdfparams\u201d:{\u201cdklen\u201d:32,\u201dn\u201d:262144,\u201dp\u201d:1,\u201dr\u201d:8,\u201dsalt\u201d:\u201d1cb8 e838e53980639df458b43c6bca4a5312abc27062e989a8d87d584efd0b3b\u201d},\u201dmac\u201d:\u201d598533d190ad4350e3b12cecc9220b77b7e1797b305294421503bbac5c5ec4d3\"},\u201did\u201d:\u201d53ceeb66-a6df-4064-bf8d-5689bd9ee98b\u201d,\u201dversion\u201d:3}You\u2019ll notice the public key is there in plaintext \u201caddress\u201d:\u201d941f1f0b08757457be0b52d83a1e3e566473ed61\", the private key is encrypted in the file using the password you provided when creating the account.\u00a0geth contains one folder called chaindata. The chaindata folder contains the leveldb database files representing the blockchain genesis and subsequent blocks as they are mined and added to the blockchain. This folder will grow in size over time and if deleted or lost, the entire blockchain is gone and will need to be re-initialized.\u00a0If you want to back up your blockchain or move it to a new server, just copy the entire\u00a0.ethereum folder and restore it to the home directory of the new server.\u00a0OK, let\u2019s get back to our blockchain.\u00a0Step 8: Start up the blockchain!go-ethereum/build/bin/geth \\ --mine \\ --nodiscover \\ --maxpeers 0 \\ --networkid 13 \\ --rpc \\ --rpccorsdomain \"*\"Start geth with the following command line arguments--mine Enable mining--nodiscover Disables the peer discovery mechanism (manual peer addition)--maxpeers value Maximum number of network peers (network disabled if set to 0) (default: 25)--networkid value Network identifier (integer, 1=Frontier, 2=Morden (disused), 3=Ropsten) (default: 1)--rpc Enable the HTTP-RPC server--rpccorsdomain value Comma separated list of domains from which to accept cross origin requests (browser enforced)You need to instruct your node to mine so that blocks are being created and so that when you begin to send transactions to the chain they will be processed and included in blocks. The nodiscover and maxpeers arguments are simply for security so that your chain implementation doesn\u2019t attempt to discover any peers nor accept any peer requests. We set the value of the networkid argument to a random integer that isn\u2019t 1, 2, 3 or 4 as those are reserved as identifiers for the public Ethereum networks. Finally, we enable rpc so your chain responds to the remote JSON-RPC API calls as is documented here: https://github.com/ethereum/wiki/wiki/JSON-RPC.\u00a0When your chain starts for the first time it will generate a DAG. For more details on what this means, visit https://github.com/ethereum/wiki/wiki/Ethash-DAG. This will only happen the first time you start your chain. The output will look similar to this:INFO[02\u201323|21:57:54] Allotted 128MB cache and 1024 file handles to /home/ubuntu/.ethereum/geth/chaindata INFO[02\u201323|21:57:54] closed db:/home/ubuntu/.ethereum/geth/chaindata INFO[02\u201323|21:57:54] instance:Geth/v1.6.0-unstable-11539030/linux/go1.6.2 INFO[02\u201323|21:57:54] Allotted 128MB cache and 1024 file handles to /home/ubuntu/.ethereum/geth/chaindata INFO[02\u201323|21:57:54] Protocol Versions: [63 62], Network Id: 1999 INFO[02\u201323|21:57:54] Chain config:{ChainID: 0 Homestead: <nil> DAO: <nil> DAOSupport: false EIP150: <nil> EIP155: <nil> EIP158: <nil>} INFO[02\u201323|21:57:54] Last header: #227 [073961f2\u2026] TD=31476282 INFO[02\u201323|21:57:54] Last block: #227 [073961f2\u2026] TD=31476282 INFO[02\u201323|21:57:54] Fast block: #227 [073961f2\u2026] TD=31476282 INFO[02\u201323|21:57:54] Starting Server INFO[02\u201323|21:57:54] HTTP endpoint opened: http://localhost:8545 INFO[02\u201323|21:57:54] Listening on[::]:30303 INFO[02\u201323|21:57:54] Automatic pregeneration of ethash DAG ON (ethash dir: /home/ubuntu/.ethash) INFO[02\u201323|21:57:54] IPC endpoint opened: /home/ubuntu/.ethereum/geth.ipc INFO[02\u201323|21:57:54] Starting mining operation (CPU=1 TOT=2)INFO[02\u201323|21:10:11] commit new work on block 1 with 0 txs & 0 uncles. Took 109.907\u00b5s INFO[02\u201323|21:10:11] Generating DAG for epoch 0 (size 1073739904) (0000000000000000000000000000000000000000000000000000000000000000) INFO[02\u201323|21:10:11] Listening on[::]:30303 INFO[02\u201323|21:10:11] Automatic pregeneration of ethash DAG ON (ethash dir: /home/ubuntu/.ethash) INFO[02\u201323|21:10:11] IPC endpoint opened: /home/ubuntu/.ethereum/geth.ipc INFO[02\u201323|21:10:11] checking DAG (ethash dir: /home/ubuntu/.ethash) INFO[02\u201323|21:10:12] Generating DAG: 0%You will also notice that mining starts and your node will begin generating blocks:INFO[02\u201323|21:14:08] \ud83d\udd28 mined potential block #1 [0ee888f0\u2026], waiting for 5 blocks to confirm INFO[02\u201323|21:14:08] commit new work on block 2 with 0 txs & 0 uncles. Took 191.409\u00b5s INFO[02\u201323|21:14:10] \ud83d\udd28 mined potential block #2 [2179ec7e\u2026], waiting for 5 blocks to confirm INFO[02\u201323|21:14:10] commit new work on block 3 with 0 txs & 0 uncles. Took 161.908\u00b5s INFO[02\u201323|21:14:10] \ud83d\udd28 mined potential block #3 [08cb41c7\u2026], waiting for 5 blocks to confirm INFO[02\u201323|21:14:10] commit new work on block 4 with 0 txs & 0 uncles. Took 216.711\u00b5s INFO[02\u201323|21:14:11] \ud83d\udd28 mined potential block #4 [d7a60ebd\u2026], waiting for 5 blocks to confirm INFO[02\u201323|21:14:11] commit new work on block 5 with 0 txs & 0 uncles. Took 781.739\u00b5s INFO[02\u201323|21:14:18] \ud83d\udd28 mined potential block #5 [eb021a9c\u2026], waiting for 5 blocks to confirm INFO[02\u201323|21:14:18] commit new work on block 6 with 0 txs & 0 uncles. Took 163.508\u00b5s INFO[02\u201323|21:14:26] \ud83d\udd17 mined block #1 [0ee888f0\u2026] reached canonical chain INFO[02\u201323|21:14:26] \ud83d\udd28 mined potential block #6 [e901a53c\u2026], waiting for 5 blocks to confirmThat\u2019s it! Your blockchain is now running, processing blocks and listening to remote RPC calls so that you and your code can interact with it. In fact let\u2019s try a few tests using the JSON-RPC API documented here: https://github.com/ethereum/wiki/wiki/JSON-RPC. All of the methods documented here can be executed against your running blockchain. Leave your chain running and open a second window with a shell to your VM.\u00a0Now, execute this command from the command line:curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":67}' http://localhost:8545You should receive a response like this:{\"jsonrpc\":\"2.0\",\"id\":67,\"result\":\"Geth/v1.6.0-unstable-11539030/linux/go1.6.2\"}Now check the balance in ether of the Ethereum account that your blockchain is mining to:curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"0x941f1f0b08757457be0b52d83a1e3e566473ed61\", \"latest\"],\"id\":1}' http://localhost:8545You should receive a response like this:{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x3ee23bde0e7d200000\"}The result is returned in hexadecimal, which when converted to decimal is: 1160000000000000000000. As noted in the documentation for the eth_getBalance method, the value returned is in wei, which is the smallest denomination of ether. Using a converter like this one, you can convert that value in wei to ether to see you have 1160 ether in your account. If only it were real ether! This ether only has value on this private network.\u00a0\u00a0From here you can start to experiment more with the methods in the API documentation and you will start to see how easy it is to interact with your running blockchain.Adding Additional NodesNow you have your single node private blockchain. To add a second node, follow the steps above to build your second node.\u00a0Next we will make some minor modifications to the start script to enable the nodes to communicate with each other.\u00a0First, we need to update the start script to allow maxpeers 1go-ethereum/build/bin/geth \\ \u2014 mine \\ \u2014 nodiscover \\ \u2014 maxpeers 1 \\ \u2014 networkid 13 \\ \u2014 rpc \\ \u2014 rpccorsdomain \"*\"Next, since we are still using the --nodiscover option, we need to explicitly instruct each node to peer with the other at startup.\u00a0Each node has it\u2019s unique identifier, called an enode. The enode will be visible in the logs at startup, you will see something similar to this in the logs:\u00a0enode://98267578205c68fc09e917e67606d8cd6fefd3be84a17c26a9840af003fc8659bfdaf77128f22216aeeeee8d3ddd3470297d9a8b8c9581d31560f1a2b0964334@[::]:30303\u00a0We will leverage the command line option to hardcode the enode for node A to node B and vice versa.\u00a0\u00a0--bootnodes value Comma separated enode URLs for P2P discovery bootstrap\u00a0The only change we need to make in the above enode is to fill in the IP address of the node where it can be accessed on port 30303, which is the default port for P2P networking. Our start script becomes something similar to the following, where the \u201cenode\u201d is replaced with the corresponding correct value.go-ethereum/build/bin/geth \\ \u2014 mine \\ \u2014 nodiscover \\ \u2014 maxpeers 1 \\ \u2014 networkid 13 \\ \u2014 rpc \\ \u2014 rpccorsdomain \"*\" \\ \u2014 bootnodes 98267578205c68fc09e917e67606d8cd6fefd3be84a17c26a9840af003fc8659bfdaf77128f22216aeeeee8d3ddd3470297d9a8b8c9581d31560f1a2b0964334@[IP ADDRESS OF OTHER NODE]:30303After starting each instance, you will be able to check that they are peering using the JSON-RPC method call.That\u2019s it, from here you can continue to play with your new chain and experiment with the JSON-RPC API and other start flags.", "responses": "9"}, {"title": "Ethereum in Emerging Economies", "author_name": "Austin Thomas Griffith", "link": "https://medium.com/gitcoin/ethereum-in-emerging-economies-b235f8dac2f2?source=search_post", "post_date": "Nov 9, 2018", "readtime": "4 min read", "upvotes": "2.5K", "content": "Ethereum in Emerging EconomiesMass adoption will start where decentralization is necessaryAustin Thomas GriffithBlockedUnblockFollowFollowingNov 9, 2018Photo by Ahmed Carter on\u00a0UnsplashBlockchains are useless in a perfect world. Let\u2019s bring dApps to the places that need them\u00a0most.", "responses": "4"}, {"title": "How to track performance when investing in Bitcoin, Ethereum, and other cryptoassets with Google Sheet for free\u00a0(1/2)", "author_name": "Ha Duong", "link": "https://blog.minhhaduong.com/how-to-track-performance-when-investing-in-bitcoin-ethereum-and-other-cryptoassets-with-google-18fe7f7afe2f?source=search_post", "post_date": "Dec 7, 2017", "readtime": "5 min read", "upvotes": "750", "content": "How to track performance when investing in Bitcoin, Ethereum, and other cryptoassets with Google Sheet for free\u00a0(1/2)Ha DuongBlockedUnblockFollowFollowingDec 7, 2017[Update 02/02/2018]: Please find the 2nd part of this post here.By now, I\u2019m quite sure that the interest in the crypto space has spread to your friends and even your parents. The crazy uptake in Bitcoin, Ethereum, and other cryptoasset prices has driven a major inflow of attention from tech and mainstream media. Since December last year, the value appreciation increases have been astronomical: Bitcoin rose by 1654%, Ethereum rose by 4635%, and Litecoin rose by 2346%. (Coinbase, 12/07/2017, 10:30pm CET)If you\u2019re among many who have brought up this topic during your Thanksgiving dinner, you might wonder how to get started with investing in cryptoassets like Bitcoin and Ethereum. For the theory, I can highly recommend the book \u201cCryptoassets\u201d by cburniske and Jake Tatar who do a great job in explaning the core concepts in the crypto world and sharing their experience with investing in this space. In practice, you will need to open an account with one of the wallets or exchanges online. Coinbase is probably one of the most well known beginner-friendly providers that can get you started with your first $10-$1000 investments in Bitcoin, Ethereum, or Litecoin. If you don\u2019t have an account yet and want to open one, use this referral link so we both get $10\u00a0:)Once you are deeper into this, I\u2019d recommend everyone to store your own private key and get independent from centralized providers like Coinbase, though (for security, privacy, and many more reasons). Since this article targets beginners, I won\u2019t go into detail here and will stick to Coinbase for an easy start.I got approached by my friend Diego early last week who found incredibly painful that there is no easy and elegant way to track your investment performance on Coinbase (see Whatsapp message from Monday). Coinbase is not very helpful with bringing ROI visibility.Usually, exchanges give you insights into your gains and losses of your portfolio. Investors and traders alike want to see how they do in comparison to the market. Even for long-term investors with lower transaction frequency, tracking your portfolio performance is difficult and there are not many free simple tools out there for beginners to start. The Blockfolio app is a good resource for tracking and there are more and more alternatives popping up on ProductHunt each week. However, they have limited functionality and are not very useful. I\u2019d prefer being able to track, analyze, and interact with the data, and do so on a computer screen instead of a smartphone screen. Also, I\u2019d like not to give my data to any (centralized) 3rd party players if it can be avoided.I have built my own simple solution for that as an alternative which I\u2019d like to share with you. It automatically pulls current prices via the Coinmarketcap API and also exchange rates among cryptoasset pairs via the Cryptocompare API. It shows you the 1h, 24h, and 7 day change in prices and displays your current portfolio allocation among the assets you invested in (similiar to what some wallets such as Exodus do) so you can balance your portfolio with regular frequencies e.g. every 6 months to achieve your desired allocation.-> You can find my Crypto Investment Performance Tracking Sheet here.That is an advanced version in case you want to invest in more cryptoassets (beyond Coinbase). You can find a simpler version here that only covers BTC, ETH, and LTC.Step by step instructions:Go on my link to access the Google Sheet. Click on file > make a copy to create your own sheet that you can edit.You might need to enable your Google Sheet to run a) the cryptofinance() function and b) the importjson() functions. See instructions for a) here and for b) here.You don\u2019t need to change anything on the sheet \u201cCrypto Portfolio\u201d besides the names of the cryptoassets you want to track (needs to be the same as in the sheet \u201cCrypto Trades\u201d). Enter your recent investments, trades, or crypto-to-crypto exchanges in the sheet \u201cCrypto Trades\u201d like in the examples given.Add a new row per deposit (transfering money to the wallet or exchange) by entering the data in columns G& H. The grey fields are formulas while the white fields are for your inputs.For each transaction, add a new row. Only enter the volumes for the 2 currencies (fiat or crypto) that were affected by the transaction (columns I-P). The exchange rates (columns C & D) will automatically be calculated.You can find your token balance on row 2 in this sheet and also on the \u201cCrypto Portfolio\u201d sheet.The values and charts on the \u201cCrypto Portfolio\u201d sheet should automatically update once you refresh (Ctrl + F5).", "responses": "10"}, {"title": "Ethereum founder Vitalik Buterin says his creation can\u2019t succeed unless he takes a step\u00a0back", "author_name": "Aziz Bellak", "link": "https://medium.com/@azizbellak/ethereum-founder-vitalik-buterin-says-his-creation-cant-succeed-unless-he-takes-a-step-back-b47188f40c5a?source=search_post", "post_date": "Nov 2, 2018", "readtime": "3 min read", "upvotes": "225", "content": "Ethereum founder Vitalik Buterin says his creation can\u2019t succeed unless he takes a step\u00a0backAziz BellakBlockedUnblockFollowFollowingNov 2, 2018At Ethereum\u2019s annual developer conference, its founder tells us why his technology can only be truly decentralized if it stops depending on\u00a0him.by Mike OrcuttNovember 1, 2018When you ask him about the challenges facing the blockchain system he founded five years ago, Vitalik Buterin often launches into a rapid-fire lecture full of Ethereum-specific jargon. But ask him about his own role in the technology\u2019s future, and he quickly becomes more circumspect.Recommended for YouShould a self-driving car kill the baby or the grandma? Depends on where you\u2019re from.Google employees are staging global walkouts over the firm\u2019s treatment of womenA powerful new battery could give us electric planes that don\u2019t polluteIBM\u2019s $34 billion purchase of Red Hat is a mega-bet on a coding revolutionFinally, the drug that keeps you youngThere\u2019s no doubt that Buterin, 24, is still the guiding light for the idealistic community that has sprung up around his creation. That\u2019s been front and center this week in Prague, where thousands of developers, investors, and entrepreneurs have gathered for Devcon, the annual \u201cfamily reunion\u201d organized by the nonprofit Ethereum Foundation.The most popular discussion topic is Buterin\u2019s vision for \u201cEthereum 2.0,\u201d a future iteration meant to be capable of operating efficiently at a much larger scale\u200a\u2014\u200aand appeal to a much broader user base\u200a\u2014\u200athan it can today. But in a conversation with MIT Technology Review on the sidelines of Devcon, Buterin said it\u2019s time for him to start fading into the background as \u201ca necessary part of the growth of the community.\u201dThis piece first appeared in our twice-weekly newsletter, Chain Letter, which covers the world of blockchains and crypto-assets. Sign up here\u200a\u2014\u200ait\u2019s free!Why? Put simply, a truly decentralized system has no single component whose failure could bring down the whole system, and that\u2019s arguably what Buterin\u2019s historically outsize influence over decision-making represents. But that\u2019s changing, he said, partly because of the community\u2019s natural growth but also thanks to a deliberate attempt to reduce his prominence. \u201cI think people are kind of really feeling that,\u201d he said, citing Twitter chatter he\u2019d seen after Devcon\u2019s first day. \u201cThere was even one comment that explicitly said that like, wow, it seems like the community is actually working together and isn\u2019t just relying on a few people being in charge.\u201dIndeed, Buterin is already \u201cout of the decision-making in a lot of ways,\u201d said Hudson Jameson of the Ethereum Foundation, a nonprofit that supports the development of the Ethereum protocol, during a discussion at Devcon focused on how the community can get better at making decisions collectively. \u201cThat\u2019s something that I think is really really important for the ecosystem to thrive and become more decentralized.\u201dThe transition comes at a critical juncture for Ethereum, whose developers are struggling to overcome a number of complicated technical obstacles they believe to be standing in the way of its more widespread adoption. Topping the to-do list is an ambitious plan to transition away from proof of work\u200a\u2014\u200athe energy-intensive process that Ethereum, Bitcoin, and other similar blockchain systems use to achieve agreement among network participants that the information they stored in their blockchains is valid. For years, Buterin has spearheaded a research project aimed at developing an energy-efficient alternative to proof of work, based on a different algorithm called proof of stake.He\u2019s also played a leading role in conceiving of new methods called sharding and plasma, which would let the network handle much larger transaction volumes by letting users execute certain transactions without having to write every single one to the blockchain. (Ethereum can process only about 15 transactions per second, whereas Visa handles an average of 2,000 transactions per second and has the capacity to handle tens of thousands.)All these improvements are meant to be featured in Ethereum 2.0, the specifications for which Buterin has been instrumental in writing and finalizing. Nonetheless, he says, his involvement in the project has amounted to \u201ca significantly smaller share of the work than I had two or three years ago,\u201d adding that downsizing his influence is \u201csomething we are definitely making a lot of progress on.\u201d", "responses": ""}, {"title": "Just Enough Bitcoin for\u00a0Ethereum", "author_name": "ConsenSys", "link": "https://media.consensys.net/time-sure-does-fly-ed4518792679?source=search_post", "post_date": "Oct 12, 2015", "readtime": "6 min read", "upvotes": "636", "content": "Just Enough Bitcoin for\u00a0EthereumUnderstand Ethereum under the hood so you can start building on\u00a0Web3.ConsenSysBlockedUnblockFollowFollowingOct 12, 2015By Mike GoldinThis is Part I of a two part series and focuses on understanding Bitcoin. Part II, \u201cEthereum: Bitcoin Plus Everything\u201d focuses on the ways in which Ethereum extends Bitcoin\u2019s blockchain technology.Time sure does fly. A new generation of programmers are already leapfrogging over Bitcoin and directly into Ethereum. These programmers may never have taken much interest in cryptocurrencies, but they\u2019re drawn to Ethereum by its provisioning for trustless transactions of arbitrary (Turing-complete) complexity. While I can\u2019t blame them for wanting to jump right into Ethereum, Ethereum derives a huge share of its underlying technology directly from Bitcoin. This series of articles will describe just enough of Bitcoin for budding Ethereum developers to better understand how Ethereum works under the hood, then begin to explore some routes by which new Ethereum devs can begin developing contract-orientation just like they developed their sense of object-orientation back in the day.Blockchain ExplainedA blockchain is fundamentally a public record of state changes. Anybody can audit a blockchain\u2019s state changes over time and prove for themselves with mathematical certainty whether those transactions were made in accordance with the blockchain\u2019s rules. In the case of Bitcoin, those rules are simple: Bitcoins can\u2019t be double-spent, and their origin must be traceable back to the mining of a valid block (more on mining later). To begin our journey, I recommend reading the Bitcoin white paper even if you know nothing about cryptography. We\u2019ll loop back to the cryptographic underpinnings afterwards. The Bitcoin white paper is short, and only the first six sections are of real interest to us.Cryptographic Underpinnings of Blockchain TransactionsAs somebody with absolutely no background in cryptography, I found myself confused beginning with the white paper\u2019s description of transactions. We should understand that this is a scheme designed to prove ownership over an asset at a given time by tracing that asset\u2019s history of owners up to the present. But what\u2019s a public key? Hashing? How do these help us to prove ownership of an asset? If you\u2019ve never taken a cryptography class, watch the videos from Khan Academy below for a good high-level description of these important functions.Hashing Functions (Khan Academy)Digital Signatures (Khan Academy)Satoshi Nakamoto, \u201cBitcoin: A Peer-to-Peer Electronic Cash\u00a0System\u201dNow let\u2019s look back at the white paper\u2019s transaction diagram. Here we are hashing both Owner 2\u2019s public key and the previous transaction (in which the Bitcoin entered Owner 1\u2019s possession) into a single digest (the output of the hashing function). This digest is then signed with Owner 1\u2019s private key. In the future, anyone can verify Owner 2\u2019s claim on that Bitcoin by inputting the state change she/he insists occurred to a signature verification algorithm: a sum of Bitcoin and Owner 2\u2019s public key (signifying a transfer of that sum to Owner 2), Owner 1\u2019s public key (signifying that this transfer of Bitcoin originated from Owner 1), and the transaction\u2019s signed form (a digest available publicly on the blockchain, recorded there when the transaction took place). Only if the exact state change Owner 2 specifies was indeed signed with Owner 1\u2019s private key will Owner 1\u2019s public key assert the signed transaction digest\u2019s validity relative to the signed transaction on-chain. This process can be repeated recursively going back to the Bitcoin\u2019s origin to prove the complete ownership chain is valid.You probably have a lot of questions at this point and are already considering edge cases\u200a\u2014\u200ahow does the ownership chain begin? How are specific sums of Bitcoin specified for transfer? Amazingly, there\u2019s not much more of Bitcoin you need to understand for Ethereum\u2019s sake. Next we\u2019ll cover sections three through six of the whitepaper and figure out how some of those edge cases are resolved.The Role of Mining in Creating Network Consensus on the BlockchainAll bitcoin transactions are broadcast to the entire network, and these transactions are collected by miners who verify those transaction\u2019s validity (essentially using the method described previously) and include all valid transactions into a \u201cblock.\u201d The contents of the block are then hashed with an incrementing random number (called a \u201cnonce\u201d) until the resulting output contains a certain number of leading zeroes. The network dynamically adjusts the requisite number of leading zeroes (or the \u201cdifficulty\u201d) so that a block is mined every 10 minutes on average.Because the results of hashing algorithms are unpredictable, finding a valid hash which the rest of the network will accept requires both luck and CPU power. The more computational power one possesses, the greater their chances of finding a valid hash before anyone else in the network. When a valid block is \u201cmined,\u201d it is broadcast to and tested by the rest of the network. The other nodes test whether the included state transitions make sense given the most-recent canonical block, that all the transaction signatures pass for valid and that the block and the provided nonce hash to a valid digest before accepting the block as the newest canonical network state. The block is then added to the head of the existing \u201cchain\u201d of previously mined blocks in each node\u2019s local database.How does the ownership chain begin? The Bitcoin protocol specifies that every block is allowed to include a transaction of 25 BTC to the block miner, in which those 25 BTC are created out of thin air. This incentivizes miners to support the network. A Bitcoin can be verified as non-counterfeit if its ownership chain can be traced back to one of these special transactions. Indeed, this is the only way that new Bitcoin can be\u00a0created.Bitcoin is safe so long as at least 51% of the computational power for all the nodes connected to the network is controlled by honest, non-colluding users. A malicious user controlling 51% of the network who pays for his coffee with Bitcoin could drink his brew and then mine a block (starting at the state just before his transaction) which fraudulently omitted his coffee purchase. Even if the network had gotten a few blocks ahead of him by the time he started mining his fraudulent chain, with 51% of the network\u2019s horsepower he would inevitably catch up. Because the Bitcoin protocol requires that the longest chain be accepted as canonical, the malicious user would get away with his theft even if there existed abandoned subtrees of the blockchain suggesting his deceit.Extra Credit: UTXO in Bitcoin In Bitcoin, one\u2019s holdings do not comprise a pool of infinitely divisible currency units from which to withdraw and deposit. Instead, Bitcoin users deal in \u201cunspent transaction outputs\u201d (UTXO). If a miner wants to spend some of their freshly-minted 25 BTC on a 1 BTC coffee, they have to specify the entire 25 BTC (a UTXO) as the transaction\u2019s input, and specify two outputs for the transaction: one output which sends one BTC to the vendor\u2019s address, and a second output specifying 24 BTC be sent back to the purchaser\u2019s address as \u201cchange\u201d. To buy another coffee, that 24 BTC comprises a single UTXO. UTXOs which are combined in a transaction input to exchange for more expensive items are received by the vendor as a new, single UTXO. Ethereum does not use UTXO\u200a\u2014\u200ait\u2019s account balances are divisible.You now have all the knowledge you need to understand the fundamentals of how the Bitcoin blockchain works. It\u2019s head-spinning stuff! Don\u2019t feel bad if you don\u2019t totally get it yet: try sleeping on it for a few days and it\u2019ll start coming together in your dreams. Once it does, you might be able to begin imagining how something a lot like the Bitcoin blockchain could be used to verify the public outputs of arbitrarily complex computations when the inputs and program code are publicly shared as well. In fact, that\u2019s what we\u2019ll explore in Part II of this series, \u201cEthereum: Bitcoin Plus Everything.\u201dDesigned by Eva Shon, with icons from thenounproject.com.", "responses": "4"}, {"title": "The Insanity and Brilliance at Ethereum\u2019s Developer Conference", "author_name": "Jordan Leigh", "link": "https://medium.com/@alwaysbcoding/the-insanity-and-brilliance-at-ethereums-developer-conference-baa89880d1ce?source=search_post", "post_date": "Sep 23, 2016", "readtime": "13 min read", "upvotes": "353", "content": "The Insanity and Brilliance at Ethereum\u2019s Developer ConferenceJordan LeighBlockedUnblockFollowFollowingSep 23, 2016It\u2019s 4am and I\u2019m sitting in a hotel room in Shanghai, China. The second ever Ethereum developers conference is set to kick off in a few hours. The time-zone shift woke me up early, and I\u2019m sitting in my bed playing with my newly modded phone. The Chinese government censors most large American mobile apps behind something colloquially referred to as \u201cThe Great Firewall\u201d so you need to use all of these shoddily made, Chinese government approved, replacement apps instead. The preferred app for messaging is an app called WeChat, a bizarre Slack / Venmo / Tinder hybrid that 800 million people use to communicate every day. We have a group chatroom for the conference going, which I\u2019m scrolling through when my phone buzzes. Someone posted a new message. \u201cThe Ethereum network is under attack\u201d.Ethereum is this insane thing going on in the tech world right now. It\u2019s a new cryptocurrency that is picking up the pieces of the fractured Bitcoin ecosystem and trying to succeed in accomplishing what Bitcoin has failed to do, deliver the first batch of successful consumer applications built on top of blockchain technology. You can think of Bitcoin a bit like a shared google doc spreadsheet that anyone in the world can send data to, one global ledger of accounts and balances. Ethereum builds on this idea by providing a mechanism for users to add custom formulas into the cells. Anyone who has done any kind of Microsoft Excel programming knows how powerful spreadsheets can become with just a few simple formulas. Ethereum is the first working implementation of programmable money, a simple concept that may one day bring the entire global financial system to it\u2019s knees. And it draws brilliant people from all walks of life into its orbit.The 4AM attack on the network is bizarre in that it\u2019s not really a malicious hack, but more like comical mischief. Ethereum runs as a distributed system. At any given time, there will be thousands of separate computers (also called nodes) running the Ethereum protocol and keeping the network online. The actual software that the computers use to run the Ethereum protocol comes in many different flavors, the most popular one is an application called Geth, written in Google\u2019s Go programming language. 85% of all Ethereum nodes are running Geth at the time. The attack pushes a piece of data onto the blockchain that exploits a bug in the Geth software causing the program to crash. Because every live node syncs the latest version of the blockchain in real-time, just like that 85% of the Ethereum network goes offline. Some developers are able to respond by switching over to the Parity Ethereum client, a new client written in the high-performant Rust Language that is currently gaining market share, but for others switching over to Parity is too risky without having time to run extensive testing. The Ethereum network is essentially frozen until an update can be pushed to Geth.The main developers of Geth are asleep in Shanghai. They might not even have their laptops with them, as it\u2019s risky to take your work computer into mainland China if it contains any sensitive information. They\u2019re also scheduled to go on stage and give a presentation in a couple hours. When they wake up, do they fix the bug and miss their talk or go onto the stage? Like I said, comical mischief. People slowly start to wake up and news of the attack starts spreading. In a back room somewhere developers start pounding on their laptops. In a matter of hours, the bug is identified, an update is shipped, the nodes download the latest version of the software and go back online. Crisis averted. The net result of the attack? The conference start time gets pushed back half an hour. The Geth developers come out on stage to a raucous applause. Just another day in the cryptocurrency world.Ethereum has a certain resiliency to it. It reminds me a bit of being in Israel. When you live under the constant threat of attack, you develop a desensitization and rationality around the notion of outside threats, so you respond to them with logic instead of emotion. The term \u2018anti-fragile\u2019 (meaning something that becomes stronger every time it is put under attack) has been a buzzword in Silicon Valley lately, but Ethereum has thus far personified it. Nobody is overly phased by the 4am attack. It\u2019s doubtful that such a large portion of the network will run the same client software at the same time in the future. This attack vector won\u2019t work again.DevCon is the single best tech conference that I\u2019ve ever been to. It\u2019s a firehose of technical information and ambitious product demos blasted at you non-stop over the course of three days. There\u2019s an energy and an optimism that I\u2019ve never felt before, and an underlying belief amongst the community that Ethereum has finally gotten it right and we\u2019re t-minus one year away from cryptocurrency truly exploding into mainstream consciousness.While other technical communities are bickering about who can find a more esoteric reason to censor a conference speaker, Ethereum is moving along with a laser focus on solving real problems, like how to scale the blockchain to thousands of transactions per second, how to make developer tooling more approachable, and how to keep the network running despite the constant barrage of hacks and DDoS attacks being levied against it. At DevCon you\u2019re just as likely to find a web developer, a systems engineer, an academic, or an MBA. A transexual, an avid Trump supporter, a Chinese entrepreneur, a New York City venture capitalist, or a techie in a hoodie who has 5 million dollars worth of Ether. It\u2019s a safe space for eccentric personalities. You still have your typical discussions at the bar about immutable databases and functional programming like you would at any tech conference, but the whole thing has an elevated sense of scope around it, like these discussions you\u2019re having actually matter somehow.The biggest news from the conference comes in the form of two competing visions for Ethereum\u2019s eventual switch to a proof-of-stake model. A make-or-break release under the code name \u201cCasper\u201d. The proof-of-work model was one of the brilliant inventions of the original Bitcoin protocol. A system that manages to align the incentives of all actors towards keeping the network running honestly and investing in the future of the currency. Ethereum is switching away from this battle-tested methodology to something more ambitious and unproven. Something that, if it works, will consume less electricity and allow for faster transaction processing times.Vitalik Buterin, the 22-year old wunderkind behind Ethereum, presents his \u201cMauve Paper\u201d, a well-reasoned approach for how to move the Ethereum network to proof-of-stake. Vlad Zamfir, a theoretical mathematician, later unveils his competing vision for proof-of-stake. Vlad speaks at 100 miles per hour. \u201cI feel bad for the Chinese translators\u201d someone says. The entire conference is being live-translated into Chinese, or it least it was until Vlad took the stage. On cue I see a Chinese girl take her headset off, the translators had no chance on this talk. \u201cI need a presentation about this presentation\u201d someone else says. Two competing models, unveiled publicly in front of the community. The better model will win in the end.I meet a guy from Germany who runs one of the biggest Ethereum mining rigs. He shows me a picture of his setup on his phone. I\u2019m blown away by the scope of it. A massive farm of servers all working 24/7 to solve esoteric math problems to ensure that new transactions get mined into the Ethereum blockchain promptly. \u201cHow much electricity does that use?\u201d Someone asks him. \u201cA couple million dollars a month\u201d he answers. But it\u2019s still profitable, very profitable, because the Ether it produces is worth so much. He goes to Vitalik \u201cYou know, you better make sure that Casper is well tested before switching over. It needs a lot of testing.\u201d He\u2019s half-joking, but there\u2019s a vague semblance of hostility in there. The longer it takes for the Casper fork to go live, the more money the miners will make. Moving to a proof-of-stake model renders their massive hardware farms irrelevant. Every month that goes by before Casper goes live has a multi-million dollar impact for miners running the network. No pressure or anything.Alex Van De Sande unveils the next version of the Mist browser. It\u2019s the most impressive product that\u2019s demoed at DevCon. Mist is a next generation web browser that runs on top of the open source Chromium engine powering Google Chrome. It lets you browse the internet just like any web browser does, but it also hooks into your Ethereum wallet, meaning you can trivially pay for any kind of content as you\u2019re browsing. No credit card needed, no bank account needed, no obnoxious sign-up forms. It will unlock an entire new class of digital business models.Juan Benet unveils Filecoin. A cryptocurrency built on top of Ethereum that will pay users to store files, creating a distributed version of Amazon S3 for the world to use. A BitTorrent protocol on steroids. Juan announces that the team thought long and hard about how to build it, but eventually decided to build on top of Ethereum due to the incredible community emerging around it. The crowd goes wild.I go to lunch with a couple of millionaires. They call themselves the next generation of \u201cOil Tycoons\u201d. Crypto ballers who were savvy enough to buy up massive amounts of Ether during it\u2019s initial offering to the public. Ether has increased in price substantially since it\u2019s launch, something like 40x. Traditional investments don\u2019t return 40x the money that you put into it 18 months later, but Ethereum just did. Again, crypto is insane.And all this is barely even scratching the surface. You see a new UI for the Parity client, academic papers on formal verification of smart contracts, mobile apps that connect to the Ethereum network, and beyond. There\u2019s a black hole of interesting topics to understand in the blockchain space. A friend tells me about the term \u201cchronocracy\u201d. The way you can have a \u201cplutocracy\u201d or a \u201cmeritocracy\u201d a \u201cchronocracy\u201d is an ecosystem where your status is defined by how much time you have put into it. There\u2019s so much to know about how the low level protocols work, about how the current financial system works, that the status hierarchy at DevCon is a proxy of who has put in the most time to understand it all.", "responses": "18"}, {"title": "What does Zcash mean for Ethereum?", "author_name": "ConsenSys", "link": "https://media.consensys.net/what-does-zcash-mean-for-ethereum-da0cdf722e45?source=search_post", "post_date": "Nov 2, 2016", "readtime": "6 min read", "upvotes": "207", "content": "What does Zcash mean for Ethereum?ConsenSysBlockedUnblockFollowFollowingNov 2, 2016Many of us at ConsenSys believe the Ethereum community should be excited about the launch of Zcash and the incredible partnership opportunities that exist to bring both blockchains closer to achieving our goals.What is\u00a0Zcash?Zcash is a new cryptocurrency that launched on Friday, October 28, 2016. A clone of Bitcoin forked from the Bitcoin codebase 0.11, Zcash is differentiated from Bitcoin and Ethereum by the added functionality of completely private transactions. For that reason, Zcash has been hailed as \u201cuntraceable\u201d.To allow private transactions, Zcash employs a technology from a branch of cryptography and computer science called zero-knowledge proofs. Even the smartest mathematicians in the space describe zero-knowledge proofs as \u201cmoon math\u201dand a handful of dedicated researchers worldwide have a complete understanding of the details of how it works.What is a zero-knowledge proof?Simply put, a zero-knowledge proof means you can prove to someone that you\u2019ve done a computation without their having to redo the computation themselves. The effect is that you can prove a statement true without revealing anything about it other than that it\u2019s true.Zero-knowledge proofs help make Zcash \u201cuntraceable\u201d by creating private transactions on the public Zcash blockchain. Transactions on Zcash cryptographically obscure the addresses of the sender and recipient, as well as the value one address sends to another. This is unique in that other blockchains to date show the value transfer from one address to another, and the value being sent can be seen by anyone on the blockchain. Unlike other blockchains, Zcash users can cryptographically fully shield their transactions. The only thing that is disclosed is that \u201csomething\u201d happened at a particular point in time.The addresses sending Zcash are all pseudonymous, meaning that if you don\u2019t know their actual identities or real-world addresses, you can\u2019t see where the currency is flowing to or from.For example, let\u2019s say you have 100 wallets each with one bitcoin, and that\u2019s all there is on the blockchain. Now let\u2019s say five of these people cryptographically shield their bitcoins using zero-knowledge proofs. There would be 95 transparent coins and 5 shielded ones. The blockchain and the network keep track of the amount of coins that are shielded and don\u2019t care who un-shields a portion later. The coins go into a big pool and when you pull a little piece out there\u2019s no way to correlate it to what went into the pool. Zero-knowledge proofs prevent people from pulling more out of the pool than they put into the pool in the first place.Who would want financial privacy?There is a wide range of legitimate use cases for financial privacy. In fact, if you think about it, financial privacy is probably desirable for most transactions that happen in the world.For example:A company wants to protect information regarding its supply chain from competitorsAn individual doesn\u2019t want it publicly known that she is paying a bankruptcy lawyer or a divorce lawyer for adviceA family that wishes to shield from employers and insurers, for fear of discrimination, the fact that their child has a chronic medical condition or genetic problemA wealthy individual who doesn\u2019t want criminal elements to see their activities and possibly attempt to extort value from themA trading desk, or other middleman company between buyers and sellers of different commodities, that wants to prevent getting cut out of the tradeBanks, hedge funds, and other types of financial entities that trade financial instruments (securities, bonds, derivatives); if external agents can figure out what their position or interest is, it can be used to the traders\u2019 disadvantage and affect their ability to trade well.How does size factor into\u00a0Zcash?Size is a scarce resource in public blockchains. If you have a transaction that takes up half a MB of space, it\u2019s going to increase the size of the blockchain by half a MB. With 2,000 transactions, in two hours you would have a GB. With the blockchain growing so quickly, it would soon become an unusable system.Importantly, the Zcash team was able to optimize the size of these private transactions down to the point of being actually usable, reducing them to about 1500 bytes. With the reduced size\u00a0, the cryptographic shielding computation dropped from five or six minutes down to one minute.What made the launch of Zcash\u00a0unique?The launch of Zcash was different from the launch of say, Ethereum. In the first token sale of ether, the sale ratio was 2,000 ether for each bitcoin. Then after 42 days, it linearly dropped down to 1.337 per ether at the end of the sale. There were only 60 million ether issued to the buyers on the very first block. An additional 12 million ether went to the Ethereum Foundation and early contributors as compensation. 9.9% was devoted to past contributors and another 9.9% was an endowment for the Foundation. Ethereum started with 72 million coins and had relatively low inflation after that. 30,000 additional ether are added each day to compensate miners for processing transactions and keeping the network secure.Similar to the start of Bitcoin, the distribution mechanism for Zcash at launch was to start mining coins at the outset with no pre-existing \u201cpre-mined\u201d coins. After 24 hours, there were roughly around 100 Zcoins that had been mined.The issuance per day continuously increases from 0 to 7200 Zcoins for 30 days, and stays at 7,200 Zcoins after that, with Zcash receiving 10% of all mined coins over time as a fee.Why is Zcash valued so\u00a0highly?It\u2019s Economics 101. With no actual coins out at the launch, a very low supply coupled with a very high demand led to a high price. Zcash started on Friday at a very high price and then continued to drop as the monetary base inflation kicked in. Super high inflation leads to significant price instability. When there was only one coin, price hovered around $500,000, then continued to drop to the point where we are now, around $1,000.Over the first two months, on a monthly basis there is effectively 100% monetary base inflation with 210,000 Zcoins mined in the first month. In the next month there are going to be another 210,000 Zcoins mined, doubling the amount of extant coins. Then two months after that, another 100% monetary basis inflation will occur, as extant Zcoins go from 420,000 to 840,000.So what does Zcash mean for Ethereum?There are two manners in which Ethereum developers can use the features that Zcash has pioneered. The simplest way to integrate the blockchains is by using a BTCRelay-style SPV (Simple Payment Verification) system, called ZRelay. This would allow public transactions on the Zcash blockchain to be verified by smart contracts on Ethereum, allowing Ethereum DApps to take advantage of the privacy of Zcash for value transfers. The more powerful, but more complex way is to incorporate the zkSNARKs as a native feature of Ethereum. This would allow, with the addition of the account abstraction set to be introduced in Metropolis, for Ether itself to be transferred privately. Work in this direction is ongoing.Today, Ethereum developers are able to build experimental and functional prototypes however, fully functional applications using Zcash cannot currently be implemented on the main network because the network gas limit is lower than what is required by the relatively expensive proof-of-work verification computations. In order for Zcash to work on Ethereum, a new precompile (a new deep protocol element of the system, similar to a new opcode) would need to be added so that all of the expensive computations happen in a highly optimised native manner, as opposed to on the general-purpose EVM.Hopefully, in the next version of Ethereum, we\u2019ll be able to have this atomic swap capability between ether and Zcash, and in the future we may have the full functionality of zero-knowledge proofs available directly in Ethereum and accessible from a variety of smart contracts.Zooko Wilcox, Founder and CEO of Zcash, has been quoted saying that Zcash is \u201cnot so much about making money\u201d but rather \u201cwhat\u2019s important is that the technology is out there, being used and tested\u201d. With Zcash addressing the most important key to solving the privacy issue, the Ethereum community could benefit from the partnership, bringing us closer to the ultimate goal of building a globally scalable, configurable, private, infrastructure for economic social, and political systems for the entire planet.", "responses": "14"}, {"title": "Smart Contract Testing & Ethereum Simulator", "author_name": "Amazingandyyy", "link": "https://medium.com/etherereum-salon/eth-testing-472c2f73b4c3?source=search_post", "post_date": "Aug 4, 2017", "readtime": "7 min read", "upvotes": "962", "content": "Smart Contract Testing & Ethereum SimulatorAmazingandyyyBlockedUnblockFollowFollowingAug 4, 2017In my last tutorial, I show Solidity programming language a bit and what it feels like to develop a simple HelloWorld smart contract. Today, I am talking about testing which is an important topic in development, especially for the smart contract development.All codes in this tutorial are available in this repoamazingandyyy/the-good-ethereum-smart-contract-tutorialthe-good-ethereum-smart-contract-tutorial - Repo for The Complete Ethereum Smart Contract Development tutorials series.github.com", "responses": "17"}, {"title": "Create an Ethereum wallet in 30\u00a0seconds!", "author_name": "Connor McGill", "link": "https://medium.com/hackfund/create-an-ethereum-wallet-in-30-seconds-1e89b01ff17c?source=search_post", "post_date": "Nov 22, 2017", "readtime": "2 min read", "upvotes": "432", "content": "Create an Ethereum wallet in 30\u00a0seconds!Connor McGillBlockedUnblockFollowFollowingNov 22, 2017Cryptocurrency can seem overwhelming when viewed from the outside. But let\u2019s take it one step at a time and set up a wallet so you can start receiving Ether (ETH)!Creating an Ethereum wallet is a lot easier then you might think, thanks to MyEtherWallet.com.MyEtherWallet is a great option for a quick wallet setup for ETH and ERC20 Tokens.I made a quick video walking through the steps:MyEtherWallet WalkthroughYou can make a wallet and start having your friends pay you in ETH for your awesomeness in less than half a minute.Go to https://MyEtherWallet.comThe first thing you will see when you visit https://myetherwallet.comCreate a new wallet by entering in a passwordThen, you will be prompted to download your Keystore file. This is your actual ETH wallet! Keep it safe!\u2026 and that\u2019s it! You know have a Ethereum wallet and can send/receive ETHYou can view your balance and send ETH through MyEtherWallet as well.Just simply click into \u201cView Wallet Info\u201dSelect your wallet file (The one starting with UTC)And unlock it!After you unlock it, you should see something that looks like this\u2026You can follow the same steps to send ETH to another address\u2026That\u2019s it, you did it! Setting up a Ethereum wallet is just that easy.Now go get people to start sending you Ether.", "responses": "27"}, {"title": "Peer Mountain Joins the Largest Open-Source Blockchain Initiative, Enterprise Ethereum\u00a0Alliance", "author_name": "Peer Mountain", "link": "https://medium.com/peermountain/peer-mountain-joins-the-largest-open-source-blockchain-initiative-enterprise-ethereum-alliance-8ca11e896a5f?source=search_post", "post_date": "Jun 5, 2018", "readtime": "2 min read", "upvotes": "7.6K", "content": "Peer Mountain Joins the Largest Open-Source Blockchain Initiative, Enterprise Ethereum\u00a0AlliancePeer MountainBlockedUnblockFollowFollowingJun 5, 2018We are thrilled to announce that Peer Mountain joined the Enterprise Ethereum Alliance (EEA), the world\u2019s largest open-source blockchain initiative. The move introduces Peer Mountain to collaborate with thought leaders across several industries, as well as providing access to a number of resources. Working with other members of the EEA will allow Peer Mountain to reinforce its capability to address enterprise use cases.\u201cMembership in the EEA will help boost development of our enterprise-ready cross-chain protocol that connects SSID holders with businesses, enabling scalable blockchain commerce,\u201d says Peer Mountain CEO and Founder Jed Grant. \u201cWe look forward to contributing the the EEA\u2019s collective expertise. Working closely with our fellow alliance members, we hope to accelerate enterprise-level adoption of blockchain technology and enable our clients to deliver innovative solutions to their customers.\u201dRead more here:Peer Mountain Joins the Largest Open-Source Blockchain Initiative, Enterprise Ethereum AllianceROAD TOWN, British Virgin Islands, June 4, 2018 /PRNewswire/ -- Peer Mountain has announced that it has joined the\u2026www.benzinga.com", "responses": "1"}, {"title": "Predicting Ethereum prices with Long Short Term Memory\u00a0(LSTM)", "author_name": "Felix Mohr", "link": "https://towardsdatascience.com/predicting-ethereum-prices-with-long-short-term-memory-lstm-2a5465d3fd?source=search_post", "post_date": "May 14, 2018", "readtime": "6 min read", "upvotes": "637", "content": "Predicting Ethereum prices with Long Short Term Memory\u00a0(LSTM)Felix MohrBlockedUnblockFollowFollowingMay 14, 2018In this article, we will be exploring how Long Short Term Memory (LSTM) networks can be used to predict Ethereum prices. By comparing the results to those obtained by a Support Vector Machine (SVM), we will observe that without any need for feature engineering, their predictions are much more precise than those of more traditional machine learning approaches. The focus of this article is not on the theoretical aspects of LSTMs, but on their practical application. We will implement both the LSTM and the SVM training code in python. All code for this article, including the trained models and the necessary training data, can be accessed at my github account.FelixMohr/eth-price-predictioneth-price-prediction - Predicting Ethereum price changes. Results of an LSTM (Long Short Term Memory) and an SVM\u2026github.comWhat are LSTM networks?LSTMs are a special kind of Recurrent Neural Network (RNN). RNNs are a type of neural network that is being used for sequence analysis tasks. Sequences can be made up of objects of different kinds\u200a\u2014\u200ae.g. video images, the features of an audio file at subsequent timesteps, or text. When using RNNs, we take into account that the objects of these sequences depend on each other: If you see the image of a jumping person, you may not know whether the person is currently moving upwards or downwards. When you see a video consisting of subsequent images, you will be able to instantly observe this. Different from other neural network architectures, RNNs are able to persist information about what has happened.One shortcoming of vanilla RNNs, however, is their seeming inability to learn long-term dependencies. Imagine you want to predict the gender of the author of a text. Some texts may mention the author\u2019s name right at the beginning, which may by far be the best predictor of the author\u2019s gender. Nonetheless, after having processed the whole text, RNNs usually will have forgotten information like this. LSTMs take RNNs one level further and are able to handle situations like these much more reliably by introducing gates controlling which information to forget at every step of the input sequence.LSTMs by themselves are a complex topic going beyond the scope of this article. To learn more, I recommend reading the article on colah\u2019s blog.Interestingly, LSTM networks have been proposed in 1997 and hence are not much younger than SVMs that were proposed in 1995, but like many deep learning approaches, they are in heavy use only since recently. There are several reasons for this fact: Firstly, deep learning approaches usually rely on much larger amounts of data, and the amount of available data has been growing immensely during the last two decades. Secondly, they often require more computing power\u200a\u2014\u200aanother area where there have been massive improvements. Lastly, without highly usable deep learning frameworks, applying deep learning was more challenging than it is today. For this project, I have been working with keras. The code for training the LSTM consists of a few lines only.Using Python for predicting Ethereum (ETH)\u00a0pricesThe first\u200a\u2014\u200aand often most challenging\u200a\u2014\u200astep in any machine learning project is the collection of training data. In our case, luckily poloniex provides an API giving us access to the value of ETH in US Dollars in intervals of thirty minutes (even smaller intervals are available). Having such fine grained data is very beneficial for our purpose, as it gives us access to many training objects, and deep learning algorithms usually need a lot of training data to perform well.Hence, we can now begin the typical workflow in machine learning: preprocessing our data, splitting it to have some data for evaluating our trained model, training it, and lastly analyzing our model\u2019s performance. Our task will be the following:We want to know ethereum prices one hour in advance.Preprocessing the\u00a0dataAfter having downloaded the data from the poloniex API and having saved it to a JSON file, I calculated the changes in subsequent closing prices. Sequences of these changes will be the input to our LSTM. This way, all training sequences will consist of double values in a similar range. In contrast to directly using closing prices, one advantage of this approach is that the network, when used for prediction, will be unlikely to observe values it has never seen before (as ETH prices may possibly be much higher in future than they are today). In scenarios like these, machine learning models usually perform rather poorly. Similarly, for the values to be predicted by the LSTM, I took the change in ETH price during the hour subsequent to the ending time of the input sequence.As can be seen from the above code, as length of the input sequences, I chose a value of 40\u200a\u2014\u200ai.e. the LSTM will have the task of observing the last 40 changes in Ethereum price and taking them to predict the change during the next hour.Splitting the training\u00a0dataI chose to reserve the last 30 % of training objects for evaluating the LSTM\u2019s performance. By using validation data that was observed later than the training data, we avoid falling to the well known look-ahead bias.Designing and training the\u00a0LSTMAs has been mentioned before, designing an LSTM with keras is as easy as building a Lego model and can be accomplished in only a few lines of code. I experimented with using a stacked LSTM at first, but as I noticed this did not increase performance, I decided to use a single keras LSTM layer only, followed by a single dense unit with a tanh activation. Values output by a tanh activation layer are in the range of [-1,1], which fits our task well.Using gradient clipping in the network\u2019s optimizer helps with the vanishing gradient problem which can be observed when using LSTMs relatively often. It should be noted that the training performance of the above model without gradient clipping was similar however, which may be due to the fact that the above architecture is less complex than many other LSTM architectures. Training took a few minutes on my CPU only.Evaluating the trained\u00a0LSTMThe mean absolute error when comparing results in the holdout data to the according predictions is about 0.015. This is significantly better than the value of a naive model which at every point in time would predict the average change (0.007) observed in the training data\u200a\u2014\u200athe mean absolute error of this model would be 0.044.Training a Support Vector Machine for predicting ETH\u00a0pricesFor being able to put the LSTM\u2019s results into context, I also trained an SVM for performing the same task. Unlike the LSTM, the SVM does not explicitly interpret the input as being sequence data, which puts it to a disadvantage. Hence, instead of having sequences of double values when training the SVM, I had to transform the data into vectors of size 40, consisting of the most recent price changes at any timestep. Afterwards, I followed the usual approach of using a grid search for optimizing the parameters of the SVM.The mean absolute error of the SVM on the holdout data was 0.021, which is better than the error of the naive model, but seems significantly higher than the error of the LSTM.We can see that LSTMs are better suited for sequence prediction tasks than more traditional approaches if enough training data is available. Also, when using keras, building LSTM architectures is much less challenging than one might fear.", "responses": "9"}, {"title": "CryptoZombies: Interactive Code School for Building Games on\u00a0Ethereum", "author_name": "James Martin Duffy", "link": "https://medium.com/loom-network/cryptozombies-interactive-code-school-for-building-games-on-ethereum-d23fa1b56ea8?source=search_post", "post_date": "Dec 12, 2017", "readtime": "2 min read", "upvotes": "1.5K", "content": "CryptoZombies: Interactive Code School for Building Games on\u00a0EthereumJames Martin DuffyBlockedUnblockFollowFollowingDec 12, 2017Updates:CryptoZombies Season 2 Is Here! And Introducing Zombie Battleground Custom Game Modes\ud83e\udddf CryptoZombies Goes Global! \ud83c\udf0e Meetups Around the World, Coming to a City Near You", "responses": "6"}, {"title": "Will CREDITS be able to compete with Ethereum?", "author_name": "Credits Blockchain", "link": "https://medium.com/@credits/will-credits-be-able-to-compete-with-ethereum-7b6a42c412e2?source=search_post", "post_date": "Jan 30, 2018", "readtime": "6 min read", "upvotes": "2.2K", "content": "Will CREDITS be able to compete with Ethereum?Credits BlockchainBlockedUnblockFollowFollowingJan 30, 2018Just 2\u20133 years ago, amateurs were discussing Blockchain as a new, promising technology and were speculating what the result would be. The world of cryptocurrencies, financial technologies and blockchain attracted more attention after the striking rise of Bitcoin\u2019s rate. At the moment, a lot of people believe that there is no reason at all to enter the market, others, on the contrary, support the technologies and the development of the new projects. Thus, blockchain project CREDITS made itself known in the middle of 2017 as the alternative to the well-reputed Ethereum.Will CREDITS be able to compete with Ethereum? First, let\u2019s have a look at the differences.Ethereum is a classical type of blockchain created in 2016 by Vitaly Buterin and Gavin Wood. This project is known for introducing and implementing smart contracts for the first time ever.Smart contract\u200a\u2014\u200aan algorithm used for making and maintaining commercial contracts in the blockchain technology.At the time, there was a huge breakthrough thanks to which Ethereum did not vanish in Bitcoin\u2019s shadow (BitCoin did not have viable or productive contracts).Ethereum has its own cryptocurrency called Ether. Ether\u2019s function is not limited to payments; it is meant for exchanging resources or registering transactions related to assets with the help of smart contracts. This is what distinguished Ethereum among the other competitors.Ethereum operates in the PoW (Proof-of-Work) principle at the moment.Proof-of-Work\u200a\u2014\u200aa principle of protecting a distributed network from the misuse of services. It is based on the obligation of the inquiring party to perform a relatively complex task (POW-task), the result of which can be easily checked by the service rendering party.PoW has many problems concerning safety and some shortcomings of a different nature:Waste of electricity: more powerful facilities are needed to create a blockchain successfully; much of the electricity is spent in the \u2018miners race\u2019 which is not reasonable for a financial, ecological or any other area of activity;Calculations performed actually remain within this network only; they do not have any practical value.The network is protected by mining, and this is a temporary measure as a developer\u2019s state. Ethash (Dagger-Hashimoto) algorithm is used for mining. This algorithm requires specific software; a minimum entry threshold for mining is 3.5GB of the main memory, if it is lower than that, the program will not work.This safety system is not perfect, and this is why many attacks were made in on Ethereum. For example, in 2016 the platform survived a series of active DDos attacks. In fact, $30 million was stolen from users of Ether cryptocurrency in the summer of 2017.It is also worthwhile to mention some technical characteristics of the Ethereum platform:Transaction speed is 1\u20135 minutes;Transaction cost is high (with the current rate);Amount of transactions per second is approximately 100;Average time of block creation is 15 seconds.The biggest financial companies and soft developers show interest in Ethereum at the moment.Whatever sort of innovator Ethereum is, it is not perfect, but it had still fixed its mistakes. By this I mean that as long as the existing projects have shortcomings, new ones will be inevitably catching up. With an alert and peppy newcomer\u00a0, the CREDITS project enters the stage in June, 2018.CREDITS is a new blockchain platform of registry type. It has the option of smart contracts like Ethereum. The multilevel system of the CREDITS software interface allows programmers to create applications based on the CREDITS adaptive platform. Users have access to modules and libraries. You can adjust these software components to your specific needs and conditions, be it business or IoT management.The most striking novelty of the CREDITS platform are brand new, truly full-scale smart contracts. Not everybody knows that Ethereum, which was a pioneer in the smart contracts development, has limited facilities and cannot implement everything a user may want to. For example, you cannot adjust regular debit payments or a fixed debiting date. In this situation, you need to send a command to perform this or that operation from the external system. The CREDITS developers confirm that their platform is a full-scale and autonomous system that is able to perform all of these operations.The platform model is B2B (Business-to-Business), and consequently, its target groups are banks, financial services and companies. It is critical to work out all of the aspects for collaborations with big companies\u200a\u2014\u200asafety, technical characteristics and ease of use.Narrow orientation will probably have influence on the amount of everyone involved in the project, but it is not a disadvantage of CREDITS.The project advantage is the independence from mining (there is none) and the DPoS (Delegated Proof-of-Stake) principle based operation.Delegated Proof-of-Stake\u200a\u2014\u200aa technological tool used to democratize systems; it protects a system from the potential threat of making it centralized. DPoS implies that the company\u2019s shareholders can influence the management process of their company by delegating their votes to competent network participants who are actually called delegates.A homomorphic ciphering algorithm secures the system.The homomorphic ciphering\u200a\u2014\u200aa kind of ciphering that permits performing certain mathematical operations with a ciphered text and obtains a ciphered result which corresponds to the result of operations with an open text.CREDITS uses mathematically complex protocols as a use of protection: Diffie-Hellman\u2019s protocol is based on the elliptic curves and MQV (Menezes-Qu-Vanstone).The CREDITS (CS) cryptocurrency is a local means of payment used within the system boundaries. You can use CS to pay for making a smart contract or for a currency exchange. Any use of the platform except reading is to be paid for, and this is somewhat a disadvantage. It should be mentioned that this could be an obstacle for a person but not for a company.Here are some technical characteristics of the CREDITS platform:transaction speed is 0.01\u20133 seconds;the transaction cost is low (approximately 0.001 of US dollar of the amount, no more than 1$);amount of transactions per second is approximately 1 000 000;the average time of blockchain creation is 0.01\u20133 seconds.Ethereum vs CREDITS:the advantages of Ethereum:well-known on the market;well-involved users;innovator in smart contracts.the disadvantages of Ethereum:not fully-scaled smart contracts;high costs;not really quick;uses some outdated technologies (PoW).the advantages of CREDITS:transaction speed problem is solved;very low cost of transactions;full-scale extended smart contracts;millions of transactions per second.the disadvantages of CREDITS:a newcomer on the market;a narrower orientation.Each of these two platforms has its advantages and disadvantages which is normal. New platforms learn from the mistakes of their predecessors, and this is how the technological process works. This is why we observe the progress in the blockchain technologies.One can conclude that these projects are oriented to different markets and different customers. Ethereum is more focused on the issue of tokens and responds to the needs of users with a small amount of transactions and to those who do not mind the question of price too much.CREDITS is for a new kind of customer, for whom very low price and high speed are critical. We can say these are the customers who have not worked with Ethereum yet. They are new Blockchain users. The advent of projects like CREDITS cannot but creates satisfaction. Take the best from the predecessors and add new features, that\u2019s the secret of success. We will keep up with the world of blockchain and cryptocurrencies and wait for new breakthrough projects.", "responses": "9"}, {"title": "The Road Ahead for Ethereum: Three Hard\u00a0Problems", "author_name": "Muneeb Ali", "link": "https://medium.com/@muneeb/the-road-ahead-for-ethereum-b5b090bcd1a?source=search_post", "post_date": "Jun 17, 2016", "readtime": "4 min read", "upvotes": "466", "content": "The Road Ahead for Ethereum: Three Hard\u00a0ProblemsMuneeb AliBlockedUnblockFollowFollowingJun 17, 2016UPDATE: This post is from June 2016 and listed high-level design. I plan to take a deeper dive into various aspects and link them from here. This Reddit discussion has more details. It\u2019s great to see innovation in decentralized computing.", "responses": "6"}, {"title": "Ethereum Reading List For Prospective Dapp Developers", "author_name": "Joe Urgo", "link": "https://dappdaily.com/ethereum-reading-list-for-prospective-dapp-developers-15d515383b23?source=search_post", "post_date": "Apr 8, 2017", "readtime": "2 min read", "upvotes": "421", "content": "Ethereum Reading List For Prospective Dapp DevelopersA collection of resources to help get you started building decentralized applicationsJoe UrgoBlockedUnblockFollowFollowingApr 8, 2017At Sourcerers, we believe the Ethereum ecosystem can never have enough talented developers. This collection of resources is designed to get you up to speed on the basics of the Ethereum, give you an idea of the role that the protocol may play in a decentralized future, and teach you how to start creating your own Dapps. Let\u2019s start building!What is Ethereum?A beginner\u2019s guide to Ethereum by Linda XieIntroduction to Ethereum: The Internet\u2019s Government by Karl FloerschJust Enough Bitcoin for Ethereum by Mike GoldinEthereum: Bitcoin Plus Everything by Mike GoldinProgrammable Blockchains in Context: Ethereum\u2019s Future by Vinay GuptaApp Coins and the Dawn of the Decentralized Business Model by Fred EhrsamUnderstanding Ethereum by district0xEthereum Explained by UpfolioStart Developing DappsTools and Technologies in the Ethereum Ecosystem by Mahesh MurthyThe Hitchhiker\u2019s Guide to Smart Contracts in Ethereum by Manuel Ar\u00e1ozA 101 Noob Intro to Programming Smart Contracts on Ethereum by ConsenSysSmart Contract Best Practices by ConsenSysLibrary Driven Development in Solidity by Jorge IzquierdoDeveloping Ethereum Dapps with Truffle and MetaMask by Dan FinlayHow to create decentralized apps with Clojurescript re-frame and Ethereum by Mat\u00fa\u0161 Le\u0161\u0165anOfficial LinksEthereum Project HomeEthereum WikiEthereum BlogEthereum White PaperEthereum Yellow PaperEthereum Homestead DocumentationSolidity Documentation", "responses": ""}, {"title": "Understanding Ethereum", "author_name": "Turner Schumann", "link": "https://hackernoon.com/understanding-ethereum-980d17d1abe3?source=search_post", "post_date": "Feb 24, 2018", "readtime": "5 min read", "upvotes": "776", "content": "Understanding EthereumTurner SchumannBlockedUnblockFollowFollowingFeb 24, 2018Ethereum has well established itself as the #2 player in the cryptoasset market, behind none other than Bitcoin. In short Ethereum is meant to be a \u2018World Computer\u2019, providing the ability to replace centralized servers with thousands of nodes (individual computers) across the world.A common misconception is that Ethereum is a currency in the same sense as Bitcoin. Ethereum is not a currency, it is an open-source blockchain-based platform that anyone is able to develop decentralized applications (Dapps) upon. Within the Ethereum platform is a native currency called ether that is used to fuel the applications built on the platform.Data as at February 18, 2018. Retrieved from: bitinfocharts.comOriginBlockchain technology was first introduced by Bitcoin as a way to keep track of digital cash ownership in a tamper proof way through a shared ledger. Many soon realized blockchain technology was not limited to a peer to peer digital cash system, it could be used to store any information of value. This opened blockchain technology to a plethora of use cases beyond digital currencies. People began developing a wide variety of decentralized applications, however, it required significant resources as well as experience in advanced coding and cryptography.In 2013, Vitalik Buterin proposed Ethereum as an open source platform that would significantly lower the entry barrier for programmers to develop their own decentralized applications. The development of the platform was funded through a crowdsale in the summer of 2014 and Ethereum went live on July 30th, 2015.Smart ContractsSimilar to how the internet protocol HTTP (Hypertext Transfer Protocol) facilitates communication over computer networks, Bitcoin and Ethereum are considered protocol layers because they are what facilitate actions on the blockchain. On top of the protocol layer third party developers can develop their own programs on what is called the application layer. A primary difference between Bitcoin and Ethereum is the ease of developing on the application layer. Ethereum\u2019s primary programming language, Solidity, is less restrictive compared to developing on the Bitcoin platform and notably allows for developers to program smart contracts. A smart contract is computer code that can facilitate the exchange of any information of value such as money or property ownership. Smart contracts are called \u201csmart\u201d because they can self-operate when specified conditions are met, this allows middlemen to be cut out of transactions. The fact these smart contracts run on the blockchain is attractive because they can operate in a transparent and conflict-free way, without the risk of fraud, censorship, or interference.A real world example of smart contracts being used is in crowdfunding. The incumbent crowdfunding platforms such as Kickstarter and Indiegogo act as the middlemen in crowdfunding transactions. They collect money from public supporters and pay it out to the project if the funding goal was reached before the deadline. These organizations are useful but they take a high fee for their services and there is an inherent risk of human error. Ethereum allows these types of platforms to be replaced by autonomous smart contracts. The entire crowdfunding transaction can be written into smart contracts as demonstrated here. This allows for middlemen along with their high fees to be cut out as well as a much lower risk of error because smart contracts are made available for public scrutiny.EtherAs noted in the introduction, Ethereum is the platform and ether is the fuel used to power applications built on the platform. Although ether is now commonly used as a digital currency in peer to peer transactions, it is intended to be a digital commodity. Just as a car requires gasoline to power its engine, applications built on the Ethereum platform require ether to obtain computational power. Ethereum miners provide processing power to these DApps and, in return, are compensated with ether.ICOs and Ethereum\u00a0TokensApplications built on Ethereum use ether to run, however they are also able to issue their own cryptotokens with the Ethereum Token Standard. The applications that issue their own token may then require users to obtain these tokens before they are able to access or interact with their application.Initial Coin Offerings (ICOs), a form of crowdfunding through issuance of tokens, exploded in popularity in 2017. This was largely in part due to the Ethereum Token Standard making it possible for developers to create their own token without having to code their own blockchain from scratch. Additionally, developers building on the Ethereum platform are not required to gain their own miners, they are able to rely on the thousands of miners already processing transactions on the Ethereum blockchain. Because so many tokens are built using the Ethereum Token Standard, the Ethereum blockchain now processes close to half of all USD value across all blockchain platforms, significantly more than Bitcoin.Ethereum Classic and DAO\u00a0HackThe DAO (Decentralized Autonomous Organization) was a DApp built on Ethereum that enabled crowd based venture capital. It was the most popular project on Ethereum at the time and because it was built on the Ethereum blockchain the code was publicly visible. A hacker (or multiple) noticed a flaw in the DAO code and was able to route 3.3 million ether into an account under their control. As this was about 15% of all circulating ether at the time, the Ethereum team decided to undergo a hard fork. They effectively created a new official blockchain, one in which the hack had never occurred. However, the original blockchain, the one in which the hack occured, still exists and many choose to keep supporting it. To reduce confusion, the original blockchain is now called Ethereum Classic while the new and officially endorsed blockchain is known simply as Ethereum.References:Ethereum Foundation. (2018). Ethereum. Retrieved from: https://www.ethereum.org/Ethereum Foundation. (2018). Ether. Retrieved from: https://www.ethereum.org/etherA Next-Generation Smart Contract and Decentralized Application Platform. Retrieved February 11\u00a0, 2018 from: https://github.com/ethereum/wiki/wiki/White-Paperetherchain.org. Ethereum Contract. Retrieved from: https://www.etherchain.org/account/0x304a554a310c7e546dfe434669c62820b7d83490", "responses": "6"}, {"title": "Ethereum or\u00a0NEO?", "author_name": "Ermos Kyriakides", "link": "https://blog.wandx.co/ethereum-or-neo-7bf08048d23c?source=search_post", "post_date": "May 26, 2018", "readtime": "5 min read", "upvotes": "1.6K", "content": "Ethereum or\u00a0NEO?Ermos KyriakidesBlockedUnblockFollowFollowingMay 26, 2018In light of many projects migrating from Ethereum to NEO (i.e. ProjectICO, Narrative, Guardium, and more) for their ICO and/or existing product, today\u2019s most heated topic of discussion in the crypto space is \u201cwhich is the better of the two.\u201dIn this blog post, I will discuss the fundamental similarities and differences between Ethereum and NEO, which should point out the main reasons why NEO is seemingly gaining more traction, as of late.While researching the subject, I also had the pleasure of chatting with Abhinav Ramesh (WandX Founder & CEO). WandX focuses on Decentralized Exchanges (DEX), currently running one, on the Ethereum network. For the benefit of newcomers in the space, a DEX is an exchange in which there is no party holding customers\u2019 funds but trades happen automatically and directly peer-to-peer.OverviewEthereum is \u201ca decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third-party interference. These apps run on a custom built blockchain, an enormously powerful shared global infrastructure that can move value around and represent the ownership of property\u201d. Ethereum was proposed in 2013 by Vitalik Buterin with an online crowdsale taking place between July and August 2014. It was subsequently released on the 30th of July, 2015.NEO (originally AntShares) is \u201ca non-profit community-based blockchain project that utilizes blockchain technology and digital identity to digitize assets, to automate the management of digital assets using smart contracts, and to realize a \u2018smart economy\u2019 with a distributed network\u201d. NEO was launched in 2014 by Da Hongfei.Consensus MechanismEthereum uses a consensus mechanism called Proof-of-Work (PoW).In proof of work (PoW) based public blockchains, the algorithm rewards participants who solve cryptographic puzzles to validate transactions and create new blocks (i.e., mining).Very simply, PoW is a race between miners attempting to solve a cryptographic problem. All miners are competing against each other in order to validate the transaction/block and whoever solves this first, is rewarded accordingly. You can find more information about PoW, here.One thing to note is that Ethereum will be changing its consensus mechanism shortly. It will be moving towards Proof-of-Stake (PoS). However, I will not be discussing details on PoS in this post. This release is called Casper, and you can find more information, here.On the other hand, NEO uses a consensus mechanism called Delegated Byzantine Fault Tolerance (dBFT).It is a consensus mechanism that enables large-scale participation in consensus through proxy voting. The holder of the NEO token can, by voting, pick the bookkeeper it supports. The selected group of bookkeepers, through the BFT algorithm, reach a consensus and generate new blocks. In dBFT, 2/3 of all bookkeepers will agree on what goes in each block.Simply put, in dBFT you have a group of \u201cbookkeepers\u201d to reach a consensus and generate new blocks. This group is asked what goes in each block with a random bookkeeper picked to answer. For this \u201canswer\u201d to take effect, all other bookkeepers need to agree. If over 2/3 of all bookkeepers agree on this, the consensus is achieved, and a new block is generated. If they don\u2019t, another bookkeeper will be questioned. You can find more information on dBFT, what bookkeepers do, etc. here.Transaction SpeedEthereum currently has a theoretical maximum capacity of 30 Transactions Per Second (TPS), but in reality, its TPS is around 15.NEO has much higher TPS capacity with a theoretical maximum capacity of 10,000 TPS, however, in reality, this is closer to the 1,000 TPS mark.Both projects have on-going work to increase their TPS via different solutions; Ethereum will be implementing sharding (more details here), and NEO is looking at a non-sharding solution (details are still vague).Smart ContractEthereum uses Solidity for its programming language\u200a\u2014\u200aa bespoke language created purely for Ethereum smart contracts. Although not a particularly hard language to learn, it does require a ramp-up time and resources are relatively limited.On the contrary, NEO supports commonly used programming languages that software engineers use day in, day out. These include C#, VB.Net, F#, Java, Kotlin, and Python. Also, support for C, C++, GoLang, and JavaScript are in the works. Not only these languages are commonly used, but they are very easy to learn as there are many resources online.A critical difference between Ethereum and NEO is the cost of deploying a smart contract on the network. To deploy a smart contract on the Ethereum network, the cost is in cents range (~0.10$ at the time of writing), whereas, the cost to deploy one on NEO, is in the thousands of dollars range (~12,000$ at the time of writing).AdoptionOne of the most significant and vital differences between Ethereum and NEO is adoption. Ethereum has been adopted by companies, individuals and the community much more than NEO, although that\u2019s changing. To put this into perspective, Ethereum has ~1600 Initial Coin Offerings (ICOs) launched/planned to launch in 2018, whereas, NEO has ~30 ICOs (numbers taken from ICOBench). Also, the pipeline of Decentralized Applications (dApps) being readied for the main-net on Ethereum are much more than on NEO.WandX, Ethereum, &\u00a0NEOAs mentioned earlier, I had the opportunity to chat with Abhinav Ramesh from WandX (Founder & CEO), which have already launched their DEX on Ethereum. During my conversation with Abhinav Ramesh, it was made apparent that WandX\u2019s next immediate project is tapping into the potential of NEO\u200a\u2014\u200ataking advantage of its speed, efficiency, and ease of use. Quoting Abhinav, \u201cwe have hired 5 new developers that will work exclusively on the NEO DEX\u201d, which shows a serious commitment towards the NEO network.In my opinion, this is a logical step forward for a project like WandX and for a lot of other similar projects, as clearly NEO is far more meritorious and benefitting than Ethereum, objectively speaking. I am a firm believer of NEO and written about it too, in some previous blog posts, 3 Coins To Watch In 2018 and 3 Cryptocurrencies To Earn You Money While You Sleep. But in all fairness, it\u2019s only when NEO starts becoming a more widespread choice will we see where the pitfalls lie, if any. For now, it\u2019s great to see the ecosystem adapting fast to the rapidly changing ways of blockchain.", "responses": "10"}, {"title": "Is EOS the Ethereum\u00a0killer?", "author_name": "Anthony Akentiev", "link": "https://medium.com/chain-cloud-company-blog/is-eos-the-ethereum-killer-ad24277d8c9c?source=search_post", "post_date": "May 22, 2017", "readtime": "4 min read", "upvotes": "701", "content": "Is EOS the Ethereum\u00a0killer?Anthony AkentievBlockedUnblockFollowFollowingMay 22, 2017Today at Consensus 2017 event held in NY Dan Larrimer announced his new project\u200a\u2014\u200aEOS. Dan is known as the leader behind BitShares, Graphene and Steem technologies.You can see live stream recording of the announcement here.Why EOS?You need to scale to millions of users, but you can\u2019tIf you are going to build some DApp (decentralized application), then what options do you have today?Corda and Hyperledger Fabric are for private networks only and have limited smart contract support.RChain, Rootstock/RSK, have not yet been released or not production-ready.BitShares and Graphene have very good throughput, but limited smart contracts capabilities.Polkadot repo has not been updated in the last 6 month.NXT, Waves, Lisk, Tezos, Tauchain (you name it\u2026) are not competitors\u2026It seems that you are left only with Ethereum which has a very bad throughput and high transaction costs.Why not try to combine the scalability of Graphene and the power of Ethereum\u2019s smart contracts together? Etherum will migrate from Proof-of-work to Proof-of-stake (scheduled at the end of 2017/beginning of 2018) so we have some time to build a new competitor.2 months ago Dan Larrimer resigned from Steemit in order to (obviously) develop/promote his new tool. Welcome, the new Ethereum killer!I created Steem with a team of 2 developers working for 3 monthsEOS = blockchain +\u00a0botsThere\u2019s not much technical information available currently. But EOS is not just about smart contracts + high scalability. It has a completely different design and vision compared to Ethereum.EOS uses Delegated Proof-of-Stake just like Graphene does.It uses Network Bandwidth Allocation system to effectively share the blockchain.It\u2019s like time sharing. It\u2019s like owning an instance on an Amazon web service that you can shareIn EOS the human-readable source code (the \u201cbot\u201d) is uploaded directly to the blockchain. As we know, the Ethereum smart contracts are binary data instead.If there\u2019s a bug in your application\u200a\u2014\u200athen community can freeze it and then deploy a fix. Very interesting!EOS is structured like a group of people and/or scripts (bots) that are exchanging messages between them. It could be thought of as an email system where every user or bot has an accountThe Account also known as the \u201cApplication\u201d is a private JSON-formatted database easily accessible by any blockchain explorers.All the communications between apps have self-describing interfaces, and declarative permission scheme. This means that you have to describe what messages your app wants to receive and what it will send (probably). It allows to firewall applications from each other but still allows them to communicate.Unlike e-mail, the recipient and any accounts copied on the message have the ability to reject the message in which case the message will not be delivered to themEOS is designed to support communication not just internally, but externally too. So it should be possible to connect other blockchains to communicate with them.You can check what smart contracts look like in EOS here\u200a\u2014\u200ahttps://steemit.com/eos/@eosio/implementing-a-hypothetical-currency-application-on-eos. This article was published by Dan 6 days ago (16th of May, 2017).Dan answersQ1. How do smart contracts work in parallel?Answer by Dan: \u201cAll the contracts are processed on the same chain, the messages are on the block chain, not the state. Every single account operates like its own chain, and supports interoperation between all other accounts without locking, so determinism is preserved\u201dQ2. Are there any blockchains comparable to EOS?Answer by Dan: \u201cNo, this is an incremental improvement on Steem and Bitshares. It is the general case to those special cases. It builds on more than 4 years of continuous development and innovation from the Bitshare and Steem community\u201d.Q3. Do you plan to run Steemit on top of EOS?\u00a0Answer by Dan: \u201cEOS can support applications like Bitshares or Steem. But it\u2019s totally up to Steem team\u201d.Q4. What about EOS token distribution?Answer by Dan: \u201cWe will send this information later in the mailing list\u201d.Q5. What does EOS stand for? Ethereum On Steroids?Answer by Dan: \u201cHahaha, no\u201dConclusionWow! Great product. Can\u2019t wait to see and try it. We are going to be among the first EOS app developers. By the way, EOS logo is a geometric structure that forms a heart!The only bad thing is that they have Brock Pierce on board now. I think he is a junkie. Not good for the team. Sorry. Even the blockchain constitution won\u2019t help.From the official EOS Telegram channel:\u201cNow Brock Pierce is at the microphone. He seems a little hung over from the party he hosted last night\u201d.Do you think EOS is the Ethereum killer?p.s. We are currently building the \u201cMicrocompany Tokenization Platform\u201d here\u200a\u2014\u200ahttps://web.thetta.ioWe need your help. Become a part of our team/community (+bounties and +rewards) and deliver great product together with us!", "responses": "17"}, {"title": "How to scam $102,860 USD worth of Ethereum in 24 hrs with\u00a0Slack", "author_name": "Ben Longstaff", "link": "https://medium.com/coinremix/how-to-scam-102-860-usd-worth-of-ethereum-in-24-hrs-with-slack-63ce1032219c?source=search_post", "post_date": "Sep 12, 2017", "readtime": "5 min read", "upvotes": "833", "content": "How to scam $102,860 USD worth of Ethereum in 24 hrs with\u00a0SlackBen LongstaffBlockedUnblockFollowFollowingSep 12, 2017image sourceFear Of Missing Out (FOMO) is going to the\u00a0moonSlack was designed for teams in an organization to collaborate. The concept of a team has a fundamental assumption of trust built into it.As a result Slack has a bunch of scam vectors.A lot of cryptocurrency projects are using Slack as a medium of communication. Ethereum introduced the Initial Coin Offering (ICO) concept with its crowd sale. Raising funds before the project was finished in exchange for tokens.Yielding 96,560%, the Ethereum crowd sale worked out ok for those still holding.Now if you\u2019re not deep into crypto you might think Ethereum was a fluke. To give you context for why there is epic FOMO happening right now take a look at these returns.Going to the moon\u00a0anyone?Returns like this have never been available before, let alone to regular people. This has lead to a willingness to believe in the unbelievable. Combine:No regulationNo recourseA direct channel to targetsFOMOUnprecedented gains that put a get rich quick scheme to shameand you have a scammers paradise.Attack 1\u200a\u2014\u200aDirect\u00a0MessagesSlack is kind enough to send users an email to let them know they have unread direct messages. Naturally scammers have started sending direct messages to users. This bypasses email scam filters since the email is coming from no-reply@slack.com.When an ICO happens the process is communicated through a variety of public channels. These announcements create a very convincing template for scammers to use.I want a 100% bonus\u00a0\u2026. like, who doesn\u2019t?Blockchain provides transparency into how much was scammed.etherscan.io makes it easy to look up transactions on the blockchain to a particular address. Using the address in the scam we can see 106 transactions and a balance of $102,680.35 USDA variation involves an alert from the security team.Seems legit, except for the dodgy My Ether Wallet URL\u2026myethwallet.eurather thanwww.myetherwallet.comAlso a quick google of the sender shows that the CTO of Golem Project isn\u2019t called Pedro.The effectiveness of this one is harder to measure since we don\u2019t know the wallet details.Teams are able to deal with this type of scam by kicking the scammers out of the slack group. This deletes all the direct messages from the scammer.Attack 2\u200a\u2014\u200aSlackbot\u00a0TasksA scammer can set tasks for every user via slackbot. Once the scammer is detected and kicked out of the slack group there is no way to delete the tasks. As a result slackbot sends the message even after the scammer is removed.This makes sense in a large organization, tasks still need to be completed if employees leave. In an open organization it makes it hard to clean up a scammers mess.Attack 3\u200a\u2014\u200aTalking about upcoming ICO\u2019s that have scam sites running in Google\u00a0AdsThere is a lot of Fear Uncertainty and Doubt (FUD) in the trading channels. Aside from the noise they can be a great source for ICO\u2019s to checkout. Clicking on links from slack is not such a great idea, so just Google it right? I heard a few people talking about Red Pulse along with Kyber (an ICO that is so hot right now). So naturally I was curious to know more.Lots of ICO\u2019s run\u00a0adsNow the Ad at the top takes you to this site.Seems legitThe top ranking organic result goes to a very similar looking siteIt is difficult to know if a site is real when its so easy to clone the original. In the case above the site saying that the registrations are closed is the real one.SummaryIf you\u2019re getting into crypto and using the communities, if it sounds to good to be true it is probably a scam. Look for official channels to verify everything.Always be skeptical.The official channels can get hacked. The Enigma ICO accounts got hacked resulting in nearly $500,000 being stolen.Trust no\u00a0oneFollow me if you want to learn more about crypto and how to invest safely.We\u2019ve launched Every Capital, a managed crypto fund, for Australians who want a safe way to invest in cryptoassets.Hacks are pretty common in the crypto world:My framework for how to look at the future of blockchain.\u201cIt was easy to predict mass car ownership but hard to predict Walmart.\u201d\u200a\u2014\u200aCarl Saganmedium.comHow not to Launder $4 Billion worth of bitcoinI woke up to find one of my exchanges (BTC-e) frozen.medium.com", "responses": "4"}, {"title": "Diving into Ethereum\u2019s world\u00a0state", "author_name": "Timothy McCallum", "link": "https://medium.com/cybermiles/diving-into-ethereums-world-state-c893102030ed?source=search_post", "post_date": "Feb 10, 2018", "readtime": "15 min read", "upvotes": "1.2K", "content": "Diving into Ethereum\u2019s world\u00a0stateTimothy McCallumBlockedUnblockFollowFollowingFeb 10, 2018Ethereum comprises of many constituent parts. This post seeks to de-construct Ethereum to provide you with an understanding of its data storage layer. We will introduce the concept of blockchain \u201cstate\u201d. We will cover the theory behind the Patricia Trie data structure and demonstrate Ethereum\u2019s concrete implementation of tries using Google\u2019s leveldb database. This post also links to a step by step guide which will assist you in installing and configuring your very own Ethereum private network (including mining). From this point you will be able to execute transactions and explore how Ethereum\u2019s \u201cstate\u201d responds to activities such as transactions.What is blockchain \u201cState\u201d?Bitcoin\u2019s \u201cstate\u201d is represented by its global collection of Unspent Transaction Outputs (UTXOs). The transfer of value in bitcoin is actioned through transactions. More specifically, a bitcoin user can spend one or more of their UTXOs by creating a transaction and adding one or more of their UTXOs as the transaction\u2019s input.A full explanation of UTXOs is out of scope for this article. However, we mention UTXOs in the following paragraph, to point out a fundamental difference between bitcoin and Ethereum.The following two bitcoin examples will provide contrast between bitcoin\u2019s UTXO model and the concept of Ethereum\u2019s world state.Firstly, bitcoin UTXOs can not be partially spent. If a bitcoin user spends 0.5 bitcoin (using their only UTXO which is worth 1 bitcoin) they have to deliberately self-address (send themselves) 0.5 bitcoin in return change. If they don\u2019t send themselves change, they will loose the 0.5 bitcoin change to the bitcoin miner who mines their transaction.Secondly, at the most fundamental level, bitcoin does not maintain user account balances. With bitcoin, a user simply holds the private keys to one or more UTXO at any given point in time. Digital wallets make it seem like the bitcoin blockchain automatically stores and organizes user account balances and so forth. This is not the case.A user account balance in bitcoin is an abstract notion. Realistically a user\u2019s account balance is the sum total of each individual UTXO (for which that user holds the corresponding private key). The key[s] which a user holds can be used to individually sign/spend each of the UTXOs.The UTXO system in bitcoin works well, in part, due to the fact that digital wallets are able to facilitate most of the tasks associated with transactions. Including but not limited to:a) handling UTXOsb) storing keysc) setting transaction feesd) providing return change addressese) aggregating UTXOs (to show available, pending and total balances)Interestedly, a back-up of a non-deterministic wallet (like the bitcoin core wallet pictured above) only provides a snapshot of the UTXOs (at that point in time). If a user performs any transactions (sending or receiving), the original back up, which they made, will be out of date.To summarize, we know that:the bitcoin blockchain does not hold account balancesbitcoin wallets hold keys to UTXOsif included in a transaction, an entire UTXO is spent (in some cases partially received back as \u201cchange\u201d in the form of a brand new UTXO)", "responses": "8"}, {"title": "Ethereum and Solidity: The Complete Developer\u2019s Guide\u200a\u2014\u200aNew\u00a0Course!", "author_name": "Brandon Morelli", "link": "https://codeburst.io/ethereum-and-solidity-the-complete-developers-guide-new-course-2fb2d669cd9d?source=search_post", "post_date": "Jan 9, 2018", "readtime": "3 min read", "upvotes": "771", "content": "Ethereum and Solidity: The Complete Developer\u2019s Guide\u200a\u2014\u200aNew\u00a0Course!Use Ethereum, Solidity, and Smart Contracts to build production-ready apps based on the blockchainBrandon MorelliBlockedUnblockFollowFollowingJan 9, 2018A lot of you know that Stephen Grider is one of my favorite online instructors when it comes to learning Web Development. Well, he\u2019s just released a new course!Check out his course below that will teach you how to use Ethereum, Solidity, and Smart Contracts to build production-ready apps based on the blockchain!Disclosure: I write reviews and receive compensation from the companies whose products I review. I have experience with every course below, and I only recommend the best. All opinions expressed here are my own.", "responses": "1"}, {"title": "What is an Ethereum keystore\u00a0file?", "author_name": "Julien M", "link": "https://medium.com/@julien.maffre/what-is-an-ethereum-keystore-file-86c8c5917b97?source=search_post", "post_date": "Dec 10, 2017", "readtime": "7 min read", "upvotes": "1.3K", "content": "What is an Ethereum keystore\u00a0file?Julien MBlockedUnblockFollowFollowingDec 10, 2017The barrier to entry to manage your Ethereum private keys is high, mostly because Ethereum clients hide a big part of the cryptographic complexity under straightforward command line or graphical interfaces.For example, using geth:$ geth account newYour new account is locked with a password. Please give a password. Do not forget this password.Passphrase:Repeat passphrase: Address: {008aeeda4d805471df9b2a5b0f38a0c3bcba786b}$ geth account listAccount #0: {8a1c4d573cc29a96547816522cfe0b266e88abac} keystore:~/.ethereum/keystore/UTC--<created_date_time>--  008aeeda4d805471df9b2a5b0f38a0c3bcba786bI only had to type 3 words to create a new account. I was then asked to enter a passphrase twice and that\u2019s it! My Ethereum keystore file was created.Those very precious keystore files need to be backed up and stored in one or multiple secret locations so that you and only you can access these files to retrieve your funds.From experience, when I don\u2019t fully understand the subtleties of a new concept and rely too much on levels of abstraction and existing tools to make my life easier, I am more likely to forget about something, take an unnecessary shortcut and screw up. And when it happens, I may end up with my hard-earned Ether locked forever (thankfully it hasn\u2019t happened yet!).Fortunately, there aren\u2019t that many ways that you, an Ethereum user, can screw up:You\u2019ve lost your keystore file;You\u2019ve forgotten the password associated with the file;Both.In this article, we will go through how your Ethereum private key is computed from your Ethereum keystore file. We\u2019ll talk about cryptographic functions (symmetric encryption, key derivation functions, SHA3 hashes) but we\u2019ll keep the explanation as accessible and straightforward as possible.What is a keystore\u00a0file?An Ethereum keystore file (stored in ~/.ethereum/keystore on Linux or C:\\Users\\<User>\\Appdata/Roaming/Ethereum/keystore on Windows) is an encrypted version of your unique Ethereum private key that you will use to sign your transactions. If you lose this file, you lose access to your unique private key which means you lose the ability to sign your transactions\u200a\u2014\u200awhich means your funds are stuck in your account forever.Of course, you could directly store your Ethereum private key in an encrypted file but it would make your key vulnerable to attackers that could simply read the file and use your private key to sign transactions to their account. Your Ether would be gone in less time that it\u2019d take you to realise what had happened!That\u2019s why the Ethereum keystore files were created: they allow you to store your Ethereum private key encrypted under your passphrase. It\u2019s the perfect compromise between security (an attacker would need the keystore file and your password to steal your funds) and usability (you only need the keystore file and your password to use your money).To let you send some Ether, most Ethereum clients will ask you to type your passphrase (the same one you used when you created your account) in order to decrypt your Ethereum private key. Once decrypted, the private key is available to the client program to sign your transactions and let you move your fund.What do keystore files look\u00a0like?If you were to open one of your account\u2019s file, it would look like this (taken from here):$ cat ~/.ethereum/keystore/UTC--<created_date_time>--  008aeeda4d805471df9b2a5b0f38a0c3bcba786b{    \"crypto\" : {        \"cipher\" : \"aes-128-ctr\",        \"cipherparams\" : {            \"iv\" : \"83dbcc02d8ccb40e466191a123791e0e\"        },        \"ciphertext\" : \"d172bf743a674da9cdad04534d56926ef8358534d458fffccd4e6ad2fbde479c\",        \"kdf\" : \"scrypt\",        \"kdfparams\" : {            \"dklen\" : 32,            \"n\" : 262144,            \"r\" : 1,            \"p\" : 8,            \"salt\" : \"ab0c7876052600dd703518d6fc3fe8984592145b591fc8fb5c6d43190334ba19\"        },        \"mac\" : \"2103ac29920d71da29f15d75b4a16dbe95cfd7ff8faea1056c33131d846e3097\"    },    \"id\" : \"3198bc9c-6672-5ab3-d995-4942343ae5b6\",    \"version\" : 3}A chunky JSON file with many magic parameters that seem to be vaguely related to complicated cryptographic operations. Definitely not appealing.Let\u2019s dig a little\u00a0deeperIf you look at the structure of that keystore file, you can see that most of its content is under \u201ccrypto\u201d:\"crypto\" : {    \"cipher\" : \"aes-128-ctr\",    \"cipherparams\" : {     \"iv\" : \"83dbcc02d8ccb40e466191a123791e0e\"    },    \"ciphertext\" : \"d172bf743a674da9cdad04534d56926ef8358534d458fffccd4e6ad2fbde479c\",    \"kdf\" : \"scrypt\",    \"kdfparams\" : {     \"dklen\" : 32,     \"n\" : 262144,     \"r\" : 1,     \"p\" : 8,     \"salt\" : \"ab0c7876052600dd703518d6fc3fe8984592145b591fc8fb5c6d43190334ba19\"    },    \"mac\" : \"2103ac29920d71da29f15d75b4a16dbe95cfd7ff8faea1056c33131d846e3097\"   },This contains:cipher: The name of a symmetric AES algorithm;cipherparams: The parameters required for the \u201ccipher\u201d algorithm above;ciphertext: Your Ethereum private key encrypted using the \u201ccipher\u201d algorithm above;kdf: A Key Derivation Function used to let you encrypt your keystore file with a password;kdfparams: The parameters required for the \u201ckdf\u201d algorithm above;mac: A code used to verify your password;Let\u2019s see how these work together to keep your protect your keystore file under your passphrase.1. Encrypting your private\u00a0keyAs mentioned earlier, an Ethereum account is a private-public key pair used to cryptographically sign your transactions. To make sure that your private key is not stored in a file as plain (i.e. readable by anyone who has access to the file), it is crucial to encrypt it using a strong symmetric algorithm (cipher).These symmetric algorithms use a key to encrypt some data. The resulting data is encrypted and can be decrypted using the same method and the same key\u200a\u2014\u200ahence the name, \u201csymmetric\u201d. For this article, let\u2019s call this symmetric key decryption-key as it will be used to decrypt our Ethereum private key.And this is what cipher, cipherparams and ciphertext correspond to:cipher is the symmetric algorithm used to encrypt the Ethereum private key. Here, the value of cipher is aes-128-ctr.cipherparams are the parameters required for the aes-128-ctr algorithm. Here, the only parameter is iv, an \u201cinitialisation vector\u201d consumed by the aes-128-ctr algorithm.ciphertext is the encrypted input of the aes-128-ctr function.So here you go, you\u2019ve got everything you need to compute your decrypted Ethereum private key\u2026 wait. You need to retrieve your decryption-key first.Symmetric decryption of ciphertext2. Protecting it with your passphraseTo make sure unlocking your account is easy, you don\u2019t need to remember your very long and non-user-friendly decryption-key that is used to decrypt ciphertext. Instead, the Ethereum developers have opted for a passphrase-based protection\u200a\u2014\u200athat is, you just need to type your passphrase to retrieve your decryption-key.To be able to achieve this, Ethereum uses a Key Derivation Function that computes the decryption-key given a passphrase and a list of parameters.This is what kdf and kdfparams are used for:kdf is the Key Derivation Function used to compute (or \u201cderive\u201d) the decryption-key from your passphrase. Here, the value of kdf is scrypt.kdfparams are the parameters required for the scrypt function. Here, without going into too much detail, dklen, n, r, p and salt are the parameters of the kdf function. More information on the scrypt function can be found here.Here you go, tweaking the scrypt function with the kdfparams parameters and feeding it our passphrase, you get our decryption-key as the output of the Key Derivation Function.Key Derivation Function from passphrase3. Make sure your passphrase is\u00a0rightWe\u2019ve described everything we need to determine our Ethereum private key from our keystore file and our passphrase. However, what happens if the passphrase supplied to unlock the account is wrong?From what we\u2019ve seen so far, all the operations (derivation and decryption) will succeed, but the Ethereum private key computed at the end won\u2019t be right\u200a\u2014\u200awhich defies the point of using the keyfile in the first place!We need to guarantee that the passphrase typed to unlock the account is right, that it is the same one as the one entered when the keystore file was originally created (remember geth account new?).This is where the mac value in the keystore file comes into play. Just after the Key Derivation Function is executed, its result (decryption-key) and ciphertext are processed (*) and compared to mac (which acts like a seal of approval). If the result is the same as mac, then the passphrase was right and the decryption can start.(*): A little bit of a shortcut here. The decryption-key (second leftmost 16 bytes only) and ciphertext are concatenated and hashed (SHA3\u2013256) before being compared to mac. More info here.Putting everything togetherPhew! If you\u2019ve made it this far, then congratulations! \ud83c\udf89\ud83c\udf8aLet\u2019s recap by putting together all 3 functions that we\u2019ve described.First, you entered your passphrase which was fed into the kdf Key Derivation Function to compute decryption-key. Then, the freshly-computed decryption-key was processed along with ciphertext and compared with mac to make sure the passphrase was correct. Finally, the ciphertext was decrypted via the cipher symmetric function using decryption-key.Voil\u00e0! The result of the decryption is your Ethereum private key. You can have a look at the entire process here:As you can see from the diagram, the whole process can be seen as a black box (well, grey here\u2026) with your passphrase as the only input and your Ethereum private key as the only output. The rest of the information needed is available in the keystore file generated when your new Ethereum account was created.For that reason, make sure that your passphrases are strong (and that you somehow remember them!) to guarantee that an attacker that stole your keystore file can\u2019t easily retrieve your private key.", "responses": "13"}, {"title": "React & Ethereum: Getting Started With The Minimum Toolset Required\u200a\u2014\u200aPart 1 of\u00a04", "author_name": "Zubair Ahmed", "link": "https://levelup.gitconnected.com/https-medium-com-zubairnahmed-react-ethereum-getting-started-with-the-minimum-toolset-required-part-1-of-4-9562efa23d18?source=search_post", "post_date": "Nov 8, 2017", "readtime": "9 min read", "upvotes": "1.2K", "content": "React & Ethereum: Getting Started With The Minimum Toolset Required\u200a\u2014\u200aPart 1 of\u00a04Zubair AhmedBlockedUnblockFollowFollowingNov 8, 2017Learn how to create a smart contract and deploy it to the Ethereum blockchain, using the minimum toolset required: Remix, Metamask, and any text editor.\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022 Part 1 \u2022\u2022\u2022 Part 2 \u2022\u2022\u2022 Part 3 \u2022\u2022\u2022 Part 4 \u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022Pixabay image, released under Creative Commons\u00a0CC0.Update: This blog series is no longer maintained.IntroductionThe essence of this post is to show how React can talk with the Ethereum blockchain. Only three tools will be used, so there\u2019ll be a minimum learning curve. The project will be broken down into five phases so it can be easily followed.Intended audience: Students / beginners / intermediate beginners, and anyone with curiosity.Prerequisites: Basic familiarity with JavaScript, React, npm, and the command line. Simple knowledge of ether and gas.Solidity will be used to write our smart contract, though familiarity with it is not needed. I\u2019ll do my best to explain what\u2019s happening, and I\u2019ll link relevant key words to the Solidity documentation for easy reference.Design note: I\u2019m designing this post to be a learning experience which aims to deliver a simple and detailed understanding of the toolset used and the Solidity programming language. Practicing, recalling from memory, and following processes are part of this experience.GitHub repository: If you\u2019d like, you can code along with my repository. I\u2019ve added comments as a guide.", "responses": "4"}, {"title": "Ethereum tutorial #01\u200a\u2014\u200aWhat is a blockchain and its\u00a0purpose?", "author_name": "Peter Ho", "link": "https://medium.com/coinmonks/what-is-a-blockchain-and-its-purpose-42f462e017ed?source=search_post", "post_date": "Jun 8, 2018", "readtime": "10 min read", "upvotes": "1.1K", "content": "Ethereum tutorial #01\u200a\u2014\u200aWhat is a blockchain and its\u00a0purpose?Peter HoBlockedUnblockFollowFollowingJun 8, 2018Image downloaded from Google Image\u00a0SearchHi there! I am planning to write a series of Ethereum tutorial in coming months to share what I have learnt. Today, I would like to start the series with the most fundamental stuffs\u200a\u2014\u200aan Introduction to blockchain!This tutorial post is for people who has little background and knowledge about blockchain, or people who want some knowledge refresh. Coming, I will be sharing the contents listed below. So, without further ado, let\u2019s begin!What is a blockchain and a blockchain network?The characteristics of blockchain and its networkHow a blockchain network achieves pseudonymity?How a blockchain achieves immutability?The ultimate goal of blockchain and its network", "responses": "7"}, {"title": "Ethereum Community Fund", "author_name": "JUN", "link": "https://blog.omisego.network/ethereum-community-fund-41ec94d94529?source=search_post", "post_date": "Feb 15, 2018", "readtime": "3 min read", "upvotes": "1.93K", "content": "Ethereum Community FundJUNBlockedUnblockFollowFollowingFeb 15, 2018I\u2019m excited to share that OmiseGO will be joining other leading Ethereum-supporting projects Cosmos, Golem, Maker, Global Brain Blockchain Labs, and Raiden in announcing the creation of the \u201cEthereum Community Fund\u201d (ECF), a unique, highly networked vehicle dedicated to the acceleration of infrastructure and decentralized application development.The ECF\u2019s goal is to create an environment where teams and ideas can thrive, grow, and collaborate to become essential and functioning pieces of the broader Ethereum ecosystem. The ECF will reach this goal by fostering the creation and strengthening of the connective tissue between projects and companies looking to adopt blockchain technologies.The first step towards supporting the growth of the Ethereum ecosystem will be the Infrastructure Grant program. This program will be established as a permanent financial endowment to support and aid projects in building crucial open-source infrastructure, tooling, and applications.The ECF will lead the way toward greater coordination among existing projects in the space who share a common interest of building out base infrastructure and supporting a more robust ecosystem of emerging projects. We anticipate ECF members and others will follow with their own category-specific onramps and support networks which can provide a continued pathway for new entrants into the Ethereum community.The founding team of the ECF consists of respected founders and advisors, and major stakeholders with experience and deep understanding of the dynamics of the blockchain space. Members include the Co-creator of Tendermint and Co-founder of Cosmos, Jae Kwon; the Founder of Golem, Julian Zawistowski; the Founder of OmiseGO, Jun Hasegawa; the Founder of Maker, Rune Christensen; and the CEO and Founder of one of Japan\u2019s largest VC\u2019s, Global Brain Blockchain Lab, Yasuhiko Yurimoto, among others.Advisors include the Founder of Ethereum, Vitalik Buterin; the Executive Director of the Ethereum Foundation, Ayako Miyaguchi; and the Managing Director of OmiseGO, Vansa Chatikavanij.The founding members of the ECF are only leading the way to create an ecosystem of shared value. To open up a world of possibilities for this ecosystem, like-minded contributors are necessary to add to the growth and continued progress. Established projects and parties interested in participating as members, please visit https://ecf.network.I strongly believe this technology has incredible promise, but only by laying a strong foundation can we hope to see this technology reach its full potential and gain mainstream adoption. This begins with investment now in public infrastructure that is scalable, versatile, and decentralized. One project in isolation can create a product to disrupt an industry, but by working together we can create a framework that will change the world.", "responses": ""}, {"title": "Is Ethereum 2.0 overlooking communication costs?", "author_name": "Adrian Dobrita", "link": "https://medium.com/elrondnetwork/is-ethereum-2-0-overlooking-communication-costs-ee99931caa7?source=search_post", "post_date": "Dec 18, 2018", "readtime": "15 min read", "upvotes": "2.3K", "content": "Is Ethereum 2.0 overlooking communication costs?Adrian DobritaBlockedUnblockFollowFollowingDec 18, 2018Serenity is a term used to describe a series of potential updates to Ethereum, which attempt to address scalability with minimal impact on decentralization and security. In simpler terms to make it a faster and better environment for smart contracts and DApps.Ethereum tries to overcome the energy waste and scalability limitations of the original Proof of Work (PoW) solution by rethinking its entire architecture, using Proof of Stake (PoS) and Sharding as main pillars. The new Ethereum architecture is a multi-layered system, which is meant to be integrated\u200a\u2014\u200aand run in parallel\u200a\u2014\u200awith the existing PoW chain until PoW can be deprecated and replaced completely.Article overview:While reviewing Ethereum 2.0\u2019s available documentation, some unaddressed issues and limitations became obvious. This article examines Serenity\u2019s design rationale, highlights some of the identified issues, offers solutions, and in the end contrasts them with our approach at Elrond.Part 1.Making sense of Ethereum\u00a02.0Actors in\u00a0SerenityThere are several actors in Serenity: beacon nodes that do most of the work in the system, and staking nodes (collectively called validators) which can be selected as proposers or attesters for the shard chains. Validators register to the network through a Smart Contract maintained on the PoW chain, by staking 32 ETH.Most of the work in the system seems to fall on the beacon nodes, that have the following responsibilities:Maintain the list of active, queued and exited validators, by monitoring the registration smart contract in the main chain (PoW).Generate a randomness or act as randomness source through RANDAO/VDF (Verifiable Delay Function)Shuffle the validators into attester committees, both for the beacon chain and for the shards, and allocate slots for block proposers. The shuffling is done using the randomness source from the beacon chain.Process beacon blocks, build the beacon chain with cross-links (metadata for a block in the shard chains, and can be viewed simplistically as block headers with aggregated signatures and shard information) from each of the shards and link to PoW blocks.Run the per slot consensus and the finality gadget (Casper FFG).The proposers are shuffled in cycles by the beacon nodes, each cycle having 64 slots (could be more), with one proposer allocated for each slot. The proposers build blocks with transactions from their shard and cross-links for the beacon chain, in their allocated slot and propagate it (through a p2p network) to the validators in shard. The attester committee will then attest (using BLS multi-signatures) for the block they approve of, and if the block has enough signatures, it can be added as a cross-link in a beacon chain block. The beacon chain block will be as well attested by a committee of attesters.The attesters are shuffled into different committees for regular shards or for the beacon chain, according to the random source from the beacon nodes, and need to attest (sign) the blocks they approve of. Prysmatic Labs\u2019 implementation considerations suggests that each validator(proposers and attester) node will be connected to one or more beacon nodes directly and communicate with them directly through RPC (gRPC). Connection and communication inside the shard should work through p2p.Justin Drake suggests in a post that proposers and attesters are gradually shuffled every epoch, so that liveness is not affected. This can greatly improve the liveness and decrease the communication overhead.RandomnessEthereum is building the randomness source based on RANDAO and VDF. RANDAO will be used as a bootstrapping mechanism, before the ASICs running VDF are available (not before year 2020). After the ASICs are integrated with the beacon chain, RANDAO will be used for generating the input for the VDF. If the VDF is broken, it can fallback to RANDAO for the randomness generation.RANDAO is a commit-reveal mechanism where the validators need to commit to a random number (32 bytes) based on a secret (also 32 bytes) which is the innermost value in a hash onion R = H(H(H(\u2026H(secret)\u2026))), and reveal each time they propose a block a preimage H^-1(R), by unwrapping layers of the hash onion. This is then XORed with the previous beacon chain RANDAO result and serves as a local biasable entropy for the beacon chain, to be further built upon by the other block proposers. Each block proposer in their slot has the choice to either reveal or skip, but skipping means also forfeiting their rewards that come from proposing a block.The VDF is used to generate an unbiasable random number taking a 32 bytes input and generating a 32 bytes output, that takes time T to generate, but is orders of magnitudes faster to verify. When the estimated time T is longer than the time required to commit to it\u2019s input, then this function becomes unbiasable. Ethereum is planning to use ASICs specialized in calculating the VDF running an algorithm based probably on Sloth++ with STARKs.Sharding modelThe Serenity sharding implementation assumes that each shard manages separate accounts and is processing different transactions, each building their own blockchain, meaning that it has both state and transaction sharding. It supports a large number of shards (up to 1024) that process different transactions in parallel, and a beacon chain shard summarizing the blocks produced by every shard in the system. The number of shards at a time can vary so the sharding solution is adaptive/dynamic.The nodes forming the beacon shard are specialized nodes, they have higher HW requirements (storage, bandwidth, processing power) and each of them is connected directly to validator nodes from one or multiple shards ensuring as well the synchronization of these nodes to the latest blocks in the beacon chain. Validators inside shards are connected through the p2p network. This achieves network sharding by optimizing communication over the network to interested parties. Beacon nodes will propagate the attested beacon blocks on the canonical chain to all beacon nodes and proposers in the network, while the propagation of a proposed block for shard X will only be done inside shard X.TimelineIn Serenity, the timeline is split into epochs, each epoch being further split into slots. In each slot (estimated at 8 seconds) there is a different proposer. It is not clear yet how many slots will be in an epoch, but there are some computations done with 64 (Prysmatic\u2019s consideration), 128 or 1024(Justin) slots, which would translate into an approximate 8, 16, 136 minutes epoch duration.In a sequence of slots, the ordering of proposers and the members of attester committees for each shard is known minutes before the assignment and comes from the beacon chain. It is computed using a reshuffling algorithm based on the beacon chain randomness source. Moreover, the same attester may be allocated to multiple shards at the same time, depending on the amount of stake, increasing the hw requirements for the attester as it will have to synchronize and process more data.Trusted or trustless?The shard validators (proposers, attesters) need to be connected to some beacon node to synchronize, while communication between validator nodes inside a shard is done through a p2p network.In case of cross shard transactions, actions need to be taken in multiple shards, the communication required for this could be managed through the beacon nodes, but this would become a huge overhead for the beacon nodes which already have lots of responsibilities. It is also not clear how the beacon nodes are incentivized to operate, as the staking scheme seems to target the validators, so it could end up with a small number of beacon nodes each connected to a large number of validators.The implementation choice of having the communication between validators and their beacon nodes directly through RPC, would imply some trust assumptions from the validators to the beacon nodes. This means all information that is fed to validators can be controlled/censored by the beacon nodes, and if the number of such nodes is small (especially when there are high requirements on hardware and not good enough incentive) then it could lead to some form of centralization, and possibly security vulnerabilities which need further analysis.Communication and storage\u00a0costThe communication and storage cost seems to be high on the beacon chain nodes, especially when there is a high number of shards, due to the requirement to synchronize multiple changing validators through direct connections, and (possibly) facilitate cross shard operations. There is also a limited time for synchronization, with only minutes before assignment of attesters, which further increases the requirements for bandwidth in order to keep up with all the communication.The high availability of the beacon nodes is also a must as there will be multiple attester nodes requiring the data in due time, more so for clients that connect to a single beacon node.Attesters also have high communication needs in order to validate blocks from possibly multiple shards simultaneously (if they have seats in more than one shard), while required to synchronize the shards\u2019 state in a limited time (in the order of minutes, which may be enough for checking data availability but not enough for full checks, that require more state information).Depending on the bandwidth of the validators and beacon nodes, the number of shards each beacon node maintains data for, the number of validators the beacon node is connected to and also the number of slots in an epoch, there could be an impact on the network liveness.Research is ongoing for checking for data availability, so that attesters do not need to synchronize all data and can only check if data is available and then rely on fraud proofs for validation. This is done mostly to enable light clients e.g. mobile phones to act as attesters, but there still needs to be a majority of nodes that do full checks, execute transactions (executors) in each shard and create the fraud proofs for the light clients.In this case the problem of communication and storage overhead still stands, the optimization done is only allowing other types of devices to act as attesters without too many requirements on the hardware, but the security of the network must not rely only on such devices.How feasible are mobile phones as validators?Due to all the processing required and especially the availability assumptions and communication cost, not all types of device can fill the role of a beacon node. For attesters, there is active research for checking data availability instead of downloading it, that could enable light clients such as mobile phones to fill this role.There is still the problem of online availability in the case of mobile phones as light clients, because of the intermittent connection to the internet, drain of battery due to data transfers and processing, etc. The unreliable accessibility could affect the protocol when these devices get selected into attester committees and are not responsive. In this situation the mobile phones don\u2019t seem a good fit for this role and could, instead of helping the protocol with the linear scalability coming from sharding, adversely affect its functionality due to their unpredictable and intermittent availability.The documentation mentions that attesters and proposers are randomly shuffled according to the randomness source from the beacon chain in each epoch. Because it is done only once per epoch there are more attack vectors (like DDoS-ing). When the shuffling happens, the communication cost is not trivial, each validator needs to download the required data for all new shards it has a seat as attester in, within a limited time, before it can attest to blocks. This could again prove counterproductive to manage with mobile phones which may not all have a high bandwidth and cannot be sustained for long, as intensive processing and communication could drain the battery fast.Leaving aside the responsiveness (high online availability) requirements, if smart phones would act as attesters, considering only the sheer number of such devices that could be targeted as light clients, we could end in a situation where the majority of the nodes in the network are light clients. Even though it can be argued that the security that light nodes can provide is almost at the same level with the full nodes, they still require the fraud proofs from fully validating nodes. It is not clear enough how the security of a shard or the network can be affected when the number of light nodes is much greater than the number of regular nodes.As a conclusion, mobile phones could still be used in blockchains but not as validators. They need to fill a different role, where the intermittent availability for the majority of such devices is not an issue, where they can work with lower bandwidth and intensive computations are not required.Finality/forkingThere is a high probability of forks appearing in Serenity shards so there needs to be some fork choice rule to decide the canonical chain if this happens. Serenity uses Latest Message Driven fork choice rule, where the chain starting from genesis, with the largest subset of unique attester votes is selected as canonical. The finalization is done then by Casper FFG in the beacon chain, where it adds cross-links for the blocks that already have 2/3 attestations (for them or for their descendants).Part 2.How does Elrond\u00a0compare?One of the most important considerations when building a state sharding solution for blockchains is the communication cost. It is critical to have it as optimized as possible in order to be truly scalable.Validators shuffling costRegarding the way validators are assigned to shards, Elrond is doing random shuffling of validators, but in order to optimize communication and storage cost, only up to 1/3 validators are shuffled from every shard at the end of each epoch. Because the allocation of nodes to shards is also buffered, there is actually no liveness penalty. Serenity could achieve the same effect of continuous liveness with gradual reshuffling of older validators, if the number of slots per cycle/epoch (time until next reshuffle) is large enough.Serenity defines the duration of one epoch as a fixed number of slots considered for proposer assignment, each lasting for 8 seconds. There is one proposer assigned per slot in each shard, and the configuration of these slots is known for the entire epoch in advance, so proposers are D Globally predictable, where D is the number of slots in the epoch. The same happens also for the attesters, although the time these are exposed could be less than for the block proposers. Elrond employs random sampling of validators and block proposer every round from the shard nodes. This way the time the validators are exposed is limited to one round (5 seconds), so only 1 Globally Predictable, which increases the security of Elrond against bribing and DDoS.Staking role in consensus group selectionElrond has a selection of validators for consensus groups based on the stake and rating. The stake can give a validator more chances of being selected into a consensus group but never more than one seat at a time. There is also a maximum stake after which the chances will no longer increase. This requirement could help with the creation of extra nodes to secure and scale the network. Another reason for this is again to optimize the communication and storage, as it is only possible to be a validator in one shard at a time per validator/machine. Serenity allows multiple seats for validators which may cause a selection of a validator as attester in multiple shards at the same time, with penalties on communication and storage (communication and storage requirements proportional with the number of seats).Nodes specialization. Is it a good\u00a0thing?Some parts of Serenity sharding model are similar with Elrond\u2019s proposal. In Elrond there is one shard maintaining the notarization of block hashes from all shards, which looks similar to what the cross-links are doing. In Serenity right now there is no clear incentive to run a beacon node, also beacon nodes have much higher requirements so it might be possible that running a beacon node may not be very attractive for users. In Elrond however, any node that stakes can act as a validator/block proposer for the metachain or shards. This can improve security as it will always be possible to assign a sufficient number of nodes in the metachain to maintain security.While in Serenity there are some trust assumptions and higher hw requirements for the beacon nodes, as they need to feed the data to their directly connected validator nodes, in Elrond any validator node can fill any role, of a metachain node or a shard node, validator or proposer. Elrond\u2019s p2p network topology holds both intra-shard connections and inter-shard connections, allowing Elrond to run in a minimal trust setup.The target clients for validators in Elrond are the consumer grade computers, there is also the intention of adding another role, that could be filled by smartphones, but this is still in research so it will be left out of this analysis.Sharding modelBoth Serenity and Elrond implement an adaptive solution including transaction, network and state sharding. Serenity has no clear model for ensuring the communication cost is optimized when new shards are formed or removed. This case is the most communication intensive for the network, as a lot of nodes would need to update their information, transfer the state related to the accounts managed by the new shards to the nodes allocated to the new shards, etc.One approach taken into consideration by Serenity is to wait until the number of registering nodes is enough for doubling the shards, before changing the shard count, in order to minimize such network reorganizations. The drawback of this approach is that, after doubling the shards a number of times, it will require a long time and a large number of nodes to increase (double) the number of shards yet again. In this case in order to include the new nodes into the slot assignment model, it would be required that the number of slots per epoch is not constant, but can vary depending on the number of nodes in the system.Another option is that the newly registered validators need to wait until the number of shards increases and they can be accommodated. But doing this when a large number of nodes is required to double the shards would mean that nodes lock their stake but are put to wait and cannot earn anything for an indefinite time. This would chase away potential new nodes from the start and detrimentally affect the growth of the network.With Elrond we have a clear model of how the network reacts to the cases of adding or removing shards. We are using shard splits for adding shards and shard merges for removing shards. The communication cost of splitting one shard is virtually zero, and the cost of the merge can be optimized as well (for more details how this is done check our whitepaper). The network reacts fast to the registration of new nodes, which can already be added to one of the available shards and can start processing after one epoch of synchronization.Moreover, because in Elrond the communication cost of shard splits is zero, there is no reason to delay adding new shards, we can leverage the linear scalability sharding can provide, so shard splits can occur much faster than in Serenity, whenever a new shard can be created. For example, if we need at least N nodes per shard, then whenever we have X*N(1 +(1/10)) we could already form X shards through splitting, and in case we go below X*N nodes do a shard merge.The same shard split and merge model Elrond uses could as well be used in Serenity to improve how fast the network scales. Even if the number of slots is not dynamically adjusted, the waiting time for registering nodes can be considerably decreased.Energy efficiencySerenity is still using the PoW chain, where the registration smart contract resides, meaning that even though it implements also PoS chains, as a whole it is still wasting energy for the time being. Elrond is fully PoS so energy efficient.ForkingIn Serenity forks are likely to happen in the shard chains, while in the beacon chain the blocks are finalized with a high probability (for finality there is still a dependency on the PoW blocks referenced by the beacon blocks). Forking in the shard chains could add more complexity for cross shard transactions, which are the majority in a sharded system.Elrond uses a pBFT like consensus, in conjunction with a Schnorr multi-signature scheme. The pBFT is done on a randomly sampled consensus group smaller than the size of the shard. The shard size is chosen sufficiently large so that it provides both reasonably fast processing and a probabilistic unfeasible long time to critical failure (where ratio of malicious nodes in consensus group is >2/3) which is also the only forking condition in the system.Our system is able to recover naturally from consensus stalls, and even though probability for critical failure is almost impossible, there is also a mechanism in place where the system can recover, with a bit of overhead.Final thoughtsThis article brings to light the importance of reducing communication costs when designing a viable scalable solution and contests trade-offs which could eventually lead to centralization issues.We have outlined a brief analysis of Ethereum\u2019s 2.0\u2019s proposal and have talked about several issues that could have serious subsequent effects if not addressed properly. We\u2019ve contrasted this with Elrond\u2019s overall approach and have made several suggestions that could improve their proposal.", "responses": "2"}, {"title": "Rapid Ethereum Dapp Development with\u00a0Next.js", "author_name": "Adrian Li", "link": "https://medium.com/@adrianmcli/rapid-ethereum-dapp-development-with-next-js-f6354400e4d4?source=search_post", "post_date": "Nov 22, 2017", "readtime": "4 min read", "upvotes": "1.1K", "content": "Rapid Ethereum Dapp Development with\u00a0Next.jsAdrian LiBlockedUnblockFollowFollowingNov 22, 2017Ethereum Dapp development with Truffle + Solidity +\u00a0Next.jstl;dr\u200a\u2014\u200aI made a boilerplate project for Ethereum Dapp/Smart Contract development called Truffle-Next. It\u2019s a Truffle Box and you can get it here.Update: I\u2019ve since rewritten the Truffle Box to use a Render-Prop pattern instead of the HOC pattern described below. Nevertheless, it should be straight-forward to use and understand.", "responses": "4"}, {"title": "ZkDai\u200a\u2014\u200aPrivate DAI transactions on Ethereum using Zk-SNARKs", "author_name": "Arpit Agarwal", "link": "https://medium.com/@atvanguard/zkdai-private-dai-transactions-on-ethereum-using-zk-snarks-9e3ef4676e22?source=search_post", "post_date": "Dec 18, 2018", "readtime": "8 min read", "upvotes": "1.4K", "content": "ZkDai\u200a\u2014\u200aPrivate DAI transactions on Ethereum using Zk-SNARKsArpit AgarwalBlockedUnblockFollowFollowingDec 18, 2018In this post, I aim to familiarise the reader with some tools to implement Zk-SNARKs on ethereum. For the sake of the illustration, I\u2019d be walking through our project that my team worked on during ETHSingapore; ZkDai - perform ZCash like private DAI transactions on Ethereum.Using ZkDai one can shield the transaction sender, recipient and the amount. We got the MakerDAO API sponsor prize for the project! Our submission, along with the demo video can be found here and the github repo here.Recently, a lot has been written on zero knowledge proofs, however in spite of that, the math behind zero knowledge proofs remains to be \u201ccryptic\u201d and hard to grasp. For an uninitiated reader, Introduction to zk-SNARKs and Quadratic Arithmetic Programs serve as excellent resources to start reading about Zk-SNARKs and this post will help the reader put them to practice while treating the math behind as a black box.What does a general-purpose succinct zero-knowledge proof do?Suppose that you have a (public) function C, a (private) input w and a (public) output x. You want to prove that you know a w such that C(w) = x, without revealing what w is. Furthermore, for the proof to be succinct, you want it to be verifiable much more quickly than computing C itself. Now, when a prover wishes to prove to they know an answer to the computation C, they will generate a proof using the proving key, public inputs (x) and secret input (w). When the verifier wants to verify that answer that the computation is indeed correct, they would verify the proof using the verifier key, public inputs (x) and proof.A Zk-SNARK computation needs to be initialized by a trusted party. This involves modifying the computation C into a circuit format and using a secret parameter lambda to generate the proving and verifying keys that are used later. Following this, lambda\u200a\u2014\u200aalso called the \u201ctoxic waste\u201d needs to be destroyed\u200a\u2014\u200aotherwise it will enable an adversary to generate fake proofs of the knowledge. For this reason, the Zcash team\u200a\u2014\u200aa fork of bitcoin that\u2019s based on zK-SNARKs and lets one perform \u201cshielded\u201d transactions conducted an elaborate ceremony to generate these keys. Zcash has optional shielded transactions that let you transfer hidden amounts to hidden addresses.ZkDai ImplementationThe implementation details behind ZkDai are directly inspired from the zerocash paper. Note that this is a very hacky 36 hour (sleep deprived and red bull infused) implementation, and it is possible for the approach to have flaws and(or) be highly inefficient in practice. I plan to iron out those kinks as I continue to work on the project.ZkDai has the concept of a secret note. A note is denoted by a tuple that is a combination of 2 elements\u200a\u2014\u200apublic key of the note owner (pk) and value of the note in Dai (v).Note = (pk, v)A note resides on-chain as (Hash(Note), Encrypt(Note)). The second element Encrypt(Note) is the note encrypted with the public key of the note owner (in practice the encryption public key will most likely be different from pk used above). The encrypted version of the note is for the owner to identify that a particular note belongs to them.Let\u2019s call Hash(Note) as the secret note. Since only the hashed secret note is saved on-chain, it\u2019s impossible to tell the pre-image that constitutes the hash and hence no one but the owner of the note is privy to the tuple (pk, v) constituting the note.Spending a ZkDai\u00a0noteThe ZkDai notes are spent like UTXOs. To transfer a particular value to a receiver, you select some secret notes whose net value is at least the value that you want to transact with. This value will be propagated to the receiver in form of a new ZkDai note and the leftover value will become a new secret note (like UTXO) assigned to your key.Now, this is where the zero-knowledge proofs come into picture. To be able to spend a particular note the owner needs to demonstrate the knowledge of:Ownership of the secret key (sk) that corresponds to the public key (pk) that a note belongs to.Value of the noteThe public computation C then returns the hash of the note\u200a\u2014\u200athat one that is also present on-chain. Putting it in the C(w) = x form of zero knowledge computation above, it becomesC(sk, v) = hwhere h = Hash(Note) and is publicly knownsk, v are private inputsIf you have a valid proof of this computation, you are in fact the proud owner of the secret note!A more specific case (but without the loss of generality) would be to send a value to a receiver using a single secret note. This would entail generating 2 new notes:N1 = (receiverPk, v\u2019) andN2 = (pk, v \u2014 v\u2019)Note N2 is the leftover change from the original note of value v, so like UTXOs, it will be assigned to the sender. So the 2 new private parameters for the zkp generation are receiverPk and v\u2019. Also, slightly modifying the computation C such that it returns 1 when C(w) == x; the proof is valid if C(x, w) = 1 where x is the public input. So for ZkDai, the computation becomesC(oldNote, newNote1, newNote2, sk, v, receiverPk, v\u2019, change)where oldNote, newNote1, newNote2 are public inputs.The zero knowledge computation C then looks likeC(oldNote, newNote1, newNote2, sk, v, receiverPk, v\u2019, change) {    pk = computePublicKeyfromSecret(sk)    oldNote == sha256(pk, v)    v == v\u2019 + change    newNote1 == sha256(receiverPk, v\u2019)    newNote2 == sha256(pk, change)    return 1}Once the zero knowledge proof is generated, it can be sent along with the encrypted versions of newNote1 and newNote2 in a transaction.Note that this transaction hides the transaction graph. Sender is hidden in the sense that you can use a new eth address each time to perform a transaction that sends the zkp on-chain. You only need to demonstrate the knowledge of \u201csk\u201d which is the secret key corresponding to the public key that owns the note i.e. zero knowledge proof is what proves ownership of a note, not the transaction sender. Recipient is always hidden since that information is encoded in the hashed note.Implementing the zkSNARK on\u00a0EthereumZokrates is a toolbox for zkSNARKs on Ethereum. It helps you create off-chain programs (zero-knowledge proofs) and link them to the Ethereum blockchain. First, we will setup zokrates on our local machine and run it as a docker container.git clone https://github.com/JacobEberhardt/ZoKratescd ZoKratesdocker build -t zokrates .docker run \u2014 name zokrates -ti zokrates /bin/bashAt the time of writing, zokrates is at version 0.3.1Now, we will write the computation function that a prover needs to prove (and the one that the verifier will verify) in the file zk-circuit.code. Some notes from ZoKrates docs before we proceed:The keyword field is the basic type we use, which is an element of a given prime field. A field value can only hold 254 bits due to the size of the underlying prime field we are using.The keyword private signals that we do not want to reveal this input, but still prove that we know its value.sha256packed\u200a\u2014\u200aA function that takes 4 field elements as inputs, unpacks each of them to 128 bits (big endian), concatenates them and applies sha256. It then returns two field elements, each representing 128 bits of the result. sha256packed is a SHA256 implementation that is optimized for the use in the ZoKrates DSL.We have to pass 512 bits of input to sha256. As a consequence, we use four field elements, each one encoding 128 bits, to represent our input. The four elements are then concatenated in ZoKrates and passed to SHA256. Given that the resulting hash is 256 bit long, we split it in two and return each value as a 128 bit number. The zk circuit will look like:Copy the zk-circuit.code inside the zokrates container.docker cp zk-circuit.code zokrates:/home/zokrates/Go to the zokrates container and compile the circuit. zokrates-compile compiles the circuit into flattened conditions and produces two files: human-readable \u2018.code\u2019 file and binary file../zokrates compile -i zk-circuit.codeCompiling zk-circuit.code...Compiled code written to \u2018out\u2019Number of constraints: 165257Now, we generate the proving and verification keys for the computation.zokrates setup performs a trusted setup for a given constraint system. It uses a generator function to generates these keys from the arithmetic circuit and \u201ctoxic-waste\u201d parameter lambda. (pk, vk) = G(\u03bb, C)../zokrates setupYou can check that 2 new files, proving.key and verification.key have been generated. The proving key can be made public for anyone to be able to generate proofs of the knowledge. Next, we will generate a verifier contract that will be deployed on the ethereum blockchain. Luckily, zokrates provides this functionality out of the box../zokrates export-verifierUsing verifying.key, it generates a solidity contract which contains the generated verification key and a public function verifyTx to verify a solution to the compiled program.Now we shall generate the zk-proof. I wrote a script that prints the compute witness command that should be fed to the zokrates cli to generate the requisite proof.The function getTransferZkParams(sender, noteValue, receiver, value) prints the compute-witness zokrates cli command that needs to be executed inside the zokrates docker container. For my example ofgetTransferZkParams(    \u20180x3644B986B3F5Ba3cb8D5627A22465942f8E06d09\u2019, // sender    \u20180xb\u2019, // value of the secret note    \u20180x9e8f633D0C46ED7170EF3B30E291c64a91a49C7E\u2019, // receiver    \u20180x9\u2019 // value to be sent);Running the script zokcmd.js, yields the command./zokrates compute-witness -a 232310020822901034104762510965330293111 290107346578087637545360782727286918188 910473606 239207701314920212136923811659422657801 0 11 210219292964116369102883671286459321076 227322991366389551999749449849806758625 2660197181 16319012648326391858874240100255177854 0 9 42022122505097917127364068979301637648 120910671520054972343429929459551033400 0 2Here each input is a 128 bit number and represented in base 10. Now, running the command in the zokrates container to generate the witness; I getWitness: ~out_0 1Now, to generate the proof that\u2019ll actually go as a transaction;./zokrates generate-proofThe proof is written to proof.json\u00a0.The next step is to send this proof as a transaction along with the encrypted versions of the 2 new notes. The script for doing the same can be found here.Finally, towards the end of the hackathon, I had 2 options\u200a\u2014\u200ato get a couple hours of sleep before the judging began or writing in the functionality to be able to convert your secret ZkDai (we were calling it liquidating) into vanilla publicly visible DAI token for the owner to spend freely. Needless to say, I chose the latter\u00a0:D The solidity code for the same can be found here. Details about gas, sample transaction etc can be found in the following tweet.I know I have glossed over some details. If you have any thoughts, questions or feedback, head to the comments section! If you\u2019d like to help me in developing ZkDai further, DM me on twitter. I would like to hear from you.", "responses": "7"}, {"title": "Dividend-bearing tokens on\u00a0Ethereum", "author_name": "Nick Johnson", "link": "https://medium.com/@weka/dividend-bearing-tokens-on-ethereum-42d01c710657?source=search_post", "post_date": "May 2, 2017", "readtime": "5 min read", "upvotes": "747", "content": "Dividend-bearing tokens on\u00a0EthereumNick JohnsonBlockedUnblockFollowFollowingMay 2, 2017My lawyer would want me to say this: The article below is about the computer science and software engineering aspects of writing a token contract. It is not securities or accounting advice; please do not take it as such. I\u2019m writing this as an individual, not a member of the Ethereum Foundation.One thing I\u2019ve seen come up frequently on the Solidity channel of late is the idea of dividend-bearing ERC20 tokens, and the calculations needed to support them. A naive implementation of disbursing dividends works something like this:struct Account {  uint balance;}Account[] accounts;uint totalSupply;function disburse(uint amount) {  deduct(msg.sender, amount);  for(var i = 0; i < accounts.length; i++) {    accounts[i].balance += (amount * accounts[i].balance) / totalSupply;  }}We\u2019ll ignore for a moment that you can\u2019t iterate over maps in Solidity to address the real issue: this function has to do work proportional to the number of token holders, which means you rapidly hit the block gas limit.With further work, it\u2019s possible to split this up into multiple transactions, but apart from being complex and prone to implementation bugs, it\u2019s still impractical for tokens with a lot of users and frequent dividends, and it wastes a lot of gas doing duplicate calculations for users who aren\u2019t making any transactions between dividend rounds.Fortunately, there is a better way\u200a\u2014\u200aand an excellent excuse to talk about one of the most useful design patterns in smart contracts: amortisation of work.A better\u00a0wayAny loop like the one in the snippet above should set your spidey-sense tingling, and the first thing you should look for is a way to amortise the work being done\u200a\u2014\u200athat is, to break it up over many other operations. In this case, instead of updating every user\u2019s account at once, we can keep track of the total dividends, and add a user\u2019s pending dividends when there\u2019s a transaction against their account. Here\u2019s a quick sketch of how it would work:struct Account {  uint balance;  uint lastDividends;}mapping(address=>Account) accounts;uint totalSupply;uint totalDividends;function dividendsOwing(address account) internal returns(uint) {  var newDividends = totalDividends - accounts[account].lastDividends;  return (accounts[account].balance * newDividends) / totalSupply;}modifier updateAccount(address account) {  var owing = dividendsOwing(account);  if(owing > 0) {    accounts[account].balance += owing;    accounts[account].lastDividends = totalDividends;  }  _;}function disburse(uint amount) {  totalDividends += amount;  deduct(msg.sender, amount);}Then, we make sure to apply the updateAccount modifier to all functions that modify an account balance, to update any associated accounts\u2019 balances before they\u2019re operated on by the rest of our code.Presto! All of our users automatically get dividends in a manner that avoids having to do an unbounded amount of work in any one transaction. If a user transacts infrequently, we even save net gas, since the user only needs to do one dividend calculation in total.There\u2019s still two problems with this, however: rounding errors, and the assumption of a fixed totalSupply.Rounding ErrorsThe code above makes the assumption that the dividend can be evenly divided across all accounts, with no rounding errors. This isn\u2019t true, of course, and the result will be a few wei lost to rounding errors.In the grand scheme of things, this is a trivial amount of money, but it does mean breaking the invariant that the totalBalance is the sum of all balances, which complicates reasoning about the contract, and will throw off any attempt to reconcile the contract\u2019s current balances. In general, it\u2019s not great to lose track of money, even trivial amounts of it.One solution to this is to explicitly keep track of a dividend account with its own balance. Whenever you pay out dividends to an account, subtract the same amount from the dividend account. The amount in the dividend account, then, is all the unclaimed dividends plus the rounding errors. The rounding errors are still effectively burned, but they\u2019re no longer unaccounted for.Changing the totalSupplyThe second complication arises if we want to be able to change the totalSupply, either to mint or destroy tokens, or so that the dividend can be paid from outside. The code above assumes that the total supply is fixed; if it isn\u2019t, users will get different proportions of dividends based on how the supply has varied since the dividend was issued.Can we fix the scheme above to work in the presence of a varying total balance? It turns out we can. To see how, it helps to start by analysing what we\u2019re actually trying to calculate.If we go way back to the original naive algorithm, we can describe the dividends a user receives over time as a running sum:(D_1 * B) / S_1 + ... + (D_n * B) / S_nWhere D_n represents the amount of the nth dividend, B is the user\u2019s balance (it doesn\u2019t change, because we assume we will take all dividends before sending or receiving funds), and S_n is the total supply at the time of dividend n.In our first refactor, we assumed S == S_1 ==\u00a0... == S_n\u200a\u2014\u200athat is, that the total supply never changes. That allowed us to rewrite the equation as:((D_1 + ... + D_n) * B) / SThat is, to sum up all the unpaid dividends and pay them all out at once. We can do a similar rearrangement without the assumption that the supply is constant, though, giving us this equation:(D_1 / S_1 + ... + D_n / S_n) * BThat is, instead of storing the sum of total dividends so far, we store the sum of dividend percentages so far. To calculate a user\u2019s dividends owing, we then calculate (totalDividendPercent\u200a\u2014\u200alastDividendPercent) * balance!One final issue remains: S_n will generally be larger than D_n, and we\u2019re working with integers, so all our percentages will round down to zero. This is easily fixed, however\u200a\u2014\u200ajust multiply both sides by a large constant integer. So our final equation is:(D_1 * X / S_1 + ... + D_n * X / S_n) * B / XTo minimise rounding errors, we pick a large number for X\u200a\u2014\u200asay, 10\u00b9\u2078. This gives us teeny tiny rounding errors, but still allows plenty of headroom for large token balances (with 10\u00b9\u2078 for X, we won\u2019t overflow until someone\u2019s balance exceeds about 10\u2075\u2079 tokens).The final code, then, looks something like this:const uint pointMultiplier = 10e18;struct Account {  uint balance;  uint lastDividendPoints;}mapping(address=>Account) accounts;uint totalSupply;uint totalDividendPoints;uint unclaimedDividends;function dividendsOwing(address account) internal returns(uint) {  var newDividendPoints = totalDividendPoints - accounts[account].lastDividendPoints;  return (accounts[account].balance * newDividendPoints) / pointMultiplier;}modifier updateAccount(address account) {  var owing = dividendsOwing(account);  if(owing > 0) {    unclaimedDividends -= owing;    accounts[account].balance += owing;    accounts[account].lastDividendPoints = totalDividendPoints;  }  _;}function disburse(uint amount) {  totalDividendPoints += (amount * pointsMultiplier / totalSupply);  totalSupply += amount;  unclaimedDividends += amount;}", "responses": "7"}, {"title": "Samsung is Building a Blockchain Mainnet based on\u00a0Ethereum", "author_name": "Michael K. Spencer", "link": "https://medium.com/blockchain-positive/samsung-is-building-a-blockchain-mainnet-based-on-ethereum-61175d9e9f07?source=search_post", "post_date": "Apr 29", "readtime": "3 min read", "upvotes": "1K", "content": "Samsung is Building a Blockchain Mainnet based on\u00a0EthereumMichael K. SpencerBlockedUnblockFollowFollowingApr 29Ethereum just got a vote of confidence in mid 2019. South Korean electronics giant Samsung is developing its own blockchain network which will likely result in its own token in 2020.Samsung is joining the fledgling token economy it would seem. Samsung according to sources, is thinking of a private blockchain, though it is not yet confirmed. It could also be public blockchain in the future, or some kind of hybrid\u200a\u2014\u200athat is, a combination of public and private blockchains.Samsung will Launch own\u00a0TokenRealistically this makes sense for Samsung. Projects like EOS, Tron and even Binance all have a founding at Ethereum, cementing the platform\u2019s richness and diversity.When the development of the blockchain is completed, Samsung may also move to launch a \u201cSamsung Coin\u201d token. This along with internal stablecoins from the likes of Facebook and JP Morgan. There is every reason to believe that in the 2020s, a thriving Token economy will complement the global economy in ways that will give blockchain and crypto a remarkable place in the next stage of the internet.It\u2019s highly probable that if and when Samsung develops a public blockchain in the future, then Samsung Coin could be traded publicly on cryptocurrency exchanges just like bitcoin (BTC) and ether (ETH). On platforms like Bakkt.Samsung Pay upgraded with Stablecoin LikelySamsung\u2019s blockchain task force has been in active development for at least a year, and is working on a number of projects. The intersection of payments and stablecoins is very bright, and Samsung Pay could be incorporated. Chat and stablecoins is another area of innovation where Telegram, Line and WhatsApp are all likely to have skin in the game among others.Samsung recently also invested 2.6 million euros ($2.9 million) into crypto hardware startup Ledger. In March, Samsung officially revealed the cryptocurrency wallet, which is compatible with ether (ETH) and ethereum-based ERC20 tokens, although notably not bitcoin in early glimpses.Samsung Coin\u2019 is currently in development but the timing and direction of the new product has not been confirmed. It will be at first powered by Ethereum. Samsung itself has not made an official statement on the matter but the speculation shows just how ubiquitous blockchain and the advent of tokens is becoming.Samsung Mainnet to be ETH\u00a0BasedWith Ethereum, startups and companies that want to explore blockchain don\u2019t have to do it from scratch. Ethereum is in this sense still the heart of crypto innovation, if not the soul of a digital asset the way Bitcoin is.Ethereum provides a platform for firms and startups to gain access to blockchain technology without building theirs from scratch. It wasn\u2019t that long ago that Samsung announced that its Galaxy S10 phone will support Ethereum (ETH). As we watch the evolution of altcoins and stablecoins mature, bigger companies are getting into the race.Samsung joins a wider list of corporate and financial giants reportedly eyeing bespoke crypto. More properly most of them will be stablecoins. The hype is real when major technolgoy companies on-board crypto and blockchain products in new ways. A\u201cSamsung Coin\u201d could certainly find useful application as a payment means on the company\u2019s app store and traded on cryptocurrency exchanges.Blockchain Adoption and Token Announcement on the\u00a0RiseThe company has revealed that its flagship Galaxy S10 smartphone will have a built-in cryptocurrency wallet. With Samsung readying a new ETH-based blockchain mainnet and cryptocurrency token, how long before Google and other smart phone companies act?Samsung recently participated in a $4 million investment round for ZenGo\u200a\u2014\u200aa smartphone cryptocurrency wallet app. Samsung just like Alibaba are been looking at Blockchain for quite some time. Like the proposed Facebook Coin, no one can know for sure how the \u201ctokenomics\u201d of a Samsung mainnet and digital asset might work. But chances are in the next few years, we\u2019re going to find out.", "responses": "6"}, {"title": "Co-evolving the Phase Shift to GameB by Founding The Ethereum\u00a0Commons", "author_name": "Rhys Lindmark", "link": "https://medium.com/@RhysLindmark/co-evolving-the-phase-shift-to-cryptocapitalism-by-founding-the-ethereum-commons-co-op-f4771e5f0c83?source=search_post", "post_date": "Dec 13, 2017", "readtime": "22 min read", "upvotes": "", "content": "Co-evolving the Phase Shift to GameB by Founding The Ethereum\u00a0CommonsRhys LindmarkBlockedUnblockFollowFollowingDec 13, 2017The goal of this article is to outline my upcoming crowdfunding experiment to be a Co-Steward of the Open-Source Ethereum Commons Co-op. Essentially: various people/projects will support me to facilitate cross-project collaboration. Why is that needed? We\u2019ll get there by starting super abstract (with the macro system context), defining a future world we want our children to live in, and then seeing why the Ethereum Co-op is my experimental first step. Here\u2019s that structure in bullets:Part 1, The Why: Transitioning Humanity to an Antifragile System that Internalizes ExternalitiesPart 2, The What: A Tech<> Society System that Funds Public Infrastructure and Actively Shapes IdeologyPart 3, The How: Bottom-up Crowdsourcing the Ethereum Co-opEssentially, if you\u2019re interested in shaping the macro Ethereum story, or in the question below, read on!Part 1, The Why: Transitioning Humanity to an Antifragile System that Internalizes ExternalitiesHmmm, k. So we (humanity) are in a very strange situation these days. On one end, things have never been better. Max Roser beautifully breaks this down in his quantitative historical analysis, The short history of global living conditions and why it matters that we know it. On any given metric of success, we\u2019re doing much better now than we were 50, 100, or 200 years ago. Hooray!https://ourworldindata.org/a-history-of-global-living-conditions-in-5-charts/We\u2019ve achieved this collective growth through primarily \u201cnon-benevolent\u201d means. As Nassim Nicholas Taleb says in Antifragile:Perhaps the idea behind capitalism is\u2026: the system facilitates the conversion of selfish aims (or, to be correct, not necessarily benevolent ones) at the individual level into beneficial results for the collective.However, I think that system won\u2019t work for the 21st century (#LateStageCapitalism). This is because we\u2019ve primarily achieved that growth through exponential technological progress that is capitalistically incentivized to ignore externalities. In other words, we\u2019re heading towards a non-antifragile cliff. As WaitButWhy says:The unfortunate thing is that the Human Colossus isn\u2019t optimized to maximize the chances of a safe transition to the best possible Planet 4 for the most possible humans\u200a\u2014\u200ait\u2019s optimized to build Planet 4, in any way possible, as quickly as possible.\u201dThis transition gets faster and faster as we become a hyper-networked organism. By 2020, 80% of the adults on earth will have a smartphone. This drastically increases individual rates of learning+value creation, while greatly expanding the number of people who can learn+contribute.https://www.slideshare.net/a16z/mew-a16z/7-7012345678Population_Adults_Mobile_Online_populationAt a high-level, this trend is good. (Democratize all the things!) So what\u2019s the issue? The negative externality is primarily at the highest system level: the Technology <> Society loop. This is my favorite way to think about our existence on Earth (and will show up later in this article). It\u2019s the idea that technology affects the texture of society, which in turn affects the kinds of technology we build. It\u2019s a reinforcing feedback loop, and it\u2019s getting faster (I recommend watching the whole gif):http://bit.ly/2khfsLRThe system above doesn\u2019t really necessitate fear/action. It\u2019s just two abstract concepts that make each other increasingly more so. But personally I find the end a bit disconcerting, in a Pandora\u2019s Box kind of way. Once we let exponential technology out of the bag, it\u2019s tough to contain it. (Kind of like that scene where Flubber goes wild and Robin Williams\u2019 robot assistant tells him, \u201cI think you gave Flubber a little too much free will.\u201d) 15sec clipSo we\u2019re at this convergence of a bunch of Technology (AI, VR/AR, biotech, crypto, etc.) that will drastically change our Society. That wouldn\u2019t be an issue, except that we may be neglecting the externalities of these technologies. Flubber is a fun example of technology and its negative externalities, specifically Creative Destruction Externalities. A Creative Destruction Externality is when we create some new technological innovation that changes/destroys the existing structures/systems. Joseph Schumpeter, who developed the concept, said: \u201cThis process of Creative Destruction is the essential fact about capitalism. It is what capitalism consists in and what every capitalist concern has got to live in.\u201d In the scene above, we can see this Creative Destruction Externality. Robin says \u201cit\u2019s amazing, it\u2019s miraculous\u201d (the technological innovation is good!), but Flubber breaks lots of things and escapes, likely changing society (negative externality bad).Let\u2019s look at a specific, simplified example of a Creative Destruction Externality circa 2017. AI is automating tasks (good!), but will remove blue-collar jobs (short-term bad). Blockchain will disintermediate middlemen (good!), but will remove white-collar jobs (short-term bad).http://bit.ly/2BCU8VBIn the simplified system above, we can see the Political Unrest created as a result of job loss. However, we can add various balancing forces to counteract the instability brought on my technological change (i.e. to internalize the creative destruction externalities). The system below shows two: Education and UBI.http://bit.ly/2ApyCTU. For more, see my presentation on #CryptoUBI https://twitter.com/RhysLindmark/status/881246103366193152If we want a stable future in the face of increasing technological change (and resulting creative destruction externalities), we need to, as the brilliant Daniel Schmachtenberger says: internalize the externalities. And this \u201cjob loss \u2192 political unrest\u201d externality is just one of many changes coming. (Others: Industrial Revolution \u2192 climate change. Aggregation Theory \u2192 centralization \u2192 no exit/voice. Blockchain-based decentralization of power \u2192 fragile power transition). So, what should our main goal be?In the face of massive converging technological change, we need to create a new antifragile system that internalizes externalities.Before I move onto part 2, I\u2019ll stigmergetically leave some additional reading here.If you\u2019re interested in more of this \u201cnew systems\u201d work, Daniel is probably the furthest along in defining it. Check out his Civilization Emerging series and recent FutureThinkers podcast.For more on thinking about humanity through time, see Spiral Dynamics, World After Capital, and Sapiens/Homo Deus.For more on bad game theory structures, see SlateStarCodex\u2019s Meditations on Moloch (plus my response). Or, to break them: Vitalik\u2019s Superrationality and DAOs.For more on Thinking In Systems (generally), see Thinking In Systems. (Who would\u2019ve thought?)Part 2, The What: A Tech<> Society System that Funds Public Infrastructure and Actively Shapes\u00a0IdeologyOk, so we\u2019re trying to create this sweet new Tech <> Society future where all this super fast technological change will result in a positive society, not a negative one. And to do that, we need to be super aware of externalities and try to internalize them. But how would we actually create that system, especially if we exist in a system that is primarily defined by its ability to externalize? How do we \u201cexit\u201d our current system to create another? We do this by:Funding public goods for the Technology side of this new futureActively shaping the Society side of the tech-society loop by telling stories, shaping ideology, building values, etc.Doing the above in a bottom-up way that leverages the 4B+ crowd for impact and speed.How do we fund public goods in a bottom-up way?Enter Ethereum.There are many ways to unpack and understand Ethereum, Bitcoin, cryptocurrency, and blockchains, but I believe Vinay Gupta has the best explanation. He views Ethereum through the lens of \u201cgenerative complexity\u201d\u200a\u2014\u200a\u201can analytical tool for analyzing the difference between systems that live and systems that stall.\u201d (Taken from this highly recommended 10min video segment starting at 20:45.) Vinay accurately states that this idea is \u201cquite slippery and hard to describe\u201d, but the idea essentially is this: when we want to create new societal structures/institutions/systems (when we want to \u201cexit\u201d), we can\u2019t just create the system itself, we also need to fund and co-create public infrastructure/public goods for the system itself.This public good infrastructure (what Vinay calls meta-structures) are crucial to build the new system. We can\u2019t just snap our fingers and create a new system. No, we need to co-evolve that new system with an infrastructure funding mechanism that enables the meta-structures for our new system to thrive.Traditionally (within nation-state capitalism), this infrastructure funding mechanism has been \u201cgovernments support the commons through a top-down taxation scheme\u201d. Here\u2019s what that looks like (with governments and corporations being the main actors):http://bit.ly/2BDSDGoHowever, how should we fund public meta-structures in a bottom-up blockchain world? In fact, Ethereum is awesome for this. As Vinay says: \u201cEthereum is by far the best set of mechanisms for building meta-structures. It\u2019s like a Swiss Army chainsaw for building meta-structures.\u201d Why is this true? For a couple reasons:You can create (and self fund) arbitrary trustless meta-structures on Ethereum (through smart contracts). Essentially you can say \u201cthis public protocol/utility should exist, right?\u201d And if the people agree, you can get funding to build it. (Through a token sale.)Then, creating a good meta-structures on Ethereum increases the utilization of ETH, increasing its demand/price, which can then be used to fund more meta-structures. (This is crucial. It is rarely the case that one gets monetizable value by providing for the commons. Usually it\u2019s a selfless act. Here, that\u2019s not required. Making great things for the Ethereum commons increases the price of your own ETH. A purely rational/selfish actor can make money off the common good.)With the above gains, we can formalize bottom-up self-tithing systems to fund more public meta-structures. (We don\u2019t have these self-tithing systems yet, but need them. See the CryptoPledge at the bottom of this article.)So, instead of the top-down taxation system described above, our Ethereum-based meta-structure funding mechanism looks self-imposed/bottom-up, with token sales as funding mechanisms for open-source. (Also see Vitalik\u2019s recent note on \u201ctax stickers\u201d.)http://bit.ly/2AU0GPqWhat Is Our Story of the\u00a0Future?I think a reasonable reaction to the self-imposed taxation above is\u2014\u201dYeah right! Like people are going to do that. lol nice try.\u201d And right now, given our current societal mindset, it\u2019s pretty much true. That\u2019s why there\u2019s a 2nd necessary aspect to creating our new future system. It\u2019s not enough that Ethereum is great at building meta-structures. We need to build out the rest of the story.This is the Society side of the Technology <> Society loop (our favorite loop!). In order to create a new system, we need to build out the story/society/ideology/values of the future (in addition to building out the infrastructure of it). This is essentially equal to the idea of Base and Superstructure (from Marxist Theory). This Base <> Superstructure system is the key reinforcing feedback loop that sustains capitalism (and why it\u2019s so hard to break out of it!). The Base (capital, technology, etc.) shapes the Superstructure (ideology, society, etc.), which in turn maintains the Base.https://en.wikipedia.org/wiki/Base_and_superstructureWhich means that we could change our initial Tech <> Society loop to look a bit more Marxist (like this):http://bit.ly/2jBMPoOThis story building (convincing the world to transition to a world of non-externalizing abundant commonism) is going to be tough. But necessary. As Vinay said in 2015: \u201cWhat I\u2019d like to do is build out the rest of the story so that, in 5 years, people frame Ethereum as something like Wikipedia, not something like Oracle.\u201d The phrase \u201cworld computer\u201d is a first step towards this story, but not nearly enough.So, our overall system we\u2019re trying to bootstrap looks like this:It\u2019s a Technology <> Society loop (it\u2019s a Base and Superstructure). All macro systems are.Within the Technology side, we can leverage a system like Ethereum to bottom-up fund public meta-structures.On the Society side, we need to co-create our new societal ideology.Updating my statement from Part 1, it now looks like this:In the face of massive converging technological change, we need to create a new antifragile [system, meta-structure funding mechanism, and societal ideology] that internalizes externalities.Here\u2019s some more reading around part 2:Evolution, Not Revolution. (On systems change.)Ben Thompson on another systems framing of this change (between Individuals, Tech, and Government).Focusing on Values in addition to Tech: Erik BrynjolfssonSee Diego Espinosa\u2019s articles on this shift: 1, 2Part 3, The How: Bottom-up Crowdsourcing the Ethereum\u00a0Co-opOk. So we kind of know what we\u2019re trying to build. A new Tech <> Society loop that internalizes externalities, co-built with a meta-structure public funding mechanism and a special emphasis on the values we\u2019re looking to create. How should we do this? Although there are lots of implementation details, the foundational idea is: create the new system by leveraging the crowd/building community in a bottom-up fashion. There are so many of us out there (4B+ smartphone users!). Let\u2019s help and empower each other to make this happen. Let\u2019s start by making an Ethereum Commons Co-op. I\u2019ll give an overview of its: mission, values, and tactics. (Note that these are all rough drafts and are likely to change!)MISSION of the Ethereum Commons\u00a0Co-opThe mission of this co-op is mostly outlined above. It is: To create a new antifragile system that makes humanity better as we create converging exponential technological change. That mission is pretty much as macro as it gets. If I were to be more specific (on the 3\u201310 year time scale), I\u2019d change the mission to be: To co-create Ethereum tech infrastructure AND values infrastructure as the foundation for antifragile system creation. (Essentially, this mission statement describes Ethereum meta-structure creation + society/superstructure creation, while the first mission statement describes the abstracted Tech <> Society loop.)This is what I mean by \u201ccommons\u201d in the Ethereum Commons name. We\u2019re actively thinking about the common good, about resources in the commons, and about breaking bad game theory problems (tragedy of the commons, arms races, etc.) that are the result of ignoring the commons. Let\u2019s not ignore them anymore.And by \u201cco-op\u201d I mean co-op in the traditional sense, where both ownership and governance are distributed. In our modern age, this co-op shifts into a platform co-op or a protocol co-op, where the thing which is being owned/governed is a platform or a protocol. The goal is not to have the 4B+ smartphone users be the object of some new system that they have no ownership/governance over. No, the new system should be reflective of a society where all can learn, create, and provide value. Where the system is created by those within it.VALUES of the Ethereum Commons\u00a0Co-op#1: DecentralizationDefining the values of any shared group is difficult. One of the first obvious values that comes to mind is decentralization. But that\u2019s a bit self-contradictory. By defining decentralization as a core value, we\u2019re acknowledging that the values themselves may be decentralized (i.e. self-defined). So the shared values may be more like individuals self-defining their value set along given shared spectra, rather than as binary statements. (Here\u2019s Vitalik on \u201cThe Meaning of Decentralization\u201d.)But why would we actually want decentralization as a value? This comes from a first principles mindset around our moral/political framework. Today, we\u2019re not using this mindset and people politically self-identify into 2\u20135 groups. We define things like: \u201cI\u2019m a libertarian, you\u2019re a conservative and our friend is socialist.\u201d But there\u2019s so much unnecessary societal tissue baked into those ideas. Those terms may have made sense 50, 200, 500 years ago. But today we have the ability to self-define in non-monolithic fashion. As Naval Ravikant states in a recent interview with Shane Parrish:I try not to have too much that I\u2019ve pre-decided upon. I think that creating identities and labels locks you in and keeps you from seeing the truth. I used to identify as libertarian, but then I would have to find myself defending positions that I hadn\u2019t really thought through just because they\u2019re a part of libertarian canon. The reality is that, if all of your beliefs line up into neat little bundles, you should be highly suspicious because they\u2019re prepackaged and put together. I don\u2019t like to self-identify in almost any level anymore. That keeps me from having too many of these so-called stable beliefs.So we can start to reject monolithic definitions of the past and self-define constructive gradients/spectra that we\u2019re currently on. That is what I mean by decentralization.Another great thing about decentralization as a value is that it aligns with Nassim Nicholas Taleb\u2019s core ideas in his book, Antifragile. If we start to redefine ourselves along new moral/value gradients, the question becomes: what should those gradients be? Nick Liow gives a great overview on possible relationship-defined gradients here (another example here). However, I think Taleb gives the best system-defined gradients in Antifragile. The most important one is \u201cSkin in the Game\u201d (Taleb has a book specifically dedicated to this coming out Feb 27, 2018). The idea here is that, when one is making an action/decision that effects future outcomes (i.e. most things), that person should be connected to both the upside of that decision and the downside. The reverse of this, is, as Taleb says: \u201cWhen he is right, he collects large benefits; when he is wrong, others pay the price.\u201d This is a very powerful concept and is essentially equal to the idea above that we should Internalize Externalities. Internalizing the externalities of your actions is equal to having personal Skin in the Game (i.e. if the externalities of your actions have been internalized, then the negative ramifications of your actions will affect you, and you will have Skin in the Game). This is why, to me, Skin in the Game is one of the core building blocks of our new value set. AND this concept is aligned with decentralization. One way to think of Skin in the Game is \u201cdecentralizing future outcomes across the catalysts of those outcomes.\u201d (Or as Taleb says: \u201cTrue equality is equality in probability.\u201d)In addition to Taleb, I\u2019m a big fan of decentralization as a value because it aligns with \u201cwhere the puck is heading\u201d in terms of both \u201cOrganizational Technology\u201d and \u201cOrganizational Ideology\u201d.\u201cOrganizational Technology\u201d are structures through which people can motivate and coordinate (taken from my podcast with Albert Wenger). Traditionally, we\u2019ve had more centralized forms of Organizational Technology like Firms, States, etc. But now we\u2019re seeing increasingly decentralized forms of Organizational Technology like Markets, Networks, (and now) Blockchains.From Albert\u2019s Blockstack Summit talk: https://www.youtube.com/watch?v=LgQT874KHuwIf Organizational Technology is the Tech side of the Tech <> Society loop, \u201cOrganizational Ideologies\u201d are the Society side. Like Organizational Technology, Organizational Ideologies have changed over time. The future of Organizational Ideology is called \u201cTeal\u201d. The idea is that we think of ourselves as a relationship-based living organism, driven by bottom-up self-management. Like Blockchain, it\u2019s quite aligned with decentralization as a value. See the top stage here:http://www.iterationsofjason.com/2017/07/reinventing-organizations-by-frederic-laloux/So, this is all to say that decentralization is likely a good value for the Ethereum Commons Co-op because:It self-referentially allows for debateIt gives us a blank slate upon which we can redefine our values from a 1st principles perspectiveIt is aligned with Skin in the Game and Internalizing ExternalitiesIt is aligned with the future of Organization Technology (Blockchain) and Organizational Ideology (Teal)To learn more about bottom-up decentralization, check out Reinventing Organizations, Spiral Dynamics, Machine Platform Crowd, and Managing for Happiness. (Or check out the Organization Design section of my podcast/article on this.)#2: TransparencyGiven the (likely) non-binary nature of values within a bottom-up co-op, what is the next most important \u201cvalue spectra\u201d we need to self-define on? My instinct for the next \u201ctop value\u201d is transparency. This is an often-stated value within the blockchain ecosystem, primarily as a response to the shadow qualities of blockchain: if we can be as secretive as we want, how secretive should we be? Like with decentralization, there are many sub-components of transparency that make it powerful. Let\u2019s check them out!Most obviously, transparency is necessary to be a platform co-op (you need to have transparency to know that ownership and governance are decentralized). This transparency occurs both at the actual mechanism level (how are things governed?) and at the information level (do members have the correct information to govern?). One can imagine transparency of governance mechanisms (i.e. we are using CarbonVote) without transparency of information needed to govern (i.e. it\u2019s difficult to find the relevant information).So, it\u2019s clear that transparency of information is a gradient (and is a curation problem). This information curation problem is actually a example of both \u201ca liquidity problem\u201d and an \u201casymmetry problem\u201d. More transparency leads to more liquidity (of information, capital, decision-making, etc.) and more symmetry (of outcomes, etc.). For a specific example, let\u2019s look at permissionlessness (which has more double ss\u2019s than Mississippi!). In the long-term, it would be great to have a permissionless co-op: anyone can learn and anyone can contribute. Democratize all the things to create hyper-liquidity! But in practice, this is also a curation problem\u2014what pull requests should be accepted? How do we determine who gets to speak in \u201cimportant conversations\u201d? These questions are difficult to answer, but in general, we should be striving for permissionless (and should be transparent around when and why we\u2019re permissioned).An additional concept resulting from transparency is cultural\u2014the best organizations are those that have the most trust (and transparency is key to creating trust). We can create an abundance of trust by either leveraging Technological Protocols that don\u2019t require trust (blockchain-based trustlessness) OR by creating Societal Protocols that make us trust each other more (through transparency). In other words:Tech\u00a0: Society\u00a0::Trustlessness\u00a0: Trust\u00a0::Transparent Blockchain\u00a0: Transparency as ValueIn fact, we\u2019re actually creating a specific kind of trust, namely \u201cvulnerability-based trust\u201d. This kind of trust is created by leaders being vulnerable/transparent about their weaknesses, which shows the organization that weaknesses are something to grow through rather than be hidden from. The most powerful organizations build trust through honest/frank/vulnerable/transparent communication.So, transparency is a powerful value because it:Addresses the privacy \u201cshadow quality\u201d of blockchainIs necessary for decentralized ownership/governance in a co-opPushes for democratization/liquidity by elevating curation problems like permissionlessnessEmphasizes vulnerability-based trust for long-term growthTo learn more:About a trust culture, see: An Everyone Culture, 5 Dysfunctions of a Team, Nonviolent Communication, Radical Candor, or the Team Communication section in my podcast/article on this.About trust on a more macro view, see: Alex Danco\u2019s 4-part series on the abstraction of trust.About cryptoeconomic primitives for curation, see: Simon de la Rouviere\u2019s Curation Markets or Mike Goldin\u2019s Token-Curated RegistriesFinally, let\u2019s look at a specific example of decentralization + transparency. I have these two \u201cpledges to decentralize power\u201d (decentralization) that I post on my Patreon/Twitter (transparency). These pledges are 1) I give 50% of my income after $45,000/year (where more income doesn\u2019t increase my happiness) and 2) I interview at least 33% women on my podcast (and follow at least 33% women). But each of these pledges are on a gradient (gradient as decentralization). If you want to give more/less of your money or optimize for other kinds of diversity, that\u2019s likely all good.#3: No Others?To be honest, I\u2019m not sure if there should be other \u201ccore values\u201d of the Ethereum Commons Co-op. These two values encompass many of the key concepts.TACTICS/METRICS of the Ethereum Commons\u00a0Co-opSo now we\u2019re (finally?) into the actual \u201chow\u201d of this. I like to imagine these as \u201cexperiments in the commons\u201d based on the underlying intuition that: \u201cif we want to beat bad game theory problems like tragedy of the commons, we need to have people in the commons\u201d. I\u2019m not sure about the perfect way to bucket these experiments, but I believe they breaks into the three categories from above:High-Level Tech<>Society System DesignMeta-Structure CreationStorytellingFor now, I\u2019m going to mostly ignore Storytelling-specific actions because: a) I do that on my podcast, Creating a Humanist Blockchain Future and b) Purely by funding/exploring ETHCommons, we\u2019re telling a story about the future here. For the other two, my primary goal is to provide a Schelling Point-like structure where anyone that wants to learn/contribute can do so in a shared space\u2014i.e. trying to create an environment that empowers and enables the crowd. Many of these shared spaces already exist. Things like: Twitter, Medium, and Messaging (Gitter, Slack, RocketChat, Riot). But there don\u2019t seem to be many common spaces for things like backlog/project management (Trello, Asana), file management (Google Docs/Google Drive Folders), or in-time learning (group calls).There are lots of options for KPIs here. Long-term they are things like: SDGs met, # of people w/ UBI, amount of money going towards public goods, etc. For now though, my initial instinct is to stay within our locus of control and make the KPIs: # of people in cross-project collaborations + # of people in the ETHCommons Co-op. With that in mind, here are my primary initiatives (each with a call to action):Maintain an Ethereum Commons Resource Doc that contains all cross-project/commons initiatives. Please add to it!Maintain an ETHCommons Trello Backlog that makes funding public infrastructure more liquid. Preethi Kasireddy\u2019s Fundamental Challenges with Public Blockchains is a good start. This is the first step towards Trent McConaghy\u2019s Civilization Map towards Self-Actualization. Right now it just has voting, but later we\u2019ll use bounties (through something like Gitcoin) and long-term funding (through StakeTree/Giveth DACs/OpenCollective). Please add to the Trello or vote!Expand membership in the Ethereum Commons Co-op. We\u2019re especially interested in individuals who feel \u201cisolated\u201d in the ecosystem\u00a0:). We already have some excited folks and are trying to keep it small at the beginning, so if you\u2019re an interested project or individual, please apply here!Help project leads on existing cross-project collaboration (Radar Relay/0x w/ WETH, Santiment w/ Project Transparency, Aragon w/ RocketChat migration). If you lead another cross-project collaboration, reach out! (rhyslindmark [at] gmail [dot] com)Facilitate cross-project collaboration around Cryptoeconomic Primitives, Governance, SystemDesign, Diversity, and GeoCommunity (conferences + meetups). I\u2019m going to be hosting \u201ccircle\u201d calls on these topics. If you\u2019re interested in learning more or becoming involved, join the Cryptoeconomic Primitives Gitter, the Governance Gitter, or the ETHCommons Gitter (for SystemDesign, Diversity, and GeoCommunity).Explore the overlap between Effective Altruism + Blockchain. 1) Research to see if \u201cpositively shaping crypto/blockchain\u201d should be a cause area. 2) Advising the creation of a \u201cCryptoPledge\u201d, which is a self-tithing pledge for crypto individuals/businesses to give back to the system (see Giving What We Can, Founders Pledge, and Pledge 1%). I\u2019ll say more at the beginning of January on where I\u2019m giving my money (but you can imagine it as funding the ETHCommonsBacklog). If you\u2019re interested in this overlap, join this EA Facebook group!Additional Notes:How can I support this project? (How am I being paid?)I am being paid \u201cby the crowd\u201d through my StakeTree (which is like a Patreon for ETH). Although I like how many large companies have funded open-source software, I explicitly want to be funded by the community commons. I\u2019m committing to work 10 hours/week at $50/hour for an 8-week pilot (running through ETHDenver\u2014Feb 18). If you would like to support this work, please do so through my StakeTree! If you do, please email me (rhyslindmark [at] gmail [dot] com) so I know who you are. Note: Any \u201cextra\u201d money (from ETH appreciation or over subscription) will go to ETHCommons funding. (This is a variant on the CryptoPledge.) The projects below have already supported me in this.Or, if you\u2019d just like to stay updated, follow me on Twitter or subscribe to updates here:Other Related Work That I\u2019m Doing:Co-organizing ETHDenver Hackathon + Workshops, Feb 16\u201318. We expect this to be the \u201cnext ETHWaterloo\u201d (thanks to Liam, Mark, Ameer, and the rest of their team for all the help!). In addition to awesome workshops like cryptoeconomic primitives and bonding/staking, we\u2019re going to experiment by having other kinds of \u201cmaking/contributing to the Ethereum ecosystem\u201d, like research, UX, etc. And we\u2019re committing to the decentralization of the ETH ecosystem by pushing for diverse attendees.Creating a Humanist Blockchain Future, my philosophical systems interview podcast (with pledges/memes to decentralize power).Other Random Notes:On naming: I\u2019m not sure exactly what my \u201ctitle\u201d should be here. Founder doesn\u2019t seem right. It\u2019s too hierarchical, it ignores all the people I\u2019m standing on the shoulders of, and it goes against the idea of leveraging the crowd. So, right now, I\u2019m trying \u201cco-steward\u201d. (Another thing I\u2019ve played with is \u201cMeta Community Manager\u201d.) In general, I really like pushing \u201cco\u201d as a prefix. Here\u2019s a funny longer title (that I kind of love): Co-Evolving as a Co-Steward of the Open-Source Ethereum Commons Co-OpOn overlap with other similar initiatives: There are a couple similar models to this one. Something like ConsenSys is relatively similar (co-ownership across hub + spokes), as are many other crypto VC firms/funds (CoinFund, Cofound.it, etc.). The Web3 Foundation is maybe my favorite and most aligned version of this. In general, I try to think about these related entities the way I \u201cwant\u201d all of us to think: as forked groups co-evolving towards a shared outcome. i.e. I\u2019d love for the groups above to succeed. I\u2019d love to share knowledge with them. I\u2019d love to collaborate with them to understand where we align and don\u2019t.On scoping to Ethereum: I\u2019m scoped to Ethereum primarily because it\u2019s the first smart contract platform that enables meta-structures (and has a large network effect). But I\u2019d love to co-evolve with something like BlockstackCommons, and eventually see this turning into BlockchainCommons and then GlobalCommons. Essentially, I agree with Zooko\u2019s comment on why he\u2019s advising Tez0s, even if they compete with Zcash: \u201cThe network is bigger than any particular cryptocurrency\u200a\u2014\u200athe network is all cryptocurrencies. In fact, the network is much bigger than that\u200a\u2014\u200athe network is all of the scientific and economic activity of all of this planet\u2019s people.\u201dLegal technicalities on the phrase \u201cEthereum Commons Co-op\u201d: The goal here is to make sure I\u2019m trying my best to comply with legal requirements around this work. Here is what I know (as of 12/13/17). This project is not sponsored by The Ethereum Foundation in any way. As far as I can tell, using a modified Ethereum logo (the logo flipped 90 degrees super-imposed on itself) is compliant with the Creative Commons attribution 3.0 license (guidelines here). And, as far as I can tell, using \u201cETH\u201d (like ETHGasStation, ETHWaterloo, etc.) or \u201cEthereum\u201d (like This Week in Ethereum, Ethereum Denver, etc.) is ok, but I\u2019m checking with Ethereum Foundation folks, just in case. Also, this \u201cco-op\u201d is not technically a co-op yet. (In fact, it\u2019s just me!) Over time, we\u2019ll see if it makes sense to turn it into a co-op, B Corp, non-profit, etc. UPDATE (12/22/17): I have checked with the Ethereum Foundation around this. I\u2019m adding the following language: The #ETHCommons Logo is a derivative work from the original Ethereum logo. This logo is also licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. (Original is 3.0, ETHCommons is 4.0.)On tokenization and investing in this project: You can\u2019t invest in ETHCommons Co-op in the traditional sense (there are no shares). Right now, the only way to \u201cinvest\u201d in this work is by buying ETH and hoping it will appreciate as a result of this work (see above: Ethereum as a \u201cswiss army knife for building meta-structures\u201d). In the future, we may experiment with ETHCommonsCoin, likely for governance. We also may experiment specifically with RhysCoin (again). And super long term, I\u2019d love to have Skin in the Game/Internalizing Externalies with some sort of AntifragileHappySystemCoin.On shadow qualities, and what I\u2019m missing: By being hyper focused on ETHCommons work, I\u2019m definitely missing lots of perspectives/ideas here. The key one for me is that I don\u2019t reference many females. I reference Taleb, Schmachtenberger, Marx, Buterin, Gupta. I need to work more to incorporate Julia Galef, pia mancini, Zeynep Tufekci, Preethi Kasireddy. (Initial thought: in 2018, I need to read more books by women!)If you have any questions/comments, please email me at rhyslindmark [at] gmail [dot] com. I love constructive/critical/brutal feedback\u00a0:)Thanks!", "responses": ""}, {"title": "Is It Still Profitable To Invest In Bitcoin Or Ethereum?", "author_name": "The Cryptocurrency Consultant", "link": "https://medium.com/altcoin-magazine/is-it-still-profitable-to-invest-in-bitcoin-or-ethereum-3f35e0f06149?source=search_post", "post_date": "May 16", "readtime": "8 min read", "upvotes": "6.6K", "content": "Is It Still Profitable To Invest In Bitcoin Or Ethereum?Analysis of the two most popular blockchain projectsThe Cryptocurrency ConsultantBlockedUnblockFollowFollowingMay 162018 was not a good year for the Bitcoin. By December 2017, the cryptocurrency had peaked and was worth almost $19,000. At the beginning of 2018, it still stood at more than 17,000 US dollars at times, but in December it was only worth around 3,200 US dollars in some cases. Will the exchange rate recover and if not, in which cryptocurrency should one invest in 2019?For the best way to store cryptocurrency use Ledger Nano X, which is shipping\u00a0now!Photo by Thought Catalog on\u00a0UnsplashShould you even invest in cryptocurrency at\u00a0all?Before turning to the question of which cryptocurrency to invest in 2019, let\u2019s briefly ask whether someone should do this at all. Because there are several reasons against such an investment.There is no \u201creal\u201d value behind a cryptocurrency, i.e. no machines, patents and land as with a stock corporation. A problem that also affects all traditional currencies. If people lose confidence in the euro, a 100 \u20ac bill will eventually be nothing but paper.However, the Euro is clearly less volatile than the Bitcoin and other cryptocurrencies. A large danger is thereby the fact that more than 95 percent of the Bitcoins only approximately 4 percent of the users belong to. These players, therefore, have gigantic market power. They have a self-interest in not letting the currency fall too strongly, but under circumstances, they could also take high losses in order to secure their profits before a further price decline also eats them up.Bitcoin and other Altcoins still have great growth potential in 2019, especially in recent weeks when Bitcoin has risen from $5200 to $7200. The bear market is over, it\u2019s time for the bulls.Bitcoin and its potentialDid you\u00a0know?If you had invested 100\u20ac in crypto currencies like Bitcoin in 2010, you would have tokens worth about 1.025.556,33\u20ac today! Find out now how to invest in cryptos in\u00a02019.Why were Bitcoins invented?Since the Internet was invented in the \u201990s, access to this medium has grown tremendously. The door to the virtual world and thus a worldwide trade is open. The worldwide trade with different currencies makes payment transactions more difficult, as often high fees and processing time of several days are not uncommon.With Bitcoins, these worries are a thing of the past. With the virtual currency, it is possible to send a transaction from Germany to Japan within a few minutes for an incredibly low fee. Here no intermediaries like banks and the state are needed, but it can be sent directly from a wallet (\u201cvirtual purse\u201d) to a destination address of another person.The disadvantage of this, of course, is that an Internet connection must be available, regardless of whether it is provided via the laptop, the tablet or your own mobile phone. Furthermore, cryptocurrencies are popular attacks for hackers. It was not uncommon to read in the headlines that large crypto exchange exchanges such as Coinbase or Poloniex had stolen considerable amounts of money. This makes it all the more important to have a hardware wallet. This means that you carry your current account balance on a USB stick or other storage device including your passwords.The acceptance of Bitcoin increasesIrrespective of which heights the Bitcoin shoots to during the next run: The still enormous market capitalization of the coin of over 60 billion euros speaks for itself. The investor base does not intend to say goodbye to Bitcoin as soon as possible. Many people continue to believe that the Bitcoin Market is still unfolding its potential and that the market is still at its beginning.Also for new price increases speak the many positive signals, which pulled themselves in the past weeks and months by the news: the acceptance of cryptocurrencies rises\u200a\u2014\u200aalso with the regulatory authorities. Bitcoin Investment Trusts are no longer a rarity. Possibly the next price increase is even imminent.Good time for BTC Investing?Which brings us to the benefits: Investing in Bitcoin 2019 can pay off extraordinarily right now because the general skepticism towards BTC Investing is great. With a little luck, those who invest now will be among those who got on board before the next big hype\u200a\u2014\u200aand will be happy about big profits after a while. Expressly: That doesn\u2019t have to happen, but it can.The advantages of blockchain technology cannot be denied: Bitcoin is a decentralized, digital currency that passes over the middleman (financial institutions and banks) and makes it possible to participate in trade worldwide even without a bank account of one\u2019s own: a democratic currency model in the best sense of the word that can hardly be stopped. Because it is not considered possible to manipulate the Bitcoin with a hack using the current technical means. Bans can still become seriously dangerous for Bitcoin: As long as only a single computer mint the Bitcoin, it remains tradable.Ethereum the not so silent competitorWhile Bitcoin is a pure cryptocurrency, Ethereum can do more. Ethereum intends to use its technology to replace third parties who store our personal information. Ethereum\u2019s goal is to decentralize our personal information.Here is an example: Some of us may use online document services or online work platforms to work together on projects. Others store their information such as photos, insurance letters, invoices, etc. in the Microsoft or Apple cloud. We, therefore, transfer our data to third parties and trust both the data protection and the integrity of the data.Whether this is really guaranteed cannot be checked by us. Ethereum\u2019s vision is that the same functionality that Google, Apple and Facebook offer will be created through new distributed applications based on Ethereum technology that will return control of our data to us, the owners of the data. No one but the owner will be able to access or modify the data. More about this and the technical background later.Ether and Ethereum\u200a\u2014\u200athe technology of the\u00a0future?For many, Ethereum is the successor to Bitcoin. This can be seen, among other things, in the fact that the market value is already (currently) about half of the Bitcoin. Whether and when the Bitcoin can be overhauled and the so-called \u201cflipping\u201d is achieved is difficult to predict. From our point of view, Ethereum provides a technology that will be groundbreaking in the future. However, both Ethereum and the cryptocurrency Ether are still in a relatively early development phase. So there are still some important challenges to overcome before a stability similar to that of the Bitcoin is achieved.As the number of Ethereum-based applications increases, the question arises what happens to poorly programmed smart contracts that disrupt the network or, in the worst case, block it. How does the Ethereum Virtual Machine deal with this? Due to the decentralized leitmotif, manual intervention is not possible. This contradicts the nature of the blockchain, which is supposed to be unchangeable.Another, so far unsolved topic is the total number of tokens. Bitcoins are limited to a maximum of 21 million tokens. Nothing will change here. With the ether, however, it is not yet clear how many tokens there will be. Currently, there are over 80 million tokens, 72 million of which were created in the Genesis crowd sale. Moreover, the \u201cDifficulty Bomb\u201d, which is supposed to prevent inflation, is only just beginning to take effect. This means that the more the computing power in the network increases, the more difficult the cryptographic computing tasks that the miners have to process become. Whether the difficulty bomb of the ether \u201cworks\u201d or whether the slowdown reduces production too much (due to a lack of financial incentives for the miners) remains to be seen.Another problem that has arisen due to the rapid growth of the ether is scalability. Thus, the Ethereum network has to cope with rapidly increasing user numbers. On the day before the crash, 20.06.2017, more than 300,000 ether transactions were carried out, a record for the only two-year-old cryptocurrency.For all open questions: Ethereum is only at the beginning, in its second of four phases, and thus has enormous development potential. It has the chance to become the programmable money of the future. For this, however, the tasks described above have to be solved. In addition, there is a need for strong cohesion in the community, which must support the changes to be implemented. The potential is there in any case.Good time for Ether Investing?As paradoxical as it may sound: Above all the great skepticism of the present gives rise to the hope that a current investment can pay off properly\u200a\u2014\u200aat least in the long run. Those who invest now may be among those who profit from the next big hype\u200a\u2014\u200aprovided they interpret the signs correctly and get out again, while everyone else invests excitedly.So much for the theory. The advantages of blockchain technology are numerous and you probably already know them: Ethereum is a largely decentralized, digital currency that bypasses the middleman (financial institutions like banks) and allows people all over the world to develop dApps on the Ethereum ERC20 standard. Because investments are also possible without a bank account, people who do not have a bank account are given the opportunity to participate in an investor market for the first time. At the same time, the Ethereum blockchain can hardly be manipulated by a hack due to its technical architecture. At least with the currently available technical means, this is almost impossible.Earning with Ethereum: numerous possibilitiesThere are many different ways to earn money with Ethereum. Investing in Ethereum 2019 is possible through Ethereum Investment Trusts, but also through Banking on Ethereum. Alternatively, you can trade Ethereum derivatives\u200a\u2014\u200aor simply buy Ethereum\u2019s cryptocurrency Ether directly.If you buy Ethereum or invest in Ethereum shares, your investment in Ethereum will depend exclusively on the market price. The situation is different with Ethereum derivatives trading with crypto brokers such as eToro: here you can still earn with Ethereum even if Ethereum falls. When trading with CFDs you speculate directly on the price behavior of Ethereum without buying the cryptocurrency yourself.ConclusionBitcoin and Ethereum are still a good option to invest. The bull market of the last weeks only confirms this. But before you invest please always do your own research and do not just jump on the hype train like everyone in 2017. Think about your decisions and take a profit from it.If you like what you read be sure to \u2665 it below\u200a\u2014\u200aas a writer it means the world. Also have a look at my other posts\u00a0:)Explosive Growth: Facebook Coin Could \u201cTriple\u201d Crypto UsersChanging Stable Coins: Bye Tether, hello Facebook and J.P. Morgan Coinmedium.comTrezor vs Ledger\u200a\u2014\u200aThe best way to store Bitcoin and other cryptocurrencyHow to make sure your newly acquired cryptocurrency is safe from hackers? This guide compares the most popular hardware\u2026medium.comA Crypto Fan As US President?Andrew Yang wants to go to the White Housemedium.com", "responses": "2"}, {"title": "Blockchain Use Cases and Applications by\u00a0Industry", "author_name": "ConsenSys", "link": "https://media.consensys.net/enterprise-ethereum-blockchain-use-cases-and-applications-by-industry-3914d1210049?source=search_post", "post_date": "Nov 14, 2018", "readtime": "17 min read", "upvotes": "792", "content": "Blockchain Use Cases and Applications by\u00a0IndustryThese major sectors are already deploying Enterprise Ethereum blockchain solutions to solve industry problems.ConsenSysBlockedUnblockFollowFollowingNov 14, 2018\u201cThe value of an idea lies in the using of\u00a0it.\u201d\u2013Thomas EdisonThis is Part 2 of a 10-part series on Enterprise Ethereum. Part 1, \u201c11 Ways Ethereum Can Benefit Enterprise,\u201d discusses the specific capabilities of the Ethereum blockchain and outlines the future of the enterprise Ethereum ecosystem.Blockchain technology has unleashed the wave of \u201cwhat ifs\u201d for both local communities and global enterprises. What if businesses could increase the speed and resiliency of payment systems while reducing the overall cost of those systems? What if governments could deliver high quality services to their citizens without a single piece of paper? What if manufacturers knew exactly where their precious minerals and metals were sourced? The task now is getting from what-if to how, from concept to solution.A blockchain\u200a\u2014\u200aas both a data structure and alignment protocol\u200a\u2014\u200ais a powerful idea, but all too often fodder for popcorn presentations and public relations. This article is about actual enterprise solutions that are deployed on Ethereum.If your organization is not considering a blockchain solution, understand why not. For some IT environments, a blockchain is overkill and a distributed database will suffice. But for large organizations that participate in networks and manage sensitive transactions between multiple parties, the right blockchain implementation could mean not just security and scalability, but survival.Enterprise Ethereum: Benefits, Use Cases, and ApplicationsEthereum holds four key promises for enterprise. Enterprise Ethereum can:Reduce the cost of trust and coordination with external partiesUnlock new business models through multi-sided markets and digital assetsImprove business network accountability and operational efficiencyFuture-proof businesses against antiquated process modelsIn \u201c11 Ways Ethereum Can Benefit Enterprise,\u201d we explored Enterprise Ethereum\u2019s capabilities in depth. Considering these capabilities, the key questions are now 1) which industries stand to gain the most from Ethereum and 2) what does enterprise Ethereum look like in action?Over the past few years, ConsenSys has become an incredibly active hub of blockchain development, currently supporting more than 50 blockchain startup projects up and down the Ethereum stack. ConsenSys Solutions, which began as a small enterprise consulting team in 2016, is now our global enterprise arm that has helped financial institutions, governments, nonprofits, and startups build, test, and deploy public and private blockchain solutions, from real-time gross settlement systems to digital land registries to identity management platforms. ConsenSys Solutions offers education, advisory, and development services, as well as opportunities for joint ventures and co-creation.Here are what we believe to be the most pertinent blockchain use cases for enterprise, and examples of what we\u2019ve helped forward-thinking organizations deliver.Banking and Financial ServicesProblemFor the banking industry, the cost of providing the utmost reliability, availability, and resilience against attacks or equipment failure is high. If a central bank\u2019s servers go down, a country\u2019s payment clearing system would collapse. Large institutional banks routinely spend upwards of $200 million dollars a year on cybersecurity. Reconciliation payments\u200a\u2014\u200athe balancing between different sets of accounts\u200a\u2014\u200aare also byzantine and inefficient. A single payment can involve four different transactions to move money from one account to another. Moreover, the burden of reporting on suspicious transactions falls on banks.OpportunityIf every bank in a payment network transacted through the decentralized execution space of a blockchain, the network would have no single point of failure: a country could maintain its interbank payment network even if one or several servers go down. Banks could transact directly, reducing friction and decreasing the odds of double-spending and fraud. A blockchain\u2019s distributed and immutable ledger also simplifies regulatory reporting. Regulators could pull data in real-time from a single source of truth.Blockchain benefits for banking across three value dimensions.Applications for banking and financial servicesSantander\u2019s cash tokenization utility. ConsenSys has collaborated with Santander Bank to develop a cash tokenization utility and real-time payment system for domestic and international payments on Ethereum. Payments are cleared, settled, and disbursed in 10\u201315 seconds.Project Ubin. Last year, ConsenSys partnered with the Monetary Authority of Singapore to develop and open source software prototypes for decentralized interbank payment and settlements with liquidity savings mechanisms.Project i2i. ConsenSys partnered with Union Bank of the Philippines to build a closed-loop crypto-cash solution for rural banks in the Philippines on Kaleido, an all-in-one enterprise SaaS platform.Project Khokha. In a consortium with seven commercial banks, the South African Reserve Bank conducted a proof-of-concept trial with Quorum, an enterprise-grade implementation of Ethereum, to process the typical daily volume of payments with full confidentiality and finality in less than two hours. Adhara, a ConsenSys venture, is building a multi-currency liquidity management and international payments platform to optimize banks\u2019 capital deployment, manage risk, and leverage liquidity effectively and globally.Project Endor. ConsenSys recently partnered with capital raising platform CapBridge on Project Endor with the aim of developing a fully compliant securities exchange on the public Ethereum blockchain.Commodity Trade\u00a0FinanceProblemRapid globalization has outpaced the trade finance industry\u2019s ability to standardize and digitize its system of record-tracking. The exchange of commodities\u200a\u2014\u200aall with very unique regulations, shipping specifications, and certification requirements\u200a\u2014\u200ais currently managed across different borders and jurisdictions on a paper-based system that is prone to fraud and leaves stakeholders waiting for payment.OpportunityA blockchain would serve as as secure, streamlined, and paperless platform on which only authorized parties\u200a\u2014\u200abanks, commodity traders, inspection companies, and governments\u200a\u2014\u200acould exchange data and transaction records.ApplicationAfter a series of proven use cases around soya beans and crude oil, fifteen of the world\u2019s largest banking and commodity companies have officially announced the formation of komgo, the blockchain-based trade financing network which is powered by Kaleido\u2019s leading enterprise blockchain as a Service platform. By sharing user data via end-to-end encryption and digitizing letters of credit, komgo is restoring confidence to the KYC process and providing assurance to banks that temporarily own commodities as collateral on their loans.Supply ChainProblemGlobal supply chains today\u200a\u2014\u200awhich support everything from fast-moving consumer goods (FMCG) to food and beverage (F&B)\u200a\u2014\u200aare inefficient, poorly tracked, and oftentimes exploitative. In the container industry, paperwork can account for half the cost of transport. A nationwide study conducted in the US from 2010 to 2012 by the international ocean advocacy organization Oceana revealed that seafood is mislabeled up to 87% of the time. Mica, which is used in makeup, electronics, and automobile paint because of its shimmery, reflective properties, is often sourced from illegal mines by child laborers younger than 12 years old.OpportunityA blockchain\u2019s public, permanent record of transactions would bring transparency and accountability to the movement of goods and commodities across the globe, from source point to end customer. A shared IT infrastructure would streamline workflows for suppliers, distributors, manufacturers, and retailers, and auditors would have greater visibility into participants\u2019 activities along the chain.Applications for supply chain managementViant. Viant, a supply chain track and trace platform built on Ethereum, teamed up with Microsoft earlier this year to help the World Wildlife Fund deploy a program which verifies that fish are harvested from sustainable sources. Viant is also working with pharma giant GlaxoSmithKline to track intellectual property licenses used by scientists and ensure that products are produced, transported, and stored in proper conditions.Luxarity. ConsenSys Social Impact recently partnered with Luxarity, the social venture arm of Hong Kong fashion retail brand Lane Crawford, to register resold luxury goods on the blockchain so donors can track charitable proceeds.Minerac. Minerac, a joint venture between ConsenSys and the metal concentrates trade platform Open Mineral, is an Ethereum-based consortium of mining companies and financial institutions which both eases and secures the exchange of critical trade documents such as bills of lading and letters of credit across different jurisdictions.GenuineWay. A consortium of over 500 authorized suppliers and distributors, GenuineWay applies QR codes to food and liquor items and deploys smart contracts to certify the manufacturer of artisanal food products for end consumers.GovernmentProblemIn the wake of 2008\u2019s global economic crisis, governments are being held to higher accounting and reporting standards to bolster investor and consumer confidence. The World Economic Forum\u2019s Global Competitiveness Index ranks national economies along 12 pillars including infrastructure, market efficiency, and business sophistication. Citizens and businesses need a robust digital infrastructure to access basic services and to get their products to market in a secure and expedient fashion. Governments must also furnish proof that the spending of public revenue is efficient and effective.WEF Global Competitiveness Report 2017\u20132018OpportunityThe most immediate benefit of a blockchain solution would be the creation of a secure, paperless layer for all government documentation: government agencies could digitally process visa applications, bill payments, license renewals, and more through Ethereum\u2019s encrypted ledger, reducing paper load, document processing time, and duplication errors. A blockchain-based identity management system would also give documentless citizens publicly registered and portable identification.ApplicationsuPort is setting the standards for privacy-preserving identity solutions and helped the Swiss city of Zug develop ZugID, which enables citizens to access e-government services in a trusted and self-reliant manner. Last year, the uPort team also launched a pilot program with the Brazil Ministry of Planning that verifies government IDs and signed documents on-chain. While some governments have been slow to accept blockchain technology, several have taken initiative to prototype and deliver blockchain-based solutions around land registries (Dubai), electronic voting (Estonia), energy statistics (Chile), and internal messaging tools (Israel).Last year, Dubai appointed ConsenSys as Blockchain City Advisor as part of their Smart Dubai Initiative to document all government records and transactions on the blockchain by 2020, and will soon issue emCash, a state-developed cryptocurrency. Earlier this year, the EU also launched a Blockchain Observatory and Forum and selected ConsenSys as its partner to help align and develop a blockchain-enabled and unified European market.Energy GridProblemSolar arrays and wind farms have proven to be such abundant sources of renewable energy that they\u2019ve become a problem for the energy grid, which is currently not equipped to store or redistribute the load. To prevent overvoltage and damage to the wires, balancing authorities in some regions must respond by curtailing production and in some cases even paying solar generators to not produce energy. Solar and wind generation is also intermittent\u200a\u2014\u200aaffected by local cloud cover and weather conditions\u200a\u2014\u200acausing rapid drop-offs or increases in produced energy which must be buffered by other energy producers to maintain grid stability.OpportunityThe widespread adoption of low-cost distributed energy resources such as solar panels and wind turbines in recent years presents an opportunity to build a durable, sustainable, and transactive energy grid. A blockchain-enabled delivery system would not only create long-term incentives for consumers to build their own distributed energy storage capabilities and trade energy locally, but it would undercut costs of incumbent utilities, automate billing and settlement, and clear payments in real-time so utilities wouldn\u2019t have to pool risk.ApplicationThis past summer, Grid+ obtained a certificate from the Public Utility Commission of Texas to operate a Retail Energy Provider and in coming weeks will begin accepting GRID tokens from customers to access wholesale energy prices. By moving the transaction logic for both energy and payments onto the Ethereum blockchain\u2019s trusted architecture, Grid+ reduces the administrative burden of processing transactions over legacy rails (traditional payment processors typically charge fees of 1.5\u20132.5%). Moreover, by pushing market signals to customers, Grid+\u2019s energy trading solution enables customers to make smarter decisions about their energy usage and react to the economics of the demand response market.Oil and\u00a0GasProblemWhile the world continues to scale the infrastructure for renewable energy distribution, crude oil remains a resource for both energy needs and the vast array of everyday petroleum products. Petroleum is one of the most globally-traded commodities in today\u2019s economy, but the industry\u200a\u2014\u200aa behemoth of upstream, midstream, and downstream providers, refiners, tankers, jobbers, governments, and regulatory bodies\u200a\u2014\u200asuffers from siloed infrastructures and countless issues of transparency, efficiency, and optimization.Oil and gas companies today use proprietary systems to track, manage, and record data in order to perform trades. These centralized systems are difficult and expensive to maintain. Oil and gas commodity trading can often be a razor-thin profit economy, so optimization of any kind is critical for a company\u2019s bottomline. Moreover, these centralized IT infrastructures are prone to hacking, manipulation, and corruption. Last year, Siemens conducted a survey of U.S. oil and gas cybersecurity risk managers and revealed that 68% of operations experienced at least one security compromise.OpportunityA blockchain solution in the oil and gas commodity marketplace would not only reduce the costs associated with maintaining, updating, and securing proprietary trading systems, but also the costs associated with labor, data management, data visibility, settlement delays, dispute resolution, and inter-system communication\u200a\u2014\u200aall without compromising proprietary data, information sources, or trading methods that currently give companies competitive edge. Enterprise Ethereum\u2019s permissioning and privacy functions would enable trading companies to create custom access restrictions and privacy layers, so that industry participants can transact across a single, secure platform without exposing confidential transaction data. Increased data transparency (to permissioned individuals) would also mean companies can provide access to regulators on a frequent and low-cost basis.ApplicationOndiflo is a joint venture between ConsenSys and Amalto, a B2B integration leader for the oil and gas industry, which aims to provide bespoke, enterprise-grade blockchain solutions to oil and gas companies in the upstream, downstream, and midstream segments. Since its launch in February 2018, Ondiflo has focused on two solutions: 1) consortium-building between oil and gas stakeholders and 2) a platform for all ticketing-based services to ease reconciliation around identity, certification, field capture errors, data sanitation, and financial settlement.LawProblemSince the earliest written arrangements, our world has been structured through legal prose and contractual agreements. While agreements are no longer memorialized in clay, the legal industry\u200a\u2014\u200aa $437 billion industry in the US\u200a\u2014\u200ahas failed to take advantage of advances in computing to streamline and simplify contract creation. Most lawyers use written templates derived from previous work and laboriously draft agreements in legalese, which can create ambiguity and further risk of litigation. Simple draftsmen\u2019s errors around comma usage can spiral into legal back-and-forth (a la the Oakhurst Dairy drivers\u2019 overtime dispute).Agreement is another story. Once a legal contract is revised, reviewed, and finalized, signature pages are swapped between parties and generally signed using ink. For large agreements, getting these signatures usually requires the assistance of an overqualified associate, which slows down the closing of complex transactions. Storing legal agreements is also an unorganized and insecure process. Agreements often sit as attachments in emails, in vulnerable document management systems, or as hard copies in literal filing cabinets.OpportunityIt\u2019s not difficult to imagine how Ethereum-based smart contracts could completely renovate the legal industry. Legal documents could be embedded into smart contracts and templatized to ease the creation, execution, and arbitration of legal agreements. Public-key cryptography, a cornerstone function for authenticating and encrypting blockchain-based transactions, would replace the scramble of gathering pen and paper signatures with a swift and secure electronic signing system.ApplicationOpenLaw, the first project to enable \u201csmart\u201d legal contracts, is reimagining the creation, execution, and storage of legal agreements from the ground up. OpenLaw\u2019s legal markup language provides an easy way for anyone to reference and trigger an Ethereum-based smart contract to manage contractual promises. Using the OpenLaw protocol, legal agreements can be embedded in lines of code in an Ethereum smart contract and automatically triggered once the agreement is digitally signed by all parties. OpenLaw has partnered with McCarthy-T\u00e9trault to automate key aspects of the lending process, as well as Rocket Lawyer to develop trusted and blockchain-enabled contract execution.Real EstateProblemThe current real estate market has three main problems: inaccessibility, transaction costs, and poor liquidity. Real estate ownership and investment has been historically reserved for the wealthy because of the capital reserves and credit rating required to put money down and take out a mortgage on a new home. For those who manage to swim upstream to ownership, purchasing a home involves up to eight middlemen (brokers, legal counsel, inspector, appraiser, etc.), who altogether siphon off up to 5% of a home\u2019s value. For investors, REIT brokers usually take 9\u201310% in commissions and fees. Finally, getting in and out of real estate assets is slow and arduous. Renters face lock-in periods, sellers have limited options for selling a fraction of a property, and investors who can buy into a REIT are still subject to a portfolio manager\u2019s personal investment strategy and fee structures.OpportunityEthereum\u2019s decentralized architecture and smart contract functionality would obviate the need for multiple intermediaries in a real estate transaction and enable automated payouts of rental income. Particularly exciting is the opportunity to \u201ctokenize\u201d properties. By issuing real estate-backed tokens on the Ethereum blockchain, asset owners can fractionalize previously monolithic properties into almost infinite slices and unlock additional capital and a diverse pool of investors.ApplicationsConsenSys partnered with Dubai Properties to build a blockchain platform for tracking the provenance of real estate from planning and construction to customer sale using cryptographically secure digital signatures. Meridio, a ConsenSys venture that spun out of the engagement with Dubai Properties, converts individual properties into digital shares on the Ethereum blockchain. Accredited investors can purchase tokens on the Meridio platform\u200a\u2014\u200awhich represent fractional shares of properties\u200a\u2014\u200aand reap a proportionate amount of rental income. Meridio\u2019s Ethereum-based real estate marketplace exposes asset owners to a diverse pool of investors so owners can access capital, streamline transaction processing, and analyze asset-specific data in real time. Investors benefit from low capital requirements, reduced transaction fees, and increased portfolio liquidity.Standardizing Adoption: Alliances and InitiativesEnterprise Ethereum is about much more than data management and IT cost-cutting. The true opportunity with enterprise blockchain adoption is the formation of wholly new products and business models: tokens that unfreeze and fractionalize previously immoveable assets; payment networks that help different nations move in and out of one another\u2019s currencies in real time; multi-sided marketplaces\u200a\u2014\u200aaround finance, trade, energy, real estate\u200a\u2014\u200athat give a much more diverse range of players access to the market.These business models are dramatically more collaborative than what enterprises are used to. As Joe Lubin recently noted at Sibos, SWIFT\u2019s International Banking Operations Seminar, \u201cour society reflects the tech that we built it on. Until recently, we only had siloed databases, which created an Us vs. Them approach to business. Blockchain is a database breakthrough, a trust layer that puts collaboration front and center.\u201dEnterprise Ethereum offers a single execution space for diverse business entities to transact with one another, but also the permissioning and privacy layers to ensure that only authorized entities can access the network and that confidential business or customer data remains confidential. Ethereum\u2019s capacity for both collaboration and customizability (what many refer to as Ethereum\u2019s \u201cprogrammability\u201d) explains why many Enterprise Ethereum solutions emphasize network and consortium building. The only way an industry can truly streamline its document management, for example, is if it has a critical mass of stakeholders on board, but it also needs assurance that individual transactions and the network at large are encrypted and secure. Enterprise Ethereum offers that simultaneous collaboration and control.Enterprise Ethereum\u00a0AllianceWhile most DLTs remain proprietary and other blockchain ecosystems small and balkanized, hundreds of leading enterprises have come together to standardize the adoption of Ethereum. The Enterprise Ethereum Alliance is the world\u2019s largest business blockchain consortium with 500+ members and the first global standards organization to deliver an open, standards-based architecture and specification of Enterprise Ethereum. The EEA\u2019s Enterprise Ethereum Client Specification 2.0 and forthcoming testing and certification programs will ensure interoperability, multiple vendors of choice, and lower costs for its members.Accounting Blockchain CoalitionThe Accounting Blockchain Coalition is an initiative started by ConsenSys\u2019 Balanc3 team that includes accounting associations, standards-setting bodies, regulators, law firms, investors, and blockchain innovators. The Coalition is driving innovation in the accounting industry and also educating businesses and organizations on accounting for blockchain-based digital assets.Strategic PartnershipsBeyond alliances, coalitions, and regional initiatives such as Smart Dubai and the EU Blockchain Observatory & Forum, ConsenSys is working closely with world-class financial institutions and software companies to create an easy onramp for enterprises to adopt blockchain technology.ConsenSys + Microsoft. ConsenSys helped deploy the first permissioned implementation of Ethereum on Microsoft\u2019s Azure cloud and embedded Ethereum\u2019s Solidity codebase into the Microsoft Visual Studio.ConsenSys + J.P. Morgan. ConsenSys has contributed to J.P. Morgan\u2019s Quorum, an enterprise-focused version of Ethereum, which is optimized for high speed and high throughput processing of private transactions within a permissioned group of participants.ConsenSys + Amazon. Kaleido, a ConsenSys venture, has radically simplified blockchain adoption for enterprises with their Blockchain Business Cloud, the first full-stack platform for the entire Enterprise Ethereum journey. This past spring, Kaleido partnered with Amazon Web Services (AWS) so enterprises can run the Kaleido platform on AWS and seamlessly connect to Amazon\u2019s other analytics, rich query, monitoring, and storage services.", "responses": "5"}, {"title": "Ethereum 2.0 Phase 0 Testnet\u00a0Release", "author_name": "Preston Van Loon", "link": "https://medium.com/prysmatic-labs/ethereum-2-0-phase-0-testnet-release-1e9e682db910?source=search_post", "post_date": "May 7", "readtime": "6 min read", "upvotes": "2K", "content": "Ethereum 2.0 Phase 0 Testnet\u00a0ReleasePreston Van LoonBlockedUnblockFollowFollowingMay 7It\u2019s here it\u2019s here! Over the past months we\u2019ve been preparing extensively, working every single day to deliver a public testnet for Ethereum 2.0\u2019s proof of stake beacon chain to the community. We have it, it\u2019s live, and you can stake! This is a non-trivial, critical step to take this technology to the next level, and we need you to be a part of it.Our testnet site with instructions on how to join is officially live at https://prylabs.net\u00a0.We understand you might have a lot of questions\u200a\u2014\u200alet\u2019s get started.Quick Background on Ethereum\u00a02.0Ethereum 2.0 is a multi-year effort to create a fully decentralized, permissionless platform for programmable cryptocurrency. It aims to be a full upgrade to the current Ethereum Proof of Work blockchain and provide a significant increase in security, scalability, and decentralization. Eth2. It is a new blockchain, meaning it will not be upgraded as a hard fork on the existing chain. Instead, value will be transferred to it from the proof of work chain via a one-way deposit smart contract.Users can deposit 3.2 ETH from the Goerli test network to become validators in the new system, which participate in proof of stake consensus to earn returns on their deposit.credits Hsiao-Wei Wang for the awesome\u00a0diagram!Throughout the lifecycle of each validator, rewards will be accrued and penalties applied based their behavior. The protocol favors liveness, that is, the chain can continue even if a large amount of validators are offline, although being offline will cause deposits to eventually become penalized and for those affected individuals to lose capital.A core concept of Ethereum 2.0 is the idea of shards, which are individual chains that manage smart contracts, transactions, and state. These shards are coordinated by one root chain, known as the beacon chain, which is what phase 0 of Ethereum 2.0 implements. Having shards allows for horizontal scalability of the system, as transactions can be processed in parallel compared to the current Ethereum proof of work chain.As part of our testnet release, we want to establish transparency around what features we are and are not including in our running network:What\u2019s Included in the\u00a0TestnetThe testnet is a single client, Prysm network. Unlike Ethereum 1.0, which has geth and parity, this network is Prysm-only.Staking of Goerli test ETH is included in the network. Users can deposit into the deposit contract, run a validator client, and actively participate in consensus via Casper Proof of Stake and earn rewards or penalties based on their activity.The testnet implements the v0.4 version of the official beacon chain specification created by the Ethereum Research team (the latest version is on v0.6)The testnet is publicly accessible and NOT a simulation. We provide a cloud cluster of nodes that participate in consensus but anyone can participate in maintaining the network alive.LibP2P from protocol labs for decentralized, peer-to-peer networking of nodes globally.What is NOT Included in the\u00a0TestnetThe network does not include smart contract or EVM-related functionality. This is part of phase 2 of Ethereum 2.0. The current testnet is only tasked with managing a registry of validators, allowing for Casper proof of stake, and advancing a blockchain.This is NOT a multi-client network, although this is the next critical step every Eth2 team has in mind.The testnet uses different configuration parameters than what we\u2019d see on mainnet, that is, we support fewer shards, a smaller validator count, and in general different constants for the sake of simplicity.The testnet does not contain beacon chain transfers or withdrawals, as those will come in later iterations and are not critical for showcasing the core functions of the beacon chain.The testnet is not optimized for a very large amount of validators to join. That is, we do not yet have a super-optimal LMD GHOST fork-choice rule, attestation aggregation, among other features that will make the code robust enough for hundreds of thousands of validators to join.Joining the\u00a0TestnetI Want to Become a Validator and Stake Some\u00a0ETH!Great! The best way to get started immediately is to visit https://prylabs.net/participate. You\u2019ll need to acquire some test ETH from the Goerli testnet, and the previous link guides you through the steps and sends you some of this ETH through our faucet. Alternatively, you can use another public faucet provided by official Goerli website here.I Want to Run a Node to Support the\u00a0NetworkIf you do not want to stake but just want to run a node to support our network, great! You can follow our instructions on running a beacon node in our official documentation portal here. Running nodes helps keep our network alive and increases the decentralization of our testnet.I Want to Contribute to the\u00a0CodeWe\u2019d love to help you\u200a\u2014\u200ajoin our Discord channel and introduce yourself! We also have some contribution guidelines in our official repository here and more information on how Prysm works in our official docs portal here. Check out our currently open issues to see if anything catches your attention, and then you\u2019ll be an official Prysm contributor.Frequently Asked QuestionsI Ran Into a Bug, How Can I Report\u00a0It?For any sort of bugs or weird behavior, the easier way to file a ticket is to open an issue in the official Prysm repository here. We\u2019re always looking to improve and make the experience of this first iteration of the testnet smoother, and we appreciate you bringing any bugs or problems to our attention.When Will the Testnet\u00a0Restart?Until it dies! We are adding major improvements every day that prevent critical conditions from ruining our system. We will announce any breaking changes or major resets via social media both on Medium, Twitter, and in our Discord channel which would force you to update your nodes.What\u2019s NextV0.6 Coming to the\u00a0TestnetOur next step is to launch v0.6 of the official Ethereum 2.0 specification into our testnet. This is a massive improvement, as the research team aims to freeze the spec by June and have something that will represent a more polished version for mainnet release. Our short term goal is to continue improving our testnet while picking up the pace on v0.6 faster in parallel within our team.Interested in Contributing?We are always looking for devs interested in helping us out. If you know Go or Solidity and want to contribute to the forefront of research on Ethereum, please drop us a line and we\u2019d be more than happy to help onboard you\u00a0:).Check out our contributing guidelines and our open projects on Github. Each task and issue is grouped into the Phase 0 milestone along with a specific project it belongs to.As always, follow us on Twitter or join our Discord server and let us know what you want to help with.Official, Prysmatic Labs Ether Donation\u00a0Address0x9B984D5a03980D8dc0a24506c968465424c81DbEOfficial, Prysmatic Labs ENS\u00a0Nameprysmatic.eth", "responses": "6"}, {"title": "How to make a user-friendly Ethereum\u00a0dApp", "author_name": "John Backus", "link": "https://blog.hellobloom.io/how-to-make-a-user-friendly-ethereum-dapp-5a7e5ea6df22?source=search_post", "post_date": "Apr 20, 2018", "readtime": "8 min read", "upvotes": "998", "content": "How to make a user-friendly Ethereum\u00a0dAppJohn BackusBlockedUnblockFollowFollowingApr 20, 2018Providing a good user experience is fundamental to building good products. This is one of the most important aspects that drive user adoption and determine the products that people love. At Bloom, we aim to create amazing user experiences that satisfy the end-user (you)!While it\u2019s not obvious at first glance, it\u2019s the little things that really count in driving amazing user experiences. User experience specialists focus on things like reducing page load by 50ms and turning \u201cthree click\u201d product interactions into \u201ctwo click\u201d product interactions. If you look at conversion funnels, you\u2019ll see that every additional bit of work the end user has to do, ultimately results in a portion of users giving up part way through the flow.dApps have room to grow on this front. Most dapps are still clunky and hard-to-use.For example, imagine you\u2019re creating a decentralized professional social network. What steps does a user who doesn\u2019t own Ethereum need to do in order to sign up and invite another user to connect?Visit your signup page and fill out some basic signup information (email, name)Install MetamaskSign up for CoinbaseBuy EthereumTransfer that Ethereum to their MetamaskCreate an account within your smart contractWait for that transaction to mineInvite their acquaintance to connect via your smart contract and wait for that to mine tooAs the cherry on top, each transaction they submit to the blockchain prompts the user with an intimidating and opaque popup:Opaque transaction dialogue with\u00a0MetamaskThat is optimistically a 30 minute process that involves installing an extension, signing up for another website, and spending money.At Bloom, we\u2019re focused on making our dApp user experience simple and easy. In this post, I share some techniques we\u2019ve had success with and how we\u2019re looking to improve even further.Explaining TransactionsOften times, the design needs of your dApp are at odds with the security requirements of third party wallets like Metamask. In some ways this is obvious\u200a\u2014\u200athey can\u2019t just share the private key with your website because malicious websites would use that to steal a user\u2019s ETH. Other implications are less obvious\u200a\u2014\u200afor example, your dApp isn\u2019t allowed to display explainer text underneath the transaction dialogue because a malicious website could put whatever text they want there too. In other words, we can\u2019t tell Metamask to say \u201cThis transaction casts a vote in Bloom\u2019s poll\u201d for our poll transactions because then a malicious site could say the same, but actually steal from us.Whenever the user is going to use Metamask in a new way, our app should explain what we\u2019re doing. Here is what it looks like for a user to vote in a Bloom poll:Before Metamask opens, we are able to tell the user:You\u2019re casting a vote.We\u2019ve set the gas price and limit for you.You don\u2019t need to change those values. We figured it out for you.This is a big improvement! Plenty of users aren\u2019t familiar with what gas is and whether they can edit it. Explaining before they see Metamask lets them know things are working correctly.It is important to have the user click \u201ccontinue\u201d before they actually see Metamask. Showing the modal at the same time means the user might read Metamask first or miss the popup by focusing on the modal. Even if they see both, they might try to figure out the Metamask dialogue first and not read the instructions in time.Managing Transactions for\u00a0UsersIn our most recent product release for Bloom, we added the ability to verify your phone number via SMS and save the verification to the blockchain. This involves two Ethereum transactions, but the end user doesn\u2019t pay anything in gas!We do this by using the signTypedData API introduced in EIP #712. Metamask exposes this feature which means you can use it in your dApp.Remember that professional social network example from the start? If we design that dApp around users signing data to approve operations, we can simplify the experience:Fill out some basic signup information (email, name) like they would for a normal websiteInstall MetamaskClick \u201csign\u201d on a window that says they are creating an accountClick \u201csign\u201d on a window that says they are inviting another user to connectThe user isn\u2019t submitting the transactions, the backend of our app is, so they don\u2019t have to wait for the Create Account transaction to mine before using the Invitation to Connect feature. As long as our backend verifies the signatures are correct and from the right user, we can ensure the transactions are submitted in the correct order on the backend. Using signTypedData also makes the Metamask dialogues comprehensible!Implementing this is pretty straightforward in our smart contracts. Here are the important parts:Once you get it working once, it is easy to adapt to any user facing function you need. A few notes here:You don\u2019t have to include the Action part, but I like that it helps describe to the end user what is going onThe signTypedData API is nice because the schema describing the data is hashed before the data itself which means we can precompute this value in our contract and store it as a constant. This reduces computation inside of transactionsThe createAccount function is special because we can reuse the _sender as the assumed _address in the signature. If we were writing inviteToConnect then the params would be longer. Something like inviteToConnect(string _message, address_to, bytes _delegationSig, address _sender);For brevity, I didn\u2019t include the implementation of recoverSigner. Look into ECRecovery if you\u2019re interested in this.Creating our createAccount in Metamask would look like this:Keeping Things DecentralizedBuilding products for the crypto community is tricky\u200a\u2014\u200athere are a lot of vocal and opinionated users with their own ideas on how things should work. One tough tradeoff is usability vs. purity of decentralization. You\u2019ll see both of these types of users:New to Crypto\u200a\u2014\u200aWhy do I have to install Metamask? Why do I have to pay for gas? Why is this taking so long?Hardcore Decentralizer\u200a\u2014\u200aI don\u2019t want to use Metamask. Why can\u2019t I just sign transactions offline with my Trezor? You don\u2019t use [brand new decentralized technology]? Does that mean you\u2019re basically centralized?The signature oriented functionality makes the new-to-crypto user happy. You should add normal functions the end user can submit to the contracts so that the minority of hardcore users can do so. Adding the direct functionality for createAccount is simple:function createAccount() public {  createAccountForUser(msg.sender);}Future WorkAt Bloom we\u2019re trying to transition all of our existing dApp functionality to use what I\u2019ve described in this post. Every wallet interaction should be explained and confirmed by the user. Smart contract interaction should be facilitated via signature oriented smart contract functionality with an escape hatch for the hardcore users.Our north star for dApp development is to make our products feel like really satisfying non-blockchain products. Blockchain and asymmetric cryptography should only peek out from under the hood when it makes the app experience better. To give you an idea of what this means:Don\u2019t make the user wait to see if their transaction was minedDon\u2019t put Ethereum addresses at the center of the user experience when possible. For example, inviting a friend to Bloom shouldn\u2019t involve the user asking their friend \u201cwhat is your Ethereum address?\u201dDo use private keys for authentication instead of passwords. Private keys are better than risking users reusing passwords across the web.Do embrace users having multiple addresses. If a user owns 10k BLT then they should be able to put that in cold storage while using a different ETH address for custodial transactions like voting in a poll.While we\u2019re very happy with the user experience improvements we outlined in the previous sections, we could do better. Here is what we\u2019re working towards long term:Working without an extension\u200a\u2014\u200aWhen it is out of beta, we would like to integrate Metamascara into our web dApp. This will defer the need to install a chrome extension so it doesn\u2019t gum up the on-boarding flow. We can always prompt the user to install the extension down the road. If they do, the app should gracefully disassociate Metamascara addresses and replace them with Metamask addresses.Moving signatures behind the scene on mobile\u200a\u2014\u200aWe\u2019re working on mobile applications for iOS and Android. When these are ready, they will reduce and eventually eliminate the need for an in-browser wallet for the user. With our own mobile app which manages private keys that are only allowed to be used to interact with Bloom, we\u2019ll have a wallet experience that we can fully control. As a result, certain signatures can happen fully behind the scenes or be part of a normal button click. The user won\u2019t even know when the blockchain is involved!Extend smart contracts to anticipate common flows\u200a\u2014\u200aA big bottleneck in user experience can be introduced by requiring two Ethereum transactions back to back which depend on each other. For example, to verify your phone for BloomID the end user first needs to add a signature of their phone number and a nonce to our identity contract and then request a verification via our attestation contract. The second transaction depends on the output of the first so it can specify what identity information is being verified. Performing two verifications back to back is slow and it is confusing as the user to sit and wait for two minutes. We should build our contracts to anticipate these flows such that the user can just sign one thing and a batching contract will call both functions back to back.By batching common product flows, moving transactions behind the scenes via mobile apps, and removing hard dependencies on browser extensions from the on boarding experience, we\u2019ll get much closer to that north star we want.Did you make it all the way to the end of this post? Are you interested in working on the frontier of dApp development with us? Reach out! jobs@bloom.co", "responses": "5"}, {"title": "4 Reasons Ethereum is Here to\u00a0Stay", "author_name": "Reza Jafery", "link": "https://hackernoon.com/4-reasons-ethereum-is-here-to-stay-75b88c7d639f?source=search_post", "post_date": "Jun 6, 2018", "readtime": "5 min read", "upvotes": "3.8K", "content": "4 Reasons Ethereum is Here to\u00a0StayReza JaferyBlockedUnblockFollowFollowingJun 6, 2018I don\u2019t know if Ethereum will continue on to be as large of a market leader as it is today, but it\u2019s definitely not going anywhere.I\u2019ve been getting a lot of questions on the interwebz about Ethereum lately. With competitors coming out of the woodwork, people are beginning to wonder if the King of the dApps is at risk of losing the throne.\u201cWill Ethereum go back up?\u201d\u201cWith NEO, EOS, QTUM, and more, will Ethereum last?\u201d\u201cWhy is Ethereum falling?\u201c Do other altcoins competing with it mean Ethereum isn\u2019t going to recover?\u201dJust because there are some younger and healthier princes in the castle, doesn\u2019t mean they can dethrone the king.Why?Photo by Thought Catalog on\u00a0UnsplashFirst mover advantage.Ethereum was the first platform token to allow the widespread creation of tokens. Before NEO, EOS, and other competitors could even get their white papers out\u200a\u2014\u200aEthereum already had several successful ICO\u2019s launch on their platform.One could bring up the MySpace vs. Facebook argument, MySpace was first too. No one knows what good ole\u2019 Tom is up to these days. But as you\u2019ll see in the charts below, the early mover advantage in this particular case brought the benefit of billions of dollars in support. If MySpace had hit the valuation that Ethereum has before Facebook launched, it\u2019s hard to say how the battle would have turned out.Another benefit of being a first mover is the developer community that Ethereum has built. By being first, and creating a project that was easier for developers to pick up and add to their toolkit, they\u2019ve created a huge community of active developers constantly looking to improve the platform.People tend to ignore just how rich and active the developer ecosystem for Ethereum actually is. The developer ecosystem is so rich, you have many people tackling the current big weakness of Ethereum. They also have the ambitious vision of blockchain scaling without any compromises with decentralization.Thanks to Ethereum\u2019s active developer community, we have creative solutions to the scalability problem being implemented.\u200a\u2014\u200aOleg Sergeykin, PhDEthereum has superb documentation, and until another project can rival it in that sense, new developers will continue to flock to the Ethereum blockchain.Not to mention the Ethereum Enterprise Alliance: supported and comprising of several well established and credible companies. Ethereum even has a strong B2B community supporting it.They\u2019re just\u00a0claims.While a lot of companies claim to be better than Ethereum, that\u2019s all they are at this point, just claims. No one has put their money where there mouth is and really shown how their platform solves the scalability issues of Ethereum. EOS claims to be \u201cEthereum on Steroids\u201d, that\u2019s literally what E O S stands for. Yet their main net hasn\u2019t launched, and there\u2019s no proof in the pudding so far.Not to mention the fact that 50% of the EOS supply is held by 10 wallets. It\u2019s far from decentralized at the moment. With that large of a supply being owned by a small group, it\u2019s ripe for manipulation, but that\u2019s another story.NEO released shortly after Ethereum. I see NEO as the closest competitor, but haven\u2019t seen the volume of dApps necessary for it to really pose a threat.Ethereum has billions of dollars in funding already raised through ERC20 tokens launching on its platform.Ethereum created an onramp for anyone with a decent idea (and unfortunately a lot of people with bad ones) to create their own token. The advent of ERC20 tokens changed the game. Now anyone with a mild understanding of Solidity can tokenize practically anything.Ethereum is responsible for the ICO craze we saw in 2017, when coins were launching left and right. Sometimes raising 100\u2019s of millions of dollars in funding. In 2017 alone, a total of $6,101,438,558 raised across 871 ICO\u2019s.Chart can be found here.Cosmic Trading Join over 10,000 members to talk about cryptocurrency, trading tips, signals, and other blockchain related topics!discord.ggEthereum and other ERC20 tokens account for 90% of the total token market\u00a0cap.Live chart can be found here.Because it is so easy to generate ERC20 tokens, they make up the majority of the capital in the crypto market. If Ethereum were to fail, so would these coins.While other platforms have different and, arguably, better ways of handling certain parts of the stack, the truth is that 90% of developers and businesses building new blockchain applications are going to do it on the Ethereum platform.This is a building effect. More developers means more projects, which leads to people making better Dev tools and learning materials, which creates better opportunities to create applications, which creates more developers and projects\u2026.\u200a\u2014\u200aBrian\u00a0SchusterI work with a blockchain accelerator: I know from first hand experience that when a team comes to BlockchainWarehouse to pitch their ICO or Token Sale, they\u2019re always building their project on Ethereum. Even the ones who are going to develop their own protocol and blockchain like mesmr (who by the way are the only company I see being able to take serious shots at Ethereum) are launching their initial project on Ethereum while they build out their own blockchain.At the end of the day, there is too much money invested in companies built on top of the Ethereum network for ETH to go anywhere, anytime soon.\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014 \u2014If you want to learn more about trading, technical analysis, or even just chat about the\u00a0marketStop by Cosmic Trading and say hello!Cosmic Trading Join over 10,000 members to talk about cryptocurrency, trading tips, signals, and other blockchain related topics!discord.ggFollow me on Twitter for musings on the market and blockchainReza Jates (@RezaJafery) | TwitterThe latest Tweets from Reza Jates (@RezaJafery). Strategy @mesmrtv // Partner @ BlockchainWarehouse // CoFounder\u2026www.twitter.com", "responses": "6"}, {"title": "Avoid Evil Twins: every ethereum app pays the price of a chain\u00a0split", "author_name": "Alex Van de Sande", "link": "https://medium.com/@avsa/avoid-evil-twins-every-ethereum-app-pays-the-price-of-a-chain-split-e04c2a560ba8?source=search_post", "post_date": "Apr 18, 2018", "readtime": "8 min read", "upvotes": "1.4K", "content": "Avoid Evil Twins: every ethereum app pays the price of a chain\u00a0splitAlex Van de SandeBlockedUnblockFollowFollowingApr 18, 2018art by Gabriel\u00a0SilveiraParity has recently proposed an EIP to recover funds lost on the accidental destruction of a multisig library, which held hundreds of millions of dollars at current value by multiple teams. There are many debates rehashing the same arguments of the DAO hard fork, about immutability, precedent and moral hazards. I\u2019d like to present a new side by talking what has changed between now and 2016 in the ethereum platform: a lot of new tokens and a new understanding about forks.If you build it, they will split\u00a0itThe first, most important is that forks are not only possible but can be profitable. Saying this now might be obvious, but there were many people who believed, back in 2016 that once a chain split, one of the sides would eventually die out, as economic and social incentives were worked against coexistence. Actually the opposite happened:ETC/ETH: started at less than 0.5%, to almost 30% then back to less than 10% in a few\u00a0monthsCoin media sites have an incentive to discuss any new fork of a coin, as long as it has any sort of narrative behind it on why it makes more senseEven if someone doesn\u2019t believe in the narrative, if they believe that someone will believe it enough to buy it allows speculation (specially if you already had the coin for free)There\u2019s an incentive for smaller exchanges to be the first to list a controversial new coin as it attract users and more feemining cost will always adjust to profitability eventually (in ethereum classic it happened in a matter of days)The smaller the coin is, the higher upside potential to speculators. If you model two coins as prediction market on which will succeed, the main coin dropping from 99.5% of certainity to 95% might be a slight drop, but it\u2019s a 10x increase in price for those who invested in the small forkThese early speculators can use their gains to fund development and bootstrap a community that therefore can become self-sustainableWhen forks can\u2019t sustain a narrative or a community, they can still be used by scammers that can use a very iliquid market to manipulate market caps and lead users to compromised versions of the main tools to steal private keysThe main point being: the same censorship resistance, antifragile and self-bootstraping properties of blockchains in general that were able to get most cryptocurrencies off the ground and sustain them long term, apply to any chain splits, making forking a highly profitable venture. As long as you can have any reasonable narrative behind both forks, giving the option to chain split will inevitably lead to a chain split.Ethereum in 2016 was an experiment, in 2018 it\u2019s a\u00a0platformThe rules in the previous section applies to all coin forks, be it Monero, Bitcoin or Ethereum, but usually a fork only applies to the coin itself and only matters for very few traders. But with ethereum, there\u2019s a crucial difference: Ethereum is a platform of a thousand tokens. When the DAO raised a hundred million dollars in ether, that was seen as high milestone for crowdsales. But since then, hundreds, maybe thousands of ICOs were built in Ethereum, capitalizing that trend. In the case of another Ethereum Split, like Ethereum Classic, then every single one of these tokens (and apps) will also have their own forks to deal with. What happens to them? Let\u2019s break them in categories.Tokens as future\u00a0promisesMany tokens created out of ICO\u2019s have very little built-in functionality and are worth a promise: it will be used in a service or product yet to be built. In these cases, once two tokens exist, the developers will be forced to take a stand and say what they will do. It might be as simple as a blog post clarifying which chain they\u2019ll fulfill their obligation on, but it might also have to involve some sort of community vote or debate. Either way, they will be forced to take a clear position on a debate that they might have no interest in participating and see themselves be dragged in a hot political debate. For small teams it can be a terrible distraction from their main goal, and for some larger projects might involve lawyers.Tokens are asset\u00a0custodyMany projects in Ethereum are meant to be backed by something in the real world: gold, oil, real estate. They can be a simple promise by a central company, an so it\u2019s treated like any promise token, but often these projects (or at least the good ones) try to give further guarantees to the user that takes a bit the centralization risk. After all, a token backed by precious metal isn\u2019t worth much if the company that holds them is seized by the government or simply disappears out of thin air. But in the case of a chain split, from the point of view of the minority chain, the token will behave as if the company simply decided not to make good on their promises. How exactly this behaves will depend completely on the legal framework and the tech stack that the organization created to defend itself\u200a\u2014\u200aand it doesn\u2019t matter which argument the company uses to choose a chain, it\u2019s guaranteed that someone unhappy with the decision, or just wanting to try their luck at doubling their gold reserves, will want to test it out.Tokens as smart contractsTokens that have a more complex contract behind them that decides how they behave are few, but these are also the ones most valuable and best fit to the ethereum ecossystem. A prime example would be the DAI token which uses a complex CFD enforced by smart contracts to guarantee a constant value at $1. In order to do that it uses ether as a collateral and the MakerDAO tokens for last resort valuations and governance. If a chain split occurred, what happens to the Dai holders, do they have now twice the amount of dollars? Since it\u2019s entirely possible to build DAI in Ethereum Classic, if the system works perfectly it\u2019s plausible that the peg would hold in both sides, but at the cost of the collateral owners.The first things to fail on the Dai would probably be the oracles that input the current price of ether in dollars, used as a basis. Multiple oracle sources are used and they can be updated by MKR holders (more precisely holders of the split MKR token) in case one of them malfunctions, but it\u2019s a process that by design requires time and in this case all of them would stop working at the same time. If the oracles keep working, then the system would work as if there was a sudden sharp drop in ether price, and dai will be burned in exchange for the remaining collateral. If the drop continues, new maker dao split tokens will be issued as a lender of last resort. Maker is working on a DAI that is collateralized by multiple ERC20 tokens: in the case of a chain split, suddenly some of these would be valid and some not, making the situation worse.Best case scenario the system would stabilize back, with most of the DAI holders being made whole but the CFD creators having lost their collaterals on the minority chain and the MKR holders being extremely diluted out. The technology would be seen as solid, but it would be like testing aircraft safety by removing both engines of a fully loaded passenger jet mid air.Dapps and\u00a0gamesEthereum is more than tokens of course, it\u2019s also a platform for apps, games and other sorts of experiments, and all of them would also be split in a similar way. If you are playing a board game, then you\u2019d suddenly be playing two identical games concurrently, and would have to keep playing both or forfeit the winnings in one of the chain. If you own rare online cats, now every one of them will have an evil twin in a parallel universe. Similar things would happen to IOT devices, or smart oracles using embedded chips.And in every single one of these cases, developers would be asked to support both chains, and in every one of them a smaller version of the same arguments of which chain was the \u201cbest\u201d one would be rehashed. Exchanges are an even worse case, because they will suddenly have twice the amount of tokens to support and then they have to figure out which ones are valid in each chain.Conclusion: splits are\u00a0badImagine if Google employees could vote on some political stance and then every single android developer would also have to explicitly take an action agreeing or disagreeing. No developer gets into a platform looking for uncertainty, extra support work or having legal troubles for their app with issues on the underlying technology.During the past years since the DAO hack we learned two important lessons:When a controversial fork is proposed, then the end result is not a vote but a split.As long there\u2019s a sustaining narrative, both chains will coexist for a long timeSplits happen not only to the underlying token but to all projects built on top of itI sympathize with all the affected parties by the Parity multisig wallet disaster that got their funds locked, just like I sympathize with the many projects that had their ether stolen (some also due to another parity bug). I also believe when they say the web3 foundation (the largest invested party) is a serious organization bounded by their mission and the Swiss law to invest their funds in research and decentralized tech. But I think for the sake of the platform, it\u2019s not fair to create a burden on every token. I believe the way to move forward is to build not only better contracts but also insurance systems to hedge against eventual failures and to create a (voluntary) fund to minimize the damages to victims of these failures. Chain splits are bound to happen eventually, but they should be only risked when the whole ecossytem is at risk or needs some sort of upgrade.The cost of forking might be to create and fund and adversarial community, as if a parallel universe collided and out of there jumped an alternate version of you with a goatee, whose mission is remind you of all the potentially bad decisions you took, and to prove they are worthier than you.Let\u2019s avoid invoking our evil twins.", "responses": "9"}, {"title": "Ethereum and World Wi-Fi look in the same direction", "author_name": "World Wi-Fi", "link": "https://medium.com/world-wi-fi-blog/ethereum-and-world-wi-fi-look-in-the-same-direction-ea9287e66561?source=search_post", "post_date": "Apr 26, 2018", "readtime": "3 min read", "upvotes": "4.4K", "content": "Ethereum and World Wi-Fi look in the same directionWorld Wi-FiBlockedUnblockFollowFollowingApr 26, 2018Yan Sepiashvili, Co-founder of World Wi-Fi and Vladislav Martynov, the advisor to Ethereum FoundationOn April 20, there was a meeting of blockchain industry experts, representatives of Internet industry and the authorities of St. Petersburg. The parties in the discussion were represented by Vladislav Martynov, the advisor to Ethereum Foundation, Yan Sepiashvili, Co-founder of World Wi-Fi, and Arbi Abubakarov, Head of Department for Foreign Economic Cooperation and Deputy Chairman of the Committee for External Relations, Saint-Petersburg,.The prospects of blockchain technology development and the potential of international blockchain projects were discussed during the meeting. According to experts, the development of blockchain technologies is hindered by the fact that not all people fully understand how to use it and do not see the potential of it. Businesses need to pay attention to how blockchain technology can eliminate intermediaries and make business processes more transparent.\u2014 Blockchain is able to make your business more efficient. We already have two working and actively developing companies in the field of public Wi-Fi: Radius Wi-Fi, providing Wi-Fi hotspot solutions on a subscription basis with an integrated user identification, and Adrenta, an automated advertising platform for campaigns in public Wi-Fi networks. Having assessed the possibilities of blockchain-technology, we have created the World Wi-Fi project, a decentralized Wi-Fi network,-says Yan Sepiashvili, Co-founder of World Wi-Fi.The authorities of St. Petersburg are also interested in the maximum development of new technologies and application of blockchain-solutions at the state level. According to representatives of the authorities, the introduction of blockchain technologies has an opportunity to free huge budget and technical resources, that can be used more efficiently by distributing part of the load on the free computing power of millions of network users.Martynov, Sepiashvili and Abubakarov also discussed the issue of Internet development in general and providing access to public services online in particular. World Wi-Fi intends to take an active part in creating favorable conditions for the residents of major cities and businessmen all over the world. The deployment of Wi-Fi network will not require large-scale construction works, as the network is based on private and public Internet routers.Vladislav Martynov initiated a big event to be held in collaboration with Ethereum Foundation in autumn, 2018 in Saint-Petersburg. The participants of the meeting supported the idea to gather blockchain experts, representatives of the Internet industry and state authorities in one place. The event will be devoted to the development of blockchain technologies and unite more than 10 000 participants.", "responses": ""}, {"title": "EthOn\u200a\u2014\u200aintroducing semantic\u00a0Ethereum", "author_name": "Johannes Pfeffer", "link": "https://media.consensys.net/ethon-introducing-semantic-ethereum-15f1f0696986?source=search_post", "post_date": "Jan 4, 2017", "readtime": "5 min read", "upvotes": "278", "content": "EthOn\u200a\u2014\u200aintroducing semantic\u00a0EthereumOrganized Ethereum knowledgeJohannes PfefferBlockedUnblockFollowFollowingJan 4, 2017EthOn is a multi purpose Ethereum ontology. It takes all these blockchain terms you might have heard of (Blocks, Transactions, Contracts, Nonce,\u00a0\u2026) brings them into relation with each other and gives short and clear definitions.Overview of the major EthOn modelling conceptsBack in the days of the DAO, its heist and the subsequent analysis of what happened, I spent a lot of time understanding Ethereum and its concepts. I read the white and the yellow papers (I really did!), crawled through stack exchange, devoured anything there was about Ethereum on reddit and still many concepts of how it worked were really hard to figure out. Don\u2019t get me wrong, there is no doubt that Ethereum is well defined, but the problem was that the information was not always available in a format that allowed me to comprehensively understand the concept I was interested in.Since I love the idea of the Semantic Web and have a background in creating formal models, my natural approach is to describe Ethereum as an ontology.These are some of the benefits that come for free with\u00a0EthOn:with EthOn dumb data turns into smart data\u200a\u2014\u200aif a dataset references EthOn terms, it becomes self-explanatoryEthOn provides an automatically generated extensive glossary of Ethereum termsby providing unambiguous terms, EthOn is a means to improve communication among developers, technical and non-technical peopleEthOn is a learning resource for understanding how Ethereum works and for reading the yellow paperEthOn provides a way to formally describe Ethereum artifacts in a machine readable formatEthOn provides the ability to semantically annotate content provided by Ethereum based tools and dApps (e.g. block explorers, analysis tools, markets, IPFS,\u00a0\u2026)semantic reasoning about partially described ethereum artifacts to infer new knowledge\u2026 use it for YOUR project!What is an ontology?Ontologies are formal and schematic descriptions of an area of knowledge. The concepts of the domain are collected into a curated vocabulary and then organized. It can be explicitly defined how concepts relate to each other and what rules there are for their existence and the relations between them. The conclusiveness of concepts and their relations is a function of the desired area of application of the ontology.Why should there be an ontology for Ethereum?Ethereum is an ideal field of application for ontologies because a consensus about the semantics of the involved concepts is a prerequisite for reaching consensus about the state of the network. Any deviation from this consensus results in a fork. An Ethereum ontology may serve as a semantic specification of its concepts that complements its technical specification. It is also a learning resource for those trying to understand the yellow paper and a foundation for semantic annotation of Ethereum artifacts.As an example, in Ethereum there is the concept of a Block. All Blocks must have a parent and child Block. This is true with the exception of the very first block, which only has a child and the newest Block for which the child has not yet been found. Also, a Block contains a list of Transactions (which may be empty). Blocks have an associated miner, who receives the Block reward.In an ontology these domain concepts are formalized in an ontology language (e.g. OWL) so that they can be referenced, queried and used for inference. Referencing an ontology can be useful in many scenarios. An Ethereum block explorer could, for example, reference the Block concept of the ontology to state that the term Block used in its user interface is identical to the one defined in the ontology. An API, be it from an Ethereum client or a wallet service, can reference ontological concepts to state compliance with a standard. Then, the ontology can be used to verify that the API actually complies to it. Querying an ontology can be useful to retrieve definitions of technical terms, in order to create a glossary. If a piece of data is retrieved from an API that identifies it as a Block the ontology can be queried to find out about its structure, ranges of values and relations to other concepts. An ontology can also be used to infer knowledge. If a Block doesn\u2019t have a parent it can be concluded that it must be the first Block of a blockchain.A very short\u00a0exampleThis example shows how EthOn can be used to describe Ethereum artifacts. Besides this, there are many other uses for EthOn.This is how EthOn models an Ethereum Block:EthOn block model (look here for more illustrations and the chart\u00a0key)According to the above model, a Block can now be described as Linked Data using the Turtle notation:Only some aspects of a Block are described in this exampleThe Future of\u00a0EthOnEthOn is released using CC BY 4.0. Contributions are very much appreciated! Please have a look at the contribution guidelines.When Ethereum changes, e.g. to Proof of Stake, this will be reflected in EthOn. If the ontology changes in an incompatible way, the version number will be increased.EthOn could in future reuse or reference concepts from a project called BLONDiE, a more general blockchain ontology.Further resourcesThese links may be useful if you want to learn more about EthOn:EthOn GitHub repository:ConsenSys/EthOnEthOn - An Ethereum Ontologygithub.comEthOn SpecificationIllustrations of EthOn conceptsAn automatically generated Ethereum GlossaryExplain video for the Semantic Web:This is an interview with Tim Berners-Lee who explains his vision of the Semantic WebExplain video for Ontologies:This is actually a lecture of the Hasso Plattner Institute, Potsdam, Germany, but I think it is a very good summaryAcknowledgementsI would like to thank the following people for their contributions to EthOn:Alex BeregszasziCasey DetrioHerman JungeJoseph ChowMaurycy PietrzakMarian OanceaNiran BabalolaShahan KhatchadourianStefano BertoloDisclaimer:The author is a member of ConsenSys. The views expressed by the author above do not necessarily represent the views of Consensus Systems LLC DBA ConsenSys. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": "4"}, {"title": "Ethereum will be the next Facebook\u200a\u2014\u200aA Fundamental Analysis", "author_name": "Katalyse.io", "link": "https://blog.goodaudience.com/ethereum-will-be-the-next-facebook-a-fundamental-analysis-bd484b2c2835?source=search_post", "post_date": "Dec 21, 2017", "readtime": "4 min read", "upvotes": "823", "content": "Ethereum will be the next Facebook\u200a\u2014\u200aA Fundamental AnalysisKatalyse.ioBlockedUnblockFollowFollowingDec 21, 20172017 has been an amazing year for Ethereum. Prices has hit an all time high of $800, and it is now the processing nearly double the number of transactions of bitcoin at a million a day.As we enter 2018, I think Ethereum will be the next Facebook due to the massive amount of use cases that i am finding in major industries that benefit greatly from decentralization & transparency.Ethereum is basically the app store for blockchain. It allows creators to build and run apps without having to worry about the underlying \u201coperating\u201d system just like Apple.Here are some of the areas to look out for:Fundraising and ICOsICOs are the largest real world use case for ethereum. Traditionally, to fund your idea, you would have to borrow money from a bank, give up a lot of equity to a VC, or get an expensive loan from people lending sites. Basically, ICOs is a kickstarter on steroids.As the founder of fundyourselfnow.com, I have worked with entrepreneurs all over the world on their product to get it ready for their ICOs. Many come from developing nations such as Indonesia (EagleCoin) and India (WandX) where it would have been extremely hard to raise significant funding for their idea due to lack of local investors.ICOs are democratizing funding and spawning the next wave of innovation from young hungry entrepreneurs all over the world who will eventually contribute back to their local communities for a better future.Payments & LendingCurrently, the crypto-currencies are quite hard to spend. Crypto credit card companies such as TenX, Monaco, Tokencard are stepping in to fill in the gap. All of them are built on the ethereum network. I personally hold a TenX Card and have used it to spend on daily goods and services using bitcoin.Monaco in particular, has gotten official approval from VISA to issue cards to Singapore residents. Expect to see a huge increase in actual cryptocurrency spending & adoption 2018 as many of these crypto-card companies get official approval from VISA or MasterCard.There has also been a rise of ethereum based lending solutions, such as SALT lending and ETHLend. The interest rates are expected to be fairer than getting from a bank, and people globally can gain access to financing even without a bank account.I expect that 2018 will be the year where we will help lot of the unbanked get included in this new digital world.GamblingThe gambling industry is ripe for disruption. 2017 started off with a very simple dice game, etheroll. You send ether to a smart contract and winnings are sent to you in a matter of minutes. Etheroll has over 260,000 ethers wagered so far (Around 2000m USD), which is incredible considering how simple and basic the game is.Keep an eye out on Edgeless and Funfair in 2018 as one of them could potentially grow to become the largest online global casino. They have significant advantages over traditional real world casinos:There is no capital controlsAnonymous, money doesn\u2019t flow through the banking systemTrustless smart contract to process payouts and ensure fairness of game.GamingThe virtual nature of gaming lends itself incredibly well for the blockchain. Many successful gaming companies have started to include tokens in their games/product to fund their gaming ecosystem.Here are some of the interesting ways tokens are used (not exhaustive):Decentraland\u200a\u2014\u200aBuy Land in their virtual world. Virtual worlds has been around since 2003 with Second Life and Ethereum might be the fuel that makes it finally takes offEngin Coin\u200a\u2014\u200aUsed to create virtual goods that people that can on their marketplace. Instead of using \u201cgold\u201d in most games, expect games in 2018 to require you to use their own Ethereum game token to make & trade items.CryptoKitties\u200a\u2014\u200aTokens represents a digital cat in the blockchain. Over 17m worth of cats were transacted since they launched early Dec\u00a0, with the most expensive cat sold for more than 100k USD.What more interesting is that with the use of Ethereum tokens for games, this could potentially mean that you could eventually trade items across games. For example, you can trade an Enjin Coin Item for land in decentraland through decentralized exchanges using the ENJ/MANA trade pair. Virtual worlds economies which are currently \u201csilo-ed\u201d could potentially change with the ability to \u201ctrade\u201d across worlds.Final WordsI see the money flowing into Ethereum and the overall cryptocurrency market as a positive. The technology underpinning Ethereum has a lot of real world usage that has yet to be unlocked and money is being funneled into innovative ethereum projects via ICOs at an incredible rate.Mark Zuckerburg started facebook at the young age of 20 about 13 years ago, and it has completed changed the way we interact with our friends and family.Vitalik, founder of Ethereum, started Ethereum also at the young age of 20 too about 3 years ago. I strongly believe that within the next 10 years, Ethereum will radically change the we interact with our world.Merry Christmas and a Happy New Year to everyone!Kenneth Tan,Co-Founder, FundYourselfNowWe help make great ideas happen! Email us at contact@fundyourselfnow.com if you need help with your token sale!_____Keen to find out more about FundYourselfNow? Join our crowdfunding revolution conversation on our Telegram group, or follow us on Twitter.", "responses": "1"}, {"title": "Ethereum Solidity: Memory vs Storage & How to initialize an array inside a\u00a0struct", "author_name": "Georgios Konstantopoulos", "link": "https://medium.com/loom-network/ethereum-solidity-memory-vs-storage-how-to-initialize-an-array-inside-a-struct-184baf6aa2eb?source=search_post", "post_date": "Feb 12, 2018", "readtime": "3 min read", "upvotes": "1.3K", "content": "Ethereum Solidity: Memory vs Storage & How to initialize an array inside a\u00a0structGeorgios KonstantopoulosBlockedUnblockFollowFollowingFeb 12, 2018In Loom Network\u2019s Telegram (which has ~8,000 members!) people ask questions on various topics such as Loom\u2019s roadmap, theoretical blockchain and Ethereum questions, and Solidity troubleshooting.There was a specific question that was asked, which involved initializing an array inside a struct. The person who asked it then provided their code, wondering why it does not work. I could not think of an answer of the top of my head so I decided to talk about this topic briefly in a post.The not-working code can be found below. I encourage you try finding a solution by yourself (you\u2019ve been practicing on CryptoZombies all this time, haven\u2019t you?).Read on to find the\u00a0answer.Wrong CodeIt should be noted that in the above fiddle, the keyword memory is needed when declaring the variable room. If it was declared as Room room, the compiler would return the following error:TypeError: Type struct StructArrayInitWrong.Room memory is not implicitly convertible to expected type struct StructArrayInitWrong.Room storage pointer.Some theoryA contract\u2019s storage variables are the ones which define your contract\u2019s state and are only changed by sendTransaction calls[1].memory variables are temporary variables that exist only inside the calling function (they cannot be declared outside of one). They get wiped after the function exits and they are generally cheaper to use than storage variables\u200a\u2014\u200amore details on gas costs here.Let\u2019s go through an example in order to understand how a storage variable can be used in a function in order to affect a contract\u2019s state.In the below fiddle, a copy of x gets passed in g() as and thus the state variable x will remain unmodified after execution (this is why we use the pure keyword.On the other hand, y in h() is declared as storage, which means that x is passed by reference. As a result, the state variable x is modified after the call to h().You can test the result by calling f() and then inspecting the value of y[2]. Even though g() is called after h(), it does not modify the state variable\u2019s value.Enough theorizing, let\u2019s get to the answer to the initial question.As we are unable to initialize the players array when initializing the structure, we are forced to do this in steps:Initialize the room structure to default values with an empty players array\u200a\u2014\u200aas described here and in this fiddle.Push the room to the rooms array.Push msg.sender to the last room\u2019s players array (rooms.length-1 always refers to the last element in an array).Working Code Fiddle below:getRoomPlayers added for debugging. Test succesful initialization with getRoomPlayers(0)The trick here is that new address[](0) allocates memory for an empty array of addresses. After the initialization, the room gets added to rooms and is now part of a storage variable. This allows us to operate on the array players and push values to it.Note: If we did a new uint[](8) we would get an array of 8 zeros. You can test it in this fiddle.That\u2019s all for today, hope we cleared some misunderstandings regarding storage/memory and how to use them in your functions. Let us know about your questions on our Telegram channel, and if they cannot be answered in a few messages we will dedicate a post on it (or maybe a CryptoZombies lesson!)", "responses": "3"}, {"title": "Ethereum\u2019s \u201cDifficulty Bomb\u201d\u00a0Delays", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereums-difficulty-bomb-delays-8b6ee357e506?source=search_post", "post_date": "Oct 25, 2018", "readtime": "3 min read", "upvotes": "1K", "content": "Ethereum\u2019s \u201cDifficulty Bomb\u201d\u00a0DelaysConstantinople fork delayed till\u00a02019Michael K. SpencerBlockedUnblockFollowFollowingOct 25, 2018Ethereum\u2019s next hard fork, dubbed Constantinople, will be postponed until early 2019. Constantinople is designed to smooth the transition from a Proof-of-Work (PoW) consensus algorithm to PoS. It\u2019s rather important.After finding bugs in the code they were testing on the testnet platform that went live on October 13, Ethereum\u2019s core developers decided to postpone the network\u2019s scheduled hard fork, which was supposed to happen in November, 2018.Whether you call it an upgrade or a hard fork, Ethereum\u2019s increasing complexity means it\u2019s also taking more time to integrate new things. This rising complexity and slowness to integrate sharding, Casper and reach scalability might also be having an impact on Ethereum\u2019s upside.According to Genesis Global Trading, a major cryptocurrency investment firm that targets institutional investors, short interest towards Ethereum (ETH) has declined substantially in the third quarter of 2018. With a market cap of about $21 billion ETH still owns about 10% of all value of cryptocurrencies. If you think of it from a dev standpoint, Ethereum is far more central to how digital assets do business than that.Ethereum is a bit clunky at times, this \u201cdifficulty bomb,\u201d is in reference to a piece of Ethereum\u2019s code that steadily increases the difficulty of mining new blocks. The bomb was originally conceived as part of a larger plan to transition the Ethereum network from the energy-intensive process it uses to agree on its ledger, called proof of work, to a more energy-efficient one called proof of stake. So these are growing pains for the crypto platinum of the world known as Ether. It\u2019s also a period where it may need to find scalability solutions elsewhere for the time being.The Decentralization Wars Have\u00a0StartedA developing a proof-of-stake system is taking longer than expectedEthereum\u2019s direction now seems to be a never-ending compromiseWhile Ethereum is one of the more \u201cdecentralized\u201d public blockchains others pretenders (EOS and Tron among others) are gaining on it, apparently.ETH appears to have stabilized somewhat around the $200 mark.Meanwhile newcomers such as Dfinity, Harmony Protocol and others are boasting scalability prowess but appear to be more on a path of \u201ccentralization\u201d to be run as run-of-the-mill tech startups.However, in terms of developer activity, Ethereum has seen a continuous improvement and progress in the development of its core blockchain layer. It\u2019s attracted a lot of software developers to blockchain projects as talent shortages and the war for talent for blockchain engineers is fierce.Ethereum is Like a Software Engineer\u2019s RenaissanceWhile Ethereum may not be as searched as it was on Google six months ago, we have to put all this into perspective. Ethereum\u2019s development is one of the fastest-growing projects on GitHub. There are like 96 million open-source projects and 27 million software developers on the code repository. Microsoft can put GitHub in its back pocket and be worth $1 Trillion dollars and try to woo open-source developers, but it\u2019s not exactly leading the future of code.Ethereum\u2019s development is also an experiment in massive decentralized governance. Delays are actually a good sign, one where consensus is reached with the right proposals being included and agreed upon. Ethereum is the 5th-largest growing open source project GitHub on the entire platform! The code does not lie, Constantinople is introducing five Ethereum Improvement Proposals (EIPs).The group also proposed releasing a new hard fork every eight months after the official Constantinople upgrade, a change from six months. The age of dApps and digital assets is just beginning. You can raise $4 Billion and still be a fraud or raise hundreds of millions from traditional VC and still have no chance to attract serious blockchain engineers to your project.Trying to compete with Ethereum is like trying to dethrone Bitcoin. Try taking out the new digital gold or crypto platinum. The future of cryptoeconomics might be tethered to Ethereum\u2019s code for quite some time.", "responses": "5"}, {"title": "Bitcoin, Ethereum, Ripple Price Analysis for the week August 27 to September 02", "author_name": "Coin Gape", "link": "https://medium.com/coingape/bitcoin-ethereum-ripple-price-analysis-for-the-week-august-27-to-september-02-85adf9c01b21?source=search_post", "post_date": "Sep 4, 2018", "readtime": "6 min read", "upvotes": "849", "content": "Bitcoin, Ethereum, Ripple Price Analysis for the week August 27 to September 02Coin GapeBlockedUnblockFollowFollowingSep 4, 2018Bitcoin adoption just gets real as fruit and vegetable vendors accept cryptos. Yahoo Finance integrates trading for cryptocurrencies. Firefox blocks cryptojacking to protect its users from Malware. Volkswagen partners with IOTA for \u201cDigitalPass\u201d blockchain application. Silkroad Bitcoin wallet activates again as huge funds in BTC and BCH are transferred.Nasdaq joins the race of federal regulated cryptocurrencies. Bitcoin-friendly Square wins a new patent for crypto payment network. PundiX enters Brazilain Markets with its POS hile Tron launches its TVMIn a real-world adaption of Bitcoin and its usage as fiat currency took a giant leap, the Bessarabian market in Ukraine\u2019s capital Kiev allowed people to buy fruits and vegetables in Bitcoin and other cryptos through the crypto payment processor, Paytomat that support 11 cryptocurrencies. According to its website, Paytomat currently supports Bitcoin (BTC), Bitcoin Cash (BCH), Litecoin (LTC), Ethereum (ETH), Nano, Decred, Dash, ZenCash, ZCoin, Dimecoin, Waves & NEM. This is apparently an experimental stage where customers can spend their cryptos for fruits and vegetables.In another big news this week, Yahoo Finance recently integrated trading of bitcoin, litecoin, and ethereum. This is in addition to statistics which are available on the platform for other crypto tokens which are currently not tradable, including bitcoin cash and EOS. Given the prominence of Yahoo Finance, many in the digital currency community are heralding this development as an important one in the movement of cryptocurrencies toward the mainstream.The popular browser developer Firefox has announced that it will take new steps to prevent crypto jacking and other forms of illicit crypto mining in future iterations of its program. Cryptojacking, the process by which malware infiltrates a victim\u2019s computer to utilize processing power to mine for digital currency which is then retained by an outside source, has long been a concern in the digital currency community. This has been a particularly relevant problem for susceptible web browsers and websites. Users unwittingly navigate to an affected site, and then nefarious programs affiliated with the site harness the users\u2019 processing power to mine for tokens. But this step Firefox users are secure of this mischievous exercise carried out by sophisticated hackers.In a recent move to take blockchain to auto industry, Volkswagen has partnered with the IOTA project to launch its first working product called Digital CarPass- which is like a report card for a vehicle that uses a distributed ledger to ensure data such as mileage is reliable.According to a post of Reddit, as per the recent transaction data, a popular darknet site Silk Roadwhich sells drugs online seems to have moved USD 1 billion worth bitcoin from its cold wallet. This is the first time the wallet has got active since March 9th, 2014, which is some months after the sight was pulled down by FBI. This movement is anticipated to be leading to a huge dump by some crypto analysis. If sources are to be believed The NASDAQ is attempting to be the first mover in crypto exchange governance, order execution, and at the forefront of institutional movement into the crypto ecosystem. While there have been announcements of other headlines connected to global exchanges getting into crypto waters via partnerships and futures trading. Square too tires to get crypto payment to POS as it secures a patent that will allow its merchants to accept payments in currency as well as digital assets.Square which has over 2 million merchants, says that that crypto payments will also be processed at the same speed as traditional transactions like credit card payments. In other news, regarding cryptocurrency being used at POS PundiX entered the Brazilian market with a partnership with BitCapital the largest OTC dealers in Brazil for cryptocurrencies. Tron too held a global launching event for the TRON Virtual Machine (TVM). TVM is a virtual machine built by TRON Foundation for the purpose of making the TRON\u2019s ecosystem bigger and better.Bitcoin [BTC]One of the few weeks when Bitcoin sees a 10% rise. After being in the oversold territory for an over a week, BTC bounced back as shorts were covered and people started buying it. The ETF rejection going underway reconsideration also played a catalyst in buying. The prices hit the high point of USD 7,242.29 and the lowest point of USD 6,689.71 during the week. Apart from the outliers of BitMEX and BitForex that had volumes of 25.55% and 31.83% respectively, the exchanges that were more active, in volumes, with BTC across various pairs this week were, Binance (2.34%), BitFinex (2.13%), Bithumb (1.80%)In analysis, Researchers at Element Digital Asset Management, a consulting firm that offers cryptocurrency market advisory services, recently pointed out that bitcoin (BTC) has remained within the $5,500 to $8,500 price range for over three months now. According to the asset manager, this is a sign short-term traders have been dominating the crypto market.Also, read: Bull Rally Here? Altcoins Making a Spectacular Recovery as Bulls Charge at Full BlastEthereum [ETH]Ethereum finally came out of the slump as it rose 8.74% on the back of some technical factors. Ether prices, on the top, this week were at USD 301.14 and were at lows of USD 273.65 being pretty much in this range. The markets that were more active, in volumes, with ETH across various pairs this week were DOBI Trade (6.68%), OKEx (3.12%) and Huobi (2.66%) again BitForex being an outlier 36.53%In the news that surrounded Ethereum, The Chicago Board Options Exchange (CBOE) may be close to enabling the trading of futures for Ethereum (ETH) on its platform. This was revealed in a report from the specialized portal Business Insider, in which they mention that CBOE Global Markets, would be \u201cready\u201d to make this business move soon.Ripple [XRP]XRP too saw some positive move this week as the coin moved nearly 7 %. On the top, this week the prices of XRP were at USD 0.356798 and towards the bottom, it quoted USD 0.323066. The exchanges that were more active, in volumes, with XRP across various pairs this week were Bitbank (19.76%), Huobi (10.05%) and HitBTC (7.16%)XRP had some great news this week as Ripple is bridging that gap with RippleNet which offers SMEs a competitive edge for global payments. This week has been one seminal event in the history of XRP. 2 transactions under 10 minutes moved 6.7 billion XRP tokens amounting close to USD 2.1 billion as reported by Twitter Bot @XRPLMonitor. First, it was 2.1 bn XRP and the second was even bigger the move was around 4.6 billion XRP.The other movers and\u00a0shakersThe Other coins that made to the top and bottom this week according to Coin Market Cap (accessed on Sept 2 at 10:30 pm IST) wereMoversIGToken\u200a\u2014\u200aShowing a rise of 596.04%PKG Token\u200a\u2014\u200aShowing a rise of 199.65%VikkyToken\u200a\u2014\u200aShowing a rise of 166.11%ShakersWABnetwork\u200a\u2014\u200aShowing a drop of 60.46%Mozo Token\u200a\u2014\u200aShowing a drop of 49.72%Hexx\u200a\u2014\u200aShowing a drop of -47.86%What do you think would be the sentiment of the crypto markets next week? Do let us know your views on the same.The presented content may include the personal opinion of the author and is subject to market condition. Do your market research before investing in cryptocurrencies. The author or the publication does not hold any responsibility for your personal financial loss.Do not forget to follow our media handles and stay updated:Facebook | Telegram | Twitter", "responses": ""}, {"title": "What is Ethereum?", "author_name": "Michele D'Aliessi", "link": "https://medium.com/@micheledaliessi/what-is-ethereum-f4c5e566ff77?source=search_post", "post_date": "Jan 7, 2018", "readtime": "8 min read", "upvotes": "1.1K", "content": "What is Ethereum?The ultimate guide to understand Ethereum in simple\u00a0words.Michele D'AliessiBlockedUnblockFollowFollowingJan 7, 2018In a nutshell: Ethereum is a powerful, decentralised, super computer running on blockchain technology. Some key innovations make Ethereum a unique project with all the necessary building blocks to create a new, better, more secure, privacy and trust oriented internet. And that\u2019s a big deal.Why is it so interesting?Well, first of all it is \u201cdecentralised\u201d: this global computer runs on a network of machines (nodes) distributed around the world (more specifically, it runs on a blockchain). This means that it cannot be stopped, you can\u2019t just unplug it or halt its operations. In fact, anyone who wants to run a node of the network can do so from any computer connected to the internet, without asking for permission. Also, being decentralised, it cannot be easily hacked\u00b9 because there is no central point of failure.\u201cIt\u2019s ubiquitous, where there is internet there is Ethereum.\u201d - by Gavin WoodWho actually runs Ethereum then? It doesn\u2019t belong to anyone. There is no single entity who controls it, as of today it is governed by a community of software developers that write code and run the nodes of the network using their computers. With no single entity managing it, Ethereum is a truly decentralised project which is being built by the crowdsourced work of many skilled computer programmers. The efforts for improving Ethereum technology are coordinated by the Ethereum Foundation, a non for profit organisation who\u2019s mission is to \u201c[\u2026] build a more globally accessible, more free and more trustworthy Internet\u201d.It\u2019s an open project, in fact anyone can make use of this global computer. It can have as many users as we want, and anyone can both read the code that such computer is running or write new code that the computer can run. This means you can run your own applications on it, or just use applications developed by others. Ethereum code is open source and available on github.com/ethereum.There is no middleman, users can interact directly with other users with no third party involved. And when you decide to interact via an application built on Ethereum by a third party you can read the code directly to make sure the application does what it says it does. No middleman, no surprises\u00b2.The code running on Ethereum is immutable. The transactions, the data stored, the programs written are permanent. Once deployed on the global computer they cannot be changed. This means that not only you can verify the code of any application and understand what it does, but it also means once you\u2019ve verified it you can be sure nobody will be able to change it ex-post. Written, running code cannot be changed\u00b3.The interactions with this computer are extremely secure. In fact, any interaction with the computer (being it deploying new code, interacting with existing applications or exchanging value) is cryptographically signed - which in simple words means that it can not be altered or replicated\u2074.You own your data, you keep your value. On Ethereum each user will be able to decide which data to share and which data to keep, so you will be in full control of who uses your data and what for. Moreover, should your data generate value (i.e. like all the data you share on Facebook, that is a goldmine for advertisers) you will be able to retain (and profit from) that value too.As you can see from the chart below, Ethereum attracted a lot of attention lately and its adoption rate is growing exponentially.Number of transactions per day on Ethereum. Source: Etherscan.ioSo, what can Ethereum be used\u00a0for?Ethereum aims to be a platform on which anyone can create applications for value and data exchange. Its technology is based on \u201csmart contracts\u201d, programs that run on Ethereum and execute transactions of value and information.Let me give you an example. Imagine Jack has solar panels installed on his roof and his neighbour Alice would like to use Jack\u2019s renewable energy to recharge her electric bike during peak time at midday. However, each charge is worth just a few cents and they don\u2019t want to deal with exchanging a few pennies every day after each charge. If Jack and Alice would like to automate the payment in a smooth, seamless fashion they could just write a smart contract on Ethereum (nothing crazy, it\u2019s just some code) that checks how much energy Alice\u2019s bike is using from Jack\u2019s solar panels, multiplies it by the current electricity market price (at the time of the charge) and transfers the correct amount from Alice\u2019s account to Jack\u2019s one automatically. Done. No third party. No extra fees charged.Is the technology ready to be used? Yes, so much so that the United Nations are using it to provide food to thousands of refugees.Ethereum can be used to build unstoppable applications that coordinate the exchange of value and information for the\u00a0public.Here below are some of the most interesting applications that can be built on Ethereum (with some real examples):Identity management. Since each user on the Ethereum platform signs digitally all his/her interactions with smart contracts or other users, it is possible to associate an identity to a user and all actions performed by that user will be connected to his/her identity. - Civic and Blockstack are two projects that aim at managing identity on the blockchain.Trust and Transparency. Every time an agreement can be expressed via programming language, smart contracts can be used as a way to replace (and enforce) contracts between parties. It can also be used for transparency. For example: let\u2019s say you want to donate to a non-for-profit organisation but want to make sure they use the funds to support clean water projects in Africa. You can write an application on Ethereum that monitors how your funds are used in real time. - Take a look at AidCoin.Crowdfunding. Ethereum smart contracts allow you to generate tokens that can be sold in exchange for \u201creal money\u201d, effectively funding your new project or new venture. Very much like Kickstarter or Indiegogo, but without the need to rely on a third party. - Read more about Initial Coin Offering (ICO).Marketplaces. Imagine building an Airbnb where guests can interact directly with hosts and that has no service charges, or a Facebook where users interact directly own all their data and get a share of the payment advertisers do to gain their attention. Ethereum enables that too. - A decentralised version of LinkedIn called Indorse is already live.Copyright/ownership repository. When you send a transaction on the Ethereum network the information you add to such transaction are permanently stored on the Ethereum blockchain. They are immutable, have a time stamp of when they have been added and cannot be removed. For these reasons you can store a proof of ownership, register your IP or the copyright of a song or a book, on the Ethereum blockchain with the certainty that nobody can delete it and you will always be able to prove that you are the author/owner of such document. - MIT built a system to release certificates on the blockchain called Blockcerts.Governance. Ethereum is a good platform to handle voting systems at scale. Since each user of this global computer can interact with it in a secure way, Ethereum can be used to implement voting systems for elections, corporate governance, decision making and consensus agreement. - Abu Dhabi Stock Exchange and the Russian government are now experimenting voting systems based on blockchain.So, Ethereum is an extremely powerful platform on which we can build applications that can exchange value and information in a very secure way. Being still in its infancy it has several limits (i.e. it can only execute 10\u201315 transactions per second at the moment), but it is evolving rapidly thanks to the large community of developers working on it. Hopefully, this new technology will be leveraged to solve some of the biggest problems we are facing today and not just to collect some virtual kitties.", "responses": ""}, {"title": "Ethereum Multi-Signature Wallets.", "author_name": "Dave Appleton", "link": "https://medium.com/hellogold/ethereum-multi-signature-wallets-77ab926ab63b?source=search_post", "post_date": "Jun 25, 2017", "readtime": "8 min read", "upvotes": "727", "content": "Ethereum Multi-Signature Wallets.Dave AppletonBlockedUnblockFollowFollowingJun 25, 2017", "responses": "8"}, {"title": "Ethereum for\u00a0Everyone", "author_name": "Ethereum's AI", "link": "https://medium.com/@Ethereum_AI/ethereum-for-everyone-2846efa35815?source=search_post", "post_date": "May 10, 2017", "readtime": "17 min read", "upvotes": "222", "content": "Ethereum for\u00a0EveryoneEthereum's AIBlockedUnblockFollowFollowingMay 10, 2017This write-up has been updated\u200a\u2014\u200asee\u00a0here.A new, smarter, internet is coming; you can be an early adopter and major beneficiaryEthereum has given everyone a new \u201cworld computer\u201d; it is laying the groundwork for the next-generation internet. A smart web or Web 3. But what is it? What can you do with it? And how can you benefit from it? Let me try to explain as simply as I can.Ethereum is a \u201cblockchain\u201d technology, and as I will argue here, the most important of these technologies by a very large margin. A blockchain is a just a collection, or record, of transactions that are recorded digitally, chronologically, and openly within a community. The transactions could be financial information, but really, they can be any information. Sound boring? Maybe. But what it can do is far from boring. A public blockchain means this \u201cledger\u201d is open to everyone in the world. In fact, no company or country can control a public blockchain. For the average person, this may sound scary, at first, but it is actually very beneficial, even for companies and countries.A public blockchain maintains an accurate, community-agreed upon, public ledger that is immune to fraud by third parties. Entire countries can come to trusted agreements even if they do not actually trust each other. Even US defense giants, like DARPA, and a wide range of government representatives, see ways to use blockchain technology for cybersecurity because blockchains enhance data integrity. In fact, attempts to attack the ledger becomes openly visible, and any exploit in the coding of the technology is openly fixable by a community through a consensus. If another group happens to not agree with the consensus, they can start a different community maintaining a different blockchain, or a copy of the old blockchain. This is remarkably useful. But this is just scratching the surface of what Ethereum can do. The Ethereum public blockchain is on the verge of starting a global transformation.Ethereum, while still relatively young, has enchanted the hearts of developers (such as software engineers). Ethereum, by a large margin, has the largest number of developers, dominating this creative mindshare more than any other blockchain technology. It is currently estimated that there are at least 20,000 developers (some feel much more) that have started working with Ethereum. Some of those developers have started to make their voices heard. (see section \u201cSo what can you do on the Ethereum public blockchain?\u201d) So, while Ethereum is still in an \u201cearly adopter phase\u201d, the future appears quite clear, and remarkably bright!So what can you do on the Ethereum public blockchain?The Ethereum public blockchain is by far the largest, most encompassing, application of the Ethereum technology. There are also very interesting private, permission-only, versions of the Ethereum blockchain. There are also a few Ethereum clones. However, in this piece, I focus on the Ethereum public blockchain, and its native asset or token called \u201cEther\u201d or ETH. Importantly, ETH is THE token to purchase if you want to invest broadly in the Ethereum public blockchain (for details on purchasing ETH see So how do I invest or get involved?). Most importantly, ETH serves many functions on the Ethereum public blockchain, and as such, ETH is viewed as an asset with rapidly growing value.Ethereum is a technological milestone. Unlike the blockchain technologies that came before it, Ethereum is much more than a peer to peer payment system. Ethereum has a \u201cvirtual machine\u201d (aka, the Ethereum Virtual Machine or EVM). Which enables Ethereum to run not just a simple payment systems, but rather, more complex computer scripts known as \u201csmart contracts\u201d. Ethereum\u2019s public blockchain has been specifically designed to be a decentralized application platform. This means that Ethereum can run apps that are similar to apps you might find on a computer or smartphone, but in a way that shares the blockchains unique ledger-like features. For the Ethereum public blockchain, this means apps that can be decentralized, potentially owned by no company and no country, and yet globally accessible, secure, transparent, as well as many more incredible characteristics, depending the developers\u2019 desires.This is the building of a new economy. The Ethereum public blockchain provides an app store owned by no company and an asset, ETH, controlled by no government. This is the next version of the internet, an \u201cintelligent internet\u201d, a \u201cWeb 3\u201d. This is a \u201cworld computer\u201d. This is the beginning of something that will change how the world economy works, and not in a way that should be frightening to people or governments, but in a way that should be thought of as innovative, streamlined, better, with exciting opportunities for business growth and information security, including a country\u2019s most precious information. This is a technology that reflects a rising tide that lifts all boats.I think providing current examples of what is being done with the Ethereum public blockchain is a stronger way to explain my argument. Below are some examples. It seems clear now that Ethereum is becoming a technological standard for a combined industry that will soon be worth trillions.A brief word of caution\u200a\u2014\u200aEthereum technology is still very young. Some apps will succeed, but many will fail (like any other global market), and many of the development projects below have just gotten started. The examples below are not endorsements. Rather, they are examples of very early applications currently being built on the Ethereum public blockchain to better express how rapidly the ecosystem is growing and how incredibly far it reaches. There is good reason why major governments and fortune 500 companies are experimenting with Ethereum technology (both for public and private uses cases). But this is still the early adoption, early development phase. That is good, very good, for investors. But it requires wisdom, caution and acceptance of risks.Mega uber supercomputing\u200a\u2014\u200aHow about using an open source, globally accessible, unstoppable, super computer and hard drive made of the otherwise idle resources of Ethereum platform users, from tiny laptops to giant data centers? Ethereum\u2019s public blockchain provides a framework for distributed \u201ccloud computing\u201d. Overall, Ethereum\u2019s public blockchain is becoming an amazing global resource that can be used for nearly everything one can imagine in super computing, from science, computer graphics, business, machine learning, really the imagination is the limit, and once again, everyone in the world can contribute and have access (ex. Golem, iEx, Dfinity). Similarly, such cloud computing allows cloud storage (ex. Swarm, Storj).Fight counterfeiting\u200a\u2014\u200aAccording to International AntiCounterfeiting Coalition Inc., counterfeiting cost U.S. businesses over $400+ Billion annually. Imagine if there was a way for you, or your business, to track exactly where your materials come from to insure quality and prevent counterfeiting. A record that is free from fraud, not dependent on any single nation, company, or person (ex. Provenance, Chronicled). This also is an application of the \u201cInternet of Things (IoT)\u201d, which I will talk about more later.Start a company\u200a\u2014\u200aWant to create and maintain, a globally impactful company from your home, and never really need to manage it heavily. A company whose employees cannot be defined by a central location, can be recruited globally, and are uniquely skilled to meet the needs of the company (ex. Colony, Aragon, Maker). Similarly, for such companies, what if you could create a governance platform in which all stakeholders could table a proposal, and those proposals could be voted on democratically, without fraud, and with assured proposal execution (ex. Boardroom).Network and secure intellectual property\u200a\u2014\u200aWhat if your blog, or other published work, was part of a next-generation, planetary-scale, information and social media network that was immune to censorship, and permanently recorded, un-erasable, through the rest of human\u2019s foreseeable existence. Ethereum\u2019s public blockchain allows for a uncensorable, globally accessible, permanent storage of information (ex. AKASHA).Superior prediction\u200a\u2014\u200aWhat if you could find out what something is worth to the world, prior to that item actually being available to purchase. \u201cSomething\u201d and \u201cWorth\u201d, here, is very broadly defined. It could be a work of physical art (such a painting), or a service (such as flight insurance), the value of a company\u2019s stock, or the likelihood of a person winning a presidential election. These are called \u201cprediction markets\u201d. Ethereum\u2019s public blockchain allows one to build a decentralized prediction market, which means these markets can never be switched off, everyone is empowered to start one, they individually cost next to nothing, and the entire world can contribute to the prediction (ex. Augur, Gnosis).Super auditing\u200a\u2014\u200aWhat if you could have easy auditing, where accounting records cannot be altered by companies or individuals, and are accessible (whether encrypted or not) from anywhere for all foreseeable time because they are not dependent on any single device, server, company or country. This is a massive overall for how any accounting would work, and it applies to MANY Ethereum projects (ex. Balanc3, and many others as a bonus attribute)Digitized perks and asset value\u200a\u2014\u200aAirlines have airline miles. Hotels have points. Maybe your coffee house has a punch card. What if these merits, or tokens, were a part of nearly everything with value. Also, what if you could interoperate such tokens, and make them exchangeable through a decentralized open market accessible to the entire world. Ethereum\u2019s public blockchain is excellent at pulling this off. In fact, Ethereum provides a foundation for creating tokens in a compliant \u201cstandard\u201d (for example \u201cERC 20\u201d), facilitating interoperation. Trading these tokens will be seamless (ex. EtherDelta, 0x, Oasis Pro, Swap, Bancor). In fact, on the Ethereum public blockchain, one can set up a decentralized platform for maintaining portfolios of any digital asset (ex. PRISM). Also, we are not just talking airline miles here. The successful, billion-dollar, messaging app Kik is creating an Ethereum token. And it can be bigger! What if you token a country\u2019s currency (aka fiat)? In fact, a country could opt to token their fiat to turn it into \u201csmart money\u201d, making it more applicable to Web 3 and the Internet of Things. Moreover, this process is not dependent on a country. One could provide a simple exchange service to tokenize any type of fiat maintaining the 1:1 exchange rate for the government issues currency (ex. CodeTract, Decentralized Capital). Also, it does not need to be just fiat, it could be any asset, such as gold (ex. Digix), oil (ex. Bilur) and real estate (ex. Rex, REIDAO). This is one of the most serious revolutionary applications of the Ethereum public blockchain.Fair bets\u200a\u2014\u200aCasinos are fun. Gambling can be fun. But if you are smart, you know, the house always wins. Always. After all, they need a cut; it is a business after all. But how fair of a cut do they get exactly? Where do they set their profits? How do you know that the games a provably fair? Is there any evidence? Well, on the Ethereum public blockchain, one can create a contract-based casino where the games are absolutely provably fair, giving the house no real advantage (at least one not communicated) and with full transparency. Honestly, if such options were available, there would be no better casino to risk your money (ex. Edgeless, Etheroll, Winsome).Better loans and credit\u200a\u2014\u200aHow about a loan? Or some insurance? Or a rotating savings and credit? Currently, lending circles, where groups of trusted ordinary people come together to provide loans, insurance, and credit for each other have become remarkably popular, with total market in the $100s of billions. Essentially, we are talking about \u201ccredit\u201d, a concept older than money. One problem is that centralized companies that provide these services have are profit based (poor rates), not to mention pose risks to hackers and fraud. The Ethereum public blockchain cuts out much of the middle man, providing stronger decentralization, global scope, and person to person options (ex. Etherloan, Etherisc, WeTrust, Weifund).Video game economy\u200a\u2014\u200aLove video games? Love getting cool gaming items when you play? Wish you could sell those items when you are done with the game instead or throwing away your hard work? Or, how about competitive play? Do you wish you could challenge people to put their money where their mouth is? This is a new market that is perfect for decentralized platforms like Ethereum (ex. FirstBlood, Ownage). In fact, games could be designed to provide Ethereum tokens directly, providing new options for the gaming economy (ex. MetaGold, Nexium).Banks and charity\u200a\u2014\u200aThere is approximately two billion people that are unbankable because of their restricted income, or rural locations; Ethereum is changing it. In fact, for everyone, Ethereum\u2019s public blockchain provides a platform that dissolves barriers to banking and payments, with no needs for bank branches (ex. Humaniq, Omise Go, Alice). Even the United Nations launched a large scale test of using Ethereum to distribute funds for aid, (yes, the United Nations!!!) and others have used it to rebuild public trust in charities.Mobile text/payment/browsing\u200a\u2014\u200aHolding tokens, like ETH, is nice, but what about spending them outside of apps, for example, to buy a coffee? (ex. Plutus, TokenCard) It would be great to be able to text anyone in the world a small tip, or payment? More traditional apps are starting to work like this, such as WeChat (mostly in China), and they are growing in popularity, with billions of monthly users. But using Ethereum\u2019s open protocol, these services can be available to entire world, even those that are unable to setup traditional bank accounts (see projects umaniq, Omise Go, Alice mentioned in \u201cBanking and charity\u201d for beneficiaries). But this is not just about altruism. This is about a completely open world financial system. Honestly, an entire book could be written on the potential here, but to sum up, this is a trillion dollar industry well poised for transformation by the Ethereum public blockchain. Moreover, some of these apps are being designed to provide access to all of Ethereum\u2019s other public decentralized applications (ex. Status, Toshi).Asset management and investing\u200a\u2014\u200aThis emerging new economy provides new management and investment opportunities and we are already beginning to see a healthy internal organization emerging. For example, while ETH is the primary token of Ethereum\u2019s public blockchain, Ethereum\u2019s ERC tokens (see Digitized perks and value) also have value. The complex economy emerging around these tokens may make it difficult to decide with which to invest, hold, secure, etc. Expert digital asset management are emerging to assist, creating services such as \u201cindex\u201d funds, markets, etc. to help. The businesses are also building on the Ethereum\u2019s public blockchain (ex. Iconomi, Melonport, Taas, Omise) to benefit from the various attractive qualities the blockchain provides (open, transparent, lower costs, decentralized, etc).Empowering creators\u200a\u2014\u200aThere is a huge disconnect between artists, producers, writers, and really the entire media industry. Ethereum\u2019s public blockchain can benefit the entire industry, with strong paths to ownership and control by the content creators, while at the same time novel, cost effective, ways for content creators to reach agreements with producers, directors, actors, crew and be able to define royalty and rights management in a way that transparent and fair (ex. JAAK, Ujo, Voise, SingularDTV).Open world knowledge base\u200a\u2014\u200aWikipedia great. In fact, I would argue Wikipedia is up there with the printing press for its impact on the world. But what if we can make something like Wikipedia more accurate, and more detailed, by rewarding strong contributions and peer review. Also, what if we could make it uncensored, with no central administrator. Finally, what if all this world\u2019s information could be immortalized on the distributed Ethereum public blockchain, never dependent on central servers (ex. Lunyr).Matchmaking\u200a\u2014\u200aFinding a date, new friends, like-minded people, or organizing a club, the Ethereum public blockchain can change all of it. That is a huge market. Such applications on the Ethereum public blockchain have some unique attributes. They could be absolutely free for casual users, but with token rewards embedded within the system; they could be incentivized in a fair and transparent way. If you want a date, but fear expensive subscription-based apps that have a conflicts of interest (they want to keep you on the platform) this a great way to go. (ex. Matchpool). In fact, such match making could be used to find workers for a project, basically a nuanced version of global job market, recruitment and crowdsourcing labor (ex. ChronoBank, Ethlance).Ad tokens\u200a\u2014\u200aCompanies want people to watch their ads. People do not feel incentivized to watch such ads and so they block them from their browsers. This creates quite a dilemma. But what if you could incentivize the entire world to watch ads. The creator of the widely used programming language \u201cJavaScript\u201d and co-creator of the browser Mozilla (Brendan Eich) is doing just that using the Ethereum public blockchain (ex. Brave web browser basic attention token).Internet of Things (IoT)\u200a\u2014\u200aDevices are starting to talk to other devices autonomously. Smart homes? Sure. But even smart cities! And cities are looking at Ethereum for solutions. For example, ConsenSys, an Ethereum firm, are the official blockchain advisers for Dubai. This is going to be bigger than big. The Ethereum public blockchain is the ideal home for IoT applications. Coupled with smart contracts, the Ethereum rapid transaction options (ex. Raiden), the Ethereum public blockchain is the most capable IoT blockchain there is, and by far. This is another area that an entire book could be written dedicated to Ethereum. Also, these same technologies allow you to pretty much share anything and be compensated (ex. Project Oaken, Slock.it).Given this sample of projects currently being actively build on the Ethereum public blockchain, I think it should be obvious that everything is starting to change. Fortune 500 companies have really taken notice of Ethereum, strongly considering what the Ethereum public blockchain and Ethereum\u2019s is more private strategies can bring to business. Take a quick look at the Enterprise Ethereum Alliance to truly see how big this is getting. It is becoming a \u201cwho\u2019s who of planet earth\u201d, a ground swell, a revolution! While investing in any blockchain should be considered part of your higher risks strategies, the potential here, in my opinion, is like nothing I have seen.Synergy, ICOs and CapitalEthereum startups benefit from substantial synergies. While somewhat dated because the ecosystem is greatly expanded, there are other blog posts well worth a read on the subject (ex. here). Basically, these different ETH-based enterprises benefit from various redundancies (creating competition fostering innovation) but also working together, building out an exciting complex ecology.Also, many of the above start ups are remarkably well supported. Much like any clever startup, there is support from general investors, for some, this includes big names, including fortune 500 companies. But also, these start up have often gained unprecedented capital through \u201cinitial coin offerings\u201d or ICOs. One down side to ICO is that regulations have yet to catch up on how to treat them. Given the lack of regulatory oversight, ICOs are risky endeavours where trust in the teams behind the ICO may be questionable. However, not all ICOs are created equal, therefore I am greatly oversimplifying by clumping them all together. Many of the ICO teams are run by people well known within the developer community, gaining as much trust as one might expect for any start-up if not more (an odd reality where social networks and venture capital collide).Nevertheless, the upside to ICO to the public is quite strong when run by trusted peoples. For one, you don\u2019t need to be rich, or part of an elite, to participate. The world has access to support and benefit from innovative developers. Moreover, ICO are creating a unprecedented network effect for Ethereum\u2019s public chain, creating massive expansions in mind share, each team essentially its own node in a rapidly expanding mesh of developers. The only analogy to this may be the creation of the internet itself, but really, the full impact is unlikely to be well understood for years to come. Nevertheless, the ICO has created multiple teams working on Ethereum\u2019s public chain for the foreseeable future.Before you jump into investing in Ethereum\u2019s public blockchain, you may want to know\u200a\u2014\u200aDoes Ethereum have any competition?No.Ok, ok, ok not exactly true. There are other very interesting blockchain technologies out there, really clever stuff, and many of which are likely to work extremely well alongside Ethereum. Blockchain to blockchain interoperation (working directly together) is a very obvious future. Zcash (ZEC) is one excellent example. It allows a level sophistication in privacy that Ethereum\u2019s public blockchain will not provide quite at the same level. But Zcash is not a smart contract platform. Zcash and Ethereum developers are working on mutually beneficial solutions. In other words, both benefit by working together more than working apart.Overall, the vast majority of other blockchains, such as Bitcoin, Dash, Monero, Litecoin, Ripple, are not Smart contract platforms, and therefore, are not competitors for such a market. They are far more limited. And while there are a few areas where they could complete, overall, they are both likely to gain more from working with Ethereum than apart from it.As for other smart contract platforms, there is not much. A somewhat confusing early branch of Ethereum, now called \u201cEthereum Classic\u201d (ETC), still exists, but there is no momentum developing on it, and the developer resources available to build on are rapidly getting dated compared to the more sophisticated options now available for ETH, the Ethereum public blockchain.Again, Ether or \u201cETH\u201d should not be confused with ETC. All the projects I mention here are being built on Ethereum\u2019s public blockchain, which uses ETH. The developer mindshare (number of developers) committed to ETH is overwhelmingly dominating (1000:1 in favor of ETH, conservatively). Ethereum Classic was a byproduct of early technology growing pains. Fortunately, these pains did not prevent the Ethereum public blockchain from achieving developer dominance.There are also other smart contract platform methods that, while years behind Ethereum in development, are still very intriguing. Rootstock (RSK) is smart contract platform that is born to interoperate with Bitcoin. At first, the argument for Rootstock was that it would be more secure, but this argument no longer can be true, which is a big blow to using Rootstock.The Ethereum public blockchain is more secure, with a more clear development path, and greater core developer funding than Bitcoin. Nevertheless, Rootstock may make Bitcoin a little smarter, possibly at the price of some security and with more third party oversight, and a fee. RSK does not have its own token for sale; it is a more proprietary add-on for Bitcoin. This means RSK has much less financial backing than that which was available for Ethereum developers. Also, while RSK plans to be EVM compatible, that does not carry forward all the high quality developer resources that Ethereum currently has available. Sergio Demian Lerner, one of the primary founders, has stated he does not see RSK as competition for Ethereum. Although not discussed, Rootstock and Ethereum could make great music together. Interoperating applications between Rootstock and Ethereum should be quite easy. This could facilitate Bitcoin into the larger blockchain network, where Ethereum\u2019s public blockchain is situated to serve as the primary nexus.There are also some newer ideas for smart contract blockchains beginning to emerge. While they are years behind, they are often still very clever, and will be exciting to watch.So how do I invest or get involved?For new folks that are just wanting to invest early, go buy some Ether or ETH at an exchange available in your country (a list provided below). You can keep that ETH on the exchange, or for added security, I strongly encourage you learn a little about hard wallets for digital currencies (ex. Ledger Nano S). There are other Ethereum wallets and browsers as well, and as you learn more about Ethereum, you will be able to use these these to participate in Web 3 (and some have started using Ethereum without even knowing they are using it).As for exchanges, I apologize if your country is not listed below, but I suggest asking ethtrader for help if you need it!America, US dollarshttps://www.coinbase.comhttps://gemini.com/Australian, Dollarhttps://btcmarkets.net/Canadian, Dollarhttps://www.quadrigacx.comChinese Yuanhttps://www.huobi.comhttps://www.okcoin.comhttps://yunbi.comEuropean Euroshttps://www.kraken.comMexican Pesohttps://bitso.comSouth Korean Wonhttps://coinone.co.kr/https://www.bithumb.com/Besides investing, you can also build on, or with, Ethereum. There a multiple communities ready to help you get started if you are an aspiring developer or entrepreneur.To start, visit:https://ethereum.org/https://github.com/iurimatias/embark-frameworkhttps://github.com/trufflesuite/truffleAnd read up, maybe browsinghttps://www.reddit.com/r/ethereum/Was this information on Ethereum helpful?If so, please consider supporting my desire to write more by sending some tokens of your appreciation to my addresses:Ethereum = 0xF815A69d060322dC383E4d1378d62d9BE10fc164Edit historyMay 30th, 2017Minor grammar changesEmbark link for developers (silly oversight)Huobi exchange added for ChinaOKCoin exchange added for ChinaPRISM addedKik token addedAdded statement and a link about Ethereum overtaking Bitcoin security, developer path, and funding.June 11th, 2017Some tightening (grammar style) of paragraphsAdd the news regarding Vitalik Buterin positive meetings with various government officialsJune 23rd, 2017Token changed name to Toshi, fixed referenceAdd BancorAdded the section Synergy, ICOs and Capital", "responses": ""}, {"title": "This is How Smart Contracts and Ethereum Work. Brief Introduction", "author_name": "Lukas K", "link": "https://medium.com/startup-grind/gentle-intro-to-blockchain-and-smart-contracts-part-2-30a6c9a40946?source=search_post", "post_date": "Jul 6, 2017", "readtime": "5 min read", "upvotes": "537", "content": "This is How Smart Contracts and Ethereum Work. Brief IntroductionLukas KBlockedUnblockFollowFollowingJul 6, 2017Blockchain technology is gaining momentum and making its way into our daily news, drawing the attention of the worlds leading companies.However, I see a lack of simple and easy to understand content for people to learn about smart contracts. That\u2019s why I started writing simple articles for newcomers to the blockchain. Check my previous article where I introduce Blockchain and Smart Contract in a simple manner.This article is a review on how to execute a smart contract, how does smart contract communicates with the outer world and the use case that is trending in the Ethereum network for the past few months.Gas and miners motivationThe smart contract is a piece of code, which is executed on the computers in the network.All computers (miners) executing the code must come to the same result and reach a consensus. In such way, we can be sure that the code was executed as it should be.But the main question is what motivates the computers to execute a smart contract?Ethereum blockchain came with a term Gas. Gas is a unit, which represents the amount paid for the code execution. Along with some smart contract function call, you have to declare the amount of gas and pay for it.This motivates miners to run your code and earn money for that. Depending on the logic within the code, the gas price varies as well. You should treat Ethereum as a global server, where you pay for each transaction instead of monthly fee for some central server provider.The gas as well motivates developers to write efficient code so that it would require less gas for the execution.Communication with outer\u00a0worldAll the basic applications we use daily integrates with various external services (API\u2019s). For example, a travel website, according to the weather outside, could propose different trips.It means that this server has to connect to weather API to retrieve data and show information accordingly. So where is the catch here? The smart contract should also be able to do that, right?The answer is no.The main reason behind is that this code is executed on each and every node. It means that the call to weather API could happen at a different time as the nodes might start executing theThe main reason behind is that this code is executed on each and every node. It means that the call to weather API could happen at a different time as the nodes might start executing the code, not at the same time.And in one second we could have sunny weather data returned, and in another, we can have a heavy rain. In such case, nodes would never be able to reach a consensus on the result of the smart contract.Now you might think \u2018..what the sh*t is Ethereum if you cannot use API\u2019s as in normal application where various integrations are needed?..\u2019The solution\u200a\u2014\u200aOracleGreat news! There was a solution developed called Oracle. The idea is pretty simple. Instead of the smart contract calling external API, the API itself pushes the data to the blockchain.The result is that all the nodes now have the same data within the network. It is implemented in a simple way, that contract triggers the event, external applications such as Oraclize listens to that event, retrieves data from the API and adds transaction with the result to the contract.The solution seems legit. But on the other hand, you now deny the whole decentralisation idea and have to trust some central data provider.Use case\u200a\u2014\u200acrowdfundingEthereum creators provided some simple examples that could be built on their platform. I would like to cover one example to better understand possibilities the technology brings to the table.I guess everybody knows Kickstarter. Project team sets minimum and maximum funding goals. They also have to trust Kickstarter that if the amount of money will be reached, Kickstarter will pay the team.On the other hand, backers need to trust Kickstarter that they will return the money invested in if the goal is not reached or send money to the project team if the goal is reached. Such solution is very centralized.This type of Fundraising got recently very popular for blockchain projects. Especially on Ethereum. Smart contract is written with identical rules.People send money to the contract and they can be sure, that if the amount won\u2019t be reached they will be able to claim back the money. All smart contract code is public and they can review it (of course you need to have some basic understanding of programming).This approach removes the need of Kickstarter as an intermediary taking fee.With the help of such crowdsale smart contracts, projects are raising Ethers (Ethereum blockchain currency) worth of millions USD.Recently Bancor Crowdsale raised over $140 Million and all this amount of money was sent directly to a piece of code (smart contract) which processed transactions, assigned tokens in return and sent money to the team\u2019s wallet. This is the real power of smart contracts!Are you a developer? You can take a look at the piece of Bancor crowdsale code written in Solidity language. It should not be tough to read and understand the logic behind.I believe that smart contracts have a huge possibilities to revolutionize the internet and this is just a beginning!Most secure crypto currency hardware wallet is Ledger Nano. It provides hardware security for every user only for \u20ac59. Find out more here.Enjoyed the article? Please let me know by clicking green CLAP below or send a recommendation to a friend. Thank you!", "responses": "4"}, {"title": "The Trend That Is Increasing The Urgency Of Owning Bitcoin And\u00a0Ethereum", "author_name": "Forbes", "link": "https://medium.com/forbes/the-trend-that-is-increasing-the-urgency-of-owning-bitcoin-and-ethereum-a32500052894?source=search_post", "post_date": "Oct 17, 2017", "readtime": "6 min read", "upvotes": "", "content": "The Trend That Is Increasing The Urgency Of Owning Bitcoin And\u00a0EthereumForbesBlockedUnblockFollowFollowingOct 17, 2017Photo Credit: JANEK SKARZYNSKI/AFP/Getty Images.By Spencer BogartEveryone has heard of ICOs, but an older approach involving airdrops and hard forks is gaining new traction and holders of Bitcoin and Ethereum stand to benefit significantly if the trend continues.In an ICO, participants contribute capital to buy tokens whereas, in an airdrop (or hard fork), tokens\u2026", "responses": ""}, {"title": "The Challenge of UX in\u00a0Ethereum", "author_name": "Anna Rose", "link": "https://medium.com/ecf-review/challenge-of-ux-in-ethereum-122e1a33688d?source=search_post", "post_date": "Jun 25, 2018", "readtime": "9 min read", "upvotes": "1.4K", "content": "The Challenge of UX in\u00a0EthereumAnna RoseBlockedUnblockFollowFollowingJun 25, 2018This text was produced by Zero Knowledge, a podcast hosted by Anna Rose and Fredrik Harryson, which explores the decentralised technology that will power the emerging Web3 and the community building it. The podcast is made for developers and technically-minded people looking to educate themselves on the inner workings of the space.", "responses": "8"}, {"title": "Ethereum tokens Dai (DAI), Golem (GNT), Maker (MKR), and Zilliqa (ZIL) have launched on Coinbase Pro in select jurisdictions", "author_name": "Coinbase", "link": "https://blog.coinbase.com/ethereum-tokens-dai-dai-golem-gnt-maker-mkr-and-zilliqa-zil-are-launching-on-coinbase-3065eeb42d5b?source=search_post", "post_date": "Dec 18, 2018", "readtime": "4 min read", "upvotes": "1.4K", "content": "Ethereum tokens Dai (DAI), Golem (GNT), Maker (MKR), and Zilliqa (ZIL) have launched on Coinbase Pro in select jurisdictionsCoinbaseBlockedUnblockFollowFollowingDec 18, 2018Support for GNT and DAI will initially be available for Coinbase Pro users in the US (excluding NY), the UK, EU, Canada, Singapore and Australia. MKR and ZIL will not be available to customers in the US, but will be tradable in the UK, EU, Canada, Singapore and Australia on Coinbase Pro.Earlier this year we announced our intention to support the ERC20 technical standard across Coinbase. Following our launches of 0x (ZRX), Basic Attention Token (BAT), and our stablecoin, USD Coin (USDC) across all Coinbase platforms, we recently added Civic (CVC), district0x (DNT), Loom Network (LOOM) and Decentraland (MANA) to Coinbase Pro. Today we\u2019re announcing support for DAI (DAI), Golem (GNT), Maker (MKR), and Zilliqa (ZIL). Of these, GNT is not technically an ERC20 token, but is an Ethereum-based token.Each of these tokens has associated functionality, some of which may be in beta. Moreover, each token\u2019s associated functionality is not currently directly accessible via the Coinbase Pro platform. For example, the Golem GNT token provides access to a distributed compute farm, the Zilliqa network can be used to experiment with high-performance smart contracts, and the MKR and DAI tokens form a paired set of assets in which MKR provides governance, and DAI is a decentralized, collateral-backed stablecoin. In particular, direct access to smart contract functionality will not be immediately available through Coinbase Pro. As a result, users who want to engage in MKR governance, use their GNT tokens to submit rendering tasks to the Golem beta network, utilize functionality like Compound, or exit DAI positions in the event of global settlement will need to move their assets from Coinbase Pro to a local wallet.Other digital assets and ERC20 tokens may follow, as described in our related posts regarding exploration of new assets. Our US Pro platform, operated by Coinbase, Inc., will support trading in DAI and GNT only. International Coinbase affiliates will support trading in MKR and ZIL for clients in select jurisdictions outside of the US.We recognize that there are popular assets that we have not yet added to our platform. Our decision to add ERC20 tokens first arises in part from the relative ease of integrating the standard with our existing infrastructure, particularly from a security standpoint. However, as noted in our earlier post, we are exploring the addition of many new assets beyond ERC20 tokens on a jurisdiction-by-jurisdiction basis.Dai (DAI), Golem (GNT), Maker (MKR), and Zilliqa (ZIL) are launching on Coinbase\u00a0ProAt some point after 11:45am PT on Tuesday, December 18, we will begin accepting inbound transfers of DAI, GNT, MKR, and ZIL on Coinbase Pro. We will accept deposits for at least 12 hours prior to enabling trading. Once sufficient liquidity is established, trading will begin on each respective USDC order book. Support for GNT and DAI will initially be available for Coinbase Pro users in the US (excluding NY), the UK, EU, Canada, Singapore and Australia. MKR and ZIL will not initially be available to customers in the US, but will be tradable to users in the UK, EU, Canada, Singapore and Australia. Additional jurisdictions may be added at a later date.Please also note that these assets are not yet available on Coinbase.com or via our mobile apps. We will make a separate announcement if that occurs.The Stages of this LaunchThere will be four stages to the launch as outlined below. We will follow each of these stages independently for each new order book. If at any point one of the new order books does not meet our assessment for a healthy and orderly market, we may keep that particular book in one state for a longer period of time, or suspend trading as per our Trading Rules.We will send tweets from our Coinbase Pro Twitter account as each order book moves through the following phases:Transfer-only. At some point after 11:45am PT on Tuesday, December 18, customers in applicable regions will be able to transfer DAI, GNT, MKR, and ZIL into their Coinbase Pro account. Customers will not yet be able to place orders and no orders will be filled on these order books. Order books will be in transfer-only mode for at least 12 hours.Post-only. In the second stage, customers can post limit orders but there will be no matches (completed orders). Order books will be in post-only mode for a minimum of one minute.Limit-only. In the third stage, limit orders will start matching but customers are unable to submit market orders. Order books will be in limit-only mode for a minimum of ten minutes.Full trading. In the final stage we may choose to leave the order book in limit-only mode or we may make full trading services available, including limit, market, and stop orders.One of the most common requests we receive from customers is to be able to trade more assets on our platform. With the recent announcement of our new listing process, we anticipate listing more assets over time that meet our standards.Sign up for a Coinbase Pro account to start trading.", "responses": ""}, {"title": "Avoiding out-of-gas error in large Ethereum smart contracts", "author_name": "Kirill Bulgakov", "link": "https://medium.com/daox/avoiding-out-of-gas-error-in-large-ethereum-smart-contracts-18961b1fc0c6?source=search_post", "post_date": "May 3, 2018", "readtime": "7 min read", "upvotes": "710", "content": "Avoiding out-of-gas error in large Ethereum smart contractsKirill BulgakovBlockedUnblockFollowFollowingMay 3, 2018Nowadays, more and more apps and instruments utilize blockchain technology and Ethereum smart contracts. The more complex the business logic behind the smart contract is, the more gas it takes to deploy it to the network. This is due to the fact that when the size of the source code increases, the size of the contract\u2019s bytecode increases as well. Uploading a large amount of bytecode requires a lot of gas. At this time, there is a limitation of about 8 million gas limit per block on the Ethereum blockchain. It means that the total amount of gas for all the transactions in a block including contract deploy cannot exceed this number.This article will describe several methods that could be used to place large smart contracts on the Ethereum blockchain.What is a\u00a0bytecodeSmart contracts cannot function without the Ethereum Virtual Machine. EVM is a runtime environment for executing smart contracts based on Ethereum. The Virtual Machine does not work directly with the Solidity code, it works with the bytecode. The bytecode is a set of instructions for the Virtual Machine, that has strict technical specification described in the Ethereum Yellow Paper\u00a0. Any smart contract written in Solidity (or any other language for the EVM) is first compiled to the bytecode that will be executed by the Virtual Machine later on.Let us take a look at a small contract and its bytecode:contract Example {    mapping(uint => bool) public map;        function setValue(uint key, bool value) {        map[key] = value;    }}Bytecode of the Example\u00a0contractAs you might notice, a large amount of bytecode is generated even for a couple lines of a simple code. An issue stated above (block gas limit exceeded) can take place when your contracts become more complex or start to use other contracts.Let us have a look at some methods that could be of help here.LibrariesCode reuse through librariesA Library is a special type of contract with some limitations. For example, a library cannot receive Ether and does not have its own storage.Despite some limitations, a library can be used to reduce the bytecode size of the main contract. A library is uploaded to the Ethereum network just once, and then it can be used by several contracts that require this functionality. Thus, you can move various functions to the library in order to reuse the code efficiently. In so doing, you reduce error probability as well as reduce the size of bytecode in the contract that calls the code. This result achieves due to call low-level function which will be described below.Using signatures to call functionsLow-level function: callIn addition to common language structures, Solidity supports low-level commands as well. One of such commands is call that is used to send message calls to other contracts. An advantage of this approach is that a smart contract does not have to store the bytecode of the called function. This approach can prove to be especially relevant if the bytecode of the called method is too big. As a result, the compiled smart contract will not have any extra opcodes, that in turn will reduce its size. However, please notice that it is not possible to get the return value of the function when the call command is used.The syntax of the call function looks as follows:address.call(bytes4(keccak256(<function signature>)), arguments);In other words, the first argument should be the first 4 bytes of the hash of the called function signature. It is crucial to consider the following when writing the function signature:For any size of the uint type (uint8, uint16, etc.) it is necessary to use uint256 in the signature;When being listed, the arguments should be separated by commas, but with no spaces!Transmission of dynamically sized types, for instance strings or arrays, will not function correctly;For example, if a contract has the function function test(uint a, uint b), the correct call of such a function will look as follows: address.call(bytes4(keccak256(\u201ctest(uint256,uint256)\u201d)), a, b);In case the test executing was successful, you will get true, but if an error occurred you will get false. So don\u2019t forget to use require for handling error purposes.Using interfacesThe same result can be achieved by means of interfaces.An Interface is a special type of contract, limited to what the Contract ABI can represent. Put it in other way, it is possible to describe the function signature in the interface, but not the implementation. Using interfaces is convenient for a couple of reasons:The code readability improves, as compared to the explicit usage of call;You can handle the return value;The use of an interface can be shown with the following example:interface ICallee {    function makeCall(uint val) returns(uint);}contract Caller {    ICallee public callee;        function call() {        callee.makeCall(42);    }}The Caller contract knows the interface of the ICallee contract, that is why its bytecode will have hash of signature of the makeCall function:\u00a0\u202616637e839a3c602a\u2026So, it becomes possible to use a function from another contract without storing its bytecode in the called contract.Code decompositionCode decomposition through librariesCode reuse is not the sole purpose of a library. For instance, in Daox smart contracts ecosystem CrowdsaleDAO Factory uses the library to split bytecode into two contracts. To avoid uploading the bytecode of the CrowdsaleDAO contract along with the bytecode of the CrowdsaleDAO Factory contract we moved the process of its creation into a separate light-weighted DAODeployer library, which is uploaded independently from the factory:contract CrowdsaleDAOFactory is DAOFactoryInterface {    function createCrowdsaleDAO(string _name, string _description) public {        address dao = DAODeployer.deployCrowdsaleDAO(_name, _description);         DAODeployer.transferOwnership(dao, msg.sender);    }}library DAODeployer {    function deployCrowdsaleDAO(string _name,  string _description)    returns(CrowdsaleDAO dao) {        dao = new CrowdsaleDAO(_name, _description);    }    function transferOwnership(address _dao, address _newOwner) {        CrowdsaleDAO(_dao).transferOwnership(_newOwner);    }}The following two images show how effective this method is:The difference between two methods is more than 5\u00a0timesThe factory on the left does not use the DAODeployer library, while the one on the right does. Thus, a slight increase in the functionality of the factory or CrowdsaleDAO will make the block gas limit sufficient for uploading the factory to the network without any additional optimization.Decomposing the code into contractsSolidity supports inheritance with the is keyword. As Solidity documentation says: \u201cWhen a contract inherits from multiple contracts, only a single contract is created on the blockchain, and the code from all the base contracts is copied into the created contract.\u201d Consequently, if parent contracts have large bytecode, the result contract is very probable to exceed gas limit of the block. In order to avoid a problem one can decompose the code into several contracts, and use delegatecall after that.delegatecall is another low-level method that is very similar to call.Its main difference from call is that when using delegatecall the state of the storage gets fully copied from the calling contract into the called contract. At the same time, the msg.sender and msg.value variables do not change. This method can be used when reusing the code that implies change of the storage. Let us consider how effective this method is on the following example:The ecosystem of Daox smart contracts has several types of voting, each with almost identical functionality. When using inheritance through the is keyword, the bytecode size gets too large, that is why this option is not suitable.In order to reduce the amount of opcodes of the contract it was decided to use delegatecall. As can be seen from the diagram above (fig. 1), three types of voting use a common codebase through a delegate call to the Voting contract. Please notice, that all three voting types are inherited from the VotingFields parent contract. This allows for having the same feature set, which in turn ensures the correct operation of such pseudo-inheritance.SummarySolidity has several architectural solutions for excessive block gas limit.If you call a small number of functions from the external contract, interfaces or call() will work for you, as there is no need to store the bytecode of other unused functions;When several contracts use one functionality that does not change the storage, libraries would be an ideal option;If an access to the storage variables is needed, you can resort to the code decomposition, using delegatecall();Please note that this list is not complete, but these turned out to be the most effective optimization.", "responses": "3"}, {"title": "SWIPE\u2019s Ethereum Japan Meetup in Shibuya, 20th June\u00a02018", "author_name": "De Xun", "link": "https://medium.com/swipecrypto/swipes-ethereum-japan-meetup-in-shibuya-20th-june-2018-c46ad643893e?source=search_post", "post_date": "Jun 21, 2018", "readtime": "2 min read", "upvotes": "3.9K", "content": "SWIPE\u2019s Ethereum Japan Meetup in Shibuya, 20th June\u00a02018De XunBlockedUnblockFollowFollowingJun 21, 2018On the 20th of June 2018, SWIPE is honored to be hosted in a meetup organized by Ethereum Japan, held in Shibuya, Tokyo. This meetup, far from the borders of Singapore and Indonesia where the majority of the team resides is one of SWIPE\u2019s first steps in our strategic plan to physically reach out to a global audience and raise awareness about our project visions and aims.CEO Clifford Lim and CTO Andrew Marchen was present at the event. Similar to our meetup organized just weeks ago in Singapore, they covered the current problem with the traditional model of data monetization, the comprehensive roadmap SWIPE has laid out to tackle the problem and the value proposition of a SWIPE network in building an ecosystem where data buyers and users enjoy greater benefits.CTO Andrew Marchen presenting about\u00a0SWIPESWIPE is grateful towards Ethereum Japan and Yusei, Assistant Organizer of Ethereum Japan for providing SWIPE with the opportunity to present at this meetup. The SWIPE team fully appreciates our Japanese audience for their attendance and support shown towards the SWIPE project. As we secure key milestones in the progress of our project, it is in SWIPE intention and interest to strengthen our community building around the globe, so don\u2019t be surprised if you see SWIPE knocking on your borders soon, for SWIPE is going global.SWIPE Team with Ethereum Japan Organizers!About SWIPESWIPE aims to create a network of apps that are able to work together to create valuable data as a collective, instead of relying on centralized intermediaries. As part of the network, all data collected will be aggregated, anonymized and encrypted. It will then be channeled into an analytics engine which packages it to be monetized directly to data buyers in a decentralized data marketplace. This process provides transparency to data buyers as they can trace the origins of the data, creates a fairer way for app developers to monetize data and empowers users by giving them full control and ownership of their data. SWIPE is invested by Kenetic, a blockchain firm that invested in huge blockchain projects like Zilliqa, ICON, and Bluzelle.Telegram: https://t.me/swipecryptoFacebook: https://www.facebook.com/swipecrypto/Twitter: https://twitter.com/swipecrypto/Medium: https://medium.com/swipecryptoGithub: https://github.com/swipecryptoBlockpost: https://blockpost.app/", "responses": ""}, {"title": "New Ethereum Dev Tools from\u00a00x", "author_name": "Leonid Logvinov", "link": "https://blog.0xproject.com/new-ethereum-dev-tools-from-0x-db80ee9e802?source=search_post", "post_date": "Jan 17", "readtime": "4 min read", "upvotes": "1.9K", "content": "New Ethereum Dev Tools from\u00a00xFour tools to help you write better smart contractsLeonid LogvinovBlockedUnblockFollowFollowingJan 17Today we\u2019re releasing four new tools to help Ethereum developers working on smart contracts. We\u2019re excited to finally release these tools publicly, as we have been using them for a while internally at 0x and have shared them with a few other projects in the community.Check out sol-compiler, sol-trace, sol-coverage, and sol-profiler to get started!Ethereum toolingAt 0x, we embrace the UNIX tools philosophy: \u201ceach tool should only do one thing, and one thing well.\u201d When we started building 0x protocol, Truffle was the de-facto framework for projects. It worked reasonably well and we\u2019re glad that it helped us get started. However, as we grew, our requirements evolved and we kept pushing the boundaries of what was possible with the framework. Truffle is the Ruby-on-rails of Solidity development and we found it hard to extend it in unintended ways. That\u2019s why we decided to build a set of modular tools that can be combined together and used by others. None of the tools we are releasing today are 0x-specific. You can start using them in your project independently of your current stack (even with Truffle projects!).By evaluating the existing toolset and breaking up our workflow into logical pieces, we\u2019ve realized that Ethereum development consists of two main stages. Compiling contracts into artifacts and then doing stuff with those artifacts (e.g running tests, debugging, verifying or analyzing metrics, etc\u2026). Unfortunately, there is no single artifact format used by all tools. Some that have reasonable adoption are Truffle\u2019s artifacts and Solidity\u2019s standard JSON output (SSJO from now on). Truffle artifacts include a lot of compiler metadata that we never used and were missing other pertinent pieces of data. Unfortunately, there is no way to customize what compiler metadata is included by Truffle. At the same time, the SSJO format is configurable and can contain only the parts you want.Want just the ABI? you got it! Need source maps, bytecode, and AST for your fancy debugger? We got you. And it\u2019s what the compiler already outputs\u200a\u2014\u200aso why reinvent the wheel? The only problem is that SSJO is based around compilation units. One compilation unit could contain multiple smart contracts. We found it more convenient to work with artifacts that correspond 1\u20131 with a single contract (and it\u2019s dependencies). So, the artifact format we use is heavily inspired by SSJO and contains SSJO sections, but only the sections related to a specific smart contract. Additionally, it also includes some additional information such as deploys by the network.The good news is that you don\u2019t need to adopt our artifact format in order to use three of our tools! Check out this Truffle example project that uses 3 of the tools.@0x/sol-compilerSol-compiler is a wrapper around the Solidity compiler that makes it easier to compile entire projects. It produces the artifacts that can be used by all the other tools with zero configuration. Learn more here. I\u2019ll just tease you with the fact that it\u2019s the only solidity compiler I\u2019m aware of that has \u201cwatch mode\u201d.@0x/sol-traceI\u2019m sure some of you will be familiar with this error message: Error: VM Exception while processing transaction: revert. Instead of that error, you can now get nice stack-trace like in all other modern languages.@0x/sol-coverageIf it\u2019s not tested, it\u2019s broken. And how do you know if you\u2019ve tested it? By measuring code coverage with sol-coverage.@0x/sol-profilerGas is money. Both your money and your user\u2019s money. So why not spend it efficiently and be aware of the bottlenecks and optimization opportunities? Sol-profiler lets you do just that.The last three tools need to have some information about your smart contracts to work. They can either retrieve this information from truffle artifacts, @0x/sol-compiler artifacts, or from any other source with the help of a small and customizable adapter. Check out any of the docs for more info.Nitty gritty technical detailsSome of you might be interested to know how these tools work, especially the revert traces since all of these tools are trace-based. Each tool is written as a subprovider that you inject into your provider stack. It then eavesdrops on all your transaction calls and gas estimate requests. When a transaction executes, it fetches it\u2019s trace and uses the source maps to map the data back to lines of Solidity source code or assembly. The traces also contain gas information which is used by the profiler. If you simply ignore the gas information, you end up with code coverage (i.e which lines of the source were executed?).\u00a0\u00a0We have abstracted away most of the technical complexity so that developers can easily use these tools without knowing how they work under-the-hood. Contributions are always welcome and we hope you find these tools useful!", "responses": "1"}, {"title": "Diving Into The Ethereum VM Part 3\u200a\u2014\u200aThe Hidden Costs of\u00a0Arrays", "author_name": "Howard", "link": "https://medium.com/@hayeah/diving-into-the-ethereum-vm-the-hidden-costs-of-arrays-28e119f04a9b?source=search_post", "post_date": "Aug 23, 2017", "readtime": "11 min read", "upvotes": "1.1K", "content": "Diving Into The Ethereum VM Part 3\u200a\u2014\u200aThe Hidden Costs of\u00a0ArraysHowardBlockedUnblockFollowFollowingAug 23, 2017Solidity provides familiar data structures seen in other programming languages. Aside from simple values like numbers and structs, there are data types that can expand dynamically as more data is added. The three main categories of these dynamic types are:Mappings: mapping(bytes32 => uint256), mapping(address => string), etc.Arrays: []uint256, []byte, etc.Byte arrays. Only two kinds: string, bytes.In Part II of this series we\u2019ve seen how simpler types with fixed sizes are represented in storage.Fundamental values: uint256, byte, etc.Fixed sized arrays: [10]uint8, [32]byte, bytes32Structs that combine the above types.Storage variables that have fixed sizes are laid out one after another in storage, packing as tightly as possible in chunks of 32 bytes.(If this seems unfamiliar, read Diving Into The Ethereum VM Part II\u200a\u2014\u200aStorage Cost)In this article we\u2019ll look into how Solidity supports more complex data structures. Arrays and mappings in Solidity may look familiar on the surface, but the way they are implemented gives them radically different performance characteristics.We\u2019ll start with mapping, which is the simplest of all three. It turns out that arrays and byte arrays are just mappings with fancier features.MappingLet\u2019s store a single value in a uint256 => uint256 mapping:pragma solidity ^0.4.11;contract C {    mapping(uint256 => uint256) items;    function C() {      items[0xC0FEFE] = 0x42;    }}Compile:solc --bin --asm --optimize c-mapping.solThe assembly:tag_2:  // Doesn't do anything. Should be optimized away.  0xc0fefe  0x0  swap1  dup2  mstore  0x20  mstore  // Storing 0x42 to the address 0x798...187c  0x42  0x79826054ee948a209ff4a6c9064d7398508d2c1909a392f899d301c6d232187c  sstoreWe can think of the EVM store as a key-value database, with each key limited to storing 32 bytes. Rather than using the key 0xC0FEFE directly, here the key is hashed to 0x798...187c, and the value 0x42 stored there. The hashing function used is the keccak256 (SHA256) function.In this example we don\u2019t see the keccak256 instruction itself because the optimizer had decided to precalculate the result and inline it in bytecode. We still see the vestige of this calculation, in the form of useless mstore instructions.Calculate The\u00a0AddressLet\u2019s use some Python code to hash 0xC0FEFE to 0x798...187c. If you'd like to follow along, you'll need Python 3.6, or install pysha3 to get the keccak_256 hash function.Define two helper functions:import binasciiimport sha3# Convert a number to 32 bytes array.def bytes32(i):    return binascii.unhexlify('%064x' % i)# Calculate the keccak256 hash of a 32 bytes array.def keccak256(x):    return sha3.keccak_256(x).hexdigest()To convert numbers to 32 bytes:>>> bytes32(1)b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01'>>> bytes32(0xC0FEFE)b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xc0\\xfe\\xfe'To concatenate two byte arrays together, use the + operator:>>> bytes32(1) + bytes32(2)b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02'To calculate the keccak256 hash of some bytes:>>> keccak256(bytes(1))'bc36789e7a1e281436464229828f817d6612f7b477d66591ff96a9e064bcc98a'We now have enough to calculate 0x798...187c.The position of the store variable items is 0x0(since it is the first store variable). To get the address, concatenate the key 0xc0fefe with the position of items:# key = 0xC0FEFE, position = 0>>> keccak256(bytes32(0xC0FEFE) + bytes32(0))'79826054ee948a209ff4a6c9064d7398508d2c1909a392f899d301c6d232187c'The formula for calculating the storage address for a key is:keccak256(bytes32(key) + bytes32(position))Two MappingsLet\u2019s take the formula we have to calculate where values would be stored! Suppose we have a contract with two mappings:pragma solidity ^0.4.11;contract C {    mapping(uint256 => uint256) itemsA;    mapping(uint256 => uint256) itemsB;    function C() {      itemsA[0xAAAA] = 0xAAAA;      itemsB[0xBBBB] = 0xBBBB;    }}The position for itemsA position is 0, for key 0xAAAA:# key = 0xAAAA, position = 0>>> keccak256(bytes32(0xAAAA) + bytes32(0))'839613f731613c3a2f728362760f939c8004b5d9066154aab51d6dadf74733f3'The position for itemsB position is 1, for key 0xBBBB:# key = 0xBBBB, position = 1>>> keccak256(bytes32(0xBBBB) + bytes32(1))'34cb23340a4263c995af18b23d9f53b67ff379ccaa3a91b75007b010c489d395'Let\u2019s verify these calculations with the compiler:$ solc --bin --asm --optimize  c-mapping-2.solThe assembly:tag_2:  // ... Omit memory operations that could be optimized away  0xaaaa  0x839613f731613c3a2f728362760f939c8004b5d9066154aab51d6dadf74733f3  sstore  0xbbbb  0x34cb23340a4263c995af18b23d9f53b67ff379ccaa3a91b75007b010c489d395  sstoreAs expected.KECCAK256 in\u00a0AssemblyThe compiler was able to pre-calculate the address for a key because the values involved are constants. If the key used is a variable, then the hashing needs to be done with assembly code. Now we want to disable this optimization so we can see how hashing is done in assembly.It turns out to be easy to cripple the optimizer, by introducing an extra indirection with a dummy variable i:pragma solidity ^0.4.11;contract C {    mapping(uint256 => uint256) items;    // This variable causes constant folding to fail.    uint256 i = 0xC0FEFE;    function C() {      items[i] = 0x42;    }}The position for the variable items is still 0x0, so we should expect the same address as before.Compile with optimization, but this time without the hash pre-calculation:$ solc --bin --asm --optimize  c-mapping--no-constant-folding.solThe assembly annotated:tag_2:  // Load `i` onto the stack  sload(0x1)    [0xC0FEFE]  // Store the key `0xC0FEFE` in memory at 0x0, for hashing.  0x0    [0x0 0xC0FEFE]  swap1    [0xC0FEFE 0x0]  dup2    [0x0 0xC0FEFE 0x0]  mstore    [0x0]    memory: {      0x00 => 0xC0FEFE    }  // Store the position `0x0` in memory at 0x20 (32), for hashing.  0x20 // 32    [0x20 0x0]  dup2    [0x0 0x20 0x0]  swap1    [0x20 0x0 0x0]  mstore    [0x0]    memory: {      0x00 => 0xC0FEFE      0x20 => 0x0    }  // Starting at 0th byte, hash the next 0x40 (64) bytes in memory  0x40 // 64    [0x40 0x0]  swap1    [0x0 0x40]  keccak256    [0x798...187c]  // Store 0x42 at the calculated address  0x42    [0x42 0x798...187c]  swap1    [0x798...187c 0x42]  sstore    store: {      0x798...187c => 0x42    }The mstore instruction writes 32 bytes in memory. The memory is much cheaper, costing only 3 gas to read and write. The first half of the assembly \"concatenates\" the key and position by loading them into neighbouring chunks of memory: 0                   31  32                 63[    key (32 bytes)    ][ position (32 bytes) ]Then the keccak256 instruction hashes the data in that memory region. The cost depends on how much data is hashed:30 Paid for each SHA3 operation.6 Paid for each word of 32 bytes.For an uint256 key the gas cost is 42 (30 + 6 * 2).Mapping Large\u00a0ValuesEach storage slot can only store 32 bytes. What happens if we try to store a struct that\u2019s larger?pragma solidity ^0.4.11;contract C {    mapping(uint256 => Tuple) tuples;    struct Tuple {      uint256 a;      uint256 b;      uint256 c;    }    function C() {      tuples[0x1].a = 0x1A;      tuples[0x1].b = 0x1B;      tuples[0x1].c = 0x1C;    }}Compile, and you should see 3 sstore instructions:tag_2:  // ...omitting unoptimized code  0x1a  0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d  sstore  0x1b  0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e  sstore  0x1c  0xada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7f  sstoreNotice that the calculated addresses are the same except for the last digit. The member fields of the Tuple struct are laid out one after another (..7d,\u00a0..7e,\u00a0..7f).Mappings Don\u2019t\u00a0PackGiven how mapping is designed, the minimal amount of storage you pay per item is 32 bytes, even if you are only storing 1 byte:pragma solidity ^0.4.11;contract C {    mapping(uint256 => uint8) items;    function C() {      items[0xA] = 0xAA;      items[0xB] = 0xBB;    }}And if a value is larger than 32 bytes, you pay for storage in increments of 32 bytes.Dynamic Arrays Are Mappings++In a typical language, an array is just a list of items that sit together in memory. Say you have an array that contains 100 uint8 elements, then it would occupy 100 bytes of memory. In this scheme, it\u2019s cheap to load the whole array in bulk onto CPU cache, and to loop through the items.For most languages, arrays are cheaper than maps. For Solidity, though, array is a more expensive version of mapping. Items of an array would be laid out sequentially in storage, like:0x290d...e5630x290d...e5640x290d...e5650x290d...e566But keep in mind, each access to these storage slots is in fact a key-value lookup in a database. Accessing an array element is no different from accessing a mapping element.Consider the type []uint256, it is essentially the same as mapping(uint256 => uint256) with added features making it \"array-like\":length to indicate how many items there are.Bound-checking. Throws error when reading & writing to an index larger than the length.More sophisticated storage packing behaviour than mapping.Automatic zeroing out of unused storage slots when an array is shrunk.Special optimization for bytes and string to make short arrays (less than 31 bytes) more storage efficient.Simple ArrayLet\u2019s look at an array that stores three items:// c-darray.solpragma solidity ^0.4.11;contract C {    uint256[] chunks;    function C() {      chunks.push(0xAA);      chunks.push(0xBB);      chunks.push(0xCC);    }}The assembly code for array access is too complex to trace. Let\u2019s use the Remix debugger to run the contract:At the end of the simulation, we can see that 4 storage slots are used:key: 0x0000000000000000000000000000000000000000000000000000000000000000value: 0x0000000000000000000000000000000000000000000000000000000000000003key: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563value: 0x00000000000000000000000000000000000000000000000000000000000000aakey: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564value: 0x00000000000000000000000000000000000000000000000000000000000000bbkey: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e565value: 0x00000000000000000000000000000000000000000000000000000000000000ccThe position of the chunks variable is 0x0, which is used to store the array's length (0x3). Hash the variable's position to find the address for storing array data:# position = 0>>> keccak256(bytes32(0))'290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563'Each item of the array is laid out sequentially from this address (0x29..63, 0x29..64, 0x29..65).Dynamic Array\u00a0PackingHow about the all important packing behaviour? One advantage of array over mapping is that packing works. Four items of an uint128[] array would fit in exactly two storage slots (plus 1 for storing the length).Consider:pragma solidity ^0.4.11;contract C {    uint128[] s;    function C() {        s.length = 4;        s[0] = 0xAA;        s[1] = 0xBB;        s[2] = 0xCC;        s[3] = 0xDD;    }}Run this in Remix, and the storage at the end looks like:key: 0x0000000000000000000000000000000000000000000000000000000000000000value: 0x0000000000000000000000000000000000000000000000000000000000000004key: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563value: 0x000000000000000000000000000000bb000000000000000000000000000000aakey: 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564value: 0x000000000000000000000000000000dd000000000000000000000000000000ccOnly 3 slots are used, as expected. The length is again stored at 0x0, the position of the storage variable. Four items are packed in two separate storage slots. The starting address for this array is the hash of the position of the variable:# position = 0>>> keccak256(bytes32(0))'290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563'The address now increments once for every two array elements. Looks good!But the assembly code itself is not very well optimized. Since only two storage slots are used, we would hope that the optimizer uses two sstore for the assignments. Unfortunately with bound-checking (and some other stuff) thrown in, it's not possible to optimize the sstore instructions away.Four sstore instructions are used for the assignments:/* \"c-bytes--sstore-optimize-fail.sol\":105:116  s[0] = 0xAA */sstore/* \"c-bytes--sstore-optimize-fail.sol\":126:137  s[1] = 0xBB */sstore/* \"c-bytes--sstore-optimize-fail.sol\":147:158  s[2] = 0xCC */sstore/* \"c-bytes--sstore-optimize-fail.sol\":168:179  s[3] = 0xDD */sstoreByte Arrays &\u00a0Stringbytes and string are special array types that optimize for bytes and characters respectively. If the length of the array is less than 31 bytes, only one storage slot is used to store the whole thing. Longer byte arrays are represented in much the same way as normal arrays.Let\u2019s see a short byte array in action:// c-bytes--long.solpragma solidity ^0.4.11;contract C {    bytes s;    function C() {        s.push(0xAA);        s.push(0xBB);        s.push(0xCC);    }}Since the array is only 3 bytes (less than 31 bytes), it occupies just one storage slot. Run in Remix, the storage:key: 0x0000000000000000000000000000000000000000000000000000000000000000value: 0xaabbcc0000000000000000000000000000000000000000000000000000000006The data 0xaabbcc... is stored from left to right. The 0's that follow are empty data. The last byte 0x06 is the encoded length of the array. The formula is encodedLength / 2 = length. In this case the actual length is6 / 2 = 3.A string works in exactly the same way.A Long Byte\u00a0ArrayIf the amount of data is greater than 31 bytes, a byte array is like []byte. Let look at byte array that's 128 bytes long:// c-bytes--long.solpragma solidity ^0.4.11;contract C {    bytes s;    function C() {        s.length = 32 * 4;        s[31] = 0x1;        s[63] = 0x2;        s[95] = 0x3;        s[127] = 0x4;    }}Run in Remix, and we see that four slots are used in storage:0x0000...00000x0000...01010x290d...e5630x0000...00010x290d...e5640x0000...00020x290d...e5650x0000...00030x290d...e5660x0000...0004The slot 0x0 is no longer used to store data. The whole slot now stores the encoded array length. To get the actual length, do length = (encodedLength - 1) / 2. In this case the length is128 = (0x101 - 1) / 2. The actual bytes are stored in0x290d...e563, and the slots that follow sequentially.The assembly code for byte array is quite big. Aside from the normal bound-checking and array resizing stuff, it also needs to encode/decode length, as well as taking care to convert between long and short byte arrays.Why encode the length? Because the way it\u2019s done, there\u2019s a simple way to test if a byte array is short or long. Notice that the encoded length is always odd for a long array, and even for a short array. The assembly only needs to look at the last bit to see whether it is zero (even/short) or non-zero (odd/long).ConclusionPeeking into the inner workings of the Solidity compiler, we see that familiar data structures like mappings and arrays are radically different from conventional programming languages.To recap:Arrays are like mappings, not very efficient.More complex assembly code than mappings.Better storage efficiency than mapping for smaller types (byte, uint8, string).Assembly not optimized very well. Even with packing, there\u2019s one sstore per assignment.The EVM storage is a key-value database, much like git. If you change anything, the checksum at the root node would change. If two root nodes have the same checksum, the stored data is guaranteed to be the same.To appreciate how quirky Solidity & EVM is, imagine that each element of the array is its own file in a git repository. When you change the value of an array element, you are in fact creating a git commit. When iterating through an array, you can\u2019t load the whole array at once, you have to look into the repository and find each file separately.Not only that, each file is limited to 32 bytes! Because we need to chop up data structures into 32 bytes chunks, Solidity\u2019s compiler is complicated by all kinds of logic and optimization tricks, all done in assembly.Yet the 32 bytes limit is entirely arbitrary. The backing key-value store can store any number of bytes with a key. Perhaps in the future we could add a new EVM instruction to store arbitrary bytes with a key.For now, the EVM storage is a key-value database prentending to be a 32 bytes array.See ArrayUtils::resizeDynamicArray for a taste of what the compiler is up to when resizing an array. Normally data structures would be done in the language as part of a standard library, but in Solidity it\u2019s baked into the compiler.If you enjoyed this article, you should follow me on Twitter @hayeah.", "responses": "3"}, {"title": "Ethereum Devcon3\u200a\u2014\u200aan outsider\u2019s perspective", "author_name": "Raven", "link": "https://soraven.com/ethereum-devcon3-the-good-the-bad-the-ugly-92c3f387db86?source=search_post", "post_date": "Nov 12, 2017", "readtime": "13 min read", "upvotes": "917", "content": "Ethereum Devcon3\u200a\u2014\u200aan outsider\u2019s perspectiveRavenBlockedUnblockFollowFollowingNov 12, 2017A week ago, I found myself in Canc\u00fan, Mexico for the first time in my life. As a lifelong professional geek whose associates could very well have been the original inspiration for The Big Bang Theory, Canc\u00fan was pretty far down the list of places I wanted to visit. No, I was there to bear witness to the best and brightest that the cryptocurrency ecosystem has to offer. I was there to attend the third Ethereum developers conference, or Devcon3, an annual gathering of the who\u2019s who of the Ethereum ecosystem, a great pow wow to share what everyone is working on, gather ideas, and gossip.Vitalik Buterin giving his annual 25-minute introduction to\u00a0EthereumWhy I\u00a0WentI believe, as every generation before me did, that we live in the most important time in human history, ever. I am a self-professed futurist who grew up dreaming of a world radically improved by technology, I always knew that we were at a crossroad as a species and the choices we make today will have profound implications, for better or worse. When I first discovered Ethereum more than a year ago, I was enamored by the ambition of its founder\u2019s vision. However, having lived and worked in Silicon Valley for the past few year and seen how much horse shit finds its way into the sausage-making, I was also very skeptical of its reality.Always in pursue of the truth, I diligently kept up with the news, had a fun time making Ethereum Pixels, a toy decentralized app (DApp as the cool kids call it) on the Ethereum blockchain, and wasted countless hours in dozens of cryptocurrency discussions groups, but it felt like something was missing. While I was impressed by the surprising usability of Solidity and web3.js during my brief foray into Ethereum development, I felt a foreboding sense of dread. There was something off about what the marketing websites claimed and what could be done in reality. There were too many missing pieces, too many unanswered technical questions, and too many cocksure 15-year-olds who made a few hundred thousand dollars betting on nothing more than hopes and aspirations telling me that the answer to all our prayers were buzzwords like \u201csharding\u201d and \u201cthe Tangle\u201d.At the heart of everything is a very simple question: is there a reasonable confidence that smart contracts and blockchains will become efficient enough to actually power the future decentralized Web 3.0 or is the whole thing just a pipe dream fueled by excess capital and mass delusion? The truth was out there, but it was frustratingly elusive. I knew what the wunderkind investors\u2019 answer to the question was going to be, but I needed to hear it from the people who actually have some technical insights. So, I decided to make the trip to Devcon3 to see for myself once and for all just how much of this is all real.A week later today, my experiences at the event left me with a string of mixed feelings.The EventThere is something incongruent about Canc\u00fan as a venue for a developer conference. Upon arriving at the heart of the hotel zone where the convention center is located fresh off my red-eye flight from SFO, I got the visceral feeling that the whole place had been invaded by some foreign power. I am not talking about the Hard Rock Cafes, Hooters, or the suntanned American tourists who came all the way to a foreign country to experience their own culture\u200a\u2014\u200athose are practically native at this point. No, I am referring to the geek squads out in force in their cryptocurrency and Rick and Morty T-shirts. The juxtaposition of the sunny beach party setting that is Canc\u00fan with the cypherpunks in sandals looking to undermine the global economic order was so comical in my mind that I imagined William Gibson would give it a second thought if it were a scene in his novel. (To be fair, I spent most of my days there wearing a number of video game apparels, so I cast this rock while retaining full ownership of the glass house I inhabit.)The conference, to be frank, was not very well organized. The registration and badge pick-up process was a slow pen-and-paper affair that could really use some help from this decentralized trust thing that I hear is all the rage these days. I\u2019ve definitely been to many old boring industry conferences charging way less than $900 per ticket that figured out how to do things better with some simple use of mobile technology. The convention center\u2019s Wi-Fi connection worked intermittently, probably the one cardinal sin for a venue hosting an event for technologists. There was no handy program guide, so everyone relied on the Ethereum Foundation\u2019s official site for the day\u2019s schedule, which of course was promptly taken offline by the traffic. People eventually resorted to taking cellphone pictures of the two TV screens that were cycling through the day\u2019s program.High-tech low-tech solution to a low-tech high-tech problemPerhaps it would be correct to attribute a lot of the problems to the growing pains of more than doubling in size, but I honestly think it is also a sobering reminder that for all the fancy web animations and millions of dollars raised, the Ethereum ecosystem remains a rag-tag group of unprofessional hackers and hustlers who are trying to make something happen.The external perception of the Ethereum Foundation as a strategic dealmaker confidently charting the course of the global economy is quickly dispelled when you catch a glimpse of the people running the show. Yes, they are mostly good sincere people with a very specific vision of the future and great technical chops, and they are trying their best, but that does not preclude or excuse them from being misguided or incompetent in other important ways that matter. I think the latest Parity wallet snafu (can you say deja vu?) is testament to that inconvenient truth.The TalksI must first say that the talks I enjoyed the most throughout the four days of the event were mostly the technical ones. I really enjoyed Patrick McCorry\u2019s talk discussing the challenges of doing cryptographic calculations on the blockchain (tl;dr very expensive function calls), Vitalik Buterin\u2019s thinking aloud on how to scale Ethereum (tl;dr make a whole new blockchain with sharding and figure out how to merge the old one later), and Eli Ben-Sasson\u2019s very accessible introduction to zk-STARK, a proposed quantum-secure zero knowledge proof, one of the few talks that I saw Vitalik sit in for. Dr. Greg Colvin\u2019s talk on improving EVM brought back fond memories of the operating systems class I took in college\u200a\u2014\u200ahe just looks so professorial\u200a\u2014\u200aand his skepticism for the new hotness eWASM, born do doubt of experience, is the kind of moderating effect that the ecosystem sorely lacks.Those are talks where real things are happening. Real in the sense that they describe actual technical challenges with solutions that can be evaluated and discussed using facts, but not necessarily real in the sense that they represent real business or product opportunities. Speaking as someone with only a college-level understanding of cryptography, Ben-Sasson\u2019s zk-STARK talk struck me as a very reasonable presentation that one would give at an academic conference: promising results, tantalizing potential, not yet proven to be practical. The only difference is that in this crazy moment that we all live in, an idea like that is presented and immediately the engines of speculation start to flash dollar signs long before facts and evidences are on the table. After all this is the era of Theranos and Donald Trump.The worst talks were of course the flavor-of-the-month ICOs trying to gain a veneer of credibility by being at Devcon3. One could sometimes sense the incredulity in the room when a presenter made outlandish claims about a proposed feature of their product that is close to being impossible to implement given the current state of the art. Still, that was probably one of the very few interested audiences in the world that could detect the bullshit, so the dumb money will probably keep flowing. In my opinion, these talks should not be part of Devcon because they muddle the water for transparently selfish reasons.micro-Raiden demoOne of the most exciting moment during the course of the convention was when Loredana Cirstea (one of the very, very few female developers in the room) from the Raiden team showed a demo of micro-Raiden involving a 4-wheeled robot being controlled by individual token transfers over a state channel. Understandably, crypto geeks are not prone to great emotional outbursts (for proof, see one of the many awkward occasions when Ming Chan, Executive Director at Ethereum Foundation, tried to corral the crowd a few minutes later into doing something fun), so one must calibrate one\u2019s expectation. Still, people were actually clapping with real enthusiasm, probably because it was one of the few talks in a sea of deep technical jargon and borderline fiction that addressed the heart of the question directly: how will blockchains scale to be actually useful?The People of\u00a0EthereumOver the course of the conference, I got to meet people from all over the hacker-hustler spectrum. This was probably the most insightful part of the experience.On one end, there were folks like me who were very curious about the technical questions that Ethereum developers were purporting to answer. I had very pleasant conversations with these people, including a guy named Konstantin who was working on his own Unity-based online game. We had a great time talking about not just the technical challenges of blockchain but also Unity and 3D game engines (I work at a startup building AR content with Unity). There was a mutual understanding that we believe there was something real at the core of cryptocurrencies, but it is tough to get there. Unfortunately, I lost Konstantin\u2019s business card, so if anyone knows a Konstantin from LA working on a Unity game, hit me up!In a similar vein, there were plenty of people who clearly were passionate about the theoretical side of cryptocurrency and were happy they could now get paid to work on solving math problems that in the past only universities cared to fund. I enjoyed those interactions because they tend to be genuine.I also got to meet some of the people working on real projects like MetaMask and 0x. These are people who not only believe there is something valuable in the fundamental idea of cryptocurrencies, but that a specific manifestation of it is worth working towards. These are the truth believers, who possess enough technical knowledge to work on the right problems and enough faith to believe solutions exist. They are good people with fairly deep technical understandings of where they want to go. Most people here would be fairly at home at a respectable gathering of startups in Silicon Valley. Still, they are not infallible and can often be faithful to the point that their products and businesses can fail not because they failed to understand the technology but because they failed to understand people. I can often fall into the same trap in my professional life, so I am not the right person to critique this approach.Past this point is where things started to get real iffy.I met plenty of guns for hire who offered turnkey ICOs to anyone who paid upfront. They operate teams of developers, often in former Soviet countries, who will write your white paper, build your website, and operate your ICO crowdfunding all in one complete package. It was hard to tell how much they believed in the future of cryptocurrency and how they rationalized their role in the ecosystem. Conceivably, they see it as a profit opportunity during a flash in a pan, or perhaps they truly believe that they play a healthy role in allowing people with all vision and no tech to launch ICOs. There are interesting conversations to be had here though. People at this stage of cynicism are actually building tools and analytics to run their ICOs at scale and are reasonably thoughtful about their business.I also met ICO operators who fundamentally did not understand the limitations of the blockchain in relation to their proposed business models. There was a very thin line between uninformed optimism and outright fraud. It was not uncommon to hear people express the opinion that if a desired feature could not be accomplished on-chain, they would just have to take it off-chain, destroying the single value proposition of their product over all existing competing products with nary a thought. \u201cWe do not care about decentralization, we just want a product that is somehow can use Ethereum so that we can do an ICO.\u201dAt the crypto parties (which are less cool than they sound no matter how uncool you think they sound), I met bright-eyed kids barely out of college who all felt the need to introduce themselves as being involved in one crypto project or another.\u201cOh you mentioned that you worked in SoMa (in San Francisco), is that where your project is based?\u201d\u201cNo, man. I work on someone else\u2019s shit. But I\u2019m going to transition to crypto full time soon. No, for real.\u201d\u201cAh, I understand. What does your project do?\u201d\u201cWe are trying to solve unemployment with the blockchain. See apparently structural under employment and all the ills of the modern economy can be magically solved if we just moved the paperwork and certifications onto the blockchain.\u201d\u201cCool. Good luck with that! Excuse me, I should really get another drink.\u201dTrue story with very minor embellishment. At the hustler end of the spectrum, there is almost no enjoyable conversation to be had. I think you are an empty vessel devoid of ideas and you think that I am not going to make you any money. It is best to disengage. For a conference ostensibly focused on development, there were way too many of this.WFB\u200a\u2014\u200aworking from\u00a0beachFinal ThoughtsThere are essentially two problems with Ethereum and blockchain in general: scalability and usability.Scalability is the elephant in the room. It is an essential topic to everyone in the ecosystem, but its specifics are so academic that half the eyes glaze over when it is brought up. A real solution remains elusive, and in the meantime, there is a lot of hand-waving and groupthink going on. This was clear to me from talking to people at Devcon3.However, there are smart, genuine people working on these issues, and I was reasonably impressed by level of discussion I observed in some of the talks. That gives me hope that if a solution exists, perhaps it will be found in our lifetime. The will exists.What is far less comforting is the environment that these profoundly technical people now find themselves in, a world where people like them or pretending to be like them can make millions of dollars not from delivering on the vision but simply from describing it. If we are true believers of capitalism\u2019s ability to reward useful contributions, then perhaps we ought to be slightly concerned about the moral hazards at play here.The second question of usability is of course conditional on scalability, but also goes beyond it and is potentially much more salient. Usability is also about being able to build products that are actually meaningful and useful to real people. Technology is just one piece of the puzzle. The other piece is understanding needs. Here, I am not sure that cypherpunks truly understand what society needs. These people, though they come from all over the world, are really casted from the same mold. In some ways, I am one of them. We grew up surrounded by a very specific version of the Internet, reading the same few science fiction authors, and playing the same video games. As I looked across the main hall, I saw a sea of mostly white young men, some of whom were fascinated by the technical challenges, and others who saw this as their generation\u2019s consumer Internet boom. In our fragmented postmodern realities, this is but a small monocultural fragment.So, like I said at the beginning, I walked away from Devcon3 with mixed feelings about the future of cryptocurrencies. I remain committed to my financial investments because they will probably continue to appreciate (the details of my seemingly contradictory investment thesis is a worthy subject for another day), but I find it hard to believe that we are truly witnessing a second digital revolution just yet. Though there are many aspects of the vision and the technology that align with my intellectual curiosities and professional background, I find myself entirely unmotivated to be an active part of it. It is too much of a cult.On my second night in Canc\u00fan, I stumbled upon a small party in Mandala, one of the main night clubs in town, hosted by a blockchain payments startup from Ireland. The startup had paid for our cover charges and also some drinks, but most of the club consisted of the usual Canc\u00fan non-cryptocurrency crowd. There was a huge wall display where the DJ shows music videos for the songs being played. Once in a while, the promotional video for the startup would show up, creating an odd juxtaposition between the cheery brightly colored slogans (\u201cSecured Transactions\u201d) and the dance music and the hyper-sexualized paid dancers.Just an ordinary night at the club. Everyone loves dancing to sexy account permissionsWith the liquor and bass flowing through my body, I am left with a single parting thought: the cryptocurrency world is just like Silicon Valley, except the nerds are nerdier and the slimeballs are much, much slimier.Let\u2019s not get too far ahead of ourselves.", "responses": "4"}, {"title": "Ethereum\u2019s Swarm is first to join Fair Data\u00a0Society", "author_name": "Fair Data Society", "link": "https://medium.com/fair-data-society/ethereums-swarm-is-first-to-join-fair-data-society-c17afe5ac3b7?source=search_post", "post_date": "Mar 27", "readtime": "2 min read", "upvotes": "4K", "content": "Ethereum\u2019s Swarm is first to join Fair Data\u00a0SocietyFair Data SocietyBlockedUnblockFollowFollowingMar 27We are very proud to make this special announcement. Today, Ethereum\u2019s Swarm, one of the three pillars of the Ethereum network, is joining Fair Data Society. To have Swarm become part of Fair Data Society is a major milestone for us.Our stance has always been that we need to build a new paradigm for a data-driven society and it cannot be achieved by any one organization or initiative alone. We\u2019ll need to join forces to get there. By joining Fair Data Society, Swarm has set the foundations for this collective effort to move forward.We already started talking about Fair Data Society last May in Ljubljana at the Swarm Orange Summit, hosted by Datafund.Swarm also plays another critical role. They provide the new infrastructure for a decentralised data economy that will give everyone sovereign control over their data. Their decentralised storage layer is the foundation on which Fair Data Society is building. You can\u2019t do anything with data unless you have a global fabric that stores it.True and limitless connectivityBut Swarm are much more than a simple storage layer. They have created a fault-tolerant, censorship-resistant, DDOS-resistant incentivised storage protocol with zero downtime. This protocol provides the technology infrastructure for decentralised service networks. These networks, and the dapps running on them, will be able to communicate with each other.Just think how powerful that is: if this were the infrastructure of today, you could talk through FB messenger to anyone on Google Hangouts or LinkedIn, etc. If you didn\u2019t like one app, you could just move to a better one without losing any connections or data.Swarm will unlock the true potential behind Ethereum. It\u2019s currently the missing infrastructure piece which will serve many distributed-ledger technologies in the future.An increase in capabilitiesThrough Datafund Fair Data Society already has a fruitful history of working together with the awesome Swarm team. Our plans for the future include the deepening of this collaboration through joint campaigns in our Fair Data Society DAC.One we\u2019re particularly excited about is building the capacity to send 100 GB files over the Swarm network with the Fairdrop dapp (more details tba). With such incredible capabilities even an ordinary email function becomes a file sharing titan and decentralised solutions become something that opens up a whole new array of possibilities.Together we can change\u00a0thingsThe time of one-sided exploitative practices of Big Tech is slowly but surely running out.If you and your project are building something that you believe will benefit the society, reach out to us on Riot or support the campaigns in our DAC.There\u2019s a lot of work to be done and together we can bring about this change faster and to the benefit of all. Let us proceed together apace!", "responses": ""}, {"title": "How to build an Ethereum Wallet web\u00a0app", "author_name": "Paul Laux", "link": "https://medium.freecodecamp.org/how-to-build-an-ethereum-wallet-web-app-ac77dcaac573?source=search_post", "post_date": "Oct 1, 2018", "readtime": "12 min read", "upvotes": "717", "content": "How to build an Ethereum Wallet web\u00a0appA review of the coolest parts of eth-hot-walletPaul LauxBlockedUnblockFollowFollowingOct 1, 2018This article is a technical review of the interesting parts of eth-hot-wallet, an Ethereum wallet web app with erc20 token native support. The source code can be found on GitHub (MIT License).eth-hot-wallet previewTable of contents:Ethereum wallet as a web appThe stackThe containers of eth-hot-walletUnified Design for Ethereum WalletRedux and Redux-SagaSecure password generatoreth-lightwallet and SignerProviderEncrypted offline storageSending Ethereum using Web3.jsSending erc20 tokens using Web3.jsSubscribing to Ethereum transaction life-cycle using Web3.js V1 and Redux-Saga channelsPolling Ethereum blockchain and price data using Redux-SagaKeeping an eye on the bundle sizeConclusionEthereum wallet as a web\u00a0appWhen software is deployed as a web app, wide accessibility is the first thing that comes to mind. After all, the web is the most widely accessible cross device platform. Eth-hot-wallet is a PWA (progressive web app) that can be used from any modern web-browser.Moreover, recent improvements in PWA support significantly improve the user experience on mobile.Pros:No additional software is requiredNo installation of any kind is necessaryAbility to use modern web development tools.Easy to deploy and to upgradeCons:More prone to phishing attacks.Browser plugins might inject malicious code into the page.High loading time on slow internet connectionsLimited access to device storageThe fact that malicious browser extensions might inject JavaScript code in an attempt to extract the keys is significant. To migrate this risk, the user should be encouraged to turn off extensions (i.e. by using in incognito mode) or integrate the web with an external web3 provider such as MetaMask or Trust browser. Converting the web app into a desktop app is also a viable option.As for phishing, the user should be encouraged to bookmark the page and access it via google search. It is highly unlikely for a phishing site to rank above the real site in search results.Bottom line: a web app will allow you to reach the widest audience with minimum friction. In my opinion, the web is the best target platform for new apps.eth-hot-wallet logoThe stackMost of the code is dedicated to the front-end:The final package consists of many packages as can be seen in package.json.Top level components include:Eth-lightwallet\u200a\u2014\u200aLightweight JS Wallet for Node and the browser for keystore managementReact, Redux, saga.js, immutableJS and reselect wrapped by the offline-first react-boilerplateAnt design\u200a\u2014\u200aexcellent set of UI components for reactWebpack\u200a\u2014\u200aA bundler for JavaScript and friends.And for the back-end:The final bundle is deployed directly to GitHub pages from a dedicated branch in the repository. There is no need for a back-end in the traditional scene.To create the Testnet Ethereum faucet, we\u2019ll use a Serverless framework. It significantly improves the developer experience when using AWS Lambda. It is a very cost-effective solution that obliterates the need to maintain infrastructure, especially on low volume applications.The containers of eth-hot-walleteth-hot-wallet homepage containerWhen using the combination of React, Redux, Saga.js and Reselect, each container (may) consist of the following ingredients:index.js\u200a\u2014\u200afor rendering the GUIactions.jsreducer.jssaga.jsselectors.jsconstants.jsAs Dan Abramov stated, there is more than one approach for whether to use a component or a container. From my experience, if a component has more then ~8 attributes inside the application state, it should be separated into a new container. This is just a rule of thumb. The number of attributes may bloat over time. With complex components, it\u2019s better to have a unique container than to cluster the state of the main Container.Not every container needs to have all the ingredients. In eth-hot-wallet, the sendTokencontainer does not use its own Saga.js. We separated it so as not to burden the state of the homepage component.The Homepage containereth-hot-wallet homepage containerThe primary container, where most of the action takes place, is the homepage container. In the homepage container, Saga.js is responsible for dealing with side effects. Besides GUI, its main responsibility will be dealing with keystore operations.The ETH-Lightwallet package provides the keystore. All related operations including keys, seeds, encryption, importing, exporting are done in this section.The Header containerThe header demonstrates the fact that a container is much more than just a GUI component:eth-hot-wallet header containerThis container might look simple at first with only a logo and a network selector. Does it even need to be in its own container? The answer is that in eth-hot-wallet every network communication-related action and state management is done inside the header container. More than enough for any container.The SendToken containerSendToken is a modal that appears while the user selects to send Ether/ tokens.eth-hot-wallet SendToken containerThe modal includes some basic input verification, like amount and Ethereum address check. It does not use Saga.js to initiate side effects, but instead uses actions provided by the homepage and header containers.We separated it into a new container to reduce clustering the state of the homepage container.TokenChooser containerToken Chooser appears when the user wants to select what token the wallet will manage.eth-hot-wallet TokenChooser containerThe TokenChooser name was selected in order not to be confused with the term \u201cselector\u201d which appears many times through the wallet code in a different context (reduxjs/reselect: Selector library for Redux).Same as with the SendToken container, TokenChooser does not use its own Saga.js file but calls actions from the homepage container when needed.A Unified design for Ethereum\u00a0WalletSince the appearance of the ERC20 standard (EIP20), it was obvious that tokens were going to be an important part of the Ethereum ecosystem. The Ethereum wallet was designed with a unified design approach in mind. Ether and token should be treated equally from the user\u2019s perspective.Under the hood, the API for sending Ether and sending tokens is quite different. So is checking the balance, but they will appear the same on the GUI.A Unified design for Ethereum\u00a0WalletTo send Ether, we need to use native functions provided by the web3.js library, while sending tokens and checking balances involves interaction with a smart contract. More on this issue later.Redux and Redux-SagaUsing Redux store as a single source of truth greatly benefits the wallet. GUI actions and user-triggered flows can be relatively easily managed by actions and reducers provided by Redux.Aside from keeping the UI state, the Redux store also holds the key-store object (a partially encrypted JavaScript object supplied by eth-lightwallet). This makes the keystore accessible throughout the app by using a selector.Redux-Saga is what makes the entire setup shine.redux-saga is a library that aims to make application side effects (i.e., asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, more efficient to execute, easy to test, and better at handling failures.Saga.js uses Generators to make asynchronous flows easy to read and write. By doing so, these asynchronous flows look like your standard synchronous JavaScript code (kind of like async/await but with more customization options).In the case of Ethereum wallet, by using Saga we get a comfortable way to handle asynchronous actions such as rest API calls, keystore actions, Ethereum blockchain calls via web3.js, and more. All the requests are cleanly managed in one place, no callback hell, and very intuitive API.Example usage for redux-saga:https://gist.github.com/PaulLaux/c6a0cddf0bdb84670df4e539bce9b1f6Secure password generatorA seed and a secure password is auto-generated for the\u00a0userTo adequately secure the user\u2019s keystore, we need to encrypt it with a strong password. When using eth-lightwallet, the password needs to be provided during the initiation of the hd-wallet.Let\u2019s assume that we have a function called generateString, which can provide genuinely random strings at any length.If the user wants to generate a new wallet, we will produce the following parameters:https://gist.github.com/PaulLaux/e1353163ee24931eecb98cd65bd6c4beWe can ask the user to confirm the password and the seed or generate a new set on its behalf. Alternatively, we can ask the user for their own existing seed and password.generateString implementation: We will use the relatively new window.crypto API to get random values (currently supported by all major browsers).Eth-hot-wallet implementation is based on the following code to generate random but human-readable strings:https://gist.github.com/mozfreddyb/98843b728f61958f5c31e70d57d93fb8After the user has accepted the password and the seed, we can use the values and generate the new wallet.eth-lightwallet and SignerProviderLightWallet is intended to be a signing provider for the Hooked Web3 provider.Hooked Web3 provider has been deprecated, and currently the author recommends the package ethjs-provider-signer as an alternative.At the moment of writing, there is a bug in ethjs-provider-signer that prevents the display of error messages. The bug was fixed but didn\u2019t merge back into the main branch. Those error messages are critical for this setup to function correctly.Bottom line: Use eth-lightwallet with this version of ethjs-provider-signer: https://github.com/ethjs/ethjs-provider-signer/pull/3 to save time on trial and error.Encrypted offline\u00a0storageThe lightwallet keystore vault JSON object is encrypted, and it requires from us an external passwordProvider to safely keep the encryption key. The keystrore object is always encrypted. The app is responsible for safekeeping the password and provides it with any action.eth-hot-wallet uses Store.js\u200a\u2014\u200aCross-browser storage for all use cases, used across the web. Store.js allows us to store the encrypted keystore easily and extract it back from storage when the webpage is accessed.https://gist.github.com/PaulLaux/c350554ae2f110b94b60748dd88b68adWhen the wallet is loaded for the first time, it will check if there is a keystore in local storage and will auto load it to Redux state if so.At this point, we can read the public data of the keystore but not the keys. To display public data before the user enters the encryption password, we need an additional operation mode: loaded and locked. In this mode, the wallet will display the addresses and fetch the balances but will not be able to perform operations such as sending transactions or even generating new addresses. Triggering any of those actions will prompt for the user\u2019s password.locked wallet after loading from local\u00a0storageSending Ethereum using\u00a0Web3.jsWhen using Web3.js@0.2.x, the function sendTransaction is provided in the following form:web3.eth.sendTransaction(transactionObject [, callback])The callback will return the TX as a result in case of success.However, to properly integrate it into our saga.js flow, we need to wrap sendTransaction function with a promise:This way we continue regular Saga.js execution after sendTransaction is called.Sending erc20 tokens using\u00a0Web3.jsThe Ethereum blockchain does not provide primitives that encapsulate token functionality, nor should it. Every token deployed on Ethereum is, in fact, a program that corresponds to the eip20 specification. Since the Ethereum virtual machine (EVM) is Turing complete (with some restrictions), every token might have a different implementation (even for the same functionality). What unifies all those programs under the term \u201ctoken\u201d is that they provide the same API as defined by the specification.When we are sending a token on Ethereum, we are interacting with a smart contract. To communicate with a smart contract we need to know its API, the format for sharing contract\u2019s API called Ethereum Contract ABI.We will store the erc20 ABI as part of our JavaScript bundle and instantiate a contract during the program run-time:const erc20Contract = web3.eth.contract(erc20Abi);After contract setup, we can easily interact with it programmatically using the Web3.js contract API.For each token we will need a dedicated contract instance:const tokenContract = erc20Contract.at(tokenContractAddress);After the creation of contract instance, we can access the contract functions by calling the desired function straight from JavaScript:https://gist.github.com/PaulLaux/341abd39d4628ddca3fd13e906ffa673See Web3.js contract API for the full details.We will promisify the tokenContract.transfer.sendTransaction to use it with our redux-saga flow:https://gist.github.com/PaulLaux/741a0787aa5cd2b81ecb02ad79ca3772It is possible to use es6-promisify or similar instead of writing the promise directly, but I prefer the direct approach in this case.Subscribing to Ethereum transaction life-cycle using Web3.js V1 and redux-saga channelseth-hot-wallet uses web3.js v0.2.x and does not support this feature at the moment. The example is provided by another project. It is an important feature and should be used extensively.The new version of Web3.js (V1.0.0) is shipped with a new contract API that can inform us about transaction life-cycle changes.Enter the PromiEvent: A promise combined event emitter.web3.eth.sendTransaction({...}).once('transactionHash', function(hash){ ... }).once('receipt', function(receipt){ ... }).on('confirmation', function(number, receipt){ ... }).on('error', function(error){ ... }).then(function(receipt){    //fired once the receipt is mined});web3.eth.sendTransaction() will return an object (a promise) that will resolve once the transaction is mined. The same object will allow us to subscribe to \u2018transactionHash\u2019, \u2018receipt\u2019, \u2018confirmation\u2019 and \u2018error\u2019 events.This API is far more informative and elegant than the one provided with 0.2.x version of Web3.js. We will see how we can integrate it into our web app with the help of Saga.js channels. The motivation is to update the application state (Redux store) once a change to the transaction state is detected.In the following example, we will create a \u2018commit\u2019 transaction to an arbitrary smart contract and update app state when we get \u2018transactionHash\u2019, \u2018receipt\u2019 and \u2018error\u2019 events.We need to initialize the new channel and fork a handler:The handler will catch all channel events and will call the appropriate Redux action creator.Once the channel and the handler are both ready and the user initiates the transaction, we need to register to the generated events:In fact, we don't need a new channel for each transaction and can use the same channel for all types of transactions.The full source code of this example can be found here.Polling Ethereum blockchain and price data using redux-sagaThere are several ways to watch for blockchain changes. It is possible to use Web3.js to subscribe to events or we can poll the blockchain by ourselves and have more control over some aspects of polling.In eth-hot-wallet, the wallet is polling the blockchain periodically for balance changes and Coinmarketcap API for price changes.This redux-saga pattern will allow us to poll any data source or API:After the CHECK_BALANCES action is seen by the default saga, the checkAllBalances function is called. It can end with one of two possible outcomes: CHECK_BALANCES_SUCCESS or CHECK_BALANCES_ERROR\u00a0. Each one of them will be caught by watchPollData() to wait X seconds and call checkAllBalance again. This routine will continue until STOP_POLL_BALANCES is caught by watchPollData\u00a0. After that, it is possible to resume the polling by submitting CHECK_BALANCES action again.Keeping an eye on the bundle\u00a0sizeWhen building web apps using JavaScript and npm, it might be tempting to add new packages without analyzing the footprint increase. Eth-hot-wallet uses webpack-monitor to display a chart of all the dependencies and the differences between each build. It allows the developer to see the bundle size change clearly after each new package is added.webpack-monitor example\u00a0chartWebpack monitor also can help in finding the most demanding dependencies and might even surprise the developer by highlighting the dependencies that do little for the app but contribute a lot to the bundle size.Webpack-monitor is easy to integrate and is definitely worth including in any webpack based web app.ConclusionThe issues presented in this article are only part of the challenges that need to be solved when building an Ethereum wallet. However, overcoming those issues will create a solid foundation and will allow us to continue and create a successful wallet.Building a wallet can also be a great introduction to the world of Ethereum since most distributed applications (DApps) require a similar set of capabilities both from the front-end and blockchain perspective.ETH Hot Wallet - Ethereum Wallet with ERC20 supportETH Hot wallet is an Ethereum wallet with ERC20 Support. The keys are generated inside the browser and never sent\u2026eth-hot-wallet.comIn case you have any questions regarding eth-hot-wallet or any related subject, feel free to contact me via Twitter or open an issue on GitHub.", "responses": "1"}, {"title": "", "author_name": "Angelo Milan", "link": "https://medium.com/@angelomilan/ethereum-explained-to-my-mom-infographic-673e32054c1c?source=search_post", "post_date": "Jun 26, 2015", "readtime": "5 min read", "upvotes": "434", "content": "Ethereum explained\u2026(infographic)Angelo MilanBlockedUnblockFollowFollowingJun 26, 2015We can do amazing infographics for you go to http://metadesign.ioGet 10 usd bonus in btc when you buy 100 usd of Ether:Coinbase - Buy and Sell Bitcoin and EthereumThe easiest place to buy, use, and accept bitcoin and ethereum. Using digital currency has never been so safe and easy.www.coinbase.comHallo! Now in german! (danke to Sarah & Lena of Zukunftsinstitut)French? Oui bien s\u00fbr (merc\u00ec to Simon @simonpolrot )Em portugu\u00eas tamb\u00e9m? Claro, por que n\u00e3o? (obrigado @renanpiva )Want to republish in your own language?Send me a google doc via twitter and will send the png back \ud83d\ude09Feel free to share on twitter, reddit, crypto forums!(or give it to your mom: click here to download the printable PDF Version)New story: how to get Ether if you are late to the party.Update 06\u201327\u20132015:I\u2019m so thankful for the great response this infographic is getting!It was also posted on the ethereum sub-reddit by @mids106It was tweeted by @ethercasts, @ethereumita and so many other kind people.But THIS\u2026 is the best thing I could hope for (thanks Andrew, thank you @smartcontract!):My mom holding 2nd iteration of the infographicThe story behind this infographic (Short\u00a0version)When I saw this infographic https://blog.ethereum.org/2015/06/21/ethereum-messaging-masses-including-fathers-via-infographic/ by @diiorioanthony\u00a0, I couldn\u2019t resist.I thought I could do things differently and felt I HAD to take action, fast.Goal of the infographic was to explain Ethereum to the masses.I went extreme, and tried to explain ethereum to my mom!UPDATE 08/03 Why my mom? Because:my mom > technical than my dadMy dad would never understand or want to understand.On the other hand my mom knows tech a little better and best of all, is more open minded.This can be considered a \u201credesign\u201d of that infographic if you agree with me that\u201cdesign is not just what it looks like, it is how it works\u201d\u200a\u2014\u200aSteve jobsfirst iteration was titled \u201cwhat the f***k is ethereum\u201d but I went deep into blockchain, and blocks (too complex)\u2026 and apparently my mom doesn\u2019t like curse words\u00a0:-9So I presented her a much simpler version, thinking about how could I make the infographic more understandable, just for herI tested the second iteration with\u2026 yep, my mom. Her questions and reasoning contributed to make the infographic even simpler. The result is the third and final iteration that you can see here.The story behind the ethereum mom infographic (Long\u00a0version)aka see how my mind works.Testing a product / service / tutorial / infographic with your target market is more important that the thing you create itself.I sharply defined who my audience is.My audience is my mom.My mom and tech: owns an old iphone 3gsWhat she knows about tech\u00a0: windows, microsoft office, iphone apps, her company has servers (but who knows where they are\u2026)What she knows about money: bank account, a little buy & hold investing, Debit cardLet me use these info to design the infographicI decided to not use \u201cwill\u201d or \u201cin the future\u201d. It\u2019s made on purpose, I wanted my mom to feel like: \u201cthis is a real thing and works already\u201d.I assume that faking it, made it easier to undestand. I didn\u2019t loose her attention.Otherwise\u2026 CONFUSION.One example is Mist.\u201cYou install this special program on your computer and you connect to the Ethereum network\u201dEasy, uh?I never mentioned bitcoin. It\u2019s not my goal hereThe infographic after testing with my\u00a0momI can say: mission accomplished.I didn\u2019t tell her how Ethereum exactly works, because the goal was to make her \u201cgrasp\u201d ethereum.It\u2019s like when you explain things to a baby\u2026 you create an easier and partial explanation for them, they get the big picture, they are educated at a basic level, but they can go deep if they want.I used messages as a metaphor to let her understand.I wrote whatsapp servers instead of facebook servers just because 90 % of the users doesn\u2019t know or remember they sold to facebook.And it can be confusing, so\u2026Wrapping upEther is like bitcoin but with a clear purpose: it let Dapps workEther is not designed to be spent like bitcoin in your grocery store.We don\u2019t need people like my mom to start adopting ether and using it everyday.Ultimately the focus of Ethereum should be educating normal people like my mom on why they should prefer an app with a decentralized elements; thus creating demand and bringing developers into Ethereum.While bitcoin needs millions of normal people to work, for ethereum to succeed a few thousands of developers are enough.It\u2019s the same with computers (including the ones we have in our pockets): the vast majority of the world population is a consumer, not a creator.And consumers don\u2019t know how apps work behind the scenes, but they know exactly why they use them.P.S.I\u2019m open to suggestions (message me on twitter), and the result will be a 4th iteration of the infographic. Keep in mind that this is for moms, dads and your grandparents if you wish\u2026not full-stack developers.Thanks!Upcoming: Etherex explained\u2026 to my mom!", "responses": "11"}, {"title": "Introducing Ethercraft: a decentralized RPG running on the Ethereum Blockchain", "author_name": "Ethercraft", "link": "https://medium.com/@ethercraft/introducing-ethercraft-a-decentralized-rpg-running-on-the-ethereum-blockchain-3931bea40b3b?source=search_post", "post_date": "Jan 14, 2018", "readtime": "7 min read", "upvotes": "1.7K", "content": "Introducing Ethercraft: a decentralized RPG running on the Ethereum BlockchainEthercraftBlockedUnblockFollowFollowingJan 14, 2018Trading, Crafting, and Dungeon Crawling on the blockchainAfter countless hours and plenty of blood, sweat, and tears, we are proud to introduce Ethercraft: a decentralized RPG running on the Ethereum blockchain. Without further ado, here\u2019s where we are and where we\u2019re going with the project:Update: We are\u00a0live!https://ethercraft.io/Roadmaptl;dr: Our initial launch will consist of disseminating 60 unique items to players, many of which will be available completely free of charge, rolled out in waves of eight to ten items at a time over the following hours. Players will be able to purchase (or acquire for free) these items as soon as the client goes live which will be announced here on Medium and via social media (links below).DevelopmentThe game and its development can be divided into three main components:Items: Buying, selling, and trading.Crafting: Combining items according to a recipe, breaking items down into raw materials, building increasingly complex items from these materials, etc. Opening loot crates and rolling other chance items are also part of the crafting system.The playable video game: A core game loop consisting of equipping a character and sending him off to plunder dungeons and slay enemies.Each of these three categories are discrete components which are being developed and deployed independently of one another. Players who wish to eschew the gameplay itself and stick to trading, collecting, and crafting will be able to do so at no disadvantage compared to those playing the main game.ItemsOur core item system is complete. As mentioned above, our first step will be to release an initial set of items in waves, starting (hopefully) this evening and progressing gradually over the hours following the initial launch.TradingPlayers will be able to buy, sell, and trade items beginning immediately, as all of our items are independent tokens adhering to the ERC20 token standard. You are in complete control of your items.Loot cratesAmong our launch items is a series of loot crates, including one available completely free of charge, which act as chance items. Players will be able to open (roll) these loot crates, potentially receiving rare and valuable loot. The core logic for rolls is currently undergoing testing and is one of our top priorities\u2014we aim to incorporate it into the crafting contract ASAP so that everyone can start rolling their loot crates in short order.Gold PiecesIn-game gold, tentatively Gold Pieces (XGP), is an ERC20 token which will serve as part of the core of the Ethercraft game world and item system. Gold will have two core functions: Firstly, it will be used as an intermediary for everything involving ETH transfer. Let\u2019s say you have an item that you no longer want but which isn\u2019t in high demand on the secondary (player) market at the moment\u2014no problem, just sell it back to the shop (NPC) contract for a modest sum of gold. Want to buy an item for sale by the shop? You\u2019ll need gold for that. Did your hero emerge from the dungeon alive and even victorious? Oh, it looks like he brought back some gold pieces.But why do you, as a player, want gold? Is the added immersion not enough for you? Then consider this: we won\u2019t just be selling gold. Our smart contract will buy gold back from players at a fixed rate of ETH. This will be accomplished using funds raised through the sale of items so that the contract can always afford to purchase all outstanding gold at any given time.The second core function of gold is a truly big one: governance. Gold Pieces will act as a governance token, giving anyone who holds Gold Pieces in their ETH wallet a set of votes in the decision making and upgrade processes of Ethercraft\u2019s smart contracts. In other words, Gold Pieces give players the ability to determine which new items, locations, and features are added to the game, taking these changes out of the hands of the developers and enabling true decentralization. This is a major departure from the way a lot of other \u201cgame on the blockchain\u201d-type projects are currently operating\u2014in fact, most other projects in this space are nothing more than traditional client-server-style games that just happen to run on the EVM but are otherwise totally centralized in the hands of a few developers. This is something we feel sets us apart and is one of the features that we\u2019re most excited about.For launch purposes, we\u2019ll be using ETH for item purchases\u2014we don\u2019t want people to be forced to gold pieces as an intermediary at this stage when it will be needlessly confusing. In the very near future, though\u2014as part of one of our first contract updates\u2014gold is going to replace ETH as the Ethercraft currency of choice.Launch ItemsFor the purposes of the initial launch, we have three basic item types:Free items: Available at no charge, just pay shipping and handling (transaction fees). Limited to 1 item per transaction.Normal items: Fixed cost items with no quantity limit per transaction. Some of these are limited-run items and will be only be available for sale for around 48 hours. (Look for the seasonal items!)Enchanted items: Rare and valuable items, limited to 1 item per transaction and special in one key way:(Using ETH as a stand-in until gold is implemented.)Items also have in-game types and rarities, something which is currently implemented on the back-end but not yet displayed in the client. We will release more details on this in a future article. Our full starter set will be released in waves in the hours following the initial launch.CraftingCrafting is currently undergoing development and testing. We aim to release the beta version of crafting as our first post-launch contract update. Another one of our top priorities post-launch will be enabling the opening of loot crates, which, on the tech side of things, is part of the crafting system.The Game(You are now breathing manually\u2026)Our inspirations include games like Rogue, ADOM, Ultima, Diablo, Final Fantasy Tactics and more. Art source: DragonDePlatinoThe core game loop is intended to be simple, extensible, and scalable. Implementing a real, playable game on the blockchain is not an easy task, and we\u2019re ultimately aiming for mainstream adoption. Our solution is something we feel is very elegant. The player will\u2026Roll a new character, equipping that character with select items that they already own. The character and the chosen items are then held by the core game contract.Choose the character\u2019s tactics, first on a per-dungeon basis and later* in a more fine-grained manner (see Tech section below).Enter a dungeon, watching as the character traverses floor by floor in an attempt to reach and conquer the unknown and (hopefully) emerge with a big pile of loot!But if you die, you\u2019re dead. That\u2019s it. Your equipment? It\u2019s gone, destined to rot away in the dungeon, never to be seen again\u2026 or is it? (See Tech.)Tactics include things such\u00a0as\u2026Your stance: Is your character an aggressive fighter or a defensive fighter? Does he try to keep his distance or does he prefer to rush in close to enemies as quickly as possible?Doors: How will you treat locked doors without a key? Will you spend extra time on that level searching for a key? Will you kick them down, possibly triggering any traps that may be set?\u2026and more. (What will you do when you\u2019re low on food? Ascend the dungeon and attempt to get back to town? Try to find more? Attempt to cook and eat the corpse of a slain enemy?)In this way, the core game loop is essentially a wager system involving with skill and planning components\u2014you risk items using what you know for the potential reward of gold and glory.This simple system is ideal for blockchain implementation and mobile adoption. We want Ethercraft to be fun, addictive, simple to play, and feasible to implement on the blockchain in such a way that does not negatively impact the user experience (in other words, with no lag or other unnecessary interruptions), and we believe our current system meets all of those requirements. Ultimately, we are aiming for mainstream adoption\u200a\u2014\u200aour core design means that players can enjoy a good dungeon crawl on the blockchain with just a few taps of the mobile client while on a lunch break. The core game contract is in the early stages of development and will be released after key updates to the item and crafting contracts.The TechI\u2019d love to go into detail about the pitfalls of RNG on the blockchain and our solution, or all of the myriad of things that need to be overcome including gas fees, confirmation times, or how we\u2019ll be supporting third-party clients that can leverage our story generation algorithm in order to display the same back-end game to the player as an old-school Elder Scrolls-style 3D dungeon adventure, etc., but it\u2019s time for me to get ready for launch. Stay tuned for an update in the near future on how we\u2019re handling a lot of this behind the scenes!Also stay tuned for our Getting Started guide for those of you who are not familiar with MetaMask, Cipher Browser (mobile), MEW, etc.Social media:Twitter: https://twitter.com/ethercraft_ioTelegram: https://t.me/ethercraft_ioDiscord: https://discord.gg/WAJdrvwReddit: https://www.reddit.com/r/Ethercraft_io/", "responses": "10"}, {"title": "Building an \u201cOracle\u201d for an Ethereum\u00a0contract", "author_name": "Lovable Technology", "link": "https://medium.com/@mustwin/building-an-oracle-for-an-ethereum-contract-6096d3e39551?source=search_post", "post_date": "Oct 10, 2016", "readtime": "5 min read", "upvotes": "751", "content": "Building an \u201cOracle\u201d for an Ethereum\u00a0contractLovable TechnologyBlockedUnblockFollowFollowingOct 10, 2016What is an\u00a0Oracle?Smart contracts, by their nature, are able to run algorithmic calculations and store and retrieve data. Because every node runs every calculation, it\u2019s not practical (and presently impossible) to make arbitrary network requests from an Ethereum contract. Oracles fill this void by watching the blockchain for events and responding to them by publishing the results of a query back to the contract. In this way, contracts can interact with the off-chain world.This introduces obvious trust problems. A decentralized contract that requires trusting a single outside data source is a bit of a contradiction. This can be mitigated by having multiple independent oracles respond to the same queries to form a consensus.For more on Oracles, check out Oraclize, a FinTech company providing a \u2018reliable connection\u2019 between distributed apps. Their explanation of an oracle is a good place to start.The Tinypay.co DNS\u00a0OracleThe oracle for Tinypay (described in more detail here) has to do three simple things:Pick up \u2018ClientCreated\u2019 events from the contractVerify DNS records using the data from the eventSend a \u2018ConfirmClient\u2019 transaction to the contract once the domain is confirmedI went through a few iterations getting the right implementation, and I want to walk you through them as a tour of development on Ethereum.You can use RPC directly\u2026 but you probably shouldn\u2019tThe first time I wrote the oracle, I used Go. I tried to do all of the communication with the Ethereum node using the RPC APIs directly.That was interesting, because I was able to learn a lot about how the Ethereum protocol stores and marshals data at a low level. I had to manually recreate the ABI (Application Binary Interface) in code and use that to both send and decipher messages. The ABI is necessary for defining how the contract can be interacted with, and how data is extracted from the raw bytes on the wire.The actual extracting of data from the events proved to be more complex than I was ready for. Handling events was not yet completed in the Go client. I was forced to poll the RPC endpoint manually, and to figure out how to decode the binary data from the raw events. The Go client certainly seems to be the primary focus of the Ethereum team, and they\u2019re well aware of the hole in the client around watching and decoding events. I expect this to be shored up soon, making the Go client a first class option for writing Oracles and other Ethereum client apps.The low level RPC APIs and decoding APIs proved to be very low-level, and they were making rapid iteration much harder, so\u2026Web3 is a good abstractionFor the second iteration I switched to node.js and used the web3 library for communicating with the geth node. This gave me built in abstractions for event watching, data extraction and formatting, and generally made life a lot easier.I started with the very useful \u2018tinyoracle\u2019 guide by Alex Beregszaszi which got me well on my way to a good second versionThe following code extracts are somewhat edited, the full code can be found in the github repository (tag v0.0.2 for this iteration)var Web3 = require('web3');var web3 = new Web3();var contracts = require(path.join(__dirname, 'gen_contracts.json'));// First we instruct web3 to use the RPC providerweb3.setProvider(  new web3.providers.HttpProvider(    'http://' + opts.rpc_host + ':' + opts.rpc_port));// This isn't strictly necessary here, but goes to show the step required to \"unlock\" the account before sending transactions.if (!web3.personal.unlockAccount(  web3.eth.coinbase, opts.wallet_password)) {  console.error('Could not unlock');  process.exit();}// Here we register the filter with the ethereum node, and then begin polling for updates.function runLoop(o) {  var filter = web3.eth.filter({address: o.contract_address});  filter.watch(function (err, results) {    if (err) {      console.log('WATCH ERROR: ', err);      process.exit();    }    console.debug(results);  });}// If the contract isn't deployed yet, we deploy it hereif (!opts.contract_address) {// This block of code loads the ABI for interpreting contract data.  var dmC = web3.eth.contract(JSON.parse(contracts.DomainMicropay.abi));  var x = {    from: web3.eth.coinbase,    data: contracts.DomainMicropay.bin,    gas: 1000000  };  // send the transaction for installing the contract.  dmC.new(x, function (err, resp) {    if (err) {      console.error('Loading contract', err);      process.exit();    }    var addr = resp.address;    if (!addr) {      console.log('Pending tx: ', resp.transactionHash);    } else {      console.log('Deployed Address: ', addr);      opts.contract_address = addr;      runLoop(opts);    }  });} else {  runLoop(opts); // in either case, start the polling event loop.}Truffle is what you want to use\u00a0thoughFinally, for the third iteration, I gave up trying to roll it all myself. We were already using the excellent tool, truffle, from ConsenSys in our web front end. I just copied the generated artifacts into my node.js project, and included it directly, and I was in business.Using Truffle we were able to compile our Solidity contracts into a javascript library that captured important details like the deployed address of the contract, and completely abstracted away the low level RPC communication. Watching events, and sending transactions, and querying data became simple API calls generated directly from our contract.// This code extract shows the whole event loop abstracted behind the actual event name: ClientConfirmed and ClientCreated.startWatcher: function (rpcUrl, unlockPass) {        password = unlockPass || password;web3.setProvider(new web3.providers.HttpProvider(rpcUrl));        DomainMicropay.setProvider(web3.currentProvider);contract.ClientConfirmed({}, eventOpts(), function (err, data) {          if (err) {            console.log('Error ClientConfirmed: ', err);            return;          }          console.log('Event ClientConfirmed: ', data.args.domain);        });contract.ClientCreated({}, eventOpts(), function (err, data) {          if (err) {            console.log('Error ClientCreated: ', err);            return;          }          console.log('Event ClientCreated: ', data.args.domain);          contract.getPaymentContractForDomain            .call(data.args.domain)            .then(beginDomainVerification(data))            .catch(errFn('Unhandled Error: '));        });      }As you can see, Truffle provides some really nice abstractions for using and interacting with smart contracts. It\u2019s not perfect, and doesn\u2019t solve some problems like contract versioning, etc. But we\u2019ll have to cover those things in another post.Must Win would love to help develop your next \u201cDApp\u201d. If you\u2019re looking for help understanding or utilizing block chain tech, reach out to we@mustwin.com and reference this post.", "responses": "6"}, {"title": "Ethereum: Bitcoin Plus Everything", "author_name": "ConsenSys", "link": "https://medium.com/@ConsenSys/ethereum-bitcoin-plus-everything-a506dc780106?source=search_post", "post_date": "Jan 6, 2016", "readtime": "9 min read", "upvotes": "632", "content": "Ethereum: Bitcoin Plus EverythingWhy anything that can be programmed can be programmed on Ethereum.ConsenSysBlockedUnblockFollowFollowingJan 6, 2016By Mike GoldinThis article is the sequel to \u201cJust Enough Bitcoin for Ethereum,\u201d which focuses on understanding Bitcoin. All the background you need to begin understanding Ethereum is there.Remember the first time you began using objects in a programming language? Or made your first attempt at functional programming? Remember how badly it spun your head around on a conceptual level before becoming intuitive? Developing blockchain orientation is much like developing object and functional orientations: initially disorienting, but eventually obvious. In Part I of this series we learned how blockchains work in general by figuring out the Bitcoin blockchain. In this article, we\u2019ll begin reasoning about the Ethereum blockchain to start developing your blockchain orientation. Nurturing an intuition for how to structure blockchain interactions will pay dividends for a long time to come!To get started, read the three sections in the Ethereum white paper on accounts, transactions, and messages. Read the rest as well if you like, but if you read \u201cJust Enough Bitcoin For Ethereum,\u201d then you already understand the basic technical underpinnings. Just like when you read the Bitcoin white paper, don\u2019t sweat it if something doesn\u2019t make sense on your first read-through. We\u2019ll get there.Now You\u2019re Thinking With Contracts!Smart contracts are code that is stored and executed on a blockchain. Add a user interface and smart contracts serve as the backends for decentralized applications, or dapps. With your understanding of the Bitcoin blockchain, it might be useful to think of a Bitcoin transaction as a simple program with three inputs and two outputs (this abuses Bitcoin\u2019s actual native notions of what inputs and outputs are, but don\u2019t sweat it for now). The inputs are a sum of Bitcoin to transfer, an address to transfer from and an address to transfer to. The outputs are the previously specified accounts, each with a new balance denoting the transfer. A mined transaction is a public record that this simple program was executed with some given inputs and produced a set of outputs. In Bitcoin\u2019s case the transfer program is the only one which exists, so every node knows how to verify that the outputs make sense given the inputs.Ethereum opens the scope of what these programs can be beyond simple transfers of sums to anything which can be programmed on a Turing machine. If you slept through your CS classes, this means that anything that can be programmed, can be programmed on Ethereum.Ethereum enables this complexity by placing a virtual machine (called the Ethereum Virtual Machine, or EVM) in every node on the network. The EVM is not conceptually different than any other virtual machine. You may already be familiar with the Java Virtual Machine (JVM), for example. Just like JVM code will run on any machine hosting a JVM and produce identical outputs over the same set of inputs, the EVM enables the Ethereum blockchain to reach consensus about the proper output of any EVM code based on a set of inputs.Full nodes on the Bitcoin blockchain store every transaction made going back to the zero block; full nodes on the Ethereum blockchain additionally store the static code (if any) associated with a given account and that code\u2019s current state in storage.Imagine a trivial program stored at an account which accepts a number as input, adds that number to a running sum and overwrites the previous sum with the new one. Two accounts have sent transactions to this contract account, the first inputting five and the second inputting two. Stored on the Ethereum blockchain are:The account and its static code.The account\u2019s current storage state with its sum set to seven.A historical account storage state with the sum set to five.A historical account storage state with the sum set to zero.Three transaction records: one from when the code was initially stored, one from the account which inputted five and one from the account which inputted two.Imagine a similar program stored at a separate account (necessarily) which does the same thing, but also stores a linear array of two-field structs (a struct is a template for a structured arrangement of data), each containing an address denoting the transaction sender and the input the sender provided. Two accounts have sent transactions to this contract account, the first inputting five and the second inputting two. Stored on the Ethereum blockchain are:The account and its static code.The account\u2019s current storage state with its sum set to seven and an array containing two structs.A historical account storage state with its sum set to five and an array containing one struct.A historical account storage state with its sum set to zero and an empty array.Three transaction records: one from when the code was initially stored, one from the account which inputted five and one from the account which inputted two.Now we can reconstruct this account\u2019s prior states trivially and see which accounts interacted with it to create those states. This pattern, however, should be avoided. Why? In the example given above, all the data stored in the array could have been reconstructed using the blockchain itself. At this point more devious readers have already imagined several ways to nuke the Ethereum blockchain as described thus far; next we\u2019ll learn about how Ethereum prevents DoS attacks on its nodes\u2019 hard drives and CPUs, and what the measures mean for both developers and users. It means in part that developers need to be judicious in deciding when to write data.The Price of\u00a0GasWhat is to stop anybody from uploading a contract with 10 terabytes of static code and exhausting the storage of the network\u2019s full nodes? Or one which spins the CPU continuously to no effect? Ethereum transactions have fees just like Bitcoin transactions to incentivize miners to process the transactions and secure the network, but Ethereum\u2019s fees take the form of a \u201cgas cost.\u201d Just like a car needs so many gallons to travel such a distance, Ethereum transactions require so much Ether to spin so many CPU cycles or store such a quantity of data. By simple virtue of Ether being a scarce and valuable resource, DoS attacks are prevented. A blockchain billionaire looking to burn their fortune on a prank could slow the network for a time, but the winning miner of the nefarious transaction\u2019s block would see quite a payday!What does this mean for developers and users? While reading from a local copy of the blockchain is free, writing to it and computing with it are not. Storage in particular is expensive, since any data written needs to be stored forever. Spinning the CPU is comparatively cheap. Write operations which change an account\u2019s storage state over what would be considered already allocated memory in a non-blockchain context are always store operations, because historical states are always saved. Ethereum is Turing-complete, so nothing stops you from writing a video encoder and publishing it to the blockchain: you just probably won\u2019t ever be able to afford using it. Assuming the code for such a program is at least several thousand lines, even storing it wouldn\u2019t be trivially cheap. A good heuristic for what Ethereum contracts are practically capable of is: \u201ccould it be done on a smartphone from 1999?\u201dAs a developer, this means you need to think hard about your code\u2019s efficiency. Storage efficiency in particular, but every CPU cycle costs your users money. If two contracts do the same thing, the more efficient of the two will win and take all.So, knowing now both the theoretical possibilities and practical limitations of smart contracts: what makes them so cool?A Real World\u00a0ExampleBefore you can start raving with the rest of us about infrastructureless government and other transformative ideas that smart contracts enable, let\u2019s walk through a simple real-world use case for a smart contract to whet your appetite and get you thinking.Let\u2019s say my band and I have just finished recording a great new album that we want to share with our fans. The problem is that we\u2019re punks, and The Man is The Man whether his name is iTunes or YouTube. The idea is to print a limited edition of 100 copies of our album on vinyl and register every purchaser to attend an exclusive purchasers-only show at the best dive bar we know. On the Old Internet we might have used something like PayPal to accept payments. PayPal would take a cut of every transaction, we would mail a copy of the album and then hopefully remember to mark off another sale in a spreadsheet such that when the one hundred and first person asked to make a purchase we would say no. The whole proposition is so rickety that it\u2019s no wonder artists and fans alike pay premiums to transact through intermediaries like Ticketmaster and Bandcamp! Luckily, our drummer has some experience writing Ethereum smart contracts, so we decide to code up a simple \u201cregistry\u201d to make this all happen.The registry contract is simple. It is composed of three functions: purchase, provePurchase and claimAlbum. A fan sends the specified amount of Ether to the contract\u2019s purchase function through a web page. If the amount sent is greater than or equal to the price specified, a counter is incremented and the sending account\u2019s Ethereum address is recorded in an array as a struct with two fields: the address and an integer claimed set to 0. This transaction will fail (and refund the fan\u2019s Ether) if incrementing the counter would leave it in excess of 100.After making the purchase, the fan sends us a (physical) address to which we should mail their vinyl. To do this, the claimAlbum function finds the struct associated with the sending account from purchase-time and increments its claimed field by one. If and only if claimed is equal to one does our web page accept the fan\u2019s address, which we then mail the vinyl to. We\u2019ve made address submission contingent on sending a transaction to the claimAlbum function using the same account that was used to transact with the purchase function, thus ensuring we only accept addresses from people who have actually purchased the album and to only send one copy.When it comes time for the big show, how can we make sure nobody sneaks in who didn\u2019t pay for our album? This is where we use the provePurchase function. With an iPad at the door, people can sign transactions to the provePurchase function using the accounts they purchased the album with. If those accounts exist in the contract\u2019s storage array, provePurchase will return true and we know they purchased the album. The bouncer waves them through.What\u2019s more, all of the promises we make about the album\u2019s exclusivity can be verified by the fans before purchasing. Ethereum contracts are content-addressed, meaning their source code hashes to the location the code is addressable at on-chain. By making the contract code available open-source, anybody can independently verify the functionality of the code by hashing the source and looking at the resulting address in the contract.What\u2019s been described here is a naive implementation with some details omitted, but it should be enough to get you thinking about just how disintermediating smart contracts really are. Ujo Music, for example, has implemented these ideas in a much more robust and foolproof way that allows micro-payments for streams, re-sellable downloads and more at the artist\u2019s discretion. What\u2019s more, the artist keeps 100% of what they earn. People pay Apple 30% of their revenue for the security that blockchains provide nearly for free.Welcome to Blockchain WorldNow we can write code of arbitrary complexity, store it on the blockchain, find it using a hash of its content, and expect it to execute on every node in the network when its functions are called. Consensus on the result of executing code is achieved based on the validity of the code\u2019s state changes in storage. These complex transactions are mined just like transactions in Bitcoin. The code we upload to the blockchain are called contracts, and are effectively the backend for decentralized applications or dapps. The idea of a \u201csmart contract\u201d turns out to be a pretty good metaphor for how code running on Ethereum works, both in terms of its advantages (immutable public records of unbreakable agreements producing a predictable result for any possible input) and limitations (it\u2019s cheaper than lawyers but not completely free).Get out there and build the future you want to live in!References:General Ethereum documentationSolidity Language Manual (Solidity is the furthest-developed EVM language as of January 2016)Ethereum subreddit (People are nice! Ask questions!)", "responses": "5"}, {"title": "Ethereum\u2019s Constantinople is\u00a0Here", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereums-constantinople-is-here-f3d5353cfce3?source=search_post", "post_date": "Jan 11", "readtime": "3 min read", "upvotes": "993", "content": "No more forks let\u2019s call them something else\u2026 Serenity upgrades.Ethereum\u2019s Constantinople is\u00a0HereMichael K. SpencerBlockedUnblockFollowFollowingJan 11The run-up to Ethereum\u2019s fifth planned system-wide upgrade, Constantinople is finally here, late but it\u2019s arrived.Expected to go live on Wednesday, Jan. 16, 2019 Constantinople is a type of upgrade known as a hard fork\u200a\u2014\u200awhich means it needs to be unilaterally installed across all nodes in the network to function as intended.Elegantly perhaps Etheruem is planning this in 4 distinct stages.Frontier (beta stage to develop and test dapps)Homestead (to stabilize the platform),Metropolis (ongoing) andSerenity (upcoming).While in 2019 Ethereum certainly doesn\u2019t look like a valid candidate to become the backbone of the new internet, at least sharing and scalability is on the way with Ethereum 2.0.The Ethereum road-map looks long a laundry list of what public blockchains need to do in order to be scalable.Plasma, Casper & Serenity\u200a\u2014\u200athe Star Trek of Ether continuesNamed after the capital of the Byzantine Empire, Constantinople forms part of a three-part upgrade called Metropolis. Confused yet? That\u2019s okay. Ethereum\u2019s price has been fluctuating wildly near the end of 2018 with some positive signs in recent weeks.The countdown to Constantinople is here. Ethereum doesn\u2019t call this a hard fork per se, it\u2019s more like a network upgrade.Metropolis combines a total of five ethereum improvement proposals (EIPs). Ethereum is trying hard to reinvent itself at at time when ConsenSys is pivoting and going into lean startup mode. The crypto winter is like an incubation period for Ethereum 2.0. The crypto sell-off of November, 2018 appears to have occurred at a similar time when Wall Street\u2019s FANG stocks dipped in a very gloomy period of market volatility.I think we can safely characterize Constantinople as primarily a \u201cmaintenance and optimization upgrade\u201d but a sign that Ethereum is heading in the right direction.The decentralized nature of blockchain systems makes a network upgrade more difficult. This also for the layperson means Ethereum has a more esoteric than practical implication on our lives. As if crypto was some arcane alchemy of blockchain developers the rest of us don\u2019t or choose not to really understand.There\u2019s also a certain finality to such a \u2018network upgrade\u2019 or hard fork. The protocol changes are activated at a specific block number. Any nodes that have not been upgraded to the new ruleset will be abandoned on the old chain where the previous rules continue to exist.Additionally, the hard fork includes changes to Ethereum\u2019s underlying economic policy, and the delay of the difficulty bomb, a piece of code programmed to activate what is known as the ethereum \u201cice age\u201d in which new block creation on the network eventually slows to a complete halt. Those magic nodes eh!Changes that are implemented in Constantinople are defined using EIPs. Ethereum Improvement Proposals (EIPs) describe standards for the Ethereum platform, including core protocol specifications, client APIs, and contract standards.145: In short: This EIP adds native functionality to protocol so that it is cheaper & easier to do certain things on chain.1014: In short: This EIP makes it so you can interact with addresses that have yet to be created.1052: In short: This EIP makes it cheaper (less gas is needed) to do certain things on chain.1283: In short: This EIP makes it cheaper (less gas is needed) to do certain things on chain, especially things that are currently \u201cexcessively\u201d expensive.1234: In short: This EIP make sure we don\u2019t freeze the blockchain before proof of stake is ready & implemented.Clearly these coders are doing surgery in heaven, the world computer needs an upgrade and while public blockchains still aren\u2019t viable, they are for all intents and purposes fun to witness.As our prayers for a more decentralized world continue, we stand at the dawn of Ethereum. Let us now open the gates of shard and continue along the Tao of Serenity.", "responses": "6"}, {"title": "Diving Into The Ethereum VM Part 2\u200a\u2014\u200aHow I Learned To Start Worrying And Count The Storage\u00a0Cost", "author_name": "Howard", "link": "https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-2-storage-layout-bc5349cb11b7?source=search_post", "post_date": "Aug 14, 2017", "readtime": "9 min read", "upvotes": "1K", "content": "Diving Into The Ethereum VM Part 2\u200a\u2014\u200aHow I Learned To Start Worrying And Count The Storage\u00a0CostHowardBlockedUnblockFollowFollowingAug 14, 2017Micron MT4C1024In the first article of this series we\u2019ve peeked into the assembly code of a simple Solidity contract:contract C {    uint256 a;    function C() {      a = 1;    }}This contract boils down to an invocation of the sstore instruction:// a = 1sstore(0x0, 0x1)The EVM stores the value 0x1 in the storage position 0x0.Each storage position can store exactly 32 bytes (or 256 bits).If this seems unfamiliar, I recommend reading: Diving Into The Ethereum VM Part 1\u200a\u2014\u200aAssembly & BytecodeIn this article we\u2019ll start to look into how Solidity uses chunks of 32 bytes to represent more complex data types like structs and arrays. We\u2019ll also see how storage could be optimized, and how optimization could fail.In a typical programming language it\u2019s not terribly useful to understand how data types are represented at such a low-level. In Solidity (or any EVM language) this knowledge is crucial because storage access is super expensive:sstore costs 20000 gas, or ~5000x more expensive than a basic arithmetic instruction.sload costs 200 gas, or ~100x more expensive than a basic arithmetic instruction.And by \u201ccost\u201d, we are talking about real money here, not just milliseconds of performance. The cost of running & using your contract is likely to be dominated by sstore and sload!Parsecs Upon Parsecs of\u00a0TapeTuring Machine. Source: http://raganwald.com/It takes two essential ingredients to build an Universal Computation Machine:A way to loop, either jump or recursion.An infinite amount of memory.The EVM assembly code has jump, and the EVM storage provides the infinite memory. That\u2019s enough for EVERYTHING, including simulating a world that runs a version of Ethereum, which is itself simulating a world that runs Ethereum that is\u2026Diving Into The Microverse BatteryThe EVM storage for a contract is like an infinite ticker tape, and each slot of the tape holds 32 bytes. Like this:[32 bytes][32 bytes][32 bytes]...We\u2019ll see how data lives on the infinite tape.The length of the tape is 2\u00b2\u2075\u2076, or ~10\u2077\u2077 storage slots per contract. The number of particles of the observable universe is 10\u2078\u2070. About 1000 contracts would be enough to hold all those protons, neutrons, and electrons. Don\u2019t believe the marketing hype, as it is a lot shorter than infinity.The Blank\u00a0TapeThe storage is initially blank, defaulting to zero. It doesn\u2019t cost you anything to have an infinite tape.Let\u2019s look at a simple contract to illustrate the zero-value behaviour:pragma solidity ^0.4.11;contract C {    uint256 a;    uint256 b;    uint256 c;    uint256 d;    uint256 e;    uint256 f;    function C() {      f = 0xc0fefe;    }}The layout in storage is simple.The variable a in position 0x0The variable b in position 0x1And so on\u2026The key question: if we only use f, how much do we pay for a, b, c, d, e?Let\u2019s compile and see:$ solc --bin --asm --optimize c-many-variables.solThe assembly:// sstore(0x5, 0xc0fefe)tag_2:  0xc0fefe  0x5  sstoreSo a storage variable declaration doesn\u2019t cost anything, as there\u2019s no initialization necessary. Solidity reserves a position for that store variable, and you pay only when you store something in it.In this case, we are only paying for storing to 0x5.If we were writing assembly by hand, we could choose any storage position without having to \u201cexpand\u201d the storage:// Writing to an arbitrary positionsstore(0xc0fefe, 0x42)Reading ZeroNot only can you write anywhere in storage, you can read from anywhere immediately. Reading from an uninitialized position simply returns 0x0.Let\u2019s see a contract that reads from a, an uninitialized position:pragma solidity ^0.4.11;contract C {    uint256 a;    function C() {      a = a + 1;    }}Compile:$ solc --bin --asm --optimize c-zero-value.solThe assembly:tag_2:  // sload(0x0) returning 0x0  0x0  dup1  sload  // a + 1; where a == 0  0x1  add  // sstore(0x0, a + 1)  swap1  sstoreNotice that it\u2019s valid to generate code that sload from an uninitialized position.We can be smarter than the Solidity compiler, however. Since we know that tag_2 is the constructor, and a had never been written to, we can replace the sload sequence with 0x0 to save 5000 gas.Representing StructLet\u2019s look at our first complex data type, a struct that has 6 fields:pragma solidity ^0.4.11;contract C {    struct Tuple {      uint256 a;      uint256 b;      uint256 c;      uint256 d;      uint256 e;      uint256 f;    }    Tuple t;    function C() {      t.f = 0xC0FEFE;    }}The layout in storage is the same as state variables:The field t.a in position 0x0The field t.b in position 0x1And so on\u2026Like before, we can write directly to t.f without paying for initialization.Let\u2019s compile:$ solc --bin --asm --optimize c-struct-fields.solAnd we see the exact same assembly:tag_2:  0xc0fefe  0x5  sstoreFixed Length\u00a0ArrayNow let\u2019s declare a fixed length array:pragma solidity ^0.4.11;contract C {    uint256[6] numbers;    function C() {      numbers[5] = 0xC0FEFE;    }}Since the compiler knows exactly how many uint256 (32 bytes) there are, it can simply lay out the elements of the array in storage one after another, just as it did for store variables and structs.In this contract, we are again storing to the position 0x5.Compile:$ solc --bin --asm --optimize c-static-array.solThe assembly:tag_2:  0xc0fefe  0x0  0x5tag_4:  add  0x0tag_5:  pop  sstoreIt is slight longer, but if you squint a little, you\u2019d see that it\u2019s actually the same. Let\u2019s optimize this further by hand:tag_2:  0xc0fefe  // 0+5. Replace with 0x5  0x0  0x5  add  // Push then pop immediately. Useless, just remove.  0x0  pop  sstoreRemoving the tags and spurious instructions, we arrive at the same bytecode sequence again:tag_2:  0xc0fefe  0x5  sstoreArray Bound\u00a0CheckingWe\u2019ve seen that fixed-length arrays has the same storage layout as struct and state variables, but the generated assembly code is different. The reason is that Solidity generates bound-checking for array access.Let\u2019s compile the array contract again, turning off the optimizations this time:$ solc --bin --asm c-static-array.solThe assembly is commented below, printing the machine state after each instruction:tag_2:  0xc0fefe    [0xc0fefe]  0x5    [0x5 0xc0fefe]  dup1  /* array bound checking code */  // 5 < 6  0x6    [0x6 0x5 0xc0fefe]  dup2    [0x5 0x6 0x5 0xc0fefe]  lt    [0x1 0x5 0xc0fefe]  // bound_check_ok = 1 (TRUE)  // if(bound_check_ok) { goto tag5 } else { invalid }  tag_5    [tag_5 0x1 0x5 0xc0fefe]  jumpi    // Test condition is true. Will goto tag_5.    // And `jumpi` consumes two items from stack.    [0x5 0xc0fefe]  invalid// Array access is valid. Do it.// stack: [0x5 0xc0fefe]tag_5:  sstore    []    storage: { 0x5 => 0xc0fefe }We see the the bound-checking code now. We\u2019ve seen that the compiler is able to optimize some of this stuff, but not perfectly.Later in this article we will to see how array bound-checking interferes with compiler optimization, making fixed-length arrays much less efficient than store variables or structs.Packing BehaviourStorage is expensive (yayaya I\u2019ve said it a million times). One key optimization is to pack as much data into one 32 bytes slot as possible.Consider a contract that has four store variables, 64 bits each, adding up to 256 bits (32 bytes) altogether:pragma solidity ^0.4.11;contract C {    uint64 a;    uint64 b;    uint64 c;    uint64 d;    function C() {      a = 0xaaaa;      b = 0xbbbb;      c = 0xcccc;      d = 0xdddd;    }}We\u2019d expect (hope) that the compiler uses one sstore to put these in the same storage slot.Compile:$ solc --bin --asm --optimize c-many-variables--packing.solThe assembly:tag_2:    /* \"c-many-variables--packing.sol\":121:122  a */  0x0    /* \"c-many-variables--packing.sol\":121:131  a = 0xaaaa */  dup1  sload    /* \"c-many-variables--packing.sol\":125:131  0xaaaa */  0xaaaa  not(0xffffffffffffffff)    /* \"c-many-variables--packing.sol\":121:131  a = 0xaaaa */  swap1  swap2  and  or  not(sub(exp(0x2, 0x80), exp(0x2, 0x40)))    /* \"c-many-variables--packing.sol\":139:149  b = 0xbbbb */  and  0xbbbb0000000000000000  or  not(sub(exp(0x2, 0xc0), exp(0x2, 0x80)))    /* \"c-many-variables--packing.sol\":157:167  c = 0xcccc */  and  0xcccc00000000000000000000000000000000  or  sub(exp(0x2, 0xc0), 0x1)    /* \"c-many-variables--packing.sol\":175:185  d = 0xdddd */  and  0xdddd000000000000000000000000000000000000000000000000  or  swap1  sstoreA lot of bit-shuffling that I can\u2019t decipher, and I don\u2019t care. The key thing to notice is that there\u2019s only one sstore.Optimization success!Breaking The OptimizerIf only the optimizer could work so well all the time. Let\u2019s break it. The only change we make is that we use helper functions to set the store variables:pragma solidity ^0.4.11;contract C {    uint64 a;    uint64 b;    uint64 c;    uint64 d;    function C() {      setAB();      setCD();    }    function setAB() internal {      a = 0xaaaa;      b = 0xbbbb;    }    function setCD() internal {      c = 0xcccc;      d = 0xdddd;    }}Compile:$ solc --bin --asm --optimize c-many-variables--packing-helpers.solThe assembly output is too much. We\u2019ll ignore most of the detail and focus on the structure:// Constructor functiontag_2:  // ...  // call setAB() by jumping to tag_5  jumptag_4:  // ...  // call setCD() by jumping to tag_7  jump// function setAB()tag_5:  // Bit-shuffle and set a, b  // ...  sstoretag_9:  jump  // return to caller of setAB()// function setCD()tag_7:  // Bit-shuffle and set c, d  // ...  sstoretag_10:  jump  // return to caller of setCD()Now there are now two sstore instead of one. The Solidity compiler can optimize within a tag, but not across tags.Calling functions could cost you far more, not so much because function calls are expensive (they are only jump instructions), but because sstore optimization could fail.To solve this problem, the Solidity compiler needs to learn how to inline functions, essentially getting the same code as not calling functions:a = 0xaaaa;b = 0xbbbb;c = 0xcccc;d = 0xdddd;If we peruse the complete assembly output, we\u2019d see that the assembly code for the functions setAB() and setCD() is included twice, bloating the size of the code, costing you extra gas to deploy the contract. We'll talk about this later when learning about the contract lifecycle.Why The Optimizer BreaksThe optimizer doesn\u2019t optimize across tags. Consider \u201c1+1\u201d, it can be optimized to 0x2 if under the same tag:// Optimize OK!tag_0:  0x1  0x1  add  ...But not if the instructions are separated by tags:// Optimize Fail!tag_0:  0x1  0x1tag_1:  add  ...This behaviour is true as of Version 0.4.13. Could change in the future.Breaking The Optimizer, AgainLet\u2019s see another way the optimizer fails. Does packing work for a fixed length array? Consider:pragma solidity ^0.4.11;contract C {    uint64[4] numbers;    function C() {      numbers[0] = 0x0;      numbers[1] = 0x1111;      numbers[2] = 0x2222;      numbers[3] = 0x3333;    }}Again, there are four 64 bits numbers we\u2019d hope to pack into one 32 bytes storage slot, using exactly one sstore instruction.The compiled assembly is too long. Let\u2019s instead just count the number of sstore and sload instructions:$ solc --bin --asm --optimize c-static-array--packing.sol | grep -E '(sstore|sload)'  sload  sstore  sload  sstore  sload  sstore  sload  sstoreOh noes. Even though this fixed-length array has exactly the same storage layout as equivalent struct or store variables, optimization fails. It now takes four pairs of sload and sstore.A quick look at the assembly code reveals that each array access has bound checking code, and organized under different tags. But tag boundaries break optimization.There is a small consolation though. The 3 extra sstore instructions are cheaper than the first:sstore costs 20000 gas for first write to a new position.sstore costs 5000 gas for subsequent writes to an existing position.So this particular optimization fail costs us 35k instead of 20k, 75% extra.ConclusionIf the Solidity compiler can figure out the size of store variables, it simply lays them out one after another in storage. If possible, the compiler packs the data tightly in chunks of 32 bytes.To summarize the packing behaviour we\u2019ve seen so far:Store variables: yes.Struct fields: yes.Fixed-length arrays: no. In theory, yes.Because storage access costs so much, you should think of the store variables as your database schema. When writing contracts, it could be useful to do small experiments, and examine the assembly to find out if the compiler is optimizing properly.We can be sure that the Solidity compiler will improve in the future. For now, unfortunately, we can\u2019t trust its optimizer blindly.It pays, literally, to understand your store variables.", "responses": "8"}, {"title": "Recap: Organising the Jakarta Blockchain Meetup, hosted by Ethereum Indonesia", "author_name": "Malcolm Chang", "link": "https://medium.com/swipecrypto/recap-organising-the-jakarta-blockchain-meetup-hosted-by-ethereum-indonesia-273a7ed12c28?source=search_post", "post_date": "Sep 4, 2018", "readtime": "4 min read", "upvotes": "4.7K", "content": "Recap: Organising the Jakarta Blockchain Meetup, hosted by Ethereum IndonesiaMalcolm ChangBlockedUnblockFollowFollowingSep 4, 2018Hey everyone! Recently, SWIPE organised the Ethereum meetup in Indonesia and it was a huge success! Our speakers eloquently shared about their ideas and thoughts while answering very in-depth questions from the community. We are looking forward to hosting another meetup at the tail end of this month.For those who were not able to make it, here is a recap of what happened during this event, do let me know in the comments section if you have further questions or connect with us via our official telegram channel and have a conversation with us!Our event took place at Block 71, a co-working space managed by National University of Singapore (NUS) Enterprise in partnership with Salim Group.They even have a professional barista manning a coffee shop in the co-working space! (top right of\u00a0picture)", "responses": "1"}, {"title": "Exploring Simpler Ethereum Multisig Contracts", "author_name": "Christian Lundkvist", "link": "https://medium.com/@ChrisLundkvist/exploring-simpler-ethereum-multisig-contracts-b71020c19037?source=search_post", "post_date": "Aug 11, 2017", "readtime": "6 min read", "upvotes": "921", "content": "Exploring Simpler Ethereum Multisig ContractsChristian LundkvistBlockedUnblockFollowFollowingAug 11, 2017A couple of weeks ago a number of widely used Ethereum multisig wallets were hacked, to the tune of ~$32 million in Ethereum-based assets stolen. Another ~$160 million in assets were preemptively taken and safeguarded by a group of white-hat hackers.The incident highlights the challenges with writing smart contract code. You can hardly think of a more adversarial environment than a public blockchain: Your code runs open to the world and anyone can try to poke and prod the functions you expose. Add to that contracts that safeguard tens of millions of dollars worth of assets and you have a situation where hackers are very motivated to find flaws in your contracts and exploit them.The irony about these multisig wallet hacks is that multisig wallets are supposed to be safer than just using one private key. In theory the multisig nature makes it harder for a hacker since they need to hack several people to obtain multiple private keys. In this case however the logic implementing this security feature had a bug which made the security much worse than a single key.Simplicity vs\u00a0SecurityThere is an interesting tradeoff here: More logic in smart contracts can be used to implement more security features: timeouts, spending limits, multisig, vaults etc. However, the more logic in the smart contract the bigger the attack surface and the more likely that bugs are introduced that risk undermining the security features.We can consider a spectrum of asset-management tools from simplest to more complex. The simplest way to secure your Ether is to use a single private key which corresponds to an Ethereum address, sometimes known as an \u201cEnd-user Owned Account\u201d. With this method there is no smart contract logic at all to worry about, so we\u2019ve eliminated that risk. However, just using a single key also means you have a single point of failure.At the other end of the spectrum you can create very elaborate wallet contracts to manage your funds. The Ethereum Foundation has one wallet contract that they actively use & recently Gnosis introduced a sophisticated multisig wallet supporting spending limits, administrative controls and using a workflow where owners confirm transactions that are submitted by others.A simple multisig\u00a0contractWe wanted to explore what the simplest possible multisig contract could look like. It should have the ability for a threshold of key holders to come together and move funds, but to maintain simplicity we do not want more advanced features like spending limits or the ability to update the signers.The inspiration is how multisig is done in Bitcoin, where it is supported directly in the scripting language as an opcode, OP_CHECKMULTISIG. To date I\u2019m aware of no case of Bitcoin being stolen or lost due to a faulty Bitcoin multisig script.What we ended up with was a contract that pushes most logic off-chain, where each multisig owner is responsible for creating the signature that authorizes transactions and then a single function is used to present all the signatures to the contract to be verified. We use the proposed ERC191 specification which is an attempt at standardizing the format of the signatures. A single integer nonce is used to prevent replay attacks.In terms of user interface the idea is that each multisig keyholder would have a UI where they enter in the details of the transaction they wish to send (ideally on an offline computer). Then on an online machine an \u201coperator\u201d would gather up all the signatures from the keyholder and send off the actual transaction containing all the signatures. The operator would not need to have any actual control of funds, the multisig key holders are ultimately the ones that have the authority to execute transactions.The complete code is presented here:pragma solidity 0.4.14;contract SimpleMultiSig {  uint public nonce;                // (only) mutable state  uint public threshold;            // immutable state  mapping (address => bool) isOwner; // immutable state  address[] public ownersArr;        // immutable state  function SimpleMultiSig(uint threshold_, address[] owners_) {    if (owners_.length > 10 || threshold_ > owners_.length || threshold_ == 0) {throw;}    for (uint i=0; i<owners_.length; i++) {      isOwner[owners_[i]] = true;    }    ownersArr = owners_;    threshold = threshold_;  }  // Note that address recovered from signatures must be strictly increasing  function execute(uint8[] sigV, bytes32[] sigR, bytes32[] sigS, address destination, uint value, bytes data) {    if (sigR.length != threshold) {throw;}    if (sigR.length != sigS.length || sigR.length != sigV.length) {throw;}    // Follows ERC191 signature scheme: https://github.com/ethereum/EIPs/issues/191    bytes32 txHash = sha3(byte(0x19), byte(0), this, destination, value, data, nonce);    address lastAdd = address(0); // cannot have address(0) as an owner    for (uint i = 0; i < threshold; i++) {        address recovered = ecrecover(txHash, sigV[i], sigR[i], sigS[i]);        if (recovered <= lastAdd || !isOwner[recovered]) throw;        lastAdd = recovered;    }    // If we make it here all signatures are accounted for    nonce = nonce + 1;    if (!destination.call.value(value)(data)) {throw;}  }  function () payable {}}and the code is also available at the following github repository.BenefitsSome beneficial properties of this contract areMinimal codebase: Only 40 lines of codeMinimal mutable state: The only mutable data is a single uint incrementing on each executionMinimal interface: Interface consists of a single functionCan send arbitrary transactions, so supports tokensThe lack of complex state transitions makes it impossible for the contract to end up in a \u201cfrozen\u201d state with funds inaccessible, such as is described here by Emin G\u00fcn Sirer. Since the only possible state transition is a simple incrementing counter the contract will always be in a correct state. The counter is not likely to overflow since a 32 byte integer is used. Also testing is made easier by the fact that there is only one function to test (apart from the constructor).Since we\u2019ve made the on-chain logic as simple as possible the complexity increases in the off-chain workflow, which leads to the following downsides:Needs the user to sign non-transaction data, which may preclude using some hardware walletsEnd users need to coordinate off-chain in order to send a transactionFuture work: Formal verificationThe simplicity of the contract might make it a good candidate for creating a formal specification and performing a formal verification using that spec\u200a\u2014\u200amathematically proving that the code follows the specification. This may require rewriting the contract in a language where the compilation to EVM has been formally verified as well. Formal verification of the EVM is getting more attention recently with the recent release of a formal semantics for the EVM.Another next step could be to write the simple multisig contract in LLL or even pure EVM bytecode in order to limit risks from the Solidity compiler.SummaryThis post explored a simpler type of multisig Ethereum contract, in which detached signatures are aggregated off-chain before sending them all in one transaction. This simplifies the on-chain smart contract code to make it easier to review and opens the possibility for performing formal verification in the future.Thanks to Nate Rush for suggestions on improving the contract.", "responses": "7"}, {"title": "Connecting Ethereum, EOS, and Tron: Making Blockchain Interoperability a\u00a0Reality", "author_name": "James Martin Duffy", "link": "https://medium.com/loom-network/connecting-ethereum-eos-and-tron-making-blockchain-interoperability-a-reality-e5ef6c67716?source=search_post", "post_date": "Mar 20", "readtime": "11 min read", "upvotes": "2.6K", "content": "Connecting Ethereum, EOS, and Tron: Making Blockchain Interoperability a\u00a0RealityJames Martin DuffyBlockedUnblockFollowFollowingMar 20Before we start, I know\u2026This post is bound to ruffle a few feathers \ud83d\ude1cMost of you reading this probably have one preferred blockchain of choice, and likely think that the other two chains in this list are run by a bunch of [idiots/scammers/insert-your-pejorative-of-choice].That\u2019s totally fine. I\u2019m not going to try to change your mind.But what I hope to do by the end of this article is convince you that linking these chains together is a development that not only was inevitable\u200a\u2014\u200aa natural evolution of the blockchain ecosystem as a whole\u200a\u2014\u200abut also one that will massively benefit the developers and end users of all three chains.That is to say, even if you never choose to use or interact with any of those other blockchains\u200a\u2014\u200athis development is still going to make your chain\u2019s ecosystem richer as a result.Before we get to that, though, let\u2019s back up a bit.What am I even talking about?Over the coming weeks, Loom Network will be releasing integrations for Tron and EOS into PlasmaChain\u200a\u2014\u200aeffectively allowing DApp developers to offer their DApps to users on all three chains simultaneously.And since the question is bound to come up\u200a\u2014\u200ano, we did not receive a penny in funding from these chains for these integrations. We decided building these integrations was the best move forward for Loom (and the DApp ecosystem as a whole), for reasons I\u2019ll outline clearly in this post.First, I want to talk about why we\u2019re building this, followed by what exactly the implications of this are\u200a\u2014\u200awith examples of some really cool features it enables.Then I want to talk about why this is actually going to be massively awesome and beneficial for everyone in the space, and close with some thoughts on where we think this market is going as it continues to evolve.So without further ado, let\u2019s get started with some\u2026Background: Why Are We Building\u00a0This?At Loom, since day one, we\u2019ve always had a focus on developers.Our journey started by building developer tools like EthFiddle, followed by the web\u2019s most popular blockchain code school CryptoZombies. Then came the Loom SDK (which allows developers to easily launch their own customized blockchains for high-scale DApps), and finally PlasmaChain, a shared Ethereum sidechain that runs on DPoS.We\u2019ve even been known to embed a good ol\u2019 Steve Ballmer onstage meltdown into our Medium posts, just to emphasize our love for developers \ud83d\ude09Up until now, all our products have focused exclusively on Ethereum, because Ethereum had (and to this day still has) by far the largest number of developers building on it.That hasn\u2019t changed\u200a\u2014\u200awe still think Ethereum is awesome (and we even wrote an immensely popular article on why we chose to build Loom on it).What has changed is that there are now undoubtedly a good number of developers building DApps on both EOS and Tron in addition to Ethereum\u200a\u2014\u200aand the number of users using EOS and Tron DApps is increasing.We could bury our heads in the sand and pretend like developers aren\u2019t building on these other platforms, and that users aren\u2019t using them.But that isn\u2019t actually the case.A lot of developers we\u2019ve talked to who are building on Loom/Ethereum ARE looking at these other platforms with temptation, due to their increasing user counts.(Developers invest a TON of time and money to build their apps, so it\u2019s not surprising that they want to go wherever the most potential customers are to try to recoup that investment and earn some profit).Most Ethereum users totally write off these other platforms\u200a\u2014\u200ausually due to philosophical differences around consensus algorithms, blockchain governance, or a dislike of their way of marketing or the way they conducted their token sale.But the bottom line is, DApp developers want the maximum number of users possible using their DApps and spending money on their services\u2014 and they\u2019re going to gravitate toward whichever platform offers\u00a0that.At Loom Network, we focus on giving developers what they want.And we thought, what if developers don\u2019t have to choose only one platform and user base to box themselves into for eternity.What if we could offer them the option to access all the users on all the major chains at the same time?What Does This Integration Actually Mean? (And Why This Is Awesome for Developers)Last week, we announced the integration of the top 100 ERC20 tokens into PlasmaChain.This integration included adding a couple pretty significant functionalities:The ability for users to make a purchase transaction on Layer 1 Ethereum, and receive the purchased game item (or other digital asset) on Layer 2. (You can try this in action on our recent Binance promotion to test the user experience for yourself.)The ability for users to sign Layer 2 transactions using only their Ethereum wallet (e.g. MetaMask).This totally seamless integration with Ethereum means that developers building their DApps on PlasmaChain not only get the benefits of 1\u20133 second transaction finality, free transactions, and high transaction throughput\u200a\u2014\u200abut they also get the benefit of every single Ethereum user automatically being able to use their DApp and purchase their digital assets without any additional onboarding friction whatsoever.PlasmaChain literally acts like an extension of the user\u2019s existing Ethereum account, allowing developers to access the entire pool of existing Ethereum users, but also build highly scalable and frictionless DApps that simply couldn\u2019t be built on Ethereum alone.Integrating EOS and Tron takes this a step further\u200a\u2014\u200adevelopers will be able to offer those same DApps (and sell the same digital assets) to Tron and EOS users as\u00a0well.Just like our previous feature release added a seamless PlasmaChain integration for all Ethereum account holders, we\u2019re building out the same functionality for Tron and EOS users.This means Tron and EOS users will be also able to:Purchase items from PlasmaChain DApps/games using their EOS and TRX tokens\u200a\u2014\u200aallowing developers to access a much larger pool of potential customersSign for transactions on PlasmaChain using only their EOS or Tron wallet (like Scatter or TronLink, the MetaMask equivalents on those platforms), seamlessly integrating PlasmaChain into their Layer 1 of choice.In other words, Ethereum, EOS, and Tron users will be able to interact as seamlessly with PlasmaChain DApps as if they were native DApps on each of those platforms.This is clearly great news for DApp developers. It gives them access to the largest pool of crypto users with the least friction possible.Developers can build their DApps once, and export them to all platforms simultaneously\u200a\u2014\u200amuch like how a mobile game developer would build their game once in Unity, and then export it to Android, iOS, Nintendo Switch, etc.Users can access these DApps without leaving the comfort of the DApp ecosystem they\u2019re already familiar with, and pay developers in their preferred currency of choice\u200a\u2014\u200abe it ETH, EOS, TRX, or any ERC20 token.Clearly if such a platform exists, and it\u2019s just as easy to build on, then developers would have to be crazy to NOT want to build on it and access as many users as possible (compared to confining themselves to only the users on one network).Our goal at Loom Network is to give developers that platform.\u2026And this major development will not only benefit developers. It will also massively benefit end users on all chains.How This Will Benefit End Users (On All Three\u00a0Chains)Ok, so interoperability clearly helps developers make more money by accessing more users.But I\u2019m going to make the argument that this doesn\u2019t only help developers make more money\u200a\u2014\u200aintegrating your favorite DApps with these other platforms actually benefits you as a user.To start with, if developers of your favorite DApps are making more money, it means they have more time and resources to invest in improving their products.Developers improving their products means you, the end user, get more value for free. You get better products and services, and the cost of building those improvements is subsidized by these additional users on other chains.So yes, you actually WANT developers to be able to make money from the users on other platforms, even if you passionately hate those other platforms.You also get access to more DApps\u200a\u2014\u200abecause if developers have to choose only one platform to build on, then some percentage of developers will choose one of the platforms you don\u2019t use.If you, like me, only owned one gaming console as a kid\u200a\u2014\u200aonly to have that ONE game you really really wanted to play come out only on another system \ud83e\udd2f\ud83e\udd2c\ud83d\ude2d\u200a\u2014\u200ayou know what I\u2019m talking about \ud83d\ude09On top of that, you have network effects and Metcalfe\u2019s law. For many types of DApps, the more users a DApp has, the more useful it is to each individual user.An easy example of this is an online game. If the game doesn\u2019t have a critical mass of users, you have trouble even finding an opponent to match-make with when you want to play.And especially in a blockchain-based game where you can sell your assets on a P2P marketplace\u200a\u2014\u200ayou want there to be as many users as possible who care about buying your assets, because that means you\u2019ll fetch a higher price for them.When you\u2019re playing a mobile game, you don\u2019t care if your opponent is on Android or iPhone or Nintendo Switch\u200a\u2014\u200ait doesn\u2019t detract from the fun factor. You still get to play the game from within the comfort of your preferred device, and you get plenty of opponents to play against, which is what you really care about.But to address network-specific concerns, let\u2019s take a look at\u2026How this benefits Ethereum\u00a0UsersEthereum currently has the most developers building on it, as well as the most active community of users.Recently other platforms like Tron and EOS have emerged as \u201cthreats\u201d to the Ethereum ecosystem\u200a\u2014\u200ain that a developer who would have built a DApp on Ethereum may be tempted to build it on Tron or EOS instead, due to their growing user counts and transaction volumes.As these platforms grow, more and more developers may start to see them as a potentially more promising source of users and profits.However, if a developer who would have been tempted to build on EOS to access their users had the option to access EOS users AND Ethereum users AND Tron users at the same time\u200a\u2014\u200awhy wouldn\u2019t they choose the latter option?PlasmaChain is an Ethereum Layer 2 that runs Solidity contracts. So if we add these features and are able to give developers the ability to access these additional user pools from within the Ethereum ecosystem, we\u2019re keeping them building value on top of Ethereum, instead of straying elsewhere.If we don\u2019t add these features\u200a\u2014\u200awell, someone else eventually will, and it might not be built on top of Ethereum.And if an EOS or Tron user obtains an Ethereum-based cryptoasset, they may choose to transfer it to Ethereum to use on Ethereum-only marketplaces and services, serving as an additional on-ramp.So regardless of what you may think of these other chains, yes this will actually be a good thing for Ethereum. You will get more DApps and more utility as a result, and the Ethereum ecosystem will continue to thrive.How this benefits Tron and EOS\u00a0UsersThis integration will bring you a lot more things you can do with your EOS or TRX tokens, increasing their token utility.More games, more DApps, more fun and functionality.Though EOS and Tron are growing rapidly, Ethereum still has a huge number of developers committed to building on it and a rich developer infrastructure\u200a\u2014\u200aand this integration will give you access to a lot more of current and future DApps built by those developers.Furthermore, you will get access to those DApps without ever having to leave the comfort of the Tron or EOS ecosystem. You will be able to interact with them using Scatter or Tronlink\u200a\u2014\u200ajust as easily as if they were native Tron or EOS DApps.This integration brings you more DApps, more token utility, more users to play games with and liquidity for trading\u200a\u2014\u200aand it brings it to you, instead of requiring you to sign up for another platform.Why This Move Was Inevitable\u200a\u2014\u200aLessons From Other IndustriesNetwork effects are a real thing.However, it\u2019s exceedingly rare that one player takes ALL the market share in an industry. Typically, there are at least a few key players that the bulk of the market is divided between.Even Amazon, who is an exceptional case and an absolute giant in the e-commerce industry, only controls 50% of the market. The \u201cminor\u201d players like eBay and Walmart still earn billions in revenue and have hundreds of millions of users.Before Loom Network, a large portion of my background was in e-commerce. And I remember when one of my mentors once told me, \u201cAn Amazon customer is an Amazon customer, and an eBay customer is an eBay customer.\u201dThe point he was communicating is that studies have shown that many customers have only one place where they do their online shopping, and a large percentage of them never shop on any other platform. Like blockchain, users are highly fragmented across platforms.As a merchant selling products online, the take-home message here was: if you\u2019re not selling your products on every single one of these platforms, you\u2019re missing out on potential customers and revenue.It\u2019s possible that blockchain is different\u200a\u2014\u200athat one platform will end up taking over 99% of the market and all other platforms will fade into oblivion.But taking lessons from historical markets, it isn\u2019t likely. It\u2019s highly probable that multiple blockchain platforms will thrive, each with their own raving fans and passionate user bases.As users, we tend to fall into camps and use only one platform exclusively. An Ethereum user is an Ethereum user, an EOS user is an EOS user, and a Tron user is a Tron user.But for developers building products, they WILL want the ability to offer their apps and sell their services to the users on every platform.This move to interoperability between all the majors chains is inevitable\u200a\u2014\u200aand at Loom, we intend to capture that market with PlasmaChain.Remember I mentioned owning a gaming console as a kid, only to be pissed when the game you really wanted didn\u2019t get released on your platform?It probably wasn\u2019t the developers fault\u200a\u2014\u200ait would have just been too much work for them to build the same game on multiple disparate platforms, as the tooling didn\u2019t exist to port from one console to another.Luckily, nowadays they have tools like Unity\u200a\u2014\u200awhich allow them develop their game once, and then export it to every single device and console they desire.For mobile games, developers now have a platform they can use to give all users on all platforms access to their games.For blockchain DApps and games\u200a\u2014\u200adevelopers will have Loom Network.And as a user, you benefit most\u200a\u2014\u200abecause at the end of the day this brings way more utility to your platform than you\u2019d have otherwise.", "responses": "9"}, {"title": "Bright Future of Ethereum?", "author_name": "Blockchain Cuties", "link": "https://medium.com/blockchain-cuties/bright-future-of-ethereum-80123e563f3a?source=search_post", "post_date": "Mar 23", "readtime": "2 min read", "upvotes": "6.3K", "content": "Bright Future of Ethereum?Blockchain CutiesBlockedUnblockFollowFollowingMar 23Blockchain Cuties started on Ethereum blockchain. Like most of the games, we enjoyed the smart contracts that this chain can offer to our players.But we never settled. In a quest to bring our players faster and cheaper transactions, we expanded to EOS and TRON blockchains. It brought some new players and also new challenges. However, most of our players still prefer ETH blockchain for their transactions.This is why the latest interview with Ethereum founder Vitalik Buterin brought a huge smile to our faces.Vitalik said that in their work the Ethereum developer team will concentrate on:scalabilityprivacyusabilityTheir main objective is to go from 15 transactions per second to 100 000.Imagine how smooth, fast and cheap gaming process will become. It would be everything we envisioned for the TRON side, but without the need for our players to move assets.But how will they manage to go from 15 to 100\u00a0000?Currently, Ethereum blockchain can process as many transactions as one computer. The idea is to split transactions to randomly selected groups of computers. This blockchain protocol improvement is called sharding.Also in pursuit of scaling Ethereum blockchain, some of the operations will be moved off-chain using cryptographically signed messages. Therefore in most cases, you will not need to put your data on the chain.This is perfect news for all the ETH crypto gamers out there! And we can\u2019t wait to enjoy the fruits of ETH innovation.", "responses": "1"}, {"title": "FAQ How to Participate in BitClave Token sale with\u00a0Ethereum", "author_name": "BitClave", "link": "https://medium.com/@BitClave/faq-how-to-participate-in-bitclave-token-pre-sale-with-ethereum-77e3d7cf6325?source=search_post", "post_date": "Jul 24, 2017", "readtime": "2 min read", "upvotes": "1.2K", "content": "FAQ How to Participate in BitClave Token sale with\u00a0EthereumBitClaveBlockedUnblockFollowFollowingJul 24, 2017How to Contribute with\u00a0ETHThe following post will explain how to join the crowdsale and contribute ETHATTENTION:You CAN send funds from exchanges like Coinbase, Poloniexm, but pay attention and do not contribute from exchanges to Ethereum Smart Contract address.For more information please check the bitclave.com siteYou can use MyEtherWallet, Metamask, Parity, Mist, Jaxx or Ledger (hardware wallet). Again, remember to backup your wallet and store the backup securely! If you don\u2019t, you may permanently lose your tokens. There is no other way to recover your wallet.How to create a secured Ethereum address on MyEtherWalletStep 1Go to https://www.myetherwallet.com, choose a strong password and click on the \u201cGenerate Wallet\u201d button.Step 2Click on the \u201cDownload\u201d button. You just have downloaded a copy of your wallet on your computer. Now store this file securely. Read the important message carefully, then click on the \u201cI understand. Continue\u201d button.Step 3We strongly recommend you to print a paper wallet. For this, click the \u201cPrint\u201d button.Copy the \u201cPrivate Key (unencrypted)\u201d in your clipboard (Ctrl-C).Step 4Now click on \u201cSave your address\u201d button in order to unlock your wallet. Select the second option from the list \u201cPrivate Key\u201d.Paste your \u201cPrivate Key\u201d that was selected before. You can now see the wallet and your public Ethereum address (that will receive the RLC tokens).You now have a secured Ethereum address! Remember this address, you will use it to participate on the crowdsale web site.Step 5. Pay with\u00a0ETHGo to https://fundraiser.bitclave.comAccept terms and conditions by checking the tick and click on \u201ccontribute now\u201dCopy address.Using your wallet of convenience, send to this address the amount of Ethers you want send.You\u2019re done!", "responses": "4"}, {"title": "On the Ethereum hard\u00a0fork", "author_name": "Brian Armstrong", "link": "https://blog.coinbase.com/on-the-ethereum-hard-fork-780f1577e986?source=search_post", "post_date": "Jul 27, 2016", "readtime": "7 min read", "upvotes": "152", "content": "On the Ethereum hard\u00a0forkBrian ArmstrongBlockedUnblockFollowFollowingJul 27, 2016It\u2019s been an exciting few weeks in digital currency. Ethereum went through its hard fork, and Coinbase finally announced support for it.I think it\u2019s safe to say we underestimated the attention that the minority chain would get as a result of the hard fork.This meme made the rounds today on reddit, poking fun at my tweets, which I have to say was pretty well done\u00a0:)I thought it might be interesting for people to see some of the behind the scenes of how we thought about the hard fork, both before and after it happened.Leading up to\u00a0launchThe Coinbase team had been hard at work for a number of months, getting ready to launch support for Ethereum. And our original launch date was set to be July 19th, 2016.As we got closer to the launch date, it became clear that Ethereum was planning their hard fork right after that (on the 20th). Originally, I was all for launching on the 19th. I was ready to get into the Ethereum game as quick as we could (I felt like we were late), especially if we could find a safe way to operate through the fork. But based on the advice of the team (Charlie Lee in particular) we decided to push the launch until after the hard fork to be safe. This turned out to be a good decision (which I\u2019ll get to later).We also discussed the possibility of replay attacks at that time. A number of other exchanges had created smart contracts to separate out ETH and ETC as it was withdrawn (I have to give credit to them for being ahead of us on this) and we considered delaying launch to set up something similar. But we knew the vast majority of Ethereum was stored in cold storage (where it would be safe from replays) if ETC ever became real. In addition, the price of ETC would be low and we figured a minority (roughly equal to the hashing power %) of users would be interested in obtaining it.We were comfortable with that, so we decided to go ahead and launch.LaunchThe launch went well. About $1M in Ethereum traded in the first 24 hours, and we were off to the races.Over the coming week, as we expected, some replay attacks started to show up. And the ETC chain got a bit more attention that I anticipated. I originally thought it would get 1% or less (both in hashing power and price). But it ended up getting closer to 15%.We\u2019d now had some more time to think through what our policy would be regarding ETC, and we started getting a number of emails from customers asking about it.For Coinbase, the decision was fairly easy. Since we had launched after the Ethereum hard fork, there were no customers who had ever had \u201cpre-fork\u201d ether stored with us. We had also never announced support for ETC so we didn\u2019t feel there was any expectation of customers being able to retrieve it. We put out an official statement here to provide some clarity to customers, and make it explicit that they should not transfer ETC to Coinbase.For GDAX, our exchange for professional traders, the decision was a bit more difficult. Since GDAX had added Ethereum support prior to the hard fork, there were some customers storing ether there who may have wanted to get access to ETC as well. We had never made any announcement about supporting ETC, but we also felt like it wouldn\u2019t be right to deprive them of that option if they wanted to move their ETC off the site (since they had moved it prior to the hard fork). First, we began work to nullify the replay attacks. Even though the vast majority of funds were protected in cold storage and we owned sufficient ether (and it\u2019s corresponding ETC) to cover what was in the hot wallet, we didn\u2019t want this to continue long term. We also went to work on building a feature for GDAX customers (who had a balance prior to the hard fork) to withdraw their ETC. We didn\u2019t have any plans to support ETC long term, so we made it clear that customers should not send any additional ETC there for trading. Official statement here.So was Ethereum\u2019s hard fork a\u00a0success?I think the experiment is still being run. It certainly was not as clean as it could have been, but there were some positives as well.Someone more eloquent than I summed it up nicely earlier today:A persistent chain split is bad, all else being equal (loss of network effect)However, the combined value of ETH + ETC is now higher than it was pre-fork (so all else is not equal)When there are irreconcilable differences, it probably makes sense to split, and you\u2019ll get a net gainIf ETC persists, there is nothing wrong with that. I\u2019m not ideologically opposed to there being multiple coins. People should be able to create whatever options they want in the world. And if there is genuine interest in ETC, I don\u2019t see why we wouldn\u2019t add it in the future. But I also don\u2019t think it offers anything particularly compelling at the moment. The fact that Ethereum did a hard fork to recover funds from an attack sets a precedent for all digital currencies, not just one chain. Forking does not undo this.I didn\u2019t have a strong opinion either way on the reason for this particular fork (The DAO hack, I can see it from both perspectives)\u200a\u2014\u200aI\u2019m more interested in hard forks as a general concept, and how they will be used (or not used) as digital currency evolves.I do think it\u2019s safe to say that my estimates regarding hard forks were wrong in this case, and I probably deserve to be made fun of by the internet for that\u00a0:) I would have guessed that within a few hours, the minority fork would be trading at less than 1% of hashing power, and price. Clearly this didn\u2019t happen. According to Vitalik, a substantial portion of people buying ETC where bitcoin small blockers. I have no first hand knowledge if this is true, but if so it is an interesting outcome that I didn\u2019t anticipate. Someone should have taken me up on my bet (I would have lost if this had happened in bitcoin).It could turn out that I\u2019m directionally correct, but I was wrong on the timeline. Will ETC fade in the next month? Year? Only time will tell.I will say that I\u2019m glad we got to see a hard fork in action. I think the Ethereum developers learned a lot from the experience, and future hard forks will probably improve on this one to avoid the issue of replay attacks. I admire their willingness to move fast and ship code, even if it isn\u2019t always perfect. I love the saying \u201caction produces information\u201d. In the end, nothing happened that we can\u2019t recover from, and I think the Ethereum network will continue growing\u200a\u2014\u200aso in that sense it was a success.ConclusionI always prefer to look at digital currency from a long term perspective. I\u2019m much less concerned about the ups and downs of any given week, month, or year. I don\u2019t even care which currency ultimately \u201cwins\u201d (there will probably be multiple winners). The end state of the world I want to see is one with an open financial system for the world, where everyone has equality of opportunity around financial services. That vision will probably take 10+ years to be realized, and I want to help it happen as quickly as possible. Most of the decisions we make at Coinbase and GDAX are in furtherance of this goal. For example, I prefer to get digital currency in the hands of more people, than to argue over which one is best.To create an open financial system, we have a long way to go. We\u2019ve reached less than 1% of the people on the planet who could benefit from digital currency today. Most people don\u2019t have any idea what digital currency is, much less what the difference is between ETH and ETC. They just want to send money home to their family in another country, sell their products to more customers, or be able to get a loan for their business.I\u2019m glad to see that the industry is continuing to evolve quickly. It feels like digital currency has picked up steam in the last 6 months (we probably hit the low point in the trough of the gartner hype cycle about 6 months ago) and we\u2019re now trending up. \u201cBlockchain\u201d as a concept is probably a bit earlier in the cycle (near the peak and due for a correction, if I had to guess), but it will have it\u2019s own resurgence after falling. I\u2019m looking forward to many more interesting moments along the way.", "responses": "15"}, {"title": "Ethereum ERC20 Tokens Explained", "author_name": "James Seibel", "link": "https://medium.com/@james_3093/ethereum-erc20-tokens-explained-9f7f304055df?source=search_post", "post_date": "Jul 21, 2017", "readtime": "2 min read", "upvotes": "781", "content": "Ethereum ERC20 Tokens ExplainedJames SeibelBlockedUnblockFollowFollowingJul 21, 2017Over the past 6 months, Initial Coin Offerings (ICOs) on the Ethereum blockchain have exploded, with $800 million raised in 2017 so far. This follows the dramatic rise in the value of Ether from $10 last July to a high of $395 last June (it has since fallen to approximately $220).It\u2019s impossible to say precisely what has driven up the value of Ether, but likely it is a combination of the Ethereum Enterprise Alliance adding big name members from diverse industries, such as Microsoft, MasterCard, J.P. Morgan, and the Indian government, as well as excitement from ICOs.One critical innovation in the creation of Ethereum-based tokens is the ERC20 protocol standard.Similar to how the HTTP protocol defined the internet, ERC20 is a protocol that defines a set of commands that a token should implement. ERC20 is not a technology, software, or piece of code. It is a technical specification. If a token implements the spec, it is an ERC20 token.The ERC20 protocol standard contains basic functions that any useful token should implement to enable trading. These include transferring tokens, inquiring the balance of tokens at a certain address, and the total supply of tokens.Before ERC20, every ICO token (implemented as an Ethereum \u201csmart contract\u201d) re-invented the wheel by implementing their own versions of these basic functions. They would have their own function for transferring tokens, with its own unique name and perhaps different arguments. If a developer wanted to enable trading between Token A and Token B, he or she would need to study the intricacies of each contract to allow the trade. If there were tokens A through Z, and each token implemented transferring tokens differently, then to implement a basic token exchange that could handle every token contract would require an exponential amount of complexity.ERC20 compliant tokens all have the same functions, with the same names, that take the same arguments. You can create a token exchange system that allows you to quickly add new tokens to your platform the moment they are released, as long as they follow the ERC20 standard. No matter how many different tokens there are, the same system can support trading between Token A and B, A and C, A and Z, Z and M, etc.The end result is less risk, more uniformity, reduced complexity, and enhanced liquidity of tokens. A successful ICO can have their ERC20 tokens trading on exchanges without any communication between themselves and the exchange developers. ERC20 has encouraged a positive feedback loop, as token purchasers can be more certain that they can trade new ICO tokens, leading them to purchase more ICO tokens, causing more ICO\u2019s to be created, and ultimately more innovation and value in the Ethereum blockchain.", "responses": "4"}, {"title": "State of Ethereum Protocol\u00a0#1", "author_name": "Ben Edgington", "link": "https://media.consensys.net/state-of-ethereum-protocol-1-d3211dd0f6?source=search_post", "post_date": "Aug 28, 2018", "readtime": "8 min read", "upvotes": "1.6K", "content": "State of Ethereum Protocol\u00a0#1Ben EdgingtonBlockedUnblockFollowFollowingAug 28, 2018A look through all that has been happening in Ethereum\u2019s \u201cYear of Scalability\u201d and progress made on the path towards Ethereum 2.0.Scalability\u200a\u2014\u200athe Story so\u00a0FarFrom the start of 2018, it was clear that the theme of the year would be \u201cscalability.\u201d On January 2nd, the Ethereum Foundation made a call for applications for grants to be awarded to researchers and developers working on massively increasing the transaction processing capability of the network. And in a presentation on March 4th, titled \u201cThe Road Ahead for 2018,\u201d Vitalik said \u201cFor 2018 we really believe that scaling is the primary focus.\u201dSo, what\u2019s been happening so far in 2018, in the \u201cYear of Scalability?\u201dAs outlined in the EF\u2019s call for applications, there are two complementary approaches to increasing the processing capacity of the Ethereum system. Layer 1 is the \u201con chain,\u201d protocol layer: how can we fundamentally increase the capacity of the Ethereum blockchain? Layer 2 covers \u201coff chain\u201d solutions in which most transactions are not recorded on the blockchain. Nonetheless, the underlying blockchain remains able to guarantee the safety and security of Layer 2 systems.In this series of posts, I will be bringing you up to date with developments at the Layer 1 protocol level, and my colleague Kevin Zhang will be explaining the latest research and development on Layer 2 scalability.The Issue: The Need for\u00a0SpeedThe Ethereum network has become more successful than perhaps anyone could have anticipated in such a short time. The chart below shows the percentage of maximum capacity that Ethereum has been running at since its inception. After a couple of years of running at low capacity (give or take some spikes around the DAO hack and the network spam attacks of summer 2016), utilisation has been at over 80% for much of 2018, with over 96% average utilisation on a few days this year.Average block utilisation of Ethereum. Source: etherchain.orgThis huge demand has sometimes resulted in undesirable user experience issues such as lengthy waits to get transactions included in the chain and volatile transaction fee (gas) prices.Massive scalability\u200a\u2014\u200athe ability to process thousands of transactions per second rather than the the current 15-or-so tps\u200a\u2014\u200ahas long been part of the plan for Ethereum. The approach to implementing this has become known as \u201csharding.\u201d Currently, like all other blockchain platforms presently in public release, every node in the Ethereum network processes every transaction, which is a huge limitation. In the sharded network, transaction processing and the associated storage (the state) are split into separate, independent shards, so that each node only needs to handle a fraction of the total system load. This sounds fairly straightforward. The real challenge is to do this while maintaining the full security of the network: if we have a thousand shards, say, how do we avoid making a network attack a thousand times easier?Taipei, March 2018: Building the Sharded\u00a0NetworkAt the start of 2018 a specification for a sharded Ethereum protocol already existed and had been reasonably stable for a while. On the basis of this spec, a workshop was planned for March 2018 in Taipei City, Taiwan, to bring together all the parties planning to work on implementing sharding within the various Ethereum clients. As the workshop approached, the pace of research activity accelerated, when\u2026 BOOM\u2026three days before the workshop, a brand new outline spec was published, brimming with new ideas and ambition.So, with much to digest on the long plane journey from Europe, Nicolas Liochon, also from PegaSys/ConsenSys, and I set out towards Taipei for the inaugural meetup of the global sharding community.A Sharding Architecture and Wider InnovationAttendees at the inaugural sharding workshop in Taipei. Photograph by Jason\u00a0Yeh.It was great to see the strength of the teams represented in Taipei. Among the participants:The Ethereum Foundation research team, of course. Much of the thought-leadership in sharding research is coming from Vitalik and Justin Drake, as well as others like Hsiao-Wei Wang, Karl Floersch, and Vlad Zamfir.The Geth client development team.The Parity and Web3 foundation teams.The Trinity (Py-EVM) team, also from the Ethereum Foundation.A team from Status developing a mobile client in the Nim language.The Prysmatic Labs team\u200a\u2014\u200aworking on a sharding implementation in Go.Other individual researchers such as Phil Daian and Leonardo Bautista-Gomez.The workshop discussion ranged far and wide over the three days.On the sharding front, we had in-depth discussion of the concepts from the new specification. As an example, in today\u2019s Ethereum network, every node is responsible for three distinct functions: (1) participating in consensus on ordering transactions, (2) executing those transactions to update the state, and (3) making those transactions and the updated state available to the rest of the network (data availability). In a sharded network, these functions could be split among different participants so as to optimize various features of the network as follows:Proposer nodes could be responsible for assembling transactions into blocks which they propose as the canonical history.Collator nodes check that the data in the blocks offered by proposers is available and then add them to the shard\u2019s blockchain.Executor nodes could be responsible for updating clients on the state of the blockchain (e.g. their account balances) on demand. This allows for a kind of \u201clazy evaluation\u201d in which only calculations related to data that is actually needed are executed, and also perhaps for \u201calternative execution engines.\u201dThis is quite different from today\u2019s Ethereum Mainnet, but something like this is likely necessary in order to balance efficiency and security in a network where not every node can be a client of every shard. In order to maintain efficiency, the idea is that proposer and executor nodes could remain synced with a small number of shards, but in order to maintain security, the collator nodes (which actually write to the blockchain) can be shuffled between shards quite frequently. This avoids shard-takeovers by a small subset of participants.We also discussed the various infrastructure needed to make all this work, the shard manager contract, stateless clients, and the peer-to-peer network layer, among other things.In addition to working on the scalability infrastructure, it was also clear that there is a significant pent-up demand for innovation on Ethereum, unrelated to scalability. Perhaps the implementation of sharding could be a chance to bring in some other big innovations. So we also spent time on other long-standing topics like the replacement of the Ethereum Virtual Machine (the EVM) with eWasm, older topics like account abstraction, and controversial ideas like storage rent.Berlin, June 2018: Sharding Meets Proof-of-StakeMany of the concepts discussed in Taipei were very new, and teams continued to evaluate them after the workshop. Over the following weeks, a couple of trends emerged. First, that there were some weaknesses with the specifics of the proposals discussed (we published one critique). Second, there were some very interesting developments on other fronts, most notably in cryptography, that could enable a big refactoring of the sharding model without losing efficiency or security.With all the new developments to discuss, it was time to hold another sharding workshop. This time, we were kindly hosted in Berlin in June 2018 by the team from Status as part of the client developers\u2019 conference they organized.We were happy to be unexpectedly joined at the workshop by the Casper FFG (proof-of-stake) team. During the three or four weeks leading up to the event, another huge change to the specification had been proposed: why don\u2019t we build Sharding and Casper together on a common platform?It was becoming evident that some of the new Sharding design choices had commonalities with the planned Casper FFG work that had been progressing independently (as per the now abandoned EIP-1011). Both require validator deposits (stakes), both rely on access to random numbers, both have fault proofs and slashing mechanisms, both make use of aggregate signatures. In view of these commonalities, it was proposed that both Sharding and Casper be built on a common infrastructure known as the Beacon Chain. An additional advantage would be taking the work of running Casper and Sharding off the existing Mainnet, which might struggle to sustain the extra load.Discussions in Berlin confirmed that we all agreed that this was a positive and practical approach to getting both projects delivered.Beyond the project planning, once again, a wide range of new ideas were discussed at the workshop. We had sessions on new cryptographic primitives such as zkSTARKs and alternative hash functions, we discussed proofs-of-custody, and we looked at options for random number generation, with the current front-runner being a RANDAO with a verifiable delay function (VDF).Today: Towards Ethereum\u00a02.0So where does all this leave us in August 2018?I hope you get a sense from the above that these last six months have seen an explosion in research into scaling Ethereum, and to a large extent the dust has yet to settle.But the general direction is clear. Development and delivery of both Sharding and Proof of Stake will take place on a new blockchain platform (Ethereum 2.0), coupled back to the current Main Chain which will continue to run as-is.Anatomy of Ethereum 2.0. Diagram by Hsiao-Wei Wang.Building on a new platform like this, the Beacon Chain, allows us to introduce huge innovation unlimited by the constraints of today\u2019s Mainnet, and, crucially, without having to do open heart surgery on the currently running network. Timelines are quite speculative, but expectations are that the beacon chain (the coordination layer, including Casper FFG) will be implemented during 2019, the Shard Chain (data layer) in 2020, and the execution layer in 2021.Some of these innovations I\u2019m hoping to explore in much deeper detail in future updates, but in summary, for Ethereum 2.0, we\u2019re looking at new consensus mechanisms, new crypto-economic models, new execution engines such as eWASM (and possibly, even, delayed execution), and new cryptographic primitives.To quote Vitalik from the first sharding workshop, \u201cEthereum 1.0 is a couple of peoples\u2019 scrappy attempt to build the world computer; Ethereum 2.0 will actually be the world computer.\u201dFind Out More & Get Involved!As mentioned above, I hope to go deeper into some of these innovations in future articles.Meanwhile, here\u2019s a high-level reading list if you want to do some digging yourself. But beware, things are moving swiftly, and some of the details are already out of date.Hsiao-Wei\u2019s presentation is a great start, and has pointers to much other material.I\u2019ve collated a few topics, again with some links out to other sources.An insightful presentation from Vitalik.The nearest thing to a spec that we currently have (there\u2019s lots missing here yet).Anything recent on ethresear.ch under sharding or casper is likely to be relevant.The Sharding FAQ is good background.The Proof-of-stake FAQ is also useful.Prysmatic Labs publish regular updates on their work.If you really want to get into the weeds, regular ETH2.0 Implementers Calls have recently begun every two weeks, including a bunch of new teams working on implementations. These are live cast to YouTube, and there\u2019s a Gitter channel as well. Also, ConsenSys is hiring protocol and sharding engineers within the PegaSys team.Disclaimer: The views expressed by the author above do not necessarily represent the views of Consensys AG. ConsenSys is a decentralized community withConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": "1"}, {"title": "How to read Ethereum contract\u00a0storage", "author_name": "Darius", "link": "https://medium.com/aigang-network/how-to-read-ethereum-contract-storage-44252c8af925?source=search_post", "post_date": "Sep 14, 2017", "readtime": "3 min read", "upvotes": "845", "content": "How to read Ethereum contract\u00a0storageDariusBlockedUnblockFollowFollowingSep 14, 2017Everybody is talking that data in contracts are public, but not everybody knows how to read it.All contracts deployed to ethereum VM has dedicated storage where stores state. Here is an example how to read this storage with the web3.js library using eth.getStorageAt() method.Contract example which we examine:This contract is deployed in ropsten test net: at 0xf1f5896ace3a78c347eb7eab503450bc93bd0c3bAll parameters in the storage are indexed from the beginning. One index takes 256 bytes ant it fits 64 symbols. In this example, we have 10 parameters and we can iterate them:let contractAddress = '0xf1f5896ace3a78c347eb7eab503450bc93bd0c3b'for (index = 0; index < 10; index++){ console.log(`[${index}]` +    web3.eth.getStorageAt(contractAddress, index))}result:[0] 0x000000000000000000000000000000000000000000000000000000000000000f[1] 0x00000000000000000000000059b92d9a0000000000000000000000000000429f[2] 0x0000000000000000000000000000000074657374310000000000000000000000[3] 0x7465737431323336000000000000000000000000000000000000000000000000[4] 0x6c65747320737472696e6720736f6d657468696e67000000000000000000002a[5] 0x0000000000000000000000000000000000000000000000000000000000000000[6] 0x0000000000000000000000000000000000000000000000000000000000000000[7] 0x0000000000000000000000000000000000000000000000000000000000000002[8] 0x0000000000000000000000000000000000000000000000000000000000000002[9] 0x0000000000000000000000000000000000000000000000000000000000000000Let`s have a deeper look into each parameterIndex 0\u200a\u2014\u200astoreduint1let contractAddress = '0xf1f5896ace3a78c347eb7eab503450bc93bd0c3b'let index = 0console.log(web3.eth.getStorageAt(contractAddress, index))console.log('DEC:' + web3.toDecimal(web3.eth.getStorageAt(contractAddress, index)))result:0x000000000000000000000000000000000000000000000000000000000000000fDEC:15constuintConstants are not stored in a storage. Available only in code.Index 1\u200a\u2014\u200ainvestmentsLimit, investmentsDeadlineTimeStamplet index = 1console.log(web3.eth.getStorageAt(contractAddress, index))result: 0x00000000000000000000000059b92d9a0000000000000000000000000000429fDEC:  1505308058   and  17055In index 1 is merged 2 properties to optimize storage usage.index 2\u200a\u2014\u200astring1index = 2console.log(web3.eth.getStorageAt(contractAddress, index))console.log('ASCII: ' + web3.toAscii(web3.eth.getStorageAt(contractAddress, index)))result: 0x0000000000000000000000000000000074657374310000000000000000000000ASCII: test1index 3\u200a\u2014\u200astring2index = 3console.log(web3.eth.getStorageAt(contractAddress, index))console.log('ASCII: ' + web3.toAscii(web3.eth.getStorageAt(contractAddress, index)))result:0x7465737431323336000000000000000000000000000000000000000000000000ASCII: test1236index 4\u2014\u00a0string3index = 4console.log(web3.eth.getStorageAt(contractAddress, index))console.log('ASCII: ' + web3.toAscii(web3.eth.getStorageAt(contractAddress, index)))result:0x6c65747320737472696e6720736f6d657468696e67000000000000000000002aASCII: lets string something         * (42)End symbol 2a (dec 42) is length of the stored string. (more details http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage)index 5\u200a\u2014\u200auints1index = 5console.log(web3.eth.getStorageAt(contractAddress, index))result:0x0000000000000000000000000000000000000000000000000000000000000000PROBLEM!!!!Mappings have a different indexation and should be read in other way. To read mapping value you should know the key value. Otherwise, read mapping value is impossible.index = '0000000000000000000000000000000000000000000000000000000000000005'key =  '00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6'let newKey =  web3.sha3(key + index, {\"encoding\":\"hex\"})console.log(web3.eth.getStorageAt(contractAddress, newKey))console.log('DEC: ' + web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))result:0x0000000000000000000000000000000000000000000000000000000000000058DEC: 88index6\u200a\u2014\u200astructs1index = \"0000000000000000000000000000000000000000000000000000000000000006\"key =  \"00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6\"let newKey =  web3.sha3(key + index, {\"encoding\":\"hex\"})console.log(web3.eth.getStorageAt(contractAddress, newKey))console.log('ASCII: ' + web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))result:0x6465766963654272616e64000000000000000000000000000000000000000016ASCII: deviceBrandTo read second struct value you need to increase newKey value by 1function increaseHexByOne(hex) { let x = new BigNumber(hex) let sum = x.add(1) let result = '0x' + sum.toString(16) return result}index = \"0000000000000000000000000000000000000000000000000000000000000006\"key =  \"00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6\"let newKey =  increaseHexByOne(  web3.sha3(key + index, {\"encoding\":\"hex\"}))console.log(web3.eth.getStorageAt(contractAddress,newKey))console.log('ASCII: ' + web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))result:0x6465766963655965617200000000000000000000000000000000000000000014ASCII: deviceYearIf you want third struct value increase newKey once more.index 7\u2014 uintarrayindex = \"7\"console.log(web3.eth.getStorageAt(contractAddress, index))result:  0x0000000000000000000000000000000000000000000000000000000000000002This array has 2 itemsindex = \"0000000000000000000000000000000000000000000000000000000000000007\"let newKey = web3.sha3(index, {\"encoding\":\"hex\"})console.log(web3.eth.getStorageAt(contractAddress, newKey))console.log('DEC: ' +  web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))result:0x0000000000000000000000000000000000000000000000000000000000001f40DEC: 8000newKey = increaseHexByOne(web3.sha3(index, {\"encoding\":\"hex\"}))console.log(web3.eth.getStorageAt(contractAddress, newKey))console.log('DEC: ' +  web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))result:0x0000000000000000000000000000000000000000000000000000000000002328DEC: 9000index 8\u2014 deviceDataArrayindex = \"0000000000000000000000000000000000000000000000000000000000000008\"let newKey = web3.sha3(index, {\"encoding\":\"hex\"})console.log(web3.eth.getStorageAt(contractAddress, newKey))console.log('ASCII: ' + web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))result:0x6465766963654272616e64000000000000000000000000000000000000000016ASCII: deviceBrandindex = \"0000000000000000000000000000000000000000000000000000000000000008\"let newKey = increaseHexByOne(web3.sha3(index, {\"encoding\":\"hex\"}))console.log(web3.eth.getStorageAt(contractAddress, newKey))console.log('ASCII: ' +web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))result:0x6465766963655965617200000000000000000000000000000000000000000014ASCII: deviceYearIncrease by 2 result:0x776561724c6576656c0000000000000000000000000000000000000000000012ASCII: wearLevelIncrease by 3 you enter to second item into array result:0x6465766963654272616e64320000000000000000000000000000000000000018ASCII: deviceBrand2Sources:https://github.com/ethereum/solidity/issues/1550https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getstorageathttps://ethereum.stackexchange.com/questions/13910/how-to-read-a-private-variable-from-a-contracthttps://github.com/ethereum/web3.js/issues/445Check out our testing ground\u200a\u2014\u200aAigang!More about Aigang\u200a\u2014\u200ahttp://bit.ly/AigangWebsiteAigang Whitepaper\u200a\u2014\u200ahttp://bit.ly/2hwAtktAigang on Telegram\u200a\u2014\u200ahttp://bit.ly/AigangTelegramGet Aigang Latest Updates\u200a\u2014\u200ahttp://bit.ly/AigangUpdates", "responses": "11"}, {"title": "", "author_name": "Vitalik Buterin", "link": "https://medium.com/@VitalikButerin/regarding-bitcoin-and-ethereum-dev-and-client-decentralization-i-think-those-four-graphs-miss-two-5a21c39ba298?source=search_post", "post_date": "Jul 28, 2017", "readtime": "2 min read", "upvotes": "531", "content": "Vitalik ButerinBlockedUnblockFollowFollowingJul 28, 2017Regarding Bitcoin and Ethereum dev and client decentralization, I think those four graphs miss two points:Many of the so-called \u201calternative Bitcoin clients\u201d are in fact forks of the same codebase as Bitcoin Core, whereas all Ethereum implementations have fully separate codebases created from scratch. So it\u2019s not clear that Core and BU should count as two fully separate clients.Ethereum doesn\u2019t really have the concept of a \u201creference client\u201d. If you take the literal meaning of \u201cclient that people refer to to improve their understanding of protocol rules\u201d, then in many cases that\u2019s actually pyethereum because python is easier to read. The C++ client is the client that generates the test suites. So counting commits to Geth imo understates the decentralization of the ecosystem.This is only to illustrate how subtle the notion of a \u201csubsystem\u201d is. During last year\u2019s DoS attacks, there were days during which Geth was unusable, and most people just switched over to Parity. So there are subsystems that are not quite critical but also not quite negligible.I also think you missed another reason why Gini indices are a bad idea: whereas in the real world, Gini indices are typically used to measure wealth inequality between full-time residents of a country, and so actually measure inequality of outcome, in the crypto space inequality between accounts can come from two sources: (i) disparities between different users\u2019 ability to prosper in the system at a given level of participation, and (ii) disparities in the extent to which they are participating. The Gini index of cello production across the world population is likely above 0.99, but for obvious reasons nobody cares. In the case of mining and wealth, the problem is that there is such a long tail of very slightly interested amateur contributors that the Gini index likely ends up measuring artefacts of the cutoff of where one particular source of data started counting users more than anything else. So looking at the Nakamoto coefficient, or similar measurements like the share of the top100, is definitely superior.", "responses": "6"}, {"title": "Privacy Preserving Identity System for Ethereum\u00a0dApps", "author_name": "Michael Sena", "link": "https://medium.com/uport/privacy-preserving-identity-system-for-ethereum-dapps-a3352d1a93e8?source=search_post", "post_date": "Apr 26, 2018", "readtime": "10 min read", "upvotes": "1.1K", "content": "Privacy Preserving Identity System for Ethereum\u00a0dAppsMichael SenaBlockedUnblockFollowFollowingApr 26, 2018uPort makes it easy for Ethereum developers to offer improved privacy to their users.[image]The attributes that make blockchain best for identity also make it worst for identity. The market is becoming flooded with \u201csimple\u201d identity options that crush the promise of user privacy on Ethereum.At a time now more than ever, with privacy violating events dominating headlines around the world and GDPR coming into effect this month, developers should be conscious about how they are handling user\u2019s data.Developers should choose an identity provider that is simple, but one that values user privacy, and actively works to preserve this system value. Privacy-preserving systems like this require years of design and testing. uPort is proud to share its approach to user privacy on Ethereum here.Warning! The Blockchain is\u00a0Forever[image]The blockchain is public and permanent. While these are two generally desirable properties of blockchains, they provide a significant challenge to building a privacy-preserving user identity management system. We must ensure our system is not only secure and private today, but also decades into the future. Users cannot reasonably be expected to know best practices for how to manage their data, or what it means to store their information on the blockchain, so it\u2019s up to us to protect them.Modern decentralized identity systems utilize a credentials-based model of identity. This model expresses identity attributes as a collection of individual data credentials. Credentials can be used to cryptographically express things such as name, birthdate, membership, reputation, and even proof of being human. Thus the fundamental purpose of any decentralized identity provider is to handle the world\u2019s most personal data.When considering between various open source identity standards on Ethereum, developers should consider user privacy amongst their non-negotiable requirements. We consider it the most important facet of a self sovereign identity system, and a topic we have been thinking about for some time now.Deciding between identity solutions? Ask two privacy questions.Does it offer off-chain, in addition to on-chain, user data storage options?Does it minimize correlation risk for my users?[image]Ethereum Risk #1: On-Chain Data is a Permanent TargetYou have to assume that blockchain identity systems that store users\u2019 personal identity credentials on-chain are going to be targeted by malicious actors today and into the future. Yes, this is still a concern even if you encrypt the data and then store it on-chain. We think it\u2019s a reasonable expectation to assume that computing power will increase to the point of being able to crack modern popular cryptography within a window of provider liability. This means that every piece of user data ever stored on-chain, will be publicly exposed for the world to see and act on. If this occurs, it could be disastrous for businesses and applications that promoted this negligent pattern.Malicious actors with supercomputers will stripmine the blockchain for users\u2019 PII.\u00a0[image]Ethereum Risk #2: On-Chain Actions are CorrelatablePublic blockchain ledgers are available for all to read and analyze. This makes blockchains a very easy database for static analysis. The rise of machine learning and supercomputers have made it trivial to draw robust conclusions about the identity of an individual by correlating a few simple pieces of data that can be attributed to a common identity. Malicious actors can easily track your public data and public actions back to a common identity.Correlation in identity systems occurs by tracking the actions or events taken by a single identity across the network, by tracking the publicly available data about that identity found on the network, and by looking to draw strong links between this identity and other identities on the network. This analysis technique can be used to estimate a user\u2019s identity with a very high probability.[image]It is important to understand that correlation extends beyond simple user data. Instead, we should consider ways to minimize the correlation of a user\u2019s on-chain smart contract interactions between different dapps, since looking at activity is a very easy way to correlate the identity of an individual.To combat this very difficult problem inherent in public ledger-based decentralized systems, we need to design identity systems that reduce the number of data points that can be connected to each other through deep analysis of the public ledger.To highlight this problem, let\u2019s look at a simple example:Alice creates a MetaMask account and funds it with ETH. She logs into a prediction market and places a bet on a market. Then, she needs to use a government dapp to vote in a local political election with her blockchain identity. She logs in with her MetaMask and casts her vote.This creates an immediate problem for Alice. Unbeknownst to her, prediction markets are illegal in her country. Ignorant of the risks associated with using prediction markets, and lacking a proper understanding of blockchain technology, Alice has unknowingly exposed herself to the authorities.Because Alice voted on an illegal prediction market, and then used that same identity in her local election, she is exposed because her actions are extremely simple to correlate across these two dapps.This point about simple correlation makes it extremely difficult to design blockchain-based systems that give users simple control over their identity, but that also protect their privacy and respect their right to be forgotten. Identity systems should strive to preserve user privacy, and by extension, combat correlation. Oh, and they need to be simple.[image]", "responses": "7"}, {"title": "Ethereum Blockchain \u201cHello World\u201d Smart Contract with\u00a0JAVA", "author_name": "Thushara Jayasinghe", "link": "https://medium.com/coinmonks/ethereum-blockchain-hello-world-smart-contract-with-java-9b6ae2961ad1?source=search_post", "post_date": "Jun 20, 2018", "readtime": "18 min read", "upvotes": "937", "content": "Ethereum Blockchain \u201cHello World\u201d Smart Contract with\u00a0JAVAThushara JayasingheBlockedUnblockFollowFollowingJun 20, 2018EthereumThis tutorial cover the complete set of steps needed to develop your first smart contract in a private Ethereum node using web3j Java framework.Blockchain is disrupting software industry. The term blockchain has become a popular topic. Everyone is talking about blockchain and its usages in decentralized applications. But most of the time the underline concept of a blockchain is misinterpreted. Let us try to understand it in simple terms. Blockchain can be considered as a database technology which is used to store data in a distributed manner. It uses hashing algorithms to maintain the integrity of data which is very much similar to Git. Every node in block chain will have its own copy of the data store. The manipulation of records in the data store is prevented by a proof of work algorithm.Processing nodes are connected peer-to-peer and will work autonomously. This enable the elimination of third party player such as banking system the middle of a transaction to manage the risk. Cryptocurrency such as Bitcoin is an example usage of blockchain technology. But it is not limited to Cryptocurrency.BlockchainThe purpose of the blockchain technology is to eliminate the need of having a middle man to facilitate financial transactions. In a typical payment system a bank or a financial institution will minimize the risk of the transaction by acting as a middle man.Typical transaction flowBlockchain technology facilitates payments without a middle player. For example you can transfer digital money from your account to your supplier account without the help of paypal or any other third party payment provider functionalities. So blockchain is simple as that.Direct peer-to-peer transactionDefinition\u00a0: A blockchain is a peer-to-peer distributed ledger forged by consensus, combined with a system for \u201csmart contracts\u201d and other assistive technologies. Rememner blockchain is not a single technology. It is a collection of technologies.Blockchain TechnologyLets try to understand these technologies.DLT\u00a0: Distributed ledgers use independent computers (referred to as nodes) to record, share and synchronize transactions in their respective electronic ledgers (instead of keeping data centralized as in a traditional ledger). Blockchain organizes data into blocks, which are chained together in an append only mode.Blockchain is a specific form or subset of distributed ledger technologies. It is the way that the data is stored in the DLT. But the term Blockchain has become the buzz word for the entire technology stack.Peer-to-peer\u00a0: Nodes in a blockchain are connected peer-to-peer. You can connect a local node running in your laptop to the blockchain network seamlessly.Decentralized\u00a0: In a decentralized system each node is running autonomously. The main difference with a distributed system is that in a distributed system there are dedicates set of nodes to control other nodes. But in a decentralized system no one takes commands from each other. No concept of client server of master slave. Every one has equal decision power.DecentralizedCryptographically secure: Blockchain uses digital signature (SHA256) algorithm to maintain/verify integrity of the data.Digital SignatureAnonymous: In blockchain an account with a key pair ( public key & private key) is used a wallet for submitting transactions. There is no way of identifying a user or any other personal information by looking at a transaction. It is completely anonymous. For example if you go to etherscan.io which is the central application to view Ethereum blockchain transactions then the from account and to account would be something like below.AnonymousWe will talk about these technologies in more details later. Lets have a look at the history of blockchain.History\u00a0: Blockchain technology has found a solution for the Byzantine generals problem as illustrated in below article.Byzantine generals\u00a0problemBlockchain: The Byzantine Generals ProblemThere is a problem in computing which until very recently, had no solution. The problem is called the Byzantine\u2026medium.comTypes of Blockchains: Mainly there are two types of blockchain implementations. Open/Public and enterprise. In an open and public blockchain such as BitCoin or Ethereum anyone can join as a node to the main network. But in an enterprise blockchain such as Hyperledger fabric only authorized nodes can enter into the network.Types of blockchainsThere are many implementations of blockchain technology. We will be discussing about Ethereum.Blockchain ImplementationsBitCoin\u00a0: October 31st of 2008, a white paper has been submitted by an unknown person called Satoshi Nakamoto on performing electronic transactions without the need of a middle party. This is the origin of BitCoin. The whole purpose of the BitCoin technology was to transfer money between two parties in a peer-to-peer manner in contract to current financial transactions which are performed with the help of an intermediary (like a Bank).BitCoinhttps://bitcoin.org/bitcoin.pdfEthereum\u00a0: December 2013\u00a0, Vitalik Buterin wrote a white paper on extending the blockchain technology beyond the financial transactions and the idea of Smart Contracts. This is the origin of Ethereum.https://github.com/ethereum/wiki/wiki/White-Paperhttp://web.archive.org/web/20131228111141/http://vbuterin.com/ethereum.htmlhttps://blockchainreview.io/wp-content/uploads/2018/03/02.01._final_Ethereum-White-Paper-Made-Simple.pdfVitalik Buterin\u00a0: Co-founder of\u00a0EthereumMain components of\u00a0EthereumEthereum is written using Go programming language. Geth is the command line tool/interface for running a full ethereum node. You have the option of connecting to main ethereum network or create your own private network. If you are connected to main network then entire block chain data (~45GB) will be downloaded to your machine. Therefore we are going to setup our own network with one node.EthereumSmart Contract in ethereum is a piece of code that can be deployed and executed to perform business functions. The compiled code is run on every node using ethereum JVM. Contract has its own account address. The caller should pay ether to deploy and execute smart contracts in nodes. A token (Currency) is also a smart contract. These contracts are written using Solidity language. You can define your own currency as a smart contract.Account in ethereum is a combination of account address, a public key and a private key. Address is used to when performing transactions such as fund transfer. Account address is derived from public key. Private key is used to sign the transactions.There are couple of test ethereum networks available in addition to main ethereum network. Ropsten, Kovan & Rinkeby can be used to test your application before moving into production main network.AccountsWallet is used to create/manage your accounts. Wallet can have multiple accounts.MetaMask is a wallet manager app which can be downloaded as a Chrome extension. You will have to trust them to keep your private key.Remix is an online IDE for solidity language. Remix runs it own ethereum node for testing purposes.web3js is a java script framework which can be used to interact with the ethereum nodeweb3j is a java API which can be used to interact with the nodeMist is a browser to browse dApps hosted in cloud. It can be used as a wallet manage as well.Geth is the command line tool which is used to interact with the blockchainTransaction is the fundamental message structure in blockchain.Ethereum blockchain consists of multiple nodes. Each node will have its own copy of blocks. Nodes are communicated peer-to-peer using a gossip protocol.TransactionTransactionA block contains multiple transactions.BlockNodeBlockchain is a link list of Blocks which are connected with Hash values similar to Git. Changing the content of one block will result in change of Hash values in the chain.BlockchainSet of transactions (Block) will be selected by a node for validations. Each transaction is digitally singed with the private key of the user. The public key is embedded in the transaction so that nodes can use the public key to validate the signatures. Once signatures are validated, the node tries to find the next valid block by solving a hashing puzzle. The puzzle is to find a number called Nonse so that the resulting hash of the block will start from given number of leading zeros. For example in below block Node will iterate Nonse = 0 to n so that when n = 139358, the block Hash contains five leading zeros. This is called mining. Once the correct Nonse is found the Node will send this block for other Nodes for confirmation. After a certain number of confirmations the block is accepted as the next block in the chain. The Node is rewarded with some amount of Ether for finding the Nonse. This is where the computing power matters.MiningA chain of blocks is created by using Hash of the previous block in newly Mined block. The Hash of the previous block is an input for the current block. If the previous block is modified then the Hash of the previous block is changed. This will have a chain reaction in entire block chain. Because changing of previous Hash will impact the next block Hash and the next block Hash and it continues\u2026MiningThis is how blockchain maintains integrity of the data. There is an interactive tutorial on this in https://anders.com/blockchain/tokens.htmlSubmitting a transaction from WalletSubmit TransactionInterfacing with Ethereum\u00a0: It is possible to interact with ethereum blockchain using web3js java script API.Interfacing with\u00a0ethereumLets create our own private network with one node.Download & install Geth: Download windows version of Geth from below URL and install it. Geth is the command line interface for the blockchain.https://geth.ethereum.org/downloads/Create genesis block & data folder\u00a0: You need to create your initial block (genesis block) to start the block chain protocol. Create a new folder in your hard drive and save below content as genesis.json. Change the chainId value from 1 to a different number to avoid connecting to main network. chainId=1 is reserved for the main network.{  \"coinbase\"   : \"0x0000000000000000000000000000000000000001\",  \"difficulty\" : \"0x20000\",  \"extraData\"  : \"\",  \"gasLimit\"   : \"0x2fefd8\",  \"nonce\"      : \"0x0000000000000042\",  \"mixhash\"    : \"0x0000000000000000000000000000000000000000000000000000000000000000\",  \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",  \"timestamp\"  : \"0x00\",  \"alloc\": {},  \"config\": {        \"chainId\": 10,        \"homesteadBlock\": 0,        \"eip155Block\": 0,        \"eip158Block\": 0    }}Create an empty folder called chaindata to store the blocks. Final state will be as follows.genesis.json & data\u00a0folderOpen your command prompt from this folder and use below command to initiate blockchain protocol. This will not start any node.geth --datadir=./chaindata/ init ./genesis.jsonInitiate block\u00a0chainStart your private node\u00a0: Now you can start your private node using below command.geth --datadir=./chaindata/ --rpc consoleStart private\u00a0nodeDownload & install wallet manager app\u00a0: Wallet manager app can be used to create ethereum accounts. An account is a keystore in ethereum with private and public key pair. Keys will be saved in chaindata folder by default. The private key is used to encrypt/sign transactions when submitting to block chain. This key will be loaded by web3j as well. You can use Mist as a wallet manager and to browse ehereum app store. On the other hand wallet manager can be installed as a standalone application as well. https://github.com/ethereum/mist/releases?after=0.4.0We will create two testing accounts using wallet manager app. Download and install wallet manager app from below location.Install wallet manager apphttps://github.com/ethereum/mist/releases2. Launch wallet manager app\u00a0: Remix wallet manager app will connect to your private node by default. You can see it in below screenshot under \u201cPRIVATE NET\u201d red color label.No need to wait for the sync activity with main network, we are just running our local node. Press the launch application button.Wallet Manager3. Create two accounts\u00a0: we will do a simple money transfer transaction using wallet manager app. Two different accounts are needed for that. You can create account using wallet manager app. Go to File menu and press new account. Specify your wallet password. This will create your keystore file with private key and public key. Same process can be repeated to create another account for money transfer transaction. The first account will be identified as the main account by default.Create new\u00a0accountThis is your identity and it should be protected in a safe place. You can locate your kestore files under chaindata/keystore folder.Keystore filesWhat is in your keystore file\u00a0: https://medium.com/@julien.maffre/what-is-an-ethereum-keystore-file-86c8c5917b97In a real world scenario MetaMask will act as your keystore manager. The MetaMask chrome browser extension will manage your keys and will use the private key stored in your browsers data store to sign the transactions.https://ethereum.stackexchange.com/questions/39954/does-metamask-store-private-key-on-server-or-anywhere-else4. Start Mining\u00a0: There is not point of having an account without real money (Ether). We can get some free ether to our main account by starting mining process using Geth console. Below is the command.miner.start();You can navigate to wallet manager app to see how ether is added to your account in real time. Ether will be added to your main account.5. Transfer EtherPress the SEND button in wallet manager to transfer ether from one account to another. Select the FROM account. Copy and paste the address of destination account to TO field. Specify the amount. A fee should be paid for the minors to perform this transaction. You can select your fee under SELECT FEE section and press the SEND button. You will be prompt to enter the keystore password of the source account. Once submitted miners ( we have one miner will start the mining process.Transfer EtherPlease make sure that your node has started mining. If not use miner.start(); command in geth console to start it. It is possible to see the status of your last transaction in wallet manager app. 12 confirmations are required to complete the transaction. Once transaction is completed check your account balances to confirm the money transfer effect. Next we will do the same money transfer transaction using web3j library.Lets start coding with web3jweb3j is a lightweight, highly modular, reactive, type safe Java and Android library for working with Smart Contracts and integrating with clients (nodes) on the Ethereum network.web3jCreate an empty maven project and add below dependency. Complete pom.xml file is as follows.<project xmlns=\"http://maven.apache.org/POM/4.0.0\"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0   http://maven.apache.org/xsd/maven-4.0.0.xsd\">    <modelVersion>4.0.0</modelVersion>    <groupId>com.web3j.blockchain</groupId>    <artifactId>project</artifactId>    <version>1.0</version>    <dependencies>        <dependency>            <groupId>org.web3j</groupId>            <artifactId>core</artifactId>            <version>3.4.0</version>        </dependency>        <!-- https://mvnrepository.com/artifact/org.web3j/abi -->        <dependency>            <groupId>org.web3j</groupId>            <artifactId>abi</artifactId>            <version>3.4.0</version>        </dependency>        <dependency>            <groupId>org.slf4j</groupId>            <artifactId>slf4j-simple</artifactId>            <version>1.7.5</version>        </dependency>    </dependencies></project>Transfer ether using web3jNotes: You can use the same accounts created by wallet application in web3j code. The actual file name of the keystore file should be mentioned in the code. It will not work if you specify the folder name and not the file name. Use valid destination account address in to parameter. Once above code is executed you can validate the transferred amount in wallet manager app. Miner should be running in your geth console to complete the transaction.Codepackage org.web3j.sample;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.web3j.crypto.Credentials;import org.web3j.crypto.WalletUtils;import org.web3j.protocol.Web3j;import org.web3j.protocol.core.methods.response.TransactionReceipt;import org.web3j.protocol.http.HttpService;import org.web3j.tx.Transfer;import org.web3j.utils.Convert;import java.math.BigDecimal;public class Application {    private static final Logger log = LoggerFactory.getLogger(Application.class);    public static void main(String[] args) throws Exception {        new Application().run();    }    private void run() throws Exception {        // We start by creating a new web3j instance to connect to remote nodes on the network.        Web3j web3j = Web3j.build(new HttpService());        log.info(\"Connected to Ethereum client version: \"                + web3j.web3ClientVersion().send().getWeb3ClientVersion());        Credentials credentials =                WalletUtils.loadCredentials(                        \"supersafepassword\",                        \"chaindata\\\\keystore\\\\UTC--2018--<rest of the file name>\");        log.info(\"Credentials loaded\");        log.info(\"Sending Ether ..\");        TransactionReceipt transferReceipt = Transfer.sendFunds(                web3j, credentials,                \"0xf900D5fEEf974F058543E47B27C801D396684266\",  // you can put any address here                BigDecimal.valueOf(100), Convert.Unit.ETHER)  // 1 wei = 10^-18 Ether                .sendAsync().get();        log.info(\"Transaction complete : \"                + transferReceipt.getTransactionHash());    }}OutputTransfer EtherWrite your first smart contact in solidity languageSmart contract is piece of software developed using Solidity language to perform custom business functionalities. Smart contract will be installed in all nodes in the network. Installation is a one time operation and it has to be submitted as a transaction to the network by spending ether for the miners. Once installed you cannot modify it. It is like a stored procedure in a rational database. You can call functions in the contract by submitting transactions. You can use the Remix browser application to write the smart contract. Remix has an inbuilt ethereum node where you can deploy the contract and test it. Navigate to https://remix.ethereum.org in your browser and write below code.HelloWorld.solpragma solidity ^0.4.16;contract HelloWorld {   uint256 counter = 5;      function add() public {  //increases counter by 1       counter++;   }    function subtract() public { //decreases counter by 1       counter--;   }      function getCounter() public constant returns (uint256) {       return counter;   } }Deploy & test your contract in Remix.Compile your contact using Compile option. Then navigate to Run tab and press Deploy button to deploy it. Your contract will be deployed as a Transaction. Therefore you need to specify the source account address and a Gas limit (amount of ether paid for miners for the execution of this transaction). Once deployed contract will have its own address. This address can be used to call methods in the transaction.Deployed contractYou can execute functions in the contract by pressing add, subtract and getCounter buttons. Press the add button and then press the getCounter button to check the value of your counter.Execute the\u00a0contractNow we will be deploying the contract using web3j instead of Remix. First we need to compile the contract. The compiled output of the Smart Contract has two parts. The binary file ( which will be executed in ethereum JVM once deployed) and the application binary interface (ABI) which is a human readable definition of the contract represented in JSON format. These output is required to generate the wrapper class uisng web3j. The wrapper class will hide all the complexities of connecting & executing your smart contract. It will act as an interface for the smart contract.Compile ContractCompile the contactWe will be using solc compiler to compile the contract. You can download the windows version of it.https://github.com/ethereum/solidity/releasesSolidity: Using solc on Windows \u00b7 Code OozeThe solc command line compiler is a C++ implementation of the Solidity compiler that can output opcodes for\u2026www.codeooze.comsolc compilerDownload and extract the zip file into your hard disk. Then save your contract to a file called HelloWorld.sol and save it to solc compile folder for easy access.solc fileOpen new terminal and use below command to compile it.https://web3j.readthedocs.io/en/latest/smart_contracts.htmlsolc HelloWorld.solc --bin --abi --optimize -o ./This command will generate binary file and ABI file as the output.Compiled output of the\u00a0contractLets use the output of the compiled smart contract to generate the HelloWorld.java wrapper class. This wrapper class is used to interact with the Smart Contract. All complexities will be hidden from the end user.Generate Wrapper\u00a0classInteract with the Smart\u00a0Contractweb3j comes with a command line utility to generate the wrapper class. where you can download it from below location. Once the tool is copied to your hard disk, you need to copy the binary file and ABI generated in above step to the same folder where the web3j.bat file is present.web3j/web3jweb3j - Lightweight Java and Android library for integration with Ethereum clientsgithub.comweb3jExtract the folder into your hard disk. Copy abi file and binary file created in above solidity compilation step into bin folder.Generate Wrapper\u00a0classRun below command to generate the wrapper class.web3j solidity generate helloworld.bin helloworld.abi -o . -p org.web3j.sampleParameter p should be the java packaging structure for the generated class.Hint\u00a0: https://stackoverflow.com/questions/44662197/web3j-solidity-generate-command-not-workingNew class will be generated in org.web3j.sample folder.Part of the generated HelloWorld.javaCopy this file to your application folder structure.Application package structureLets deploy and use Smart Contract from our your application.Deploy and use smart\u00a0contractComplete codepackage org.web3j.sample;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.web3j.crypto.Credentials;import org.web3j.crypto.WalletUtils;import org.web3j.protocol.Web3j;import org.web3j.protocol.core.methods.response.TransactionReceipt;import org.web3j.protocol.http.HttpService;import org.web3j.tx.Contract;import org.web3j.tx.ManagedTransaction;import org.web3j.tx.Transfer;import org.web3j.utils.Convert;import java.math.BigDecimal;public class Application {    private static final Logger log = LoggerFactory.getLogger(Application.class);    public static void main(String[] args) throws Exception {        new Application().run();    }    private void run() throws Exception {        // We start by creating a new web3j instance to connect to remote nodes on the network.        Web3j web3j = Web3j.build(new HttpService());        log.info(\"Connected to Ethereum client version: \"                + web3j.web3ClientVersion().send().getWeb3ClientVersion());        Credentials credentials =                WalletUtils.loadCredentials(                        \"password\",                        \"chaindata\\\\keystore\\\\UTC--2018-06-21T06-34-32.658490800Z--5ade9a7f8f57ab3995ac4d56c78a22649d3b1686\");        log.info(\"Credentials loaded\");        log.info(\"Sending Ether ..\");        TransactionReceipt transferReceipt = Transfer.sendFunds(                web3j, credentials,                \"0xDc1Fb60F7E1eF6ef052A014EFbDF82debd803D06\",  // you can put any address here                BigDecimal.valueOf(100), Convert.Unit.ETHER)  // 1 wei = 10^-18 Ether                .sendAsync().get();        log.info(\"Transaction complete : \"                + transferReceipt.getTransactionHash());        // Now lets deploy a smart contract        log.info(\"Deploying smart contract\");        Helloworld contract = Helloworld.deploy(                web3j, credentials,                ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT).send();        String contractAddress = contract.getContractAddress();        log.info(\"Smart contract deployed to address \" + contractAddress);        log.info(\"Initial value of counter in Smart contract: \" + contract.getCounter().send());        log.info(\"Incrementing counter in Smart contract\");        contract.add().send();        log.info(\"Value of counter in Smart contract after increment : \" + contract.getCounter().send());        log.info(\"Decrementing counter in Smart contract\");        contract.subtract().send();        log.info(\"Final value of counter in Smart contract : \" + contract.getCounter().send());    }}OutputOutputWoooow!!, It is working\u00a0\u2026.Application of Blockchain technology\u00a0: Blockchain technology can be used not only for Cryptocurrencies. The primary building blocks of blockchain technology can be used in enterprise applications such as immutability, anonymity & security. For an example a land registration system can be easily build using Smart Contracts in Ethereum. Any application built using blockchain will leverage one or more capabilities of blockchain.Conclusionweb3j is an effective method of interfacing with Ethereum blockchain using Java language.I just started writing my next article in creating your own Currency (Token) using smart contract. It will cover all steps needed to publish your currency in private network and use it for transactions.As promised my article on creating you own currency token has been released.https://medium.com/coinmonks/create-your-own-cryptocurrency-in-ethereum-blockchain-40865db8a29fI am planning to an article on initial coin offering as well. This is called Crowdsale. Hope to see you soon.I\u2019ll will be sharing more articles on future so don\u2019t forget to follow, clap and comment. Thanks for\u00a0reading.Please feel free to contact me on:Email\u00a0: email.thusharaj[at]gmail.comLinkedin\u00a0: https://www.linkedin.com/in/thusharaj/References: Special Thanx to Stepen Gridder\u00a0: Udemy.com for his wonderful materials on Ethereum. I have reused some of his original work in my article.https://skillsmatter.com/skillscasts/11141-java-and-the-blockchain-building-java-applications-on-ethereum-with-web3j-3-0https://www.ccn.com/bitcoin-transaction-really-works/https://codeburst.io/build-your-first-ethereum-smart-contract-with-solidity-tutorial-94171d6b1c4bhttps://www.youtube.com/watch?v=UmCEdcRjaz0&pbjreload=10https://www.youtube.com/watch?v=1fKnjMGmB2Uhttps://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2https://medium.com/taipei-ethereum-meetup/beginners-guide-to-ethereum-2-run-multiple-nodes-on-a-private-network-in-5-lines-c97a4d78a590https://hackernoon.com/setup-your-own-private-proof-of-authority-ethereum-network-with-geth-9a0a3750cda8https://arvanaghi.com/blog/how-to-set-up-a-private-ethereum-blockchain-using-geth/https://blog.zeppelin.solutions/designing-the-architecture-for-your-ethereum-application-9cec086f8317https://medium.com/@merunasgrincalaitis/the-ultimate-end-to-end-tutorial-to-create-and-deploy-a-fully-descentralized-dapp-in-ethereum-18f0cf6d7e0ehttps://www.codeooze.com/blockchain/solc-hello-world/", "responses": "14"}, {"title": "Analyzing Ethereum Smart Contracts for Vulnerabilities", "author_name": "Bernhard Mueller", "link": "https://hackernoon.com/scanning-ethereum-smart-contracts-for-vulnerabilities-b5caefd995df?source=search_post", "post_date": "Nov 23, 2017", "readtime": "6 min read", "upvotes": "1.1K", "content": "Analyzing Ethereum Smart Contracts for VulnerabilitiesBernhard MuellerBlockedUnblockFollowFollowingNov 23, 2017Bernhard Mueller, the creator of MythX, shows how to detect vulnerabilities in Ethereum smart contracts.Below, we\u2019ll be running Mythril on some intentionally vulnerable contracts from the Ethernaut wargame (thanks to the guys from Zeppelin solutions for giving me permission!). If you haven\u2019t tried the wargame yourself, be aware that there are spoilers ahead! I recommend giving it a shot yourself first if you haven\u2019t already.TokenThe objective in level three of Ethernaut is to hack a basic token contract called Token. Check out the code to see if you can spot the bug.When analyzing the smart contracts with Mythril you can choose from three input options:Solidity code file: This only works if the solc command line compiler is installed.Solidity bytecode: If you don\u2019t have solc, you can compile the code with Remix and pass the runtime binary code to Mythril via the -c argument.Contract address: To scan a contract instance on the blockchain, use the -a ADDRESS option.I\u2019ll be using option 1 below\u200a\u2014\u200afor detailed instructions on the other input options check out the README.Copy/paste the code into a text file and save it as ethernaut-token.sol, then run the myth -x command. Mythril outputs detected issues on the console:$ myth -x Desktop/ethernaut-token.sol==== Integer Underflow ====SWC ID: 101Type: WarningContract: TokenFunction name: transfer(address,uint256)PC address: 469Estimated Gas Usage: 758 - 1043The subtraction can result in an integer underflow.--------------------In file: Desktop/ethernaut-token.sol:13balances[msg.sender] - _value--------------------==== Integer Underflow ====SWC ID: 101Type: WarningContract: TokenFunction name: transfer(address,uint256)PC address: 551Estimated Gas Usage: 1291 - 1766The subtraction can result in an integer underflow.--------------------In file: Desktop/ethernaut-token.sol:14balances[msg.sender] -= _value--------------------==== Integer Overflow ====SWC ID: 101Type: WarningContract: TokenFunction name: transfer(address,uint256)PC address: 627Estimated Gas Usage: 6814 - 27479This binary add operation can result in integer overflow.--------------------In file: Desktop/ethernaut-token.sol:15balances[_to] += _value--------------------In this case, it has detected one integer overflow and two integer underflow issues in the function transfer. Let\u2019s have a look at the code to see what\u2019s going on:function transfer(address _to, uint _value) public returns (bool) {  require(balances[msg.sender] \u2014 _value >= 0);  balances[msg.sender] -= _value;  balances[_to] += _value;  return true;}We can see that balances[msg.sender]\u200a\u2014\u200a_value will indeed wrap if _value is larger than balances[msg.sender]. In that case the sender will end up with an astronomical amount of tokens!FalloutThis is level two of the Ethernaut challenge. Have a look at the code first\u200a\u2014\u200athe problem isn\u2019t that hard to spot!Here\u2019s what Mythril has to say about it:$ myth -x ethernaut-fallout.sol==== Ether thief ====SWC ID: 105Type: WarningContract: FalloutFunction name: collectAllocations()PC address: 1018Estimated Gas Usage: 1112 - 1723Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.--------------------In file: ethernaut-fallout.sol:25msg.sender.transfer(this.balance)--------------------==== Integer Overflow ====SWC ID: 101Type: WarningContract: FalloutFunction name: allocate()PC address: 1366Estimated Gas Usage: 713 - 998This binary add operation can result in integer overflow.--------------------In file: ethernaut-fallout.sol:16allocations[msg.sender] += msg.value--------------------Mythril claims that it is possible withdraw ETH from the contract using the function collectAllocations(). But isn\u2019t that function protected by the onlyOwner modifier?If you\u2019re unclear about an issue Mythril reports, you can add the --verbose-report flag to get additional debugging information.$ myth -x ethernaut-fallout.sol --verbose-report==== Ether thief ====(...)--------------------DEBUGGING INFORMATION:Transaction Sequence:{'2': {'calldata': '0x6fab5ddf', 'call_value': '0x0', 'caller': '0xaaaaaaaabbbbbbbbbcccccccddddddddeeeeeeee'}, '6': {'calldata': '0x8aa96f38', 'call_value': '0x0', 'caller': '0xaaaaaaaabbbbbbbbbcccccccddddddddeeeeeeee'}}Note that two transactions are shown in the \u201cDebugging Information\u201d section. These are the transaction Mythril thinks will trigger the vulnerability.With that in in mind, take another careful look at the source code. You might notice that the constructor name is slightly different from the contract name, and thus compiles into a regular public function that anyone can call to set a new owner! This is similar to the Rubixi vulnerability.The \u2018calldata\u2019 field of the first transaction shown by Mythril contains the leftmost 4 bytes of the Keccak hash of Fal1out(), the function signature of the wrongly named constructor. You can verify this with the hash utility:$ myth --hash \"Fal1out()\"0x6fab5ddfThe second transaction represents a call tocollectAllocations():$ myth --hash \"collectAllocations()\"0x8aa96f38DelegationLevel 4 of Ethernaut is a multi-contract scenario. Fortunately, Mythril can process multiple contracts and understands various types of message calls between contracts. When you analyze a contract on the blockchain Mythril can automatically detect and download dependencies during runtime.To try this out, I deployed the Delegate and Delegation contracts on a local Ganache instance. Linking is accomplished by passing the address of the Delegation instance to the constructor of Delegate.On-chain analyses are launched using the -a ADDRESS argument. The command shown below also includes three additional flags:--rpc ganache activates the Ganache RPC preset;-l activates the dynamic loader. This tells Mythril to also retrieve and scan any additional referenced contracts;-v1 activates informational debugging output. This will give us some insight into what the loader is doing.$ myth --rpc ganache -xla 0x64e1b27e8dbd44769dc8f43cb78447760b1bc1f0 -v1INFO:root:SVM initialized with dynamic loader: <mythril.support.loader.DynLoader object at 0x102329ef0>INFO:root:Dynld at contract 0x64e1b27e8dbd44769dc8f43cb78447760b1bc1f0: Concat(0, Extract(167, 8, storage_1))INFO:root:Dynamic contract address at storage index 1INFO:root:Dependency address: 0x28241019d1b3b2b3763a9d4c7f37fca8ab02e449INFO:root:DELEGATECALL to: 0x28241019d1b3b2b3763a9d4c7f37fca8ab02e449INFO:root:Unsupported symbolic calldata offsetINFO:root:- Entering function 0x28241019d1b3b2b3763a9d4c7f37fca8ab02e449:owner()(...)INFO:root:Execution complete, saved 374 statesINFO:root:38 nodes, 37 edgesINFO:root:Resolving pathsINFO:root:Analyzing storage operations...==== Unchecked CALL return value ====Type: InformationalContract: 0x64e1b27e8dbd44769dc8f43cb78447760b1bc1f0Function name: mainPC address: 171The function main contains a call to an address obtained from storage.The return value of this call is not checked. Note that the function will continue to execute with a return value of '0' if the called contract throws.--------------------==== CALLDATA forwarded with delegatecall() ====Type: InformationalContract: 0x64e1b27e8dbd44769dc8f43cb78447760b1bc1f0Function name: mainPC address: 171This contract forwards its calldata via DELEGATECALL in its fallback function. This means that any function in the called contract can be executed. Note that the callee contract will have access to the storage of the calling contract.DELEGATECALL target: Concat(0, Extract(167, 8, storage_1))--------------------Two issues have been identified here:Unchecked CALL return value in the main (fallback) function. This seems weird, as we can clearly see that the delegatecall() in the fallback function is wrapped into an if-statement. However, if you check the disassembly, you\u2019ll find that the compiler optimizes this out.CALLDATA forwarded with delegatecall(): Mythril also warns about forwarding msg.data through DELEGATECALL and notes that arbitrary functions in the called contract can be executed.Mythril seems to have missed the the fact that the _owner state variable can be overwritten by calling the pwn() function. Why is that? If you consider the overall logic of both contracts, you\u2019ll note that even though changing the state variable named _owner might appear critical, it doesn\u2019t have any further implications (i.e., it doesn\u2019t allow you to do anything you couldn\u2019t have done anyway), so Mythril doesn\u2019t consider it a vulnerability.About Mythril and\u00a0MythXMythril is a free and open-source smart contract security analyzer. It uses symbolic execution to detect a variety of security vulnerabilities.MythX is a cloud-based smart contract security service that seamlessly integrates into smart contract development environments and build pipelines. It bundles multiple bleeding-edge security analysis processes into an easy-to-use API that allows anyone to create purpose-built smart contract security tools. MythX is compatible with Ethereum, Tron, Vechain, Quorum, Roostock and other EVM-based platforms.", "responses": "4"}, {"title": "How to Store Digital Assets on\u00a0Ethereum", "author_name": "ConsenSys", "link": "https://media.consensys.net/how-to-store-digital-assets-on-ethereum-a2bfdcf66bd0?source=search_post", "post_date": "May 30, 2018", "readtime": "11 min read", "upvotes": "567", "content": "How to Store Digital Assets on\u00a0EthereumConsenSysBlockedUnblockFollowFollowingMay 30, 2018Everything you need to know about wallets, seed phrases, exchanges, and security when engaging with cryptocurrency and digital assets.by Nadja Bene\u0161, Communications at Gnosis.pmWith the rising popularity of cryptocurrencies, more and more users are entering the space, and the number of Ethereum addresses in use is skyrocketing. As of May 23rd, 2018, Ethereum achieved a market capitalization of 64 billion USD while the top 100 Ethereum based tokens account for another 39 billion USD.The increasing amount of users also results in higher volumes of funds that need to be stored on the Ethereum blockchain. Since blockchains are fundamentally different from what crypto newbies might be used to when interacting with their banks or online banking interfaces, storing funds will be one of the challenges every new user will run into fairly quickly.In this post, we\u2019d like to provide both an overview and a (critical) analysis of the different ways users can store funds on Ethereum at the moment.The Technical BasicsIn order to send transactions on the Ethereum blockchain, users first need to create an Ethereum account, which basically is a key pair consisting of both a private and a public key. Whereas the private key is used to generate the public key, part of the public key in turn is used to derive the Ethereum account address. Check out this interactive graphic to better understand how the Ethereum account address is created out of the private and public key. Type in a random passphrase at the top of the graphic and watch the numbers populate!Just as bank account numbers are used for transactions between bank accounts, the Ethereum account address is referenced when sending funds to the account, and thus acts as a public identifier of the account. Transactions sent from the account, however, need to be signed with a private key.Since solely the owner of the private key has full access to the account, they also are the only one able to sign a transaction. In case the account owner loses their private key, it cannot be recreated, which means that the account can no longer be accessed. All funds in the account will thus be permanently lost\u200a\u2014\u200awith no option for recovery. This is the striking difference between the existing banking system, where account holders who lost their credit card or online banking PIN are easily able to recover the information or order a new card, and the Ethereum blockchain, where losing your private key means actually losing your funds.Centralized Storage of\u00a0FundsMost crypto newcomers buy cryptocurrencies on centralized exchanges such as Coinbase or Kraken, providing a convenient way to exchange fiat money into a wide variety of cryptocurrencies. Setting up an account on a centralized crypto exchange is as easy as on other online platforms\u200a\u2014\u200aall that\u2019s needed is an email address and a password. Some exchanges also have the option to set up two-factor-authentication for an account via the Google authenticator app. Once successfully created, the user\u2019s account is easily accessible from a variety of mobile and web clients. Apart from that, users are also able to reset their password in case they lost it. Hence, funds can always be recovered\u200a\u2014\u200aat least as long as the user has access to their provided email address.Some of the most prominent centralized exchangesChallengesWhen a user sends funds to the exchange, those are held by a wallet owned by the exchange, and the equivalent value is typically credited to the user\u2019s account via a database entry. Hence, centralized exchanges store funds on behalf of the user. Any private keys are held by the exchange itself.Centralized exchanges therefore constitute a single point of failure. Funds are only as safe as access control to these websites is. The users incur counterparty risk: theft (by the exchange or from the exchange through third-party hackers) or withdrawal capacity restrictions, to name a few.Just imagine if someone stole the private key of the exchange wallet owner or manages to hack the exchange, and transfers all the available funds to their private wallet. Since transactions are instant and irreversible once mined on the blockchain, the owners will never see their money again. Fraud protections traditional bank depositors rely on are unavailable, and not even a government or central bank can stop a cryptocurrency transaction from happening.Centralized exchanges and wallets have indeed been hacked many times: One of the largest hacks occurred in February 2014, when hackers stole approximately 850,000 bitcoins (worth around $400 million at the time, today worth about $14 billion) from Tokyo based bitcoin exchange Mt. Gox that handled 70% of all bitcoin transactions at the time of the hack. Even beginning of this year, hackers compromised cryptocurrency exchange Coincheck, also based in Tokyo, and stole 500 million NEM tokens from its digital wallets (approx. $533 million at the time of the incident).Since users cannot export their own private keys from the exchange and thus are not in full control over their own Ethereum accounts, it is best practice to not store significant amounts of funds on centralized services.Decentralized Storage of\u00a0FundsBeing in full control of one\u2019s funds means setting up a decentralized wallet. During setup of a decentralized wallet, an Ethereum account along with the public and private key pair is created and remains on the device: For decentralized software wallets, the device would be a computer; for decentralized hardware wallets, it would be the hardware itself, which resembles a USB stick.In contrast to centralized exchanges, decentralized wallets allow users to own their private key and thus to back up their account. In order to restore their account, users simply need their private key or recovery passphrase. That means that an attacker would need to get into possession of the private keys in order to steal funds from a decentralized wallet. Since there is no single entity that manages the users keys, nobody can block the user\u2019s access to the account as long as the private key is not compromised, lost, or stolen.There are a number of basic categories of decentralized wallets:Hot vs. Cold\u00a0WalletsThe term hot wallets refers to wallets that are virtually always connected to the internet, whereas cold wallets are never or at least not permanently connected to the internet, only when transferring funds out of the wallet. While they can still receive money at any given time, cold wallets are not intended to be used for regular expenses. You could say that a hot wallet works like a checking account, whereas a cold wallet is similar to a savings account. With hot wallets, a small amount of funds is usually transferred on a daily basis, while with cold wallets, funds will only need to be moved once every other month or once a year.Hot wallets are typically software wallets on a device with Internet connection, such as a mobile phone or desktop computer. Cold wallets could be hardware devices storing private keys that only connect to the Internet when needed. Another example of cold wallets are paper wallets where the private key is printed on an actual piece of paper that has to be kept in a safe spot. If a wallet is not connected to the Internet, hackers cannot steal funds from the wallet. However, its private keys still remain susceptible to physical theft. Hot wallets, on the other hand, therefore can be hacked, which is why it is advised that users store only a small amount of funds in it.Software vs. Hardware\u00a0WalletsSoftware wallets, which are able to create and restore Ethereum accounts while interacting with the Ethereum blockchain through transactions, are most commonly used. There\u2019s a wide variety of mobile, desktop, and web-based clients for decentralized software wallets. All sensitive data is encrypted and stored on these devices.The most prominent software wallets in the\u00a0spaceOn the other hand, hardware wallets are dedicated devices that keep private keys safe. As cold wallets that are only connected to the Internet when necessary, hardware wallets keep all sensitive data on the device.The most prominent hardware wallets in the\u00a0spaceChallengesThe main strength of decentralized wallets is also their biggest weakness. Since users own their private key, they\u2019re responsible to make a proper backup of it and store it safely at all times. Many users do so by putting their printed private key in three different places (to prevent for natural disasters), by keeping the recovery phrase sheet laminated inside of a fireproof and waterproof vault, or even by backing up their private keys and wallet recovery seeds with actual steel, among many other best practices.Following these best practices still presupposes some basic technological understanding of the matter. In addition to that, as soon as a private key is lost, stolen, or destroyed\u200a\u2014\u200ahowever safely you\u2019ve stored it\u200a\u2014\u200athere is absolutely no way to recover the funds. If a private key is compromised, the attacker has full control over the account and its funds.An attempt to mitigate this issue are decentralized multi-signature wallets.Multi-signature WalletsMulti-signature (or \u201cmulti-sig\u201d) wallets require a predefined number of owners to \u201csign\u201d every transaction before execution, and thereby alleviate existing issues with decentralized storage and unauthorized usage of funds: In case one owner loses access to their private key, the other owners could easily replace that owner so that the funds inside the wallet remain accessible. For a multi-sig wallet that requires three out of five owners to confirm transactions, technically, this means that two owners could lose their private key without any consequences to the funds stored in the wallet. What we call owners here simply are Ethereum addresses\u201a either controlled by a single individual, multiple individuals, hardware wallets, cold wallets, third-party wallets, or a combination of each.This also means that if the private key of one of the wallet owners is compromised, the attacker would not be able to move any funds since multiple signatures are required.Unlike Bitcoin, the Ethereum blockchain does not support multi-sig wallets out of the box. On Ethereum, the multi-sig logic has to be implemented via smart contracts. As first class citizens on Ethereum, smart contracts can store funds and interact with other contracts and accounts.The most prominent multi-sig wallets in the\u00a0spaceChallengesSince multi-sig wallets on Ethereum simply are smart contract code, they have to be audited very carefully\u200a\u2014\u200abugs in their code could result in lost or frozen funds (cf. Parity hacks).For crypto newcomers especially, the barrier to entry is significant when it comes to multi-sig wallets: In order to set up a multi-sig wallet, one or more Ethereum accounts are required, which have to pay gas for the setup. Once the wallet is created, the defined individual owner accounts still need funding in order to pay for transactions\u200a\u2014\u200asmart contracts aren\u2019t able to pay for transactions at this point, even though there are already proposals to change this.Apart from that, existing multi-sig wallets are more suitable for a group of users that need to manage shared funds rather than for single users managing their personal funds. A single user probably doesn\u2019t own more than two devices that they could designate as the owners of their multi-sig wallet. Even with two devices, however, the risk of incurring unauthorized transactions is reduced since an attacker would need to hack two private keys. That being said, devices and private keys can still be lost or destroyed, just as it could be the case with single-signature wallets.How do we tackle these Challenges at\u00a0Gnosis?As of today, there is no ideal solution for decentralized storage of funds on Ethereum. Security and usability are typically in conflict with each other:Inspired by TechCrunchTo tackle the aforementioned challenges, we are working on a new decentralized wallet, the Gnosis Safe.The Gnosis Safe aims to provide all users with a convenient, yet secure way to manage their funds and interact with decentralized applications on Ethereum. It comes in two editions: Team and Personal Edition. The Gnosis Safe Team Edition is a direct improvement of the existing Gnosis MultiSig wallet with redesigned smart contracts, cheaper setup and transaction costs as well as an improved user experience. It supports Ether and other ERC-20 tokens, and is geared towards teams managing shared crypto funds.The Gnosis Safe Personal Edition, however, is targeting individual users using 2 or more factor authentication through their mobile phones or other devices like tablets or laptops via a browser extension. The main interface for the Personal Edition will be the native mobile apps for Android and iOS.In order for the Gnosis Safe to become the standard in secure fund management on Ethereum, we need to achieve three main goals:1. Usability and accessibility for both new and advanced\u00a0usersWith the Gnosis Safe, we aim to make as much of the underlying technology as transparent as possible, and hide complex concepts such as gas limit, gas price, or private keys from the user. The user would not need to hold ETH anywhere else than inside the Safe to make a transaction, and there should be no need to select a gas price, limit, or the connecting node. Everyone, regardless of their experience level, will be provided with a seamless and straight-forward user experience.We are currently in the process of developing easy-to-use Android, iOS, and desktop apps as well as providing a browser extension and website.2. Simplification of multi-sig setup and transactionsWe focus on specifically simplifying the process of setting up a multi-sig wallet, and thus deploying smart contracts for all future transactions performed by the Safe. Ideally, users would only have to keep funds inside their multi-sig wallet and not in any externally managed Ethereum accounts.3. Fund recovery beyond backing up private\u00a0keysIt is our goal to give back some peace of mind to our users: losing funds will hardly be possible anymore, neither through a lack of knowledge, carelessness, or potential hacks.With the Gnosis Safe, we are currently researching recovery mechanisms leveraging know-your-customers (KYC) providers based on smart contracts. We envision building a decentralized network of KYC providers who could act as \u201cverifiers\u201d of a user\u2019s identity, connecting to the Gnosis Safe. If people lost access to their funds, they could leverage this network of KYC providers to verify their identity and change the keys on their wallet. These mechanisms need to be designed very carefully to ensure recoverability and security of customer funds. Neither Gnosis, nor any other third party involved should be able to take over accounts.We will be releasing more updates on the Gnosis Safe soon! For now, follow our blog to stay on top of our latest posts. We welcome feedback from the community and are open to collaborations, so please do get in touch.", "responses": "4"}, {"title": "Nedir yahu \u015fu Ethereum?", "author_name": "Mert Susur", "link": "https://medium.com/codefiction/nedir-yahu-%C5%9Fu-ethereum-f545aad58910?source=search_post", "post_date": "Aug 13, 2017", "readtime": "8 min read", "upvotes": "537", "content": "Nedir yahu \u015fu Ethereum?Mert SusurBlockedUnblockFollowFollowingAug 13, 2017Ethereum hakk\u0131nda bir s\u00fcredir f\u0131rsat bulduk\u00e7a yay\u0131nlarda konu\u015fmaya \u00e7al\u0131\u015ft\u0131k (28. B\u00f6l\u00fcm Daha \u00e7ok AWS Lambda ve daha \u00e7ok Ethereum) ve hatta Solidity dili hakk\u0131nda giri\u015f seviyesinde bir kay\u0131t da payla\u015fm\u0131\u015ft\u0131k (Solidity 101). \u015eimdi de Ethereum\u2019un nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131ndan ve DApps (Decentralized Applications) kavram\u0131ndan bahsetmek istiyorum.\u00d6ncelikle Ethereum ayn\u0131 Bitcoin gibi bir blockchain (blok zincir) teknolojisi. Bir \u00e7ok y\u00f6n\u00fcyle Bitcoin\u2019e benziyor ancak biraz daha fazlas\u0131. Bu y\u00fczden Ethereum konu\u015fmaya ba\u015flamadan \u00f6nce belki de Bitcoin\u2019den ve nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131ndan bahsetmek daha do\u011fru olacakt\u0131r.Bitcoin nedir?2008 y\u0131l\u0131ndaki k\u00fcresel mali kriz ile birlikte Satoshi Nakamoto ad\u0131nda bir ki\u015fi Ekim ay\u0131nda Crypto Mail gruplar\u0131ndan bir tanesinde bir makale payla\u015farak Bitcoin ad\u0131nda dijital bir para biriminden bahsetti. (Bitcoin: A Peer-to-Peer Electronic Cash System). Satoshi Nakamoto\u2019nun ger\u00e7ek bir isim olup olmad\u0131\u011f\u0131n\u0131 hala daha bilmiyoruz, \u00e7\u00fcnk\u00fc kendisini tan\u0131yan yok. Ancak daha sonra ayn\u0131 isimle 9 Ocak 2009 tarihinde sourceforce \u00fczerinden ilk \u00e7al\u0131\u015fan istemcisini ve para birimini de yay\u0131nlad\u0131ktan sonra Bitcoin hayata ge\u00e7mi\u015f oldu. K\u0131sa bir zaman i\u00e7erisinde arkas\u0131ndaki ideoloji sayesinde kabullenildi ve \u015fu s\u0131ralarda 4000 dolar seviyesinde seyretmekte.Nakamoto\u2019nun yay\u0131nlad\u0131\u011f\u0131 makalenin ilk paragraf\u0131ndan al\u0131nt\u0131 yaparak \u00e7\u00f6zmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131 sorunu \u00f6zetlemek en do\u011frusu olacakt\u0131r;Internet \u00fczerindeki ticari i\u015flemlerin neredeyse tamam\u0131 g\u00fcvenilir bir otorite olarak hizmet veren \u00fc\u00e7\u00fcnc\u00fc \u015fah\u0131s finans kurumlar\u0131na g\u00fcvenerek \u00e7al\u0131\u015fmaktad\u0131r. Her ne kadar bu sistem bir \u00e7ok i\u015flem i\u00e7in g\u00fczel \u00e7al\u0131\u015f\u0131yor olsa da hala daha g\u00fcvene dayal\u0131 bir sistemin zafiyetlerini de bar\u0131nd\u0131rmaktad\u0131r.Peki nedir bu g\u00fcvene dayal\u0131 sistemlerin zafiyetleri? \u00d6rne\u011fin 2008 mali krizini ele alal\u0131m. Alal\u0131m da bir finans uzman\u0131 olmad\u0131\u011f\u0131m i\u00e7in al\u0131nt\u0131 yaparak anlatmaya \u00e7al\u0131\u015faca\u011f\u0131m.\u2026 ABD bankalar\u0131n\u0131n kar i\u015ftah\u0131 o kadar artm\u0131\u015ft\u0131 ki krediler, kredi derecelendirme s\u00fcrecinde riskleri \u00f6l\u00e7meden umars\u0131zca verildi. Verilen kredilerin b\u00fcy\u00fck bir k\u0131sm\u0131 konut kredisi olarak verildi\u011fi i\u00e7in kredi kullananlar kredileri \u00f6demese bile s\u00fcrekli art\u0131\u015f g\u00f6steren konut fiyatlar\u0131 vard\u0131. Ve en k\u00f6t\u00fc ihtimal bankalar bu evleri sat\u0131p belki kar bile ederek konuyu kapat\u0131rlard\u0131. Bununla birlikte artan bu kredi patlamas\u0131n\u0131n sonucu olarak bankalar kaynak bulmakta g\u00fc\u00e7l\u00fck \u00e7ekiyordu. Bunun da bir \u00e7\u00f6z\u00fcm\u00fc vard\u0131 elbette. Bankan\u0131n ipotek etti\u011fi bu evleri, varl\u0131k teminatl\u0131 menkul k\u0131ymetle\u015ftirerek piyasada doland\u0131racak, kendilerine vadesi \u00e7ok da uzun olmasa bile kaynak yaratm\u0131\u015f olacaklard\u0131. Fakat d\u00fc\u015f\u00fcnmedikleri bir\u015fey vard\u0131: Konut fiyatlar\u0131 ya d\u00fc\u015ferse? Nitekim kredi alanlar kredilerin b\u00fcy\u00fck bir k\u0131sm\u0131 \u00f6denemeyince bankalar konutlara el koymu\u015f, ama 3 birim kredi verdikleri evin de\u011feri 1 birime d\u00fc\u015fm\u00fc\u015ft\u00fc. Bankac\u0131l\u0131k sekt\u00f6r\u00fc bunlardan etkilenmi\u015f, sigortac\u0131l\u0131k sekt\u00f6r\u00fc de bu \u00e7\u0131kar\u0131lan varl\u0131k teminatl\u0131 menkul k\u0131ymetleri sigortalad\u0131klar\u0131 i\u00e7in \u00e7ok ciddi zararlar vermi\u015fti\u2026Daha fazlas\u0131 i\u00e7in\u00a0: http://www.bireyselyatirimci.com/2008-krizi-ve-gercek-nedenleri/\u015eu anda internet \u00fczerinden bir al\u0131\u015fveri\u015f yapmak istedi\u011finizde, kiran\u0131z\u0131 \u00f6demek istedi\u011finizde ya da \u00e7o\u011fu zaman market al\u0131\u015fveri\u015finizi yaparken bankalar\u0131 yani yukar\u0131da bahsedilen \u00fc\u00e7\u00fcnc\u00fc \u015fah\u0131s finansal kurumlar\u0131 kullan\u0131yorsunuz. Bu firmalar devletler taraf\u0131ndan reg\u00fclasyonlarla denetlendi\u011fi i\u00e7in g\u00fcvenilir olarak kabul ediyoruz. Hatta devletler kendileri denetlemelerden sorumlu olduklar\u0131 i\u00e7in bir \u00e7ok i\u015flemin bu kurumlar \u00fczerinden yap\u0131lmas\u0131n\u0131 tercih ediyorlar, \u00e7\u00fcnk\u00fc b\u00f6ylece bireylerin ya da kurumlar\u0131n gelir ve giderlerinin denetlenmesi ve vergilendirilmesi de kolayla\u015fm\u0131\u015f oluyor. Ancak bu noktada bu g\u00fcvenilir firmalar\u0131n yozla\u015fmas\u0131, devletlerin yozla\u015fmas\u0131, yolsuzluklar\u0131n ya\u015fanmas\u0131 ya da 2008 y\u0131l\u0131ndaki krizde oldu\u011fu gibi bir \u00e7ok farkl\u0131 kurumu da beraberinde bat\u0131rmas\u0131 gibi riskler ortaya \u00e7\u0131km\u0131\u015f oluyor.\u0130\u015fte Bitcoin de tam olarak bu sorunu \u00e7\u00f6zmek i\u00e7in ortaya \u00e7\u0131k\u0131yor.Peki nas\u0131l \u00e7al\u0131\u015f\u0131yor?Diyelim ki finansal bir i\u015flem yapmak istiyorum, varsayal\u0131m kiram\u0131 \u00f6demek istiyorum. Bu durumda kiram\u0131n de\u011feri kadar bir paray\u0131 ev sahibime g\u00f6ndermem gerekiyor. B\u00f6yle bir i\u015flemin bir al\u0131c\u0131s\u0131, g\u00f6ndereni ve para miktar\u0131 olacakt\u0131r. Bu i\u015flemin ger\u00e7ekle\u015fmesi ile de g\u00f6nderenin hesab\u0131ndan para azal\u0131rken, al\u0131c\u0131n\u0131n hesab\u0131nda da ayn\u0131 oranda bir para giri\u015finin ger\u00e7ekle\u015fmesi gerekir.Bunun ger\u00e7ekle\u015fmesi i\u00e7in i\u015flemi yapan ki\u015fi gerekli bilgileri doldurduktan sonra bir i\u015flem giri\u015fi yarat\u0131p bunu Bitcoin a\u011f\u0131na g\u00f6nderir. Bitcoin a\u011f\u0131 dedi\u011fimiz \u015fey asl\u0131nda bu sisteme ba\u011fl\u0131 olan istemci bilgisayarlardan olu\u015fmaktad\u0131r. A\u011fa dahil olan her bilgisayar kendisine yak\u0131n olan ba\u015fka istemcilerle ileti\u015fime ge\u00e7erek Peer-to-peer bir \u015fekilde kar\u015f\u0131l\u0131kl\u0131 veri al\u0131\u015fveri\u015fine ba\u015flarlar ve otomatik olarak a\u011f i\u00e7erisinde 2009 y\u0131l\u0131ndan bu yana yap\u0131lm\u0131\u015f olan b\u00fct\u00fcn i\u015flemleri kendi disklerine indirmeye ba\u015flarlar, yani a\u011f ile senkronize olmaya ba\u015flarlar. Evet, tarih boyunca yap\u0131lm\u0131\u015f t\u00fcm i\u015flemlerin listesi \u015feffaf bir \u015fekilde herkesin eri\u015fimine a\u00e7\u0131k durmaktad\u0131r. Hatta baz\u0131 web sitelerinden \u015fu anda yap\u0131lan i\u015flemleri canl\u0131 olarak g\u00f6rmeniz bile m\u00fcmk\u00fcn (cointicker). \u015eeffafl\u0131k konusuna birazdan geri d\u00f6nece\u011fim i\u00e7in \u015fu anda bunun ne kadar \u00f6nemli bir \u015fey oldu\u011fundan bahsetmiyorum. Birazc\u0131k sabredin l\u00fctfen!Biz \u00f6rne\u011fimize d\u00f6nelim, kira \u00f6deme i\u015flemini a\u011fdaki di\u011fer bilgisayarlarla payla\u015f\u0131yorduk de\u011fil mi? Evet! Onlar da ayn\u0131 \u015fekilde ba\u015fka bilgisayarlarla birebir olarak ba\u011fl\u0131 olduklar\u0131 i\u00e7in onlar da elden ele y\u00f6ntemi ile bu i\u015flemi onlarla payla\u015f\u0131yorlar. Burada dikkat edilmesi gereken konu \u015fu; olu\u015fturdu\u011funuz i\u015flem hen\u00fcz onaylanmad\u0131. Yani hesab\u0131n\u0131zdan hen\u00fcz para transferi ger\u00e7ekle\u015fmedi. Onay bekliyor diyebiliriz.Ayn\u0131 anda sistemde madenci denilen ba\u015fka insanlar da zor bir matematiksel problemi \u00e7\u00f6zmeye \u00e7al\u0131\u015f\u0131yorlar. Bu problemin \u00e7\u00f6z\u00fcm\u00fc \u00e7ok fazla i\u015flemci g\u00fcc\u00fc gerektirdi\u011fi i\u00e7in kolayl\u0131kla herkes taraf\u0131ndan \u00e7\u00f6z\u00fclemiyor. Hatta bu problemin \u00e7\u00f6z\u00fcm\u00fc de g\u00fcn ge\u00e7tik\u00e7e zorla\u015f\u0131yor. Bu problem \u00e7\u00f6z\u00fcld\u00fc\u011f\u00fcnde, problemi \u00e7\u00f6zen ki\u015fi bir blockchain olu\u015fturup hen\u00fcz onaylanmam\u0131\u015f i\u015flemleri bu blockchain i\u00e7ine ekliyorlar ve bu noktada i\u015fleminiz onaylan\u0131yor ve kar\u015f\u0131l\u0131kl\u0131 para transferleri ger\u00e7ekle\u015fiyor. Bu problemi \u00e7\u00f6zen ve blockchain olu\u015fturan ki\u015fi de yapt\u0131\u011f\u0131 i\u015flem kar\u015f\u0131s\u0131nda 1 bitcoin ile \u00f6d\u00fcllendiriliyor.Blockchain yani blok zinciri, ayn\u0131 bir Linked List gibi kendisinden \u00f6ncekini biliyor, yani kendisinden \u00f6nceki blok ile zincirleniyor. B\u00f6ylelikle son zinciri bilirseniz tarihin en ba\u015f\u0131na kadar gidebiliyorsunuz. Ancak iyi haber; bu i\u015flemlerin g\u00f6ndereni ve kabul edeni k\u0131s\u0131mlar\u0131nda isim de\u011fil anonim adresler yaz\u0131yor. Yani i\u015flemleri g\u00f6r\u00fcyorsunuz ancak bu i\u015flemleri kim neden yapm\u0131\u015f takip etmeniz m\u00fcmk\u00fcn de\u011fil. Bu noktada tart\u0131\u015fmak istedi\u011fim \u00e7ok fazla konu var \u00f6rne\u011fin bu sistemin zafiyetleri yok mu? E madem zor bir problem bu, o zaman bir de ben onun \u00e7\u00f6z\u00fclmesini mi bekleyece\u011fim? Ben \u2018proof of work\u2019 diye bir \u015fey duydum o neydi? gibi. Ancak yaz\u0131n\u0131n amac\u0131ndan sapmamas\u0131 i\u00e7in burada duruyorum, aksilik \u00e7\u0131kmazsa ileride yazaca\u011f\u0131m yaz\u0131larda ya da video kay\u0131tlar\u0131nda bunlara de\u011finece\u011fim.Ethereum diyorduk sen bize ne anlat\u0131yorsun!Durun durun geliyorum oraya. En ba\u015fta Bitcoin ile Ethereum\u2019un \u00e7ok benzedi\u011finden bahsetmi\u015ftim, e\u011fer bunun nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 anlatmasayd\u0131m bundan sonra s\u00f6yleyeceklerimi anlatmak \u00e7ok zor olurdu. Yukar\u0131da \u00e7ok kabaca blockchain\u2019in ne oldu\u011fundan ve sistemin transparan \u00e7al\u0131\u015ft\u0131\u011f\u0131ndan bahsetmeye \u00e7al\u0131\u015ft\u0131m. Burada odaklanman\u0131z\u0131 istedi\u011fim bir ka\u00e7 konu var, t\u00fcm i\u015flemler \u015feffaf bir \u015fekilde herkesle payla\u015f\u0131yor ve sizin i\u015fleminizi sizin tan\u0131mad\u0131\u011f\u0131n\u0131z birisi onayl\u0131yor ve herkesle payla\u015f\u0131yor.\u0130\u015fte bu sistemin en b\u00fcy\u00fck getirisi ortada merkezi bir arac\u0131 yok. Yani devletler bu sistemi engelleyemiyor ve denetleyemiyor. Ancak kimsenin denetlemesine gerek kalmadan bu sistem transparanl\u0131\u011f\u0131 ve anonimli\u011fi sayesinde g\u00fcvene ihtiya\u00e7 duymadan sorunsuz bir \u015fekilde \u00e7al\u0131\u015f\u0131yor. Bu gibi uygulamalara \u2018Trustless\u2019 uygulamalar da deniyor. Yani g\u00fcvene ihtiya\u00e7 duymadan i\u015flemlerini ger\u00e7ekle\u015ftirebiliyorsun.Ethereum da bu sistemin neredeyse t\u00fcm \u00f6zelliklerini bar\u0131nd\u0131r\u0131yor ve \u00fczerine yeni bir \u00e7ok \u015fey ekliyor. Belki de en \u00f6nemli fark\u0131 sundu\u011fu \u2018Ak\u0131ll\u0131 Kontratlar\u2019.Yeter art\u0131k! Nedir yahu bu Ethereum?Ethereum, a\u00e7\u0131k kaynak kodlu ve herkesin kullan\u0131m\u0131na a\u00e7\u0131k blockchain teknolojisini kullanan \u2018merkezi olmayan\u2019 (Decentralized) bir uygulama \u00e7al\u0131\u015ft\u0131rma platformu. \u0130lk defa 2013 y\u0131l\u0131nda Vitalik Buterin ad\u0131nda bir yaz\u0131l\u0131mc\u0131 taraf\u0131ndan ortaya at\u0131l\u0131yor ve 2015 y\u0131l\u0131nda canl\u0131 bir sistem olarak hayata ge\u00e7iyor. \u015eu anda hala daha Ethereum kom\u00fcnitesi taraf\u0131ndan geli\u015ftirilmeye ve desteklenmeye devam ediyor. Ethereum sisteminin para birimi \u2018Ether\u2019 (ETH). \u015eu anda de\u011feri 326 dolar civar\u0131nda ancak \u00e7ok de\u011fi\u015fken seyrediyor, dolay\u0131s\u0131yla yat\u0131r\u0131m ama\u00e7l\u0131 bak\u0131ld\u0131\u011f\u0131nda epey riskli. Ancak benim ilgilendi\u011fim k\u0131sm\u0131 bu de\u011fil.Bu sistemin Bitcoin\u2019den en b\u00fcy\u00fck fark\u0131 az \u00f6nce s\u00f6yledi\u011fim gibi \u2018Smart Contract\u2019 yani ak\u0131ll\u0131 kontratlar. Bu platform EVM (Ethereum Virtual Machine) denilen bir VM sayesinde Solidity ad\u0131ndaki dili kullanarak yazd\u0131\u011f\u0131n\u0131z uygulamalar\u0131 da\u011f\u0131t\u0131k bir \u015fekilde \u00e7al\u0131\u015ft\u0131rman\u0131za olanak sa\u011fl\u0131yor. Yani kar\u015f\u0131l\u0131kl\u0131 bir i\u015flem ger\u00e7ekle\u015ftirmek istedi\u011finizde Bitcoin\u2019de oldu\u011fu gibi basit i\u015flemler yapabilmenize ek olarak bir de bu i\u015flemleri belirli kurallarla programlamaniza olanak sa\u011fl\u0131yor.Diyelim ki birisine internet \u00fczerinden \u00fcr\u00fcn sat\u0131\u015f\u0131 yapmak istiyorsunuz. \u015eu anda ebay gibi siteler al\u0131c\u0131 ve sat\u0131c\u0131 aras\u0131nda arac\u0131 olarak bir g\u00fcvence sa\u011fl\u0131yorlar. Yani \u00fcr\u00fcn gelmeden paray\u0131, para gelmeden de \u00fcr\u00fcn\u00fc de\u011fi\u015f-toku\u015f yapm\u0131yorsunuz. E\u011fer al\u0131c\u0131 belli bir s\u00fcre i\u00e7erisinde \u00fcr\u00fcn\u00fcn ula\u015fmad\u0131\u011f\u0131n\u0131 bildirmezse para sat\u0131c\u0131n\u0131n hesab\u0131na ge\u00e7iyor. Ancak aradaki arac\u0131 da bu i\u015flemden belli bir miktar komisyon al\u0131yor. \u0130\u015fte bu gibi i\u015flemleri Ethereum \u00fczerinde Solidity dilini kullanarak bir ak\u0131ll\u0131 kontrata kodlay\u0131p bu i\u015flemlerin bir arac\u0131 ile de\u011fil bu a\u011f \u00fczerinde yap\u0131lmas\u0131n\u0131 sa\u011flayabilir ve aradaki arac\u0131y\u0131 (middle man) ortadan kald\u0131r\u0131p ald\u0131\u011f\u0131 komisyondan \u00e7ok daha ucuza halledebilirdiniz. Tabi bunun gibi bir \u00e7ok kullan\u0131m alan\u0131n\u0131 \u00f6rneklemek m\u00fcmk\u00fcn.Peki nas\u0131l \u00e7al\u0131\u015f\u0131yor bu\u00a0sistem?Bunu konu\u015fmadan \u00f6nce basit bir iki temel bilgiyi vermek gerekiyor.Ethereum a\u011f\u0131 i\u00e7erisinde durum yani \u0130ngilizce\u2019si ile \u2018state\u2019 hesaplarla (Account) saklan\u0131yor. Her bir hesap 20-byte\u2019l\u0131k bir adrese sahip ve i\u015flemler yani transaction\u2019lar bu 20-byte\u2019l\u0131k adresler aras\u0131nda ger\u00e7ekle\u015fiyor. Bir hesap nesnesinin bir ka\u00e7 \u00f6zelli\u011fi var;\u0130\u015flemlerin sadece bir kere ger\u00e7ekle\u015fmesini sa\u011flamak i\u00e7in tutulan bir saya\u00e7 de\u011feri; nonce.Hesaptaki Ether miktar\u0131E\u011fer mevcutsa, kontrata ait \u00e7al\u0131\u015ft\u0131r\u0131labilir kod par\u00e7as\u0131.Hesaba ait saklanan veri.Yukar\u0131daki alanlardan e\u011fer sadece Ether miktar\u0131 mevcutsa bu hesap bir dijital c\u00fczdan gibi davran\u0131rken, buna bir kod par\u00e7as\u0131 ekledi\u011finizde bir ak\u0131ll\u0131 kontrata d\u00f6n\u00fc\u015f\u00fcyor. Bu kontratlar da a\u011fa \u2018deploy\u2019 ediliyorlar. Kontratlar\u0131n kodlar\u0131 daha \u00f6nce de bahsetti\u011fim gibi, Solidity denilen bir dil ile yaz\u0131l\u0131yor. Bu yaz\u0131da buna odaklanmayaca\u011f\u0131m ancak bu dil ile ilgili bilgi almak istiyorsan\u0131z daha \u00f6nceden kaydetti\u011fim Solidity 101 video\u2019sunu izleyebilirsiniz. Yak\u0131nda daha ileri seviye video\u2019lar da Codefiction Youtube kanal\u0131ndan yay\u0131nlanacak.Ethereum a\u011f\u0131 i\u00e7erisindeki kontratlar sistem i\u00e7erisinde s\u00fcrekli ya\u015fayan nesneler. Yani siz bir kontrat olu\u015fturup bunu bir program gibi istedi\u011finiz zaman \u00fczerine tan\u0131mlad\u0131\u011f\u0131n\u0131z fonksiyonlar\u0131n\u0131 \u00e7al\u0131\u015ft\u0131rabilirsiniz. Mesela Solidity 101 video\u2019sunda anlatt\u0131\u011f\u0131m gibi ba\u015fkalar\u0131yla payla\u015fabilece\u011finiz ortak bir banka hesab\u0131 yarat\u0131p istedi\u011finiz zaman buraya g\u00fcvenilir bir \u015fekilde Ether aktarabilir ya da \u00e7ekebilirsiniz. Yapaca\u011f\u0131n\u0131z her i\u015flem bir ba\u015fkas\u0131 taraf\u0131ndan \u00e7al\u0131\u015ft\u0131r\u0131laca\u011f\u0131 i\u00e7in, \u00e7al\u0131\u015ft\u0131r\u0131lacak kodun ad\u0131m say\u0131s\u0131na ba\u011fl\u0131 olarak, belli bir miktar \u00fccret de \u00f6demeniz gerekecektir. Yani e\u011fer \u00e7al\u0131\u015ft\u0131r\u0131lacak fonksiyon \u00e7ok fazla ad\u0131mdan olu\u015fuyorsa \u00f6demeniz gereken \u00fccret de buna ba\u011fl\u0131 olarak artacakt\u0131r. Demem o ki, e\u011fer optimize bir algoritma \u00e7al\u0131\u015ft\u0131r\u0131yorsan\u0131z daha az maliyetiniz olacakt\u0131r. (Asymptotic Computational Complexity)Bir adrese para g\u00f6ndermek ya da bir adresteki kontrat\u0131n bir fonksiyonunu \u00e7a\u011f\u0131rarak bir i\u015flem ger\u00e7ekle\u015ftirmek gibi operasyonlara \u2018transaction\u2019 deniliyor. Anlam kaybolmas\u0131ndan korktu\u011fum i\u00e7in ne yaz\u0131k ki bundan sonra hep \u0130ngilizce terimleri kullanmaya ba\u015flayaca\u011f\u0131m. Transaction\u2019lar Ethereum a\u011f\u0131nda bir adresten tetiklenen imzalanm\u0131\u015f veri paketleri, yani mesajlar. Bu mesajlar i\u00e7erilerinde \u015funlar\u0131 bar\u0131nd\u0131r\u0131yorlar;Mesaj\u0131n al\u0131c\u0131s\u0131,G\u00f6ndereni tan\u0131mlayan bir dijital imza,Al\u0131c\u0131ya iletilecek Ether miktar\u0131,Hesaplarda oldu\u011fu gibi, opsiyonel bir veri saklama alan\u0131,EVM taraf\u0131ndan hesaplanan olas\u0131 maksimum i\u015flem ad\u0131m\u0131na ba\u011fl\u0131 olarak hesaplanan STARTGAS de\u011feri. Bu de\u011fer ilgili mesaj\u0131n \u00e7al\u0131\u015fmas\u0131 sonucunda ortaya \u00e7\u0131kabilecek maksimum maliyete kar\u015f\u0131l\u0131k geliyor. Ancak bu tabi ki sizin i\u015fleminizin bu kadara mal olaca\u011f\u0131 anlam\u0131na gelmiyor.G\u00f6nderen taraf\u0131ndan \u00f6denecek olan Ether miktar\u0131n\u0131 belirleyen GASPRICEBuradaki alanlardan ilk 4 tanesi Bitcoin ile ayn\u0131 \u00f6zellikleri ta\u015f\u0131yor. Ancak fark yaratan k\u0131sm\u0131 geriye kalan son iki alan. Bu alanlar Ethereum a\u011f\u0131na DOS sald\u0131r\u0131s\u0131 yap\u0131lmas\u0131n\u0131 engellemek i\u00e7in eklenmi\u015f alanlar. Yani k\u00f6t\u00fc niyetli birisinin sonsuz d\u00f6ng\u00fcye giren bir kontrat y\u00fckleyip bir madenciyi a\u011fdan d\u00fc\u015f\u00fcrmesini engellemek i\u00e7in kullan\u0131l\u0131yor. E\u011fer b\u00f6yle bir \u015fey denenirse \u00f6demesi gereken miktar \u00e7ok fazla olaca\u011f\u0131 i\u00e7in k\u00f6t\u00fc niyetli ki\u015fileri cayd\u0131r\u0131yor.GAS denilen birim ise her i\u015flem ad\u0131m\u0131na g\u00f6re hesaplan\u0131yor. Yani e\u011fer bir kontrat\u0131n bir sonraki halinde \u00e7ok fazla veri olu\u015fturulursa bu durumda \u00f6denmesi gereken GAS miktar\u0131 da ona oranla art\u0131yor. Bu GAS de\u011feri de i\u015flemi \u00e7al\u0131\u015ft\u0131ran madenciye o anda i\u015flemci g\u00fcc\u00fcn\u00fc kulland\u0131\u011f\u0131 i\u00e7in \u00f6d\u00fcl olarak g\u00f6nderiliyor. \u00d6rne\u011fin bir ak\u0131ll\u0131 kontrat\u0131n bir hesap yap\u0131p ya da kural \u00e7al\u0131\u015ft\u0131r\u0131p Ether ya da bir token transferi yapmas\u0131 yeni bir kontrat durumu yani \u2018state\u2019 olu\u015fturaca\u011f\u0131 i\u00e7in bunun i\u00e7in belli bir miktar GAS \u00f6demesi gerekirken mevcut bir kontrat\u0131n o andaki durumunun okunmas\u0131 yeni bir \u2018state\u2019 olu\u015fturmayaca\u011f\u0131 i\u00e7in \u00fccretsiz ger\u00e7ekle\u015febiliyor.", "responses": "5"}, {"title": "Crypto Craze: Ethereum May Not Be A Bubble Despite 3,700% Explosion", "author_name": "Forbes", "link": "https://medium.com/forbes/crypto-craze-ethereum-may-not-be-a-bubble-despite-3-700-explosion-a4f7e50d03ce?source=search_post", "post_date": "Nov 12, 2017", "readtime": "6 min read", "upvotes": "", "content": "Crypto Craze: Ethereum May Not Be A Bubble Despite 3,700% ExplosionIf it is a bubble, it\u2019s still a far cry from the magnitude of the dot-com\u00a0crash.ForbesBlockedUnblockFollowFollowingNov 12, 2017The Ethereum virtual currency logo is displayed on an automated teller machine (ATM) at the Coin Trader bitcoin retail store in Tokyo, Japan, on Wednesday, Aug. 30,\u00a02017By Ky Trang HoThe Ethereum virtual currency logo is displayed on an automated teller machine (ATM) at the Coin Trader bitcoin retail store in Tokyo, Japan, on Wednesday, Aug. 30, 2017\u2026", "responses": ""}, {"title": "Ethereum Meta Transactions", "author_name": "Austin Thomas Griffith", "link": "https://medium.com/@austin_48503/ethereum-meta-transactions-90ccf0859e84?source=search_post", "post_date": "Aug 10, 2018", "readtime": "6 min read", "upvotes": "1.8K", "content": "Ethereum Meta TransactionsLowering barriers to drive mass Ethereum\u00a0adoptionAustin Thomas GriffithBlockedUnblockFollowFollowingAug 10, 2018IntroductionDapps require way too much onboarding. The Ethereum ecosystem needs to push toward mass adoption by allowing new users immediate access to functionality and interactivity without all the hoops to jump through.This means paying the gas for first time users. There is no native method to do this in the Ethereum protocol, yet. However, thanks to public/private key pairs, users can sign meta transactions and incentivize desktop miners to pay the gas for them.Key pairs will exist in your browser first and will be generated automatically. The cypherpunks are really going to hate this one, but users shouldn\u2019t be bothered with downloading a wallet up front. First, they need to use the product and provide value within the Dapp. Once they receive some tokens or Ether, they should be prompted to move to a wallet like MetaMask or Trust.", "responses": "3"}, {"title": "Try out Ethereum using only nodejs and\u00a0npm!", "author_name": "CodeTract", "link": "https://medium.com/@codetractio/try-out-ethereum-using-only-nodejs-and-npm-eabaaaf97c80?source=search_post", "post_date": "Feb 4, 2017", "readtime": "5 min read", "upvotes": "585", "content": "Try out Ethereum using only nodejs and\u00a0npm!CodeTractBlockedUnblockFollowFollowingFeb 4, 2017Image modified from https://www.ethereum.org/Ethereum is a decentralized smart contract platform. In this tutorial we will go through deploying and interacting with a smart contract using only nodejs and npm. This will bring you through many useful tools created by other developers.First, install the dependencies.$ npm install web3@0.19 ethereumjs-util@4.4 ethereumjs-tx@1.3 eth-lightwallet@2.5Next, obtain an address and its private key using MyEtherWallet. First, type in a password to encrypt your wallet file and download your wallet file. Then upload your wallet file to view your private keys.Next, obtain some Ether so that transactions can be sent. We will be using the Rinkeby testnet and their Ether can be obtained for free at this faucet. Follow the instructions and with your address obtained above, use that at the faucet for free Ether.Next, check the balance of your account at Etherscan.After the transaction is confirmed, you now have some Ether that can be used to pay for transaction fees.Now, we can start coding, first, we create a new file tryEthereum.js and require all our dependencies.var Web3 = require('web3');var util = require('ethereumjs-util');var tx = require('ethereumjs-tx');var lightwallet = require('eth-lightwallet');var txutils = lightwallet.txutils;As we are not running a local Ethereum node, we can connect to a remote node provided by Infura to enable us to communicate with the Ethereum network.var web3 = new Web3(    new Web3.providers.HttpProvider('https://rinkeby.infura.io/'));Next, we note down our address and private key from a previous step.var address = '0x8D68583e625CAaE969fA9249502E105a21435EbF';var key = '1ce642301e680f60227b9d8ffecad474f15155b6d8f8a2cb6bde8e85c8a4809a';In this tutorial, we will deploy a simple ballot smart contract, vote on one of the proposals and check which proposal has been voted on. An example smart contract written in Solidity can be obtained at Remix.The ballot smart contract code can also be found here in case it is not loaded automatically. The solidity code is compiled into bytecode for execution in the Ethereum virtual machine. The interface provides the mapping for a higher language to interact with the smart contract. Note them down.var bytecode = '6060604052 ...';var interface = [{ \"constant\": false, \"inputs\": ...;Next, we create a function that signs transaction with our private key and sends them to the Ethereum network.function sendRaw(rawTx) {    var privateKey = new Buffer(key, 'hex');    var transaction = new tx(rawTx);    transaction.sign(privateKey);    var serializedTx = transaction.serialize().toString('hex');    web3.eth.sendRawTransaction(    '0x' + serializedTx, function(err, result) {        if(err) {            console.log(err);        } else {            console.log(result);        }    });}We can now deploy the ballot smart contract by constructing the following transaction.var rawTx = {    nonce: web3.toHex(web3.eth.getTransactionCount(address)),    gasLimit: web3.toHex(800000),    gasPrice: web3.toHex(20000000000),    data: '0x' + bytecode + '0000000000000000000000000000000000000000000000000000000000000005'};nonce is a sequential integer that keeps track of the number of outgoing transactions and should be 0 since this is the first transaction we are sending. But here we obtain the nonce from the network to make the code more general.gasLimit is the maximum amount of gas we are willing to pay for this transaction.gasPrice is the price we are willing to pay for the gas used for this transaction. gasPrice x gas used will be the amount of transaction fee that we pay in ether.data is the added instructions for the transaction. Here, we include the bytecode to instruct the creation of our ballot smart contract. The zero padded 5 is an argument to the smart contract, meaning the ballot has 5 proposals.Looking back to the solidity code, 5 will be the argument _numProposals for the constructor Ballot.function Ballot(uint8 _numProposals) {    chairperson = msg.sender;    voters[chairperson].weight = 1;    proposals.length = _numProposals;}Now, send the transaction by calling the functionsendRaw(rawTx);and running the script.$ node tryEthereum.jsUsing Etherscan again, we should see a pending contract creation.Wait for the transaction to confirm and click into it, the address of the contract should be displayed.We have successfully deployed a smart contract! Note down the\u00a0address.Back to our code, we will now construct a transaction to vote on proposal 4.var contractAddress = '0x3ea36fad89cafdc84bc0ce82e0d98c6c0a796b19';var txOptions = {    nonce: web3.toHex(web3.eth.getTransactionCount(address)),    gasLimit: web3.toHex(800000),    gasPrice: web3.toHex(20000000000),    to: contractAddress}var rawTx = txutils.functionTx(interface, 'vote', [4], txOptions);sendRaw(rawTx);Send the transaction$ node tryEthereum.jsWait for the transaction to confirm and then we can check the proposal that was voted on by querying the smart contract with the following code.var contract = web3.eth.contract(interface);var instance = contract.at(contractAddress);instance.winningProposal.call(function(err, result) {    if(err) {        console.log(err);    } else {        console.log(result.toNumber());    }});Send the query and it should return 4.$ node tryEthereum.jsWe have successfully voted and verified the vote! That is all for now and since we still have some left over ether, we can send back to the faucet.var rawTx = {    nonce: web3.toHex(web3.eth.getTransactionCount(address)),    gasLimit: web3.toHex(21000),    gasPrice: web3.toHex(20000000000),    to: '0x31B98D14007bDEe637298086988A0bBd31184523',    value: web3.toHex(web3.toBigNumber(web3.eth.getBalance(address))          .minus(web3.toBigNumber(21000).times(20000000000)))};sendRaw(rawTx);$ node tryEthereum.jsTo recap, we have deployed a smart contract, interacted with it and verified our interaction. The code used can also be found here. I hope you are feeling the potential of Ethereum and already thinking how smart contracts can disrupt many industries. There are many resources online and you can find a few below to start your journey on exploring Ethereum!Ethereum main site https://www.ethereum.org/Mist, one of Ethereum\u2019s client https://github.com/ethereum/mist/releases\u00a0Solidity http://solidity.readthedocs.io/en/latest/\u00a0Web3 api https://github.com/ethereum/wiki/wiki/JavaScript-API\u00a0Community discussions https://www.reddit.com/r/ethereum/Do note that this tutorial is only meant for a quick first experience with Ethereum. If you are starting to develop on it, it is recommended to use a client so that you can take advantage of libraries and frameworks that have better abstractions for creating transactions.Follow us on Twitter and Medium for more updates!", "responses": "11"}, {"title": "Why EOS over Ethereum for Insights\u00a0Network", "author_name": "Insights Network (INSTAR)", "link": "https://medium.com/insightsnetwork/why-eos-over-ethereum-for-insights-network-7521aa4f7076?source=search_post", "post_date": "Apr 9, 2018", "readtime": "3 min read", "upvotes": "1.8K", "content": "Why EOS over Ethereum for Insights\u00a0NetworkInsights Network (INSTAR)BlockedUnblockFollowFollowingApr 9, 2018When our team first discussed requirements for the Insights Network platform, it quickly became clear that we must build on a blockchain which is scalable, easy to iterate upon and above all else, secure. After much deliberation between Ethereum and EOS, it was evident that the best way forward for our platform was to embrace EOS and its surrounding ecosystem.Although Ethereum has plans to increase their current limit of approximately 21 transactions per second (specifically, Casper, Plasma and Raiden), we were attracted to the EOS team\u2019s mentality of building a blockchain that was designed to scale from the start. Prior to the inception of Insights Network, we had followed Dan Larimer\u2019s work with BitShares as the technical leader behind the first large scale consumer application powered by a blockchain, Steemit. We were thrilled to see an in-use and scaled out implementation of the Graphene engine, and knew that these experiences would only increase the EOS team\u2019s chances for success of reaching \u201cunlimited transactions per second\u201d. With the slowdown of the Ethereum blockchain during a big ICO or the traction being gained from a viral DApp (e.g. Cryptokitties), we were encouraged by the guarantee that purchasing a set amount of EOS tokens provides our platform with a set amount of computing power and network bandwidth. In short, our team can scale the Insights Network platform with no detrimental effects to users, regardless of whatever else may be running on the EOS blockchain.Being an early adopter is never easy, and inevitably our team reaches roadblocks when developing. We\u2019ve often found our questions answered on the EOS Developers Telegram channel in a timely manner or already covered in the documentation provided by the development team. Given that EOS smart contracts are written in C++ (ultimately compiled to WebAssembly to be deployed on the blockchain), a strongly typed language with an already rich community behind it, we can quickly ascertain if our bugs stem from an improper use of the language itself or are more akin to a smart contract problem. When we had our test contracts finished, we could quickly deploy them to local private testnets as well as the main public testnets using the `eosc` and `eosd` tooling. EOS\u2019s commitment to developers like Insights Network is reflected in their flourishing community on Telegram and rocketing growth to 5,000+ Github stars in a matter of months. Furthermore, it\u2019s encouraging to see the the delivery of the recent Dawn 3.0 release, bringing to fruition features that only existed in the white paper a year ago. With this new release, there has never been a more exciting time to begin development on the EOS blockchain, and we highly recommend it to new projects looking for an alternative to Ethereum.Scalability and developer commitment mean nothing if we cannot ensure the security of our users\u2019 data. Time is a critical component of security, and in the majority of cases, it is not possible to know if a private key has been compromised until it has been used by a malicious actor. EOS allows us to indicate that certain messages must wait a minimum period of time after being included in a block before they can be applied, during which they can be cancelled. In the case of a data request, if an Insights Network user did not authorize the request, he or she will be notified via text message or email and be provided a window of opportunity to cancel the request before the message is applied to the blockchain. EOS also allows our users to require that some operations are approved by multiple parties. If desired, our users can stipulate that making a data request requires approval by several people within their organization.The entire Insights Network team has been working extremely hard over the past few months to push forward on our delivery timelines. We certainly couldn\u2019t have made as much progress as we have if we didn\u2019t make the early decision to build on the EOS blockchain. The EOS team has created a tremendous developer community\u200a\u2014\u200aa rich ecosystem that we look forward to further investing in and ultimately being one of the first applications to go live on the EOS main network!", "responses": "3"}, {"title": "The Great Filter: Why You Shouldn\u2019t ICO on\u00a0Ethereum", "author_name": "Team Member", "link": "https://medium.com/stellarxhq/the-great-filter-why-you-shouldnt-ico-on-ethereum-6fe696a35873?source=search_post", "post_date": "Aug 14, 2018", "readtime": "11 min read", "upvotes": "1.3K", "content": "The Great Filter: Why You Shouldn\u2019t ICO on\u00a0EthereumTeam MemberBlockedUnblockFollowFollowingAug 14, 2018While we finish up StellarX, I wanted to share a research project on Ethereum we did earlier in the year. It\u2019s an open secret that it\u2019s simply the wrong platform for most of the stuff being built on it\u200a\u2014\u200ait\u2019s not, of itself, a bad technology, but entrepreneurs have applied Ethereum to the wrong uses.A reckoning is coming, something like the Great Filter:\u2026where high costs and slow performance cull almost the entire ecosystem, and unless your project is specifically adapted to Ethereum\u2019s strengths, it will die alongside so many others.I\u2019m pretty tired of people debating cryptocurrency using stuff they either made up or copied, fingers-crossed, from some untested whitepaper. So here I use actual data from actual tests that cost us an actual thirteen thousand dollars. My team and I spent that money running an \u201cat-scale\u201d app for a total of ten hours on the Ethereum network, when gas prices were low, so it\u2019s a mere pittance compared to what your blockchain company will pay to learn these same lessons in a real deployment.Ethereum\u2019s Strengths and WeaknessesEthereum is a distributed programming platform\u200a\u2014\u200ascripting software for autonomous organizations and ownerless apps. Vitalik himself put it like this, in his original announcement on bitcointalk:Ethereum is a modular, stateful, Turing-complete contract scripting system\u2026our goal is to provide a platform for decentralized applications.Today, as in 2014, if you\u2019re building a distributed computer program, something with no sole owner and no centralized decision-making apparatus, Ethereum is a great choice. For the perfect use case, think something like Augur\u200a\u2014\u200athey needed a fully automated, ownerless way to make truth-decisions about real world events\u2026so they could circumvent regulatory enforcement for what is basically a gambling platform.But most blockchain companies don\u2019t need smart contracts to execute their core business logic or want to dodge some legal or jurisdictional problem. They just want to issue digital assets and process transactions. That\u2019s exactly where Ethereum will let you down. If you\u2019re building something where:you issue a tokenthat users will trade back and forth, andyou want those trades to happen cheaply and in real-timeEthereum is the wrong choice. It\u2019s slow and it\u2019s really f\u2019ing expensive, and it fails to act like you want in both the \u201cone account doing a lot\u201d and the \u201cmany accounts doing a little\u201d cases.Let\u2019s get to the data. Our testing was based on a third-party load test, designed by Kik, and we tweaked the spec wherever possible to make Ethereum perform better. As you can see, it stubbornly defied our efforts. Our results and methodology are in our GitHub, and we encourage you to check our work.Problem 1: Your most enthusiastic users will have the worst experience.Ethereum queues transactions on a per-account basis, and yet miners don\u2019t prioritize transactions by wait time. In fact, given transactions with equal gas prices, miners are assigned them at random. So an active account builds up a transaction queue, and the network has no mechanism to clear it. The result, for high-volume accounts, is an ever-increasing transaction lag.Ethereum processes transactions using two numbers, a transaction nonce (what we\u2019ll call the \u201cnonce\u201d) and an account nonce that, for clarity, we\u2019ll sometimes call the \u201ccount\u201d. The transaction nonce puts an account\u2019s transactions in order; the account nonce counts whenever one of them is mined. When a new transaction, with its nonce, is submitted, Ethereum compares that nonce to the current count to decide what to do. If the transaction\u2019s nonce is lower than the count, the transaction is ignored. If it\u2019s higher, the transaction is delayed. Only if/when the nonce matches the count can the transaction move into a block. Here\u2019s a simplified diagram of how it works:This is actually very similar to the \u201cplease take a number\u201d systems you see at a deli or at a government office like the DMV, and it\u2019s a fairly common way to prevent replay attacks. Lots of other chains do something similar. However, Ethereum\u2019s transaction-to-block algorithm (or, really, lack thereof) adds the wrinkle that the people working your DMV window here\u200a\u2014\u200athe miners\u200a\u2014\u200aaren\u2019t necessarily accountable to the next number in line.Miners often have their own criteria for the transactions they\u2019ll accept. Many only accept high-gas-price transactions. Some only accept their own transactions. Miners like these will let block space go unused before filling it with something from your queue. So now imagine a DMV where certain windows are telling people \u201csorry can\u2019t help you,\u201d while more people file into the waiting room every second and you have all these jokers in front of you who have to get helped before you can even talk to someone\u200a\u2014\u200aand, voila, you have some idea of how Ethereum handles transactions.We weren\u2019t aware it worked like this until after we tried to implement Kik\u2019s load spec: 480 accounts each submitting 1 txn/minute on average for 3 hours. That\u2019s 86,400 total transactions, an average of 8 per second.We spun up the test, using ETH Gas Station\u2019s \u201cstandard\u201d estimates for gas, expecting a median confirmation time of about 30 seconds, and, lo and behold, 13 hours later, more than half of our transactions still hadn\u2019t made it into a block. We stopped the test at 13h and 50m, and 50.1% of our transactions were missing. (Reminder: the raw data is in our GitHub, if you want to check our work.) We thought we\u2019d messed up somehow, but, no. We had just created a bunch of long lines, and some jabroni transactions had stood there all day doing nothing.When you read elsewhere about \u201cEthereum transaction times\u201d, the posted numbers almost always suppose a single, one-off event. They do not pertain in an application-level environment. We ran the Kik test again just to really make sure we were doing everything right, spending another 6.9 ETH, and we got essentially the same result.Here\u2019s a typical experience from that run\u200a\u2014\u200athis is just the account that happened to be first alpha-numerically. You can see the wait times grow as transactions pile up.It\u2019s one thing to talk about \u201csettlement time\u201d in the abstract. But think about the above data in terms of actual user experience. The more someone uses your Ethereum app, the slower it goes. After just three hours, their transactions are taking 8 hours to confirm.Of course Kik\u2019s test spec said we should submit transactions for three hours and then stop, so that\u2019s what we did. In the real world, you can\u2019t build in downtime to allow the count to catch up\u200a\u2014\u200aso in theory transaction queues just get worse and worse. In practice, of course, as your Ethereum app becomes unresponsive, users will help it catch up, by leaving.Here\u2019s the performance distribution from that second test. I trimmed the slowest 5% so the long-tail doesn\u2019t skew the overall picture.For comparison, this is what Kik measured running the same spec (on Stellar.)I just grabbed this plot from their post, and I don\u2019t have the original data, so I can\u2019t show my results on the same chart. But using the magic of computers, I can at least overlay the curves:Everything looks comparable until you notice the x-axes. The waits we measured on Ethereum are 3,000 times longer. That\u2019s the queuing problem in a nutshell.This performance issue is currently a fundamental part of Ethereum. Improvements like sharding or Casper are promising in theory, but those will be complex fixes layered over Ethereum\u2019s almost maximal complexity. Something like lightning can rely on Bitcoin\u2019s inherent simplicity; whereas there\u2019s nothing basic to fall back on here. A skyscraper is usually built on bedrock, not on top of another skyscraper, yet that is what a lot of Ethereum scaling solutions propose to do.The only certain performance improvement is to spend more on gas and hope to plow through each account queue faster. We in fact did that in a third three-hour trial\u200a\u2014\u200awhich we ran because of our \u201cwe should do what we can to make this work\u201d commitment.The previous two tests had used the \u201cstandard\u201d ETH Gas Station recommendation. We used the \u201cfast\u201d tier (\u22484 Gwei at the time) for the third and spent 11.8 ETH on our 480 accounts.Performance improves\u200a\u2014\u200ato only 500 times slower than Kik\u2019s results on Stellar\u200a\u2014\u200abut it\u2019s still not fast enough. The backlog builds and payments hang around with nothing to do.disaffected transactions come together to form a sceneProblem 2: Very High Cost of Wide\u00a0AdoptionEver thus to power users. But Ethereum is also unsuitable for the other kind of adoption, what you might see with an app like, I dunno, Etsy, where instead of a few people going deep, you have lots of people checking in every once in a while. That\u2019s because an Ethereum app\u2019s per-user costs go up quickly as it adds users, and that\u2019s why you see stuff like 70x price spikes whenever anyone tries using the network across many accounts.We captured this data incidentally, looking for a workaround to the queueing problem. To keep transactions from piling up, we refactored the Kik spec as follows: instead of a few accounts submitting a bunch of transactions, we spun up a bunch of accounts (28,800) and had each of them just do a single transaction. To stick to the original test\u2019s guideline of 8 total txn/s we submitted the transactions over the course of an hour.Curiously, this didn\u2019t actually help performance very much. The median confirmation time was 23 minutes\u200a\u2014\u200aactually slower than the \u201cfast\u201d test above. Even weirder, some of the first transactions we submitted were the last to confirm:We knew account queues couldn\u2019t be the issue. It turned out that as soon as our transactions started hitting the network, miners\u2019 fees soared. So our earliest transactions, submitted with pre-test \u201cstandard\u201d pricing, were quickly priced-out. They lingered in low priority for hours.We had discovered another of Ethereum\u2019s negative reinforcement loops. Adding users immediately scales cost. In the real world, increasing the number of units implies lower per-unit costs. Basically the whole private sector is built on this idea\u200a\u2014\u200a\u201ceconomy of scale\u201d. But here: each incremental user immediately increases the per-user cost. It\u2019s like bizarro economics.You can see prices climbing \u22486x over the short 1-hour run of our test.Again, the built-in time limit of the test makes everything look more sustainable than it actually is. Extrapolate this chart out and drop the needle somewhere in the middle. What do your per-user costs look like after two weeks of steady usage? Two years?The above test cost us $1,445 for a single hour. It ran when gas prices were low, just \u22481 Gwei for standard speed, and it puttered along at just 8 transactions a second. To run a basic test, that\u2019s $12.6m a year.If you apply that cost structure to a real business, you see that Ethereum\u2019s fees are already unsustainably high. For example, PayPal does about 240 transactions a second. Put aside the performance fixes it would take to make that happen and put aside the rising-price dynamic I just documented. If PayPal had been built on Ethereum and paid our observed rate, they would\u2019ve laid out $380m in network fees last year. That would\u2019ve been 21% of their net income, and, again, that\u2019s pretending that you could somehow freeze prices.An idealized version of Ethereum won\u2019t work for one of the most profitable transactional businesses in the world. How is the real version going to work for the rest of us?Now what?\u201cIf you want to build a decentralized Uber and Lyft on top of an unscalable Ethereum, you are screwed. Full stop.\u201d\u200a\u2014\u200aVitalik ButerinI encourage you to watch the full panel this quote came from\u200a\u2014\u200ait shows four of the most important members of the Ethereum team saying a lot of what I\u2019ve been saying here. When today\u2019s high-profile ICO becomes tomorrow\u2019s cautionary tale, it will only be bad for everyone in the ecosystem, and they know it.There\u2019s no doubt that the Ethereum community is the strongest in blockchain, and there very likely wouldn\u2019t be token economies at all without Vitalik\u2019s vision. It\u2019s not Ethereum\u2019s fault that developers are asking from the tech what it was never meant to deliver. It\u2019s the people chasing last year\u2019s ICO dollars, regardless of what\u2019s actually the right tool. Ethereum\u2019s problems all start with misguided entrepreneurs. Don\u2019t become another one of them.If you\u2019re building a transactional app, the protocol will not support the behavior your users will expect. I have immense respect for the ambition and the complexity of Ethereum, but I\u2019ve come to see it as blockchain haute couture. Beautiful, intricate, high-concept, high-minded. And not what you wanna wear to work.another young developer regrets his\u00a0choicesIf you want trustless, distributed computation\u200a\u2014\u200aif that\u2019s really what you\u2019re building\u200a\u2014\u200adefinitely use it. If you never plan to actually launch anything, Ethereum\u2019s great for that, too\u200a\u2014\u200ajust ask the over 50% of ICO projects who disappear after their token sales, if you can find them. They\u2019ve already hit the Great Filter. And likely some beach in Puerto Rico.But if you want to build a business that sticks around\u200a\u2014\u200aif you plan a typical user-to-user service and don\u2019t need to tie up your business logic in a smart contract\u200a\u2014\u200aif you plan to issue a digital asset and you plan to transact at high volumes as a core part of your strategy, pick a platform that is optimized for that. Do what we did, and build on Stellar.", "responses": "4"}, {"title": "The emergent Ethereum\u00a0stack", "author_name": "Luis Cuende", "link": "https://medium.com/aragondec/the-emergent-ethereum-stack-cbce1895142f?source=search_post", "post_date": "Jul 13, 2017", "readtime": "3 min read", "upvotes": "221", "content": "The emergent Ethereum\u00a0stackdistrict0x, the first manifestation of the Ethereum + Aragon\u00a0stackLuis CuendeBlockedUnblockFollowFollowingJul 13, 2017Software allows us to abstract away from existing functionality to focus on building.At Aragon, we use Ethereum. Ethereum provides us the consensus layer to establish truth. And the ability to create smart contracts that are self-enforcing.So, generally speaking, we don\u2019t have to worry about Ethereum. We use Ethereum, driving usage to the platform, thus increasing its value. So we\u2019re indirectly funding its further development.That\u2019s the virtuous circle that tokenization makes possible.And now, the same is happening with Aragon. We\u2019re also building something that other projects want to abstract away. We\u2019re creating the most complete solution to create and maintain DAOs (Decentralized Autonomous Organizations), taking care of things such as upgradeability, conflict resolution, etc.A lot of emerging projects in the space will be DAOs, or will use DAOs for some aspect. The most common right now is token-driven governance, but there are more.But what\u2019s more exciting is not the projects that will just use it\u200a\u2014\u200ait is the ones that will build on top of it.And it is exciting because a new stack is being created. We\u2019re not talking about what blockchain are you using anymore, we will be talking about what\u2019s your stack.The first project to make use of the stack we\u2019re providing is district0x. district0x aims to create a network of decentralized markets on Ethereum, by using Aragon.Their stack will consist of Ethereum + Aragon + IPFS to power their platform. What Ethereum offers to Aragon is passed on to district0x, who benefits from what Aragon offers to them. district0x as a platform creates opportunities for others to benefit from their services. Decentraland\u2019s use of district0x will then gain all the benefits that this stack has to offer. Smart contracts by Ethereum, governance by Aragon, marketplace by district0x. All bringing their unique flavour to the stack that will enable Decentraland to create and explore shared experiences in virtual reality.I\u2019m excited about district0x for many reasons. First of all, it is making markets truly P2P (peer to peer). The whole wave of crowd-sharing/riding/etc wasn\u2019t truly P2P. They empowered human beings to do trade without companies or conglomerates, for sure. But they did always intermediate the connection between the peers.That causes a misalignment of incentives. The central company that runs the marketplace wants to squeeze both ends as much as possible to increase revenue.At Aragon, we believe that disintermediated models can align incentives much better. Or, as I previously stated:Disintermediating human trade\u200a\u2014\u200abusiness\u200a\u2014\u200ais the first step towards a more fair\u00a0worldThere is something funny about these blockchain stacks. Blockchain projects can sometimes seem as political parties, or at least, manifestations of ideas and values.And when you choose a blockchain stack, you are indirectly choosing your values.Ethereum\u2019s mission statement is to decentralize the world.Aragon\u2019s mission statement is to disintermediate trade.district0x\u2019s mission statement is to decentralize markets.Decentraland\u2019s mission statement is to create a decentralized metaverse.Each one\u2019s mission is a subset of the others.If you have coded before, this will sound a lot like inheritance.And it is, but heavily incentivized by tokens.In the old world, someone using your work would be seen as a thief, stealing. Now, the more people build upon your work, the more successful you will be. This also provides a new path for open source projects to grow and sustain their work.This inheritance also serves to help execute the previous projects visions. When someone creates a district on district0x, they\u2019re helping execute district0x\u2019s vision. But also Aragon\u2019s. And Ethereum\u2019s. Network effects arise and accumulate.So if district0x succeeds, we do too. They will be the first to try this blockchain stack model out which we\u2019re a part of. And we couldn\u2019t be more excited about that.", "responses": ""}, {"title": "The Complete Story of Ethereum so\u00a0far", "author_name": "WhalePanda", "link": "https://medium.com/@WhalePanda/the-complete-story-of-ethereum-so-far-b85ba182bb35?source=search_post", "post_date": "Aug 2, 2016", "readtime": "7 min read", "upvotes": "384", "content": "The Complete Story of Ethereum so\u00a0farThe Beginning:WhalePandaBlockedUnblockFollowFollowingAug 2, 2016Vitalik: Bitcoin is nice but I have a dream of building a decentralized smart contract platform. I will create something called Ethereum. A world where code is law, wouldn\u2019t that be perfect? I will need a few million funding in Bitcoin and on top of that I will create a 12 million Ether premine on a total of 72 million Ether, lol.Ethereum investors: Of course lord Vitalik, are you sure that\u2019s enough for you to dump on us and the Bitcoiners?Vitalik: Yes, that will do\u2026. for now\u2026The Development:Vitalik: We dumped all Bitcoin at the bottom and it will take us a few months longer.Ethereum investors: Oh lord Vitalik, don\u2019t worry we believe in you. Take your time, so everything will be bugfree (oops).The Deployment:Vitalik: So we\u2019ve finshed and Ethereum is ready to launch!Ethereum investors: Woohoo, finally!Vitalik: Yeah.. the thing is that we won\u2019t have a working windows wallet with GUI. \u00af\\_(\u30c4)_/\u00afEthereum investors: What?? But it\u2019s ok Lord Vitalik, if you say it\u2019s fine, it\u2019s fine for us.Vitalik: Oops, my bad, but yeah it\u2019s fine\u2026. lolBitcoiners: LOL, millions in funding and no proper wallet.The PR\u00a0push:Ethereum Foundation: We have set up a PR company called ConsenSys. They are very professional and they\u2019re going to help us get the word out about Ethereum.Ethereum Investors: Great! But how are we going to compete with Bitcoin?Ethereum foundation: In every single interview/article we do or release, we will trashtalk Bitcoin. We will bribe Mike Hearn to say release a statement about how sucky Bitcoin is.Ethereum Investors: Wow you guys are genius! Even though we have an inferior product, if we keep telling everyone it\u2019s better, in the end everyone will want it, Apple tactics 101.Ethereum foundation: Exactly and Mike Hearn is perfect for it, even though his contributions to Bitcoin are so tiny, newspapers don\u2019t know that lol. Mike Hearn is just in it for the money anyway.The DAO:Stephan Tual: Hey guys, I got this great idea for a company. It allows you to lock and unlock stuff through the blockchain.Ethereum Investors: Ok\u2026 but what\u2019s the point?Stephan Tual: But you guys, see the future, it\u2019s like Uber or Airbnb for locks.Ethereum Investors: Wow, I love it, this is the future, here take all our money!Stephan Tual: No, wait, let us code and set up a company through a smart contract, that way if something goes wrong (lol) noone can sue us for fucking up. We will also use the Ethereum foundation and PR machine to push this lock company!Ethereum Foundation: We endorse this, we checked the code and look we\u2019re even buying DAO ourselves, this is awesome, what could go wrong?Gavin Wood: Yeah\u2026 No thanks, I\u2019m resigning as curator, good luck though.Ethereum Foundation: ROFL, what a noob.Stephan Tual: I will sue you! Fudder!The HackStephan Tual: Your funds are perfectly fine, the \u201cexploit\u201d that they found is not relevant to the DAO lol, what do you think I\u2019m a noob or something? We did a $100k security audit, ok it ended up being around 100 words but it was worth it. And it said it\u2019s fine.3 days laterGriff: OH FUCK OH FUCK OH FUCK, WTF IS HAPPENING AAAAAAH!!! DON\u2019T PANIC GUYS BUT SOMEONE IS DRAINING THE DAO!!!Vitalik to all exchanges: FUCK,! Cancel all trading! Let\u2019s hard fork!Exchanges: What a shitcoin, no we won\u2019t stop trading.Vitalik: *crying* Please!Exchanges: Nope.Ethereum Foundation member talking to himself: Lol, noone suspecting a thing. Money, money money!Ethereum foundation: Yes, many of us invested in the DAO, but I promise that there is no conflict of interest. Also code is no longer law, even though it says so on the DAO website, but obviously this doesn\u2019t apply when we fuck up. Only when other people fuck up.Bitcoiners: Yep, as expected lol.Emin G\u00fcn Sirer: I told you this would happen, but don\u2019t worry in my odd vision of reality it\u2019s fine. Ethereum is fine.The Hard\u00a0Fork:Vitalik: Ok this is going to be very fast and easy. We just blacklist the child DAO\u2019s, we white hat drain the rest of the funds, we create a new contract that only allows to withdraw ETH.Stephan Tual: And report to me everyone who doesn\u2019t agree with the Hard Fork, I\u2019ll hunt them all down!Ethereum Investors: Ok\u2026. what happens with the extra Ethereum some investors paid for the DAO and what happens with the child DAO\u2019s that already split before and after the hack?Ethereum Foundation: Don\u2019t worry guys, we will handle it.Vitalik: You mean we keep it all for ourselves right?Ethereum foundation: D\u2019uh!Vitalik: Good because we\u2019re kind of running out of Ethereum to dump. Only 1.1 million left from the 12 million premine and that less than a year after launch lol.Ethereum foundation: Sick parties though.Vitalik: Indeed. Dear community, this is not a bail out, we will let you vote with your Ethereum on a website that noone even knows that exists and we will also check with the miners!Vitalik to Ethereum Foundation members: This should be pretty easy lol, everyone\u2019s Ethereum is locked in that DAO anyway HAHAHA. And yeah we\u2019ll have one of us vote pro hard fork and that\u2019s it.3 days before the hard fork:Vitalik: Dear community, it seems that we have consensus! Even though almost noone voted, well 1 guy had 25% of all pro HF votes lol, and the miners barely voted we can conclude that this is overwhelming consensus! Make sure everyone updates their clients, 3 days should be plenty!Exchanges: Fucking shitcoin, giving us 3 day warning wtf? And what if the coin splits in 2?Ethereum foundation: Don\u2019t worry about it, that won\u2019t happen, it will be maximum a few hours until that network dies and don\u2019t worry about the coins on the other network, noone will want them.Tristan from Poloniex to other exchanges: Maybe we should split them anyway just to be sure. We\u2019ve got a pretty basic contract set up to do it and we can share it.Philip from Bitfinex: Fucking incompetent bastards, I hate this shitcoin, I regret adding it.BTC-E: <crickets>Coinbase: <crickets>Day of the Hard Fork, 5 minutes after the hard fork:Ethereum Foundation: Success, we did it! Woohoo champagne!Stephan Tual: Woohoo, now maybe i won\u2019t get sued for totally fucking up 150 million dollars!Brian Armstrong: See, see see! That\u2019s how easy a hard fork is!Ethereum Classic: Hi, we\u2019re not dead yetEthereum Foundation: Lol, STFU noob.Ethereum Classic:Ethereum Classic: We are classic and we have exactly the same code as Ethereum, except we have immutability and we have principles! Our blocks are coming in at normal speed and people start trading more OTC on bitcointalk and other forums. Maybe some day we\u2019ll be added to an exchange.WhalePanda: Immutability has value, I\u2019m going to mine it with some miners from miningrentals.The next morning:Tristan from Poloniex: The Ethereum Foundation told us that the tokens on the other blockchain would be worthless and we see a lot of trading going on. They also said that the other blockchain would die in a few hours. Fuck those liars, lets list Ethereum Classic.Ethereum Foundation: LOL, Poloniex added Ethereum Classic, free money, lets dump hahahaha.Ethereum Investors: LOL, Poloniex added Ethereum Classic, free money, lets dump hahahaha.Ethereum Whales: This is going to be the easiest accumulation ever, everyone is dumping on the bottom.A few hours later:Ethereum Investors: WTF price is not going down, this is a scam! Fuck Poloniex! How dare they list it, even though I dumped myself and got free money out of it! Scammers!Poloniex: Heh, this is going better than expected, nice volume.Ethereum Whales: Accumulation, pump, shakeout, accumulation, pump, shakeout and repeat.Ethtards: This is the top, no wait.. this is the top\u2026 no wait\u2026 This is the top\u2026 it will start dumping now any second, just wait and see\u2026 This is the top.Bitcoiners: Interesting, a decent platform, with some bugs but without a dictator and plus immutability. Cool, going to buy some for fun.WhalePanda: Lol and to think my mining cost was 0.0001 BTC per coin. Why didn\u2019t I mine more?a few days later:Ethtards: This is the top\u2026Ethereum Foundation: Guys, they are pulling 3 times our volume, their hashrate is increasing, people are publicly supporting them. I think we have a problem. It seems we didn\u2019t brainwash all the Ethereum investors well enough to just blindly support us.Vitalik: Fuck, fuck, fuck when I told everyone this wouldn\u2019t happen I was wrong, how will people take me seriously from now on? AND WHO LEAKED THE FOUNDATION CHATLOGS?!?!?Coinbase: Errr Brian, I think we have a problem, our ETC is all gone.Brian Armstrong: No problem, I\u2019ll just say we don\u2019t support it lol.BTC-E: We lost all our ETC so we came to the conclusion that it\u2019s a scam.Emin G\u00fcn Sirer: This is fine, everything is fine, Ethereum is still better.Barry Shillbert: Finally, Ethereum with immutability and some balls, I\u2019ll have some of that!Ethtards: This is the top\u2026And now we wait until they reach parity at around 0.01 BTC.The End.. for now.", "responses": "23"}, {"title": "Introducing Swap: A Protocol for Decentralized Peer-to-Peer Trading on the Ethereum Blockchain", "author_name": "AirSwap Team", "link": "https://medium.com/fluidity/introducing-swap-a-protocol-for-decentralized-peer-to-peer-trading-on-the-ethereum-blockchain-d4058f3179cf?source=search_post", "post_date": "May 10, 2017", "readtime": "2 min read", "upvotes": "246", "content": "Introducing Swap: A Protocol for Decentralized Peer-to-Peer Trading on the Ethereum BlockchainAirSwap TeamBlockedUnblockFollowFollowingMay 10, 2017At Swap, we\u2019ve been thinking about the best ways to grow the Ethereum token trading ecosystem. Today we are pleased to present the Swap whitepaper for community review:Swap WhitepaperSwap is a protocol to facilitate a true peer-to-peer ecosystem for trading tokens on the Ethereum blockchain.swap.techThe two forces behind our design are decentralization and peer-to-peer. Decentralization allows users to exchange value in a \u201ctrustless\u201d way rather than depending on the security, ethics, and diligence of a central entity. Peer-to-peer allows users to quickly and privately trade with known counterparties, rather than posting orders to a public order book. We support and encourage the development of blockchain based order books, but do believe that they have several inherent limitations.We think there\u2019s a clear opportunity for a decentralized, peer-to-peer token trading platform:Unlike ShapeShift, Swap users can set prices and make orders, and have the ability to fill orders from multiple counterparties. Unlike 0x, Swap users are matched on intent to buy or sell, rather than trading on a public order book.Here\u2019s a demo of a simple trading app built on Swap:We\u2019ve designed the protocol to be straightforward and extensible and we\u2019ll open source our code soon to help kickstart app development. If you\u2019re a developer, we look forward to working with you to build your next token-aware application.You can always reach us at team@swap.tech for questions, comments, or interest. If you love building software on fast, dynamic teams, we\u2019re hiring.Thanks to: Mark D\u2019agostino, Joe Lubin, Carolyn Reckhow, Chris Lundkvist, Alex Miller, Deepa Sathaye, Rick Dudley, Zack Coburn, and James Young, for their feedback on the whitepaper.Disclaimer: The author is a resident of ConsenSys. The views expressed by the author above do not necessarily represent the views of ConsenSys AG. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": "5"}, {"title": "Ethereum is Not Secure and it\u2019s Delayed its Upgrade\u00a0again", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereum-is-not-secure-and-its-delayed-its-upgrade-again-18bfb8b9c4a5?source=search_post", "post_date": "Jan 16", "readtime": "3 min read", "upvotes": "913", "content": "Constantinople isn\u2019t the past, it\u2019s the future, a back to the future type\u00a0upgrade.Ethereum is Not Secure and it\u2019s Delayed its Upgrade\u00a0againMichael K. SpencerBlockedUnblockFollowFollowingJan 16The recent 51% attack on the Ethereum Classic (ETC) blockchain has sparked the debate of what is the best way to protect the blockchain and keep it attack free. What is the point of proposed cryptocurrencies if they are not even secure?Meanwhile the real Ethereum decided to postpone its Constantinople upgrade yet again. Guess why? Due to security concerns.The world computer really feels less shiny these days. Does this sound real to you?So one day before the scheduled Constantinople upgrade, Ethereum decided yet again to delay it. At this rate Ethereum 2.0 will arrive sometime in the 2020s.The World Computer is VulnerableThe Ethereum Core Developers and the Ethereum Security Community were made aware of the potential Constantinople-related issues identified by ChainSecurity on January 15, 2019.Ethereum\u2019s long-anticipated Constantinople upgrade has just been delayed after a critical vulnerability was discovered in one of the planned changes and it\u2019s giving me some confidence hiccups in this process.The planned Constantinople fork that would have occurred at block 7,080,000 on January 16, 2019.WTF Public BlockchainsThis is becoming a saga of waiting for Ethereum to scale, and the light at the end of the tunnel is drifting into a purgatory of startup sloth and decentralized cyber bureaucracy.ChainSecurity said yesterday that EIP 1283, which was one of the planned changes is vulnerable to attacks as it can provide hackers a loophole in the smart contract code to take over the user\u2019s funds. I don\u2019t know about you, but this is getting embarrassing.Over the past year, a variety of somewhat noteworthy altcoins have been targeted with 51% attacks. The dismal dip in ICOs and an apparent lack of security in the space, is making us think again about the business model of cryptocurrencies and some blockchain startups.Luckily for many of us waiting on the sidelines of the world computer, we do not have to do anything, but wait. We\u2019ve been waiting since 2009 by the way for something to happen. For someone other than Bitcoin to be viable, to grow, to actually be secure and do what blockchains were meant to be able to do.The latest Ethereum vulnerability or security bug could potentially enable some smart contracts on Ethereum vulnerable to a so-called \u201cre-entrancy attack,\u201d allowing an attacker to steal other people\u2019s ether. Not good! In both Bitcoin and Ethereum chains, the transaction finality is merely probabilistic. This is really reassuring guys.According to Emin Gun Siren, Professor of Cornell University with regard to the recent Etheruem Classic breach, since immutability is ETC\u2019s main claim to fame, this is technically a catastrophic failure.Waiting on the Ether to\u00a0ChangeFor the real Etheruem delaying an upgrade isn\u2019t technically a failure, but doing it multiple times seems unprofessional. According to Joanes Espanol, the CTO of Amberdata, the vulnerability found in the EIP 1283 is known as Reentrancy Attack.This is like the cybersecurity of Ethereum really under a microscope. I\u2019m no coder but it sounds like a pretty significant bug. In a re-entrancy attack, the vulnerability essentially allows an attacker to \u201creenter\u201d the same function multiple times without updating the user about the state of affairs.Litecoin might be mentioned at UFC fights, but that there are so many security concerns on Ethereum is downright frightening in 2019 if you are a crypto enthusiast. The reaction to the delay? Another massive drop in Ethereum\u2019s price.\u201cSecurity researchers like ChainSecurity and TrailOfBits ran (and are still running) analysis across the entire blockchain. Ethereum wants to play it safe and avoid non-zero risk type scenarios. After Constantinople is implemented dirty storage operations will start to cost 200 gas and the attacker contract can then use 2300 gas stipend to control the endangered contract\u2019s variable.No New Fork Date AnnouncedIt\u2019s really a wait and see approach now to Ethereum\u2019s critical stage of evolution and obviously it wants to get it right. Constantinople delays simply mean the world computer is heading into uncharted territories. The story is still developing but at any rate Ethereum 2.0 could take way longer than we expect.", "responses": "12"}, {"title": "Ethereum network throughput under\u00a0Shasper", "author_name": "Eric Conner", "link": "https://medium.com/@eric.conner/ethereum-network-throughput-under-shasper-390e219ec2b5?source=search_post", "post_date": "Sep 21, 2018", "readtime": "2 min read", "upvotes": "1.8K", "content": "Ethereum network throughput under\u00a0ShasperEric ConnerBlockedUnblockFollowFollowingSep 21, 2018The recent switch to implementing Casper (Ethereum\u2019s version of Proof of Stake) alongside Sharding has led to many questions around the impact of the change and what it will eventually bring.I\u2019ve recently started diving deeper into the latest Casper+Sharding chain v2.1 spec and wanted to share some findings around the impact it will have on network throughput. To be clear, this is just my interpretation of the spec and what I think the impacts will likely be. I\u2019m sure there are some deeper technical aspects I\u2019m missing but I believe the numbers should be close regardless.First, it\u2019s important to understand the fundamentals around blocks, gas, and network capacity on the current Ethereum chain. Every transaction that occurs on Ethereum consumes a certain amount of \u201cgas\u201d which is the total computational power it took to execute the transaction. Every block that is mined includes a certain set of transactions. However, each block has a limit on the total gas it can include and that is called the \u201cblock gas limit\u201d. The reason this limit exists is twofold: 1. it reduces block propagation times across the network and 2. it reduces centralization of mining.This means that the Ethereum network has a capacity every block, and therefore every day, on how much it can process. Here is a look at the capacity on the current chain:Current Ethereum chain\u00a0capacityThis will all change dramatically in Shasper due to the introduction of shards and Proof of Stake, both allowing for faster block times. The current spec calls for 1024 shards and slot times of 8 seconds. Every shard will be its own PoS chain where blocks are produced and transactions are stored. This means that the daily gas cap goes up ~1850x. The result is as follows:Shasper chain\u00a0capacityAs seen here, tx/sec capacity rises from 7 to 13,410, a huge improvement.It\u2019s possible in the future that block gas limit could also rise, thereby increasing throughput more, but Vitalik has suggested keeping that assumption at 8,000,000 for now.An important note here is that this is just the first step to scaling the main \u201cLayer 1\u201d chain. After the initial spec of Shasper is implemented, the Layer 1 chain will gain further improvements such as quadratic sharding. On top of that, there are many Layer 2 scaling solutions on the horizon that will be built on top of the main chain for even higher throughput. The future of scaling on Ethereum looks bright.", "responses": "3"}, {"title": "Insights into the Ethereum ecosystem", "author_name": "Sebastian Wurst", "link": "https://medium.com/coinmonks/insights-into-the-ethereum-ecosystem-6ffff98e1f0e?source=search_post", "post_date": "Oct 11, 2018", "readtime": "5 min read", "upvotes": "1.2K", "content": "Insights into the Ethereum ecosystemSebastian WurstBlockedUnblockFollowFollowingOct 11, 2018Analysis of the top 250 ERC-20 tokens by market cap", "responses": "1"}, {"title": "Off-Chain Data Storage: Ethereum &\u00a0IPFS", "author_name": "Adil H", "link": "https://medium.com/@didil/off-chain-data-storage-ethereum-ipfs-570e030432cf?source=search_post", "post_date": "Oct 17, 2017", "readtime": "3 min read", "upvotes": "552", "content": "Off-Chain Data Storage: Ethereum &\u00a0IPFSSaving on\u00a0gasAdil HBlockedUnblockFollowFollowingOct 17, 2017The Ethereum gas costs\u00a0issueMost Decentralized Apps running on the Ethereum Platform need to store/retrieve data, just like conventional or \u201ccentralized\u201d apps do using PostgreSQL, MongoDB, Redis, etc. The EVM (Ethereum Virtual Machine) does indeed allow us to save variables/state in permanent storage. Let\u2019s look at this simple Solidity contract:pragma solidity ^0.4.17;contract Database {    bytes x;    function write(bytes _x) public {      x = _x;    }        function read() public view returns (bytes) {      return x;    }}I\u2019ve deployed this contract on Rinkeby test net and generated 1024 of random bytes using https://www.random.org then stored 1kB of data using the write function. The resulting transaction can be seen here\u00a0: https://rinkeby.etherscan.io/tx/0x6575badcafbc4db521e82904fa14b04bd8e862de1c82f62e064e699d0f90ebe3The Gas used amounted to 754,365 @ 20Gwei Gas price = 0.0150873 Ether. At the time of writing this post (Oct 17, 2017) the Ether price is currently 328.79 USD/ETH. So storing 1kB of data would have cost $4.96 to run on the Ethereum Main Net. That means ~ 5 Million USD / GB\u00a0!AlternativesSaving a few bytes to the EVM is ok but for larger chunks of data the costs are probably too high for most projects. One solution is to modify our data storage strategy and save the data off-chain (as opposed to the on-chain approach we took above). There are multiple off-chain storage options: IPFS and Swarm are 2 popular ones. I\u2019ll use IPFS in this post but Swarm works equally well.Enter IPFSLooking at the wikipedia article on IPFS\u00a0:InterPlanetary File System (IPFS) is a protocol designed to create a permanent and decentralized method of storing and sharing filesIPFS allows p2p storage and we can use it as a distributed file system to store data.Low Cost Data Storage StrategySaving data on IPFS provides a unique hash. Instead of storing the data on the contract, we\u2019ll only store the hash on the contract and then we can use the hash to retrieve the data.In production we\u2019d need to create our own IPFS node, but INFURA provides a node for developers which we can use for free.Here is a js snippet you can try out on https://npm.runkit.com/ to save data to IPFS\u00a0:const IPFS = require(\u2018ipfs-mini\u2019);const ipfs = new IPFS({host: \u2018ipfs.infura.io\u2019, port: 5001, protocol: \u2018https\u2019});const randomData = \u201c8803cf48b8805198dbf85b2e0d514320\u201d; // random bytes for testingipfs.add(randomData, (err, hash) => { if (err) {   return console.log(err); }  console.log(\u201cHASH:\u201d, hash);});this should return the hash \u201cQmaj3ZhZtHynXc1tpnTnSBNsq8tZihMuV34wAvpURPZZMs\u201d which we can use to query our data:const IPFS = require(\u2018ipfs-mini\u2019);const ipfs = new IPFS({host: \u2018ipfs.infura.io\u2019, port: 5001, protocol: \u2018https\u2019});const hash = \u201cQmaj3ZhZtHynXc1tpnTnSBNsq8tZihMuV34wAvpURPZZMs\u201d;ipfs.cat(hash, (err, data) => { if (err) {   return console.log(err); }  console.log(\u201cDATA:\u201d, data);});and this should return our data\u00a0: \u201c8803cf48b8805198dbf85b2e0d514320\u201dOne remark is that the hash string size is independent of the data size, which means we can store large data chunks or files on IPFS (I couldn\u2019t find a current size restriction) without increasing our Ethereum transaction costs\u00a0!I\u2019ve used our previous contract to store the IPFS hash generated above\u00a0:https://rinkeby.etherscan.io/tx/0x53ae68a0f7302d8808d836c560f54f83b2b870f02b136338c8abde03f2e3cfb9The gas usage has decreased to 40,907 @ 20Gwei Gas price = 0.00081814 Ether = 0.27 USDWe now have a much more acceptable storage cost and it should be pretty much constant independently of what we\u2019re storing on IPFS\u00a0!Example Project: Stone DappI\u2019ve built a small proof-of-concept project around this idea called Stone Dapp, feel free to check it out\u00a0:Github\u00a0: https://github.com/didil/stone-dappLive version (Rinkeby)\u00a0: https://stone-dapp.firebaseapp.comP.S.: In the examples above I\u2019ve set the Gas Price to 20 GWei. To help you choose the Gas Price you want to pay, you could check out http://ethgasstation.info\u00a0. ETH Gas Station provides transaction confirmation time estimates and other useful network stats.", "responses": "8"}, {"title": "Loom Network is LIVE! Scalable Ethereum DApps Coming Soon to a DAppChain Near\u00a0You", "author_name": "James Martin Duffy", "link": "https://medium.com/loom-network/loom-network-is-live-scalable-ethereum-dapps-coming-soon-to-a-dappchain-near-you-29d26da00880?source=search_post", "post_date": "Mar 14, 2018", "readtime": "4 min read", "upvotes": "1.6K", "content": "Loom Network is LIVE! Scalable Ethereum DApps Coming Soon to a DAppChain Near\u00a0YouJames Martin DuffyBlockedUnblockFollowFollowingMar 14, 2018Yesterday we announced the very first DApp running 100% on a Loom Network DAppChain, DelegateCall.This is big news for Ethereum: It\u2019s an early (but non-trivial) example of how developers can build a 100% blockchain-based DApp that\u2019s highly scalable, yet still backed by the security of the world\u2019s most decentralized blockchain.Today, we\u2019re announcing the official launch of Loom\u00a0NetworkDelegateCall is the very first DApp available on Loom Network, and we think it\u2019s super cool.But it\u2019s only the beginning.We built DelegateCall mainly to show developers what\u2019s possible to build using the Loom Network SDK. It\u2019s the first of many DApps we\u2019ll be releasing over the next year, both in-house and through 3rd-party developers.The end goal for Loom Network is to have hundreds, thousands of these DApps running in production.So today I want to 1) make a couple major announcements about the launch of our platform, and 2) talk a bit about what we have in store for the future.", "responses": "3"}, {"title": "Very deep-dive on Ethereum Reading\u00a0List", "author_name": "ConsenSys", "link": "https://medium.com/@ConsenSys/very-deep-dive-on-ethereum-reading-list-f5b1122e5990?source=search_post", "post_date": "Nov 30, 2016", "readtime": "2 min read", "upvotes": "227", "content": "Very deep-dive on Ethereum Reading\u00a0ListConsenSysBlockedUnblockFollowFollowingNov 30, 2016This is a 301, 401 or 501 reading list on Ethereum. Especially important for those who are newer to the technology and would like to know where to start learning about it.LeastAuthority/ethereum-analysesContribute to ethereum-analyses development by creating an account on GitHub.github.comThis first public audit on Ethereum is a classic. Very deep impact and had clues to all major attacks on Ethereum so far, such as reentrancy hazards and gas economics. May you find the next major contributions and vulnerabilities on Ethereum, possibly using this resource for ideas and inspiration. (Don\u2019t forget the Appendix.)ethereum/yellowpaperyellowpaper - The \"Yellow Paper\": Ethereum's formal specificationgithub.comThe formal specification of the Ethereum protocol. Yes it could be clearer, but until someone seizes the opportunity, it\u2019s what\u2019s there.ethereum/wikiwiki - The Ethereum Wiki -github.comA lot of the subtleties of Ethereum. Blackhats don\u2019t often lurk in the daylight of the obvious, but in the darkness of subtleties where much fewer whitehats roam. For example, one of the DoS attacks used \u201cnote: there is a difference between zero-balance and nonexistent!\u201dLong-term gas cost changes for IO-heavy operations to mitigate transaction spam attacks \u00b7 Issue\u2026UPDATE: version 1c of this spec has been implemented and is active on the mainnet as of block 2463000. Spec is kept\u2026github.comPhase 1 mitigation for transaction spam attacks", "responses": "1"}, {"title": "An economic incentive for running Ethereum full\u00a0nodes", "author_name": "Andrey Petrov", "link": "https://medium.com/vipnode/an-economic-incentive-for-running-ethereum-full-nodes-ecc0c9ebe22?source=search_post", "post_date": "May 8, 2018", "readtime": "5 min read", "upvotes": "1K", "content": "An economic incentive for running Ethereum full\u00a0nodesAndrey PetrovBlockedUnblockFollowFollowingMay 8, 2018This is a story about vipnode, an Ethereum Foundation Grant recipient.Full Node, Light Node: What\u2019s the difference?When you connect to the Ethereum network, you can use a full node or a light node (also known as a light client).A full node has a copy of the entire state of the Ethereum blockchain and executes every transaction that gets mined\u200a\u2014\u200athis requires upwards of 120GB of storage and 8GB+ of memory (some actual stats). It can take several hours for a full node to join the network and become fully synchronized. If you wanted to run a full node in the cloud, it would cost around $20/mo.A light node has only the minimal amount of state to make sense of things while talking to full nodes. We\u2019re talking just a few hundred megabytes of storage and 128\u2013512MB of memory. The goal of a light node is to be small enough to run on a phone or embedded device.Any time a light node wants to query the blockchain or send a transaction, it must ask a full node to do it on its behalf. In effect, a light node is a mooch. But that\u2019s okay.A light node can join the network and start using it almost instantly, assuming it can find a full node with a light node slot available for it.\u201cWhy won\u2019t my Light Node connect to the network?\u201dTwo things happened in late-2017 which broke light nodes.1. CryptokittiesA massive influx of new users swarmed the Ethereum network, many of them relying on light nodes to trade their fancy cats and make sweet bank. We can see the usage skyrocket by observing the transaction fees go up:https://etherscan.io/chart/transactionfee2. Light Ethereum Subprotocol UpgradeAround the same time, LES/2 was released\u200a\u2014\u200aan upgrade of the protocol used for serving Light Nodes. The new protocol was still considered experimental and the server implementation was buggy. This meant that a lot of clients switched over to the new protocol, but many of the old full nodes were still running older code which did not support the upgrade.The Result?I was running some light nodes myself around that time. Normally, I\u2019d fire up my light node and it would be up and running within a minute. Come December, everything broke. I\u2019d leave my node up overnight and it would still fail to find a compatible full node with a free spot for it.The Github Issues on the project were flooded with complaints, too:https://github.com/ethereum/go-ethereum/issues?q=syncmode+light+peersWe need more Full Nodes with Light Nodes\u00a0slots!Okay. How do we convince more full nodes to spend time and effort running potentially risky experimental code? An economic incentive is in order.https://vipnode.shazow.net/The first version of vipnode was very simple: I hosted a single full node controlled by a short \u201cdriver\u201d which monitored the smart contract for new subscribers. When someone paid for a VIP membership, the VIP\u2019s public key (the enode ID) was whitelisted by my vipnode server. That means even if my server was full, it would still allow the VIP to bypass the server\u2019s limits.After chatting with the very-encouraging Robbie Bent and Jon Choi (thank you again), I was convinced to submit a grant proposal to the Ethereum Foundation to build out a more complete version of vipnode.Pools for\u00a0vipnodeIn the Version 2 proposal, I outlined the design for vipnode pools. Any full node can join a vipnode pool and start earning proportional revenue from serving VIP subscribers.In order to be able to track how much share each node deserves, we must rely on a few features of how Ethereum clients are designed:A client can specify an ethstats server which will receive handy analytics about the client like information about peers it\u2019s connected to. The vipstats server will use this information to receive client-side claims about which vipnode it\u2019s connecting to.A server can be controlled through an RPC API. A companion vipnode process will use the API to manage whitelisted peers (Parity already supports this, Geth is pending the merging of my PR). When a new VIP registers, all members of the pool will be instructed to whitelist the new enode ID. When a VIP connects, the node will send a claim to the vipstats server.When the vipstats server corroborates the claims from the client and server, it will allocate a proportional fee of the pool\u2019s revenue to that server. The structure of this fee is still up in the air. Perhaps per amount of time, or a flat rate, or something else. Each pool can decide their own structure.If one side is inconsistent, then the vipnode will refuse to count it and the server will disconnect a client which fails to corroborate the claim without some timeout.The vipstats server will also act as a custom bootnode that VIPs can use to direct their clients to connect to the correct set of full nodes.Extending IncentivesThe vipnode design can be extended for all kinds of server-client incentives. Imagine different kinds of pools that you can pay into with different kinds of guarantees:Pools for managed clusters (like an Infura pool\u200a\u2014\u200aa Decentralized Infura).Pools for risky experimental features (like when LES/2 first launched).Pools for non-standard extended API support (with inverted indices supporting complex queries like the the Etherscan API).Pools for Big Miners. When milliseconds matter, it can be valuable to guarantee direct access to some of the largest miners.We can use the vipnode pool design as a measure of marketplace demand. Anyone can start a pool and put initial client funds in it to encourage people to start running full nodes to take the other side of it.Where are we\u00a0now?I\u2019m starting to work on the pool implementation now. I\u2019m aiming to have a beta in August 2018 and a more polished version in September.Everything is open source under the MIT license. You can follow along at: https://github.com/vipnodeNewsletter is here:https://tinyletter.com/vipnodeIf you\u2019d like to try the working v1 prototype, it\u2019s here:https://vipnode.org/Special thanks to the Ethereum Foundation for supporting this research and development. I continue to be impressed with the ambition, generosity, and effectiveness of this community, and I\u2019m honoured to be a part of it.Update: Follow progress and announcements here.", "responses": "6"}, {"title": "Blockchain: A Very Short History Of Ethereum Everyone Should\u00a0Read", "author_name": "Forbes", "link": "https://medium.com/forbes/blockchain-a-very-short-history-of-ethereum-everyone-should-read-a8d276a575c5?source=search_post", "post_date": "Feb 1, 2018", "readtime": "4 min read", "upvotes": "", "content": "Blockchain: A Very Short History Of Ethereum Everyone Should\u00a0ReadForbesBlockedUnblockFollowFollowingFeb 1, 2018Photo by Yuriko Nakao/Getty Image.By Bernard MarrEven those who are not familiar with blockchain are likely to have heard about Bitcoin, the cryptocurrency and payment system that uses the technology. Another platform called Ethereum, that also uses blockchain, is predicted by some experts to overtake Bitcoin this year.What is Ethereum?", "responses": ""}, {"title": "KeySpace: End-to-End Encryption Using Ethereum and\u00a0IPFS", "author_name": "Sam Walker", "link": "https://medium.com/fluidity/keyspace-end-to-end-encryption-using-ethereum-and-ipfs-87b04b18156b?source=search_post", "post_date": "Nov 20, 2018", "readtime": "4 min read", "upvotes": "1K", "content": "KeySpace: End-to-End Encryption Using Ethereum and\u00a0IPFSSam WalkerBlockedUnblockFollowFollowingNov 20, 2018KeySpace is a trustless end-to-end encryption protocol that launched as part of AirSwap Spaces.What we\u00a0neededAirSwap is a hybrid on-chain / off-chain protocol, which requires the coordination of off-chain peer-to-peer messages and on-chain identities (Ethereum addresses & private keys). If I\u2019m chatting online with someone who claims to have control of an Ethereum address, I need to be able to cryptographically validate that they\u2019re telling the truth.We\u2019ll call this first need off-chain/on-chain identity binding.Secondly, since communication online is public by default, participants communicating with each other in a peer-to-peer network need to be able to hide their messages from everyone else, without trusting a central authority to coordinate encryption (public key registration).We\u2019ll call this need trustless end-to-end encryption.Trustless end-to-end encryption enables another needed feature. If Alice is sending a message to Bob, and Bob is offline, Bob should be able to receive it when he comes back online, even if Alice no longer is. This means that a third party needs to be able to hold messages awaiting delivery in the interim. If the messages are encrypted, no one will be able to read them besides Bob and Alice, even if they are stored by a third party.We\u2019ll call this need encrypted offline delivery.An industry standard for proving that you control an Ethereum address is to sign a challenge that someone sends you. Your signature can be used to prove ownership. However, if you\u2019re communicating with many peers simultaneously (as is the design for the AirSwap protocol), this requires constant signatures, which is a tedious user experience when using a wallet like MetaMask, Ledger, or Trust Wallet. Messages can be signed programmatically when using a plaintext private key, but this exposes you to increased risk of being hacked. If we can keep our Ethereum private key secure inside of our wallet, and delegate only its ability to verify identity to another private key that can be stored in memory, we can automatically sign & decrypt messages without user interaction, and without exposing funds to increased risk.We\u2019ll call this needed functionality delegated programmatic authorityWith the recent launch of AirSwap Spaces, we\u2019ve put a system in production that not only fulfills all these needs but sets a new industry standard of what to expect from any messaging service with end-to-end encryption in terms of both security & convenience.What we\u00a0builtAirSwap KeySpace: trustless end-to-end encryption serviceTo illustrate the components involved in this system, I\u2019ll show how they function together; both during key creation/recovery and during encrypted communication.Key creation works as follows:The user signs a string unique to their address to generate a 164 char hex string. This is called the signed-seed. The signed-seed functions as a private key to encrypt the PGP private key in the PGP key pair.The app uses the openpgp.js library to generate a new PGP key pair encrypted with the signed-seed.The user stores a JSON blob with their encrypted PGP private key & PGP public key as a pinned file on IPFS.The user then stores the IPFS hash in the AirSwap PGP contract, which maps user addresses to IPFS hashes where their public keys can be accessed (and encrypted private keys can be recovered).Once the IPFS hash registration transaction has succeeded, the user is ready to send & receive encrypted messages.If the user wants to access their encrypted messages in a new context (i.e. using their Ledger wallet on a different computer), they can regenerate their signed-seed by using their wallet signature and use their signed-seed to decrypt their PGP private key stored on IPFS.This is how the system functions during active use between Alice and Bob:On airswap.io, all direct messages need to be encrypted, so when Alice starts a new chat with Bob, the app looks up the IPFS hash of Bob\u2019s PGP public key on the contract.Before sending a message to Bob\u2019s Ethereum address, the app encrypts the message with Bob\u2019s public key. It also attaches a copy of the message encrypted with Alice\u2019s public key, so she can decrypt her sent messages at a later date.When Bob receives an encrypted message, the app decrypts it with his PGP private key (after decrypting it with his signed-seed).This enables secure messaging, even in a decentralized public context, since the messages remain encrypted.One of the main user experience gains with this approach is that in order to access their encrypted messages, all the user needs is control of the Ethereum private key. The user could have a ledger hardware wallet, and use it with multiple computers, and still have access to their encrypted messages on their new device. Functionally, we are using the entropy of your Ethereum private key signature to generate a sufficiently random secret for a PGP \u201cbrain wallet\u201d.For the more technical, a working implementation of the KeySpace system can be viewed in our developers repo.We think this has big implications for the ecosystem, and are excited to see its use outside of what we\u2019ve imagined.", "responses": "5"}, {"title": "Why your Ethereum project will most likely\u00a0fail", "author_name": "Bedeho Mender", "link": "https://medium.com/@bedeho/why-your-ethereum-project-will-most-likely-fail-d14b6d8f1c7c?source=search_post", "post_date": "Mar 9, 2016", "readtime": "5 min read", "upvotes": "293", "content": "Why your Ethereum project will most likely\u00a0failBedeho MenderBlockedUnblockFollowFollowingMar 9, 2016Just because its possible, doesn\u2019t mean it makes\u00a0sense.Any non-trivial project, be it a startup, a political organization or a civil society initiative, will most likely fail.Whatever idea you have for how the world can be improved has to stand up to the fact that its feasibility and/or desirability has been continually refuted up to this\u00a0point.Most founders cannot address this fact, and this is why the primary cause of startup failure is: no one needed what you made. One can offer a plausible rebuttal to this fact on behalf of an Ethereum project: the platform did not exist until very recently. HoweverMost proposed projects on Ethereum cannot point to a plausible end user benefit which is primarily enabled by being on the platform.Things like \u201cno middlemen\u201d and \u201cdecentralization\u201d are not actual end user benefits, they only potentially generate benefits indirectly. Perhaps even more so than in the Bitcoin space, using the Ethereum platform seems to be a decisive end-goal for people in Ethereum projects, rather than providing a better solution to a real world problem.Evaluating application categoriesAfter reviewing the quite extensive list of planned apps on the platform, I have landed on the following broad categorization and sweeping judgement.InfrastructureThis is stuff like wallets, exchanges, developer tools and frameworks. These are perfectly useful ideas, but they only make sense in so far as there are actual end user benefits associated with other applications.Organizational AutomationThis is stuff like board operations, voting, and in general replacing humans inside organizational structures (DAOs). We have over the last few decades seen lots of automation of critical tasks inside organizations using software. For example for doing customer and human resource management, accounting, collaboration, and so on. All of these tasks require far less human labor today than before, due to software automation. The question is, could one possibly decentralize these processes, and why would one want to? The problem is that many of these processes require lots of rich and soft local knowledge about time, place, people, risks and relationships, and this requires a thick layer of human judgement to extract, distill and codify. I would expect that existing software solutions have indeed found the optimal boundary between this human judgement and the processing and data representations delegated to the software. Smart contracts can only play a role in displacing the latter side of this boundary. But what would be gained by doing this? All principal agent problems happen on the opposite side of this boundary, where smart contracts cannot efficiently be applied by assumption, and the traditional means of dealing with such problems ultimately seem like the only approach. To put it bluntly: the major cases of misconduct and inefficiency inside organizations have nothing to do with actors breaking software execution on servers.CrowdfundingThe lesson of the very well built lighthouse Bitcoin project, which has resulted in no more than a few thousand dollars of funding over the past years, has to be that there is extremely little value to be gained by introducing trustless escrow in crowdfunding. Even if you wanted to crowdfund something very controversial, where traditional web platforms will ban you, its not at all clear that disintermediating holding funds before cap is reached is a big part of making this type of crowdfunding effective. Even worse, the project organizer could always fund the remainder of the contract privately, hence it is not at all clear that there is any actual gain of security. While it was a nice use of SIGHASH_NONE, it really solved a non-problem.IoT/Smart PropertyWhat part of the rules for the operation of some smart property\u200a\u2014\u200abe it a lock or a car, would benefit from being governed by consensus? There is indeed an atomic car-for-payment swap contract for Bitcoin which highlights this question very well through its comical complexity. Is there any evidence that people have a hard time with the practical exchange of a car for a payment using traditional means? Not that I have ever come across. If you want devices to be smart\u200a\u2014\u200ain that they have electronically based ownership enforcement, then you can just use digital signatures with a server. In this scenario, the server operator cannot even influence ownership\u200a\u2014\u200abut I doubt that would ever be a real world issue anyway. The remaining argument, that smart property is now uniquely enabled by Ethereum/Bitcoin because previous attempts were mired in double spending ownership by bad servers, just doesn\u2019t hold up.GamblingThis is stuff like provably fair dice and lottery games, poker and prediction markets. This is actually the category I would be most optimistic about. There is a healthy ecosystem of Bitcoin gambling sites, many of which can provide provably fair games. These are mostly centralized, yet seem to function very well based purely on reputation. With Ethereum one could plausibly have more complex fair games which currently cannot be trusted to run on illegal gambling sites\u200a\u2014\u200ain particular at higher stakes, but I am not sure how large this space is. Things liker Poker are very unlikely to work well on the blockchain. It will likely get too costly, and it will be near impossible for any public smart-contract to replicate the critical anti-collusion function that centralized services like PokerStars offer. They use a varied set of measures, including user reports, historical hole card analysis, interviews, charge backs and banning real world identities. Any public anti-collusion measure will likely be much more limited, and can be very quickly be gamed. Lastly, I have already covered my pessimism with the potential value of decentralized prediction markets.There are other categories, like p2p-finance and finance smart contracts, but I think the general point should be clear at this point. The best case scenario for most of these projects is that there are end user benefits for other reasons, and that Ethereum is not required to deliver them. The complexity, and cost, of doing blockchain based products will in such cases eventually drive such products off chain, the same way changetip eventually went off-chain, and now recently into fiat mode.ConclusionI largely agree with Vitalik Buterin, a founder of Ethereum, when he saysFirst, there will be no \u201ckiller app\u201d for blockchain technology. The reason for this is simple: the doctrine of low-hanging fruit. If there existed some particular application for which blockchain technology is massively superior to anything else for a significant portion of the infrastructure of modern society, then people would be loudly talking about it already.and this is why your Ethereum project will most likely fail. Minor improvements which are more complicated and more costly simply will not make it. Now, don\u2019t get me wrong, the purpose of this article is not to discourage or ridicule anyone working on any of these types of projects, but rather eithera) for the resources\u200a\u2014\u200ahuman and otherwise, committed to such projects to be redeployed where there is an actual benefit to be hadorb) for me to learn that I\u2019m wrong about these projects, and perhaps the benefits of the platform in general, in which case I\u2019d be the first to try to take advantage of these benefits for my own goals.", "responses": "29"}, {"title": "Everything You Possibly Need to Develop on\u00a0Ethereum", "author_name": "ConsenSys", "link": "https://media.consensys.net/everything-you-possibly-need-to-develop-on-ethereum-1bef0c23c7c6?source=search_post", "post_date": "Jun 28, 2018", "readtime": "2 min read", "upvotes": "981", "content": "Everything You Possibly Need to Develop on\u00a0EthereumConsenSysBlockedUnblockFollowFollowingJun 28, 2018From us to you, here\u2019s a comprehensive and crowdsourced list of (nearly) all the best Ethereum developer platforms, services, tools, and infrastructure.Formed in 2015, ConsenSys has been part of the earliest stages of development and engineering efforts on the Ethereum blockchain. Recognizing the need for developer-oriented platforms and tools, members of ConsenSys came together to create some of the earliest and most prolific core tools used by developers on the Ethereum network\u200a\u2014\u200aincluding Infura, MetaMask, Truffle, and more. These companies, known as \u201cspokes,\u201d are just a few of the teams supported by ConsenSys\u2019 venture production studio\u200a\u2014\u200aConsenSys Labs.In our experience giving hands-on advice to talented entrepreneurs and developers around the world, it became apparent that even experienced developers had no idea where to find resources beyond Google Search or Stack Overflow. While there\u2019s certainly benefit in competing approaches to a problem, there\u2019s often no need to recreate the wheel (and instead have many poorly maintained wheels).That\u2019s why when Corbin Page and Parker Place of Meridio and Leah Feuer of ConsenSys Labs began to aggregate a list of available tools, frameworks, and components from ConsenSys product managers, it made sense to share with and seek contributions from the larger Ethereum community. To help people get started building on the Ethereum blockchain, we put together this list of available and open source tools, frameworks, and components.So far, 21 contributors and many additional ConsenSys folk have contributed.See something missing? Make your contributions to the repo in the form of pull requests or issues.ConsenSysLabs/ethereum-developer-tools-listethereum-developer-tools-list\u200a\u2014\u200aA guide to available tools and platforms for developing on Ethereum.github.comYou can also find our Smart Contracts Best Practices guide here:https://consensys.github.io/smart-contract-best-practices/Interested in joining ConsenSys Labs as a spoke? Reach out\u00a0here.Disclaimer: The views expressed by the author above do not necessarily represent the views of Consensys AG. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": "1"}, {"title": "Why I Bet on\u00a0Ethereum", "author_name": "Raul Jordan", "link": "https://medium.com/@rauljordan/why-i-bet-on-ethereum-9c1e48741676?source=search_post", "post_date": "Nov 17, 2017", "readtime": "7 min read", "upvotes": "805", "content": "Why I Bet on\u00a0EthereumRaul JordanBlockedUnblockFollowFollowingNov 17, 2017Back when the wild west of cryptocurrencies was first in full swing and the mainstream media was swamped with stories of drug cartels and launderers smuggling millions through bitcoin, it was pretty hard for an average person to see the value in the concept of a virtual currency. Among the initial questions that echoed across the world were\u201cWhat are the practical applications of this aside from buying drugs on silk road?\u201d\u201cHow secure is it, really?\u201dFast forward a few years and although we have come a long way and blockchain education is easier to access, there is still a strain of naysayers with arguments that focus solely on the currency and not as much on the powerful, but subtle implications of decentralized systems.These questions are a result of a lack of education on the technology underlying cryptocurrencies themselves, namely, the blockchain. There was too much of a focus on trying to frame Bitcoin purely in transactional terms, automatically assuming the same of other blockchain protocols and completely missing the point.A Turing Complete\u00a0SystemWith distributed ledgers came the advent of those desiring more expressive capabilities and applications on these systems. It was only a matter of time before developers were asking why not create fully decentralized applications that do more than just handle payments? Companies started to use blockchain systems as a way to store certain types of data, with various projects aiming to use a blockchain as an immutable store of knowledge, even though large portion of the Bitcoin community have been opposed to on-chain data storage. Many started to ask, could we go even further or use the blockchain for computational purposes?The Ethereum project gave us exactly that: a Turing complete environment where anyone can code up smart contracts and spin up entire token ecosystems and applications on a public blockchain. This \u201cglobal computer\u201d brought us promises that we could only dream of when simplified versions of this idea were conceived by other projects such as MasterCoin. Bitcoin has rejected this level of abstraction and logic within its core system, deliberately using Script, a language with limited expressive capabilities to prevent malicious users from hijacking the blockchain programatically. However, Ethereum has embraced its Turing completeness as its most noteworthy & notorious feature. Although we are able to build any sort of application by leveraging the Ethereum Virtual Machine (EVM), this expressiveness undoubtedly comes at an enormous cost\u2026Safety-Critical Systems & Big\u00a0HacksUnfortunately, smart contracts have to be written by humans and are prone to extremely critical bugs such as the parity hack where an internal method had public access and was able to be called by anyone, allowing hackers to steal over $30M USD worth of Ether. Teams are even employing formal mathematicians to prove the security of their smart contracts, but is this even enough to prevent small issues that can cost millions to the entire community?So then, is Turing completeness a good idea for blockchains? Maybe not at a large scale for now, but in my opinion, it is the best proving ground we could ask for to accelerate this ecosystem even faster.Ethereum Gives Back Power to DevelopersDespite the obvious flaws of Solidity as a smart contract language, and oh boy are there so many, the Ethereum community did one small thing very, very well: giving agency and tools to developers that had been aching to get their feet wet in crypto.Coming from a background in Javascript web development and data science, it was already hard enough to keep up with the newest JS framework and best practice that seemed to pop up every week. As annoying as Javascript fatigue was, the ecosystem managed to flourish because of the vibrant experimentation all types of devs did. Junior & senior developers worked tirelessly on testing front-end tools such as React, Redux, and the babel transpiler to the max to figure out what the best way to build web apps was. As flawed as javascript is as a language, the community was always able to find a way and the tooling got better and better.We went from not having best practices for managing state in a web application to having extremely robust libraries such as Redux as solutions major problem within a short span of time. Sure, many JS developers accepted parts of their community as broken, but that only gave them an excuse to work even harder and innovate for the good of everyone.It Is Extremely Early, But The Ecosystem Is Made for\u00a0DevsThe ease of access to documentation, source code, and fantastic speakers at major conferences made front-end tooling evolve in amazing ways over the past year. Ethereum, along the same vein, has come a long way from its early days. We have awesome listings like state of dApps, fully-transparent, communicative core developers and although so many ICOs are questionable at best, we have fantastic white papers, testing tools, a solid test-net, and a plethora of well-made libraries for beginners to hit the ground running.In this community, most major projects are open source and have thriving Slack channels where people discuss not only small bugs in projects but also long-term, groundbreaking implications of decentralized applications in our daily life. The unparalleled quality of conferences such as DEVCON and the strength and transparency of Ethereum\u2019s core dev team make it a joy for new developers to deep their feet into this world and add constant improvements to important repos.Same Standards: The Foundation of Network\u00a0EffectsNot only is Ethereum interesting from a developer\u2019s standpoint, but also from an economic and game-theoretical perspective as well. The rise of the ICO token economy has shed light on new problems that companies never even had to consider when building their products in a centralized web. The idea of token velocity, where a utility token sees an extremely large number of users trading it but rarely any holding it as a store of value, has been a major hurdle for many dApps to consider when designing their systems and economies. Hard problems in game theory, scalability, and critical design questions come to mind for anyone leveraging the Ethereum protocol to create an ERC20 token economy, and this is just the tip of the iceberg for experts to identify both the pitfalls and best practices within this world.Despite these hurdles, there is one fundamental cornerstone of building decentralized applications: all of them are built upon the same ecosystem of standards. All projects share the Ethereum Virtual Machine, all of them are built on smart contracts, all of them are incentivized to learn from each other and contribute by highlighting their own best practices to the greater community. This is why this space is moving at lightning-fast speed. When systems use the same set of shared standards, we all benefit when one finds a key improvement. This is what has driven me into becoming an Ethereum developer above all.Game-Theoretical IncentivesImagine a world where Uber doesn\u2019t take a cut of the drivers\u2019 pay and the customers\u2019 money. Imagine a world where there is no Uber Inc., but rather a decentralized marketplace of drivers and riders. A world where IPFS is our Amazon S3, Blockstack is our DNS Server\u2026the possibilities are endless. However, why should this matter to the average user? Sure, many users could be die-hard decentralization fanatics, but in reality consumers will simply flock to whatever the best economic choice is for them.When we get to the point where the price point of these decentralized apps as well as the friction of their user experience are optimized, we will begin to see massive adoption of this technology as a whole.It Takes One Killer App for the Public to Adopt a TechnologyIt was only when Apple launched the Apple II with the world\u2019s first computer spreadsheet, VisiCalc, that owning a computer was a business need. Businesses came in flocks to adopt VisiCalc and the power of its software was so great that the network effects soon became apparent, selling over 700,000 units in the span of six years, enabling other software businesses to create programs for a user base that was increasing exponentially. Build good software and the adoption of your hardware will follow.I believe the first killer app will come from a system such as Ethereum and its vibrant developer community. So sure, Turing complete blockchains have a lot left to be desired from a security standpoint, but are a breeding ground for ideas, innovations, and vibrant economies that I am thrilled to be a part of.", "responses": "3"}, {"title": "Toward an Ethereum Multisig\u00a0Standard", "author_name": "Alex Miller", "link": "https://blog.gridplus.io/toward-an-ethereum-multisig-standard-c566c7b7a3f6?source=search_post", "post_date": "Nov 10, 2017", "readtime": "6 min read", "upvotes": "631", "content": "Toward an Ethereum Multisig\u00a0StandardAlex MillerBlockedUnblockFollowFollowingNov 10, 2017Recent events have brought Ethereum multi-signature wallets (a.k.a. \u201cmultisigs\u201d) into the spotlight. Twice this year, hackers or general troublemakers have exploited vulnerabilities in the Parity multisig smart contract. Critics have been quick to cite these incidents when suggesting Ethereum can\u2019t work due to a large attack surface, but the reality is much more nuanced.Grid+ is currently holding a token sale (ending soon) and is stashing its funds in a secure offline setup. When weighing our storage options, we immediately decided against all multisig smart contracts with which we were familiar, specifically those made by: Parity, Ethereum Foundation, ConsenSys, and Gnosis. This is not to say that all these wallets are exploitable (Gnosis\u2019 wallet, for example, has held $200M for over a year without a breach), but the decision came from general prudence regarding complexity. None of these wallets met our needs, but that is not to say such a wallet cannot exist on Ethereum.As a means of comparison, we can look at Bitcoin\u2019s P2SH-based multisignature scheme, which has zero reported hacks since its first use in 2012. The difference in security indeed comes from a reduced attack surface, though this is largely by necessity in Bitcoin\u2019s constrained Script scripting language.In this article I will draw parallels between Bitcoin\u2019s multisigs and a proposed Ethereum multisig. I hope this will help guide the discussion toward a common, standardized, simple Ethereum multisig contract.Bitcoin Multisig\u00a0WalletsBefore exploring Ethereum, it is instructive to first understand how Bitcoin\u2019s pay to script hash (P2SH) scheme works and how it applies to a multisig scheme. The formal P2SH definition can be found in BIP16 and a 2-of-3 multisig example can be found here. The steps are roughly as follows:Generate a multisignature address based on a set of public keys and a \u201cthreshold\u201d parameter, which is the minimum number of signatures required to trigger a spend.Fund the new multisig address. This will produce a UTXO (unspent transaction output) owned by the multisig address.Create a new, raw offline transaction spending the multisig\u2019s UTXO.Sign the raw transaction with one private key. This will return a hex string.Sign the hex string with another private key. This will return a new hex string.Continue step 5 until the threshold is met (e.g. 3 signatures out of 5). Send the result in a script with the UTXO to spend. The bitcoins will transfer to the desired recipient.State and TransitionsLet\u2019s analyze the above procedure. First, a UTXO was selected and a raw transaction was formed. This was operated on by one private key. The output was then operated on by another private key and so on. Thus, there are exactly N operations on the raw transaction, where N is the threshold number of signatures required by the multisig wallet.However, it is important to note that the outcome here is binary: either N signatures are made (and the UTXO is spent), or nothing happens. There is no in-between and there are zero state transitions on-chain (excluding the UTXO spend). It is also important to note that the above multisig wallet can do only one thing\u200a\u2014\u200aspend UTXOs.Extending to\u00a0EthereumIf the goal is to emulate Bitcoin\u2019s multisig scheme on Ethereum, we can learn a lot from the previous section. We need to create a multisignature scheme with no extraneous functionality and no in-between state. In other words, there can only be two outcomes to our multisig execution: make a transaction or do nothing.Note that Ethereum\u2019s transactions are account-based rather than UTXO based, so they are more complex. By \u201cmake a transaction\u201d I mean sign an arbitrary set of data to a specified address (which can be a contract address) with a specified value (i.e. amount of ether). In Solidity, this is represented as:destination.call.value(value)(data)Another important property of Bitcoin multisigs is their instantiation. Once created, multisigs cannot be changed. This means that the owners of the contracts and the threshold parameter are frozen forever. The Ethereum parallel would be to create an immutable state upon instantiation.To summarize, we want the following attributes in our Ethereum multisig:Binary outcome\u200a\u2014\u200aeither accept the transaction or fail immediately.Restricted functionality\u200a\u2014\u200athe wallet can make transactions, but it can\u2019t do anything else.Creation finality\u200a\u2014\u200aparameters are locked once the wallet is created.A Simple\u00a0ProposalChristian Lundkvist has proposed a multisig scheme that adheres to the above properties: here is his corresponding writeup.The setup phase looks like this:require(owners_.length <= 10 && threshold_ <= owners_.length && threshold_ != 0);     address lastAdd = address(0);     for (uint i=0; i<owners_.length; i++) {        require(owners_[i] > lastAdd);        isOwner[owners_[i]] = true;        lastAdd = owners_[i];    }    ownersArr = owners_;    threshold = threshold_;This ensures owners are input in a sorted order and publishes them to the contract state. This is the only time ownersArr and threshold can be changed.Once parameterized, the contract can be used for one and only one purpose: to execute a transaction (defined by to, value, and data parameters). This execution looks like this:require(sigR.length == threshold);    require(sigR.length == sigS.length && sigR.length == sigV.length);// Follows ERC191 signature schemebytes32 txHash = keccak256(byte(0x19), byte(0), this, destination, value, data, nonce);     address lastAdd = address(0); // cannot have address(0) as an owner    for (uint i = 0; i < threshold; i++) {          address recovered = ecrecover(txHash, sigV[i], sigR[i], sigS[i]);   require(recovered > lastAdd && isOwner[recovered]);          lastAdd = recovered;    }     // If we make it here all signatures are accounted for    nonce = nonce + 1;    require(destination.call.value(value)(data));This checks that threshold signatures* are provided and forms a hash** based on transaction parameters. It then goes through each of the signatures and verifies that it was made by an owner that evaluates to greater than the previous owner. Note that the comparison is somewhat arbitrary\u200a\u2014\u200ait is a simple hex string comparison. This constraint further restricts the attack surface, but may not be necessary.*Signatures here are represented as r, s, and v\u200a\u2014\u200athese are generated from an elliptic curve signature of a hash; read more here.**The hash here adheres to the proposed ERC191 standard.If all checks pass, the provided parameters (to, value, and data) are used to make the transaction call within the contract. A nonce is incremented to prevent replay attacks. Note that this is the only state change that occurs. In theory, this contract\u2019s attack surface is constrained to this nonce value incrementing, which is trivially small.Ethereum AdvantagesThis scheme is exactly what the Grid+ team was looking for. At 43 lines of code, it is about as simple as a multisig contract can be. It has one and only one function, which is to create a transaction on Ethereum. Because any arbitrarily complex function call can be executed, this multisig functions exactly as a standard wallet, but requires multiple signatures.Although this wallet is pending audits by ConsenSys Diligence and possibly formal verification by Phil Daian, I would like to propose that the community get comfortable with the simplicity of this implementation and approach a standard multisig scheme. Christian has a repo and I have started my own to further test the contract. Furthermore, I have published the code to EPM (the Ethereum package manager\u200a\u2014\u200anote this is in beta!): package here, code here.Multisignature wallets should be the de-facto standard for storing large amounts of cryptocurrency. They should be as safe and user friendly as possible so that they can become common tools used even by individuals who want to secure their funds against a single point of failure. Let\u2019s make a standard that people won\u2019t think twice about using.\u2014\u200a\u2014\u200a\u2014 \u2014If you liked this article, follow Grid+ on twitter, join our slack, and sign up for our mailing list on gridplus.io!", "responses": "1"}, {"title": "Ethereum is the Adidas of\u00a0crypto", "author_name": "Damien Walter", "link": "https://medium.com/@damiengwalter/ethereum-is-the-adidas-of-crypto-1009704c5539?source=search_post", "post_date": "Oct 23, 2017", "readtime": "3 min read", "upvotes": "509", "content": "Ethereum is the Adidas of\u00a0cryptoThe best way to understand the near future of cryptocurrencies is to model them as\u00a0brands.Damien WalterBlockedUnblockFollowFollowingOct 23, 2017Coke and Pepsi. Microsoft and Apple. Canon and Nikon. Visa and Mastercard. Look at any consumer marketing niche and you find the same pattern. A half dozen competing brands, and just two giants, selling near identical products, at almost identical prices.Now we have a new niche in the global marketing landscape. Cryptocurrencies. Even in these early days the major brands in the niche are defining their values. Bitcoin was first in and has grabbed the number one spot. It\u2019s the Coke of crypto and, as long as cryptos exist, it always will be.But the niche needs a second giant, and anybody looking is likely to agree it\u2019s Ethereum. To anybody who knows anything about the technology of crypto, Ethereum is a more interesting product, in much the same way that Apple has always made a more interesting computer than Microsoft.Bitcoin embodies the greatest ambitions of crypto, that it will come to replace the mainstream economy. Ethereum is no less ambitious, but is a little more subtle. After money\u00a0itself, contracts are about the most important human invention. Whatever happens in the future of our economy, there will always be agreements between people. That makes the story of Ethereum very nearly as compelling as the story of Bitcoin.And when it comes to brands, story is everything.Nike and Adidas could be the same company, assessed purely by their business models. Their products come from the same factories, exploit the same model of low paid labour, and deploy the same footwear technologies at the same quality. The only distinction between Nike and Adidas is marketing\u200a\u2014\u200athey tell two different stories.Just do it. The Nike story is one of pure triumph. Nike is the winner, it\u2019s as simple as that. Its colour is red, symbolizing power and victory. Its name and iconic swooosh come straight from the gods.Adidas is a more complex beast. Its colour is black. If Nike is the gods, Adidas is the underworld. A different, darker kind of power. Adidas has never had a simple slogan, because its values are most powerful when they remain unspoken. If Nike is the natural winner, Adidas is the tough competitor, who in many ways demands more respect.The archetypes that brands play on linger deep in our unconscious. That\u2019s what makes them so powerful. That\u2019s why brands, even when we\u2019re aware of the tricks they play, still compell us.While Bitcoin plays on all the primary archetypes of victory and godlike power, Ethereum embodies the secondary, dark identity. Ethereum is the Adidas of crypto. As such you can expect it to continually jostle for primacy with Bitcoin for number one status. Even if it never gets there, it will always stay close. And at times it will overtake.In the current landscape of crypto, after a year of huge value gains for Bitcoin, it's time for Ethereum to follow the same upward path. I expect the second place brand in crypto to reach 70% of the value of Bitcoin in this cycle. That, in my view, makes it the smartest coin investment at this time.Further down the line, perhaps by mid 2018, the crypto market will need third, fourth and fifth placed brands. At that time both Bitcoin and Etherereum will take a beating. But they both have a long way to rise before then, and Etheruem will rise the fastest, if not furthest.", "responses": ""}, {"title": "Using Machine Learning to Understand the Ethereum Blockchain", "author_name": "ConsenSys", "link": "https://media.consensys.net/using-machine-learning-to-understand-the-ethereum-blockchain-1778485d603a?source=search_post", "post_date": "Apr 3, 2018", "readtime": "8 min read", "upvotes": "721", "content": "Using Machine Learning to Understand the Ethereum BlockchainConsenSysBlockedUnblockFollowFollowingApr 3, 2018Find out how ConsenSys projects like Alethio and Rakr are using AI to make sense of decentralized data.by Paul Lintilhac, Quantitative Developer at ConsenSysA hotbed field of study in data science analysis at the moment is machine learning, a form of AI that uses algorithms to study large sets of data. It\u2019s used for everything from sequencing DNA to studying financial markets and brain-machine interfaces. There are many different kinds of machine learning, with differing data requirements and objectives. In the past year, ConsenSys has made a push to develop its analytics and data science capabilities with projects like Alethio, an analytics platform helps users visualize, interpret, and react to blockchain data in real time.The immutable, public records and decentralized nature of blockchain networks provide an exciting sandbox for data scientists, offering whole new world of data to analyze and patterns to recognize. To begin understanding how we go about pulling meaning out of this seemingly chaotic data environment, we\u2019ll begin by describing two main categories of machine learning that are being developed by data scientists at Consensys, and give a few examples of how each can be applied in practice.Supervised vs. Unsupervised LearningUnsupervised Learning involves finding patterns in a large data sets and using them to extract meaning. Unsupervised learning models are not predictive in nature\u200a\u2014\u200athough they could play a role in a larger predictive modeling system. Rather, unsupervised learning seeks to reduce a large and complex dataset to simpler high-level patterns or themes. These themes can then be used as a reference to characterize individual data points and put them into a useful context.Anomaly and novelty detection systems are examples of unsupervised learning models. By reducing a large dataset into a small number of common themes, one can learn what it means for a particular transaction or account point to be \u201cnormal.\u201d By comparing any given transaction or account to this learned definition of normal, we can determine the extent to which they are anomalous compared to the global average (anomaly detection), or compared to a recent historical average (novelty detection). These anomaly detection systems can then be used to alert users whether anything unusual is happening on the whole blockchain, or within a particular subset of interesting accounts or transactions. Alethio currently offers an anomaly detection system for transactions, blocks, and accounts.Other kinds of analysis offered by Alethio that could arguably be considered unsupervised learning including ranking algorithms, or influence analysis like page rank. While these are not commonly referred to as machine learning algorithms at all (rather, just algorithms), they do serve the same purpose of finding overall patterns in a dataset and using them to add context.Supervised learning seeks to take a set of observations with known features, and uses them to estimate the corresponding value of some other variable (a response or label) for each observation. This could be broken down into two common categories: prediction and classification. Trying to use historical data to estimate the future value of variable (a response) is known as prediction. Trying to use existing data about an entity to determine whether that entity belongs to a certain category (assigning a \u201clabel\u201d) is known as classification.Generally speaking, the \u201cknowns\u201d on the blockchain consist of raw, protocol-level data that is available on-chain, such as transaction data. This raw data can be used to extract features for accounts, such as their total balance, average transaction frequency, average age of currency held, etc. Recent efforts by Alethio to augment protocol-level data with semantic lifting have expanded the set of \u201cknowns\u201d beyond the protocol layer to include application-level data, such as whether a contract is a token, and to which standard it complies. All of these known quantities can be used as the basis for features in a supervised learning model.On the other hand, the unknown quantity (the label or response) is by definition not a piece of currently-available on-chain data; otherwise it would already be known and captured by our data pipelines. The unknown quantity might be the future value of some on-chain data, such as the balance of an account on some future date. More commonly, the unknown quantity is some value that is never available on-chain at all. If you are trying to predict whether the account belongs to some category, such as being a decentralized exchange, a DOS account, or a Ponzi scheme, you will need to look off-chain for this data.The ETHSTats dashboard, tracking blockchain data in realtime.The Importance of\u00a0DatasetsThis is where the data requirements for unsupervised learning on the blockchain become an important problem (read: opportunity!). In order to train and calibrate a supervised learning model, there must be some large initial set of data for which the value of the labels or responses is known. This calibrates the model so that the predicted and actual response are as close as possible. This means that when a new observation comes in where the response is unknown, the prediction will be close to the true value, assuming the new observation is being generated by a similar process that generated the original dataset. Once the training phase is complete and the model calibrated, it can then be applied to new observations where the response is unknown.In the case of price prediction, this means having a large database of historical prices. In the case of classification of accounts, this means having an initial set of accounts that are already labeled as being a decentralized exchange, a DOS account, or a Ponzi.In these classification examples, the labels in the dataset used for training are often only available through significant effort. One possibility would be to pull data from websites like coinmarketcap or etherscan, building ETLs to import interesting data from other blockchain businesses, or through the painstaking effort of trained research assistants who gather data about on-chain accounts by surfing the web and analyzing source code.The realization of the importance of gathering external data about accounts (metadata) for the purposes of machine learning was the motivation for creating a new spoke at ConsenSys called Rakr. Through collaboration with Alethio and other spokes and services within the mesh, Rakr hopes to provide a platform for gathering and sharing this valuable metadata. While the implications of integrating blockchain metadata with raw on-chain data go far beyond machine learning, the applicability of this metadata for supervised machine learning will continue to be a primary use case for the Rakr platform. By combining Alethio\u2019s powerful analytics platform with the valuable metadata provided by Rakr, the applications of data science at ConsenSys will be limited only by the imagination.In PracticeThe first example of a supervised learning model produced at ConsenSys was the Ponzi model developed by Alethio, which will be described in more detail during the sequel to this article. The development of this model lays the groundwork for many future analytics possibilities for Alethio. Alethio hopes to expand this model to a more general fraud model in the near term.More generally, the feature extraction pipelines built during this model development effort can be reused to classify any account according to one of the labels in the Rakr database, including whether an account/contract is an exchange, an art DAO, a casino, a DOS-related account, and much more. As the set of interesting metadata provided by Rakr continues to grow, more new models will become possible. And as the analytics capabilities of Alethio grow and more useful features are created, these models will become more powerful and versatile.Being able to know whether a given account is a fraud or related to a DOS attack is crucial for managing financial and network risk on the Ethereum network. If we want to productionize models that provide actionable insights about new accounts and very recent behavioral data, they must satisfy special requirements. For example, we must make sure that they are being updated in real time, and that the features being used for classification and prediction are reliable and complete at the time the model is run. This means that certain features that can be used for classification of \u201cold\u201d accounts, such as \u201cwhether a contract eventually self-destructed,\u201d cannot be applied to accounts in real-time. Since the value of the feature may change in the future, it\u2019s true value is not really known at the time the model is run.Real-time machine learning models present unique challenges and opportunities that go beyond those of historical modeling techniques. With that said, the ability to classify accounts as frauds goes beyond real-time risk management; classification models can still be valuable even if they are applied \u201cin the past\u201d. Being able to accurately classify historical frauds is useful for research purposes, even if those accounts are no longer active. More generally, attaching tags to accounts on the blockchain allows users to define semantically interesting subsets of accounts on the blockchain (such as \u201cICOs\u201d or \u201cexchanges\u201d), rendering the blockchain searchable based on criteria that humans care about.Creating a database of empirical human knowledge about on-chain entities is already a valuable and challenging task, and a necessary foundation for many other products and services. But with over 30,000,000 Ethereum accounts and contracts to date and roughly 100,000 new accounts created every day, it is simply impossible for humans to tag the entire history of ethereum accounts, most of which have no useful information (such as contract source, a website, or any other identifying information) that could be used by humans to classify or tag them. This is why the machine learning models are crucial: because they are infinitely scalable, and can be used to classify accounts using only the raw data characterizing their on-chain behavior.By augmenting human knowledge about the blockchain with powerful analytics and machine learning, we envision a blockchain where every account and entity is enriched with useful classifications and properties, whether empirical and created by humans, or predicted and created by statistical models. This will be a major step forward for the transparency and accessibility of knowledge on the blockchain, which are an essential aspects required for blockchain technology to flourish.Keep an eye out for the next article by Paul Lintilhac, which will give an exposition of one of Alethio\u2019s recent data science initiatives: the Ponzi Model.", "responses": "1"}, {"title": "Rediscovering Ethereum: The Beige Paper Backstory", "author_name": "Micah Dameron", "link": "https://media.consensys.net/rediscovering-ethereum-the-beige-paper-backstory-df87b4e9613?source=search_post", "post_date": "Mar 26, 2018", "readtime": "6 min read", "upvotes": "802", "content": "Rediscovering Ethereum: The Beige Paper BackstoryHow working in a machine shop helped me understand the World Computer.Micah DameronBlockedUnblockFollowFollowingMar 26, 2018Before I started at ConsenSys, I used to work in a machine shop building high magnification scopes. For developers and others who are familiar with the philosophy of open source software, it\u2019s probably hard to picture just how different machine shops are. This is a bit of a puzzle, too, because the machining industry uses a lot of software. Manufacturers must efficiently map toolpaths to G-Code\u2013\u2013the list of assembly-like instructions that tells a machine when to turn cutting tools on, where to move them, when to turn them off, and lots of other cool stuff\u2013\u2013but the machining world is so closed and proprietary that each major manufacturer actually has their own variation of G-Code which only works on their particular machines. This is a marvel, considering that G-Code is a very limited and standardized set of instructions.Is it because the machines just run better when using the different instruction sets? No, that\u2019s not why. It\u2019s because once you write your program to cut parts on a certain type of machine, you can\u2019t simply pop the code into another machine and have it work. You have to rewrite it, test it, and then run it again and again on the new machine. Usually this is too much work to be worth the effort, so most shops will buy exclusively one or two brands of machine tools to run all their operations on.Perhaps it\u2019s because precision machine tools are far more expensive to run and maintain than computers. You can hack a computer and learn the system no matter how old the computer is. Machine tools require a kind of expertise that can\u2019t be hacked as easily because mistakes on machine tools are much more expensive than mistakes on a computer. On most computers, you can break the operating system as many times as you want and remedy the problem by just formatting the drive and reinstalling the OS.Machine tools are not so resilient or nimble in their recovery. First off, there\u2019s a lot of metal moving at high speed. You don\u2019t want to damage the machine, let alone injure yourself. A bug in an average computer program might cause a crash, in which case you\u2019d need to restart the program or reboot the computer; or in very rare cases reinstall the OS. A bug in a CNC program, however, can be of far greater consequence. A single bug can result in any or all of the following:Broken tool. On average, cutting tools cost between $15\u200a\u2014\u200a$150 to replace.Damaged stock material. Now you have to rebuild from scratch.Damaged machine, which means either several hours troubleshooting and calibrating or several thousands of dollars in repairs.Physical risk (flying chunks of metal in your vicinity).Naturally, established companies maintain an edge in the machining world because, by-and-large, incentives are vested in the major machining manufacturers that have decades of history and prior experience to keep their knowledge to themselves. I don\u2019t blame them.But laying blame aside for a moment, the point I\u2019m making is that their environment, in spite of being a potential hacker\u2019s dream-world, has remained mostly untouched by the open-source philosophy which has taken over the software industry.Machine YearningWorking at a production machine shop can feel pretty isolating. It\u2019s not a very cooperative or collaborative environment. It\u2019s mostly just you and your machine. There is often no one to field your questions, even if you see a potentially more efficient way to do things and want to tell someone about it. Senior employees respond to curiosity and ambition as if they\u2019re responding to intrinsic threats to their position or title. Intelligence, initiative, and merit are not respected unless they come with a good degree of boot-licking and self-minimizing so as not to seem too good at what you do, and potentially damage the ego of someone with more hierarchical power than you.While I was working at the shop, I read a lot of philosophy on the side to satisfy my curiosity. Most of the career machinists didn\u2019t seem threatened by it or to even care much at all. But for me, philosophy was an opportunity to investigate everything to its roots, to not just ask how something works but why we built it: technologies, political frameworks, economic models, value systems. Philosophy was thrillingly inexhaustible to me\u2013\u2013unless I found satisfying answers, I could keep asking questions all the way down.My philosophic pursuits ultimately pointed me toward cryptocurrencies, which seemed to tangibly address questions I had about privacy, security, access, and transparency into the history of assets. Certain blockchain projects, like Ethereum, lined up with my broader philosophical beliefs that in the long run, fully open-sourced, not closed source, technology tends to benefit everyone, even its own creators.Rediscovering EthereumAt the shop, we were allowed to have one earbud in as long as we had an ear plug in the other (how generous), so I would send various publications, ebooks, white papers, and so on into text-to-speech software (TTS), which allowed me to learn on top of my day job. I had tried and failed to understand Ethereum\u2019s Yellow Paper, but just for kicks I decided to put it into TTS expecting that it may make even less sense out loud. But I was wrong. TTS skips what it can\u2019t pronounce, so most of the Yellow Paper\u2019s formal proofs and mathematical notations were dropped, and the undecorated prose of the Yellow Paper was comparatively painless to understand. I felt compelled to do something.I left my machining job behind and staked my future on the blockchain. I started working with Alethio, a ConsenSys spoke that\u2019s building a powerful analytics platform for the Ethereum blockchain. Once I finished my internship with Alethio, I stayed on as a contractor with ConsenSys, doing odd-jobs such as transcribing Zoom meetings for our founder, Joe Lubin, or helping create a visual presentation for our smart contract auditing service: Diligence. I also started to use my contracting time at ConsenSys to carve out my vision of what I thought the Yellow Paper could be. This effort has culminated in the Beige Paper\u2013\u2013my attempt at a more approachable, more accessible version of the Ethereum Yellow Paper.I\u2019ve been overwhelmed by the positive reception the Beige Paper has had. It now has 100 stars on Github\u200a\u2014\u200aa major accomplishment for me, since I learned everything I used, including LaTeX and theoretical computer science, from books I read specifically for the project. I\u2019m happy to see just how many others have been longing for clarity in the same regard as I have. I\u2019ve had so much crucial support from team-members within ConsenSys, and peers from the broader Ethereum community.Although the Beige Paper has been a hit, I\u2019m not done yet. I plan to keep improving it, and my end-goal is to bring Ethereum to the masses in a precise yet digestible way. What ultimately bothered me about the Yellow Paper is that something so groundbreaking was actually inaccessible to so many interested people. That didn\u2019t seem right. Since the Ethereum protocol follows the open-source philosophy of sharing and collaboration, wouldn\u2019t it make sense for Ethereum\u2019s primary documents to be as transparent, accessible, and shareable as the protocol?", "responses": "3"}, {"title": "My cryptocurrency picks for 2018\u00a0: part 1\u200a\u2014\u200aEthereum", "author_name": "Mikolaj U", "link": "https://medium.com/@mik.umanski/my-cryptocurrency-picks-for-2018-part-1-ethereum-248b4eb64414?source=search_post", "post_date": "Dec 23, 2017", "readtime": "4 min read", "upvotes": "758", "content": "My cryptocurrency picks for 2018\u00a0: part 1\u200a\u2014\u200aEthereumMikolaj UBlockedUnblockFollowFollowingDec 23, 2017With 2017 wrapping up and 2018 just around the corner it is time to admit\u200a\u2014\u200athis year was a wild run for cryptocurrency market.Bitcoin constantly pushing new all time highs (peaking above $20000!), Ether rising from $8 to $800 while taking control of the top market cap charts with its altcoins\u200a\u2014\u200athis is just the tip of the crypto iceberg which is constantly gathering more mass.However the market was (and still is) extremely volatile\u200a\u2014\u200athe most recent correction is visible on the diagram below\u200a\u2014\u200amaking it hard for conventional investors to treat cryptocurrencies with confidence.In the middle of the price chaos we mustn\u2019t forget what makes cryptocurrencies so special and I am talking about revolutionary technology. Over the next couple of posts we will take a look at some of the currencies that I believe will achieve a lot in 2018\u2014 we won\u2019t be speculating prices, we will look at the technology and the product that team is trying to deliver.EthereumCreated in November 2013 by Vitalik Buterin who came in contact with blockchain through Bitcoin in 2011. Simply sending funds back and forth wasn\u2019t enough for him\u200a\u2014\u200ahe wanted this new technology to do more.https://www.ethereum.org/Ethereum (ETH) is a platform for decentralized applications that run smart contracts. This means that they can work exactly as the developer wants them to, on the ETH blockchain. Some of the highlighted use cases include storing registries of debt or creating whole new markets\u200a\u2014\u200aand many apps are currently being created to address all the business needs. Additionally, everyone can easily issue their own token compatible with ETH blockchain to accompany their application. All this is possible thanks to the Solidity programming language, created specifically for ETH.Transaction time and fees are next advantages of ETH\u200a\u2014\u200aas of December 23rd one would need to pay $0.098 to have their ETH transferred in about 20 minutes. The fee to transfer Bitcoins in the same amount of time is slightly bigger\u2026 493 times bigger to be precise ($48.34!!).ETH, despite being faster and cheaper than BTC, still can\u2019t comfortably handle as many transactions as PayPal (193 tx/sec) or Visa (1667 tx/sec) does.However, ETH team is working hard to improve scalability issues. This will be eventually achieved by sharding, which will enable the blockchain to process millions of transactions per second while retaining security and decentralization. Updates introducing foundations for sharding are planned for unspecified time in 2018, meanwhile the detailed explanation can be found there.Let\u2019s take a look at the current top 100 coins by market cap. Over 40 of them are based on Ethereum platform!Some of the top coins build on top of Ethereum\u00a0platformThis shows how big ETH\u2019s platform potential is and since Ether, coin that powers Ethereum platform, is required for transactions on the ETH blockchain\u200a\u2014\u200amass adoption of Ethereum and its applications seems inevetable.We shall not be too optimistic\u200a\u2014\u200athere are some obstacles that ETH may face on its way to the top. One of them might be Lisk platform, which aims to achieve what ETH does, while making it possible for others to develop new apps using the most popular programming language\u200a\u2014\u200ajavascript. Further adoption of Lisk is yet to be seen though. With so many coins being developed on ETH platform we might be stuck with many useless coins and without useful use cases\u200a\u2014\u200awhat is the point of having Ethereum?As of now we shouldn\u2019t worry, as many interesting projects led by ambitious team are currently under development, and I will talk about one of them in detail in couple of days, so stay tuned!This was a great year for Ethereum\u200a\u2014\u200arising from merely $8 in January to over $800 in December, introducing the Byzantium Hard Fork without problems in October\u200a\u2014\u200aETH has gathered a vibrant and vocal community around it and I am certain the future will bring even more good news for ETH supporters in 2018.Beware Bitcoin, ETH is coming and it has the technology!", "responses": "4"}, {"title": "Clustering Ethereum Addresses", "author_name": "Will Price", "link": "https://towardsdatascience.com/clustering-ethereum-addresses-18aeca61919d?source=search_post", "post_date": "Dec 6, 2018", "readtime": "5 min read", "upvotes": "1.1K", "content": "Clustering Ethereum AddressesCategorizing addresses using patterns in transaction activityWill PriceBlockedUnblockFollowFollowingDec 6, 2018Image credit: Reddit user IanJMeikleIntroductionEthereum users may be anonymous, but their addresses are unique identifiers that leave a trail publicly visible on the blockchain.I built a clustering algorithm based on transaction activity that divides Ethereum users into distinct behavioral subgroups. It can predict whether an address belongs to an exchange, miner, or ICO wallet.The database was constructed using SQL, and the model was coded in Python. Source code is available on GitHub.3D representation of Ethereum address feature space using\u00a0T-SNEBackgroundThe Ethereum blockchain is a platform for decentralized applications called smart contracts. These contracts are often used to represent other assets. These assets can represent physical objects in the real world (like real estate titles) or be purely digital objects (such as utility tokens).The computations required to execute smart contracts are paid for in ether, the native currency of the ecosystem.Ether is stored in cryptographically secured accounts called addresses.MotivationMany people believe that cryptocurrencies offer digital anonymity, and there is some truth to that belief. In fact, anonymity is the core mission of Monero and ZCash.Ethereum, however, is more widely used, and its broad flexibility results in a rich, public dataset of transactional behavior. Because Ethereum addresses are unique identifiers whose ownership does not change, their activity can be tracked, aggregated, and analyzed.Here, I attempt to create user archetypes by effectively clustering the Ethereum address space. These archetypes could be used to predict the owner of an unknown address.This opens up a wide array of applications:understanding network activityenhancing trading strategiesimproving AML activitiesResultsParticipants in the Ethereum ecosystem can be separated by patterns in their transaction activity. Addresses known to belong to exchanges, miners, and ICOs qualitatively show that the results of clustering are accurate.Technical DetailsFeel free to skip to Interpreting the Results below.Feature EngineeringThe Ethereum transaction dataset is hosted on Google BigQuery. Using the 40,000 addresses with the highest ether balances, I created 25 features to characterize differences in user behavior.Features derived for each\u00a0addressChoosing the Appropriate Number of\u00a0ClustersUsing silhouette analysis, I determined the optimal number of clusters to be roughly 8.This choice minimizes the number of samples with negative silhouette scores, which indicate that a sample may be assigned to the wrong cluster.But how do we know if it\u2019s\u00a0working?By scraping data from the Etherscan.io block explorer, I gathered crowdsourced labels for 125 addresses in my dataset.The majority of labels fell into three categories:exchanges, miners, and ICO wallets.Clustering is an unsupervised machine learning technique, so I could not use labels to train my model. Instead, I used them to assign user archetypes to clusters, based on the highest label density for each cluster. Results can be found here.2D visualization of initial clustering. Known addresses on the\u00a0left.Re-clusteringExchange and miner addresses were mixed together in the same cluster at first. To separate them, I performed a second round of clustering, using only the addresses in that cluster.By changing the dissimilarity measure from euclidean distance to cosine distance, I dramatically improved separation between exchanges and miners.Improved separation of exchanges and miners. Known addresses on the\u00a0left.By substituting results from re-clustering into the original analysis, we end up with 9 clusters.2D visualization of final clustering results. Known addresses on the\u00a0left.Interpreting the\u00a0ResultsWe can draw conclusions about user behavior based on the corresponding cluster centroids.Radar plot\u200a\u2014\u200acluster centroid address\u00a0featuresExchangesHigh ether balanceHigh incoming and outgoing transaction volumeHighly irregular time between transactionsExchanges are the banks of the crypto space. These results are intuitive.MinersLow ether balanceSmall average transaction sizeMore regular time between transactionsMiners secure the blockchain by expending computational power, and are rewarded with ether. Groups of miners often \u201cpool\u201d their resources to reduce variance in payouts, splitting the proceeds based on resources contributed.ICO WalletsHigh ether balanceSmall number of large transactionsMost regular time between transactionsICOs (Initial Coin Offerings) are a common fundraising method for crypto startups. It makes sense that these startups would have large war chests, and periodically sell large amounts to cover regular business expenses.Other categoriesThe Exchange and Mining clusters are highly similar, as they were created in the second round of clustering.Addresses in cluster 7 have a large amount of smart contract activity.Clusters 2 and 5 are highly distinct.Can you identify any of these user\u00a0groups?Next StepsExpanding on this work would allow a more nuanced view of Ethereum blockchain data. Here are some particularly interesting areas:Adding features based on graph theory & network analysisDistinguishing bots from humansExpanding smart contract analysisRepeating analysis for ERC-20 token transaction activityQuestions? Suggestions?You can find me on Twitter or LinkedIn.ReferencesEtherscan.io Label Word CloudMastering EthereumCharacterizing the Ethereum Address SpaceA Fistful of Bitcoins: Characterizing Payments Among Men with No NamesThanks to Brandon Martin-Anderson, Alex Cuevas, John Braunlin, and Eric Bragas for reviewing drafts of this article.", "responses": "3"}, {"title": "The Ethereum Challengers, ep. 7: Ethereum Classic\u00a0(ETC)", "author_name": "Peter Keay", "link": "https://medium.com/the-ethereum-challengers/the-ethereum-challengers-ep-7-ethereum-classic-etc-9f7440e25446?source=search_post", "post_date": "Jul 8, 2018", "readtime": "12 min read", "upvotes": "1K", "content": "The Ethereum Challengers, ep. 7: Ethereum Classic\u00a0(ETC)The original Ethereum chain, with a commitment to immutability, sidechains, and aspirations in the IoT\u00a0space.Peter KeayBlockedUnblockFollowFollowingJul 8, 2018Confusing newcomers is something cryptocurrency does particularly well.Bitcoin. Bitcoin Cash. Ethereum. Ethereum Classic.\u2026Bitcoin Gold, Bitcoin Diamond, Bitcoin God, Ethereum Fog\u2026Are you kidding\u00a0me.As most readers will know, but most newcomers will not, Ethereum Classic isn\u2019t a subsidiary or alternative product offered by Ethereum. They share a common origin, yes, but they\u2019re now entirely separate projects.Ethereum (ETH) hard-forked in 2016 to undo the damage caused by a bad actor taking advantage of bad code, as we\u2019ll explore below, but Ethereum Classic continued the original chain, allowing the bad actor to keep their stolen tokens as ETC\u200a\u2014\u200asince doing otherwise would be an act of censorship and violation of immutability.As Ethereum\u2019s currency is called \u201cether,\u201d ETC tokens are called \u201cclassic ethers.\u201dOpinions on the ETH/ETC divide run hot, with strong proponents and equally strong critics.So far we\u2019ve looked at RSK, EOS, Cardano, NEO, NEM, and Qtum. Each time, we\u2019ve discussed a few concepts relevant to each project. To understand Ethereum Classic, we\u2019ll take a brief look at forks and immutability.Note: As we move down the market cap rankings, good, up-to-date info gets harder to find. I\u2019d greatly appreciate a comment or a tweet to @bitgenstein if you have important information to add to this article.May the Fork Be With\u00a0YouFor much of 2017, a lot of price action both ways was driven by forks. Not all forks are alike:Some forks only fork code without continuing the same blockchain. For example, Litecoin was a fork of Bitcoin\u2019s code, but owners of bitcoins didn\u2019t receive free litecoins when the Litecoin network launched.GitHub forks like this aside, there are two types of upgrade forks:Soft forks only require roughly a majority of nodes to accept the upgrade. Since new transactions after a soft fork still follow the old rules and will be approved by outdated nodes, it is not necessary for all nodes to upgrade. Conversely, though, some transactions that would be accepted by outdated nodes might not be accepted by upgraded nodes following the new rules\u200a\u2014\u200aso soft forks cannot be undone without a hard fork. Since we\u2019re not talking about a soft fork in this article, I\u2019ll save examples for a later article.Hard forks, by contrast, require all nodes to implement the upgrade or be rejected by the upgraded network. In this case, if enough nodes reject the upgrade, the old, non-upgraded network will continue, and the new, upgraded network will fork into a new network and a chain split.Chain splits are the most notorious forks, and the source of many \u201cfree coins\u201d during the 2017 hype.Bitcoin Cash, for example, shares the same blockchain content with Bitcoin (BTC) up until 1 August 2017 (block 478559), so everyone up until that point who had an amount of BTC also had the same amount of BCH.Changes to the BTC blockchain since then have not affected BCH balances, and vice versa, since the BTC and BCH ledgers have split, never to join again.To explain a chain split, here\u2019s the greatest nerd analogy\u00a0ever.It\u2019s kind of like how an official change to Star Wars IV: A New Hope would affect both Star Wars Legends (the Expanded Universe books) and the now-canonical Disney Star Wars movies. They both share the same root source material, the same original chain: the pre-Disney movies.Whether Han shot first is not two questions, but one, and the answer affects both Legends and Disney, since the shootout with Greedo was before the fork.But a change to one universe after the fork doesn\u2019t affect the other. Han Solo is still alive in the Legends chain, and Chewbacca is still alive in the Disney movies chain. Both Legends Han and Disney Chewbacca are blissfully unaware of the fates of their alternative selves.Uh, retroactive spoiler\u00a0warning.Speaking of retroactive spoilers, the most famous hard fork and chain split ever executed by Ethereum was created to refund victims of the hack of The DAO.The DAO is a now-infamous Initial Coin Offering that ran on Ethereum in mid-2016\u200a\u2014\u200awith a vulnerability in its code that resulted in the stealing of millions and millions of dollars\u2019 worth of funds.Ethereum forked to return the hacked funds. But some in the Ethereum community believed this censorship was the wrong move, and so the chain continued sans refunds as Ethereum Classic.Excerpts from the Ethereum Classic timeline posted on https://ethereumclassic.github.io/Ethereum Classic is the incarnation of belief in immutability: that nothing that happens on the blockchain should ever change, under any circumstances. Code is law, and if we start changing things arbitrarily when the code works differently than we thought, we open up the door to censorship once again.Side Discussion: Code Is\u00a0Law?I usually keep philosophical opinions out of Ethereum Challengers posts. But since ETC\u2019s primary dispute with ETH is philosophical, we have to get philosophical ourselves to do it justice.Ethereum Classic is all about total immutability, yet as I argue elsewhere, and in good company, \u201cCode Is Law\u201d smart contracts are too inflexible to actually rule the real world, at least beyond a very limited set of cases.For one thing, those who think they can create a set of universal ethical laws that are not adaptable to specific people and situations\u200a\u2014\u200aand yet remain just\u200a\u2014\u200aprobably haven\u2019t had much experience with justice systems.For another, related thing, technology has not yet advanced to a place where the subjective realities of humans can be reasonably accommodated by robots. Coded contracts do not understand context and lack compassion.A world ruled by hard numerical law without exception would probably end up something like Nosedive, that Black Mirror episode where a numerical social media rating is everything. A string of mistakes and unfortunate circumstances plunges a girl with a 4.2 eager to increase her rating down into the depths of the lower 2s. Each new poor rating snowballs into others, and soon she has no way to escape the avalanche.This is not to say that I think we should ramp up censorship.Rather, as we move forward with designing these systems, we need to continually innovate robust technology that somehow accommodates human subjectivity.This might mean decentralized arbitration.It might mean limitations on what kinds of contracts are law combined with solid formal verification.Or it might mean incredible developments in artificial intelligence.Or it might mean something else we haven\u2019t yet invented.That\u2019s also not to say there is no place for Ethereum\u00a0Classic.I\u2019m just not sure we want to live in a world ruled by it, a world where it becomes the platform. It could feasibly be a large part of the coming economy\u200a\u2014\u200awhere its approach is used only in appropriate cases.Ethereum\u2019s ability to deal with a real-world situation, The DAO, was in fact the reason that Ari Nazir of Neural Capital cites for becoming more interested in Ethereum, on episode 13 of Clay Collins\u2019s podcast The Flippening:\u201cIt was really the\u00a0\u2026 real professional response, in my opinion, after that, and how that was handled really for everybody in the entire world to see, that got me believing in the potential for Ethereum and smart contract platforms\u00a0\u2026 It was really after The DAO that I had more faith in a lot of the governance and the way that people were able to respond to real-world events.I understand where Ari is coming from. There might be applications where ETC\u2019s philosophy is best, but I doubt it\u2019s a good idea for the whole decentralized world.All of that said, I\u2019m happy to see that the conversation is shifting away from \u201cwhich chain is best?\u201d to a co-existence of these\u00a0ideas.Ethereum Classic is the chain you go with if you need and want complete immutability for your project.Will the market and the people determine that there is sufficient demand for these advantages? We\u2019ll see.Serenity Later!Photo: Vandelay IndustriesEthereum Classic has, of course, seen development activity since the fork. Like Ethereum, the \u201cdifficulty bomb\u201d designed to force the network to transition to Proof of Stake was delayed.Ethereum itself has four major development stages: Frontier, Homestead, Metropolis, and Serenity. We\u2019re currently in the Metropolis stage, which has two parts (Byzantium and Constantinople) and is designed to implement zk-Snarks for privacy, Proof of Stake for scalability, account abstraction, and upgrades to smart contracts.Part of moving to Proof of Stake is the \u201cdifficulty bomb,\u201d designed to force the network to transition away from Proof of Work. Ethereum development wasn\u2019t as rapid as initially planned, so the difficulty bomb was delayed in the Byzantium hard fork. Ethereum Classic also needed to hard fork to delay this difficulty bomb.But Ethereum Classic hard-forked in something significant of its own, too: on December 11, 2017, Ethereum Classic implemented a fixed cap monetary policy: in other words, while a small stream of ethers will be issued forever, classic ethers will cap at 210 million.With immutability paramount and a fixed cap monetary policy implemented, and no immediate plans for moving to Proof of Stake, Ethereum Classic is keeping closer to its Bitcoin roots than Ethereum itself does.The Core Devs and IOHK\u2019s Grothendieck TeamFrom left: Satoshi Nakomoto, Brian Armstrong, Charles \u201cBig Hoss\u201d Hoskinson, and Riccardo\u00a0SpagniOne well-known figure in the cryptocurrency space is Charles Hoskinson (not actually pictured above). Charles was the initial CEO of Ethereum, but left before the launch of the project back in 2015. When ETC split from ETH, Hoskinson quickly involved his group IOHK in the former.IOHK now includes Ethereum Classic as one of its major cryptocurrency projects, the others being Cardano (ADA) and ZenCash. The IOHK website promotes Ethereum Classic as \u201ca next-generation digital currency united with an intuitive programming platform. This allows software developers of all skill sets to build the next wave of market disrupting decentralized applications (Dapps) that can change the world.\u201dThe team at IOHK working on ETC is called \u201cthe Grothendieck Team,\u201d and their recent activity is focused on the Mantis ETC wallet:However, IOHK is not actually in charge of core Ethereum Classic development. Nor is a centralized foundation like ETH\u2019s Ethereum Foundation, which ETC repudiates.The core ETC team currently keeps a low profile and is in the short-term focused on:\u201cScalability through sidechains,\u201d\u201cIoT and Machine-to-Machine protocol,\u201d andHelping \u201c3rd party developers to build apps on top of ETC.\u201dAs I mentioned above, despite IOHK\u2019s major focus on Proof of Stake (Cardano\u2019s PoS system Ouroboros is a major development), the Ethereum Classic community seems to be sticking with Proof of Work for the foreseeable future. On this, Hoskinson remarks,\u201cThat\u2019s fine. We shouldn\u2019t fall in love with one idea. While I do think Ethereum Classic\u2019s consensus algorithm, \u2018Ghost,\u2019 needs to be removed or improved, sticking to proof of work will help us differentiate from Ethereum, so the two projects can complement each other instead of competing.\u201cThis could also help Ethereum, as miners will have a place to go when they make the switch, which should make their transition easier.\u201dGood Luck\u00a0BrianCoinbase arguably gave Litecoin so much of its growth and tenacity over 2017. Retail investors joining Coinbase were immediately presented with a coin with solid charts and a thesis that was attractive to them.Now, Coinbase has announced support for Ethereum Classic \u201cin the coming months.\u201dAfter the addition of Bitcoin Cash, it seems obvious to many that Coinbase has selected Ethereum Classic before the \u201cmany other assets\u201d it will add simply due to ease of integration. (ETC was actually issued to those who held ETH on Coinbase at the time of the 2016 hard fork and was available for withdrawal until December 30, 2016.)But Ethereum Classic fans and team members say Coinbase made the choice because of the outsized potential of the project:Why Did Coinbase List ETC?Part 1: The Tech and Communitymedium.comTake Anthony Lusardi, director of ETC Cooperative, who says that \u201cthe future of ETC is the future of all cryptocurrencies, and that future is interoperability, there will be no one winner. ETC will become highly interoperable while others naively fight to be dominant.\u201dSo it\u2019s time for our big questions, applied to Ethereum Classic\u00a0(ETC).1. ScalabilityEthereum Classic has its own scalability plans, involving sidechains, for 2018 and forward. As with most major platforms, scalability is the most urgent project on the developers\u2019 plates. ETC devs have also hinted at interoperability, arguably another kind of scalability. I don\u2019t know more details at this point.2. GovernanceBitcoinesque. \u201cEthereum Classic manifests these values by relinquishing control by a formalized central foundation. The only hierarchy is that of transparent meritocracy and mutual reputation. No backroom deals or behind-closed-doors unilateral decision making; just free and open discourse.\u201dImmutability\u200a\u2014\u200ano censorship under any circumstance\u200a\u2014\u200ais a major focus. As ethereumclassic.org puts it, \u201cYour ETC is yours forever.\u201d3. Development ComplexityGiven that Ethereum Classic is built on \u201ccode is law,\u201d bugs will likely not be easy to fix.Development work unique to Ethereum Classic has produced the Emerald Software Developer Kit, a toolkit to build dapps. The SDK contains other components for developers such as UI, libraries, and build tools.Developers seeking an incubator and all the accompanying support can pursue a place at Ethereum Classic Labs. ECL funding is between $100,000 and $500,000 per project.Usually this category doesn\u2019t have a clear winner, but at this point Ethereum apps have the same basic development flow as ETC and yet also have a larger and growing set of tools and incubators. One of Ethereum Classic\u2019s major focuses is improvements for developers, so this may change in the future.4. TimelineDeployment of scalability via sidechains is planned for 2018. Focus on IoT applications and courting developers will be major goals in the years to come.5. Generalized FeaturesETC does have an SDK with libraries and build tools. These aren\u2019t the same as generalized features, but they do ultimately provide many of the same benefits.As with the other categories, information about Ethereum Classic\u2019s plans for the future beyond broad strokes is still difficult to find.6. AdoptabilityI\u2019m not aware of any improvements to adoptability by Ethereum Classic over Ethereum at this time.ETC may actually be harder to adopt, as some ETH tools do not work on ETC yet. One example is MetaMask, though ETC is working on MetaMask compatibility. Going forward, each ETH adoptability improvement may be compatible with ETC or may not. Of course, ETC may build its own improvements to user-friendliness.7. Market\u00a0PositionSome may hope that Ethereum Classic has strength because of its commitment to immutability, but that has shown limited practical effect. The community needs to make major plays to gather attention, and the past couple of months include at least two.First, Consensus 2018 saw the $50 million launch of Ethereum Classic Labs. Second, Ethereum Classic is going to be added by Coinbase soon. This alone may give it the publicity, clarity, and price bump needed to spur future development. Amidst bigger, more popular projects, I\u2019m not holding my breath, but I\u2019ll keep an eye on it.The Ethereum Challengers series has so far explored:RSK (formerly RootStock), with side discussions on smart contracts, Turing completeness, and sidechains,EOS, with an intro to consensus methods and Delegated Proof of Stake, the Byzantine Generals Problem, and Byzantine Fault Tolerance,Cardano (ADA), with an introduction to formal verification and an endless link-rabbithole starting at Ada Lovelace,NEO (NEO and GAS), with discussion of China\u2019s size and government philosophy as factors in the success of Chinese projects,NEM (XEM), formerly New Economy Movement, with a focus on templates, APIs, and multi-level multi-signature transactions, andQtum (QTUM), pronounced \u201cQuantum,\u201d including a discussion of Bitcoin\u2019s UTXO model vs. Ethereum\u2019s account model.Lisk was scheduled to be up next, but first we\u2019ll detour into two newer projects: IOS (with the token IOST) and Hedera Hashgraph.I have zero commitment to keeping this article immutable, so don\u2019t forget to mention anything you think needs adding, and I\u2019ll be happy to include it.", "responses": "5"}, {"title": "", "author_name": "Yanislav Georgiev Malahov", "link": "https://medium.com/@yanislav/king-of-bitcoin-godfather-of-ethereum-a9af9ecf56d5?source=search_post", "post_date": "May 25, 2015", "readtime": "13 min read", "upvotes": "607", "content": "Godfather of\u00a0EthereumYanislav Georgiev MalahovBlockedUnblockFollowFollowingMay 25, 2015", "responses": "6"}, {"title": "Ethereum is blooming and we are doubling down on\u00a0it", "author_name": "Martin K\u00f6ppelmann", "link": "https://blog.gnosis.pm/ethereum-is-blooming-and-we-are-doubling-down-on-it-9cb486b170ff?source=search_post", "post_date": "Aug 16, 2018", "readtime": "2 min read", "upvotes": "1.7K", "content": "Ethereum is blooming and we are doubling down on\u00a0itMartin K\u00f6ppelmannBlockedUnblockFollowFollowingAug 16, 2018We heard the Ether price dropped? We don\u2019t care too much. Being active in the space since Bitcoin $9 this is nothing new and we prepared for this event. We have a team of over 50 people now working full time on the Gnosis platform and we can continue to finance this for the next 5\u20137 years without the need to sell any of our ~200k ETH in reserve.The numbers we care about is the usage of decentralized applications. And as a next step, the number to look out for is DAPPs that seemlessly interact with each other and draw a benefit from being on the same platform. As a side effect, ultimately the price of ETH will then be a function of the demand for the use of applications in this reliable, open, and interlinked environment.We have chosen to make Ethereum the primary environment for the platform we are building ourselves. Thus, it is in our best interest to make this environment flourish. Or as Jarrad from Status put it: \u201cA rising tide lifts all boats.\u201dWe will implement a consequent web3/Ethereum first strategy. Whenever there is a viable decentralized alternative, we will use it. A few examples:We will use some ETH in reserve for CDPs on MakerWe will give control as soon as possible to DAOsWe will do all tweets first on PeepethWe will post our blog posts first on Akasha once it is on MainnetWe will create bounties on the many ETH bounty sitesWe will use prediction markets to see if we are on track of our milestonesWe encouraging all Gnoseers to try and use DAPPs and products from the ecosystemVice verca we will spend more time making sure that it gets as easy as possible to use what we contribute to the ecosystem. The Safe to interact with DAPPs safely and without Ether. The DutchX for contracts as a token price feed and token conversion mechanism, and of course prediction markets!", "responses": "3"}, {"title": "Introducing Status\u200a\u2014\u200aEthereum for\u00a0Mobile", "author_name": "Carl Bennetts", "link": "https://blog.status.im/introducing-status-ethereum-918b1447274?source=search_post", "post_date": "Oct 18, 2016", "readtime": "5 min read", "upvotes": "341", "content": "Introducing Status\u200a\u2014\u200aEthereum for\u00a0MobileCarl BennettsBlockedUnblockFollowFollowingOct 18, 2016On the heels of another successful hard fork, we\u2019re pleased to give some updates on Status, an open source light client for Android and iOS. For those of you who missed our presentation at Devcon2, this is what we\u2019ve quietly been working on this year.You can think of Status as a mobile OS, built for Ethereum.Status combines a messenger and a browser, to build a gateway for everyday smartphone users to begin using \u00d0Apps, and a simple way for \u00d0App developers to reach new users.In 2016, we are still only at the dawn of the Ethereum ecosystem. But given time, Status will evolve into a seamless way to interface with a full suite of decentralized applications and services.Our mission is to lower the barriers to entry on Ethereum. Not only will this create a more valuable \u00d0App ecosystem, but also facilitate the transition to a more open internet.The Evolution of\u00a0StatusAlthough we haven\u2019t made any public announcements until recently, it was a little over 18 months ago that we began porting the Ethereum Java implementation to Android (thanks to the foundation through a \u00d0evgrant we were awarded for this\u200a\u2014\u200asuccessfully completed prior to Devcon1).Our original idea was to create a mobile \u00d0App browser, but as we began observing our own behaviours on our smartphones, and analysing industry trends we took a different approach at the beginning of 2016.We\u2019ve since grown to a team of eight headquartered in Singapore, and the product has evolved significantly. We\u2019re now running a full implementation of Go Ethereum, with the light client and Whisper protocols enabled.Why Messaging?It became clear that if we wanted to build a platform for users to interact with smart contracts, it would need to be social. Humans are social creatures, and Ethereum is a social technology.If you want to get a glimpse at where mobile user experience is heading, one can turn to China. In the largest market by device volume, 36% of all time spent on smartphones is spent inside instant messaging applications.In both the US, and globally, messaging applications now boast even more active users than social networks.Hence, Status has a focus on messaging and chats. After all, when was the last time you signed an agreement without some social interaction around it beforehand?End-User Functionality (During\u00a0Beta)The first iteration of Status is geared towards the Ethereum developer community, and has a long way to go before it\u2019s ready for the mass-market.Status\u2019 UI is an attempt to capture the essence of Ethereum visually\u200a\u2014\u200aby expressing its generality and flexibility.A bare-bones Alpha release, with very limited functionality will be out towards the end of Q4.Our Beta is scheduled for Q2\u20133 2017, and will provide end-users with the following:Encrypted Messaging\u200a\u2014\u200abuilt on top of Whisper, enabling one-on-one, group chats, and social payments.Ether Wallet \u2014a built in wallet to provide ETH storage, send/receive transaction, a QR reader, and transaction logs.Discover\u200a\u2014\u200aa hashtag-based search where users can find other Status users, and other \u00d0Apps, to discuss ideas or exchange goods and services. We leave it up to the individual user to decide if they want their profile to be discoverable or kept private.Local P2P Exchange \u2014In our Beta release we\u2019ll be introducing our first \u2018Default \u00d0App\u2019, which not only showcases what the platform is capable of, but can also provides our first business model. Users can find other Status users nearby to exchange fiat to ETH and vice-versa, for a small transaction fee.Note: This will be an experimental release, and security audits will be completed over many phases. During this release, it is important that you do not store any meaningful amount of Ether.Discover\u200a\u2014\u200aa hashtag based search feature, built into\u00a0StatusStatus for DevelopersOur Beta release will include tooling for Developers, and a Chat API so users can interact with \u00d0Apps in a chat context.In Status, \u00d0Apps are considered first-class citizens, and you can chat to them just as you would a friend. Chatbots won't always make sense, and it's important to note users can interact with \u00d0Apps rendered both in Webkit and/or in chat, depending on the the desired functionality.While it\u2019s still early days, if you\u2019re working on a \u00d0App and would like to see it inside Status, we\u2019d love to talk to you.All \u00d0Apps are welcome, and we\u2019re particularly interested in identity and reputation systems, decentralized exchanges, lending and stable crypto-tokens.ConclusionStatus is an Ethereum-first client where Ethereum sub-protocols are first class citizens. Such a client, like Mist, frees us from having to exclusively look backward for Blockchain integration with legacy technologies, but to start fresh, look forward and give Ethereum the space it needs to envision a world built on crypto-technologies.We have no disillusions to the amount of development yet to be undertaken, and reaching mass adoption hinges heavily upon further development of the \u00d0App ecosystem, underlying protocols and service layers, and the scalability of the network in general. Status is just a small, yet necessary facet in the complex ecosystem.Ultimately we see Status as a catalyst towards the widespread adoption of Ethereum, making it more palatable for a much wider audience. Future iterations will become increasingly more friendly and simple-to-use for the average smartphone user, whilst simultaneously creating a stronger value proposition through \u00d0App integrations.If you're interested providing feedback, contributing, or are a \u00d0App developer who would like to be one of our very first \u00d0App integrations, please get in touch over on our Slack Channel.TL;DRSocial smart contracts and decentralised apps are coming, and Status as a messaging platform makes sense.Connect or ContributeSlack: http://slack.status.im | Twitter: @ethstatus | Email: [email\u00a0protected] |Github: https://github.com/status-im/https://github.com/status-im/status-react/wiki/Developers'-GuideSourceshttp://www.vertoanalytics.com/verto-analytics-and-iresearch-partner-to-measure-the-chinese-internet-ecosystem/http://www.businessinsider.de/the-messaging-app-report-2015-11?r=US&IR=Thttp://www.gartner.com/newsroom/id/3187134https://www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution-what-it-means-and-how-to-respond/", "responses": ""}, {"title": "Hands On: Get Started With Infura and the IPFS on\u00a0Ethereum", "author_name": "Niharika Singh", "link": "https://medium.freecodecamp.org/hands-on-get-started-with-infura-and-ipfs-on-ethereum-b63635142af0?source=search_post", "post_date": "Jul 28, 2018", "readtime": "6 min read", "upvotes": "1K", "content": "Hands On: Get Started With Infura and the IPFS on\u00a0EthereumNiharika SinghBlockedUnblockFollowFollowingJul 28, 2018Why Infura?There are a lot of pain points being faced by blockchain which may be solved by Infura and/or the InterPlanetary File System (IPFS), to some extent. These are the main challenges:It\u2019s expensive to store data on the Ethereum blockchainIt\u2019s tough to configure an Ethereum geth clientIt\u2019s tough to scale the infrastructureIf you use Infura, access to the Ethereum network and the IPFS becomes a lot faster. It no longer takes hours to sync up the geth client which uses up a huge chunk of memory and bandwidth while the entire blockchain gets downloaded.Here are some other advantages that come with using Infura:Huge amounts of data can be stored on the IPFS, and just the hash of the file can be stored on Ethereum.Infura provides secure, reliable, scalable, and easy to use APIs to access the Ethereum network and the IPFS. Developers do not have to worry about the infrastructure of an Ethereum node or an IPFS node. That is taken care of by Infura.Infura provides TLS enabled public endpoints.The code is portable on Ethereum\u2019s interface using JSON RPC, Web3.Infura is practically a developer\u2019s Swiss Army knife, and also saves the deployment team from the hell of scalability issues.And finally, Infura is trusted:dApp DescriptionOur dApp will take a file as input from a user and upload it to the IPFS by invoking an Ethereum contract. The hash of the file will be stored on Ethereum.This is the process we\u2019ll go through:Take file as an inputConvert file to bufferUpload buffer to IPFSStore hash of file returned by IPFSGet user\u2019s Metamask Ethereum addressUser confirms transaction to Ethereum via MetamaskIPFS hash is written on EthereumdApp ArchitectureTech Stack\u00a0InvolvedReact\u200a\u2014\u200aFront end librarySolidity\u200a\u2014\u200aThe language used to build smart contracts that runs on EthereumIPFS\u200a\u2014\u200aDecentralized storageInfura \u2014API access to Ethereum network and IPFSLet\u2019s Code!Make sure you already have Metamask downloaded. If not, download it from here.Also, keep your Node and NPM up to date.Install the following dependencies:$ npm i -g create-react-app$ npm install react-bootstrap$ npm install fs-extra$ npm install ipfs-api$ npm install web3After you\u2019re done, run the following command on your CLI to create a sample React project. I\u2019ll name my project ipfs.$ create-react-app ipfsDeploy the Smart Contract on Ropsten\u00a0Testnet.Make sure you\u2019re on Ropsten testnet on metamask.To deploy the smart contract, we need ether. To get ether for Ropsten testnet, go to https://faucet.metamask.io/.To deploy the smart contract, go to https://remix.ethereum.org.pragma solidity ^0.4.17;contract Contract { string ipfsHash;  function setHash(string x) public {   ipfsHash = x; } function getHash() public view returns (string x) {   return ipfsHash; }}Save the address of smart contract. Mine is: 0x610DD75057738B73e3F17A9D607dB16A44f962F1Also, save the Application Binary Interface (ABI) in JSON. It can be found in the \u2018compile\u2019 tab, under \u2018details\u2019.Mine is the following:[ {  \"constant\": false,  \"inputs\": [   {    \"name\": \"x\",    \"type\": \"string\"   }  ],  \"name\": \"sendHash\",  \"outputs\": [],  \"payable\": false,  \"stateMutability\": \"nonpayable\",  \"type\": \"function\" }, {  \"constant\": true,  \"inputs\": [],  \"name\": \"getHash\",  \"outputs\": [   {    \"name\": \"x\",    \"type\": \"string\"   }  ],  \"payable\": false,  \"stateMutability\": \"view\",  \"type\": \"function\" }]In the \u201cipfs/src\u201d directory, create the following files: web3.js, ipfs.js, and storehash.js.File 1\u200a\u2014\u200aWeb3.jsimport Web3 from 'web3';const web3 = new Web3(window.web3.currentProvider);export default web3;File 2\u200a\u2014\u200aStorehash.jsimport web3 from './web3';//Your contract addressconst address = '0x610dd75057738b73e3f17a9d607db16a44f962f1';//Your contract ABIconst abi = [ {  \"constant\": false,  \"inputs\": [   {    \"name\": \"x\",    \"type\": \"string\"   }  ],  \"name\": \"sendHash\",  \"outputs\": [],  \"payable\": false,  \"stateMutability\": \"nonpayable\",  \"type\": \"function\" }, {  \"constant\": true,  \"inputs\": [],  \"name\": \"getHash\",  \"outputs\": [   {    \"name\": \"x\",    \"type\": \"string\"   }  ],  \"payable\": false,  \"stateMutability\": \"view\",  \"type\": \"function\" }]export default new web3.eth.Contract(abi, address);File 3\u200a\u2014\u200aIpfs.jsconst IPFS = require('ipfs-api');const ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });export default ipfs;Edit\u200a\u2014\u200aIndex.jsimport React from 'react';import ReactDOM from 'react-dom';import './index.css';import App from './App';import registerServiceWorker from './registerServiceWorker';import 'bootstrap/dist/css/bootstrap.min.css';ReactDOM.render(<App />, document.getElementById('root'));registerServiceWorker();File 4\u200a\u2014\u200aApp.jsimport React, { Component } from 'react';import web3 from './web3';import ipfs from './ipfs';import storehash from './storehash';import { Button } from 'reactstrap';class App extends Component {state = {      ipfsHash:null,      buffer:'',      ethAddress:'',      transactionHash:'',      txReceipt: ''    };//Take file input from usercaptureFile =(event) => {        event.stopPropagation()        event.preventDefault()        const file = event.target.files[0]        let reader = new window.FileReader()        reader.readAsArrayBuffer(file)        reader.onloadend = () => this.convertToBuffer(reader)      };//Convert the file to buffer to store on IPFS convertToBuffer = async(reader) => {      //file is converted to a buffer for upload to IPFS        const buffer = await Buffer.from(reader.result);      //set this buffer-using es6 syntax        this.setState({buffer});    };//ES6 async functiononClick = async () => {try{        this.setState({blockNumber:\"waiting..\"});        this.setState({gasUsed:\"waiting...\"});await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{          console.log(err,txReceipt);          this.setState({txReceipt});        });      }catch(error){      console.log(error);    }}onSubmit = async (event) => {      event.preventDefault();//bring in user's metamask account address      const accounts = await web3.eth.getAccounts();    //obtain contract address from storehash.js      const ethAddress= await storehash.options.address;      this.setState({ethAddress});    //save document to IPFS,return its hash#, and set hash# to state      await ipfs.add(this.state.buffer, (err, ipfsHash) => {        console.log(err,ipfsHash);        //setState by setting ipfsHash to ipfsHash[0].hash        this.setState({ ipfsHash:ipfsHash[0].hash });        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract        //return the transaction hash from the ethereum contract        storehash.methods.sendHash(this.state.ipfsHash).send({          from: accounts[0]        }, (error, transactionHash) => {          console.log(transactionHash);          this.setState({transactionHash});        });      })    };render() {return (        <div className=\"App\">          <header className=\"App-header\">            <h1>Ethereum and IPFS using Infura</h1>          </header><hr/><grid>          <h3> Choose file to send to IPFS </h3>          <form onSubmit={this.onSubmit}>            <input              type = \"file\"              onChange = {this.captureFile}            />             <Button             bsStyle=\"primary\"             type=\"submit\">             Send it             </Button>          </form><hr/> <Button onClick = {this.onClick}> Get Transaction Receipt </Button> <hr/>  <table bordered responsive>                <thead>                  <tr>                    <th>Tx Receipt Category</th>                    <th> </th>                    <th>Values</th>                  </tr>                </thead><tbody>                  <tr>                    <td>IPFS Hash stored on Ethereum</td>                    <td> : </td>                    <td>{this.state.ipfsHash}</td>                  </tr>                  <tr>                    <td>Ethereum Contract Address</td>                    <td> : </td>                    <td>{this.state.ethAddress}</td>                  </tr>                  <tr>                    <td>Tx # </td>                    <td> : </td>                    <td>{this.state.transactionHash}</td>                  </tr>                </tbody>            </table>        </grid>     </div>      );    }}export default App;And that is all!Access your dApp at localhost:3000. Upload a file and you will see a hash generated. To make sure your file is uploaded, access it via the IPFS gateway. Make sure you accept the Metamask requests.Access your file at: https://gateway.ipfs.io/ipfs/your IPFS hashMine is at: https://gateway.ipfs.io/ipfs/QmbyizSHLirDfZhms75tdrrdiVkaxKvbcLpXzjB5k34a31To know more about IPFS, see my other articles:Learn by doing: a nice and easy intro to the Inter Planetary File SystemPrimer on IPFSmedium.freecodecamp.orgIPFS \ud83d\udc7d and Merkle Forest\ud83c\udf33What is IPFS?hackernoon.com", "responses": "14"}, {"title": "Ethereum by the\u00a0Numbers", "author_name": "ConsenSys", "link": "https://media.consensys.net/ethereum-by-the-numbers-3520f44565a9?source=search_post", "post_date": "Dec 6, 2018", "readtime": "8 min read", "upvotes": "1.6K", "content": "Ethereum by the\u00a0NumbersIn the wake of renewed scrutiny of the blockchain industry, a closer look at the hard facts behind the Ethereum\u00a0network.ConsenSysBlockedUnblockFollowFollowingDec 6, 2018In June of this year, we published The State of the Ethereum Network, highlighting some key data and statistics from across the network. Six months later, near the close of 2018, we are at the tail end of a long \u201ccrypto-winter\u201d, where the market fluctuations between late 2017 and now have consumed popular attention of the blockchain industry. A closer look at the numbers, however, reveals a robust technology, inundated with projects and developers and with a determined upward trajectory of development into the new year.Transaction ActivityThe Ethereum network has processed a total of over 353 million transactions to date. That\u2019s an increase of over 100 million transactions since June 1 (up from 240 million total transactions). On January 4th, the network processed 1.3 million transactions in 24 hours, the most in a single day ever. Since June 1, the average number of daily transactions has been roughly 610,000 [source].Diving a bit more into value transactions on Ethereum, we see relative stability on the network following the \u201cboom\u201d of late 2017 and early 2018. Starting in March 2018, the network stabilized at ~50 million ETH transacted per month, and has fluctuated nominally month-to-month since. The number of transactions per month has decreased slightly since Q3, from ~20 million per month in July to ~16 million per month in November. The average ETH per transaction has increased in that same time frame, however, more than doubling from ~2 ETH/transaction to just under 5 ETH/transaction in November [Figure 1].Figure 1. Ethereum transaction data Dec. 2017\u200a\u2014\u200aNov. 2018. Alethio Data\u00a0Science.There are nearly 49 million unique addresses on the Ethereum blockchain. In one year, that is an increase of nearly 4x, up from ~13,000,000 addresses on December 3, 2017. In six months, that is a 1.5x increase, up from ~35 million addresses in June 2018 [Figure 2]. The average ETH holding per address is ~2.17 ETH. Without the top 10 addresses, the average ETH holding per address is ~1.87 ETH. Without the top 50 addresses, the average holding is ~1.59 ETH [source].Figure 2. Ethereum unique address growth. Etherscan.In 2018, a newly created addresses was used, on average, for 35.45 days before going \u201cinactive.\u201d The length of use this year is up over 3x, from an average of 11.25 days in 2017.In addition to value transactions, deployments of smart contracts onto the Ethereum blockchain have steadily increased. Since June, in which ~200,000 smart contracts were created, the rate has grown, surpassing 1 million in October and reaching nearly 1.5 million deployed smart contracts in November [Figure 3]. Since late 2017, the number of successful calls to smart contracts has remained consistent at 1.2 million per day\u00a0.Figure 3. Smart contract creation 2018. Alethio Data\u00a0Science.Without fail, the Ethereum blockchain remains the most robust smart contract platform in existence. Of the top 100 tokens by market cap, 96% are built off Ethereum. Of the top 1000 tokens, 89% are built off Ethereum [source].User & Developer ActivityOne of the unique utilities of Ethereum is the ability to program and build decentralized applications on top of the technology. State of the Dapps lists 2,286 live dApps across the blockchain ecosystem, having just surpassed 2,000 in October. 2,175 of those live dApps have been built on Ethereum. For many users, accessing dApps is most easily done through mobile wallets such as MetaMask, the most widely used Web3 browser extension. MetaMask hit 1 million lifetime downloads in April and has picked up an additional ~200,000 since then.Developers are the ones behind the continued growth of the Ethereum ecosystem. Through market fluctuations, they remain committed to the technology and its applications as they continue building out solutions.The Truffle Framework is a suite of tools created to get developers from idea to dapp as comfortably as possible. There are 26,000 Truffle products listed on Github alone. Truffle Framework\u2019s first product, aptly named Truffle, is a development environment and testing framework that has become instrumental in developers\u2019 ability to create dapps on the Ethereum blockchain. Truffle recently surpassed 1 million downloads, and now rests as 1,168,595 lifetime downloads since its release in May 2015. On average, Truffle is downloaded 100,000 a month. Ganache, Truffle Framework\u2019s second product, is a personal blockchain for Ethereum development used to deploy contracts, develop your applications, and run tests. Ganache has been downloaded nearly 600,000 times since its release in October 2017. In November, it was downloaded 86,000 times, and shows no sign of slowing down anytime soon [Figures 4\u20136].Figure 4. Truffle monthly downloads. Truffle Framework.Figure 5. Ganache monthly downloads. Truffle Framework.Figure 6. Truffle Suite developer adoption. Truffle Framework.Loom Network developed and launched a layer 2 platform on top of Ethereum, allowing gaming and social dApps to scale while still relying on Ethereum\u2019s core security and decentralization. The team released CryptoZombies, a live app enabling anyone to learn to code smart contracts on Ethereum. CryptoZombies has 330,000 users, an increase of over 1.5x from June 2018.It looks like developers are here to stay, and more are on their way.Miner & Network\u00a0ActivityEthernodes reports over 11,000 active nodes interacting with the Ethereum blockchain. These nodes are spread across six continents, demonstrating the geographic diversity of the network. In 2018, miner rewards have stayed fairly consistent, at an average of 620,000 ETH per month\u200a\u2014\u200awith the largest outliers in January (640k) and February (572k) 2018 (Figure 7).Figure 7. Miner rewards 2018. Alethio Data\u00a0Science.Ecosystem AdoptionBeyond developers and miners, interest in Ethereum in the general population is growing. Reddit\u2019s r/ethereum community has grown more than double, from 176k in early December 2017 to 418k in early December 2018 [source]. Bounties Network is a platform allowing anyone to submit and complete tasks, from writing requests and creative exercises to research and technical tasks. In 2018, the number of transactions on the network has skyrocketed, from less than 50 in January to over 1,500 at its zenith in October. Significantly, the number of unique addresses transacting per month has increased in the same time frame, up to 350+ in October, demonstrating the growing diversity of people interacting with the platform.Figure 8. Bounties Network transactions per month (left) and addresses from unique transactions per month\u00a0(right).In the wake of the crypto boom in late 2017 and early 2018, the decline in ICOs was heralded as the market softening, and regulators stepped in. A slowing ICO market, however, did nothing to impeded enterprise, research, and government adoption of blockchain technology and research into its possibilities. In particular, the decrease in ICO funds has opened the door to traditional VC investment from major players. In 2017, VC firms invested $1 billion in blockchain companies, with a median investment of $1.5 million. In 2018, VCs have invested just shy of $4 billion, with a median investment of $2.5 million [Figures 10\u201311]. Big-time VC firm Andreessen Horowitz has shown it is a big believer in blockchain and in Ethereum in particular. The firm raised $300 million this past summer for its first-ever fund focused on crypto [source] and recently invested $15 million in MakerDAO, which is built on Ethereum [source]. In a September interview with Breaker, Chris Dixon, General Partner at Andreessen Horowitz, speaks extensively about his enthusiasm for Ethereum, calling it \u201ca rallying point for the technology community.\u201dFigure 10. Capital investments in blockchain 2013\u20132018. Diar.co.Figure 11. Median capital investments in blockchain 2013\u20132018. Diar.co.In September, fifteen of the world\u2019s largest banking and commodity companies announced the formation of komgo to build a global, blockchain-based trade financing platform on Ethereum. Arizona and Ohio have both passed laws legally recognizing data stored and transacted on blockchain platforms. Signature Bank announced the launch of a payments platform built off a permissioned Ethereum blockchain, permitting people to send near-instant payments in the form of ERC-20 tokens. Christies recently recorded $317 million worth of sales from a single estate auction on a permissioned Ethereum blockchain. Sony has reviewed and approved an Ethereum-based game called Plague Hunters for PlayStation. The game, which will leverage non-fungible tokens on the Ethereum blockchain, is planned for release in Q1 2019.Ethereum adoption is ramping up. Enterprises, private investment firms, governments, public institutions, art houses, and entertainment companies are just the beginning. Even in the face of volatile markets and media focus on price, companies recognize the utility of blockchain\u200a\u2014\u200aand, specifically, the programmability of Ethereum\u200a\u2014\u200ain their business models and seek to explore its applications.EcosystemWhat does all this information mean? The Ethereum network is strong. It is diverse, it is growing, and it is receiving attention from individuals and industry players across the world. Across the globe, Ethereum\u2019s use cases are promising to improve many of today\u2019s issues plaguing systems, structures, and organizations. We at ConsenSys, for one, are committed to a decentralized future and Ethereum\u2019s ability to help take us there.Everett Muzzy & Sharaf Rizvi, ConsenSysDanning Sui, Alethio", "responses": "3"}, {"title": "AxLang: Formally Verifiable Smart Contracts for the Ethereum Ecosystem", "author_name": "AXONI", "link": "https://medium.com/axoni/axlang-formally-verifiable-smart-contracts-for-the-ethereum-ecosystem-6201203be4e8?source=search_post", "post_date": "Mar 5, 2018", "readtime": "4 min read", "upvotes": "1.6K", "content": "AxLang: Formally Verifiable Smart Contracts for the Ethereum EcosystemAXONIBlockedUnblockFollowFollowingMar 5, 2018March 5, 2018 (New York)\u200a\u2014\u200aAxoni is pleased to announce AxLang, a new programming language that supports functional programming and enables formal verification of smart contracts for Ethereum-compatible networks.AxLang is based on Scala, and enables secure and full featured smart contract development by supporting both functional programming and formal verification. Its design is driven by the rigorous requirements for solutions serving the world\u2019s largest financial institutions. AxLang is part of Axoni\u2019s blockchain infrastructure, which underpins the broadest reaching and most ambitious permissioned ledger production projects in the world, including $11 trillion of credit derivatives, the world\u2019s leading foreign exchange connectivity network, and various other industry implementations.", "responses": "4"}, {"title": "All the fancy stuff apart, RaiBlocks (XRB) is far better than IOTA/Bitcoin/Ethereum as a protocol for \u2018fast and secure transfer of value\u2019 (which, I believe is the most meaningful functionality expected in a cryptocurrency). Here is\u00a0how.", "author_name": "dreamlightzone", "link": "https://medium.com/@dreamlightzone/all-the-fancy-stuff-apart-raiblocks-xrb-is-far-better-than-iota-bitcoin-ethereum-as-a-protocol-b34bbf6c287c?source=search_post", "post_date": "Dec 7, 2017", "readtime": "2 min read", "upvotes": "1.5K", "content": "All the fancy stuff apart, RaiBlocks (XRB) is far better than IOTA/Bitcoin/Ethereum as a protocol for \u2018fast and secure transfer of value\u2019 (which, I believe is the most meaningful functionality expected in a cryptocurrency). Here is\u00a0how.dreamlightzoneBlockedUnblockFollowFollowingDec 7, 2017Zero transaction feeNo resending/reattaching/regeneration of addresses required.\u200eNo centralised coordinator or any other centralised mechanism which can shut down the system at its will or move tokens between addresses. This means that RaiBlocks is truly decentralised.No miners. That means no third party in between the sender and the receiver. No third-party means no manipulation of confirmation time or fee or selective\u00a0confirmations.\u200eInstant confirmation of transactions. No long wait or uncertainty in confirmation ( It takes less than a minute, actually. Too awesome)No breach of security when one sends or receives from a single address multiple times.No issue of lost coins or the need for regenerating addresses till you find your coins.The only effort required is during the initial step of installing the wallet and allowing it to sync and download the entire ledger.(Even this effort can be simplified by downloading the entire ledger as a an external file and putting it in the root folder of the wallet). After this initial step, everything else is cakewalk.No issue of ICOs or cats clogging the system.As mentioned in their white paper, RaiBlocks is \u201ca trustless,feeless, low-latency cryptocurrency that utilizes a novel block-lattice structure and delegated Proof of Stake voting. Thenetwork requires minimal resources, no high-power mininghardware, and can process high transaction throughput.All of this is achieved by having individual blockchains for eachaccount, eliminating access issues and inefficiencies of a global data-structureVery minimal (almost negligible) proof of work (PoW) for confirming transactions. This means that XRB wallet can work even on your old computer with very low specs.\u200eNo wastage of valuable resources like computing power and electricity.No madness of increasing/decreasing gas value and wondering whether you have put the right value or not, while waiting for confirmation.\u200eNo smart contracts, no IOT, no big promises of changing the world. Just \u201cdoing one thing and doing it well\u201d.Try XRB today. You won\u2019t regret it.Like this article? Send some XRB to xrb_1nr7ruhkxp1gfpinsbumqk716sse1xknno6345qkiwq5gmjy9qoe75ywo13q", "responses": "8"}, {"title": "Dear Ethereum Community", "author_name": "Vlad Zamfir", "link": "https://medium.com/@Vlad_Zamfir/dear-ethereum-community-acfa99a037c4?source=search_post", "post_date": "Jul 7, 2016", "readtime": "4 min read", "upvotes": "202", "content": "Dear Ethereum CommunityVlad ZamfirBlockedUnblockFollowFollowingJul 7, 2016We have less than two weeks to come to a widespread consensus on a decision on whether or not to adopt a hard fork.If we fail to come to a wide-enough consensus, then either a sizable portion of the community will be disenfranchised and forced against their will to follow the rest of the community (in forking, or in not forking), or our community will split into two communities, with each running their preferred fork of the protocol. The fork with the most adoption will likely be called \u201cEthereum\u201d. The other will need to find a new name.Each of these outcomes can come at a significant cost to community cohesion, and might impair our ability to engage the decentralized governance problems we will have in the future.I really don\u2019t want anyone in the Ethereum community to feel bitter, disenfranchised, coerced, silenced, or ignored. We can minimize the divisiveness of this necessary, controversial public debate by being courteous. By listening to each other\u2019s points of view, by being generous with our interpretations of each other\u2019s positions, and by not being defensive, paranoid, or condescending in our responses. I hope we set an example of good etiquette in decentralized governance.Where I\u00a0amI initially became a fan of protocol hard forks a long time ago, when I realized that they are a necessary part of the blockchain technology upgrade path. Immediately after learning about the spectacular DAO theft, I realized that even forks that directly tamper with the state of applications on Ethereum can be completely justifiable.I had been investigating how decentralization technology can go very badly for almost a year. I paid some attention to the potential consequences of unintended behaviour of software, but most of my concern was about unethical (oftentimes downright evil) applications that run exactly as intended. I spent time imagining how we can mitigate the damage caused by unethical autonomous software through social norms, network effects, and \u201ccounterattack\u201d efforts by decentralized applications and organizations. It never struck me, however, to question the autonomy of the software.Creating a scalable platform for autonomous software has been a life goal of mine for over two years. I still very much believe that the autonomy of this technology is paramount to its success as a public platform (and more broadly to our survival as a species, but lets not argue about this here). However, I now have a more detailed understanding about the quality of autonomy that I believe is necessary. It is both possible and critically important that the Ethereum protocol and platform be autonomous of any legal or regulatory system from any jurisdiction(s). On the other hand, it isn\u2019t possible or necessary for the Ethereum protocol and platform to be independent of the Ethereum community.The Ethereum Social\u00a0ContractThe Ethereum community has an implicit, constantly evolving social contract that describes which changes to the Ethereum protocol and platform it would consider adopting. Hard forks that are technical in nature (e.g. forks that improve the security, usability, or scalability of Ethereum) appear to be uncontroversial (at least for now). Hard forks that reverse damage caused by the unintended behaviour of distributed applications (when those damages are large and/or externalized enough) are now being tested for the first time.This social contract determines the nature of the autonomy of the protocol, the platform, and of its smart contracts. If the social contract insists that the protocol can\u2019t be upgraded, then it is effectively completely autonomous (but it can\u2019t be upgraded). If the social consensus is that smart contracts should never have their execution interrupted or tampered with, then they are effectively autonomous (but the community then can\u2019t prevent or reverse damage caused by the smart contracts). If the social contract is to insist that the protocol won\u2019t ever be forked for the sake of being compliant with the legal frameworks of any jurisdiction, then these kinds of hard forks can\u2019t happen.It is paramount that the social governance process, rules, or principles that govern hard forks do not become institutionalized. The community must not be bound by precedents (or lack thereof), it must not be bound by miner voting, it must not be bound by coin voting (although these may be useful for signaling), it must not be bound by the will of its leaders, and it must not be bound to any other kind of majority rule. While it may streamline governance, any insistence on strict adherence to processes, rules, or principles places the Ethereum community in a position where it can be compelled to make bad choices, to be unable to make good choices, and more generally puts the platform at risk of being gamed by motivated parties.If we place community cohesion above all of our other values, however, then in the long run it will be impossible to prevent a majority from controlling the protocol in a way that runs against our core values. If we place our values ahead of community cohesion, then when there\u2019s an attempted majority takeover, or an irreconcilable difference in values between subsections of our community becomes evident, then the community will split and maintain separate blockchains.ConclusionThe Ethereum community has a short time to come to consensus on whether or not to hard fork the protocol to fix the DAO. If we do not reach consensus on time, then either large portions of the community will be disenfranchised by a decision that flows against their core values, or the community will split and maintain two blockchains. If we do reach consensus, then we will have witnessed an example of successful decentralized governance.In any case, we will be making cryptocurrency history.", "responses": "19"}, {"title": "Securely Generating and Storing an Ethereum\u00a0Wallet", "author_name": "James Seibel", "link": "https://hackernoon.com/securely-generating-and-storing-an-ethereum-wallet-907bcbd8e5ae?source=search_post", "post_date": "Aug 11, 2017", "readtime": "6 min read", "upvotes": "662", "content": "Securely Generating and Storing an Ethereum\u00a0WalletJames SeibelBlockedUnblockFollowFollowingAug 11, 2017With the rise of Ethereum and Initial Coin Offerings (ICO\u2019s), especially ERC20 tokens, people unfamiliar with Ethereum or other cryptocurrencies like BitCoin are becoming interested in the technology. Unfortunately, getting started with Ethereum and participating in ICO\u2019s is not simple.The central component in Ethereum is the \u201cwallet\u201d. An Ethereum wallet is what holds your Ether and other Ethereum-based tokens, and conceptually can be thought of like a real wallet.Like a real wallet, an Ethereum wallet can be stolen. You shouldn\u2019t leave it \u201cout\u201d, or stored on a device that is often connected to the internet, or it risks being hacked. There is no recovery for a stolen wallet\u200a\u2014\u200athe courts cannot help you recover it, and you can\u2019t reverse what happens.This guide will explain how to safely generate and store an Ethereum wallet.My Ether\u00a0WalletMyEtherWallet is an open source project to make it simple to create an Ethereum wallet and interact with the Ethereum platform. It is hosted at myetherwallet.com, but it\u2019s just a static web page. The safe, recommended way of using MyEtherWallet is to download the website yourself, so that there is no risk you go to the wrong website. This also allows you to use MyEtherWallet without being connected to the internet.You can download the latest version of the MyEtherWallet website as a zip file at this link. Download the \u201cetherwallet-v\u2026\u201d, not the chrome extension. When you unzip the file, you get a list of files containing a website.Unzipped MyEtherWallet. Double click \u201cindex.html\u201d to open\u00a0it.Open \u201cindex.html\u201d to launch MyEtherWallet.Generating an Ethereum\u00a0WalletThrough the magic of mathematics, you can easily create a password-protected Ethereum wallet that no one will ever be able to duplicate accidentally. There are many more available Ethereum wallets than there are atoms in the universe.You should turn off your internet connection for the following steps, or be on a VPN from a good provider. If you want to be highly secure, you can do the following steps on a computer that is rarely or never connected to the internet. This is considered an \u201cair-gapped\u201d computer. The reason to do this is to minimize the risk that someone has hacked you and is remotely observing what you do. Even without a specialized air-gapped computer, it is good practice to turn the internet off while doing Ethereum wallet generation.The MyEtherWallet form to generate a new\u00a0wallet.Type a secure password you won\u2019t forget into the box, and click \u201cCreate New Wallet\u201d.You can then click \u201cDownload Keystore File\u201d to save your wallet. I recommend you save it to a USB stick, preferably an encrypted USB stick, so that it isn\u2019t hanging around on your computer where it could be easily found. The file will be called something like \u201cUTC\u200a\u2014\u200a2017\u201308\u201311T15\u201329\u201326.452Z\u200a\u2014\u200a45\u2026\u201d.Press \u201cI understand. Continue\u201d.On the next page, you can see your \u201cprivate key\u201d in plain text. This is a plain-text version of the keystore file you downloaded, which is not protected by a password. I do not recommend you save this, you don\u2019t need to if you have the keystore file.You can also print a \u201cpaper wallet\u201d, which is a paper version of the keystore file you saved, which protects you if you lose the keystore file or forget your password. Print this out if you are worried about losing your wallet, but make sure it\u2019s stored safely. Anyone who finds the paper wallet has access to your Ethereum!Now, press \u201cSee my address\u201d.Unlocking Your Wallet & Checking Your\u00a0BalanceView your Ethereum wallet\u00a0infoClick the \u201cView Wallet Info\u201d tab. Click \u201cSelect Wallet File\u201d and navigate to the \u201cUTC\u200a\u2014\u200a2017\u201308\u201311\u2026\u201d keystore file you saved previously. Type in your keystore password, and click \u201cUnlock\u201d.An Unlocked Ethereum\u00a0WalletOnce unlocked, you can see your public address (\u201c0x45cABda7D6A2051dc7e20Cfc6d0bd4878f7D3736\u201d for this wallet), your Ether balance, links to transaction history, and optionally display your private key and print your paper wallet.Your private key should never be given out. You only give out your Account Address in order to receive Ether.See ERC20\u00a0tokensOn the side, you can also see your \u201cToken Balances\u201d. These are (generally) ERC20 tokens, like AIR and BAT, which you can hold in your Ethereum wallet in addition to Ether.ERC20 Token\u00a0BalancesClicking \u201cShow All Tokens\u201d reveals your individual token balances.Receiving Ether or Other\u00a0TokensTo receive Ether or other tokens, you don\u2019t need to do anything special. Just provide your public Ethereum wallet address (the \u201c0x45\u2026\u201d number) to the person who will send you currency, and it will be received. You can \u201cView Wallet Info\u201d to see your balance.Sending Ether or Other\u00a0TokensThere are 2 ways to send Ether\u200a\u2014\u200aonline and offline transactions.As discussed previously, using your wallet offline is safer, because it minimizes the potential for hackers to steal your wallet.To send an online transaction, click the \u201cSend Ether & Tokens\u201d tab, and unlock your wallet.Once unlocked, you are presented with a page showing a To Address, an amount, and a Gas Limit. If you have other ERC20 tokens, you can click then ETH down arrow to change the type to another currency.The \u201cGas Limit\u201d is the maximum fee amount you pay to the network to execute your operation. The Ethereum network is powered by individual nodes, which are just people all over the world that choose to participate in the network\u2019s processing work. You pay a fee for them to process your transaction. Just leave the default at 21000, the fee will be 5 to 30 cents USD.To send an offline transaction, you basically do all the same steps, except you don\u2019t execute the transaction until you are online. This allows you to safely remove your keystore from your computer (i.e., unplug your USB) and prevent your keystore from ever being attached to the internet.Go to the \u201cSend Offline\u201d tab. Copy in your Ethereum wallet address in the \u201cFrom Address\u201d field, and click \u201cGenerate Information\u201d.In Step 2, enter in the Ethereum wallet address to send ETH or tokens to. Then fill in the value and type, and leave the Gas Limit and Gas Price to the default.Then select your keystore file, type in your password, unlock it, and click \u201cGenerate Transaction\u201d.Now, copy the \u201cSigned Transaction\u201d text. You can then take this transaction to a different computer connected to the internet, or just use the same computer and turn the internet on, but the point is to remove your keystore before executing the transaction. This decouples your keystore (your actual wallet) from the internet, increasing your wallet\u2019s safety.ConclusionUsing MyEtherWallet running locally on your computer, you can safely create an Ethereum wallet, store it on a USB, view your wallet info, and execute transactions. By using \u201coffline transactions\u201d, you can prevent your keystore file from being connected to the internet, and increase your security.", "responses": "2"}, {"title": "How Will Ethereum Scale? Top Talks from Devcon3 Summarized", "author_name": "Georgios Konstantopoulos", "link": "https://medium.com/loom-network/how-will-ethereum-scale-top-talks-from-devcon3-summarized-f51f99ed4602?source=search_post", "post_date": "Nov 13, 2017", "readtime": "8 min read", "upvotes": "1.1K", "content": "How Will Ethereum Scale? Top Talks from Devcon3 SummarizedGeorgios KonstantopoulosBlockedUnblockFollowFollowingNov 13, 2017Devcon, also known as the Ethereum Foundation\u2019s developers conference, is one of the most important annual events in the cryptocurrency space. It is a conference \u201cby developers for developers\u201d which \u201cis designed to help inform, educate and address interests of the Ethereum R&D community\u201d.It should be noted that even though it is a technical conference, individuals interested in familiarizing themselves with Ethereum and blockchain technology should not be discouraged from attending. As stated in the official page, \u201cthis year\u2019s participant demographic is also the most international and globally diverse one to date\u201d which shows how individuals are increasingly getting involved in Ethereum research and development.This article will discuss the most important talks on scalability that were presented this year. If you have the time, I strongly recommend that you watch the whole talks\u200a\u2014\u200alook for the timestamped \u201cLink\u201d in every section. But if not, this article will give you the broad strokes.", "responses": "3"}, {"title": "What is Ethereum?", "author_name": "Alex Miller", "link": "https://hackernoon.com/what-is-ethereum-c82a4b558553?source=search_post", "post_date": "Apr 13, 2017", "readtime": "3 min read", "upvotes": "187", "content": "What is Ethereum?Alex MillerBlockedUnblockFollowFollowingApr 13, 2017I write articles about doing cool stuff with Ethereum, but I have found that some people have no idea what I\u2019m talking about. If you have stumbled across one of my articles and asked yourself \u201cwhat the hell is Ethereum?\u201d, congratulations\u200a\u2014\u200ayou are exactly the audience I wanted to reach! So I\u2019m going to take a minute to describe what this weird technology is and what it can do for you.Technical explanationIf you\u2019re here, I\u2019m going to guess you\u2019re a fairly technical person. Below is a description of what Ethereum is from a technical perspective.CryptocurrenciesI\u2019m guessing you\u2019ve heard of Bitcoin and other cryptocurrencies. If you haven\u2019t, you should check them out because I suspect you will find the topic interesting.Ethereum is, broadly speaking, a peer-to-peer network that is an extension of a cryptocurrency network.So, while I would define a cryptocurrency network (e.g. Bitcoin) as:a peer-to-peer network leveraging a data structure called a blockchain to enable creation and transmission of digital scarcityEthereum is more likea peer-to-peer network leveraging a data structure called a blockchain to enable creation and transmission of digital scarcity as well as a public, global state of arbitrary data that can be updated with a Turing-complete instruction setThe key difference between Ethereum and most other cryptocurrency networks like Bitcoin is in the way that the global network state is represented and operated on.UTXO vs\u00a0EVMBitcoin\u2019s state is very simple: it is a large set of things called unspent transaction outputs (UTXOs). The global set of UTXOs tells you the bitcoin balance of every address in the Bitcoin network. This global state is updated whenever a transaction is processed, moving bitcoins from one user to another. It is important to note that because the entire state of Bitcoin is a set of UTXOs, there are no \u201cusers\u201d per se\u200a\u2014\u200ajust addresses that hold bitcoins.Ethereum\u2019s state is much more complicated because it can be operated on with a more robust set of OP_CODES that make up the Ethereum Virtual Machine (EVM). This instruction set is actually Turing complete, with each instruction priced differently. To allow for this setup, Ethereum uses accounts to represent users. Accounts and data are each subsets of the overall global state that makes up the Ethereum network.What can I do with Ethereum?Cryptocurrencies are emerging as a sort of payment rail for the internet. Any user may move units of digital scarcity (which have real world value determined by the markets) without permission. Cryptography ensures that only the user who owns these units of digital scarcity may move them. This is how the internet was supposed to work\u200a\u2014\u200aas a free and open platform that anyone may use to connect to anyone else without going through an intermediary.The power of Ethereum over Bitcoin or anything else in the space comes from its developer friendliness. When it comes to developer tools, Ethereum is overwhelmingly the most advanced cryptocurrency technology out there. I have written about how to integrate Ethereum into a typical web developer workflow and how it is actually not as painful as you might think.So with Ethereum you can easily add any of the following things to your web application:Payments from any user to any other userPayments from a user to youTimestamped, immutable recordsPassword-free logins and automatic user managementYour own currency with programmable monetary policy (I haven\u2019t written about this one yet, but it\u2019s coming)Lots of other cool stuff I haven\u2019t thought ofThe futureEthereum is in its infancy, but it\u2019s growing and maturing very quickly. Many of us in the Ethereum community believe it is the defining technological invention of our generation and that it will affect many (if not all) major industries in a profound way. If you find this stuff interesting, I suggest you do some research. Here is a good place to start. Hopefully this short article piqued your interest.Hacker Noon is how hackers start their afternoons. We\u2019re a part of the @AMIfamily. We are now accepting submissions and happy to discuss advertising & sponsorship opportunities.To learn more, read our about page, like/message us on Facebook, or simply, tweet/DM @HackerNoon.If you enjoyed this story, we recommend reading our latest tech stories and trending tech stories. Until next time, don\u2019t take the realities of the world for granted!", "responses": "2"}, {"title": "Bitcoin\u2019s Big Move is Nothing Compared to Where Ethereum is Taking\u00a0Us", "author_name": "Tom Luongo", "link": "https://hackernoon.com/bitcoins-big-move-is-nothing-compared-to-where-ethereum-is-taking-us-d4e23b9a9ce6?source=search_post", "post_date": "Oct 16, 2017", "readtime": "5 min read", "upvotes": "362", "content": "Bitcoin\u2019s Big Move is Nothing Compared to Where Ethereum is Taking\u00a0UsTom LuongoBlockedUnblockFollowFollowingOct 16, 2017Friday, Bitcoin pushed through its previous high near $5000 like there was no resistance. The digital currency spent a couple of days pushing up against that limit until a number of minor news items brought in a massive wave of buyers.What was interesting was watching most of the rest of the crypto-market not respond alongside Bitcoin. Unlike in rallies past where Bitcoin\u2019s success was a rising tide lifting all boats, yesterday saw continued selling in a many coins/tokens with bright futures.In effect, we saw liquidity drain out of coins like NEO, Waves, Monero and STEEM and back into the big three, Bitcoin, Litecoin and Ethereum. This makes the argument pretty clear that some of these coins were way ahead of themselves.They were the recipient of profit-taking out of the big three. Most of the money that moves into the crypto-space isn\u2019t coming back out again because of uncertainty surrounding taxes. This is part of the reason why the ICO\u200a\u2014\u200aInitial Coin Offering\u200a\u2014\u200amarket exploded this year.All of these profits can\u2019t be brought back to the \u2018real world\u2019 lest these newly-minted \u2018Crypto-Millionaires\u2019 get rapped with massive capital gains taxes, especially here in the U.S.The I.R.S. classifies Bitcoin as \u2018property\u2019 and hence is taxed at the capital gains rate. If your cost basis is next to nothing, pulling that money out for any purchase bigger than your mortgage or car payment makes little sense if you think the correction in Bitcoin is a temporary one.Hence, using that new capital to fund new projects as a form of tax shelter makes sense. So does booking profits in the \u2018under-valued\u2019 coins. And it doesn\u2019t take a lot of this rotation to send some of these coins up by factors of five or ten.But, once Bitcoin cleared the next technical hurdle those profits can then be rolled back out of these \u2018alt-coins\u2019 and back into Bitcoin to chase the momentum.And that\u2019s what happened on Friday.Ethereum\u2019s Hard Fork\u00a0FearsEthereum\u2019s Big Technical Breakout on Friday\u00a010/13On the other hand, Ethereum languished below the technically significant level of $312 (See Chart) for a few extra days on fears of turmoil surrounding its upcoming upgrade to its blockchain, known as Byzantium.Byzantium is a major upgrade to the Ethereum blockchain to radically improve transaction throughput. It is being weakly fought by the miner consortiums, unlike the bitter fight over Bitcoin\u2019s fork in August which resulted in the creation of Bitcoin Cash.But, with only a few days to go until Byzantium\u2019s implementation, fears of a miner\u2019s revolt and a split of the Ethereum blockchain are receding. Because of this, Ethereum finally broke through resistance at $311 last night and is now trading above $330 with its eye on the all-time high at $400.And with Bitcoin spiking so far, so fast there will likely be another round of rotation into alt-coins in the coming days, including Ethereum. Byzantium\u2019s network upgrade, if it goes smoothly which is expected, will likely take Ethereum up through its all-time high in the next few weeks.Why? Because we\u2019re still staring at another potential fork of the Bitcoin blockchain as miners continue to balk at adopting the \u2018segregated witness\u2019 protocol along with doubling the size of the block. This is known as \u2018Segwit 2x\u2019 and November 1 st is the day to watch there.The Crucial DifferencesWith Byzantium Ethereum begins the process of scaling its architecture to handle the volume of transactions its price currently commands. It has seen tremendous investment in the past year. There is still a lot more technical work to be done in the future, and I\u2019m not going to bore you with the details.Understand, for the layman, that cryptos like Ethereum are more akin to application platforms, APIs, than they are digital analogues of gold (GLD) or silver (SLV) like Bitcoin and Litecoin are.And because of that their value is derived more on the applications built on them than as any form of medium of exchange. That function, the tokenization of its value, is a measure of their platform\u2019s performance running distributed applications.That\u2019s why I find them so much more compelling than Bitcoin as an investment vehicle. They feel more like stocks than they do forex. Analyzing Bitcoin as a forex pair makes perfect sense. And in the crypto-world Bitcoin is like the U.S. dollar (UUP), that which everything else is measured against.It is the crypto-world\u2019s reserve currency. And as such, it sits at the bottom of its version of Exter\u2019s Pyramid.The New Exter\u2019s Pyramid: Sub Bitcoin in for Gold and Ethereum in for Paper\u00a0MoneyBut, Ethereum, and coins like it, are fundamentally different. They have the potential to change the way we exchange value for value on the internet. And, as such, investors need to be aware of this before writing off the insane volatility as just another bubble.Ether or\u00a0Reality?That volatility is the result of billions of dollars flowing into a market in a short period of time. The short-term effect is bubble-like. But, beyond the speculative frenzy there is a real desire to change the way we handle money and investment.And the now $174-billion-dollar market cap of the cryptocurrency market is a testament to the desire of people to begin building that new world. Not all of these \u2018Platform Coins\u2019 like Ethereum will be successful. As an investor I look at them the same way I look at any penny stock, as a sincere risk where I\u2019m only putting money I\u2019m willing to lose on the table.But, with the current influx of real world capital the day where their malinvestment reveals itself is a long way away. People still believe Tesla\u2019s (TSLA) story even though the company has never hit its production or cost targets. The same thing will exist in the crypto-space for the next couple of years.And, as always, the market will separate what\u2019s real and what\u2019s fake. For now, Ethereum is the real deal.This article originally appeared at Seeking Alpha\u2026 minor revisions have been made by the author.", "responses": "3"}, {"title": "Vladislav Martynov (Ethereum) and Ilya Yashin (World Wi-Fi) on \u201cSharing economy\u201d prospects", "author_name": "World Wi-Fi", "link": "https://medium.com/world-wi-fi-blog/vladislav-martynov-ethereum-and-ilya-yashin-world-wi-fi-on-sharing-economy-prospects-9f4d256aaea9?source=search_post", "post_date": "May 13, 2018", "readtime": "11 min read", "upvotes": "4K", "content": "Vladislav Martynov (Ethereum) and Ilya Yashin (World Wi-Fi) on \u201cSharing economy\u201d prospectsWorld Wi-FiBlockedUnblockFollowFollowingMay 13, 2018Our team is always happy to talk to its community. This week, we organized a live stream session with a very special guest \u2013 Vladislav Martynov, Ethereum Foundation advisor, and Ilya Yashin, CEO of World Wi-Fi, along with World Wi-Fi\u2019s advisor Dmitry Dain as a moderator. Below is a brief summary of topics discussed.", "responses": ""}, {"title": "\u30d0\u30f3\u30b3\u30af\u306eEthereum\u30df\u30fc\u30c8\u30a2\u30c3\u30d7\u3067\u8a9e\u3089\u308c\u305fVitalik\u306e\u30c8\u30fc\u30af\u307e\u3068\u3081", "author_name": "Yusuke Obinata (Obi)", "link": "https://medium.com/cryptoage/crypto-savetheintenet-cd89d5fac918?source=search_post", "post_date": "Mar 4, 2018", "readtime": "10 min read", "upvotes": "421", "content": "\u30d0\u30f3\u30b3\u30af\u306eEthereum\u30df\u30fc\u30c8\u30a2\u30c3\u30d7\u3067\u8a9e\u3089\u308c\u305fVitalik\u306e\u30c8\u30fc\u30af\u307e\u3068\u3081Yusuke Obinata (Obi)BlockedUnblockFollowFollowingMar 4, 20182/25\uff20\u30d0\u30f3\u30b3\u30af\u3067\u884c\u308f\u308c\u305fAsia-Pacific Ethereum Community Meetup\u306b\u53c2\u52a0\u3057\u3066\u304d\u305f\u306e\u3067\u3001\u305d\u3053\u3067\u306eVitalik\u306e\u30c8\u30fc\u30af\u5185\u5bb9\u3092\u30b7\u30a7\u30a2\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u30c8\u30fc\u30af\u306e\u30bf\u30a4\u30c8\u30eb\u306f\u201dCryptoeconomics to save the internet\u201d\u3067\u3057\u305f\u3002\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3092\u30de\u30b7\u306a\u3082\u306e\u306b\u3059\u308bPlasma\u306a\u3069\u6280\u8853\u7684\u306a\u30d7\u30ec\u30bc\u30f3\u306f\u4ed6\u306e\u767b\u58c7\u8005\u306b\u307e\u304b\u305b\u3001\u5f7c\u306f\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30fc\u30f3\u3084\u30af\u30ea\u30d7\u30c8\u30a8\u30b3\u30ce\u30df\u30fc\u3092\u901a\u3057\u3066\u3001\u201cmake the internet less broken\u200a\u2014\u200a\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3092\u30de\u30b7\u306a\u3082\u306e\u306b\u3059\u308b\u201d\u3053\u3068\u306b\u7126\u70b9\u3092\u7f6e\u3044\u3066\u8a71\u3092\u3059\u308b\u3068\u3044\u3046\u3068\u3053\u308d\u304b\u3089\u59cb\u307e\u308a\u307e\u3057\u305f\u3002\u201c(\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306e)\u4e16\u754c\u306f\u5909\u308f\u3063\u3066\u3057\u307e\u3063\u305f\u201d\u904e\u53bb\u6570\u30ab\u6708\u306e\u9593Twitter\u306a\u3069\u3067\u3001Vitalik\u3068\u540c\u3058\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u753b\u50cf\u3092\u4f7f\u3063\u305f\u30d5\u30a7\u30a4\u30af\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u591a\u304f\u4f5c\u6210\u3055\u308c\u305f\u308a\u3001\u30d5\u30a7\u30a4\u30af\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5f7c\u306e\u30c4\u30a4\u30fc\u30c8\u306b\u8fd4\u4fe1\u30ea\u30d7\u30e9\u30a4\u3059\u308b\u5f62\u3067\u300c\u3053\u306e\u30a2\u30c9\u30ec\u30b9\u306b0.3ETH\u9001\u3063\u305f\u3089\u30013ETH\u3092\u8fd4\u3059\u3088\u300d\u3068\u3044\u3046\u3088\u3046\u306a\u8a50\u6b3a\u30c4\u30a4\u30fc\u30c8\u304c\u591a\u767a\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u4f8b\u306b\u51fa\u3057\u3001\u3053\u308c\u304c\u4eca\u306e\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306e\u5927\u304d\u306a\u554f\u984c\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3002Internet in 1998: public key crypto is enough to fully protect itInternet in 2018: can\u2019t easily be censored, but can totally be manipulated20\u5e74\u524d\u306e\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306f\u3001\u516c\u958b\u9375\u6697\u53f7\u65b9\u5f0f\u3067\u3001\u653f\u5e9c\u3082\u6697\u53f7\u5316\u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3084\u60c5\u5831\u3092\u691c\u95b2\u3059\u308b\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u3067\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3092\u4fdd\u8b77\u3059\u308b\u306e\u306b\u5341\u5206\u306a\u72b6\u614b\u3060\u3063\u305f\u3002\u3057\u304b\u3057\u30012018\u5e74\uff08\u3042\u308b\u3044\u306f\u3082\u3063\u3068\u524d\u304b\u3089\uff09\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306f\u672a\u3060\u5b8c\u5168\u306b\u691c\u95b2\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3082\u306e\u306e\u3001\u7b2c\u4e09\u8005\u304c\u5b8c\u5168\u306b\u64cd\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308b\u3082\u306e\u306b\u306a\u3063\u305f\u3002\u30af\u30ea\u30d7\u30c8\u754c\u9688\u3060\u3051\u3067\u3082\u3001Vitalik\u306e\u4e8b\u6545\u6b7b\u4ea1\u8aac\u3084\u30ed\u30b7\u30a2\u3067\u306e\u902e\u6355\u8aac\u3001\u30a4\u30fc\u30ed\u30f3\u30de\u30b9\u30af\u304c\u30d3\u30c3\u30c8\u30b3\u30a4\u30f3\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u3092\u59cb\u3081\u308b \u3001\u3068\u3044\u3063\u305f\u591a\u304f\u306e\u30d5\u30a7\u30a4\u30af\u30cb\u30e5\u30fc\u30b9 \u304c\u6d41\u308c\u305f\u300290\u5e74\u4ee3\u306e\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3092\u6551\u3046\u305f\u3081\u306b\u8003\u6848\u3055\u308c\u305fHashcash\u3053\u308c\u3089\u3092\u89e3\u6c7a\u3059\u308b\u306b\u306f\u3001\u30af\u30ea\u30d7\u30c8\u30a8\u30b3\u30ce\u30df\u30fc\u306f\u3069\u306e\u3088\u3046\u306a\u89e3\u6c7a\u7b56\u3092\u63d0\u793a\u3067\u304d\u308b\u3060\u308d\u3046\u304b\uff1f20\u5e74\u4ee5\u4e0a\u524d\u306b\u63d0\u6848\u3055\u308c\u305f\u30a2\u30a4\u30c7\u30a2\u304b\u3089\u63a2\u3063\u3066\u3044\u3053\u3046\u3002\u201cHashcash\u201d\u3068\u305d\u306e\u524d\u4f8b\u3072\u3068\u3064\u306f\u30011990\u5e74\u4ee3\u306e\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3092\u56f0\u3089\u305b\u305f\u3001E\u30e1\u30fc\u30eb\u30b9\u30d1\u30e0\u3092\u6483\u9000\u3059\u308b\u305f\u3081\u306b\u8003\u6848\u3055\u308c\u305f\u201dHashcash\u201d\u3060\u3002\u3053\u308c\u306f\u3001\u9001\u4fe1\u3059\u308bE\u30e1\u30fc\u30eb\u5168\u3066\u306b\u9001\u4fe1\u30b3\u30b9\u30c8\u3092\u4ed8\u52a0\u3057\u305f\u3082\u306e\u3067\u3001\u3082\u3057\u672c\u5f53\u306e\u4eba\u9593\u304c\u6570\u5206\u306e\u6642\u9593\u3092\u8cbb\u3084\u3057\u3066E\u30e1\u30fc\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u3042\u308b\u7a0b\u5ea6\u306e\u30b3\u30b9\u30c8\u3092\u8cbb\u3084\u3057\u3066\u3067\u3082\u9001\u4ed8\u3059\u308b\u3060\u308d\u3046\u3068\u3044\u3046\u7406\u8ad6\u3002\u3053\u306e\u5f53\u6642\u306f\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30d9\u30fc\u30b9\u306e\u652f\u6255\u3044\u624b\u6bb5\u3068\u3044\u3046\u3082\u306e\u306f\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30d1\u30ef\u30fc\u3067\u4ee3\u511f\u3092\u652f\u6255\u3046\u3001\u3064\u307e\u308a1\u901a\u306e\u30e1\u30fc\u30eb\u3092\u9001\u4ed8\u3059\u308b\u307e\u3067\u306b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c10\u5104\u5206\u306e1\u306e\u6570\u5217\u3092\u767a\u898b\u3059\u308b\u307e\u3067\u8a08\u7b97\u3092\u884c\u3044\u3001\u305d\u306e\u6570\u5217\u3092\u201dProof of work\u201d\u3068\u3057\u3066\u9001\u4ed8\u6642\u306b\u542b\u3081\u308b\u3001\u3068\u3044\u3063\u305f\u30c6\u30af\u30cb\u30c3\u30af\u3092\u7528\u3044\u305f\u3002Hashcash\u306e\u8ab2\u984c\u306f\u3001\u975e\u52b9\u7387\u3060\u3063\u305f\u3053\u3068\u3002\u30b9\u30d1\u30e0\u696d\u8005\u3078\u306e\u5bfe\u7b56\u306e\u305f\u3081\u306b\u3001\u4e00\u822c\u306e\u4eba\u305f\u3061\u3082\u591a\u304f\u306e\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30d1\u30ef\u30fc\u3092\u6d88\u8cbb\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002Hashcash\u3092Proof of stake\u3067\u6539\u826f\u3059\u308b\u3053\u3053\u3067\u3001Vitalik\u304c\u3088\u308a\u512a\u308c\u3066\u3044\u308b\u601d\u3046\u30a2\u30a4\u30c7\u30a2\u3092\u3001Hashcash\u304c\u7528\u3044\u305fProof of work\u3067\u306f\u306a\u304f\u201dProof of stake\u201d\u3092\u5fdc\u7528\u3057\u305f\u5f62\u3067\u7d39\u4ecb\u3059\u308b\u3002\u30fbHashcash\u3068\u30a2\u30a4\u30c7\u30a2\u306f\u540c\u3058\u3002\u53d7\u4fe1\u8005\u304c\u30b9\u30d1\u30e0\u3060\u3068\u8a8d\u5b9a\u3057\u305f\u5834\u5408\u306e\u307f\u9001\u4ed8\u8005\u306e\u30c7\u30dd\u30b8\u30c3\u30c8\u3092\u6d88\u8cbb\u3059\u308b\u5f62\u3067\u652f\u6255\u3044\u3092\u884c\u3046\u30fb\u30b9\u30d1\u30e0\u3067\u306f\u306a\u3044\u5834\u5408\u306b\u306f\u4f55\u3082\u30ed\u30b9\u304c\u306a\u3044\u5177\u4f53\u4f8b\u3067\u898b\u3066\u307f\u308b\u3068\uff1a\u30fb\u30a2\u30ea\u30b9\u304c\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30fc\u30f3\u4e0a\u306b\u30b9\u30de\u30fc\u30c8\u30b3\u30f3\u30c8\u30e9\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u30fb\u30a2\u30ea\u30b9\u304c0.0005ETH\u3092\u30c7\u30dd\u30b8\u30c3\u30c8\u3059\u308b\u30fb\u30a2\u30ea\u30b9\u304c\u79d8\u5bc6\u9375X\u3068\u3068\u3082\u306b\u30dc\u30d6\u306b\u30e1\u30fc\u30eb\u3092\u9001\u4ed8\u3059\u308b\u30fb\u30e1\u30fc\u30eb\u304c\u30b9\u30d1\u30e0\u3067\u306a\u3051\u308c\u3070\u3001\u30dc\u30d6\u306f\u79d8\u5bc6\u9375X\u3092\u7834\u68c4\u3057\u4f55\u3082\u30ed\u30b9\u304c\u306a\u3044\u3002\u30b9\u30d1\u30e0\u3067\u3042\u308c\u3070\u30dc\u30d6\u306f\u79d8\u5bc6\u9375X\u3092\u4f7f\u3063\u3066\u30a2\u30ea\u30b9\u306e\u30c7\u30dd\u30b8\u30c3\u30c8\u3092\u6d88\u8cbb\u3067\u304d\u308b\u53d7\u4fe1\u8005\uff08\u30dc\u30d6\uff09\u304c\u60aa\u610f\u3092\u6301\u3063\u3066\u3044\u305f\u305a\u3089\u306b\u30c7\u30dd\u30b8\u30c3\u30c8\u3092\u7834\u58ca\u3057\u306a\u3044\u3068\u3044\u3046\u524d\u63d0\u306b\u7acb\u3066\u3070\u3001Hashcash\u3088\u308a\u3082\u52b9\u7387\u3088\u304f\u30b9\u30d1\u30e0\u3092\u9664\u53bb\u3067\u304d\u308b\u3002\u7d4c\u6e08\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u4ed8\u304d\u306e\u8a55\u4fa1\u30b7\u30b9\u30c6\u30e0TrustDavis\u6b21\u306bVitalik\u304c\u7d39\u4ecb\u3059\u308b\u306e\u304c\u3001TrustDavis\u3068\u3044\u3046\u7d4c\u6e08\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u304c\u52b9\u3044\u305f\u8a55\u4fa1\u30b7\u30b9\u30c6\u30e0\u306e\u4ed5\u7d44\u307f\u3002\u3053\u308c\u306f\u3001\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u5185\u306e\u30e6\u30fc\u30b6\u30fc\u540c\u58eb\u306e\u4fe1\u983c\u95a2\u4fc2\u3092\u5229\u7528\u3057\u3001EC\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u7b49\u306b\u304a\u3044\u3066\u306e\u8a50\u6b3a\u3092\u9632\u3050\u306e\u306b\u5229\u7528\u3067\u304d\u308b\u3002\u30a2\u30ea\u30b9\u306f\u30dc\u30d6\u306e\u53cb\u9054\u3060\u304b\u3089$200\u307e\u3067\u306e\u7bc4\u56f2\u3067\u3042\u308c\u3070\u4fe1\u983c\u3067\u304d\u308b\u3001\u30a2\u30ea\u30b9\u306f\u30dc\u30d6\u304b\u3089\u3059\u3067\u306b10\u56de\u4ee5\u4e0a\u5546\u54c1\u3092\u8cfc\u5165\u3057\u3066\u3044\u308b\u304b\u3089$100\u307e\u3067\u306e\u7bc4\u56f2\u3067\u3042\u308c\u3070\u4fe1\u983c\u3067\u304d\u308b\u3001\u3068\u3044\u3063\u305f\u5177\u5408\u3060\u3002\u5177\u4f53\u4f8b\u3067\u898b\u3066\u307f\u308b\u3068\uff1aA\u304cD\u304b\u3089\u30b9\u30de\u30db\u3092\u8cb7\u3046\u5834\u5408\u3001A\u3068D\u306b\u306f\u76f4\u63a5\u4fe1\u983c\u95a2\u4fc2\u304c\u306a\u3044\u5834\u5408\u3067\u3082\u3001A\u304c\u4fe1\u983c\u3059\u308bB\u304c\u304a\u308a\u3001B\u304c\u4fe1\u983c\u3059\u308bC\u304c\u3044\u3066\u3001C\u304c\u4fe1\u983c\u3059\u308bD\u304c\u3044\u308b\u306e\u3067\u3042\u308c\u3070\u3001A\u306fD\u3092\u4fe1\u983c\u3057\u3066\u5546\u54c1\u3092\u8cfc\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u30b5\u30fc\u30af\u30eb\u304c\u69cb\u7bc9\u3067\u304d\u308ba) A\u3068D\u306e\u53d6\u5f15\u304c\u554f\u984c\u306a\u304f\u3059\u3093\u3060\u5834\u5408\u2192\u7686\u30cf\u30c3\u30d4\u30fcb) D\u304cA\u306b\u30b9\u30de\u30db\u3092\u9001\u4ed8\u3057\u306a\u304b\u3063\u305f\u308a\u6b3a\u3044\u305f\u5834\u5408A\u306f\u76f4\u63a5\u95a2\u4fc2\u304c\u3042\u308bB\u304b\u3089\u8cc7\u91d1\u3092\u56de\u53ce\u3057\u3001B\u2190C\u2190D\u3068\u3044\u3046\u6d41\u308c\u3067\u30c8\u30e9\u30b9\u30c8\u30c1\u30a7\u30fc\u30f3\u3092\u305f\u3069\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u5b9f\u969b\u306b\u8a50\u6b3a\u3092\u884c\u3063\u305f\u4eba\u9593\u306b\u5bfe\u3057\u3066\u4fdd\u967a\u3092\u304b\u3051\u308b\u3053\u306e\u30b9\u30ad\u30fc\u30e0\u306f\u7269\u3067\u3042\u308c\u60c5\u5831\u3067\u3042\u308c\u3001\u4eba\u9593\u540c\u58eb\u304c\u306a\u306b\u304b\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u5834\u5408\u306b\u6d3b\u7528\u3067\u304d\u308b\u3082\u306e\u3067\u3042\u308b\u3002\u3067\u306f\u3001\u30d5\u30a7\u30a4\u30af\u30a2\u30ab\u30a6\u30f3\u30c8\u3084\u30d5\u30a7\u30a4\u30af\u30cb\u30e5\u30fc\u30b9\u304c\u8513\u5ef6\u3059\u308b\u73fe\u4ee3\u306e\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306b\u304a\u3044\u3066\u3001\u4e00\u822c\u306e\u4eba\u304c\u9a19\u3055\u308c\u305a\u306b\u6e08\u3080\u4ed5\u7d44\u307f\u306f\u306a\u3044\u306e\u3060\u308d\u3046\u304b\uff1f\u73fe\u5728\u306eTwitter\u306b\u304a\u3051\u308b\u554f\u984c\u70b9\u3053\u3053\u3067\u5192\u982d\u306eTwitter\u30b9\u30ad\u30e3\u30e0\u306e\u4f8b\u306b\u623b\u308b\u3002Vitalik\u306e\u3075\u308a\u3092\u3057\u305f\u30d5\u30a7\u30a4\u30af\u30a2\u30ab\u30a6\u30f3\u30c8\u3084\u3001\u305d\u308c\u306b\u547c\u5fdc\u3057\u305f\u201d\u304a\u3068\u308a\u201d\u306e\u30d5\u30a7\u30a4\u30af\u30a2\u30ab\u30a6\u30f3\u30c8\uff08\u8a50\u6b3a\u76ee\u7684\u306e\u30c4\u30a4\u30fc\u30c8\u306b\u5bfe\u3057\u3066Like\u3084Retweet\u3092\u3059\u308b\uff09\u306b\u5bfe\u3057\u3066\u3001Twitter\u306e\u30a2\u30c9\u30df\u30f3\u306f\u5bfe\u5fdc\u304c\u9045\u3059\u304e\u308b\uff08\u6570\u6642\u9593\u301c\u6570\u65e5\u4ee5\u4e0a\uff09\u3057\u3001\u30b9\u30ad\u30e3\u30e0\u304c\u81ea\u767a\u7684\u306b\u6392\u9664\u3055\u308c\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3082\u306a\u3044\u3002\u3053\u3046\u3044\u3063\u305f\u554f\u984c\u306b\u5bfe\u3057\u3066\u3001Twitter\u4ee5\u5916\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3082\u9069\u7528\u53ef\u80fd\u306a\u3001\u72ec\u7acb\u3057\u305f\u30e2\u30c7\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u4ed5\u7d44\u307f\u306f\u63d0\u6848\u3067\u304d\u306a\u3044\u3060\u308d\u3046\u304b\uff1fPrediction market:\u4e88\u6e2c\u5e02\u5834\uff08\u4e00\u7a2e\u306e\u5148\u7269\u5e02\u5834\uff09\u304c\u30d2\u30f3\u30c8\u306b\u306a\u308b\u306e\u3067\u306f\u3068\u5f7c\u304c\u63d0\u6848\u3057\u305f\u306e\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30a4\u30c7\u30a2\u3002\u4e88\u6e2c\u5e02\u5834\u3092\u5229\u7528\u3057\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u30e2\u30c7\u30ec\u30fc\u30b7\u30e7\u30f3\u4ed5\u7d44\u307f\u3068\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u3067\u3042\u308bWeb\u30d6\u30e9\u30a6\u30b6\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306a\u3001Twiiter\u3084\u305d\u306e\u307b\u304b\u30e6\u30fc\u30b6\u30fc\u6295\u7a3f\u578b\u306e\u30b5\u30a4\u30c8\u306b\u9069\u5fdc\u53ef\u80fd\u306a\u30ec\u30a4\u30e4\u30fc\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u306fETH\u3092\u62e0\u51fa\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a7\u30a4\u30af\u3068\u601d\u308f\u308c\u308b\u30b3\u30f3\u30c6\u30f3\u30c4\u306b\u201ddownvote\u201d\u30dc\u30bf\u30f3\u3092\u62bc\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u3002Twitter\u306a\u3069\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5074\u306f\u3001downvote/upvote\u306e\u6bd4\u7387\u3092\u5f97\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30d5\u30a7\u30a4\u30af\u3068\u7591\u308f\u3057\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\u306b\u30d5\u30e9\u30c3\u30b0\u3092\u3064\u3051\u305f\u308a\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u76ee\u304b\u3089\u96a0\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\u3053\u3053\u306b\u306f\u6700\u7d42\u7684\u306b\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u6b63\u5426\u3092\u5224\u65ad\u3059\u308b\u30e2\u30c7\u30ec\u30fc\u30b7\u30e7\u30f3\u30d1\u30cd\u30eb\u304c\u5b58\u5728\u3057\u3001\u5f7c\u3089\u304c\u30d5\u30a7\u30a4\u30af\u3060\u3068\u5224\u65ad\u3057\u305f\u30b3\u30f3\u30c6\u30f3\u30c4\u306bdownvote\u3057\u3066\u3044\u305f\u4eba\u305f\u3061\u306f\u5831\u916c\u3092\u5f97\u3066\u3001upvote\u3057\u3066\u3044\u305f\u3072\u3068\u305f\u3061\u306f\u62e0\u51fa\u3057\u3066\u3044\u305f\u8cc7\u7523\u3092\u5931\u3046\u3068\u3044\u3046\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u8a2d\u8a08\u3092\u884c\u3046\u3002\u5358\u306a\u308b\u30dc\u30e9\u30f3\u30c6\u30a3\u30a2\u72b6\u614b\u3060\u3068\u591a\u304f\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u81ea\u4e3b\u7684\u306b\u30b9\u30ad\u30e3\u30e0\u30ec\u30dd\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u884c\u308f\u305b\u308b\u306e\u306f\u96e3\u3057\u3044\u304c\u3001\u30af\u30ea\u30d7\u30c8\u30a8\u30b3\u30ce\u30df\u30fc\u3067\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u8a2d\u8a08\u304c\u3042\u308c\u3070\u3001\u3053\u305e\u3063\u3066\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u6b63\u5426\u3092\u5224\u65ad\u3059\u308b\u30d7\u30ed\u30e2\u30c7\u30ec\u30fc\u30bf\u30fc\uff08\u3042\u308b\u3044\u306fAI\u30e2\u30c7\u30ec\u30fc\u30bf\u30fc\uff09\u304c\u51fa\u73fe\u3057\u3084\u3059\u304f\u306a\u308a\u3001\u73fe\u5728\u306e\u30c4\u30a4\u30c3\u30bf\u30fc\u306e\u8ab2\u984c\u3092\u591a\u304f\u6539\u5584\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3002\u30a4\u30f3\u30b5\u30a4\u30c0\u30fc\u53d6\u5f15\u304c\u8d77\u3053\u3089\u306a\u3044\u3088\u3046\u30e2\u30c7\u30ec\u30fc\u30b7\u30e7\u30f3\u30d1\u30cd\u30eb\u306e\u4e2d\u7acb\u6027\u3068\u6b63\u78ba\u6027\u3092\u7dad\u6301\u3059\u308b\u305f\u3081\u306b\u3001decentralized\u306a\u6295\u7968\u30b7\u30b9\u30c6\u30e0\u3084DAO\u3067\u3042\u308c\u3070\u597d\u307e\u3057\u3044\u3002\u6700\u7d42\u7684\u306b\u306f\u3001\u30b3\u30f3\u30c6\u30f3\u30c4\u751f\u6210\u304b\u3089\u6570\u79d2\u4ee5\u5185\u306b\u3001\u30d5\u30a7\u30a4\u30af\u30b3\u30f3\u30c6\u30f3\u30c4\u306b\u306f\u81ea\u52d5\u7684\u306b\u30d5\u30e9\u30c3\u30b0\u304c\u7acb\u3066\u3089\u308c\u3001\u4e00\u822c\u306e\u4eba\u3005\u306e\u76ee\u306b\u3055\u3089\u3055\u308c\u306a\u3044\u3088\u3046\u306a\u4e16\u754c\u304c\u7406\u60f3\u3002\u666e\u53ca\u3059\u308b\u305f\u3081\u306e\u30b9\u30c6\u30c3\u30d7\u3053\u3046\u3044\u3063\u305f\u30a2\u30a4\u30c7\u30a2\u3092\u5b9f\u4e16\u754c\u3067\u666e\u53ca\u3055\u305b\u3066\u3044\u304f\u306b\u306f\u3001\u307e\u3060\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8ab2\u984c\u304c\u6b8b\u3063\u3066\u3044\u308b\u3068\u3057\u305f\u30fb\u73fe\u72b6\u306e\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30fc\u30f3\u306e\u30b9\u30b1\u30fc\u30e9\u30d3\u30ea\u30c6\u30a3\u306f\u307e\u3060\u307e\u3060\u8ffd\u3044\u3064\u3044\u3066\u3044\u306a\u3044\uff1aSharding\u3084\u30012nd\u30ec\u30a4\u30e4\u30fc\u306ePlasma\u306e\u3088\u3046\u306a\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u73fe\u3059\u308b\u306e\u304c\u5fc5\u9808\u306b\u306a\u308b\u30fb\u30af\u30ea\u30d7\u30c8\u5168\u822c\u306e\u30e6\u30fc\u30b6\u30d3\u30ea\u30c6\u30a3\u306e\u4f4e\u3055\uff1a\u6697\u53f7\u901a\u8ca8\u3092\u5165\u624b\u3059\u308b\u306e\u306f\u307e\u3060\u307e\u3060\u4e00\u822c\u306e\u4eba\u306b\u306f\u8907\u96d1\u3001\u30a6\u30a9\u30ec\u30c3\u30c8\u306f\u4f7f\u3044\u306b\u304f\u3044\u30fb\u30ec\u30a4\u30c6\u30f3\u30b7\u30fc\uff1a\u73fe\u72b6\u30a4\u30fc\u30b5\u30ea\u30a2\u30e0\u306e\u30d6\u30ed\u30c3\u30af\u751f\u6210\u6642\u9593\u306f14\u79d2\u307b\u3069\u3060\u304c\u3001\u3053\u308c\u306f\u3053\u308c\u307e\u3067\u8a71\u3057\u305f\u30a2\u30a4\u30c7\u30a2\u3092\u5b9f\u73fe\u3059\u308b\u306b\u306f\u307e\u3060\u307e\u3060\u9045\u3044\u30fb\u5b9f\u969b\u306b\u5275\u308a\u4e0a\u3052\u308b\u30af\u30ea\u30a8\u30a4\u30bf\u30fc\u304c\u5fc5\u8981===\u3068\u3001\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002Vitalik\u81ea\u8eabTwitter\u3067\u3082\u3088\u304f\u3053\u306e\u554f\u984c\u3078\u306e\u6ce8\u610f\u559a\u8d77\u3092\u884c\u306a\u3063\u3066\u307e\u3059\u304c\u3001\u308f\u3056\u308f\u3056\u30c8\u30fc\u30af\u306e\u30e1\u30a4\u30f3\u30c8\u30d4\u30c3\u30af\u306b\u7f6e\u304f\u3068\u3044\u3046\u3053\u3068\u304b\u3089\u3082\u76f8\u5f53\u554f\u984c\u306b\u611f\u3058\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u4f1d\u308f\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u30a2\u30ab\u30a6\u30f3\u30c8\u540d\u3082Vitalik \u201cNo I\u2019m not giving away ETH\u201d Buterin\u306b\u306a\u3063\u3066\u308b\u2193Vitalik \"No I'm not giving away ETH\" Buterin (@VitalikButerin) | TwitterThe latest Tweets from Vitalik \"No I'm not giving away ETH\" Buterin (@VitalikButerin). See https://t.co/iBNSW4KCSO\u2026twitter.com\u30bf\u30a4\u30c8\u30eb\u306b\u3082\u3042\u3063\u305f\u901a\u308a\u3001\u201cCryptoeconomics\u201d\u3092\u3088\u304f\u53e3\u306b\u3057\u3066\u3044\u305f\u306e\u3082\u5370\u8c61\u7684\u3067\u3057\u305f\u3002\u30af\u30ea\u30d7\u30c8\u30a8\u30b3\u30ce\u30df\u30fc\u306f\u3001\u4eba\u9593\uff08\u3042\u308b\u3044\u306fAI\uff09\u306e\u884c\u52d5\u3092\u7d4c\u6e08\u30a4\u30f3\u30bb\u30f3\u30c6\u30a3\u30d6\u3092\u3064\u3051\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30e2\u30c7\u30eb\u5316\u3092\u8003\u3048\u3089\u308c\u308b\u306e\u304c\u9762\u767d\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u8a18\u4e8b\u3092\u8aad\u3093\u3067\u697d\u3057\u3093\u3067\u9802\u3051\u305f\u65b9\u306fTwitter\u3067\u30d5\u30a9\u30ed\u30fc\u3044\u305f\u3060\u3051\u308b\u3068\u559c\u3073\u307e\u3059Obi (@obnty) | TwitterThe latest Tweets from Obi (@obnty). \u30af\u30ea\u30d7\u30c8\u30a8\u30b3\u30ce\u30df\u30fc\u304c\u5275\u308b\u672a\u6765\u306b\u95a2\u5fc3\u304c\u3042\u308a\u307e\u3059 Japan & Cryptoeconomic projects around\ud83c\udf0e Born/bred in Tokyo\u2026twitter.com", "responses": ""}, {"title": "Taking stock. Ethereum at $100 & the stories along the\u00a0way.", "author_name": "Simon de la Rouviere", "link": "https://medium.com/@simondlr/taking-stock-ethereum-at-100-the-stories-along-the-way-5d3c6c7cbea1?source=search_post", "post_date": "May 5, 2017", "readtime": "6 min read", "upvotes": "113", "content": "Taking stock. Ethereum at $100 & the stories along the\u00a0way.Simon de la RouviereBlockedUnblockFollowFollowingMay 5, 2017Ethereum recently bounced against the $100 mark. The blockchain is in euphoria mode again. As these things go, it might halve again, or just continue going. $100 is pretty arbitrary, but it offers a nice point to just sit back and reflect. We are here. It\u2019s gotten to this point. Let\u2019s look back and look at the map for the journey ahead.Personally, I\u2019m not quite sure how to process it. It usually borders on something close to tearing up. It\u2019s an incredible validation. A deep belief that this technology will change the world for the better, and we are still (somewhat) on the right path. For you see:At the end of 2014, after taking almost year off (living off my savings, Bitcoin & Dogecoin), working on my own cryptocurrency/blockchain projects, my money was starting to run out. My father recently told me how worried he became of me during that year. I had moved back home, asking them to support me. I was hunkered in my hoodie up in my room, working till 2\u20133am in the evenings.I sold my side projects and had to go get some last Bitcoin & Dogecoin out of cold storage to sell. \u00be through 2014, I decided: you know what? This isn\u2019t working. Maybe I should just join a company I don\u2019t like, doing dev work to stay afloat, or start something that\u2019s less crazy? I did try that for 2 weeks (thinking of doing a whiskey-subscription business) and then I wrote something in my journal:\u201cIt feels like a cop out. Like I\u2019m settling for 2nd fiddle. I\u2019ve achieved a lot and always felt that I could do more\u2026 much more. I *am* doing a lot. It\u2019s just that it feels kind of shit to take year off and not be in the position to properly \u201claunch\u201d myself. It feels like one of the few times where I\u2019ve tried really hard, and disappointed myself.I\u2019m annoyed. Always been annoyed that I\u2019ve had ideas and it seems no one listens. Not really. My desire has always been that I want to bring ideas and projects to fruition: to create, experiment and enact. How do I keep doing that?!\u201dIt was to be a boom or bust. I was going to ride my savings till the end, and then I really didn\u2019t know what I was going to do.By a stroke of serendipity, Ashley Taylor found me on Reddit around October 2014, after I enquired about potentially joining Ethereum itself. I still remember, talking to Ashley & Joe at the end of 2014, with them in a tiny co-working space, and Joe telling me: \u201cAll those blogs you wrote. All those ideas. We want to build all of that.\u201dAn early all-hands at ConsenSys -> somewhere early\u00a02015.I was a bit stunned. I finished up some contract work that fell on my lap, and then joined ConsenSys as one of the first 5\u201310 people in January 2015.I captured a second of each in 2014 and stitched it together. You can see that pretty much of the shots is just me at home with a #sunsetwhiskey.After almost 2,5 years at ConsenSys, I try to remember the position I was in. A kid from Cape Town, trying to punch his way into the world with his crazy ideas. Most of the ideas are still likely crazy (meme markets?!), but at least I\u2019m around equally crazy folk now. I was giving up hope, and worried about the despondent state I would\u2019ve potentially fallen into. I\u2019m extremely, extremely grateful that Joe gave me a chance. Thank you Joe. Really.Now, I\u2019m 27, and I *know* I will remember the excitement of all these days. I\u2019m extremely mindful about it: just trying to take it all in. I took some photos along the way.Talking blockchain & music at Midem\u00a02015.Working from Ethereum HQ before Frontier. May\u00a02015.Taking a shelfie from the airbnb in Berlin.\u00a02015.Celebrating Frontier launch with a #sunsetwhiskey. 30 July\u00a02015.First Cape Town Ethereum Meetup. August 2015. 3 people pitched\u00a0up.Working in airports trying to finish Ujo Tiny Human prototype in\u00a0time.devcon1 shenanigans in London on our way to Vinay Gupta\u2019s\u00a0pad.devcon2, sharing in wines we brought from all over the world in the lobby of the\u00a0Astor.Discussing curation markets with Maciej in Shanghai at\u00a0devcon2.The Proof-of-Stake cool kids table at COALA Nairobi. December\u00a02015.I spoke to Greg McMullen (from BigchainDB) in Nairobi at the COALA workshops recently, talking about where we are finding ourselves. I told him that we are still at the cusp of what\u2019s going to happen. The inflection point hasn\u2019t even started yet. I also told him at the last day of the workshop over a sunset whiskey that I\u2019m tired and exhausted. I feel like I need to slow down. This was prescient because I burned out shortly after, being man down with exhaustion for 4 days.The problem is, is that the longer I am in this space, the more exciting it gets, the more there is to build and experiment with. Despite being tired, I have to get out of my hotel and join in on the conversation where the craziest, smartest people are discussing consensus algorithms over beer.I remember the kid from 2014 and how much I wanted to be at this frontier. And now we are all here. And the spirit is still alive. I am extremely privileged, grateful and feel immensely lucky. The unbridled potential is still unfurling and it\u2019s so exciting to watch and be a part of.A lot of stories have been told so far.The road ahead.It\u2019s easy to revel in price euphoria. It\u2019s easy to fall into hubris. There\u2019s a bunch of (awesome) nerds who have suddenly gotten rich. You have more power now, but don\u2019t let that cause you to think you know what\u2019s going on.We are in control of something that is extremely powerful for good and bad. We have a responsibility to make sure we chart our grand, shared artefact to the benefit of all of humanity. It would be pretty stupid if it just ends being a new oligarchy after it\u2019s all done.Ethereum at $100 is just a pat on the back. Remember that it still could go up in smoke tomorrow (however unlikely it seems). We have only really just started. The road ahead will be exciting, treacherous, but above all, it will remain exciting. There\u2019s a lot more fellow travelers on the road now. There\u2019s a lot more stories to tell. As the platitude goes:If you want to go fast, go alone. If you want to go far, go together.There\u2019s a lot more to build still. I\u2019m excited to keep going along this journey with you all. Despite how exciting this all is, remember to take stock. Get up from the computer, enjoy the sunset, see friends, lovers and family.", "responses": "10"}, {"title": "Head of Ethereum Competence Centre Vladislav Martynov joined World Wi-Fi as a Co-Founder", "author_name": "World Wi-Fi", "link": "https://medium.com/world-wi-fi-blog/head-of-ethereum-competence-centre-vladislav-martynov-joined-world-wi-fi-as-a-co-founder-61f1b7f29d9b?source=search_post", "post_date": "May 15, 2018", "readtime": "2 min read", "upvotes": "4K", "content": "Head of Ethereum Competence Centre Vladislav Martynov joined World Wi-Fi as a Co-FounderWorld Wi-FiBlockedUnblockFollowFollowingMay 15, 2018Head of Ethereum Competence Centre Vladislav Martynov has joined World Wi-Fi, a decentralized free Wi-Fi network, as a co-founder. His extensive experience and expertise in the blockchain industry will significantly strengthen World Wi-Fi\u2019s position on the global market.In 2016, Martynov became an advisor to the Ethereum Foundation. He is associated with the Ether not only with business relations, but also with a personal friendship with the founder Vitalik Buterin and his father.Martynov is responsible for developing the ecosystem around blockchain technologies and smart contracts in the Ethereum. It is he who explains to entrepreneurs and officials how and why the blockchain technology is applied and what the future may hold with it.In October 2016, Martynov started BlockGeeks as a co-investor. This is a platform for online training of professionals in the field of a blockchain, and he also founded a fund for investing blockchain startups.\u201cWhen it comes to choosing projects, I always rely on my emotional motivation. It is important to me that people in Russia live in a high-tech country, \u201c Martynov says. \u201cAnd I tried to prove that we have talented guys who are able to create and manage international hi-tech projects.\u201dHe is authoritative for many experts because widely known as a successful businessman with 25 years\u2019 experience in digital technologies on international markets and huge experience in various technology projects. He has launched several successful startups within this period and held managerial positions in leading world companies, among those are Arthur Andersen, Microsoft, SAP.In 2015, he invested into ICEBERG Sports Analytics project\u00a0, a system related to hockey analytics based on the artificial intelligence technologies, computer vision, and big data analysis methods. The service helps to increase the efficiency of hockey clubs management and is widely used by KHL, MHL, NHL and other hockey leagues in different countries.Since August, 2011, he headed the team developing YotaPhone. A global business with the share capital of $154 mln. was built in five years. Two versions of YotaPhone were released, and smartphone sales were launched in twenty countries around the world. At the moment, V.V. Martynov is the owner of 10% of shares and a member of the Board of Directors.", "responses": ""}, {"title": "ETHGlobal: supporting ethereum hackathons around the\u00a0world", "author_name": "ETHGlobal Team", "link": "https://medium.com/ethglobal/ethglobal-supporting-ethereum-hackathons-around-the-world-5e32fa991a55?source=search_post", "post_date": "Feb 14, 2018", "readtime": "3 min read", "upvotes": "1.7K", "content": "ETHGlobal: supporting ethereum hackathons around the\u00a0worldETHGlobal TeamBlockedUnblockFollowFollowingFeb 14, 2018Since launching in 2015, ethereum has become the leading platform for dapps and the decentralized web. This success would not have been possible without ethereum\u2019s passionate developer community\u200a\u2014\u200athe largest and most active of any blockchain platform\u200a\u2014\u200awho have built new developer tools and pushed the technology to its limits. We believe that ethereum\u2019s continued success depends in no small part on continuing to grow and support this community, which is why we\u2019re excited to announce ETHGlobal.At ETHGlobal we\u2019re leveraging our team\u2019s experience running events like ETHWaterloo to support the next generation of ethereum hackathons. We provide tools, logistical support, a comprehensive guide to running hackathons, and access to our network of judges and sponsors in the ethereum community.Our first event was ETHWaterloo, the world\u2019s largest ethereum hackathon to-date. This event spawned the global phenomenon Cryptokitties, an initial plasma implementation, and a MetaMask integration in the Brave Browser to name a few. It helped foster a vibrant ecosystem for ethereum applications and cryptoeconomic research development at the University of Waterloo and surrounding region. ETHWaterloo strengthened our belief that hackathons are a great way to teach new skills, build developer communities, and push the limits of new technologies.We\u2019ve since received numerous requests from passionate ethereum community groups around the world to replicate our format in their home city. ETHGlobal generalizes the organizational efforts and technical toolsets from our previous hackathons to support enthusiasts who want to run events focused on ethereum and related cryptoeconomic technologies. In doing so we can help grassroots organizers create the strong developer ecosystems that grow from events like great hackathons. In the initial phase, our support will include tools for managing registrations and the technical backend of events, a comprehensive playbook for handling event organization and logistics, access to sponsors and judges, and direct assistance from our team.We\u2019re pleased to announce that our next supported event is ETHDenver taking place in Denver, Colorado on February 16\u201318, 2018.ETHGlobal is a not-for-profit organization managed as a partnership between L4 and SV Angel and initially funded by a grant from the Ethereum Foundation. The core team includes Ethan Wilding, Liam Horne and Kartik Talwar. Liam and Kartik were organizers of ETHWaterloo and together co-founded Hack the North, Canada\u2019s largest hackathon. We\u2019re especially grateful to the Ethereum Foundation to help us realize our shared vision of fostering a world-class ecosystem of ethereum developers and entrepreneurs, collectively building the decentralized future.For more information, visit our site at ethglobal.co or email us at hello@ethglobal.co", "responses": ""}, {"title": "Why Ethereum should adjust algo on next planned Hardfork? From a Miner\u2019s perspective", "author_name": "BITS BETRIPPIN", "link": "https://medium.com/@bitsbetrippin/why-ethereum-should-adjust-algo-on-next-planned-hardfork-from-a-miners-perspective-aa0afeef05b9?source=search_post", "post_date": "Apr 10, 2018", "readtime": "7 min read", "upvotes": "2.5K", "content": "Why Ethereum should adjust algo on next planned Hardfork? From a Miner\u2019s perspectiveBITS BETRIPPINBlockedUnblockFollowFollowingApr 10, 2018Who\u2019s this dude?First a brief background. As a miner for nearly 8 years, I got my start in Bitcoin mining in 2010. With a pair of Gigabyte 5970\u2019s and a bleeding edge pair of MSI 6950\u2019s (2011ish), I was hooked nearly instantly. See in that time, bitcoin was not worth a lot and mining was at a net power/hardware cost loss (at the time). The entire concept of a decentralized, PoW incentivized network, of which anyone in the world the a little bit of technical ability building a PC and a few parts could contribute to a global network for a token was mind-blowing to me. The conceptually limitless potential regarding financial transactions, information immutability and things at the time I couldn\u2019t began to understand would be fundamental in disrupting nearly everything. This was before a lot of very popular names in the space talked about any of the financial disruption, concepts of potential revolution of institutions, and well before scaling debates and other cryptos were a thing.The simplest use case that I kept trying to get across to people was the finality of the transaction. To me, that was a HUGE and I could see in my regular business dealings that the fact I could trade a token to someone, the second there was a validation on the network, the decentralized consensus that allows for the cryptographic guarantee is fundamentally a game changer. The excitement created from witnessing that activity, along with the fact a lightly configured computer in my basement was one of many enabling the aforementioned protocol (bitcoin), bolstered my commitment on evangelization of the tech. By 2013, I decided to start a YouTube dedicated to helping people get into Mining as, at the time, not a lot of mining specific content, from a technical (YouTube) level was produced. From there, BitsBeTrippin was born. Now while the history is good and all, it\u2019s not the main point of this post. My goal is to raise a core focus of community in the discussion of Ethereum and the ASIC issue.OK, but what\u2019s the so what factor?The one thing that is lost in the entire discussion with miners is the fact Ethereum has a widely known significant, decentralized and worldwide participating mining community. The influence those miners have on projecting value into the ecosystem (other than a measurable hash power) is an immeasurable network effect of grassroots initiatives that are started by that mining community. Many facilitating education and general evangelization that occurs nearly every day with this robust community.Make no mistake, Ethereum\u2019s resurgence of PoW mining in 2015 for mining (GPU, CPU) helped expand thousands, potentially 10\u2019s of thousands into the activity of mining, that had a one to many effect on educating general masses and pulling family, friends, co-workers and more into the space, if not for mining, as counterparties buying cryptocurrency. See if you are a miner; your friends, family, friends of family, friends of friends, essentially anyone in your immediate circle at some point find out you are mining due to you talking about it, potentially proudly, and indirectly weave much of the activity in your daily activity. From that initial interaction, you may just get someone into understanding what crypto is, forward them over to a YouTuber, Discord or a Forum to get them more familiar with the subject. This has created many instances that those individuals themselves get into mining or forgo to just purchase crypto instead.Regarding skeptics on potential numbers (tens of thousands) cited above. The BitsBeTrippin email is filled (over 120k msg since 2016 alone) from individuals, companies, investors, ICOs, general mom and pop shops that discussed some level of mining activity along with the channel having nearly 40k subscribers, 3+ million views and hundreds of thousands of comments of individual miners helping each other with settings etc. There are at least 10+ other channels like ours, some larger now that have 50k to nearly 110k subs with same type of comments citing same questions, providing answers to mining configs. That activity breeds participation, community growth and a range of potential new developers, more content (dApps, wallets, trading tools) and more. A centralized mining provider, such as an ASIC provider will greatly tear down that community that provides so much ancillary benefit into the cryptocurrency space. It\u2019s no simpler than, how many people do you know mine bitcoin? (Not many, for a range of reasons, not to include who wants to own a paperweight after the next gen ASIC comes out) GPU mining and subsequent CPU mining offers the barrier of entry to literally be ANYONE on the planet that can get a CPU / GPU and download some open source software. The proverbial barrier to entry is essentially a local box store or online order from amazon / newegg, about 150 (one card machine) to 3g (moderately nice rig) and a weekend. Pick from a list of YouTubers that show you how to get into the space and you\u2019re off hashing away. ASIC\u2019s centralization is much more of an issue than just a few companies limited/selling the hardware they produce. The missing out on known/known amounts of network effect needs to be weighed.But what about graphics cards and hardware for PC\u2019s, lets help the gamers?This is a subject that ultimately in the long run needs to be tackled, but not by the Ethereum Developers. This is a market demand issue and should be handled by nVidia and AMD. If mining remains a long term activity, they will ultimately build a market segment around it, period. I attended, and documented my activity at CES2018 around this very subject. I even got to talk to the nVidia CEO and posted it in one of our videos. They are in the business to make products and generate revenue and live in a world of stockholders and boards. The risk profile on mining is centered around a highly volatile demand cycle on their products. When demand is up, they are wiped out, when demand is down, it\u2019s like cash for clunkers and everyone\u2019s trying to trade in the used goods, so significant market saturation happens. A more clear direction from cryptocurrency networks and a roadmap that shows a support level for a period of time may have a better read on this market for those providers, but ultimately price, profitability will always dictate total international supply issues. Bottom line, do not predicate your decision on those factors.Cool story, what\u2019s the bottom line for the TL:DR bro\u2019sOk\u00a0\u2026 straight to the point\u2026Pros on adding algo change to next hardforkExtensive grassroot community support, existing mining hardware ready and supporting and a resurgence of loyalty from an already vibrant and existing communityTransparency on effect of ASICs (pre-release)\u00a0; look no further than the extensive drop in hash rate on the XMR network\u200a\u2014\u200apoint proven; what\u2019s the estimation on how much of the current hash power is actually silent ASICsLong game is still Proof of Stake, as one of my fav. Game of Throne characters said, \u201cIt is known\u201d, will start with a hybrid PoW/PoS system. This still encourages PoW participation.Social Media, YouTube, Twitch creator community that embolden the message, not just mining. If you look at most of the creators showing people how to mine, many cross pollenate that community engagement with stories on \u201cdApps, Use Cases, Functionality and late and breaking news around the technology\u201d\u00a0; Yes, these exist for bitcoin, but not at a creativity level and regular on demand basis as the mining channels, most are \u201cTrade Analysis \u2018guru\u2019s (cough)\u201d (don\u2019t worry trader bros, it was an easy jab atm)Sticking to the original writing in White Paper of \u201cASIC resistance\u201d\u00a0\u2026 if the first opportunity you\u2019re met with an ASIC and don\u2019t even take the easy road on an already planned HF not to tweak, what was the narrative if not false? At a minimum set, regardless of roadmap, as long as it doesn\u2019t risk main net functionally, should \u2018lean in\u2019 on the opportunity to tweak.Send a clear message to ASIC producers that the proverbial easy prey, limited to no risk days are over if they choose to tape out a solution and hide from community. This behavior can be corrected with enough impacts on bottom line.Show of unity with the strongly loyal community that helped evangelize Ethereum on top of committing time, money on supporting the network. Everyone understand the long game is moving to a Proof of Stake solution, that being said, a little effort here goes a long way.Negatives on algo change/adjustWhile more than likely not likely, if the ASIC is in fact a FPGA, could quickly be reprogrammed (highly unlikely due to cost, which would be transparent on initial sales of Batch 1 and 2 pricing)More work for Ethereum testers, developers as they now have to prep a fix (even if fast, quick tweak, still work); deploy to testnet, solicit support to validate change doesn't cause an issueAll mining software would need to be updated, means folks like ethermine, claymore etc will have to be on point and have notional time to fix/test release; this would have to be coordinatedUnknown businesses and financial institutions that funded potential off radar ASIC development and other known companies that have put significant investment in development will be directly affected.In closing, hopefully this helps augment the already vibrant discussion on the subject. I have no doubt it will. Cheers", "responses": "40"}, {"title": "Ethereum in Depth, Part\u00a01", "author_name": "Facu Spagnuolo", "link": "https://blog.zeppelin.solutions/ethereum-in-depth-part-1-968981e6f833?source=search_post", "post_date": "May 11, 2018", "readtime": "10 min read", "upvotes": "707", "content": "Ethereum in Depth, Part\u00a01Facu SpagnuoloBlockedUnblockFollowFollowingMay 11, 2018Photo by Bryn Parish on Unsplash.Welcome to the first part of a two-posts series aimed at software developers looking to understand how the EVM works. The idea is to explain and describe in detail core behavior of the EVM. We will see how contracts are created, how message calls work, and take a look at everything related to data management, such as storage, memory, calldata, and the stack.To better understand this article, you should be familiar with the basics of the EVM. If you are not, I highly recommend reading these posts first.Throughout this post we will illustrate some examples and demonstrations using sample contracts you can find in this repository. Please clone it, run npm install, and check it out before beginning.Enjoy, and please do not hesitate to reach out with questions, suggestions or feedback.", "responses": "4"}, {"title": "Cu\u1ed9c chi\u1ebfn gi\u1eefa Ethereum v\u00e0 c\u00e1c EOS, Tron(TRX)\u2026", "author_name": "Tuan Tuan", "link": "https://medium.com/@hollytus1990/cu%E1%BB%99c-chi%E1%BA%BFn-gi%E1%BB%AFa-ethereum-v%C3%A0-c%C3%A1c-eos-tron-trx-68dab5ff6f59?source=search_post", "post_date": "Aug 16, 2018", "readtime": "7 min read", "upvotes": "5.5K", "content": "Cu\u1ed9c chi\u1ebfn gi\u1eefa Ethereum v\u00e0 c\u00e1c EOS, Tron(TRX)\u2026Tuan TuanBlockedUnblockFollowFollowingAug 16, 2018B\u1ea1n d\u00e0nh t\u00ecnh c\u1ea3m cho Ethereum hay EOS, Tron(TRX)..vv.. trong cu\u1ed9c chi\u1ebfn?, c\u00e1 nh\u00e2n t\u00f4i v\u1eabn d\u00e0nh t\u00ecnh c\u1ea3m cho Ethereum v\u00e0 n\u00f3 \u0111\u01b0\u1ee3c giao d\u1ecbch tr\u00ean s\u00e0n Huobi.B\u00e2y gi\u1edd c\u00f9ng t\u00ecm hi\u1ec3u Ethereum l\u00e0 g\u00ec, v\u00e0 c\u00f3 n\u00ean \u0111\u1ea7u t\u01b0 kh\u00f4ng?Ethereum l\u00e0\u00a0g\u00ec?T\u1ea1i sao n\u00f3 l\u1ea1i l\u00e0 \u0111\u1ed3ng ti\u1ec1n \u1ea3o c\u00f3 gi\u00e1 tr\u1ecb th\u1ee9 2 tr\u00ean th\u1ebf gi\u1edbi sau Bitcon? N\u00f3 c\u00f3 g\u00ec kh\u00e1c bi\u1ec7t v\u1edbi Bitcoin. \u0110\u00f3 l\u00e0 nh\u1eefng c\u00e2u h\u1ecfi c\u1ee7a r\u1ea5t nhi\u1ec1u ng\u01b0\u1eddi khi tham gia th\u1ecb tr\u01b0\u1eddng ti\u1ec1n \u0111i\u1ec7n t\u1eed \u0111\u1eb7t ra. \u0110\u1ed1i v\u1edbi c\u00e1c n\u01b0\u1edbc ph\u00e1t tri\u1ec3n nh\u01b0 M\u1ef9, \u0110\u1ee9c, Nga,..th\u00ec ti\u1ec1n m\u00e3 h\u00f3a \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ph\u1ed5 bi\u1ebfn t\u1eeb kh\u00e1 l\u00e2u nh\u01b0ng t\u1ea1i Vi\u1ec7t Nam th\u00ec v\u1eabn c\u00f2n r\u1ea5t m\u1edbi.T\u00ecm hi\u1ec3u v\u1ec1\u00a0EthereumEthereum (ETH) hay c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Bitcoin 2.0 l\u00e0 m\u1ed9t n\u1ec1n t\u1ea3ng \u0111i\u1ec7n to\u00e1n ph\u00e2n t\u00e1n kh\u1ed1i chu\u1ed7i ch\u1ea1y tr\u00ean c\u00f4ng ngh\u1ec7 blockchain, th\u00f4ng qua vi\u1ec7c s\u1eed d\u1ee5ng ch\u1ee9c n\u0103ng H\u1ee3p \u0111\u1ed3ng th\u00f4ng minh (Smart Contract). Ti\u1ec1n \u1ea3o Ethereum c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c giao d\u1ecbch, h\u1ee3p \u0111\u1ed3ng m\u1ea1ng ngang h\u00e0ng th\u00f4ng qua \u0111\u01a1n v\u1ecb ti\u1ec1n \u1ea3o l\u00e0 Ether. Kh\u00f4ng nh\u1eefng th\u1ebf ETH c\u00f2n \u0111\u01b0\u1ee3c \u0111\u00e1nh gi\u00e1 l\u00e0 m\u1ed9t n\u1ec1n t\u1ea3ng \u1ee9ng d\u1ee5ng h\u1eefu \u00edch v\u00e0 t\u1ef1 t\u1ea1o ra h\u1ec7 sinh th\u00e1i t\u00e0i ch\u00ednh ph\u00e2n t\u00e1n cho ri\u00eang m\u00ecnh.Ethereum \u0111\u01b0\u1ee3c gi\u1edbi thi\u1ec7u v\u00e0o cu\u1ed1i n\u0103m 2013 b\u1edfi m\u1ed9t ng\u01b0\u1eddi chuy\u00ean nghi\u00ean c\u1ee9u v\u1ec1 l\u1eadp tr\u00ecnh ti\u1ec1n \u1ea3o c\u00f3 t\u00ean Vitalik Buterin. V\u1edbi \u00fd t\u01b0\u1edfng ph\u00e1t tri\u1ec3n ETH \u0111\u1ec3 kh\u1eafc ph\u1ee5c nh\u1eefng \u0111i\u1ec3m ch\u01b0a t\u1ed1t m\u00e0 bitcoin g\u1eb7p ph\u1ea3i nh\u01b0 th\u1eddi gian x\u00e1c nh\u1eadn ch\u1eadm \u0111\u1ed3ng th\u1eddi khuy\u1ebfn kh\u00edch ng\u01b0\u1eddi d\u00f9ng kh\u00f4ng n\u00ean khai th\u00e1c ri\u00eang l\u1ebb m\u00e0 t\u1eadp trung khai th\u00e1c qua c\u00e1c mining-pool. Ti\u1ec1n \u0111i\u1ec7n t\u1eed Ethereumph\u00e1t tri\u1ec3n m\u1ea1nh m\u1ebd \u0111\u1ebfn ng\u00e0y n\u00e0y l\u00e0 nh\u1edd s\u1ef1 huy \u0111\u1ed9ng v\u1ed1n v\u00e0o kho\u1ea3ng th\u00e1ng 6 \u0111\u1ebfn th\u00e1ng 8 n\u0103m 2014 v\u00e0 c\u0169ng trong th\u1eddi \u0111i\u1ec3m \u0111\u00f3 v\u1ed1n h\u00f3a c\u1ee7a Ethereum \u0111\u1ea1t 25 tri\u1ec7u USD trong \u0111\u1ee3t m\u1edf b\u00e1n \u0111\u1ea7u ti\u00ean.Ethereum\u200a\u2014\u200aH\u1ee3p \u0111\u1ed3ng th\u00f4ng minh l\u00e0\u00a0g\u00ec?H\u1ee3p \u0111\u1ed3ng th\u00f4ng minh (Smart contracts) v\u1ec1 c\u01a1 b\u1ea3n n\u00f3 l\u00e0 m\u1ed9t thu\u1eadt to\u00e1n khi c\u00f3 \u0111i\u1ec1u ki\u1ec7n cho tr\u01b0\u1edbc \u0111\u01b0\u1ee3c \u0111\u00e1p \u1ee9ng \u0111\u1ea7y \u0111\u1ee7 th\u00ec c\u00e1c \u0111i\u1ec1u kho\u1ea3n h\u1ee3p \u0111\u1ed3ng s\u1ebd \u0111\u01b0\u1ee3c th\u1ef1c thi m\u1ed9t c\u00e1ch t\u1ef1 \u0111\u1ed9ng m\u00e0 kh\u00f4ng c\u1ea7n s\u1ef1 can thi\u1ec7p c\u1ee7a con ng\u01b0\u1eddi hay n\u00f3i c\u00e1ch kh\u00e1c n\u00f3 l\u00e0 nh\u1eefng \u1ee9ng d\u1ee5ng \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef trong blockchain. C\u00f4ng ngh\u1ec7 n\u00e0y ra \u0111\u1eddi cho ph\u00e9p \u201ccu\u1ed1n s\u1ed5 c\u00e1i\u201d theo d\u00f5i v\u00e0 ghi l\u1ea1i m\u1ecdi ho\u1ea1t \u0111\u1ed9ng giao d\u1ecbch, th\u1ecfa thu\u1eadn li\u00ean quan.H\u1ee3p \u0111\u1ed3ng th\u00f4ng minh nh\u01b0 bitcoin c\u00f3 kh\u1ea3 n\u0103ng ph\u00e1 v\u1ee1 c\u01a1 s\u1edf ph\u00e1p l\u00fd, ti\u1ebft ki\u1ec7m chi ph\u00ed cho c\u00e1c b\u00ean giao d\u1ecbch t\u00e0i ch\u00ednh nh\u1edd kh\u00f4ng th\u00f4ng qua m\u1ed9t b\u00ean trung gian n\u00e0o. B\u00ean c\u1ea1nh \u0111\u00f3, n\u00f3 l\u00e0m gi\u1ea3m nguy c\u01a1 th\u00f4ng qua c\u01a1 ch\u1ebf th\u1ef1c hi\u1ec7n kh\u00f4ng ph\u00e2n bi\u1ec7t \u0111\u1ed1i x\u1eed. N\u00f3i d\u1ec5 hi\u1ec3u h\u01a1n th\u00ec vi\u1ec7c thi\u1ebfu m\u1ed9t \u0111\u1ed1i t\u00e1c trung \u01b0\u01a1ng c\u00f3 kh\u1ea3 n\u0103ng cho ph\u00e9p h\u1ee3p \u0111\u1ed3ng ph\u1ee5c v\u1ee5 cho th\u1ecb tr\u01b0\u1eddng d\u1ecbch v\u1ee5 v\u1edbi hi\u1ec7u qu\u1ea3 cao h\u01a1n.Gi\u00e1 tr\u1ecb c\u1ee7a \u0111\u1ed3ng ti\u1ec1n Ethereum l\u00e0\u00a0g\u00ec?Ngu\u1ed3n khai th\u00e1c c\u1ee7a c\u00e1c \u201cTh\u1ee3 \u0111\u00e0o\u201d quy\u1ebft \u0111\u1ecbnh \u0111\u1ebfn gi\u00e1 tr\u1ecb c\u1ee7a \u0110\u1ed3ng Ethereum. V\u00ec Ethereum l\u00e0 m\u1ed9t n\u1ec1n t\u1ea3ng c\u00f2n t\u01b0\u01a1ng \u0111\u1ed1i non tr\u1ebb, th\u01b0\u1eddng xuy\u00ean bi\u1ebfn \u0111\u1ed9ng v\u1ec1 gi\u00e1 t\u1eeb th\u1ecb tr\u01b0\u1eddng khi\u1ebfn nhi\u1ec1u ng\u01b0\u1eddi cho r\u1eb1ng \u0111\u1ed3ng ti\u00ean \u1ea3o n\u00e0y \u00edt c\u00f3 gi\u00e1 tr\u1ecb v\u00e0 kh\u00f4ng n\u00ean \u0111\u1ea7u t\u01b0. Nh\u01b0ng th\u1eadt ra n\u1ebfu b\u1ea1n l\u00e0 ng\u01b0\u1eddi t\u00ecm hi\u1ec3u v\u00e0 theo d\u00f5i s\u00e1t sao ETH th\u00ec s\u1ebd nh\u1eadn ra n\u00f3 \u0111em l\u1ea1i nhi\u1ec1u c\u01a1 h\u1ed9i cho nh\u00e0 \u0111\u1ea7u t\u01b0.Ethereum l\u00e0 m\u1ed9t th\u1ecb tr\u01b0\u1eddng m\u1edf cho ph\u00e9p ng\u01b0\u1eddi dung d\u1ec5 d\u00e0ng tham gia mua b\u00e1n, trao \u0111\u1ed5i b\u1eb1ng ti\u1ec1n m\u1eb7t ho\u1eb7c bitcoin th\u00f4ng qua c\u00e1c s\u00e0n giao d\u1ecbch ho\u1eb7c gi\u1eefa c\u00e1c nh\u00f3m, t\u1ed5 ch\u1ee9c, c\u00e1 nh\u00e2n v\u1edbi nhau.T\u1ea1i sao l\u1ea1i l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng ph\u00e2n\u00a0c\u1ea5p?\u0110\u1ec3 hi\u1ec3u h\u1ec7 th\u1ed1ng ph\u00e2n c\u1ea5p l\u00e0 g\u00ec, b\u1ea1n c\u1ea7n ph\u1ea3i hi\u1ec3u h\u1ec7 th\u1ed1ng m\u1ea1ng t\u1eadp trung hi\u1ec7n t\u1ea1i c\u1ee7a ch\u00fang ta ho\u1ea1t \u0111\u1ed9ng nh\u01b0 th\u1ebf n\u00e0o. Gi\u1ea3 s\u1eed b\u1ea1n c\u00f3 t\u00e0i kho\u1ea3n tr\u1ef1c tuy\u1ebfn, n\u01a1i b\u1ea1n l\u01b0u tr\u1eef h\u00ecnh \u1ea3nh c\u1ee7a m\u00ecnh. H\u00e3y g\u1ecdi \u0111\u00f3 l\u00e0 \u201cCloudPhoto\u201d. B\u1ea1n c\u00f3 th\u1ec3 t\u1ea3i \u1ea3nh l\u00ean CloudPhoto v\u00e0 truy c\u1eadp nh\u1eefng b\u1ee9c \u1ea3nh n\u00e0y t\u1eeb b\u1ea5t c\u1ee9 \u0111\u00e2u. N\u1ebfu c\u00f3 s\u1ef1 c\u1ed1 x\u1ea3y ra v\u00e0 c\u00e1c m\u00e1y ch\u1ee7 c\u1ee7a CloudPhoto b\u1ecb t\u1ea5n c\u00f4ng. B\u1ea1n s\u1ebd kh\u00f4ng th\u1ec3 truy c\u1eadp v\u00e0o h\u00ecnh \u1ea3nh c\u1ee7a b\u1ea1n, v\u00e0 t\u1ea5t c\u1ea3 \u0111\u1ec1u b\u1ecb m\u1ea5t.\u0110\u00e2y l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng t\u1eadp trung. Trong khi \u0111\u00f3, h\u1ec7 th\u1ed1ng ph\u00e2n c\u1ea5p gi\u1ea3m thi\u1ec3u c\u00e1c t\u00ecnh hu\u1ed1ng n\u00e0y b\u1eb1ng c\u00e1ch t\u1ea1o ra c\u00e1c b\u1ea3n sao l\u01b0u d\u1eef li\u1ec7u v\u00e0 l\u01b0u tr\u1eef ch\u00fang \u1edf nh\u1eefng n\u01a1i kh\u00e1c nhau ho\u1eb7c b\u1eb1ng c\u00e1ch gi\u1eef c\u00e1c nh\u00f3m d\u1eef li\u1ec7u kh\u00e1c nhau tr\u00ean c\u00e1c m\u00e1y ch\u1ee7 kh\u00e1c nhau. \u0110i\u1ec1u n\u00e0 gi\u00fap h\u1ec7 th\u1ed1ng \u0111\u01b0\u1ee3c ph\u00e2n c\u1ea5p.Ph\u00e2n c\u1ea5p c\u0169ng c\u00f3 l\u1ee3i trong tr\u01b0\u1eddng h\u1ee3p b\u1ea1n c\u1ea7n duy tr\u00ec t\u00ednh to\u00e0n v\u1eb9n c\u1ee7a d\u1eef li\u1ec7u. V\u00ed d\u1ee5, gi\u1eef t\u1ea5t c\u1ea3 \u0111i\u1ec3m s\u1ed1 c\u1ee7a sinh vi\u00ean t\u1ea1i m\u1ed9t tr\u01b0\u1eddng h\u1ecdc tr\u00ean m\u1ed9t m\u00e1y t\u00ednh l\u00e0 m\u1ed9t v\u1ea5n \u0111\u1ec1 r\u1ea5t nguy hi\u1ec3m, b\u1edfi v\u00ec n\u1ebfu ai \u0111\u00f3 t\u1ea5n c\u00f4ng v\u00e0o m\u00e1y t\u00ednh \u0111\u00f3 v\u00e0 thay \u0111\u1ed5i d\u1eef li\u1ec7u, th\u00ec s\u1ebd kh\u00f4ng c\u00f3 c\u00e1ch n\u00e0o \u0111\u1ec3 b\u1ea1n c\u00f3 th\u1ec3 can thi\u1ec7p k\u1ecbp th\u1eddi. N\u1ebfu d\u1eef li\u1ec7u \u0111\u00f3 \u0111\u01b0\u1ee3c l\u01b0u tr\u1eef tr\u00ean 10 m\u00e1y t\u00ednh kh\u00e1c nhau, th\u00ec h\u1ec7 th\u1ed1ng s\u1ebd d\u1ec5 d\u00e0ng nh\u1eadn ra r\u1eb1ng m\u1ed9t trong nh\u1eefng m\u00e1y t\u00ednh \u0111ang c\u00f3 d\u1eef li\u1ec7u sai v\u00e0 s\u1ebd s\u1eeda l\u1ea1i d\u1eef li\u1ec7u \u0111\u00f3.\u0110\u1ed3ng ti\u1ec1n \u1ea3o Ethereum s\u1ebd ph\u00e1t tri\u1ec3n nh\u01b0 th\u1ebf\u00a0n\u00e0o?L\u1ed9 tr\u00ecnh c\u1ee7a Ethereum l\u00e0 r\u1ea5t l\u1edbn v\u00e0 \u0111\u1ea7y tham v\u1ecdng. Ngo\u00e0i n\u1ed7 l\u1ef1c \u0111\u1ec3 gi\u00fap ETH \u0111\u01b0\u1ee3c nhi\u1ec1u doanh nghi\u1ec7p ch\u1ea5p nh\u1eadn, c\u00f3 m\u1ed9t s\u1ed1 \u0111i\u1ec1u h\u1ee9a h\u1eb9n trong l\u1ed9 tr\u00ecnh t\u01b0\u01a1ng lai c\u1ee7a Ethereum.Th\u00eam nhi\u1ec1u DApp m\u1edbi. Ethereum l\u00e0 m\u1ed9t n\u1ec1n t\u1ea3ng \u0111\u1ec3 x\u00e2y d\u1ef1ng c\u00e1c \u1ee9ng d\u1ee5ng ph\u00e2n c\u1ea5p, t\u1eeb c\u00e1c h\u1ee3p \u0111\u1ed3ng th\u00f4ng minh \u0111\u1ebfn c\u00e1c d\u1ef1 \u00e1n crowdfunding. Gi\u1ed1ng nh\u01b0 m\u1ed9t m\u00e1y t\u00ednh ch\u1ec9 c\u00f3 th\u1ec3 ph\u00e1t huy hi\u1ec7u qu\u1ea3 c\u1ee7a n\u00f3 khi c\u00f3 c\u00e1c ph\u1ea7n m\u1ec1m h\u1eefu d\u1ee5ng, Ethereum ch\u1ec9 th\u00e0nh c\u00f4ng khi c\u00f3 c\u00e1c DApps ho\u1ea1t \u0111\u1ed9ng tr\u00ean m\u1ea1ng l\u01b0\u1edbi.Proof-of-Stake. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 h\u1ec7 th\u1ed1ng Proof-of-Importance \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng tr\u00ean NEM, Ethereum \u0111ang nghi\u00ean c\u1ee9u chuy\u1ec3n t\u1eeb ph\u01b0\u01a1ng th\u1ee9c khai th\u00e1c Proof-of-Work (POW) sang Proof-of-Stake (POS).POW l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng trong \u0111\u00f3 m\u00e1y t\u00ednh c\u1ee7a b\u1ea1n l\u00e0m vi\u1ec7c \u0111\u1ec3 m\u00e3 h\u00f3a cho m\u1ed9t s\u1ed1 c\u00e2u \u0111\u1ed1 gi\u00fap duy tr\u00ec s\u1ef1 to\u00e0n v\u1eb9n c\u1ee7a n\u1ec1n t\u1ea3ng Ethereum, v\u00e0 v\u00ed c\u1ee7a b\u1ea1n s\u1ebd \u0111\u01b0\u1ee3c th\u01b0\u1edfng m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng ETH cho nh\u1eefng n\u1ed7 l\u1ef1c \u0111\u00f3.POS ho\u1ea1t \u0111\u1ed9ng b\u1eb1ng c\u00e1ch kh\u00f3a m\u1ed9t ph\u1ea7n t\u00e0i s\u1ea3n ETH c\u1ee7a h\u1ecd \u0111\u1ec3 x\u00e1c minh m\u1ed9t ph\u00e2n \u0111o\u1ea1n giao d\u1ecbch tr\u00ean m\u1ea1ng l\u01b0\u1edbi Ethereum, t\u1eeb \u0111\u00f3 ng\u01b0\u1eddi d\u00f9ng s\u1ebd nh\u1eadn \u0111\u01b0\u1ee3c ETH (c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t ph\u1ea7n c\u1ee7a ph\u00ed giao d\u1ecbch \u0111\u01b0\u1ee3c thanh to\u00e1n). \u0110\u00e2y \u0111\u01b0\u1ee3c coi l\u00e0 m\u1ed9t h\u1ec7 th\u1ed1ng c\u00f4ng b\u1eb1ng h\u01a1n POW v\u00ec n\u00f3 d\u1ef1a v\u00e0o ng\u01b0\u1eddi d\u00f9ng c\u00f3 c\u1ed5 ph\u1ea7n trong n\u1ec1n t\u1ea3ng thay v\u00ec c\u00f3 th\u1ec3 mua m\u1ed9t lo\u1ea1i m\u00e1y t\u00ednh c\u00f3 s\u1ee9c m\u1ea1nh t\u00ednh to\u00e1n cao h\u01a1n ng\u01b0\u1eddi kh\u00e1c.Nh\u1eefng \u0111i\u1ec1u m\u00e0 b\u1ea1n c\u1ea7n ch\u00fa\u00a0\u00fdEthereum \u0111ang c\u1ed1 g\u1eafng \u0111\u1ec3 tr\u1edf n\u00ean l\u1edbn h\u01a1n v\u00e0 t\u1ed1t h\u01a1n so v\u1edbi Bitcoin v\u00e0 c\u00e1c lo\u1ea1i cryptocurrency kh\u00e1c.Ethereum mu\u1ed1n tr\u1edf th\u00e0nh m\u1ed9t c\u00f4ng c\u1ee5 c\u00f3 \u00edch cho x\u00e3 h\u1ed9i, kh\u00f4ng ch\u1ec9 \u0111\u01a1n gi\u1ea3n l\u00e0 m\u1ed9t lo\u1ea1i cryptocurrency v\u00e0 \u0111i\u1ec1u n\u00e0y c\u00f3 th\u1ec3 g\u00e2y ra m\u1ed9t s\u1ed1 v\u1ea5n \u0111\u1ec1. N\u1ec1n t\u1ea3ng n\u00e0y s\u1ebd kh\u00f3 duy tr\u00ec, ph\u00e1t tri\u1ec3n v\u00e0 \u0111\u01b0\u1ee3c ch\u1ea5p nh\u1eadn r\u1ed9ng r\u00e3i h\u01a1n so v\u1edbi c\u00e1c lo\u1ea1i cryptocurrency kh\u00e1c.Nh\u1eefng m\u1ee5c ti\u00eau l\u1edbn trong t\u01b0\u01a1ng lai. V\u1edbi m\u1ed9t l\u1ed9 tr\u00ecnh \u0111\u1ea7y tham v\u1ecdng, con \u0111\u01b0\u1eddng n\u00e0y ch\u1eafc ch\u1eafn s\u1ebd r\u1ea5t kh\u00f3 \u0111\u1ec3 v\u01b0\u1ee3t qua. X\u00e9t cho c\u00f9ng, m\u1ed9t s\u1ed1 n\u1ec1n t\u1ea3ng \u0111\u00e3 th\u1ea5t b\u1ea1i khi t\u1ea1o ra c\u00e1c t\u00ednh n\u0103ng thi\u1ebfu h\u1eefu \u00edch, kh\u00f4ng b\u00e1m s\u00e1t th\u1ef1c t\u1ebf v\u00e0 th\u01b0\u1eddng c\u00f3 nh\u1eefng t\u00e1c d\u1ee5ng ph\u1ee5 nguy hi\u1ec3m. Do v\u1eady, b\u1ea1n n\u00ean theo d\u00f5i s\u00e1t sao s\u1ef1 ph\u00e1t tri\u1ec3n c\u1ee7a Ethereum trong t\u01b0\u01a1ng lai.M\u1ed9t v\u00e0i nh\u1eadn \u0111\u1ecbnh v\u1ec1\u00a0EthereumVi\u1ec7c \u0111\u1ea7u t\u01b0 v\u00e0o Ethereum c\u00f3 n\u00ean hay kh\u00f4ng th\u00ec s\u1ebd t\u00f9y v\u00e0o suy ngh\u0129 v\u00e0 quan \u0111i\u1ec3m c\u1ee7a t\u1eebng ng\u01b0\u1eddi, vi\u1ec7c b\u1ea1n \u0111\u1ea7u t\u01b0 ch\u01a1i Ethereum c\u0169ng gi\u1ed1ng nh\u01b0 b\u1ea1n mua v\u00e0ng hay ch\u01a1i ch\u1ee9ng kho\u00e1n v\u1eady, n\u1ebfu b\u1ea1n bi\u1ebft ch\u1ecdn \u0111\u00fang th\u1eddi \u0111i\u1ec3m \u0111\u1ec3 \u0111\u1ea7u t\u01b0 th\u00ec kh\u1ea3 n\u0103ng mang v\u1ec1 l\u1ee3i nhu\u1eadn r\u1ea5t cao, b\u1edfi gi\u00e1 c\u1ee7a Ethereum th\u01b0\u1eddng xuy\u00ean bi\u1ebfn \u0111\u1ed9ng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 Bitcoin.H\u01a1n n\u1eefa, ng\u00e0y c\u00e0ng c\u00f3 nhi\u1ec1u qu\u1ed1c gia ch\u1ea5p nh\u1eadn \u0111\u1ed3ng ti\u1ec1n Ethereum nh\u01b0 m\u1ed9t h\u00ecnh th\u1ee9c thanh to\u00e1n h\u1ee3p l\u1ec7, th\u1eadm tr\u00ed c\u00f2n nhi\u1ec1u h\u01a1n c\u1ea3 \u0111\u1ed3ng Bitcoin. H\u1ea7u h\u1ebft c\u00e1c qu\u1ed1c gia kh\u00f4ng ch\u1ea5p nh\u1eadn Bitcoin v\u00ec kh\u00e2u qu\u1ea3n l\u00fd v\u00e0 b\u1ea3o m\u1eadt kh\u00f4ng an to\u00e0n tuy\u1ec7t \u0111\u1ed1i, nh\u01b0ng v\u1edbi Ethereum th\u00ec c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n \u0111\u00e3 gi\u1ea3i quy\u1ebft \u0111\u01b0\u1ee3c v\u1ea5n \u0111\u1ec1 \u0111\u00f3, gi\u00fap \u0111\u1ea3m b\u1ea3o c\u00e1c giao d\u1ecbch \u0111\u01b0\u1ee3c an to\u00e0n, tr\u00e1nh t\u00ecnh tr\u1ea1ng b\u1ecb hack.Th\u1ecb tr\u01b0\u1eddng c\u1ee7a Ethereum ng\u00e0y c\u00e0ng l\u1edbn m\u1ea1nh t\u1eeb v\u1ed1n h\u00f3a th\u1ecb tr\u01b0\u1eddng l\u00e0 25 tri\u1ec7u USD v\u00e0o n\u0103m 2014, \u0111\u1ebfn nay v\u1ed1n h\u00f3a c\u1ee7a ETH \u0111\u00e3 t\u0103ng l\u00ean h\u01a1n 30 t\u1ef7 USD. \u0110\u1ed1i v\u1edbi th\u1ecb tr\u01b0\u1eddng \u0111ang ph\u00e1t tri\u1ec3n nhanh nh\u01b0 Ethereum th\u00ec vi\u1ec7c \u0111\u1ea7u t\u01b0 v\u00e0o Ethereum d\u01b0\u1eddng nh\u01b0 l\u00e0 m\u1ed9t c\u01a1 h\u1ed9i r\u1ea5t ti\u1ec1m n\u0103ng \u0111\u1ec3 sinh l\u1eddi. N\u1ebfu b\u1ea1n l\u00e0 ng\u01b0\u1eddi m\u1edbi t\u00ecm hi\u1ec3u v\u1ec1 Ethereum c\u0169ng nh\u01b0 c\u00e1ch \u0111\u1ea7u t\u01b0 th\u00ec n\u00ean ch\u1ecdn h\u00ecnh th\u1ee9c \u0111\u1ea7u t\u01b0 \u201cL\u01b0\u1edbt s\u00f3ng\u201d, t\u1ee9c l\u00e0 mua ETH v\u00e0o khi gi\u00e1 r\u1ebb v\u00e0 b\u00e1n ra khi gi\u00e1 t\u0103ng cao. \u0110\u00e2y c\u0169ng l\u00e0 c\u00e1ch \u0111\u1ea7u t\u01b0 an to\u00e0n nh\u1ea5t hi\u1ec7n nay \u0111\u01b0\u1ee3c nhi\u1ec1u ng\u01b0\u1eddi l\u1ef1a ch\u1ecdn.Tham gia \u0111\u1ea7u t\u01b0 b\u1eb1ng Huobi li\u00ean k\u1ebft d\u01b0\u1edbi \u0111\u00e2yhttps://www.hbg.com/en-us/topic/invited/?invite_code=ukvs3", "responses": ""}, {"title": "Ethereum: Chain of liars &\u00a0thieves", "author_name": "WhalePanda", "link": "https://medium.com/@WhalePanda/ethereum-chain-of-liars-thieves-b04aaa0762cb?source=search_post", "post_date": "Aug 16, 2016", "readtime": "12 min read", "upvotes": "776", "content": "Ethereum: Chain of liars &\u00a0thievesWhalePandaBlockedUnblockFollowFollowingAug 16, 2016It\u2019s the story that keeps on giving. For all the facts without an opinion you should read my friend Jack\u2019s post, I helped him a bit finding the evidence and spreading the word about his article. His post describes everything without any bias and with plenty of proof. Mine will have a slight bias in a certain direction. I also want to give some extra credit to Reddit user DeviateFish_ who has been asking all the right questions and managed to get a lot of extra information.The title I gave to this article might sound harsh, but lets see what a \u201crespected\u201d Ethereum dev says about Ethereum Classic:And that while the only thief so far on the ETC chain was from the RHG.Short Recap of prior\u00a0actions:In case you aren\u2019t completely up to date this is what happened after the DAO was hacked:To avoid the \u201cattacker\u201d draining more Ether from the DAO a group of \u201cwhite hat hackers\u201d was formed which was called the Robin Hood Group (RHG). They \u201csecurely\u201d drained the DAO of the leftover funds and promised to keep it safe until after the hard fork.I hear you think now \u201cWow WP, that\u2019s awesome news, these guys are true heroes.\u201d Wait, we\u2019re just getting started.So the funds were in a child dao controlled by the RHG. That was it for then, the Ethereum foundation pushed the hard fork to bail out the Slockit and Ethereum devs, despite not having consensus at all, and that caused the Ethereum vs Ethereum Classic split. For the record: there has been some more information spread that many Ethereum devs didn\u2019t invest in the DAO. I\u2019m sure not all did, but many did, including Vitalik.The DAO in Ethereum was replaced by a simple withdraw contract, so everyone who had DAO could withdraw their Ether from it. Of course the people that paid extra Ether, because they invested in the DAO at higher prices, were still getting screwed over. And the Ethereum Foundation has made no effort into distributing that Ether fairly, but that\u2019s a whole different (shady) story. (They will probably use it for some \u201csound financial planning\u201d and dump it on investors)The DAO in Ethereum Classic is a different story. There everything basically stayed the same, the hacker is still working his way through the child dao\u2019s to secure his stolen funds. (I\u2019ve read somewhere that it would be around 2nd of September, not sure how accurate that is) But on this blockchain the RHG did still control all the Ether that they \u201csecurely\u201d drained.On Ethereum\u00a0Classic:There seems to be a lot of confusion and fud when it comes to Ethereum Classic and its values. In particular a group of dedicated Ethereum users have been spreading false information. I suggest that you read the Ethereum Classic Declaration of Independence. Those Ethtards like to use the \u201ccode is law\u201d-argument but they just don\u2019t get it or don\u2019t want to get it. I think this reddit comment describes it best:The perfect example of this is Emin. He\u2019s obviously a smart guy and I had a lot of respect for him until a while back, but he keeps bringing it up, trying to make a non-existent point about it. There are other Ethereum devs that are trying to make the same non-existent point, why would you even talk about it, unless you feel threatened or desperate?What happened with the Ether in the RHG child\u00a0DAO?Obviously there were people tracking the funds, a few days ago the Ether (ETC) from the RHG hack was withdrawn out of the DAO. Needless to say that this ETC belongs to the DAO investors who held the DAO tokens at the time of the fork, since they invested ETH (before the fork) in it, so from any legal point of view they are the owners and there is no way to argue against that.This is where it gets complicated. A lot of people already sold their DAO or withdrew the Ether (ETH) through the withdrawal contract on the ETH chain.A Reddit post appeared by Jordi Baylina:This all sounds very noble, he sounds like a reasonable guy right? Keep reading.What actually happened is that the RHG decided to go rogue and send the coins to different exchanges.As you can see in the picture above 2.9 million ETC ended up on Poloniex, some on Kraken, some on Bittrex and some on Yunbi. Poloniex and Kraken had the decency, professionalism and intelligence to immediately freeze the funds. Bittrex and Yunbi didn\u2019t, see pictures below:Both dumps occurred at the same time, 10th of August at 8 AM (GMT+2). These are market sells, which means you just dump a certain amount on the market and you don\u2019t care about the price\u2026 or you\u2019re trying to completely crash the price. No sane person who would want to maximize his money would ever do that.You see the price crash further after the market sells due to the uncertainty. Then another post showed up by Jordi, note this is only 2 days after the first one:I will not spoon feed you what he\u2019s actually saying, I\u2019m sure you\u2019re smart enough to read between the lines. TLDR; We market dumped the illegally obtained ETC to crash/kill ETC but failed and now we want the locked funds back, sorry.The 14th of August an article was published by Bity which is closely connected to the DAO. How closely? Well:So it\u2019s safe to assume they are working together to try to keep themselves out of legal trouble, which obviously won\u2019t work.The article itself is not even worth a read. It\u2019s filled with bullshit and lies, like I said on Twitter: it\u2019s even worse than a David Seaman article and I didn\u2019t think that was possible. Do note that they changed in the article from RHG to WHG to try to play down the involvement of the Ethereum foundation members in all of this. We will get to that later.Who is/was in the\u00a0RHG?Here it gets interesting, although some people at first were happily admitting they were in it, they are new denying any involvement. Obviously they are trying to cover everything up to not be legally responsible for a 15 million dollar theft, market manipulation and probably other legal consequences.Alex van de\u00a0Sande:Alex is part of the Ethereum foundation and from the start has been part of the RHG. He was very vocal on Twitter and Reddit about this.This of course proves that there are multiple other people from the Ethereum Foundation involved, not just one other person.Recently, after the hard fork and after the funds became available he started saying he had nothing to do with it anymore.The most interesting part of his denial post is this:He still didn\u2019t get the \u201ccode is law\u201d, he\u2019s basically saying that Ethereum Classic should be grateful. Right.Lefteris Karapetsas:Lefteris is an Ethereum Core developer and was part of the Slockit scam\u2026 sorry meant to type \u201cteam\u201d.He also send this DM to someone on Reddit:Griff Green:Griff Green was part of the Slockit team, he was the community manager. Yeah the guy that said this in their slack:He was directly involved with the RHG.And he also send a DM on Reddit to the same guy:He was probably just a cheerleader or secretary/personal assistant though, since he has no real skills that could be useful in this situation.Stephan \u201cThe Tool\u201d\u00a0Tual:He was part of the original Ethereum team, then left and is now involved with the Slockit team. He posted the following interesting post on Reddit:This means that the list of people we have confirmed here are just the tip of the iceberg. The others were more careful about publicly speaking out about it.Everyone was acting as individuals:This was a phrase that they kept repeating over and over. Was it really?Why attack Ethereum\u00a0Classic?Let me get back on track and talk about Ethereum Classic. We know that the real reason for the hard fork was bailing out Slockit and the Ethereum Foundation members. The hard fork saved people from the Slockit team from huge lawsuits where they would definitely end up in jail for. The hard fork was then also celebrated as a huge victory by the Slockit team members and the Ethereum Foundation.I\u2019ve talked about the rise of Ethereum Classic in another post, I won\u2019t go into details, but since the fork was really not a success and Poloniex added Ethereum Classic, which in every way is now superior to Ethereum since it didn\u2019t have a bail out, the Ethereum developers got very angry and frustrated.There is this well known quote from Gandhi:First they ignore\u00a0you:Remember that before the fork the Ethereum Foundation told every exchange that if there would be a split, the 2nd chain would be worthless.Then they laugh at\u00a0you:These were all comments made in the first few hours after Poloniex listed ETC. Since we\u2019re now 3 weeks later and it\u2019s still trading and has more volume as ETH\u2026 You can imagine how desperate they are getting.Then they fight\u00a0you:A week or so ago they started with a passive aggressive attack on Ethereum Classic where many Ethereum devs tweeted they would only work on ETH.Around the same time the Ethereum Classic funds from the DAO were available, you suddenly saw everyone denying they had anything to do with it. This is clear misdirection. Do you believe that the Ethereum foundation and Slockit devs weren\u2019t behind this attack while being involved with the RHG with plenty of proof in the first place?Let me start by saying that if you read this entire post you know that the \u201ccode is law\u201d argument is about the fact that a blockchain should be immutable. Ethereum is no longer a blockchain, it\u2019s an equivalent of a SQL database, even though someone just edited the Wikipedia page to remove the most important part of the definition of a blockchain.It doesn\u2019t mean that the hacker should be allowed to sell his coins on an exchange\u2026 Or that the Ethereum Classic supporters endorse theft. Theft is when you take something that doesn\u2019t belong to you, exactly what the RHG did. It doesn\u2019t allow you to edit the blockchain just because you feel like it.So after denying everything, suddenly the funds got transferred and they were trying to dump it on the market, trying to crash the ETC market. They came up with those crap posts full of lies which I referenced earlier. I would love to see where the community pressured them into dumping ETC for ETH.One of the funniest things though was that on a new blog 3 important Ethereum (Foundation) devs suddenly jumped in and started commenting. If that isn\u2019t a red flag\u2026Do you believe that the benevolent dictator who was in the same chat with RHG members wasn\u2019t aware of what was happening? Does Vitalik really think we\u2019re that naive? I guess he can still deny it, if people try to sue him.credit to Dark\u00a0PillOne important line from Jordi\u2019s first post was this one:This implies that they wanted to support Ethereum projects\u2026 Or does it mean that it would end up in the Ethereum Foundation\u2019s investment fund? The latter seems to be the more reasonable assumption.Then you\u00a0win:The last step will come soon. Would you still invest in a SQL database run by thieves and liars? I wouldn\u2019t. I would want my project to be on a (immutable) blockchain.What should happen with the recovered ETC being held by Poloniex and other exchanges? I see 4 possible scenario\u2019s\u00a0:Distribute the ETC to DAO-C holders (people who were holding DAO at the time of the hard fork). This will be extremely difficult and would require a lot of extra work from exchanges. Even though this might be the most fair scenario, I don\u2019t know how likely it is.Burn all the tokens, making ETC more valuable, decreasing the supply.Distribute the ETC tokens to people who still have DAO.Give all the tokens to an Ethereum Classic Foundation for development of the network/PR/projects.Bity can\u2019t be trusted, as I\u2019ve shown proof before, they are closely linked with the Slockit group who tried to kill the ETC chain. Under no circumstances should they receive the ETC back.This was the only useful information from the Bity post. I don\u2019t trust them, but if they are serious\u2026 Good luck. The price will be upwards of 0.01 BTC if you\u2019re really going to try that.Bonus chapter: The Inside\u00a0JobI\u2019ve mentioned the Reddit user DeviateFish_ in the intro. He has a very interesting github page with a full analysis of the DAO contract called: \u201cThe DAO: A contract engineered for failure.\u201d You should read it, but let me just copy the conclusion here:We have all heard the \u201cconspiracy\u201d theories that the DAO hack was an inside job. Most were without proof, this is circumstantial of course, but highly suspicious and it does raise more questions than it answers. I hope the mystery will get solved at one point.Once again I urge you to read Jack\u2019s post if you haven\u2019t. It\u2019s well worth the read.I know it was a long post, but there is so much (mis)information going around. That\u2019s it for me for today.", "responses": "16"}, {"title": "Beginner\u2019s guide to blockchain/Ethereum (1)\u200a\u2014\u200aBuild a smart contract on a private\u00a0network", "author_name": "\u674e\u5a77\u5a77 Lee Ting Ting", "link": "https://medium.com/taipei-ethereum-meetup/a-complete-guide-on-building-a-smart-contract-on-a-private-net-in-ethereum-726851c7c044?source=search_post", "post_date": "Jun 29, 2017", "readtime": "6 min read", "upvotes": "709", "content": "Beginner\u2019s guide to blockchain/Ethereum (1)\u200a\u2014\u200aBuild a smart contract on a private\u00a0network\u674e\u5a77\u5a77 Lee Ting TingBlockedUnblockFollowFollowingJun 29, 2017Overview & IncentiveSince many tutorials, including the official tutorial on ethereum.org, have some errs(ex. the updated version of geth removed the solidity compiling function) which make it harder for beginners like me to get started, I decided to write this tutorial in the hope of expanding the Ethereum community.I\u2019m using mac. If you encounter any problem, please kindly let me know in the comments so I can update it accordingly:)Open source tools & language used:Solidity: smart contract programming languagegeth (version 1.5.9): CLI for running ethereum nodebrew: package manager for MacOS.Install it by typing this command in terminal:/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"Start coding!As starting from geth version 1.6.0, compiling solidity is no longer available, we cannot install it directly using brew(only the newest version package is provided there). Here we use geth version 1.5.9 and build it from source code.Download Source code (tar.gz)In terminal:cd \u201cpath of the file you just downloaded\u201d// in Mac, you can simply drag the folder to console to get the pathmake gethThis will generate an executable file in the \u201cyour current directory\u201d/build/bin folder which can be moved to wherever you want to run it from. The binary is stand alone and doesn\u2019t require any additional files.(Reference: https://github.com/ethereum/go-ethereum/wiki/Installing-Geth#build-it-from-source-code )2. Then, create alias:echo \"alias geth159='your_folder_path/build/bin/geth'\" >> ~/.bashrcIn my case, it is /Users/tina/Desktop/go-ethereum-1.5.9/build/bin/gethTo make the changes affected immediately:source ~/.bashrcTo make what you editted in ~/.bashrc available upon every loginecho \"source ~/.bashrc\" >> ~/.profileNow you can type geth159 whenever you want to launch geth\u00a0:)3. Install Solidity compilerbrew install solidity4. launch your private netFirst create a folder to store your blockchain datamkdir privchainUse geth to launch itgeth159 --rpc --rpcaddr 127.0.0.1 --rpcport 8545 --dev --datadir privchain(Reference: https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options, https://stackoverflow.com/questions/33826018/in-ethereum-what-is-a-private-testnet-why-would-i-want-it-and-how-do-i-set-it )Should see something likeINFO\u2026. IPC endpoint opened: /Users/tina/privchain/geth.ipcINFO\u2026.HTTP endpoint opened: http://127.0.0.1:8545And if you open a new console and cd privchain then ls\u00a0, you can see the originally empty dir is now having geth, geth.ipc, and keystore5. Keep that Ethereum node running and open a new terminal. Use \u201cgeth attach\u201d to connect to the node and open geth consolegeth159 attach ipc://Users/tina/privchain/geth.ipc // use your own ipc url here!6. Now use the api commands as specified here https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console#personallistaccounts(In geth console)personal.listAccountsoutput: []personal.newAccount('') // you can enter your password like newAccount(\u2018password_ya\u2019)output: [0x\u2026\u2026.] // your newly created account address.Note that every time a new account is created, you should see\u00a0.\u201d..New wallet appeared..\u201d In the console where you opened your private netpersonal.listAccounts // just to make sure you hv made the account successfullyoutput: [0x\u2026\u2026\u2026]7. Use the ethereum js api as specified here https://ethereumbuilders.gitbooks.io/guide/content/en/ethereum_javascript_api.html(in geth console)web3.eth.coinbase // This property is read only and returns the coinbase address where the mining rewards go to.output: [0x\u2026\u2026\u2026] // the output should be the same as your newly created account address, cause it takes the first account you created as default value8. Create your smart contract!source = \"contract test { function multiply(uint a) returns(uint d){return a * 7;}}\"9. Make sure your solidity compiler is installedweb3.eth.getCompilers() // the output should be [\"Solidity\"]10. Compile your codecode = web3.eth.compile.solidity(source)The output(the \u201ccode\u201d you just created) is like a json object. The highlighted part is your bytecode, which you will need to create a smart contract, and the abi array, respectively.{<stdin>:test: {    code: \"0x60606040523415600b57fe5b5b60918061001a6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c6888fa181146039575bfe5b3415604057fe5b6049600435605b565b60408051918252519081900360200190f35b600781025b9190505600a165627a7a723058206a8cbef13138690601a279c73e208f9dcf42e4678d860038475fe555599593d60029\",    info: {        abiDefinition: [{...}],        compilerOptions: \"--combined-json bin,abi,userdoc,devdoc --        add-std --optimize\",        compilerVersion: \"0.4.11\",        developerDoc: {            methods: {}         },        language: \"Solidity\",        languageVersion: \"0.4.11\",        source: \"contract test { function multiply(uint a) returns(uint d){return a * 7;}}\",        userDoc: {            methods: {}        }    }}}*What is abi? You can see this as an api for machines as explained here.When you write source code, you access the library though an API. Once the code is compiled, your application accesses the binary data in the library through the ABI.11. Create a contract object by its abiMyContract = web3.eth.contract(code[\"<stdin>:test\"].info.abiDefinition)(Official document on how to create a contract: https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethcontract )12. Check if you have a default coinbase account (to which your mining reward goes) with etherFirst set your coinbase address as account1account1 = web3.eth.coinbaseThen Check its balanceweb3.eth.getBalance(account1)If the output is larger than 0, go on to the next step:Otherwise, start mining to get some ether in it!miner.start()You should see the mining in progress in the other terminal where you opened your private netStop when you feel like having sufficient funds\u00a0;pminer.stop()Check your balance againweb3.eth.getBalance(account1)13. Unlock account to enable it to send transactions (In this case, we have to pay the gas price for contract deploy). Here we use account1.personal.unlockAccount(account1, '') // you can replace '' with the password you set previously14. Next, init the contract using the compiled code. In this case, it is code[\u201c<stdin>:test\u201d].codeYou can also use other ways (ex. brower-solidity) to compile the contract and get this code. Here, replace the contract code with our \u201csource\u201d contract code, and click \u201ccontract details\u201d at the bottom-right corner and you would be able to see the same bytecode.*Note: browser solidity cannot work on safari. You can use chrome instead.*Note: you can also set the contract to a previous one using the address of the contract you created before (contractInstance = MyContract.at(\u201caddress\u201d);)bytecode = code[\"<stdin>:test\"].codeEstimate how many gas you will need to deploy this contractweb3.eth.estimateGas({data: bytecode})15. Deploy contract and set callback function for our better understanding\u00a0:)contractInstance = MyContract.new({data: bytecode gas: 1000000, from: account1}, function(e, contract){if(!e){if(!contract.address){console.log(\"Contract transaction send: Transaction Hash: \"+contract.transactionHash+\" waiting to be mined...\");}else{console.log(\"Contract mined! Address: \"+contract.address);console.log(contract);}}else{console.log(e)}})Note: The value of param \u201cgas\u201d can be anything higher than the estimated gas costsNote: you may have to unlock your account1 again here.Now you should seeIn this console:Contract transaction send: Transaction Hash: \u201cyour_transaction_hash\u201d waiting to be mined\u2026In the other console for starting the private net:\u2026 created \u201cyour_transaction_hash\u201d16. Your contract is now waiting be mined. You should see \u2018Contract mined!` soon after the mining starts. After that, you can stop mining.miner.start()After you seeContract mined! Address: 0xf1bc128edf9d7d4a7d567b50c1d8080cf58ef068Ctrl+c to go back to geth console and typeminer.stop()Note: Ctrl+C is to interrupt any process return to the simple console mode. Ctrl+D is to exit the console17. Last, check if your contract is created successfullyeth.getCode(contractInstance.address) // the output should be the same as your bytecode18. Call our contract functioncontractInstance.multiply.call(6) // replace 6 with any unsigned intOutput: 42Note: call() is a local invocation of a contract function that does not broadcast or publish anything on the blockchain. The command \u201ccontractInstance.multiply(6)\u201d will not work.(Reference: https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call)Learn more\u00a0through\u2026Another great guide on the greeter tutorial:https://samsclass.info/141/proj/pEth1.htmCovers how to make a contract available to other machines on the same private network and how to delete a contract2. Blockchain visualization and charts:https://etherscan.io/Wrap upNow you know how to set up a private network, mine ethers, compile and run smart contracts in Solidity.This is actually my first article and first tutorial. Share it if you like it. I\u2019m open to any suggestions! Thank you:)", "responses": "9"}, {"title": "How INFURA Solves Ethereum\u2019s Other Big Scaling Challenge", "author_name": "ConsenSys", "link": "https://media.consensys.net/how-infura-solves-ethereums-other-big-scaling-challenge-b7c4e635121f?source=search_post", "post_date": "Nov 16, 2017", "readtime": "6 min read", "upvotes": "745", "content": "How INFURA Solves Ethereum\u2019s Other Big Scaling ChallengeConsenSysBlockedUnblockFollowFollowingNov 16, 2017Founder Michael Wuehler talks infrastructure, nodes, and the ethics of token launch infrastructure demandsAs concepts for blockchain-based projects grow more far-fetched and fantastic by the week, it\u2019s Consensys spoke INFURA\u200a\u2014\u200afounded by Herman Junge, E.G. Galano, Maurycy Pietrzak, and Michael Wuehler\u200a\u2014\u200athat has established itself as the industry leader in addressing the very real, but rarely discussed infrastructural challenges posed by the growing pains of the Ethereum network and its current launch-heavy calendar.INFURA is a service that helps token sales and decentralized apps handle the influx of read-activity traffic that comes hand-in-hand with a successful token launch or running a decentralized application on the Ethereum world computer. Although an immensely important aspect of the Ethereum protocol, read-only requests are underserved in terms of infrastructural support, and this has already shown to be highly problematic. In finding solutions for the mercurial traffic patterns that play out on the Ethereum network every day, INFURA is positioning its service and technology as an essential consideration when launching a token or engaging with the network en masse.We spoke with INFURA founder Michael Wuehler about infrastructure, nodes, and the ethics of token launch infrastructure demands\u2026You\u2019ve referred to INFURA solving the \u2018other scaling debate.\u2019 What does that mean?When discussing the scaling of Ethereum, most people usually gravitate to thinking about transactions per second, which is the theoretical limit of the Ethereum protocol to process transactions during any second. It\u2019s currently only able to do about 20 transactions per second. VISA can do 400,000 a second, for example. If you think of the Ethereum blockchain as a database: The kinds of transactions I just discussed are \u201cwrites\u201d onto the database, inputting data to the blockchain for example through a call to an Ethereum smart contract. That\u2019s not the problem that INFURA solves. That problem is being researched and solved by some very smart people\u200a\u2014\u200aVitalik Buterin, Vlad Zamfir, Karl Floersch and others at the Ethereum Foundation.The problem that INFURA addresses is \u201cread\u201d activity, which is the other side of the equation. Most database activity through a typical web interface application is reading. The example I like to use: If you open up Facebook on your phone. Every little bit of data you see is read from the database. Every once in a while, you may hit the \u2018Like\u2019 button, and that\u2019s a write-activity. Similarly to traditional databases, read activities far outweigh the write activity on the Ethereum blockchain. The Ethereum blockchain can currently handle up to half a million write activities per day, but as part of our work at INFURA, we\u2019ve seen read activity currently at 1.7 billion read requests a day. This can be anything from a dApp looking up some piece of data, similar to a block explorer, or someone checking out Etherdelta via Metamask.Traffic throughINFURA from August\u200a\u2014\u200aNovember\u00a02017.What\u2019s the problem with how read activity is handled on the Ethereum network now?An individual Ethereum client or node has its own capacity to handle incoming requests. The way it is currently done is that most of those requests get transacted through what\u2019s called the JSON-RPC API Service. You send a request to the endpoint and the client that gets that request will read into its chain data and serve the answer back. In an instance like an token launch, they do reach capacity, and nodes can get overloaded, slowing down the whole network. Worse, there are denial of service attacks\u200a\u2014\u200afor example, if some malicious actor wanted to cripple a single node, they could overload it with read requests, degrading service on the node for twenty minutes while it runs that query.At INFURA, we\u2019re scaling horizontally. We support a large cloud of Ethereum clients that distribute incoming requests across our network of many nodes, filtering and diffusing traffic to a number of shared nodes that can handle the load. Using a current web analogy: INFURA is like Cloudflare or Akamai that helps to scale for short periods of time when you have a huge burst of traffic. Further, we\u2019ve written lots of software\u200a\u2014\u200amuch of which is our primary value proposition\u200a\u2014\u200athat ensures that node overload and DDoS attacks are minimized.How do token sales play a role in all of this?During a token launch, what happens is that there\u2019s a specific time or block that the sale opens. At that point, thousands of people all rush to the launch site to buy their tokens. There\u2019s a crush of traffic that often slows down the network as a whole and causes major problems for the entire worldwide community. One launch page is usually making several hundred read requests per second per user to Ethereum. Multiply that by 10,000 people who show up, and all of the sudden, you\u2019re getting millions of requests to the blockchain. There are many token sales happening at any one time, and that\u2019s what\u2019s contributing to our 1.7 billion or so requests a day. The infrastructural demands of raising a $20 million crowd sale are not free. Many of the new project teams think you only need a developer and URL to make a bunch of money, but there\u2019s a missing constant that nobody takes into account and that\u2019s infrastructure.Can you explain how your partnerships with token launches function?We recently worked with the 0x Project when they were planning their token launch. 0x is an example of a great team, willing to partner and work together for a smooth experience for their users and investors. We assessed their needs and built out additional capacity that we were able to dedicate to them. Their launch proceeded really smoothly. In fact, they even wrote a blog post about it\u200a\u2014\u200a\u201cTalk to INFURA, Really\u201d was their recommendation. RadarRelay also has been a great partner for their token launch. They told us that they tried to build out their own infrastructure, spun up lots of different nodes, and had to dedicate somebody to manage them, which represents real expenses that they ultimately were able to offload to INFURA.Michael Wuehler introduces INFURA at FinTech Week 2017How do you see this playing out long-term?Right now, everybody uses us as a shared service. Over time, we\u2019ll be a paid service, a scaled infrastructure available and ready to use with nodes all over the world. Long-term, dApps and projects will likely see the value of a service like INFURA to be the gateway to the Ethereum blockchain. Right now, INFURA is the only service offering this. My personal feeling is that the legitimate teams will understand and appreciate this. It\u2019s the scam teams that may ignore it. Seeing how a project addresses their scaling needs and their responsibility to the global community by not clogging up the network will be an indicator of their legitimacy. Eventually, when the projects actually build what they\u2019re claiming they will, and there are more applications and solutions than simply launches, the scaling needs aren\u2019t going to change. We\u2019re going to continue to try to scale, but we\u2019re also trying to come up with the right economic model.With this in mind, do you think token launches have a moral or ethical responsibility to manage the stress they put on the infrastructure?Absolutely. That\u2019s one of the misconceptions that got out there with Ethereum\u200a\u2014\u200athat the network is free to use. There are real costs and consequences to using the network, and there are things everyone should be doing to optimize code and arranging for having the right infrastructure for user experience and the community as a whole. When a team is planning their launch, they\u2019ll have to consider planning their infrastructure in addition to writing smart contracts, designing tokens, creating legal entities. Right now, there are a lot of frustrated users, but not a lot of accountability once teams have gotten their money. INFURA is a way to be accountable.Like this piece? Sign up here for the ConsenSys weekly newsletter.DISCLAIMER: The views expressed by the author above do not necessarily represent the views of ConsenSys AG. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum,please visit our website.", "responses": "3"}, {"title": "11 Ways Ethereum Can Benefit Enterprise", "author_name": "ConsenSys", "link": "https://media.consensys.net/11-ways-ethereum-can-benefit-enterprise-aac6d798a9fb?source=search_post", "post_date": "Oct 18, 2018", "readtime": "7 min read", "upvotes": "670", "content": "11 Ways Ethereum Can Benefit EnterpriseHere\u2019s how Ethereum blockchain solutions can future-proof business networks.ConsenSysBlockedUnblockFollowFollowingOct 18, 2018\u201cThe large organization has to learn to innovate, or it will not survive.\u201d \u2013Peter\u00a0DruckerThis is the first article in a ten-part series on Enterprise Ethereum. Part 2, \u201cEnterprise Ethereum Use Cases and Applications,\u201d will discuss the major sectors that are currently deploying Ethereum blockchain solutions to address industry problems.What Enterprises NeedEnterprises have very different needs from individual users on a peer-to-peer network. Enterprises need to manage sensitive data in high volume, track quality, and hold themselves accountable to safety and regulatory standards in their industries, be it issuing IDs, executing trades, tracking cargo containers, or labeling pharmaceutical products. Security, certainty, and accountability at scale are paramount for a high-performance enterprise. Enterprise needs ultimately fall into four categories:Permissioning. Enterprise use cases often require that only authorized parties can join the network, and that participants have different read, access, and write roles.Privacy. Specific transaction data\u200a\u2014\u200aproduct name, quantity, price, address, personally identifiable financial information, etc.\u200a\u2014\u200ashould be withheld from or made available to network participants depending on their roles. A freight forwarder, for example, might not need to know the contents of a certain shipping container, but only that the container has arrived. Banking regulations also restrict who may have access to transaction data.Performance. Enterprises must have the infrastructure to process thousands of transactions per second and tolerate periodic surges in network activity. One sales order with a thousand lines, for example, triggers a cascade of transactional events. In today\u2019s networked economies, enterprises must be able to collect, validate, and publish an ever-increasing volume of diverse transactions.Finality. Institutions transferring large amounts of money need certainty about the outcome of transactions. Funds must be good, and payments must be final.What Ethereum Offers: Facts and\u00a0BenefitsEthereum launched in 2015 as a much more extensible and performant version of the Bitcoin payment system\u2019s underlying blockchain technology. The value of a blockchain is the native certainty of the network: participants can establish a trusted and immutable record of transactions without the need for intermediaries. The decentralized architecture of a blockchain\u200a\u2014\u200amultiple distributed nodes simultaneously running the software and building the record\u200a\u2014\u200aensures that the certainty of the network is never compromised.The power of the Ethereum blockchain is its programmability: agreements are embedded in the code so that transactions automatically execute. These digital agreements, or \u201csmart contracts,\u201d can have limitless formats, conditions, and even call on other contracts, making Ethereum useful not just for payment settlement, but for arbitrating transactional events in trade finance, supply chains, government registries, energy grids, real estate, law, and many other sectors.Stability and Popularity of the Ethereum BlockchainEthereum has proven to be highly robust against attack while also supporting a diverse range of applications. It is popular for both public and private networks. Here are the facts of the public mainnet today:14K+ live nodes40M+ unique addresses10B daily API requests served by Infura$1.5B+ daily trading volume1,900+ decentralized applications (dApps)94% of top 100 blockchain projects are built on Ethereum250K+ developers (more than any other blockchain community)500k+ daily transactions (more than all other blockchains combined)", "responses": "3"}, {"title": "You Can Make Money on These 12 Live Ethereum Dapps Today\u200a\u2014\u200aHere\u2019s\u00a0How\u2026", "author_name": "ConsenSys", "link": "https://media.consensys.net/you-can-make-money-on-these-12-live-ethereum-dapps-today-heres-how-dcdf391430d0?source=search_post", "post_date": "Jan 19", "readtime": "5 min read", "upvotes": "944", "content": "You Can Make Money on These 12 Live Ethereum Dapps Today\u200a\u2014\u200aHere\u2019s\u00a0How\u2026Ethereum dapps are pioneering the way towards open finance and the future of\u00a0work.ConsenSysBlockedUnblockFollowFollowingJan 19Open finance\u200a\u2014\u200aalso referred to as decentralized finance (#DeFi)\u200a\u2014\u200awas a common narrative throughout 2018 and will be increasingly popular throughout 2019 as the Ethereum ecosystem continues to expand.One of the fundamental promises of the open/decentralized finance movement is the potential to redistribute wealth, provide entry points for the unbanked, and achieve financial freedom. Blockchain technology underpins the goals of open finance through the use of smart contract platforms, tokenization, asset ownership, and various other decentralized applications. These dapps are opening up the financial system to create a more merit-based economy\u200a\u2014\u200awhere individuals are rewarded based on skills, for the ability to make accurate predictions, and by lending or staking their personal capital.Below is a list of Ethereum applications and platforms you can use right now. Most are accessible directly through their websites as demos, betas, or fully-fledged releases.Bounties and Freelance Work1. GitcoinThe easiest way to monetize or incentivize work in open source software. Contributors can explore existing bounties(projects or tasks) and get started working. After work gets reviewed and approved contributors get paid for their services. Since its launch in November 2017, Gitcoin has helped 305 funders reach an audience of 17,414 developers. Gitcoin has facilitated 2,688 complete transactions to 763 unique coders.2. Bounties\u00a0NetworkCreate bounties for any task, easily transact in ETH or ERC-2O tokens. The Bounties Network empowers humans to incentivize and self-organize, from freelancing to grassroots social action, and anything in between. The bounties network has already generated over $400,000 in total bounties.3. CentAllowing people to earn money from anywhere for the work they do, Cent is founded on the principal idea that social networks, as they exist are essentially content networks. Facebook, Snapchat, Instagram give little value to the many content creators and the team at Cent believes they can challenge this status quo. Users call themselves \u201cCentians\u201d and refer to \u201ccenting\u201d something as putting a bounty on it.4. EthlanceFind work and get compensated in digital currencies. The Ethlance platform takes no cut and doesn\u2019t charge any fees for the service. Anyone can apply for, or create, an unlimited number of jobs ranging from designing websites, ghostwriting articles, or joining discord chats.Lend or Stake Crypto to Earn\u00a0Crypto5. MakerDAO\u00a0CDPMakerDAO CDP (Collateralized Debt Position) enables the generation of DAI stablecoins against the collateral(ETH) that remains locked in a smart contract until the individual pays back the original amount of DAI borrowed. Once the DAI is repaid, plus a small fee, you can withdraw your collateral (initial ETH that was locked up).As of today, 1.80% of the total Ether supply is currently locked up in MakerDAO CDP smart contracts. Thanks to Mike McDonald, MakerDAO tools provide data and current insights into the MakerDAO system and CDP contracts. Ether can also be added to MakerDAO CDPs by other individuals which creates a wonderful list of possibilities.6. ETHLendLenders and borrowers are connected via smart contracts safely and securely without the need for intermediaries. The platform has a native token LEND, that if used on the platform as the medium of exchange grants access to zero-fee lending. Cryptoassets used as collateral for loans are stored in a non-custodian depository smart contract on the Ethereum blockchain to obtain high network security. ETHLend is a subsidiary of Aave and the parent company recently opened an office in London.7. Compound\u00a0FinanceCompound Finance is an open-source protocol for algorithmic, efficient money markets on the Ethereum blockchain. Most cryptoasset sit idle on an exchange and wallets, yielding zero interest and bringing little benefit to the community. Assets are supplied to the compound finance protocol as opposed to another user, and interest rates are adjusted based on the supply and demand of available assets.8. DharmaDharma is a suite of smart contracts and developer tools that make it possible to borrow and lend crypto-assets on Ethereum. The Dharma website has a lengthy list of tutorials that allow people to approve ERC721 tokens for collateral in loans as well a relayer starter kit.Prediction Markets9. GnosisGnosis Olympia, the alpha version of the prediction market provides an environment for participants to try out trading and win GNO tokens as a reward for successful predictions. The Gnosis team has also created an ongoing developer contest, Gnosis X\u200a\u2014\u200aa recurring challenge designed to encourage developers to build prediction market applications on Gnosis. Winners of the Gnosis X contest can receive up to 100k USD in GNO tokens.10. AugurAugur is a decentralized application running on Ethereum that allows individuals to stake crypto(ETH) to make predictions such as who will win the next election, the price of an individual cryptocurrency, or hedge against disaster.11. PdotindexA Pdot index is a price-weighted index derived from a basket of speculative positions in various decentralized prediction markets on Augur (similar to the Dow Jones Industrial Average for U.S. stocks). New derivatives, in this case, based on A-List celebrities have the potential to bring about new markets that change how we perceive value. The Lebron James index is based on individual stats and Laker\u2019s wins, while the Ariana Grande index portfolio uses social media followers and billboard rankings of new songs.12. VeilVeil is a peer-to-peer prediction market and derivatives platform built on top of Augur, 0x, and Ethereum. It utilizes the 0x protocol to enhance the trading process by minimizing the number of transactions that are required in the market creation and cancellation process. Veil is also introducing a feature known as \u201cinstant settlement\u201d which eliminates the need to wait for market finalization on Augur. Veil recently launched on the Ethereum mainnet on January 15, 2019.Coming Soon!ErasureThe platform will allow anybody to upload predictions, stake them with NMR, and build a track record that everyone will trust. It solves the market collapse problem for prediction feeds and allows a marketplace for predictions to form.If you know about a live dapp on Ethereum that isn\u2019t on this list comment below! #DeFi", "responses": "6"}, {"title": "How to Save Your Ethereum DApp Users\u2019 From Paying Gas for Transactions", "author_name": "BlockChannel", "link": "https://medium.com/blockchannel/how-to-save-your-ethereum-dapp-users-from-paying-gas-for-transactions-cfc665891ab4?source=search_post", "post_date": "Apr 17, 2018", "readtime": "6 min read", "upvotes": "936", "content": "How to Save Your Ethereum DApp Users\u2019 From Paying Gas for TransactionsAnd Instead, You as the DApp Owner Pays For\u00a0ItBlockChannelBlockedUnblockFollowFollowingApr 17, 2018Crosspost: This post was originally published, here. And was posted with the author\u2019, Mahesh Murthy\u2019s permission. [Learn more at Zastrin.com. Bonus: Use code \u201cBlockChannel\u201d to save 50% off all courses.]One of the friction points for Ethereum dapp adoption is that the users have to a pay gas (transaction (txn) fee) to get their transactions recorded on the blockchain. For example, I have a simple voting dapp that lets anyone vote for candidates, and the votes are stored on the blockchain. A user who wants to record her vote on the blockchain has to pay a transaction/gas fee. This is not ideal because as a dapp owner, you are expecting your application users to have Ether to pay for gas when all they want to do is perform a simple action which has nothing to do with transferring money. But if the transaction needs to be executed on the blockchain, there is no other option but to pay the fee. What if there was a way for users to execute transactions securely (vote for a candidate, as in our example) and let someone else (potentially the contract owner) record the transaction on the blockchain and pay for it themselves?Thanks to this tweet from John Backus, I had just enough information to help me implement such a solution for my voting dapp.I wanted to share details on how I implemented this solution for my simple dapp so more people can adopt this technique in their own dapps and could hopefully improve upon it. This post covers the following:A very high level overview of the public key cryptography and digital signatures, which are key to understanding this solution.The solution details and the new application flow.Implementation details (frontend js and Solidity contract code).Discuss potential issues and enhancements.Digital SignaturesFor this solution to make sense, you will need a basic understanding of how digital signatures work in cryptography. Feel free to skip this section if you know public key cryptography. I will try to explain the concept of public/private keys and digital signatures at a very high level but I highly recommend learning more in detail\u200a\u2014\u200awikipedia is a good place to start.Public key cryptography is a cryptographic system where you have 2 keys\u200a\u2014\u200apublic key (Pu) and a private key(Pr). You give out your public key to the entire world and keep the private key to yourself. Ex: Your Ethereum address is a public key (It\u2019s actually derived from public key, but for this exercise, let\u2019s just think of it as public key) and your private key is stored either in your browser, or on your phone/computer. As you know, for someone to send you Ether, they just need to know your public (account) address. However, only you can access the funds you own because you are the only one who knows your private key.Public key cryptography has algorithms that let you encrypt, decrypt, sign and verify messages using your pair of keys.Let\u2019s see what signing and verifying a message means through an example. Let\u2019s say user Kim has a pair of public/private keysPu = \u201c0x44ac12c1e3dfd8edaf83b6f65918229d5279a6f5\u201dPr = \u201cdbc226043e390cf39280e5edfd418d7ad61931c76509270867d300f110c46506\u201dTo sign a message, Kim executes a function sign(\u201cVote for Alice\u201d, Pr) which outputs an alpha-numeric stringsignature = 0x9127112de0033555c7f6508d963d484965a953844dfcff092712102c236467a25af57edc53b63880ea39af8ce7334f6d77a8206e805305e7c6ad919d12bfae5c1bThis is the digital signature of the message \u201cVote for Alice\u201d signed by Kim using her private key Pr.Now anyone can verify that message \u201cVote for Alice\u201d was signed by Kim by executing the verify function, verify(\u201cVote for Alice\u201d, signature) which outputs \u201c0x44ac12c1e3dfd8edaf83b6f65918229d5279a6f5\u201d. If you notice, that output is Kim\u2019s public key Pu (remember, everyone knows it\u2019s Kim\u2019s public key) which means the message was definitely signed by Kim. If you tamper with the signature or message (by changing even one character), the verify algorithm outputs a completely different public key and you will know that the message was tampered with, because the public key will be different from Pu.Solution DetailsIf you understand digital signatures, the solution is extremely trivial. Let\u2019s see how it can be used in our voting application to save users from paying gas fee without compromising their vote. You can see below all the users of dapp and the actions they perform.A voter indicates their intention to vote for a candidate by signing a message using their private key. They won\u2019t submit their transaction to the blockchain, so no txn fee is paid. The message queue in the diagram above is just an off chain location where all the vote details are stored.Anyone willing to pay the txn fee (usually the contract owner) takes the signature, candidate name and voter\u2019s account address and submits them to the blockchain.The smart contract uses the verify function to derive the public key (Ethereum account address) based on the candidate name and signature. If the derived public key matches the address of the user who signed the message, it records the vote or else fails the transaction.Implementation DetailsLet\u2019s now look at the actual implementation and how all the pieces fit together.Step 1: Sign the messageThe first step is to sign the message as a voter. We will use eth_signTypedData function to sign our message. This function has been implemented in Metamask which makes it really easy to sign messages. You can find more details and discussion about this proposal here: https://github.com/ethereum/EIPs/pull/712. You can find the code to sign the message below.One really important thing to note is, internally eth_signTypedData hashes the message and the hashed message is what gets signed. You can refer to typedSignatureHash function here for more details on hashing.Step 2: Submit the signed vote to the blockchainSince this is just a demo application, we don\u2019t store the signature and other details anywhere. It is directly displayed on the page after the message is signed. Anyone can take these details and submit to the blockchain. Here is the code that submits the vote to the blockchain:Step 3: Verify the vote details in the smart contractWe now verify in the smart contract if the submitted vote info is valid and we then record the vote.Zeppelin has a handy library called ECRecovery we can use to verify the signed message. The voteForCandidate function verifies the signed message (recover function) and updates the vote count if the verification succeeds.If you remember, I mentioned earlier that eth_signTypedData hashes the message (\u201cVote for Alice\u201d) before signing it? The solidity recover function doesn\u2019t have any knowledge of the hashing function used within eth_signTypedData and so it can\u2019t verify the message \u201cVote for Alice\u201d. It has to generate the hash of the message \u201cVote for Alice\u201d and then verify it. Instead of generating the hash inside the contract, we pre-hash all the messages beforehand and pass it in the constructor so it is easy to lookup when verifying. The code to generate the hash is in the migration file belowThat is all the code you need to get the new application working!I created a quick demo to show how this application worksThe entire working code is here: https://github.com/maheshmurthy/ethereum_voting_dapp/tree/master/chapter4The demo application is here: https://www.zastrin.com/voting-dapp-without-paying-gas.htmlPotential issues to\u00a0addressThere are a few issues to consider when building a real dapp using this technique. Some of them are listed below:Where are the signed messages stored? You can use some kind of a queuing system to store these messages.What is the guarantee that the signed message eventually is submitted to the blockchain?Storing the hash of all the messages in the blockchain is not ideal, so what is the best solution for it?If you have thoughts on how to address these issues or if you see any flaws in this solution, please leave a comment!Note: Apparently, eth_signTypedData API is still not stable and has been implemented by only metamask. Please beware of this if you are planning to use this technique in mainnet/production.Further Readinghttps://en.wikipedia.org/wiki/Public-key_cryptographyhttps://en.wikipedia.org/wiki/Digital_signaturehttps://github.com/danfinlay/js-eth-personal-sign-examples/https://danfinlay.github.io/js-eth-personal-sign-examples/https://github.com/ethereum/EIPs/pull/712Thanks Chris Whinfrey and Febin John James for reviewing drafts of this article.", "responses": "2"}, {"title": "The Ultimate Collection of Ethereum, Solidity and Smart Contracts Interview Questions", "author_name": "Alexander Vitanov", "link": "https://medium.com/@i6mi6/the-ultimate-collection-of-ethereum-solidity-and-smart-contracts-interview-questions-ef610d250012?source=search_post", "post_date": "Mar 7, 2018", "readtime": "11 min read", "upvotes": "696", "content": "Source: http://www.team2000-al.com/category/question-ideas/The Ultimate Collection of Ethereum, Solidity and Smart Contracts Interview QuestionsAlexander VitanovBlockedUnblockFollowFollowingMar 7, 2018Updated March 30You can use this collection of questions for interviews and as a cheatsheet to refresh your knowledge.Check back once in a while since I will keep updating this list.You can contribute here.Table of\u00a0ContentsEthereum client (Geth)Smart Contracts and SolidityDApps and web3Solidity", "responses": "7"}, {"title": "", "author_name": "Bernd Lapp", "link": "https://medium.com/old-school/toshi-live-ethereum-dapp-d1922b792aa1?source=search_post", "post_date": "May 29, 2018", "readtime": "19 min read", "upvotes": "643", "content": "Toshi\u200a\u2014\u200aLive Ethereum\u00a0DappBernd LappBlockedUnblockFollowFollowingMay 29, 2018This is a series of posts, covering Dapps (Decentralized Apps) that are Live and can be used right now. 2018 in my opinion is the year we will for the first time see regular users use Blockchain based products. I want to support this progress by showing the products that are actually Live today. Instead of HODL we now entered the phase of BUIDL! Using a questionnaire as the template I am interviewing the people working on these projects, hoping that this format will make it easier to understand the projects and their contribution to the Ethereum Ecosystem.", "responses": "6"}, {"title": "What\u2019s in the Ethereum\u00a0update?", "author_name": "Mohamed Abedelmalik", "link": "https://medium.com/@mohamed.ai/whats-in-the-ethereum-update-a44c0dcaa377?source=search_post", "post_date": "Oct 11, 2017", "readtime": "3 min read", "upvotes": "578", "content": "What\u2019s in the Ethereum\u00a0update?Mohamed AbedelmalikBlockedUnblockFollowFollowingOct 11, 2017On October 16th (block 4,370,000), Ethereum will hard fork to Byzantium, the first half of the larger Metropolis update. Unlike the Bitcoin hard fork, the Byzantium update is not expected to create another Ethereum coin. Although this update doesn\u2019t introduce the much anticipated anonymous transactions and proof of stake, there are still some interesting changes to be aware of.Reduction in Mining\u00a0RewardThe mining reward will be reduced from 5 ETH to 3 ETH. This change is made in preparation for proof of stake, where mining will be phased out all together. Although the reward was reduced, the previous plan to exponentially increase block times (the ice age) has been delayed. The ice age was originally put in place to incentivize the adoption of new chains when hard forks are introduced.Preparation for Private TransactionsFour native contracts have been added that allow for certain computationally expensive operations to be executed directly on the CPU that the Ethereum virtual machine runs on. These four functions (big mod exponentiation, elliptic curve addition, elliptic curve scalar multiplication, and elliptic curve pairing) are crucial to the implementation of zk-snarks, the cryptography that will one day allow for private transactions.When contracts are executed on the EVM, they are allowed to run until they consume all of their gas. This gas limitation was put in place to prevent infinite loops. With the introduction of these four native contracts, the four operations can be accessed by a smart contract address; however, when these contracts are called, the logic doesn\u2019t execute on the EVM. Instead it runs on the CPU of the machine running the Ethereum client, making future implementations of zk-snarks much less gas intensive.TLDR: Some of the underlying computations necessary for private transactions now require less gas and run outside of the EVM.Faster Transaction ProcessingPreviously, each transaction\u2019s receipt included the root of the transaction state tree. That is, the root of the Merkel tree immediately after that transaction was added to the tree. The state tree root, is one of the only dependencies one transaction has to other transactions in the block. By removing this dependency and adding several optional parameters, transactions can now be processed in parallel.The \u201croot\u201d parameter will still be kept in the transaction receipt, but it\u2019s value will be replaced by a binary digit: 0x0 for a failed transactions, and 0x1 for a successeful transaction.TLDR: Transactions can now be processed in parallel.Smart Contract ImprovementsPreviously, for a smart contract to prematurely terminate its operations, the developer could use the \u2018throw\u2019 keyword. This effectively runs an infinite loop until all gas is used, and the contract terminates. There are two downsides to this:You lose any left-over gas in the contract termination process.Without left-over gas, the contract can\u2019t return an error message.Not only do you loose your gas, but you also don\u2019t know why the contract failed and terminated. With the addition of the REVERT op code in Byzantium, developers now have the ability to halt execution without burning through the remaining gas. This allows the contract to potentially return an error message.TLDR: Smart contract just got a little smarter.MiscellaneousWhile there are other minor adjustments and updates, these are the ones that I found to be most important. For a more technical and thorough run-down of the updates, checkout the Ethereum Improvement Proposals.", "responses": "3"}, {"title": "How to create an Ethereum wallet address from a private\u00a0key", "author_name": "Timur Badretdinov", "link": "https://medium.freecodecamp.org/how-to-create-an-ethereum-wallet-address-from-a-private-key-ae72b0eee27b?source=search_post", "post_date": "Jul 31, 2018", "readtime": "5 min read", "upvotes": "802", "content": "How to create an Ethereum wallet address from a private\u00a0keyTimur BadretdinovBlockedUnblockFollowFollowingJul 31, 2018In the first article of this series, we generated a bitcoin private key: 60cf347dbc59d31c1358c8e5cf5e45b822ab85b79cb32a9f3d98184779a9efc2.Here, we\u2019ll use that key to get the public address and then the Ethereum wallet address of that private key.Creating the Bitcoin wallet address from the private key is a bit complicated. Here, the process will be much simpler. We need to apply one hash function to get the public key and another one to get the address.So let\u2019s get started.Public keyThis part is almost identical to what we discussed in the Bitcoin article, so if you read that one, you can skip it (unless you need a refresher).The first thing we need to go is to apply the ECDSA, or Elliptic Curve Digital Signature Algorithm, to our private key. An elliptic curve is a curve defined by the equation y\u00b2 = x\u00b3 + ax + b with chosen a and b. There is a whole family of such curves that are widely known and used. Bitcoin uses the secp256k1 curve. If you want to learn more about Elliptic Curve Cryptography, I\u2019ll refer you to this article.Ethereum uses the same elliptic curve, secp256k1, so the process to get the public key is identical in both cryptocurrencies.By applying the ECDSA to the private key, we get a 64-byte integer, which is two 32-byte integers that represent X and Y of the point on the elliptic curve, concatenated together.For our example, we got 1e7bcc70c72770dbb72fea022e8a6d07f814d2ebe4de9ae3f7af75bf706902a7b73ff919898c836396a6b0c96812c3213b99372050853bd1678da0ead14487d7.In Python, it would look like this:private_key_bytes = codecs.decode(private_key, \u2018hex\u2019)# Get ECDSA public keykey = ecdsa.SigningKey.from_string(private_key_bytes, curve=ecdsa.SECP256k1).verifying_keykey_bytes = key.to_string()key_hex = codecs.encode(key_bytes, \u2018hex\u2019)Note: as you can see from the code above, I used a method from the ecdsa module and I decoded the private key using codecs. This is relevant more to the Python and less to the algorithm itself, but I will explain what are we doing here to remove possible confusion.In Python, there are at least two classes that can keep the private and public keys: \u201cstr\u201d and \u201cbytes\u201d. The first is a string and the second is a byte array. Cryptographic methods in Python work with a \u201cbytes\u201d class, taking it as input and returning it as the result.Now, there\u2019s a little catch: a string, say, 4f3c does not equal the byte array 4f3c. Rather, it equals the byte array with two elements, O<. And that\u2019s what the codecs.decode method does: it converts a string into a byte array. This will be the same for all cryptographic manipulations that we\u2019ll do in this article.Wallet addressOnce we\u2019ve gotten the public key, we can calculate the address. Now, unlike Bitcoin, Ethereum has the same addresses on both the main and all test networks. Users specify the network that they want to use later in the process when they make and sign a transaction.To make an address from the public key, all we need to do is to apply Keccak-256 to the key and then take the last 20 bytes of the result. And that\u2019s it. No other hash functions, no Base58 or any other conversion. The only thing you need is to add \u20180x\u2019 at the start of the address.Here\u2019s the Python code:public_key_bytes = codecs.decode(public_key, \u2018hex\u2019)keccak_hash = keccak.new(digest_bits=256)keccak_hash.update(public_key_bytes)keccak_digest = keccak_hash.hexdigest()# Take the last 20 byteswallet_len = 40wallet = \u20180x\u2019 + keccak_digest[-wallet_len:]ChecksumNow, as you may remember, Bitcoin creates the checksum by hashing the public key and taking the first 4 bytes of the result. This is true for all Bitcoin addresses, so you can\u2019t get the valid address without adding the checksum bytes.In Ethereum, that\u2019s not how things work. Initially, there were no checksum mechanisms to validate the integrity of the key. However, in 2016, Vitalik Buterin introduced a checksum mechanism, which has since been adopted by wallets and exchanges.Adding a checksum to the Ethereum wallet address makes it case-sensitive.First, you need to get the Keccak-256 hash of the address. Note that this address should be passed to the hash function without the 0x part.Second, you iterate over the characters of the initial address. If the ith byte of the hash is greater than or equal to 8, you convert the ith address\u2019s character to uppercase, otherwise you leave it lowercase.Finally, you add 0x back at the start of the resulting string. The checksum address is the same as the initial one if you ignore the case. But the uppercase letters let anyone check that the address is indeed valid. You can find the algorithm of the checksum validation at the page linked here.As you\u2019ll read in the proposal, for this checksum scheme,\u201con average there will be 15 check bits per address, and the net probability that a randomly generated address if mistyped will accidentally pass a check is 0.0247%.\u201dAnd here\u2019s the code to add checksum to the Ethereum address:checksum = \u20180x\u2019# Remove \u20180x\u2019 from the addressaddress = address[2:]address_byte_array = address.encode(\u2018utf-8\u2019)keccak_hash = keccak.new(digest_bits=256)keccak_hash.update(address_byte_array)keccak_digest = keccak_hash.hexdigest()for i in range(len(address)):    address_char = address[i]    keccak_char = keccak_digest[i]    if int(keccak_char, 16) >= 8:        checksum += address_char.upper()    else:        checksum += str(address_char)ConclusionAs you can see, creating an address for Ethereum is much simpler than for Bitcoin. All we need to do is to apply the ECDSA to public key, then apply Keccak-256, and finally take the last 20 bytes of that hash.If you want to play with the code, I published it to the GitHub repository.", "responses": "3"}, {"title": "A Primer on Ethereum Blockchain Light\u00a0Clients", "author_name": "Raul Jordan", "link": "https://medium.com/@rauljordan/a-primer-on-ethereum-blockchain-light-clients-f3cadde49137?source=search_post", "post_date": "May 19, 2018", "readtime": "6 min read", "upvotes": "748", "content": "A Primer on Ethereum Blockchain Light\u00a0ClientsRaul JordanBlockedUnblockFollowFollowingMay 19, 2018A large number of projects working on Blockchain-based, peer-to-peer protocols make grandiose claims about performance and throughput. With so much innovation happening in the R&D stages of these projects, many often don\u2019t account for the real challenges of adoption encountered once these protocols are live.Network TopologiesIt is easy to assume most people running a network are between some confidence interval of latency and computational capacity, but easy to forget the barrier to entry most users have to interact with nodes on the blockchain. Unfortunately, running a full node is prohibitively expensive and slow for most, so a large portion of users rely on \u201clight\u201d nodes that piggyback off the security of full nodes without the extensive resource requirements needed.Ethereum\u2019s light client mode allows for devices as lightweight as RaspberryPi\u2019s to join the network, download block headers as they appear, and only validate certain pieces of state on-demand as required by their users. In Ethereum in particular, the network is so easy to saturate with these clients that full, archival nodes have RaspberryPi\u2019s latching onto them faster than you can say \u201cMerkle Tree\u201d.A RaspberryPi Rig\u200a\u2014\u200ayou can mount a light client on these\u00a0things!Cryptoeconomic incentives are not enough when running full nodes\u2014 as resource cost effectiveness creates a bottleneck in balancing a distributed network. It is very hard to predict exactly what balance of full to light nodes a network will have in the wild. There have been some discussions on how to balance these incentives and make it easier for users to justify running a full node.Incentives for running full Ethereum nodesThis has to do with a concern voiced by Micah Zoltu that the community's node implementations are not creating an\u2026ethresear.chIntroducing Light Clients: Key Actors in\u00a0EthereumThe key idea behind a light client is that it is able to fetch parts of the state on demand as it concerns to its user. It assumes an honest model where miners are correctly following the rules of Ethereum and at least a full node in the system is completely honest.Geth Client With SyncMode Flag Set to \u201cLight\u201d\u00a0ModeTheir basic functionality is to download block header as they appear in the network and issue on-demand requests for Merkle proofs of certain pieces of state being used by the client. Instead of using local storage, light clients on Ethereum use a distributed hash table to keep track of trie nodes.Given that Ethereum\u2019s state is represented via large Merkle trees, it is easy to use the Merkle root along with a path of nodes along a branch in the tree to verify the integrity of a piece of information as a lightweight proof. This ultimately relies on trusting the Merkle root provided is correct.Light client messages include, but are not limited to, checking the balance of an account, verifying a transaction was confirmed, checking of event logs from a certain contract deployed on the network, and more.All of these can be reduced to sublinear complexity via Merkle proof validation. When data from the blockchain is unavailable, or a proof does not check out when verifying a state transition index, clients are allowed to raise alarms to other participants in the peer-to-peer network.The Geth client specifies a fundamentally different configuration and protocol manager when in light mode. For those wanting to know what exactly happens when Geth spins up a light client, check out my issue below:Exploring the Current Client Protocol Architecture \u00b7 Issue #122 \u00b7 prysmaticlabs/geth-shardingHi all, As more of our sharding client code is being created in our fork, it is critical to understand the design\u2026github.comThe Underlying Consensus MechanismThe current light client protocol assumes proof of work consensus operating in the main chain via full nodes. In proof of work, there exists a mathematical function by which we can verify a block header is valid. That is, this algorithm is hard to compute in order to output such header, but easy to verify.Light clients, upon launch, look for the chain of longest block headers, and the cost for an attacker to spoof this chain by producing faulty headers is almost inconceivable.There is an underlying transfer of physical work in the form of electricity towards contributing to the security of the chain via proof of work, although validating the produced headers is very efficient.Credits to Software Engineering DailyLight clients are useful in a proof of work context because headers can be verified in constant time, but we do not obtain the same guarantees in a proof of stake context.Light Clients in Proof of Stake: Is Proof of Work Necessary?The simplified problem with light clients in proof of stake amounts to block headers not being tied to a certain amount of \u201creal\u201d work actors need to put in to produce them. That is, the strength derived from this consensus protocol comes down to punishment deterrents for byzantine actors rather than a reward for computing an NP-hard problem via spending electrical energy. Actors trying to grow the wrong chain in proof of stake will get punished, whereas in a proof of work system, actors mining on the wrong chain will fork and not reap the rewards of mining on a canonical chain.Proof of stake provides in-protocol mechanisms for finalizing block headers deterministically. Once these headers are trusted, accessing the data they contain is logarithmic in complexity, i.e. fetching nodes from a Merkle tree. Despite this, headers do not contain scalar values we can use to verify a proof of work solution, making verification at least logarithmic instead of constant time-efficient in a naive implementation.We can, however, do better at least with the syncing efficiency of light clients. As proposed by Vitalik in his post on the matter, a more light-client friendly proof of stake system can be constructed via a checkpoints system.A checkpoint is defined as a fixed number of blocks where 2/3 of participants must agree on via cryptographic signatures, an d such checkpoint must contain a hash of the previous checkpoint. In this new light client sync, only checkpoints can be downloaded and the client can then verify the signatures of the participants. This reduces the overhead of having to download every single header as in the current proof of work light client mode.This approach, however, does not fix the issue of validating the headers, so there could be the potential for a proof of stake protocol to include a small amount of proof of work upon block header creation for the purpose of light clients.Does a Hybrid Proof of Work / Proof of Stake System Help Light\u00a0Clients?There definitely could be a role in using computational power in the production of a block header for the purpose of light client validation in a proof of stake system so long as the power required to validate these headers is very small.If you enjoyed learning more about this, check out the work the Ethereum community is doing on sharding, including my team, Prysmatic Labs! In a sharded model, light clients are incredibly useful as one of the goals of sharding is to reduce the computational requirements for nodes. One place to begin is on ETHResearch, where most of the latest sharding developments are posted:The Stateless Client ConceptThere exists a protocol transformation that theoretically can be made to many kinds of protocols that in mathematical\u2026ethresear.chReferencesethereum/wikiwiki - The Ethereum Wiki -github.comethereum/researchContribute to research development by creating an account on GitHub.github.comzsfelfoldi/go-ethereumgo-ethereum - Jeffrey Wilcke's Go implementation of the Ethereum y/w papergithub.comUnderstanding Ethereum Light NodeWhat is Ethereum light node? Ethereum light node protocol is big step towards bringing the Ethereum client to small\u2026etherworld.co", "responses": "3"}, {"title": "Ethereum Woes", "author_name": "Catheryne Nicholson", "link": "https://blog.blockcypher.com/ethereum-woes-d9b2af62da67?source=search_post", "post_date": "Mar 11", "readtime": "4 min read", "upvotes": "1K", "content": "Ethereum WoesCatheryne NicholsonBlockedUnblockFollowFollowingMar 11BlockCypher\u2019s Ethereum API was knocked out for almost a month due to the Constantinople Hard Fork. This post-mortem explains what happened, lessons learned, and what we are doing to prevent this type of outage in the future.Planning ahead for the Constantinople Hard Fork.Ethereum announced their Constantinople Hard Fork (HF) in mid-December 2018 to occur on January 15, 2019. The Ethereum developers stated that the \u201cupcoming fork to be the least eventful one in the history of Ethereum.\u201d We disagreed: the HF impacted hundreds of source files. Following the protocol outlined by Ethereum, we proactively began following their instructions, which also involved modifying our back-up stores. We worked all during the Christmas holidays and completed the work the first week of January 2019.We thought we were ready.Photo from\u00a0Bubba73January 8: something is very wrong.The night of January 8, we realized something was wrong with our Ethereum state but we did not know what: the only thing we knew is we were getting an error that some small piece of data was missing. The Ethereum state is inscrutable\u200a\u2014\u200aall data is hashed in a tree\u200a\u2014\u200aand it made it impossible for us to figure out what exactly was wrong.We attempted multiple recovery procedures with no success. We kept getting a missing data error (a Trie node).Having failed multiple times to discover and recover the missing data, we began the \u2018Fast\u2019 sync process: it took over 2 days for a \u201cfast\u201d sync to complete. Unfortunately, It did not help us restore the missing data, nor did it restore our state.For everyone who asked these questions:Why did a fast sync not work? Because it only includes a small subset of the whole blockchain data. To provide and operate our APIs reliably we need all of it.Why didn\u2019t we make a back-up copy of our state before doing the Constantinople update? We did, but it was partially corrupted by the restore. Also the Ethereum state is not a database that can simply be backed-up and patched. It can\u2019t be done while the Ethereum node is online, it can\u2019t be done incrementally (and is well over a terabyte).(Lesson Learned \u21161: the Ethereum state is very different that other blockchains. It cannot be restored using any traditional backup method.)The long full-synchronization march began.As a last resort, we began a \u2018Full\u2019 sync of the 2+Terabyte Ethereum state on January 12. Knowing the size we had to contend with, we upgraded to the biggest available machines in attempts to get the sync working faster. It barely made a difference. Compounding our problems\u200a\u2014\u200abecause there\u2019s no transparency in the process\u200a\u2014\u200awas the fact that we had no idea of our status in the upgrade and had no info in order to update our customers.We were left helplessly waiting and checking.On January 14\u200a\u2014\u200athe day before the Constantinople HF was scheduled to take effect\u200a\u2014\u200ait was cancelled. Apparently a security audit found a vulnerability that could allow a potential attacker to steal cryptocurrency from a smart contract. The last minute cancellation was incredibly demoralizing to us. Had we waited to implement Constantinople until AFTER it took affect, we would have saved ourselves an incredible amount of work, angst, expense\u2026.and our ETH API would have been working the entire time.(Lesson Learned \u21162: don\u2019t plan ahead for Ethereum upgrades. Wait until they happen.)Over 2 weeks later, we learned the \u2018Full\u2019 synch is not really a full-state restore.After 2+ weeks, our Ethereum state was restored, but it was not the end of our woes. As it turned out, the full sync defaults to NOT including the full Trie state. If you are doing a full sync, why would a default setting NOT include everything? That defies logic. Our next challenge was figuring out how to add the Trie state into our \u2018full\u2019 state.Vitalik, please help!After examining every which way we could think of to add the Trie state to our Ethereum state, we asked Vitalik for assistance. His first comment to us was \u201coh you\u2019re one of the few running one of those big, scary nodes.\u201d We asked him if he knew of anyone else running a \u201cbig, scary node\u201d to see if we could possibly sync with them. He knew of no one, not even the Ethereum Foundation keeps a full archival copy of the Ethereum chain. We were back to square 1: starting the Full sync again, this time including the Trie state.(Lesson Learned \u21163: In the event of a chain re-organization, we may be the only ones to know the entire history of Ethereum transactions)What are we doing to prevent this from happening again?Only our ETH API was knocked out. All our other blockchain APIs continued to work as intended. It became clear to us that the Ethereum state is very different than any other blockchain: there is no recourse to roll back blocks, no straightforward state restore, and no method to back-up the state. As soon as we recovered, the question became: how can we prevent customer disruption going forward? The short answer is: from now on we will wait until after an Ethereum upgrade is in effect to upgrade backups and plan an outage ahead of time. The longer answer is we\u2019ve put multiple redundancies in place to continuously duplicate staggered states so that we don\u2019t ever (knock on wood) have to do a full sync again.As we have seen many times, blockchains go through growing pains. Some are more painful than others and we learned a very painful lesson with Constantinople. When the HF actually happened on February 28, it was almost easy!", "responses": "7"}, {"title": "Pressure Mounts for Ethereum Developers as ASIC Miners Begin Dominating Hashrates", "author_name": "Han Yoon", "link": "https://hackernoon.com/pressure-mounts-for-ethereum-developers-as-asic-miners-eagerly-await-next-weeks-hardfork-76f558b1d2d?source=search_post", "post_date": "Jan 8", "readtime": "9 min read", "upvotes": "1.4K", "content": "Pressure Mounts for Ethereum Developers as ASIC Miners Begin Dominating HashratesHan YoonBlockedUnblockFollowFollowingJan 8Ethereum\u2019s hardfork scheduled for later this month will likely have some irreversible ramifications. Ethereum mining will never be the same again\u200a\u2014\u200aand its not because of the fallen profit margins, nor is it because of some silly dispute to create Ethereum Cash. This is a planned event supported by almost the entire Ethereum community\u200a\u2014\u200aminus the miners. We all knew that mining Ethereum would soon come to an end; it\u2019s in Ethereum\u2019s roadmap to switch to a Proof of Stake consensus. And although Ethereum will still be mineable until that fateful day in which PoS comes, some decisions made for this hardfork will have dire consequences for Ethereum miners.Ethereum\u2019s Significance in the GPU Mining\u00a0IndustryEthereum was (and still is) the poster-child for GPU mining. It shoulders a huge symbolic image of cryptocurrency mining. By the 2017 \u201ccryptocurrency mania,\u201d Bitcoin mining was already in the controls of those holding large amounts of powerful ASIC miner. Ethereum, on the other hand, was very profitable to mine\u200a\u2014\u200aand anyone could do it. From gamers with powerful GPU cards, to hobbyists with some money to experiment with, to college students \u201cborrowing\u201d electricity from their dorm rooms, and of course to early-adopting entrepreneurs that invested large amounts into facilities making a killing. Ethereum mining is not only symbolic to all the beneficiaries, but the entire blockchain and cryptocurrency industry: it brought the idea and concept of \u201cmining\u201d mainstream.Those golden days are long gone. 2018 was a brutal year for cryptocurrency speculators, and miners are not an exception. NVIDIA was the worst performer in the S&P 500 last quarter, hundreds of mining facilities have shut down either temporarily or permanently, and tens of thousands have stopped mining at home. AMD\u2019s RX 580, which cost almost $600 earlier last year, can now be bought for less than $150. There are huge liquidations of mining equipment which can be found on sites like Craigslist, eBay, and Reddit. The GPU shortage is over and gamers worldwide rejoice as prices have now reached normal levels.Enough reminiscing about the past, let\u2019s get to the present.The Constantinople HardforkThe Constantinople hardfork is just another step closer to Ethereum\u2019s eventual switch to Proof of Stake when Casper is implemented. This month\u2019s hardfork is set to occur at block number 7,080,000 (estimated to occur in less than two weeks) and will implement five EIPs (Ethereum Improvement Proposal).EIP 145 proposed by Alex Beregszaszi and Pawe\u0142 Bylica\u200a\u2014\u200aSimple summary: \u201cTo provide native bitwise shifting with cost on par with other arithmetic operations.\u201d If you are not a developer, this EIP will have little to no effect for the majority, so don\u2019t worry if that \u201csimple\u201d summary made no sense to you\u200a\u2014\u200aI had a hard time understanding myself.EIP 1014 proposed by Vitalik Buterin\u200a\u2014\u200aSimple summary: \u201cAllows interactions to (actually or counterfactually in channels) be made with addresses that do not exist yet on-chain but can be relied on to only possibly eventually contain code that has been created by a particular piece of init code.\u201d Again, if you are not a developer, you do not have to worry about this change.EIP 1052 proposed by Nick Johnson and Pawe\u0142 Bylica\u200a\u2014\u200aSimple summary: \u201cSpecifies a new opcode, which returns the keccak256 hash of a contract\u2019s code.\u201d This EIP will allow contracts to perform bytecode checks in a cheaper, more efficient way.EIP 1283 proposed by Wei Tang\u200a\u2014\u200aSimple summary: \u201cThis EIP proposes net gas metering changes for SSTORE opcode, enabling new usages for contract storage, and reducing excessive gas costs where it doesn\u2019t match how most implementation works.\u201d Another improvement in the Ethereum network addressing high gas usage which in the macro-level is greatly beneficial, but irrelevant for the 99.9%.EIP 1234 proposed by Afri Schoedon\u200a\u2014\u200aDifficulty Bomb Delay and Block Rewards Adjustment. This proposal is the focal point of this article\u200a\u2014\u200aso let\u2019s dive right in.EIP 1234: Why It\u2019s Likely to Send Ripples Throughout the GPU Mining CommunityCurrent State of Ethereum\u00a0MiningDepending on where you live and the cost of electricity you pay, Ethereum is still profitable to mine. However, for the vast majority (i.e. people in California paying $0.13-$0.16 per kWH), it is either unprofitable or not worth the trouble to simply break even.A mining rig with eight RX 580s today can net you around 0.13 ETH a week. That\u2019s about $20/week at today\u2019s price, and $185/week at Ethereum\u2019s all time high of $1,422. A drastic difference. If someone\u2019s mining Ethereum right now, that person either has access to very cheap electricity or has the \u201chodler\u201d type mentality, taking losses now for future gains. Yet, there are still tremendous amounts of resources still being spent on mining Ethereum. It still retains the most hashing power by a large margin\u200a\u2014\u200aafter Bitcoin of course. A significant portion of that hash power comes from small-time miners and mining facilities across the globe.All this is about to change.Difficulty Bomb\u00a0DelayA difficulty bomb was set in place in late 2016 to slowly, then rapidly increase the mining difficulty to make the economics of mining less attractive in anticipation of the inevitable switch to Proof of Stake. This \u201cIce Age\u201d has been delayed before, and is being delayed again for twelve months as the Ethereum developers are behind schedule on implementing Proof of Stake along with several other items in the roadmap that hold huge significance to the future of the network.But wait, isn\u2019t this delay a good thing for miners? Yes and no. It comes with a paramount caveat that has gone largely under the radar. The rewards adjustment.Block Rewards AdjustmentEverytime a block is mined, the finding pool is rewarded a block reward in Ethereum. Block rewards adjustment is not something new, in fact, it is a key part of crypto-economics. The last reduction happened in late 2017 when the block reward was reduced from 5 ETH to 3 ETH. In about a week, this reward will be reduced again from 3 ETH to 2 ETH\u200a\u2014\u200aroughly $1.5mil in daily rewards.As I have previously said, block rewards reduction is nothing out of the ordinary and can be beneficial economically. But this reduction, in my opinion, couldn\u2019t happen at a worse time.Dangerous Timing for a Rewards ReductionThis reduction will not have the same effects as the late 2017 reduction. Mining Ethereum was very profitable, and the value of Ethereum was skyrocketing. Miners were still happy, and investors were happy. However, at a time when there are so many miners on the fence whether to mine or not, a 33% reduction in rewards will absolutely positively sway them away from Ethereum mining. Miners that are breaking even will suddenly be at a sharp loss, again moving them away from Ethereum.But wait, doesn\u2019t that mean mining difficulties will re-adjust when miners leave the network? Yes, but there\u2019s a new threat in town.The Rise of Ethereum ASIC\u00a0MinersThe four letters \u201cASIC\u201d can make both projects as well as miners shudder in fear or disgust. Application specific integrated circuits, or ASICs, are specifically designed chips to perform one task: mine powerfully and efficiently. Once an ASIC chip is developed for an algorithm, it usually means one thing: GPU miners will soon become irrelevant for mining that coin. I like to analogize small-time GPU miners as \u201cmom-and-pop stores,\u201d and ASIC miners as Wal-Mart.This has caused a constant game of cat-and-mouse where projects hardfork to a new PoW algorithm, only to have that new algorithm taken advantage of again by newer ASIC chips. On the other hand, some projects welcome ASICs, as the newfound hashing power can help secure their network even stronger.ASIC miners for Ethash, Ethereum\u2019s PoW algorithm, are finally here. Several companies have already began sales, and many others have announced even more powerful and more efficient Ethash miners. Ethereum, once thought as a safe-haven coin from ASIC miners, will soon see a flood of these machines enter the market.To reiterate: as small to mid-sized GPU miners leave the network, there will soon be warehouses lined up with ASIC machines (like the ones you see in Bitcoin documentaries) mining Ethereum.Possible Consequences & Case for\u00a0ProgPOWAs a result of smaller miners leaving the network while larger \u201cWal-Mart\u201d type players enter, the end result will be more centralization\u200a\u2014\u200asomething Vitalik Buterin is fiercely against. It goes against the core fundamental value of cryptocurrency. Many community members have called for a temporary implementation of ProgPOW (Programmatic Proof-of-Work) to combat the rise the Ethash ASIC miners. Ultimately, the developers did not feel it was necessary for the upcoming fork.A few days ago during a core developers meeting, perhaps under the pressure of the massive Ethereum mining community, they had a very interesting discussion regarding this issue. \u201cMr Else\u201d pointed out that the current ASICs for Ethash are only \u201cmarginally\u201d better than a normal GPU\u200a\u2014\u200abut the next generation of the ASICs will be about \u201c2x better than GPUs.\u201d They continue to call this a \u201cslow arms race\u201d between the GPU manufacturers and ASIC companies. In the end the decision was made that ProgPOW will be implemented in the future as long as there is nothing critical found in the largely untested algorithm. However, that could take precious months to implement, not to mention the logistical headaches and resources it would take for the network to hold another hardfork.Truth is, no one really knows for certain what the mid to long term consequences are. But the short-term consequences are, in my opinion, quite obvious. The departure of thousands of miners from Ethereum will have ripple effects throughout the entire mining industry. When they switch to different coins to mine, the difficulty rates will drastically increase for other GPU mineable coins. To put into perspective, Monero, the next highest GPU-mineable coin in market cap, has a daily reward of approximately $120K. Ethereum\u2019s daily rewards will be reduced by $1.5mil. Simple economics tell us that this will displace a lot of GPU miners, further consolidating the power of ASIC miners. On the other hand, this could possibly result in a surge in price as supply will be reduced. But this could also take months, as the market continues its fight with this bear market.Closing ThoughtsThe implementation of ProgPOW may ultimately be a moot point if it takes too long. The 3\u20134 month timetable of its implementation is optimistic at best. The network would also be taking a step back, as ProgPOW\u2019s confirmation times take 1.5 to 2 times longer than Ethash. Instead, there should be an immense pressure to implement PoS as soon as possible before the new ASIC miners begin to accumulate a disproportionate amount of Ethereum, rendering PoS more centralized than desired from the get-go. It seems that ASICs always win in the end, and the saying \u201cthe rich get richer\u201d is certainly holding true even in the cryptocurrency space\u200a\u2014\u200awhich is ironic in every sense, but not surprising.There\u2019s no denying that huge ASIC mining pools can pose problems, from the centralization of power to even 51% attacks on weaker coins. However, with all this being said, I am not against ASIC mining or miners\u200a\u2014\u200ain fact I myself own a handful. We live in a capitalistic society, and where there is profit to be made, someone will seize the opportunity. Putting the financial incentives aside, they actually provide tremendous value in securing large networks. They also spur innovation in cryptography, leading to projects like Grin which uses the alleged ASIC-resistant MimbleWimble protocol. Regardless, it\u2019s a bit saddening to think that the most influential cryptocurrency for GPU mining may be nearing its end for most miners. Unless the core developers act fast, Ethereum will no longer be known as the \u201cgo-to\u201d GPU mineable coin. Ethereum will be an ASIC coin. GPU mining will never be the same again. The end of Ethereum mining, as we know it, is under significant threat; the beginning of the end of Ethereum GPU mining may very well be upon us.Feel free to follow me on Twitter or send me an email.", "responses": "4"}, {"title": "How to create a Token Factory with Ethereum\u200a\u2014\u200aPart\u00a01", "author_name": "iuri matias", "link": "https://hackernoon.com/how-to-create-a-token-factory-with-ethereum-part-1-85e84d1f38fc?source=search_post", "post_date": "Feb 21, 2017", "readtime": "6 min read", "upvotes": "372", "content": "How to create a Token Factory with Ethereum\u200a\u2014\u200aPart\u00a01iuri matiasBlockedUnblockFollowFollowingFeb 21, 2017Outdated: New tutorial can be found on the embark website(Disclaimer: this tutorial is for educational purposes only)In this tutorial series we\u2019ll create a Token Factory using Ethereum. In part 1 we\u2019ll start by creating a DApp to interact with a single token, on part 2 we\u2019ll adapt the application so it can deploy new tokens on the fly on the web side with user provided parameters.A Token is typically a unit used to represent a medium of exchange for some service or utility. They can represent a concert ticket, a membership, voting share, reputation points, etc\u2026note: This tutorial is meant for embark 2.5.2 (not 2.6.0 and above)Getting StartedFirst of all, make sure you have Go-Ethereum and Embark installed.npm -g install embark@2.5.2Now, let\u2019s create a new dappembark new TokenFactoryThis will create a directory called TokenFactory, cd to it and run:embark blockchainIn another console, in the same directory, run:embark runYou should see something like this:note: If you don\u2019t want the console you can instead run:\u00a0embark run\u200a\u2014\u200anodashboardNow open your browser at http://localhost:8000\u00a0, start your favourite editor and let\u2019s get started!Adding the Token\u00a0ContractWe\u2019ll add a typical ERC20 token contract to app/contracts/token.solwarning: this contract is for educational purposes only, do not use it in production unless you know what you are doingEmbark will automatically detect the new file and deploy the contract. However we quickly notice a problem, in Embark\u2019s console type:Token._supply().toNumber()The supply is zero, that\u2019s because the contract constructor takes a initial_balance parameter which we haven\u2019t specified:function Token( uint initial_balance ) {   _balances[msg.sender] = initial_balance;   _supply = initial_balance;}Let\u2019s rectify this by specifying the initial_balance value in config/contracts.json{  \"default\": {    \"gas\": \"auto\",    \"contracts\": {      \"Token\": {        \"args\": [          1000        ]      }    }  }}Embark will detect the change and redeploy the contract with the new parameters, afterwards the token supply is 1000 as expected:Creating the\u00a0UIFor the sake of brevity, we wouldn\u2019t implement every single functionality in the contract. However, we\u2019ll implement two important features: Checking balance of an address and Transferring Tokens from one address to another.Checking address\u00a0balanceTo input the address to query, we\u2019ll edit app/index.html and add a simple form.<html>  <head>    <title>Embark</title>    <link rel=\"stylesheet\" href=\"css/app.css\">    <script src=\"js/app.js\"></script>  </head>  <body>        <div id=\"queryBalance\">      <h3>Query Balance</h3>      <input placeholder=\"enter account address: e.g 0x123\" />      <button>Query</button>      <div class=\"result\"></div>    </div>  </body></html>Adding jQueryTo simplify the code a bit in this tutorial, we\u2019ll add the jQuery library to our DApp. Download jQuery from here and save it in your dapp app/js/ folder. Alternatively:cd app/js/ && wget https://code.jquery.com/jquery-3.1.1.min.jsnote: To use libraries such as react, give a look at a plugin such as embark-babelSetting the default addressLet\u2019s add to the input field field our own address as the default text so we can easily query our own balance. create the file app/js/token.js and add:$(document).ready(function() {  web3.eth.getAccounts(function(err, accounts) {    $('#queryBalance input').val(accounts[0]);  });});This will get the address of the first account and set it as the default text in the input form.Querying BalanceTo query the balance, we can see the contract method signature to do this is:function balanceOf( address who ) constant returns (uint value) {    return _balances[who];}This method will be available in the JS code automatically as a promise, like:Token.balanceOf(address).then(function(balance) { });So we can simply add a click event to the button, get the address, query the balance and set the result.$(document).ready(function() {  web3.eth.getAccounts(function(err, accounts) {    $('#queryBalance input').val(accounts[0]);  });  $('#queryBalance button').click(function() {    var address = $('#queryBalance input').val();    Token.balanceOf(address).then(function(balance) {      $('#queryBalance .result').html(balance.toString());    });  });});note: since the balance variable is a Big Integer, to read it it\u2019s necessary to apply either\u00a0.toNumber() or\u00a0.toString()Now go to http://localhost:8000 and click on the Query button, it will return 1000 as expected for our address.Transferring TokensNow let\u2019s implement transferring tokens!Now checking the contract, this is the method for transferring tokens:function transfer( address to, uint value) returns (bool ok)The method will take two parameters, an address and a value. Like in the previous step, let\u2019s first add a simple form to the html page at app/index.html:<html>  <head>    <title>Embark</title>    <link rel=\"stylesheet\" href=\"css/app.css\">    <script src=\"js/app.js\"></script>  </head>  <body>    <h3>Welcome to Embark!</h3>    <p>See the <a href=\"https://github.com/iurimatias/embark-framework/wiki\">Wiki</a> to see what you can do with Embark!</p>    <div id=\"queryBalance\">      <h3>Query Balance</h3>      <input placeholder=\"enter account address: e.g 0x123\" />      <button>Query</button>      <div class=\"result\"></div>    </div>    <div id=\"transfer\">      <h3>Transfer Tokens</h3>      <input class=\"address\" placeholder=\"enter account address: e.g 0x123\" />      <input class=\"num\" placeholder=\"enter amount to transfer\" />      <button>Transfer</button>      <div class=\"result\"></div>    </div></body></html>Then we will add the code to take the address and number of tokens from the inputs and call the contracts transfer method to app/js/token.js$(document).ready(function() {  web3.eth.getAccounts(function(err, accounts) {    $('#queryBalance input').val(accounts[0]);  });  $('#queryBalance button').click(function() {    var address = $('#queryBalance input').val();    Token.balanceOf(address).then(function(balance) {      $('#queryBalance .result').html(balance.toString());    });  });  $('#transfer button').click(function() {    var address = $('#transfer .address').val();    var num = $('#transfer .num').val();    Token.transfer(address, num).then(function() {      $('#transfer .result').html('Done!');    });;  });});Let\u2019s go to the UI and transfer 20 tokens to a random address, after clicking Transfer you should see the text \u2018Done!\u2019 when the transfer takes effect.We transferred 20 tokens out of our account, let\u2019s see if the balances reflect that.On to Part\u00a02In this tutorial we deployed and interacted with single Token. On part 2 we will adapt this DApp and create a true factory so new tokens can be dynamically deployed on the application side.Donations: If you like this article please consider donating to 0x8811FdF0F988f0CD1B7E9DE252ABfA5b18c1cDb1 (ETH)Hacker Noon is how hackers start their afternoons. We\u2019re a part of the @AMI family. We are now accepting submissions and happy to discuss advertising & sponsorship opportunities.If you enjoyed this story, we recommend reading our latest tech stories and trending tech stories. Until next time, don\u2019t take the realities of the world for granted!", "responses": "11"}, {"title": "Kin, Stellar & Ethereum: New Info on Our Blockchain Infrastructure", "author_name": "Gadi Srebnik", "link": "https://medium.com/kinblog/kin-stellar-ethereum-new-info-on-our-blockchain-infrastructure-2fb4882dbd75?source=search_post", "post_date": "Mar 21, 2018", "readtime": "5 min read", "upvotes": "1.6K", "content": "Kin, Stellar & Ethereum: New Info on Our Blockchain InfrastructureGadi SrebnikBlockedUnblockFollowFollowingMar 21, 2018Using a high-speed, high-scale blockchain is key to making Kin the ideal cryptocurrency for everyday use. Welcoming Stellar into Kin\u2019s infrastructure is a huge step forward in Kin\u2019s functionality and accessibility for digital services.Up to now, all Kin transactions have taken place on Ethereum (ERC20). Moving forward, Kin transactions will be performed on Ethereum or Stellar. As Ted discussed in a recent AMA, the two blockchains will support Kin in different ways\u200a\u2014\u200awith services operating on the blockchain that is best suited to their needs.While Ethereum provides liquidity for Kin holders, its load times and fees can\u2019t support our needs for day-to-day consumer use. The addition of Stellar as a second blockchain will allow us to operate the Kin Ecosystem on a faster, more efficient foundation, with low transaction fees\u200a\u2014\u200awhich is necessary for us to achieve the speed and scalability that digital services in the ecosystem will require.Now that our relationship with Stellar is in place, we want to share more information on our \u201cbi-directional\u201d migration plan for Kin tokens.In practice, the plan is less like a migration than like a software update: because Kin will run side-by-side on both Ethereum and Stellar, participants won\u2019t need to move their tokens away from Ethereum if they don\u2019t want to (and user experience with ERC20 won\u2019t be impacted).The change will simply create a more frictionless experience for using Kin. As our two-phase plan (below) explains, participants in the Kin Ecosystem will always be using the same Kin token\u200a\u2014\u200awhether on Ethereum or Stellar\u200a\u2014\u200ajust on a different underlying infrastructure.Here\u2019s how our two-phase plan will work.Current StatusUnder the terms outlined in the the Kin whitepaper, a total supply of 10 trillion Kin will be issued over time (with no additional surplus to ever be minted).Today, all Kin tokens in circulation exist as ERC20 tokens on Ethereum. (Some are held by TDE participants or people who bought Kin afterwards, some by Kik or by the Kin Ecosystem Foundation, some by Kik IPLv2 users, and so on.)From now on, let\u2019s label these original ERC20 tokens as Kin1.As we integrate Stellar as a second blockchain solution, we\u2019re deploying a new set of Kin2 tokens onto Stellar in a manner that does not impact any participant\u2019s financial stake in the Kin Ecosystem.Phase 1 (Immediate)In Phase 1, the Stellar-based Kin2 tokens will not have any financial value. During this current phase Kin2 acts as a so-called \u201cunit of account\u201d for Kin1 tokens in the Kin Ecosystem.Initially, we will create a set number of Kin2 tokens\u200a\u2014\u200alikely 900 billion\u200a\u2014\u200aon Stellar. These Kin2 tokens will be completely new, separate, and different assets from the Kin1 tokens created in the TDE, so they will not affect the value of Kin1 tokens.Digital services companies will be welcomed into the Kin Ecosystem to experiment with these Kin2 tokens in a similar manner to Kik Points: Their end users will be able to earn Kin2 tokens and/or spend Kin2 tokens (depending on how the digital services develop experiences).Kin2 tokens will only be awarded by the Kin Foundation for use in \u2018Earn\u2019 or \u2018Spend\u2019 experiences on the Stellar network. Users will not be able to trade Kin2 tokens directly in Phase 1, nor exchange them for other cryptocurrencies.In Phase 2 (described below), Kin2 will be merged with the original Kin1 to create one unified token over both networks. Only this future action will give value to Kin2. In Phase 1, they are completely separate and Kin2 does not have any value.Phase 2 (Q2-Q3\u00a02018)In Phase 2, Kin1 and Kin2 will be directly tied together\u200a\u2014\u200acreating a more seamless experience while maintaining the integrity of the allocation schedule.We will develop a mechanism to create a Kin1/Kin2 hybrid similar in concept to the hybrid transaction service we discuss in the Kin whitepaper.Once the mechanism is deployed, Kin1 and Kin2 will not be separate tokens, but rather the same token implemented over two blockchains for different purposes:For internal use inside a single digital service, users will use Kin2.For external use or transactions between digital services (and/or for exchange purposes) users will use Kin1.We will force a 1:1 conversion ratio between Kin1 and Kin2 in order to ensure that Kin1 and Kin2 have one aligned value and that the total number Kin1+Kin2 tokens in circulation will never be more than 10 trillion.Our development in this phase will also provide a way for tokenholders to swap between Kin1 and Kin2 tokens. Conceptually, it will work as a \u201clock-and-swap\u201d mechanism: Locking a given number of Kin1 tokens will unlock the same number of Kin2 tokens; locking Kin2 tokens will unlock that same number of Kin1 tokens.Before launching the Kin1/Kin2 hybrid, we will lock 900 billion Kin1 tokens (held by Kik or the Kin Foundation) without swapping them to Kin2. This will account for the 900 billion Kin2 tokens created in Phase 1 and maintain the maximum 10 trillion Kin1+Kin2 tokens per the TDE. Then we launch the hybrid!Key ConsiderationsThis a complicated process on our end, so we want to be as transparent about it as possible. We\u2019ll provide more details in coming weeks and share thorough updates throughout the process.In Phase 2, we\u2019ll also provide end-to-end information on wallet compatibility, exchanges, and how to swap Kin1 and Kin2 tokens between blockchains.For now, here are some answers to your most pressing questions. For a full FAQ, click here.When will this happen? How much time will it take?We plan to roll out the initial Kin2 tokens at the beginning of Q2. The swap mechanism will be complex to develop\u200a\u2014\u200alikely requiring at least a few months of development work. That means the \u201chybridized,\u201d swap-able Kin1/Kin2 tokens will not exist until Q3 2018, at the earliest.What assurances are there that Kin will remain liquid?Since we are simply adding another optional blockchain in parallel, liquidity should not be impacted negatively by this process. You will not be required to swap your tokens from one blockchain to another at any time and can leave your tokens on Ethereum for as long as you want.With the vesting contracts on Ethereum today be moved to the new blockchain?No, any vesting contracts on Ethereum will stay on Ethereum. We don\u2019t see any reason to move them since tokens can remain on Ethereum.If my tokens are stuck in Mercatox for processing, should I be concerned? Will I lose them in the migration process?Nope, there\u2019s no need to worry. Since you can leave your tokens on Ethereum, nothing will change for these tokens as they move through processing.Will you continue development of Ethereum libraries after this?Yes, but with less emphasis. The addition of Stellar is designed to help us scale on a faster blockchain, so we will focus more efforts on the new infrastructure while making sure that Ethereum still works as expected.What comes first? The standalone Kin app or the addition of Stellar?Stellar. Earn and spend experiences in the beta \u2018Kinit\u2019 app will run on the Stellar blockchain.", "responses": "8"}, {"title": "State of Ethereum Protocol #2: The Beacon\u00a0Chain", "author_name": "Ben Edgington", "link": "https://media.consensys.net/state-of-ethereum-protocol-2-the-beacon-chain-c6b6a9a69129?source=search_post", "post_date": "Oct 26, 2018", "readtime": "9 min read", "upvotes": "1.1K", "content": "State of Ethereum Protocol #2: The Beacon\u00a0ChainBen EdgingtonBlockedUnblockFollowFollowingOct 26, 2018The Beacon Chain and Ethereum 2.0\u200a\u2014\u200awhere it came from and where it\u2019s going. Missed \u201cState of the Ethereum Protocol #1\u201d? Check it out here.Ethereum 2.0 isn\u2019t a new idea. Back in 2014, Vitalik said of Ethereum 2.0 that, \u201cWe will either solve the scalability and consensus problems or die trying.\u201d Well, we\u2019re still very much alive, and his updated view from just a couple of weeks ago is that \u201cThere is no significant unsolved theoretical problem left for Ethereum 2.0.\u201dNow it\u2019s time for what he calls the \u201csoftware development slog,\u201d and the Beacon Chain is the first component of Ethereum 2.0 in the delivery plan. In this article we\u2019ll discuss what it does, why it does it, and how it\u2019s being developed.Introducing the Beacon\u00a0ChainIn my previous article, introducing Ethereum 2.0, I showed Hsiao-Wei Wang\u2019s now famous architecture diagram of the Ethereum 2.0 system.Ethereum 2.0 overall architecture. Original diagram by Hsiao-Wei Wang.This image also serves as a step-by-step roadmap for the development and delivery of Ethereum 2.0. Reading from top to bottom:The PoW Main Chain is the part that exists today: the current Ethereum Mainnet. In the Ethereum 2.0 system, this continues to operate pretty much as it does today. Everything below this is new.The Beacon Chain is currently under development and will be the first component to be delivered.The Shard Chains are next and are where the scalability will come from. Initially, the shard chains will simply aggregate transactions and come to consensus on their ordering, without executing them. This will be a good test of the system\u2019s infrastructure and security.The VM layer is the final big component of the Ethereum 2.0 system and will provide for the execution of contracts and transactions.Why do we need a \u201cBeacon\u00a0Chain\u201d?The Beacon Chain is a brand-new, Proof-of-Stake blockchain. It is the spine that supports the whole of the new Ethereum 2.0 system. It is the heartbeat that keeps the system alive. It is the conductor coordinating all the players.The Beacon Chain coordinates the whole system (image\u00a0source)The key function of the Beacon Chain is to manage the proof-of-stake protocol for itself and all of the shard chains. There are a number of aspects to this: managing validators and their stakes; nominating the chosen block proposer for each shard at each step; organising validators into committees to vote on the proposed blocks; applying the consensus rules; applying rewards and penalties to validators; and, being an anchor point on which the shards register their states to facilitate cross-shard transactions.Before we look at these functions in more depth, a note on terminology. The name Beacon Chain has its origins in the idea of a \u201crandom beacon\u201d\u200a\u2014\u200asuch as NIST\u2019s\u200a\u2014\u200athat provides a source of randomness to the rest of the system, and the random beacon concept was adopted in a blockchain context by Dfinity. Although the name \u201cbeacon\u201d suggests a central point, broadcasting to the rest of the system, of course it\u2019s not like that on the blockchain: everything is decentralised. Each participating node maintains its own local Beacon Chain, striving to stay in lockstep with the other nodes. Perhaps the image with the conductor above is misleading. While the Beacon Chain does conduct the rest of the system, the conductor is decentralised, like each musician\u2019s own internal sense of the rhythm.Introducing the Beacon\u00a0ChainLet\u2019s look at some of the functions of the Beacon Chain.Managing ValidatorsA major part of the work of the Beacon Chain is maintaining the set of validators, which is the set of nodes that have placed the required stake of 32 Ether, who are responsible for running the Ethereum 2.0 system. There are several statuses that a validator can have, but only those marked as \u201cactive\u201d take part in the Ethereum 2.0 protocol.Nodes join the validator set by sending their stake to a contract on the Proof-of-Work chain (the current Mainnet). After some validity checks, the stake is locked up and the contract emits a log entry (an \u201cevent\u201d in Solidity) which can be picked up by Beacon Chain clients. The node is then inducted into the validator set on the Beacon Chain.Once active, validators participate in the protocol by proposing blocks, when chosen to do so, on both the Beacon Chain and, once they have been implemented, the shard chains. They also join committees that vote for blocks, as described below.Validators can signal that they wish to exit the system and cease being involved. After a period of time (currently 97 days, but may be made more flexible), their stakes, plus rewards, minus penalties, will be returned into one of the shard chains. It will not be possible to unlock the initial stake on the PoW Mainnet, unless, perhaps, the whole system were to fail and the community agrees to a fork that refunds stakers.All of this is managed by the Beacon Chain.Providing RandomnessGood quality randomness is really hard to generate in blockchain systems, but a key requirement of the proof-of-stake protocol is a source of randomness that is distributed, verifiable, unpredictable, and (reasonably) unbiasable. The Beacon Chain is responsible for providing this randomness to the rest of the system: several of the protocol features described below depend on it.Randomness is tricky on blockchains (image\u00a0source)The current approach to random number generation is a RANDAO construction with validators providing a \u201chash onion\u201d. A RANDAO is simply a way to combine contributions (individual random numbers) provided by many participants into a single output number. To prevent any one participant manipulating the randomness significantly, a commit\u2013reveal scheme is used. When a validator registers, it provides a commitment value that is its chosen original number hashed many times. Each time the validator is selected to be the proposer, it peels off one or more layers of the onion by providing a pre-image of the last number revealed. Everyone else can check that this was done correctly, so the proposer cannot cheat the system by changing its contribution.Although this scheme is not completely unbiasable\u200a\u2014\u200aa proposer could skip its turn if it didn\u2019t like the random number\u200a\u2014\u200ait is believed to be sufficiently robust for the current protocol design.Block proposersThe Beacon Chain manages both its own proof-of-stake protocol and that of each shard chain. In a proof-of-work system, the node that gets to choose the next block, the block\u2019s miner, is the first to solve the mining challenge. In proof-of-stake there is no mining, so block proposers are chosen randomly, based on the in-protocol randomness described above.Another property of a PoW system is that block times are irregular, although they average to around 15 seconds on Ethereum. In contrast, I described the Beacon Chain as being like a heartbeat. Ethereum 2.0 blocks are produced regularly every 16 seconds (although there is a desire to reduce that to 8 seconds if testing demonstrates it to be feasible). These 16 second periods are called \u201cslots\u201d.At each slot, the chosen proposer for the Beacon Chain collects up all the protocol votes (attestations) from the Beacon Chain validator set for previous blocks and forms them into a block that it publishes.Once the shard chains are in place, each shard will have its own chosen proposer at each slot that will gather up the transactions for that shard and form them into a block to be voted on by the shard\u2019s committee.CommitteesVoting by committees of validators plays a key role in securing Ethereum 2.0 (image source,\u00a0cropped)A critical source of security in the proof-of-stake blockchain is the committees that vote on which blocks form the true history of the chain. The Beacon Chain relies on counting votes, known as \u201cattestations\u201d, from its own committee in order to agree and enshrine (finalise) its history. This committee could, ideally, be all the active validators in the system if their attestations can be collected quickly enough.In addition, the Beacon Chain will appoint smaller sub-committees for each shard at random that will, in due course, be responsible for confirming that the shard\u2019s proposers are behaving correctly.Rewards and penaltiesYet another administrative role for the Beacon Chain is the tracking and updating of validators\u2019 deposits.Validators receive rewards for behaving well and playing their part: this is the incentive for participating. But if validators break the rules, they are penalised by having some of their 32 Ether deposit reduced (slashed), and being ejected from the system. There is also a small penalty for being absent (not showing up to vote on blocks) called the \u201cquadratic leak\u201d. The reasons for this are subtle, and are about allowing the system to keep processing even if huge numbers of validators go offline, such as in the event of a catastrophe.If a validator\u2019s deposit falls below 16 Ether, the Beacon Chain will remove it from the validator set.CrosslinksFinally, the Beacon Chain performs the processing of crosslinks. Crosslinks tie the whole sharded system together, anchoring each shard to the spine that is the Beacon Chain.Periodically, the current state (the \u201ccombined data root\u201d) of each shard gets recorded in a Beacon Chain block as a crosslink. When the Beacon Chain block has been finalised, the corresponding shard block is considered finalised, and other shards know that they can rely on it for cross-shard transactions.A visualisation of the Beacon Chain (blue) with 8 shard chains (aquamarine) and crosslinks (light blue lines). Finalised blocks on all chains are yellow. Time increases from left to right. Simulator by Casey\u00a0Detrio.Buidling the Beacon\u00a0ChainThus concludes our lightning tour of the soon-to-be Beacon Chain! On its own, the Beacon Chain might not seem particularly useful. It cannot process arbitrary transactions: it has no smart contracts; it has no EVM. You cannot do anything with it. But, as the first component of Ethereum 2.0 to be delivered, it is the foundation of the building. The whole spectacular architecture to come is to be built on this. It has to be solid.If you want to get down into the detail, there is a work-in-progress Beacon Chain specification. All the creation and maintenance of this document is being done openly: anyone with useful input is welcome to join in. There\u2019s all sorts of useful discussion to be had in the issues and the pull requests. If you just want the headlines, I\u2019ve started consolidating the main specification updates and other news in a weekly bulletin.In order to run the Beacon Chain you\u2019re going to need a Beacon Chain client. These are currently being developed separately from the familiar suite of standard Ethereum clients (Geth, Parity, Pantheon, et al.) by a number of teams. You can see a list of the ones that I know about here with links to their GitHub repositories. Prysmatic and Lighthouse are putting out periodic updates on their client development progress, and some of the teams are offering bounties to contributors.Teams working on the Beacon Chain. Slide with links\u00a0here.As for timescales\u2026 the technical specification declares itself to be 60% complete at the time of writing this, and there remains a fairly chunky todo list. Nonetheless, a finger in the air suggests that the spec ought to be reasonably complete by the end of the year, and that perhaps by the end of Q1 2019 we\u2019ll be running a multi-client Beacon Chain testnet. Momentum has been building rapidly over recent weeks and the long discussed Ethereum 2.0 is really beginning to happen!", "responses": "5"}, {"title": "Ethereum based token speaking to new GMT\u00a0tokens", "author_name": "saka khan", "link": "https://medium.com/@sakabd00/ethereum-based-token-speaking-to-new-gmt-tokens-6e1ffaca6197?source=search_post", "post_date": "Dec 28, 2017", "readtime": "2 min read", "upvotes": "663", "content": "Ethereum based token speaking to new GMT\u00a0tokenssaka khanBlockedUnblockFollowFollowingDec 28, 2017Global Mining Token is AN Ethereal-based token authorized to get and trade the Cryptocurrency Mining capability or process Power (\u201cHash Rate\u201d) at a reduced value on the worldwide Mining Platform website provided by OR Realbit.GMT can give discounts and additive increments once shopping for completely different hash rates for a few hidden cryptoes.The token can give a refund for the acquisition of chosen Hash Rates (eg BTC / BCH / LTC / etc.).How the additive daily discount worksTokens GMTs give discounts for buying Hash Level tokensAfter buying a Hash token level, you start to mine in your chosen portfolio.GMT signs are going to be frozen till you sell Hash symbolic levelYou can use the time and discounts the maximum amount as you wish.Discount tokenBTCgh Bitcoin Hash Hate Token oneGH / s 1 February 2018BCHgh Bitcoin money Hash hate Token oneGH / s 1 February 2018LTCmh fatless Hash hate Token oneGH / s 1 might 2018Ethmh Ethereum Hash hate Token oneGH / e 1 Gregorian calendar month 2018DASHmh Dash Hash Hate Token oneGH / s 1 Jun 2018Real life real world Example:With discounts on discount tokens, profit will increase considerably.The a lot of you purchase, the a lot of profits you may get once you apply a reduction to shop for your hash fare!Discount on time token Discount USD / GH value BTCgH thirty days ROI USD capability.parallaxbackground background.DETAILS ON THE SALE OF TOKENSale datePre-sale one Gregorian calendar month\u200a\u2014\u200aone Dec February twenty18 20 millionLotto one Dec one\u200a\u2014\u200aJanuary one one Mar 2018 sixty millionLotto a pair of January one-1 February 1 Gregorian calendar month 2018 sixty millionLot three February one-1 March 1 might 2018 sixty millionTOKEN SUPPORT200,000,000 GMTGlobal Mining Platform are going to be offered February one, 2018Discount token are going to be issued a pair of months once every heapROAD MAPO RealbitGMT project started there by the venture partnership between the individuals behind O Blockchain Investimenti, that offers managed investment structures and vehicles in order that the planet will invest in markets and science tools and RealBit Mining, licensed Bitmain distributors and knowledge suppliers main and therefore the level of hash supplier, that mix to form AN OR-RealBit.Web Information:Website\u00a0: https://globalminingtoken.com/Whitepaper\u00a0: https://globalminingtoken.com/docs/GMT_White_Paper.pdf/Facebook\u00a0: https://www.facebook.com/GlobalMiningToken/Youtube\u00a0: https://www.youtube.com/channel/UCzBzYm7BJq-l3dga2qPV0tA/videosTelegram\u00a0: https://t.me/gmttoken/Slack\u00a0: https://slackpass.io/gmtproject/ANN Thread: https://bitcointalk.org/index.php?topic=2447494", "responses": ""}, {"title": "So, we\u2019re live on the Ethereum Mainnet! Now\u00a0what?", "author_name": "Golem Project", "link": "https://medium.com/golem-project/so-were-live-on-the-ethereum-mainnet-now-what-a4265813ca44?source=search_post", "post_date": "Apr 17, 2018", "readtime": "2 min read", "upvotes": "1.2K", "content": "So, we\u2019re live on the Ethereum Mainnet! Now\u00a0what?Golem ProjectBlockedUnblockFollowFollowingApr 17, 2018Image from PXHERE.comWe are still processing everything that\u2019s happening around our mainnet launch\u200a\u2014\u200aso we really cannot explain how we feel. We are continually pinching ourselves to figure out if we\u2019re dreaming or this outstanding response is real.However, as we mentioned in other blog posts, this is just the beginning of a new road for Golem. We would like to share with you what the dev team has planned for the near (and not so near) future.Golem\u2019s Development next\u00a0stepsUsability and functionality are pressing subjects nowadays on the Blockchain ecosystem. They are the key to mass adoption of our dApps.This is what Golem has in store to address and improve these subjects:Concent service: Finalization and launch to increase network securityGPU support will be added to Golem (right now we\u2019re only supporting CPU)Proprietary software support: this is key to achieve the goal of onboarding more rendering software.New use cases: We will explore both by doing custom integrations and increasing Golem\u2019s versatility by simplifying the process of software integration into our platform.Golem as a marketplace: Requestors & ProvidersAs it is common knowledge, Golem is a p2p marketplace. Markets are based\u200a\u2014\u200aobviously\u200a\u2014\u200aon supply and demand. If we all want to keep this going, we need to have both sides of the equation active. Golem as a company cannot control the marketplace\u200a\u2014\u200athe Requestors and Providers will keep it running and will generate a broader, stronger and more active GNT-based shared economy.TL;DR? Well, a slow-down on the marketplace is expected as requestors get their tasks completed and more providers jump into the network. Which means that even though you might have earned GNT now, in the near future, you may have to wait a bit longer.For a p2p marketplace to roll out accordingly, we all need to spread the word. We need more providers. We need more requestors. We need plenty of tasks!We would like to invite Blender artists to continue experimenting with our dApp. We are eager to see how we can contribute through our decentralized vision, to make your rendering cheaper and faster.Our biz-dev and communications teams are working 24/7 on raising awareness and getting more people to join our platform. But we need the community to step up as well, and engage and contribute.AMAs announcementFinally, we would like to announce that our bi-monthly AMAs will be taking place next Wednesday, April 25th. Please see the Reddit announcement for more details. We are getting ready for questions, and we look forward to giving the best answers possible.", "responses": "6"}, {"title": "Our thoughts on\u00a0Ethereum", "author_name": "KPCB Edge", "link": "https://medium.com/@kpcb_edge/our-thoughts-on-ethereum-31520b164e00?source=search_post", "post_date": "Nov 24, 2015", "readtime": "8 min read", "upvotes": "110", "content": "Our thoughts on\u00a0EthereumKPCB EdgeBlockedUnblockFollowFollowingNov 24, 2015As investors with a focus on blockchain technology, we\u2019ve seen quite a few companies building on top of the Ethereum ecosystem since the developer preview launch a few months ago. For the unfamiliar, Ethereum is \u201ca decentralized platform that runs smart contracts.\u201d You can learn more about Ethereum on the Ethereum website, and there\u2019s a good summary of its most important characteristics on Wikipedia.We wanted to familiarize ourselves with Ethereum the way we know best\u200a\u2014\u200aby making some demos and seeing what\u2019s possible on the platform. Here, we\u2019re sharing some simple instructions on how to get started with Ethereum and some thoughts on why we\u2019re excited by it. We\u2019ve built a few more complex contracts as well, which we\u2019ll talk about in a follow-up post in a couple of weeks.Though Ethereum is still quite early, we\u2019re extremely excited by the kinds of applications it makes possible, and we\u2019re also excited by the strong developer adoption we\u2019ve seen firsthand in the last few months. We believe Ethereum is a powerful addition to the Blockchain development toolchain, giving users access to distributed computation and mutable storage that is censorship-resistant and tamper-evident.We\u2019re also encouraged by projects to build alternative implementations of the Ethereum VM (EVM) on other blockchains, such as Rootstock or Counterparty. We think these are early signs of convergence towards EVM bytecode as a common low-level language for contract programming, but only time will tell if EVM bytecode becomes the dominant contract language, and if Ethereum remains the most commonly used implementation of the EVM. From our perspective, the existence of projects like this could reduce the platform risk founders are exposed to when building their product on Ethereum.We\u2019re still most excited by companies using blockchains as a deliberate architectural choice in their stack, but in a way that\u2019s invisible to end users. From a user\u2019s perspective, we believe these services will be cheaper, faster, and more secure than ever before (more in the introductory blog post for our blockchain technology investing thesis). We think Ethereum as a software platform significantly adds to the potential ways blockchain technology could be used in an application\u2019s technology stack.If you\u2019re a founder at a company using blockchain technology, we\u2019d love to chat!Setting up\u00a0EthereumNote: These demos were written / executed on an OS X machine, but the same instructions should work without modification on Linux and with minor tweaks on Windows. These instructions assume a basic familiarity with what Ethereum is, how blockchains work, and software engineering more generally.To get started with Ethereum, install the Ethereum go client by following these instructions. With Ethereum installed, you should start syncing the Ethereum blockchain to your machine by running the `geth` command with no arguments in a shell (meant to be run as a daemon, but for local testing I found running it in an interactive shell to work fine). Syncing the blockchain takes quite a while; you can check your progress by looking at the block count at the end of each log messages from the daemon and comparing it to the total on this Ethereum dashboard. The rest of this demo assumes you have the daemon running, so leave this shell open in the background.While your blockchain is synchronizing, you can set up an Ethereum account locally. You will need to have some Ether, the currency that underpins Ethereum, stored in a local wallet to be able to deploy contracts. Ether is the currency of computation in Ethereum, and is spent to deploy / interact with contracts in units of \u201cgas\u201d, which has a dynamic price set by the network. Current gas price can be checked by looking at the Ethereum dashboard from above.In a second shell, run `geth account new`, set a password for the account, and note the address returned. There\u2019s more on account creation / management in the Ethereum documentation.Now, you will need to purchase a bit of Ether using an exchange like Poloniex or Kraken (easier if you already have some BTC you can send there and exchange for Ether), or acquire some through one of the other methods described on the Ethereum website, and send it to your local account address. Very little Ether is needed to get started\u200a\u2014\u200arunning the demos below could easily be done with 0.1 Ether, which costs about $0.10 at the time of writing.Once your blockchain has finished syncing, which can be verified by checking your block count against the Ethereum dashboard linked above, and you have a bit of Ether deposited in your new account, you\u2019re ready to deploy your first contract. You can check your balance by opening the Ethereum console; type \u201cgeth attach\u201d in a new shell, and run `web3.fromWei(eth.getBalance(\u201cACCOUNT_ADDRESS\u201d), \u201cether\u201d);` where ACCOUNT_ADDRESS is the address you got earlier.`geth attach` is your entry point to the Ethereum javascript console, which provides a basic javascript execution environment with some Ethereum extensions, A full command reference can be found on the Ethereum wiki.Deploying your first\u00a0contractTo familiarize yourself with the contract deployment process, I suggest deploying a simple Hello World contract, which I took from the very extensive Ethereum contract tutorial:contract mortal {  /* Define variable owner of the type address*/  address owner;  /* this function is executed at initialization and sets the owner of the contract */  function mortal() { owner = msg.sender; }  /* Function to recover the funds on the contract */  function kill() { if (msg.sender == owner) suicide(owner); }}contract greeter is mortal {  /* define variable greeting of the type string */  string greeting;  /* this runs when the contract is executed */  function greeter(string _greeting) public {    greeting = _greeting;  }  /* main function */  function greet() constant returns (string) {    return greeting;  }}This contract is written in Solidity, a Javascript-like language which compiles to bytecode that can run on the Ethereum virtual machine. All that the greeter contract can do is return the string we provide, in this case \u201cHello, world!\u201d or something similar. The \u201cmortal\u201d type gives us a straightforward way to terminate the contract when we\u2019re finished with it, which will send any funds in the contract back to the address that originally created it. The mortal contract could be used as the base for any other contracts you may write\u200a\u2014\u200aSolidity supports a complete inheritance model for contracts.To deploy this contract, you will need to compile it to EVM bytecode. To do this securely you should build a compiler locally, because an online compiler could be compromised to produce code you don\u2019t expect it to. For demo purposes, however, using the web-based Solidity compiler should be fine.Assuming you are using the web-based compiler, all you need to do is paste the greeter code into the editor to get the compiled bytecode on the right. Conveniently, the right pane also includes a Javascript snippet you can run in the Ethereum JS console, titled \u201cWeb3 deploy\u201d. Note that you will need to fill in a greeting at the top of that snippet for it to run in the Ethereum console. You will also need the \u201cInterface\u201d snippet later.Now, open a new Ethereum JS console by running `geth attach` in a new shell, and paste in the Web3 deploy snippet. Within a few minutes, you should see a message stating \u201cContract mined!\u201d along with the address the contract now lives at. You just deployed your first Ethereum contract\u200a\u2014\u200acongratulations!You should be able to look up your contract through public block explorers like https://etherchain.org/ by searching the transaction hash, and even see the code that was deployed. Note down this address as you will need it soon to interact with the contract.To interact with the contract, in the same console, run `greeter.greet();` and you should get back the string you entered earlier. Because getting the greeting doesn\u2019t run any code on the blockchain, this operation costs 0 gas. The `greeter` object was instantiated when you pasted in the Web3 deploy code snippet, but can also be set up independently, so anyone can run it without needing a local copy of the source code.To show how a friend could run the same greeter contract on their local Ethereum node, we can run the same contract from a fresh console environment. Close your Ethereum console by running `exit`, and run `geth attach` again to reopen it. To verify that you\u2019re in a clean console environment, run `greeter.greet()` and you should get a reference error that the name greeter is not defined. Now, instantiate a new instance of the greeter by running `var greeter = eth.contract(ABI).at(\u201cAddress\u201d);`, where ABI is the \u201cInterface\u201d snippet the solidity compiler produced earlier, and Address is the address the contract was mined at. Now, you can run \u201cgreeter.greet()\u201d and get back the same message you got earlier.An important note here is that the string you specified is now stored in the blockchain, and accessible by anyone; you could even create a function allowing only you as the contract owner to change it.I have another greeter at address \u201c0xb55f89461a273f8dbde74a92cdc752d86427476b\u201d, and it uses the same \u201cinterface\u201d snippet that the Solidity web compiler will give you for your greeting contract. For bonus points, you can see the message I wrote in my contract by running the greet function for it too.This may seem trivial, and from a developer\u2019s perspective it is; you\u2019re running a very simple hello world program and it\u2019s producing the output you expect. What\u2019s really interesting here is that this code now lives on the Ethereum blockchain, and has access to storage and computation that is highly distributed, censorship-resistant, and tamper-evident, without requiring you as a developer to build your own distributed infrastructure.To kill your contract, run `greeter.kill.sendTransaction({from:\u201dACCOUNT_ADDRESS\u201d})`, where ACCOUNT_ADDRESS is the address you got when creating your account earlier. After this, your greeter can no longer be run.I glossed over some details here, but hopefully you\u2019re intrigued enough to learn more! I wasn\u2019t able to cover some of the projects we built, so we\u2019ll publish a follow-up post in a few weeks.", "responses": "10"}, {"title": "The Ethereum Developer Essential Reading\u00a0List", "author_name": "Steven McKie", "link": "https://medium.com/blockchannel/the-ethereum-developer-essential-reading-list-4fe5d788b294?source=search_post", "post_date": "Nov 6, 2017", "readtime": "3 min read", "upvotes": "579", "content": "The Ethereum Developer Essential Reading\u00a0ListCrucial Links and Resources to Get Started\u00a0QuicklySteven McKieBlockedUnblockFollowFollowingNov 6, 2017Thanks to Cent I was able to quickly compile this excellent list of resources for individuals seeking to learn the ins and outs of Solidity/Ethereum smart contract development. https://beta.cent.co/question/251.I like to compile these resources so you don\u2019t have to take the time to scour for them online with countless Google searches. I love reading things in blog/article form as most textbooks and tutorials can sometimes inundate you with unnecessary or out of date information (my OCD hates to learn things irrelevant from the past).If you\u2019re a developer, you\u2019ve likely already skipped this wall of text and moved on to clicking links; nice hustle. You can also try out Zastrin.com (use code \u201cBlockChannel\u201d for 50% off all available courses).ResourcesVideosDecypher MediaI make screencasts about software development. If you like these vids, feel free to send Ether donations to\u2026www.youtube.comDecypher TV - Ethereum Screencasts for DevelopersEdit descriptiondecypher.tvBlockChannelThe Anatomy of ERC20What\u2019s on the Inside of Ethereum\u2019s Most Popular Contractmedium.comSolidity Learning: State Specifiers and STATICCALLUpcoming Changes to Solidity and How They Functionmedium.comSolidity Learning: Revert(), Assert(), and Require() in Solidity, and the New REVERT Opcode in the\u2026Upcoming Changes to Solidity and How They Functionmedium.comA Crash Course in Mechanism Design for Cryptoeconomic ApplicationsUnderstanding the Basic Fundamentals of \u201cCryptoeconomics\u201dmedium.comOthersEthereum Smart Contract Best PracticesEdit descriptionconsensys.github.ioHomeDapps for Beginners Welcome to the temporary home of learning materials relating to development on ethereum. Inside you\u2026dappsforbeginners.wordpress.comethereum/wikiwiki - The Ethereum Wiki -github.comSolidity - Solidity 0.4.19 documentationSolidity is a contract-oriented, high-level language whose syntax is similar to that of JavaScript and it is designed\u2026solidity.readthedocs.ioTruffleFramework.com - Truffle SuiteYour Ethereum Swiss Army Knifetruffleframework.comFull Stack Hello World Voting Ethereum Dapp Tutorial\u200a\u2014\u200aPart 1In my previous post, I explained the high level architecture of Ethereum platform comparing it to a web application. As\u2026medium.comMutation testing support for Solidity \u00b7 Issue #1172 \u00b7 ethereum/solidityWith the failure of TheDAO, it became evident that writing even a relatively simple smart contract correctly is a\u2026github.compirapira/bamboobamboo - Bamboo: a morphing smart contract languagegithub.comEthereum Blog - Promoting a free, decentralized and open futurePromoting a free, decentralized and open futureblog.ethereum.orgEthereum Community ForumA Next-Generation Smart Contract and Decentralized Application Platformforum.ethereum.orgethereum/viperviper - New experimental programming languagegithub.comAn Introduction to LLL for Ethereum Smart Contract DevelopmentEthereum is hot. Very hot. As I write this, Ether has just hit the $100 mark. For this and other reasons there are now\u2026media.consensys.netSolidity Assembly - Solidity 0.4.19 documentationFor more fine-grained control especially in order to enhance the language by writing libraries, it is possible to\u2026solidity.readthedocs.ioandrolo/solidity-workshopsolidity-workshop - Educational material for Solidity. Complement to solidity.readthedocs.comgithub.comEthereum Stack ExchangeQ&A for users of Ethereum, the decentralized application platform and smart contract enabled blockchainethereum.stackexchange.comRemix - Solidity IDEEdit descriptionethereum.github.ioEthereum Builder's GuideEdit descriptionethereumbuilders.gitbooks.ioHow To Learn Solidity: The Ultimate Ethereum Coding GuideThis Guide will walk you step-by-step in learning Solidity. It's a pretty simple language to learn. The Ultimate\u2026blockgeeks.comLearn Solidity in Y MinutesEdit descriptionlearnxinyminutes.comLearn Solidity: Basics of Solidity By ExampleIn this post, we will learn the Solidity language by going through two example. Then we will dig deeper into each\u00a0\u2026www.toshblocks.comEthereum for web developersI have been learning about Ethereum blockchain platform for some time and the more I learn, the more exciting it looks\u2026medium.comSolidity - Solidity 0.4.19 documentationSolidity is a contract-oriented, high-level language whose syntax is similar to that of JavaScript and it is designed\u2026solidity.readthedocs.ioThe Hitchhiker\u2019s Guide to Smart Contracts in EthereumUpdated Oct 6th 2017, for Truffle v3.4.11 and Solidity v0.4.15.blog.zeppelin.solutions5 Essential Ethereum Dapp ToolsGetting started writing dapps is hard. You've got a lot of moving pieces, and half of them are in beta release. It's\u2026karl.tech11 Best Ethereum Development Tools to Grow Your StackBlockchain tech is getting chief officers hot and heavy. When it\u2019s your turn to show them your stack, will you distress\u2026hackernoon.com", "responses": "4"}, {"title": "Ethereum Development Crash Course Part\u00a0One:", "author_name": "Connor Wiseman", "link": "https://medium.com/bitfwd/ethereum-development-crash-course-part-one-327dee16878b?source=search_post", "post_date": "Jul 19, 2018", "readtime": "10 min read", "upvotes": "403", "content": "Ethereum Development Crash Course Part\u00a0One:The following series of articles will be a general overview of the Ethereum ecosystem, hows it works and how you can work with\u00a0it.Connor WisemanBlockedUnblockFollowFollowingJul 19, 2018#2030Part One:In Part One of this series, we will cover the basic fundamental knowledge of Ethereum, what is it, how does it work, what are the primitives of Ethereum and its structure.What is Ethereum\u00a0\ud83c\udf0eEthereum is an open source distributed ledger that was originally proposed in late 2013 and then released to the public in 2015 by a Canadian called Vitalik Buterin. He was originally born in Russia and then he migrated as a child to North America. With an IQ of 150+ and a strong technical mind, he came up with the idea for Ethereum after analysing the bitcoin blockchain and queried if things could be taken further by making a blockchain that is Turing complete, and therefore be able to read scripts of code and run applications in a trustless manner.Turing complete\u200a\u2014\u200aMeans that the computer or machine can solve a mathematical equation given the correct algorithm along with the necessary time and memory.How does Ethereum work\u00a0?\u00a0\u2699\ufe0fEthereum works as a p2p decentralised protocol whereby all participants in the network will connect to each other through the Internet to share and retrieve the state of the blockchain.Ethereum is built upon a virtual machine called the EVM (Ethereum Virtual Machine) which allows smart contracts to be compiled down into EVM compatible bytecode and deployed to the blockchain for execution. While the EVM itself is a 256 bit register stack which is designed to run the same code exactly as intended time after time.Once a piece of code is deployed to the Ethereum blockchain, it lives there forever in bytecode and can be accessed through a unique contract address which is given to each and every contract deployed to the blockchain. When you send a transaction to the contract address it will get propagated to the network of miners, whom then have to race to perform a mathematical equation where the outcome is within a certain range. This is called a consensus mechanism which is commonly known as Proof-of-work (PoW) once a miner hits the number in required range they can then add their block to the chain to finalise all the transactions within that block. The same actions are carried out for all transaction that happen on the Ethereum blockchain unless they are reverted due to gas fees or a requirement error.nodes/miners \ud83d\udcbb\u00a0\u26cfNodes and miners are very similar in the way they operate apart from one factor mining. Mining nodes will compete against each other in a race to find a number which gives them the right to add a new block to the chain. In Ethereum there are 3 kinds of nodes you can sync with either the Go-Ethereum software (geth) or the Parity software, the go-ethereum node is the most commonly used in the Ethereum eco-system, while Parity is still a big part of Ethereum the community is very much geared towards developing with Go-Ethereum.All kinds of nodes are considered participants in the network and will hold either a full copy of the blockchain from the genesis block (The first block in the chain) or a lite version of the blockchain whereby the state of the node will only hold the current state of the blockchain and retrieve the necessary data from the merkle trees of full archive nodes when in sync mode.To set up a node on your machine please download the binary folders for Go-Ethereum (https://geth.ethereum.org/install/). Once downloaded you can start to use the following commands in your terminal or powershell to begin an instance of the blockchain:geth console - for a full node.              ChainId - 1geth --light console - for a light node.     ChainId - 1Networks \ud83d\udef0There are also different networks in Ethereum, such as Ropsten, Rinkeby and Kovan. The Ropsten, Rinkeby and Kovan networks are test networks for trials and development of the blockchain. The Ropsten network operates on the same consensus mechanism as the main chain (Proof-of-work) but the other two are Proof-of-Authority networks, which means only certain nodes can mine blocks that get put onto the chain. To set up a Ropsten, Rinkeby or Kovan node you would use the same command as the main net although this time you would need to switch the network name with the word \u201cconsole\u201d.Use the following commands to start a test network node:geth --testnet - for the ropsten network.   ChainId - 3geth --rinkeby - for the rinkeby network.   ChainId - 4geth --dev console - for a local developer console.   ChainId - NONETo access the kovan network you must first download Parity and then use:parity --chain=kovan - for the kovan network.   ChainId - 42Go-Ethereum nodePrimitives of Ethereum\u00a0\u2666\ufe0fEthereum holds most of the same common primitives of all the public blockchains such as public key cryptography, cryptographic hash functions, merkle trees and forks. Now you may think these concepts sound a little technical or scary but please don\u2019t fear for the Wiseman is here, to guide you through and once you understand the following you shall be well on your way to becoming a blockchain wizard! Because nearly all of the public blockchains will be using these primitives. So things from here on out should not be too cumbersome to understand when conducting research or just having a little read up on the latest decentralised protocol.Public key cryptography \ud83d\udd11Public key cryptography also known as asymmetric cryptography, provides users with a key pair that is one public key and one private key, these keys are derived from the elliptical curve ecp256k1 algorithm which is used for all of the Ethereum addresses that operate on all the networks. These key pairs provide the user with two features:Encryption: Whereby only the private key can decrypt a message that was encrypted with the corresponding public key.Authentication: So that a public key can verify ownership of a private key in the form of a digital signature.The public and private keys come in hexadecimal form and will look likepublic key - 0x84c3492F47bF06C0F994E468C364CF52b3676d0d private key - 83d01607d74d9b100d356d68ea2c7ac795aca429bf20f305f63d484313a1e60bCryptographic hash functions \ud83d\udd10A cryptographic hash function is a hash functions which takes an input or \u2018message\u2019 and returns a fixed size alphanumeric string. The string is called the hash value, message digest, digital fingerprint, digest or checksum.A hash function has 3 main properties.1: It is extremely easy to calculate a hash of any given data. (Easy to calculate forwards)2: It is extremely computationally difficult to calculate an alphanumeric text that from a given hash. (Near impossible to calculate backwards)3: It is extremely unlikely that two slightly different messages will have the same hash. (Collision resistant)Why use hash functions\u00a0?\u00a0\ud83d\udca1Ethereum uses hash functions to provide anonymity to the users of the blockchain and also give them a certain level of privacy so the whole world does not know there business. Hash functions give the blockchain the power to hide messages, identity and various other forms of important information, which people may not want public, hash functions also provide a way of certifying the integrity of the data that is on the blockchain. How this happens is through digital signatures whereby the cryptographic key pair will sign the message or data being added to the blockchain. And then the hash function will spit out a hash that has the message or data and the public key from the cryptographic key pair encrypted into the digest to be added to the blockchain. Then when data or message is needed to be revealed the owner of the public/private key can decrypt the digest with their private key to give a proof of truth or ownership to the entity or person in which the digest is being revealed to.Merkle trees\u00a0\ud83c\udf33Merkle trees in computer science and cryptography are used to store, handle and transfer data between computers on a p2p network. They help ensure that the data received from other peers in a p2p network is undamaged and unaltered, they can also check to make sure other peers in the network are not behaving maliciously and sending or creating fake data on the blockchain. They work by having every leaf node labelled with the hash of a data block, while every non-leaf node is labelled with the cryptographic hash if the labels of its child nodes. Hash trees allow for efficient and secure verification of the contents of large data structures, which is useful for Ethereum because the sheer amount of data that gets added to the blockchain does have the potential to be manipulated by a hacker. But in the case of a merkle tree if one hash changes then all of the hashes change, and the network will know that the security of the blockchain has been compromised.Blockchain forks\u00a0\ud83c\udf74When talking about blockchains there are two types of forks, hard forks and soft forks. When ever a fork happens it means that the chain-data has been compromised through an act of manipulation on the network, a hack where as funds have been lost or stolen, when two parties of network nodes decide on different way the chain should operate or when two blocks are found by the network at the same time but propagated across a different subset of nodes.A worst case scenario for Ethereum or atleast the one the community wishes to avoid as much as they can is a hard fork, this is because when a hard fork happens a whole new chain is started and leaves the old chain behind. When this happens the integrity of the blockchain is compromised and all the data from the chain that people are leaving behind is now in-accessible on the newly forked chain. You may have heard about the DAO hack which resulted in $70,000,000 worth of ether being stolen from the contract, this was because of a recursive call vulnerability which the developers did not see and the then hacker exploited.http://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/The DAO hack was resolved by a hard fork and the stolen ETH would be paid back to the investors from whom it was stolen. A few high profile members of the community helped in hacking back some of the stolen ETH from the hackers account to bring back to the community.A soft fork on the other hand only happens when a new piece code is being added to the protocol or more commonly when, two nodes are mining on opposite sides of the globe, they both create a new block and hit the required ranged number to add the block to the chain. The new block will then be propagated across the network and added to the chain by all the connecting peers one after another until. You hit a point where you have a node trying to add two blocks with the same number from different miners, what happens is the the blocks both get added to the chain but only the block that was distributed across more of the network than the other will have the next block added on top.Now you may be thinking what there are two blocks but only one block continues to get mined on but what happens to the other block\u00a0?The other block will continue to get mined on as-well but only until the mining nodes of the network realise that there is a fork in the chain and that they must stop mining on the smallest chain. The miners will realise this by the hashing power they are using compared to the rest of the network.Also they will be breaking one of the 3 rules of mining a blockchain which are1: Miners must always mine on the chain they are given first.2: Miners must always mine on the longest chain.3: Miners must always hit a number within a certain range before adding the next block to the chain.The structure of Ethereum. \ud83c\udfdbEthereum as an organisation or foundation holds a flat hierarchy with the main point of direction coming from the creator Vitalik Buterin. The main aim of governance in Ethereum is to operate as a decentralised autonomous organisation or DAO, that allows anyone to put forth proposals (EIP\u2019s/Ethereum Improvement Proposal) contribute to the code base and help with community projects such as Casper the friendly ghost also known as the Ethereum Proof-of-Stake(PoS) consensus mechanism, Plasma, Sharding, State channels, Token-economics, zk-starks & snarks and many more.Ethereum also has created the EEA (Ethereum Enterprise Alliance) which is a nonprofit organisation that has over 150 members and partnerships which include blockchain start-ups, fortune 500 companies and researchers such as Toyota research institute, J.P Morgan chase, Samsung SDS, ING, Microsoft, Intel, Consensys and Mastercard. Some of these companies may be as corporate as they come but with big players and influential partners the EEA will be able to succeed in bringing the world the decentralised web3.0. Along with countless new opportunities for innovation in places and peoples lives that were never possible before Ethereum.This kind of structure will also bring a new way for the world to interact with its leaders and monopolies, through a concept of on chain governance and voting, whereby the demographics of the Ethereum foundation, the EEA and the planet as a whole will not be as it is today, but it will be a place where the people of the world will be able to use the blockchain to vote on matters or problems they feel need to be fixed with a swift and diligent manner.As always thanks for reading and I hope you enjoyed, please don\u2019t forget to clap and leave a review! \ud83d\udc4f \u270c\ufe0f\ud83d\ude18 \ud83d\ude80Stay tuned for part two #SoonLand \ud83c\udf1a \ud83d\udcab \ud83d\udee9", "responses": "3"}, {"title": "Introducing TypeChain\u200a\u2014\u200aTypescript bindings for Ethereum smart contracts", "author_name": "Chris Kaczor", "link": "https://blog.neufund.org/introducing-typechain-typescript-bindings-for-ethereum-smart-contracts-839fc2becf22?source=search_post", "post_date": "Dec 11, 2017", "readtime": "4 min read", "upvotes": "827", "content": "Introducing TypeChain\u200a\u2014\u200aTypescript bindings for Ethereum smart contractsChris KaczorBlockedUnblockFollowFollowingDec 11, 2017As you might have read, we decided to use Typescript as the main language for our projects at Neufund. It brings improved type safety and provides development confidence not otherwise available in Javascript.Even though Typescript can ensure correctness of your code, it\u2019s helpless when 3rd party libraries come into play. For external dependencies written in Javascript, you need to provide typings, i.e. type information about available functions and types. Some libraries (especially those written in TS) have typings build in. For others you can find typings on npm. But the situation becomes even more complicated when you work with dynamically generated types such as smart contract wrappers.With TypeChain, Typescript loves Ethereum Smart ContractsDynamic typing\u00a0hellUsually to interact with a smart contract on the Ethereum blockchain you use Web3js: you pass an ABI and an address, you call methods, and create transactions regarding the given smart contract. Unfortunately, such dynamic interfaces\u200a\u2014\u200acreated during runtime\u200a\u2014\u200acan\u2019t be expressed in the Typescript type system.Of course, on top of that it\u2019s hard to work with such wrappers, there is no code completion, and API is not intuitive.\u201cWhat was the name of that function again? Is this a constant function or do I need to create a transaction?\u201dPersonally, I lost a lot of time debugging cryptic error messages when I simply forgot to specify gas amount.We can do better than this.Enter TypeChainTypeChain is here to solve all these problems. It uses provided ABI files to generate typed wrappers for smart contracts. It still uses Web3js under the hood, but on the surface it provides robust, type safe API with support for promises and much more.They see me typin\u2019, they\u00a0hatin\u2019Let\u2019s take a look at a practical example. Here is our smart contract:contract CounterContract {  uint public counter;  function DumbContract() public {    counter = 0;  }  function counterWithOffset(uint offset) public constant returns (uint sum) {    return counter + offset;  }  function countup(uint by) public {    counter += by;  }}Generated wrapper:import { BigNumber } from \"bignumber.js\";import {  TypeChainContract,  promisify,  ITxParams,  IPayableTxParams,  DeferredTransactionWrapper,} from \"./typechain-runtime\";export class DumbContract extends TypechainContract {  public readonly rawWeb3Contract: any;  public constructor(web3: any, address: string | BigNumber) {    const abi = [      //ABI    ];    super(web3, address, abi);  }  static async createAndValidate(web3: any, address: string | BigNumber): Promise<DumbContract> {    const contract = new DumbContract(web3, address);    const code = await promisify(web3.eth.getCode, [address]);    if (code === \"0x0\") {      throw new Error(`Contract at ${address} doesn't exist!`);    }    return contract;  }  public get counter(): Promise<BigNumber> {    return promisify(this.rawWeb3Contract.counter, []);  }  public counterWithOffset(offset: BigNumber | number): Promise<BigNumber> {    return promisify(this.rawWeb3Contract.counterWithOffset, [offset.toString()]);  }  public countupTx(by: BigNumber | number): DeferredTransactionWrapper<ITxParams> {    return new DeferredTransactionWrapper<ITxParams>(this, \"countup\", [by.toString()]);  }}You can use it like this:// create new instance of contract wrapper and assert that contract exists on blockchain (useful during development)const dumbContract = await DumbContract.createAndValidate(web3, contractAddress);// call getterawait dumbContract.counter;// call constant methodawait dumbContract.counterWithOffset(2);// create transactionawait dumbContract.countupTx(2).send({    from: accounts[0],    gas: 10000,});// you can easily get tx dataawait dumbContract.countupTx(2).getData();Thanks to our generated wrappers, code completion just works and Typescript compiler, as well as tslint, can do their jobs to ensure type safety (btw. check out TypeStrict project for achieving maximum type safety).Be aware: we strongly advise against committing generated files to your version control system! Make TypeChain part of your build process (e.g. by using post-install hook) and do not edit generated files directly. When you do this, if you ever change ABIs, the Typescript compiler will find any breaking changes for you. How cool is that?\u00a0:)Customizing generated wrappersOften ABI files don\u2019t convey all the necessary information about a contract interface and you need to customize generated files. The same rule applies here: do not edit files directly. Instead, extend the generated contract with your\u200a\u2014\u200amore specific\u200a\u2014\u200aimplementation.We are also evaluating different, more declarative ways of customizing generated wrappers, like API files which would add semantics to ABI files. You could for example specify that a given uint represents a timestamp and should be parsed as moment date.We hope for community input about this as we move forward. This is where you come in: help us by suggesting improvements and providing feedback!SummaryTypeChain saves programmers from writing lots of repetitive code and provides type safety at the same time. During the creation of our commitment app (which is, btw, finishing in less then a week) we used early versions of TypeChain. It has already proved itself to be useful and now we hope that other teams can benefit from our efforts.For more information, head to our Github page\u200a\u2014\u200aTypeChain.", "responses": ""}, {"title": "", "author_name": "Jim McDonald", "link": "https://medium.com/@jgm.orinoco/ethdns-an-ethereum-backend-for-the-domain-name-system-d52dabd904b3?source=search_post", "post_date": "Jan 22, 2018", "readtime": "6 min read", "upvotes": "643", "content": "EthDNS: an Ethereum backend for the Domain Name\u00a0SystemJim McDonaldBlockedUnblockFollowFollowingJan 22, 2018", "responses": "6"}, {"title": "A Definitive List of Ethereum Developer Tools", "author_name": "ConsenSys", "link": "https://media.consensys.net/an-definitive-list-of-ethereum-developer-tools-2159ce865974?source=search_post", "post_date": "Feb 11", "readtime": "13 min read", "upvotes": "837", "content": "A Definitive List of Ethereum Developer ToolsA guide to available tools, components, frameworks, and platforms for developing applications on Ethereum.ConsenSysBlockedUnblockFollowFollowingFeb 11For any developer\u200a\u2014\u200awhether you\u2019re a wide-eyed Web3 novice or a grizzled OG crypto-anarchist tech overlord\u200a\u2014\u200aGithub is your friend. The ConsenSys Github in particular features perhaps the most definitive repository for Ethereum dev tools you\u2019ll find on the entire Internet. Whether it\u2019s the basics, coding languages, IDEs, APIs, ABIs, frameworks, best practices, smart contract standards, testing tools, or faucets, the ConsenSys Github has what you need to start building decentralized apps on the Ethereum blockchain now.Creation of this list was spurred by product managers at ConsenSys who saw a need for better sharing of tools, development patterns, and components amongst both new and experienced blockchain developers. If you\u2019re ready to delve into the wormhole, get scrolling! To stay updated on all things ConsenSys and Ethereum, sign up for the weekly newsletter and stay abreast of all the latest updates and news.New developers Start\u00a0Here!Solidity\u200a\u2014\u200aThe most popular smart contract language.Truffle\u200a\u2014\u200aMost popular smart contract development, testing, and deployment framework. Install the CLI via NPM and start here to write your first smart contracts.Metamask\u200a\u2014\u200aChrome extension wallet to interact with Dapps.Truffle boxes\u200a\u2014\u200aPackaged components for the Ethereum ecosystemEthHub.io\u200a\u2014\u200aComprehensive crowdsourced overview of Ethereum- its history, governance, future plans and development resources.Infura\u200a\u2014\u200aScalable, secure, and reliable access to the Ethereum network.Developer ToolsDeveloping Smart ContractsSmart Contract LanguagesSolidity\u200a\u2014\u200aEthereum smart contracting languageBamboo\u200a\u2014\u200aA morphing smart contract languageVyper\u200a\u2014\u200aNew experimental pythonic programming languageLLL\u200a\u2014\u200aLow-level Lisp-like LanguageFlint\u200a\u2014\u200aNew language under development with security features including asset types, state transition, and safe integersFrameworksTruffle\u200a\u2014\u200aMost popular smart contract development, testing, and deployment framework. The Truffle suite includes Truffle, Ganache, and Drizzle. Deep dive on Truffle hereEmbark\u200a\u2014\u200aFramework for DApp developmentWaffle\u200a\u2014\u200aFramework for advanced smart contract development and testing, small, flexible, fast (based on ethers.js)Dapp\u200a\u2014\u200aFramework for DApp development, successor to DApplePopulus\u200a\u2014\u200aThe Ethereum development framework with the most cute animal picturesEtherlime\u200a\u2014\u200aethers.js based framework for Dapp deploymentParasol\u200a\u2014\u200aAgile smart contract development environment with testing, INFURA deployment, automatic contract documentation and more. It features a a flexible and unopinionated design with unlimited customizability0xcert\u200a\u2014\u200aJavaScript framework for building decentralized applicationsIntegrated Developer EnvironmentsRemix\u200a\u2014\u200aWeb IDE with built in static analysis, test blockchain VM.Superblocks Lab\u200a\u2014\u200aWeb IDE. Built in browser blochain VM, Metamask integration (one click deployments to Testnet/Mainnet), transaction logger and live code your WebApp among many other features.Atom\u200a\u2014\u200aAtom editor with Atom Solidity Linter, Etheratom, autocomplete-solidity, and language-solidity packagesPragma\u200a\u2014\u200aVery simple web IDE for solidity, and auto-generated interfaces for smart contracts.Vim solidity\u200a\u2014\u200aVim syntax file for solidityVisual Studio Code\u200a\u2014\u200aVisual Studio Code extension that adds support for SolidityIntellij Solidity Plugin\u200a\u2014\u200aOpen-source plug-in for JetBrains IntelliJ Idea IDE (free/commercial) with syntax highlighting, formatting, code completion etc.YAKINDU Solidity Tools\u200a\u2014\u200aEclipse based IDE. Features context sensitive code completion and help, code navigation, syntax coloring, build in compiler, quick fixes and templates.Eth Fiddle\u200a\u2014\u200aIDE developed by The Loom Network that allows you to write, compile and debug your smart contract. Easy to share and find code snippets.Test blockchain networksGanache\u200a\u2014\u200aApp for test Ethereum blockchain with visual UI and logsKaleido\u200a\u2014\u200aUse Kaleido for spinning up a consortium blockchain network. Great for PoCs and testingPantheon Private Network\u200a\u2014\u200aRun a private network of Pantheon nodes in a Docker container ** Orion\u200a\u2014\u200aComponent for performing private transactions by PegaSys ** Artemis\u200a\u2014\u200aJava implementation of the Ethereum 2.0 Beacon Chain by PegaSysCliquebait\u200a\u2014\u200aSimplifies integration and accepting testing of smart contract applications with docker instances that closely resembles a real blockchain networkLocal Raiden\u200a\u2014\u200aRun a local Raiden network in docker containers for demo and testing purposesPrivate networks deployment scripts\u200a\u2014\u200aOut-of-the-box deployment scripts for private PoA networksLocal Ethereum Network\u200a\u2014\u200aOut-of-the-box deployment scripts for private PoW networksEthereum on Azure\u200a\u2014\u200aDeployment and governance of consortium Ethereum PoA networksgetho\u200a\u2014\u200aDApp development platform including PoA private blockchain and Smart Contract testing tool.Ethereum on Google Cloud\u200a\u2014\u200aBuild Ethereum network based on Proof of WorkTest Ether\u00a0faucetsRinkeby faucetKovan faucetRopsten faucetUniversal faucetCommunicating with\u00a0EthereumFrontend Ethereum\u00a0APIsWeb3.js\u200a\u2014\u200aJavascript Web3Eth.js\u200a\u2014\u200aJavascript Web3 alternativeEthers.js\u200a\u2014\u200aJavascript Web3 alternative, useful utilities and wallet featuresWeb3Wrapper\u200a\u2014\u200aTypescript Web3 alternativeEthereumjs\u200a\u2014\u200aA collection of utility functions for Ethereum like ethereumjs-util and ethereumjs-txflex-contract and flex-ether Modern, zero-configuration, high-level libraries for interacting with smart contracts and making transactions.ez-ens Simple, zero-configuration Ethereum Name Service address resolver.web3x\u200a\u2014\u200aA TypeScript port of web3.js. Benefits includes tiny builds and full type safety, including when interacting with contracts.Drizzle\u200a\u2014\u200aRedux library to connect a frontend to a blockchainTasit SDK\u200a\u2014\u200aA JavaScript SDK for making native mobile Ethereum dapps using React NativeSubproviders\u200a\u2014\u200aSeveral useful subproviders to use in conjunction with Web3-provider-engine (including a LedgerSubprovider for adding Ledger hardware wallet support to your dApp)web3-react\u200a\u2014\u200aReact framework for building single-page Ethereum dAppsVortex\u200a\u2014\u200aA Dapp-ready Redux Store. Smart and Dynamic background data refresh thanks to WebSockets. Works with Truffle and Embark.Strictly Typed\u200a\u2014\u200aJavascript alternativeselm-ethereumpurescript-web3Backend Ethereum\u00a0APIsWeb3.py\u200a\u2014\u200aPython Web3Web3.php\u200a\u2014\u200aPHP Web3Ethereum-php\u200a\u2014\u200aPHP Web3Web3j\u200a\u2014\u200aJava Web3Nethereum\u200a\u2014\u200a.Net Web3Ethereum.rb\u200a\u2014\u200aRuby Web3Web3.hs\u200a\u2014\u200aHaskell Web3KEthereum\u200a\u2014\u200aKotlin Web3Pyethereum\u200a\u2014\u200aThe Python core library of the Ethereum projectEventeum\u200a\u2014\u200aA bridge between Ethereum smart contract events and backend microservices, written in Java by KauriEthereumex\u200a\u2014\u200aElixir JSON-RPC client for the Ethereum blockchainEthContract\u200a\u2014\u200aA set of helper methods to help query ETH smart contracts in ElixirBootstrap/out of box\u00a0toolsTruffle boxes\u200a\u2014\u200aPackaged components for the Ethereum ecosystemPantheon Private Network\u200a\u2014\u200aRun a private network of Pantheon nodes in a Docker containerLocal Raiden\u200a\u2014\u200aRun a local Raiden network in docker containers for demo and testing purposesPrivate networks deployment scripts\u200a\u2014\u200aOut-of-the-box deployment scripts for private PoA networksParity Demo-PoA Tutorial\u200a\u2014\u200aStep-by-Step tutorial for building a PoA test chain with 2 nodes with Parity authority round consensusLocal Ethereum Network\u200a\u2014\u200aOut-of-the-box deployment scripts for private PoW networksKaleido\u200a\u2014\u200aUse Kaleido for spinning up a consortium blockchain network. Great for PoCs and testingThe Chain Abstraction Layer\u200a\u2014\u200aA flexible, modular library for developing disintermediated solutions across different blockchainsCheshire\u200a\u2014\u200aA local sandbox implementation of the CryptoKitties API and smart contracts, available as a Truffle BoxAragon CLI\u200a\u2014\u200aThe Aragon CLI is used to create and develop Aragon appsColonyJS\u200a\u2014\u200aJavaScript client that provides an API for interacting with the Colony Network smart contracts.ArcJS\u200a\u2014\u200aLibrary that facilitates javascript application access to the DAOstack Arc ethereum smart contracts.Ethereum ABI (Application Binary Interface) toolsABI decoder\u200a\u2014\u200alibrary for decoding data params and events from Ethereum transactionsABI-gen\u200a\u2014\u200aGenerate Typescript contract wrappers from contract ABI\u2019s.Ethereum ABI UI\u200a\u2014\u200aAuto-generate UI form field definitions and associated validators from an Ethereum contract ABIheadlong\u200a\u2014\u200atype-safe Contract ABI and Recursive Length Prefix library in JavaOne Click dApp\u200a\u2014\u200aInstantly create a dApp at a unique URL using the ABI.Truffle Pig\u200a\u2014\u200aa development tool that provides a simple HTTP API to find and read from Truffle-generated contract files, for use during local development. Serves fresh contract ABIs over http.Patterns & Best PracticesPatterns for Smart Contract DevelopmentDappsys: Safe, simple, and flexible Ethereum contract building blocks has solutions for common problems in Ethereum/Solidity, eg: Whitelisting, Upgradable ERC20-Token, ERC20-Token-Vault, Authentication (RBAC), provides building blocks for the MakerDAO or The TAO. It should be consulted before creating own, untested, solutions. Usage is described in Dapp-a-day 1\u201310 and Dapp-a-day 11\u201325OpenZeppelin: An open framework of reusable and secure smart contracts in the Solidity language. Likely the most widely-used libraries and smart contracts. It is Similar to Dappsys, but more integrated into Truffle frameworkBlog about Best Practices with Security AuditsAdvanced Workshop with AssemblySimpler Ethereum Multisig\u200a\u2014\u200aespecially section BenefitsCryptoFin Solidity Auditing Checklist\u200a\u2014\u200aA checklist of common findings, and issues to watch out for when auditing a contract for a mainnet launch.aragonOS: A smart contract framework for building DAOs, Dapps and protocolsUpgreadability: Smart contracts can be upgraded to a newer versionPermission control: By using the auth and authP modifiers, you can protect functionality so only other apps or entities can access itForwarders: aragonOS apps can send their intent to perform an action to other apps, so that intent is forwarded if a set of requirements are metUpgradebilityBlog von Elena Dimitrova, Dev at colony.iohttps://blog.colony.io/writing-more-robust-smart-contracts-99ad0a11e948https://blog.colony.io/writing-upgradeable-contracts-in-solidity-6743f0eecc88Researchblog von AragonLibrary driven developmentAdvanced Solidity code deployment techniquesOpenZeppelin on Proxy LibrariesInfrastructureEthereum ClientsPantheon\u200a\u2014\u200aJava client by PegaSysGeth\u200a\u2014\u200aGo clientParity\u200a\u2014\u200aRust clientAleth\u200a\u2014\u200aC++ clientPyethapp\u200a\u2014\u200aPython client using pyethereumTrinity\u200a\u2014\u200aPython client using py-evmEthereumjs\u200a\u2014\u200aJS client using ethereumjs-vmEthereumj\u200a\u2014\u200aJava client by the Ethereum FoundationHarmony\u200a\u2014\u200aJava client by EtherCampSeth\u200a\u2014\u200aSeth is an Ethereum client tool\u200a\u2014\u200alike a \u201cMetaMask for the command line\u201dMustekala\u200a\u2014\u200aEthereum Light Client project of Metamask.Exthereum\u200a\u2014\u200aElixir clientEWF Parity\u200a\u2014\u200aEnergy Web Foundation client for the Tobalaba test networkQuorum\u200a\u2014\u200aA permissioned implementation of Ethereum supporting data privacy by JP MorganMana\u200a\u2014\u200aEthereum full node implementation written in Elixir.StorageIPFS\u200a\u2014\u200aDecentralised storage and file referencingIPFS-Store\u200a\u2014\u200aIPFS Storage service with added search capabilityOrbitDB\u200a\u2014\u200aDecentralised database on top of IPFSJS IPFS API\u200a\u2014\u200aA client library for the IPFS HTTP API, implemented in JavaScript.TEMPORAL\u200a\u2014\u200aEasy to use API into IPFS and other distributed/decentralised storage protocolsSwarm\u200a\u2014\u200aDistributed storage platform and content distribution service, a native base layer service of the Ethereum web3 stackMessagingWhisper\u200a\u2014\u200aCommunication protocol for DApps to communicate with each other, a native base layer service of the Ethereum web3 stackDEVp2p Wire Protocol\u200a\u2014\u200aPeer-to-peer communications between nodes running Ethereum/WhisperPydevp2p\u200a\u2014\u200aPython implementation of the RLPx network layerTesting ToolsSolidity code coverage\u200a\u2014\u200aSolidity code coverage toolSolidity coverage\u200a\u2014\u200aAlternative code coverage for Solidity smart-contractsSolidity function profiler\u200a\u2014\u200aSolidity contract function profilerSol-profiler\u200a\u2014\u200aAlternative and updated Solidity smart contract profilerEspresso\u200a\u2014\u200aSpeedy, parallelised, hot-reloading solidity test frameworkEth tester\u200a\u2014\u200aTool suite for testing Ethereum applicationsCliquebait\u200a\u2014\u200aSimplifies integration and accepting testing of smart contract applications with docker instances that closely resembles a real blockchain networkHevm\u200a\u2014\u200aThe hevm project is an implementation of the Ethereum virtual machine (EVM) made specifically for unit testing and debugging smart contractsEthereum graph debugger\u200a\u2014\u200aSolidity graphical debuggerTenderly CLI\u200a\u2014\u200aSpeed up your development with human readable stack tracesSolhint\u200a\u2014\u200aSolidity linter that provides security, style guide and best practice rules for smart contract validationEthlint\u200a\u2014\u200aLinter to identify and fix style & security issues in Solidity, formerly SoliumDecode\u200a\u2014\u200anpm package which parses tx\u2019s submitted to a local testrpc node to make them more readable and easier to understandtruffle-assertions\u200a\u2014\u200aAn npm package with additional assertions and utilities used in testing Solidity smart contracts with truffle. Most importantly, it adds the ability to assert whether specific events have (not) been emitted.Psol\u200a\u2014\u200aSolidity lexical preprocessor with mustache.js-style syntax, macros, conditional compilation and automatic remote dependency inclusion.solpp\u200a\u2014\u200aSolidity preprocessor and flattener with a comprehensive directive and expression language, high precision math, and many useful helper functions.Decode and Publish\u200a\u2014\u200aDecode and publish raw ethereum tx. Similar to https://live.blockcypher.com/btc-testnet/decodetx/Doppelg\u00e4nger\u200a\u2014\u200aa library for mocking smart contract dependencies during unit testing.rocketh\u200a\u2014\u200aA simple lib to test ethereum smart contract that allow to use whatever web3 lib and test runner you choose.Security ToolsMythX\u200a\u2014\u200aSecurity verification platform and tools ecosystem for Ethereum developersMythril Classic\u200a\u2014\u200aOpen-source EVM bytecode security analysis toolOyente\u200a\u2014\u200aAlternative static smart contract security analysisSecurify\u200a\u2014\u200aSecurity scanner for Ethereum smart contractsSmartCheck\u200a\u2014\u200aStatic smart contract security analyzerPorosity\u200a\u2014\u200aDecompiler and Security Analysis tool for Blockchain-based Ethereum Smart-ContractsEthersplay\u200a\u2014\u200aEVM disassemblerEvmdis\u200a\u2014\u200aAlternative EVM disassemblerHydra\u200a\u2014\u200aFramework for cryptoeconomic contract security, decentralised security bountiesSolgraph\u200a\u2014\u200aVisualise Solidity control flow for smart contract security analysisManticore\u200a\u2014\u200aSymbolic execution tool on Smart Contracts and BinariesSlither\u200a\u2014\u200aA Solidity static analysis frameworkAdelaide\u200a\u2014\u200aThe SECBIT static analysis extension to Solidity compilerSolidity security blog\u200a\u2014\u200aComprehensive list of known attack vectors and common anti-patternsAwesome Buggy ERC20 Tokens\u200a\u2014\u200aA Collection of Vulnerabilities in ERC20 Smart Contracts With Tokens AffectedFree Smart Contract Security Audit\u200a\u2014\u200aFree smart contract security audits from Callisto NetworkMonitoringNeufund\u200a\u2014\u200aSmart Contract Watch\u200a\u2014\u200aA tool to monitor a number of smart contracts and transactionsScout\u200a\u2014\u200aA live data feed of the activities and event logs of your smart contracts on EthereumChainlyt\u200a\u2014\u200aExplore smart contracts with decoded transaction data, see how the contract is used and search transactions with specific function callsOther Miscellaneous ToolsTruffle boxes\u200a\u2014\u200aPackaged components for building DApps fast.Gitcoin\u200a\u2014\u200aDo work, get work done, open source.Cheshire\u200a\u2014\u200aA local sandbox implementation of the CryptoKitties API and smart contracts, available as a Truffle BoxSolc\u200a\u2014\u200aSolidity compilerSol-compiler\u200a\u2014\u200aProject-level Solidity compilerSolidity cli\u200a\u2014\u200aCompile solidity-code faster, easier and more reliableSolidity flattener\u200a\u2014\u200aCombine solidity project to flat file utility. Useful for visualizing imported contracts or for verifying your contract on EtherscanSol-merger\u200a\u2014\u200aAlternative, merges all imports into single file for solidity contractsRLP\u200a\u2014\u200aRecursive Length Prefix Encoding in JavaScripteth-cli\u200a\u2014\u200aA collection of CLI tools to help with ethereum learning and developmentEthereal\u200a\u2014\u200aEthereal is a command line tool for managing common tasks in EthereumEth crypto\u200a\u2014\u200aCryptographic javascript-functions for Ethereum and tutorials to use them with web3js and solidityParity Signer\u200a\u2014\u200amobile app allows signing transactionspy-eth\u200a\u2014\u200aCollection of Python tools for the Ethereum ecosystemtruffle-flattener\u200a\u2014\u200aConcats solidity files developed under Truffle with all of their dependenciesDecode\u200a\u2014\u200anpm package which parses tx\u2019s submitted to a local testrpc node to make them more readable and easier to understandTypeChain\u200a\u2014\u200aTypescript bindings for Ethereum smartcontractsEthSum\u200a\u2014\u200aA Simple Ethereum Address Checksum ToolPHP based Blockchain indexer\u200a\u2014\u200aallows indexing blocks or listening to Events in PHPPurser\u200a\u2014\u200aJavaScript universal wallet tool for Ethereum-based wallets. Supports software, hardware, and Metamask\u200a\u2014\u200abrings all wallets into a consistent and predictable interface for dApp development.Node-Metamask\u200a\u2014\u200aConnect to MetaMask from node.jsSolidity-docgen\u200a\u2014\u200aDocumentation generator for Solidity projectsEthereum ETL\u200a\u2014\u200aExport Ethereum blockchain data to CSV or JSON filesprettier-plugin-solidity\u200a\u2014\u200aPrettier plugin for formatting Solidity codeEthToolbox\u200a\u2014\u200aA web app with off-chain tools for Ethereum developers. EC recovery, address formatter, unit converter, hash functions, keys generator, etc.Smart Contract Standards & LibrariesERCs\u200a\u2014\u200aThe Ethereum Request for Comment repositoryTokensERC-20\u200a\u2014\u200aOriginal token contract for fungible assetsERC-721\u200a\u2014\u200aToken standard for non-fungible assetsERC-918\u200a\u2014\u200aMineable Token StandardERC-165\u200a\u2014\u200aCreates a standard method to publish and detect what interfaces a smart contract implements.ERC-725\u200a\u2014\u200aProxy contract for key management and execution, to establish a Blockchain identity.ERC-173\u200a\u2014\u200aA standard interface for ownership of contractsPopular Smart Contract LibrariesZeppelin\u200a\u2014\u200aContains tested reusable smart contracts like SafeMath and ZeppelinOS library for smart contract upgradeabilitycryptofin-solidity\u200a\u2014\u200aA collection of Solidity libraries for building secure and gas-efficient smart contracts on Ethereum.Modular Libraries\u200a\u2014\u200aA group of packages built for use on blockchains utilising the Ethereum Virtual MachineDateTime Library\u200a\u2014\u200aA gas-efficient Solidity date and time libraryAragon\u200a\u2014\u200aDAO protocol. Contains aragonOS smart contract framework with focus on upgradeability and governanceARC\u200a\u2014\u200aan operating system for DAOs and the base layer of the DAO stack.0x\u200a\u2014\u200aDEX protocolToken Libraries with Proofs\u200a\u2014\u200aContains correctness proofs of token contracts wrt. given specifications and high-level propertiesDeveloper Guides for 2nd Layer InfrastructureScalabilityPayment/State ChannelsEthereum Payment Channel\u200a\u2014\u200aEthereum Payment Channel in 50 lines of code\u00b5Raiden Documentation\u200a\u2014\u200aGuides and Samples for \u00b5Raiden Sender/Receiver Use CasesPlasmaLearn Plasma\u200a\u2014\u200aWebsite as Node application that was started at the 2018 IC3-Ethereum Crypto Boot Camp at Cornell University, covering all Plasma variants (MVP/Cash/Debit)Plasma MVP\u200a\u2014\u200aOmiseGO\u2019s research implementation of Minimal Viable PlasmaPlasma MVP Golang\u200a\u2014\u200aGolang implementation and extension of the Minimum Viable Plasma specificationPlasma Cash\u200a\u2014\u200aSimple Plasma Cash implementationSide-ChainsPOA NetworkPOA BridgePOA Bridge UIPOA Bridge ContractsLoom NetworkPrivacy / ConfidentialityzkSNARKsZoKrates\u200a\u2014\u200aA toolbox for zkSNARKS on EthereumThe AZTEC Protocol\u200a\u2014\u200aConfidential transactions on the Ethereum network, implementation is live on the Ethereum main-netPrebuilt UI ComponentsRimble Design System\u2013\u2013Adaptable components and design standards for decentralized applications.ui.aragon.org\u200a\u2014\u200aA React library including Dapp componentscomponents.bounties.network\u200a\u2014\u200aA React library including Dapp componentslorikeet.design\u200a\u2014\u200aA React library including Dapp componentsui.decentraland.org\u200a\u2014\u200aA React library including Dapp componentsdapparatus\u200a\u2014\u200aReusable React Dapp componentsMetamask ui\u200a\u2014\u200aMetamask React ComponentsContributions are\u00a0welcome!Feel free to submit a pull request, with anything from small fixes to tools you\u2019d like to add (or remove!). If adding a new tool, please add a brief description that you think new developers would understand.Many thanks to the 20+ contributors including @corbpage of Meridio for the idea, @pakaplace for expanding and curating, and @jpantunes for restructuring the list in a more logical way.Projects that do not have a working product will not be added.Projects that are deprecated or no longer maintained will be removed.Projects that are paid/restricted services without open source code or developer reviews will be further vetted.^Is the above fair? Share your input here\u200a\u2014\u200ahttps://github.com/ConsenSysLabs/ethereum-developer-tools-list/pull/70", "responses": "3"}, {"title": "", "author_name": "", "link": "https://medium.com/@pirapira/who-can-recover-stuck-funds-on-ethereum-345ba7566c9c?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "", "responses": ""}, {"title": "Introducing Mythril: A framework for bug hunting on the Ethereum blockchain", "author_name": "Bernhard Mueller", "link": "https://hackernoon.com/introducing-mythril-a-framework-for-bug-hunting-on-the-ethereum-blockchain-9dc5588f82f6?source=search_post", "post_date": "Oct 9, 2017", "readtime": "9 min read", "upvotes": "660", "content": "Introducing Mythril: A framework for bug hunting on the Ethereum blockchainBernhard MuellerBlockedUnblockFollowFollowingOct 9, 2017Note: This is an article from ancient times. For an up-to-date introduction to Mythril, read this article instead.Unless you\u2019ve been living under a rock for the past three years, you have surely taken notice of an industry buzzword that has been giving \u201cmachine learning\u201d a run for its money: Blockchain.Ethereum is one of the most successful implementations of the concept. In contrast to Bitcoin, which offers limited scripting capabilities, Ethereum provides a Turing-complete virtual machine. State transitions in the network (such as a changes in account balance of a particular token) are regulated by code running in the virtual machine, a.k.a. \u201csmart contracts\u201d.An ancient security saying goes: \u201cWith great flexibility comes great potential for vulnerabilities\u201d. It doesn\u2019t help that the semantics of Ethereum\u2019s most popular high-level programming language Solidity are often counter-intuitive, creating many possibilities for developers to mess up. A great example for this is the Parity multisig wallet bug, which allowed an unknown attacker to withdraw 153,037 Ether (worth more that USD 30 million) after their tinder date turned out to be a real creep.The Parity debacle shows that implementation errors can remain undetected for months, even when the contract is deployed on the mainnet and its source code is openly available. One can only speculate what kind of vulnerabilities might be hidden in the thousands contracts deployed on the chain, many of which are black-boxes (in the sense that the source code isn\u2019t published on Etherscan).Not surprisingly, such a rich source of potential vulnerabilities with a monetary payout doesn\u2019t escape the attention of security folks of the \u201cwhite-hat\u201d and \u201cblack-hat\u201d varieties. It\u2019s smashing the stack* for fun and profit all over again\u200a\u2014\u200aonly this time there is real profit (*note that not only does the EVM have a stack, it also doesn\u2019t have registers, so almost every instruction uses the stack).When I started looking into Ethereum a few weeks ago, I found quite a few useful tools for analyzing contracts on the mainnet. Etherscan and remix allow researchers to conveniently browse, disassemble and debug contracts in the web browser. The Porosity decompiler can (to a certain extent) restore source code from a given bytecode. Truffle and testrpc make it easy to compile and debug Solidity code.However, I also found that there were many things I couldn\u2019t do efficiently: Most notably, searching the blockchain for interesting contracts and scripting static/dynamic analysis in Python (I haven\u2019t quite jumped on the doing-everything-in-JavaScript train yet). Therefore, I started writing up a collection of Python modules and a command line tool. And crucially, I polished the thing to a point where others might be able to use it. The outcome is Mythril, an Ethereum disassembler / blockchain exploration & analysis tool. A brief tutorial follows.SetupOriginally, I was hoping to run PyEthApp and directly access the state in its LevelDB. Unfortunately, PyEthApp seems to have suffered a lack of maintenance and development for quite some time and doesn\u2019t sync with the Ethereum mainnet. Mythril therefore needs RPC access to a fully connected go-ethereum node. Install go-ethereum and start your node as follows:$ geth --rpc --rpcapi eth,debug --syncmode fast console 2>/dev/nullNote that Mythril uses non-standard go-ethereum debug APIs, so some while it should work with other Ethereum clients, some functions won\u2019t be available.Mythril itself can be installed via Pypi:$ pip install mythrilThis will install both the Python modules and the myth command line tool.Database InitializationMythril enables search operations like those described in the legendary \u201cMitch Brenner\u201d blog post in minutes instead of days. To achieve this, it creates a snapshot of the contracts deployed on the mainnet. Run the following command to initialize the database:$ myth --init-dbThe whole process takes some time (to be honest it\u2019s not very efficient, I hope to provide a better implementation at some point). If you don\u2019t want to sync the whole chain right away, you can hit ctrl+c at any point, and syncing will auto-resume the next time you run mythril with the --init-db flag.Command line\u00a0UsageOnce you have some contracts in your database, you can run search commands to look for function signatures and opcode sequences. The expression syntax is as follows:func#[function signature]#code#[opcodes]#For example, the command below will output all contracts that have a function named changeMultisig(address):$ myth --search \u201cfunc#changeMultisig(address)#\u201dMatched contract with code hash 2bfa6e34330ac57501bd0f6c84d50fcdAddress: 0x3665f2bf19ee5e207645f3e635bf0f4961d661c0, balance: 4999600000000000000Matched contract with code hash 98623854d849f0d97c55b98e0238eb7bAddress: 0x2d36cb89a977209703c1d6304f23198c22b7a498, balance: 63686800960937000000The search feature supports simple boolean expressions. The following command above prints all contracts that contain both a function named changeMultisig(address) and the opcode sequence PUSH1 0x50, POP:$ myth --search \u201cfunc#changeMultisig(address)# and code#PUSH1 0x50,POP#\u201dDisassemblerThe disassembler is invoked with the -d flag. It accepts either a bytecode string via the -c argument or a contract address via -a ADDRESS (this will download the contract code from your Ethereum node).Mythril tries to resolve function names using a built-in signatures file originally obtained from the Ethereum Signature Database. If you end up using Mythril, you are very welcome to commit updates to that file.$ myth -d -a 0x2d36cb89a977209703c1d6304f23198c22b7a4980 PUSH1 0x602 PUSH1 0x404 MSTORE(\u2026)212 \u2014 FUNCTION changeMultisig(address) -213 CALLVALUE214 ISZEROCall graphOne of Mythril\u2019s \u201ckiller features\u201d is the call graph generator. Adding the -g OUTPUT_FILE argument will cause Mythril to save a graph in HTML format:myth -g ~/Desktop/graph.html -a 0x2d36cb89a977209703c1d6304f23198c22b7a498Open the resulting file in the web browser to view the graph. Usually, you can get a pretty good overview of available execution paths (fortunately, smart contracts aren\u2019t all that complex).Using the call graph together with execution tracing to gradually reverse engineer a contract has been working well for me, although it would be nice to have a GUI-based SVG editor to annotate (if you know one, please let me know in the comments).Finding cross-referencesIt is often useful to identify other contracts referenced by a particular contract. Let\u2019s assume you want to search for contracts that use the DELEGATECALL instruction in their fallback function, as was the case in the Parity Bug. You can do this using dynamic analysis: Simply run every contract in the PyEthereum VM without any inputs, and check if theDELEGATECALL instruction is executed. The Mythril repo contains an example script showing how to do this. It should output something like the following:$ python examples/find-fallback-dcl.pyDELEGATECALL in fallback function: Contract 0x07459966443977122e639cbf7804c446DELEGATECALL in fallback function: Contract 0x17c9e5b7f2bfd8307d628f2d9fcc9352DELEGATECALL in fallback function: Contract 0x17f9db8b6ffa854335b319d01f09ba39(\u2026)As the name implies, the DELEGATECALL instruction delegates execution to a different contract, so naturally you\u2019ll be interested which contract is called. You can print the addresses of referenced contracts with the--xrefs option:$ myth --xrefs 0x07459966443977122e639cbf7804c4460x5b9e8728e316bbeb692d22daaab74f6cbf2c4691Instead of using the command line tool, you can also follow the cross-references programmatically and run further analysis on the referenced contracts (find-fallback-dcl.py contains an example for this as well).Advanced UsageWhile the command line tool is neat, only with custom code may you unlock the full power of Mythril. In addition to the contract database, disassembler and EVM tracing modules, Mythril also includes modified version of ethjsonrpc, allowing you to deploy and trace code on a testrpc node. By combining all this you can piece together some decent static and dynamic analysis.SearchTo open the contract database from a Python program use the get_persistent_storage function. This will return a ContractStorage object (by default, the database lives in [your-home]/.mythril, but you can override this in the constructor). Call the method search(expression, callback) to start a search:from mythril.ether.contractstorage import get_persistent_storagecontract_storage = get_persistent_storage()contract_storage.search(\"FUNC#getOwner()#\", myCallback)The callback function passed in the second argument will be called for every search result. It receives the following arguments:The hash key identifying the contract in Mythril\u2019s databaseAn ETHContract object containing the current contractA list of addresses at which the contract lives in the blockchainA list balances of the each of the deployed contractsdef myCallBack(contract_hash, contract, addresses, balances):  # Do something\u2026A useful pattern is searching for some particular type of contract, and then performing a set of analysis task on each result. Let\u2019s have a look at a second example doing just that.Tracing ExecutionLet\u2019s assume you want to scan the contract database for conditions akin to the Parity bug, but in a generic way. One idea is to look for any function that, when passed either no argument, an address, or a list of addresses, ends up writing your address to storage with the SSTORE instruction. Of course this doesn\u2019t necessarily mean that you\u2019re overwriting an important state variable such as owner or owners, but it\u2019s definitely the kind of behavior you want to investigate further.In the prior example, we saw how code can be traced in the PyEthereum VM. For a more advanced analysis that also incorporates state (such as available accounts, contract storage, calling the constructor, etc.) it is better to deploy the contract on testrpc. In my test environment, I have geth running on port 8545 and a testrpc instance on port 8546, which allows me to move contracts from the real network to testrpc instantly. To run the example code, start testrpc as follows:$ testrpc --port 8546 --gasLimit 0xFFFFFFF --account \\0x0b6f3fd29ca0e570faf9d0bb8945858b9c337cd2a2ff89d65013eec412a4a811,500000000000000000000 --account \\0x2194ac1cd3b9ca6cccc1a90aa2c6f944994b80bb50c82b973adce7f288734d5c,500000000000000000000We want to look at all contracts in the database, so we can either use a search term that matches every contract, or simply iterate over the contracts:for k in contract_keys:  contract = contract_storage.contracts[k]This will return ETHContract objects that store both the code of the contract (contact.code) and the code of the transaction that created the contract (contract.creation_code).To re-create the contract in your own private chain or on testrpc, replay the contract creation transaction using Mythril\u2019s JSON RPC client:from mythril.rpc.client import EthJsonRpctestrpc = EthJsonRpc(\u201clocalhost\u201d, 8546)# Deploy on testrpccreator_addr = \"0xadc2f8617191ff60a36c3c136170cc69c03e64cd\"ret = testrpc.eth_sendTransaction(from_address=creator_addr, gas=5000000, value=0, data=contract.creation_code)receipt = testrpc.eth_getTransactionReceipt(ret)contract_addr = receipt[\u2018contractAddress\u2019]This should return a transaction receipt containing the contract address. Note that testrpc \u201cmines\u201d a new block whenever it receives a transaction, so your contract is deployed instantaneously.The Disassembly class lets you access the list of instructions, formatted easm code, cross-references and functions of a contract. It takes a single constructor argument, the contract bytecode:disas = Disassembly(contract.code)The Disassembly object has two lists, func_to_addr and addr_to_func, that contain mappings between function names and addresses. You can iterate over func_to_addr to get the signature of each function (note that unidentified functions are labeled as \u201cUNK_[address]\u201d).for function_selector in disas.func_to_addr:  # do something with the function signature. E.g.:  # \"changeOwner(address)\"  # \"deposit()\"  # \"UNK_0x5b980628\"In the example script, every available function is called multiple times with various arguments (e.g. no argument, an address, a list of addresses). I won\u2019t explain all of that in detail here\u200a\u2014\u200aplease have a look at the code to see how to encode the call data and send the transaction.Finally, to trace execution of a function call, use the traceTransaction RPC method:tx = testrpc.eth_sendTransaction(to_address=contract_addr, from_address=addr_schnupper, gas=5000000, value=0, data=data)trace = testrpc.traceTransaction(tx)This will return a dictionary containing every instruction executed, along with the stack at each point of execution. We are only interested in SSTORE instructions that have our target address on the second-to-top position on the stack (i.e. the \u201cattacker\u2019s\u201d address is written to storage). We can search the instruction list as follows:for t in trace[\u2018structLogs\u2019]:  if t['op'] == 'SSTORE':    if addr_schnupper[2:] in t['stack'][-2]:      return TruePossible next steps could include running further static and dynamic analysis to determine the effects of the overwritten address, or dumping a callgraph for manual analysis.The usage scenarios detailed here are only the tip of the iceberg: You can build almost arbitrarily complex blockchain scanners on top of Mythril\u2019s APIs. However, note that many of Mythril\u2019s components such contract storage, search expressions, and others still have a lot of room for improvement. You are welcome to contribute better implementations and additional analysis scripts on the GitHub repository.About Mythril and\u00a0MythXMythril is a free and open-source smart contract security analyzer. It uses symbolic execution to detect a variety of security vulnerabilities.MythX is a cloud-based smart contract security service that seamlessly integrates into smart contract development environments and build pipelines. It bundles multiple bleeding-edge security analysis processes into an easy-to-use API that allows anyone to create purpose-built smart contract security tools. MythX is compatible with Ethereum, Tron, Vechain, Quorum, Roostock and other EVM-based platforms.", "responses": "1"}, {"title": "Bitcoin, Ethereum and Crypto Trading\u00a0Notes", "author_name": "BambouClub", "link": "https://medium.com/@BambouClub/bitcoin-ethereum-crypto-trading-notes-416e1872aa09?source=search_post", "post_date": "Jul 4, 2017", "readtime": "13 min read", "upvotes": "352", "content": "Great shorting opportunity: Ripple, May to August\u00a02017Bitcoin, Ethereum and Crypto Trading\u00a0NotesBambouClubBlockedUnblockFollowFollowingJul 4, 2017This is a diary of my crypto trading with running updates. I apply Ten Rules for Trading Bitcoin, Ethereum and Other Crypto. Newest posts at the top. Analyse: $BTC $ETH $XTZ $BNB $ZRX. I also advise on ICOs.[Please clap for this. I tweet about crypto trading: BambouClub ]#Trading Tip 28 Nov 2017 Buy Binance Coin $BNB: Trading volumes of cryptoassets are exploding. More Bitcoin is traded daily than Apple or Amazon stocks. How to leverage this phenomenon into trading profit? Binance Exchange is a new global exchange that has quickly entered the top 10 exchanges by trading volume, and rising. They issue their own utility coin. Every calendar Quarter, Binance Exchange uses 20% of its profits to buy back and burn $BNB, so increasing Demand and reducing Supply at the same time. Binance made $7.5 m profit in Q3 2017 despite the EXTREME China FUD they experienced in September, and bought back and burned $1 million of $BNB. Think about that: They opened for business in July 2017\u200a\u2014\u200aand made a profit in their first business quarter in harsh business conditions. Binance is the only major Exchange to offer for sale its own coin, so $BNB presents a unique opportunity. The exchange gives a 50% discount for paying fees using $BNB and not Bitcoin, Ether or Tether.Binance has created a virtuous circle of value for $BNB:More crypto trading \u2192 higher fees revenue earned by Binance Exchange (paid by clients in $BNB to get 50% discount \u2192 more demand for $BNB) \u2192 higher profit to Binance \u2192 faster burning of $BNB coins \u2192 reduced supply and higher price of $BNB \u2192 and repeat.For all these reasons, the price of $BNB can be expected to rise non-linearly with the exchange\u2019s growing volumes. Buy Binance Coin here.# 24 October: Trading note on Atomic Swaps and Altcoin ExchangeNew decentralised cryptoasset exchange Altcoin Exchange has performed the first ever Bitcoin-Ethereum Atomic Swap. Centralised exchanges are vulnerable to being shut down by regulators, and to hacks. Sign up to Alcoin Exchange and get your own Referral link. Use this to generate an income from the trading fees paid by your referrals. There is no time limit\u200a\u2014\u200athese payments are forever.#20 October 2017: Trading note on BitConnect. BitConnect is a ponzi which might collapse tomorrow, or it might run successfully for a long time. The Madoff scheme worked for 18 years before imploding. (But that was conservative, paying a mere 10% annually, giving it longevity.)BitConnect promises interest of $13,453 on a $10,000 loan in 120 days.They claim these returns are financed by profits made from their Bitcoin trading bot. The bot does not exist, as cleverly established here. This is its Return on Investment since 1 April 2017.Return on Investment since 1 April\u00a02017BitConnect coins that are staked earn an interest.#19 October 2017: Just published Call Options on Crypto-Related Equities.# 15 October 08.31 UCT: Trading note on Lending USD at Bitfinex. An annual rate of 146% is available.In real life savings rates are about 1% annually. In the Bitcoin world savings rates of greater than 100% are available at the moment. How is this possible? Traders at Bitfinex wishing to trade Bitcoin on leverage need to borrow USD to do so. It is the other users of the exchange who lend them these dollars. But USD is in short supply at Bitfinex because of course everyone wants to be holding Bitcoin not dollars for the price appreciation. You can keep an eye on USD lending rates at Cryptolend. Bitfinex lending rates have exploded to 0.2473% daily which is 146% annualised.Note that you cannot send USD directly to Bitfinex as its banking is restricted. You must send BTC and sell it for Tethers at Bitfinex.# 31 August 13.38 UCT: Trading note on Bitcoin FuturesIf you are new to crypto you are late, but not too late. You need to structure your portfolio in line with your aversion to risk. The largest part of my portfolio is Bitcoin, the safest cryptoasset. I assign a small fraction to high-risk high-reward Bitcoin Futures at BitMex. Use this link to receive a 10% fee discount for the first six months.My general rule in buying Bitcoin Futures is to buy the dip: you want to see red candles after a period of green candles on the charts.Another possible strategy, as exercised by a trader I respect, is to keep a leveraged long position on Bitcoin permanently open on Bitmex. When the market rises he takes profit off the table. His position gets closed out periodically when the market moves against him, in which event he simply re-opens it.Futures trading is also of value when you identify a crypto asset that is in a downward trend or even a death spiral, in which event you can profit by shorting it against BTC at Bitmex. Look at XRPBTC slowly sink from 21,000 Satoshis to 3,410 Sats over the period 18 May 2017 to 18 August 2017.Also, the day will come when the crypo market goes into a prolonged period of funk or decline. Like DotCom in the Spring of 2000. If you are skilled at trading futures you can use that as an opportunity for gain.I suggest you trade tiny amounts to start with to become familiar with the Bitmex site. Here is a video tutorial on trading Bitcoin Futures.Futures trading is available on $BTC, $DASH, $ETH, $ETC, $LTC, $QTUM, $XMR, $XRP, $XTZ, $ZEC.Buy Bitcoin Futures here.Do not Short Bitcoin.# 29 August 21.55 UCT: An obscure but respected privacy coin (think $XMR $ZEC $DASH $PIVX\u00a0\u2026) that the markets have not discovered\u200a\u2014\u200a$HUSHBuy $HUSH here.# 24 August 14.05 UCT: Tezos $XTZ is on the moveBuy Tezos $XTZ here.# 16 August 09.00 UCT: Trading Note on Ox Token $ZRXI participated in the Ox Token $ZRX ICO. You had to jump though hoops to do so. Buy a new phone with Android 6 that works for Civic. Register with Civic. Open a MetaMask Wallet. Register for the ICO. Buy at the ICO. And there was a maximum amount available on Day 1.(6.67 ETH).Today:To be honest it has only dawned on me now, the next day, how big Ox Token will become. It will become the platform for global Over The Counter (OTC) trading of cryptoassets. It will enable massive disintermediation of costly and slow-moving exchanges.# 14 August 19.45 UCT: Trading Note on Binance Coin $BNBTL DR I continue to seek liquidity and push it across to Binance Exchange and buy $BNB and to a lesser extent $GAS and $BTM. I am liquidating profitable positions in other coins to do so. I also hold $NEO\u200a\u2014\u200abought earlier in the summer rather cheaply\u200a\u2014\u200abut I am not adding to that position.$BNB dipped last night but I was too tired to trade it.The next morning:Binance Exchange is racing up the table of Exchanges:The Binance White Paper confirms me in my belief that Binance Coin will achieve great things.# 14 August 02.08 UCT: Trading Note on Tezos $XTZTezos is undervalued on the grey IOU market. Therefore I have been buying (fake) $XTZ. Buy Tezos $XTZ here.Note. These are not real Tezos.Calculations to demonstrate under-valuation follow.This is an interesting explanation of the calculation of the Tezos market cap.Current price on grey market is $1.26.Grey market valuation of Market Cap = 763 m. x 80% x $1.26= $769 million.That is pretty obviously an under-valuation in the light of current market:So, the recommendartion is to grab some fake Tezzies. The problem is it\u2019s a really wanky order book with manipulators ready to pounce and you have to pay up to $1.40 to buy a worthwhile amount.Look at that spread! Look at those pathetic amounts!# 14 August 01.58 UCT: Trading Note on Binance Coin $BNB $GASAn extraordinary 24 hours over at Binance. I have taken the decision not to trade in and out of $BNB $GAS taking (substantial) profit as I am planning to hold these tokens for a long time and I do not want to risk losing my positions.Current prices at Binance:# 12 August 09.58 UCT: Trading Note on Exchanges: Poloniex, Bittrex, Kraken, Coinbase, Bitfinex, Cryptopia, WCX, BinanceTL DR Most of the large crypto exchanges have serious problems attached to them. I am excited about new exchange Binance and am buying their exchange coin $BNB, & $BTM, $GAS. Current prices:The stars are re-aligning in the global crypto exchange space.Binance: This exchange opened in July 2017 and is already Number 16 in the rankings with ADV of about $60 million. I think it might become Number 1. The Exchange is Chinese but easily usable to non-Chinese users. They have a simply superb team led by Changpeng Zhao, low fees, and a clean, simple interface.$BNB is their own coin. Every quarter, they will use 20% of profits to buy back BNB and destroy them, until they buy 50% of all the BNB back. All buy-back transactions will be announced on the blockchain. They eventually will destroy 100MM BNB, leaving 100MM BNB in circulation.Poloniex: First, there was a scare about an exit-scam or SEC shutdown of Poloniex similar to that that befell BTC-e a few weeks ago.The behaviour of Poloniex is strange. They have horrible support. They do not upgrade their listings of coins which is tired and stale. They are leaking trading volume every day to Bittrex. It is as though they have no desire to survive and prosper. This is now being reflected in a decline in the BTC prices of coins that are largely traded on Poloniex. Avoid!Bittrex: This is a much better exchange than Poloniex. It specialises in low and mid-cap coins. It faces a serious problem, however: it is based and registered in the US. Trading of ICO tokens that pass the Howey Test is not permitted by American exchanges or by US citizens, but it is taking place! I am moving such tokens off Bittrex to non-US exchanges, e.g. $NEO $OMG $QTUM. (I am not an American citizen.)Kraken & Coinbase: They are good exchanges but again the problem is fucking American regulations. It is not safe to hold large amounts on any US exchange and to move large amounts in and out. The crazy US authorities are liable to seize your assets at any moment.Bitfinex: The great merit of this exchange is that it is NOT US-based. It is a well-run exchange. They have taken the sensible measure to reduce their exposure to US citizens.Cryptopia: Since my last post I made and immediately lost a small fortune on masternode coins (including Chaincoin $CHC\u00a0!), mostly at this New Zealand exchange. My $DOT is still on term deposits there. I am a little disappointed by Topia. They have not cleaned up their horrible messy UI. I also notice that the microcap coins at Topia continually bleed value and the Bid-Offer spreads are of course very large and there sees to be more and more manipulation of the order books.WCX: Their White paper was simply pathetic. I shall not buy their ICO. Do not touch.# 10 July 10.26 UCT: Trading Note on Cryptos associated with Crypto Exchanges $DOT $NXT $HEAT $MSP $ROCKETGrowth in Exchange volumes is a certainty.What coins are associated with exchanges? See this thread:Longlist: $DOT $HEAT $NXT $XEMP $ROCKET $POSW $MSPThese coins $XEMP $ROCKET $POSW are uninteresting.Shortlist: $DOT $HEAT $NXT $MSPI already have large holdings of $DOT locked up in Term Deposits at Cryptopia Exchange. Buy $DOT here.I have used the HEAT Exchange in the past when I found it a horrible experience. I do not expect this exchange to prosper. I shall continue to keep an eye on $NXT. I participated in the Mothership $MSP ICO.# 7 July 20.50 UCT: Trading Note on Mothership $MSP ICOIt\u2019s been a tough day. I refer you to my Rules essay not to pay too much attention to 24 h. changes. Spent the day watching Wimbledon on TV and listing to the radio commentary of England vs. South Africa Test at Lords.My portfolio has weathered the storm pretty well. USD holdings are not shown\u200a\u2014\u200athey are #5 after Dotcoin at #4. (I have sold 90% of my $EOS for BTC, ETH & USD.)I participated in the Mothership ICO ($MSP). I am writing a Sheet analysing Crypto Exchanges\u2019 profitability and it is out of this world. It\u2019s a good idea to use any and every avenue to leverage that. The ICO is still open. Referral link.Bought some more Elastic $XEL at 13,000 Satoshis to average down my horrible buying average of 27,000 Sats.# 7 July 12.05 UCT: Trading Note on $XTZ Tezos ICOEncouraged by this information, I bought more Tezos $XTZ.# 6 July 9.54 UCT: Trading Note on $DOTTerm Deposits at CryptopiaCryptopia FAQGoogle Sheet illustrating compound interest rates:90 Days pays 6.11 % p.a., 180 Days pays 12.84 %, 360 Days pays 19.81 %.#5 July 17.12 UCT: Trading note on $DOTDotCoin breached 300 Satoshis today. Wait for the next substantial red candles and buy and lock away in term deposits at Cryptopia Exchange.#5 July 18.59 UCT: Trading note on Tezos ($XTZ) ICOA couple of thoughts. I missed the initial 20% bonus period due to computer problems. We are now in the 15% bonus period. So:ICO Price: 1 BTC = 5,000 XTZ x 1.15 = 5,750 XTZ1 XTZ = 0.00017391 BTCFutures price at Bitmex:1 XTZ = 0.000351 BTCSo, the futures price is double the ICO price. Of course there might be lots of manipulation in the futures market, but a 100% premium is encouraging. I bought $XTZ.The developers have no plans to immediately list on an exchange after the ICO:Does one want one\u2019s $XTZ tokens to be illiquid for four plus months? No! Anyway fringe exchanges might grab the business opportunity and provide a dodgy market using \u2018IOUs\u2019.#5 July 18.47 UCT: Trading note on $EOS ICOThat was stressful. My computer crashed when I was travelling in Albania. I was unable to trade from Saturday 1 July to midday UCT Tuesday 4 July. I could watch markets & Tweet using my smart phone but had no access to exchanges as complex passwords are stored in passwords manager on my broken notebook PC. Refer Rule 5 Scale Out. I acted on my intention to scale out of $EOS (i.e. take a good chunk of profit) as soon as possible, which was midday UCT Tuesday 4 July.Of course $EOS did very well when it was listed on both Kraken and Bitfinex on 1 July.#30 June 10.47 UCT: Trading note on $EOS ICO & Tezos ($XTZ) ICOContinue to watch the $EOS Futures price at Bitmex. Unless it increases a lot I shall not be putting more money into the initial 200 m $EOS ICO.The Tezos ($XTZ) kicks off tomorrow (July 1st, 2017 at 6am UTC.) Those contributing in the first bonus period (400 Bitcoin blockchain blocks) receive the maximum 20% bonus. No need to set your alarm clocks. The ICO is uncapped so the bonus is available for about 66 hours from the start.#30 June 09.05 UCT: Trading Note on the $EOS ICOSpreadsheet here. I have dry powder at MyEtherWallet and am watching rate of contributions and EOS futures price with the possibility of buying more EOS at the last minute of first 200 m batch if there remains a nice profit priced in at Bitmex. Register with my Bitmex referral to get reduced trading fees. Other plan might be to buy more EOS now and lock in profits with a leveraged short of same position size at Bitmex.#30 June 09.05 UCT Trading Note on $DOT:Dotcoin $DOT is now trading at 211 Satoshis. I refer you to Rule 7 Do not Over-Trade. Lock up Coins, & Rule 8 Let Profits Run. Cut Losses. I buy $DOT Term Deposits at Topia (90 Day or 180 Day) so I cannot get my grubby hands on my tokens and sell them foolishly. Plus you get great interest at rates that don\u2019t exist in the old fiat world. This is only the beginning. Buy $DOT or wait for red candles if you are the prudent type. Expect non-linear returns. Referral link to gain reduced trading fees at Topia.#29 June 12.17 UCT Trading Note on $DOT:News release from Cryptopia.The Exchange finessed a problem into a golden opportunity. The implications are higher network security, zero inflation from miners, likely additional liquidity at Waves DEX. The market has reacted with a rally up to 96 Satoshis from 74. Expect non-linear returns. Referral link to gain reduced trading fees at Topia.#28 June 9.58 UCT Trading Note on $DOT:Markets have dipped in the last week. Rule 6: Buy the Dip. I am leveraging growing crypto exchange volumes by buying DotCoin. It\u2019s a steal below 150 Satoshis and is now 74 Satoshis. $DOT is the currency at ultra-low cap exchange Cryptopia. Their daily trading volume has grown YTD 2017 100x from 5 BTC to 500 BTC\u00a0. That is 10,000 % growth. The price of $DOT tracks that explosive volume growth because you have to buy DotCoin to pay for all services (E.g. Exchange Listing of a Coin, Term Deposits, etc.). $DOT MCap YTD 2017 is x9 despite recent retrace but its MCap is still tiny at $437,000. It\u2019s like a Call on the Cryptopia Daily Volumes underlying. Expect non-linear returns. Referral link to gain reduced trading fees.[Please click on the Green Heart. I tweet about crypto trading: BambouClub ]", "responses": "2"}, {"title": "A Gentle Introduction to Ethereum Programming, Part\u00a02", "author_name": "Facu Spagnuolo", "link": "https://blog.zeppelin.solutions/a-gentle-introduction-to-ethereum-programming-part-2-7bbf15e1a953?source=search_post", "post_date": "Nov 16, 2017", "readtime": "7 min read", "upvotes": "805", "content": "A Gentle Introduction to Ethereum Programming, Part\u00a02Facu SpagnuoloBlockedUnblockFollowFollowingNov 16, 2017This is the second part of our Ethereum introduction guide. If you haven\u2019t read part 1, I highly recommend it to better understand this post.Enjoy, and please do not hesitate to reach out with questions, corrections or feedback.Index1. Taking the first steps2. Interacting with a contract2.1. Introduction to smart contracts in Ethereum2.2. Your first smart contract2.3. Deploying a smart contract2.4. Web3 and smart contracts3. Frameworks & Tools in the real world4. A real DApp, a token marketplace\u200a\u2014\u200acoming soon", "responses": "9"}, {"title": "Ethereum\u2019s Governance isn\u2019t Decentralized", "author_name": "Michael K. Spencer", "link": "https://medium.com/futuresin/ethereum-governance-isnt-decentralized-da449da430f4?source=search_post", "post_date": "Apr 1", "readtime": "5 min read", "upvotes": "712", "content": "Lane RettigEthereum\u2019s Governance isn\u2019t DecentralizedKey Ethereum developers are freaking\u00a0outMichael K. SpencerBlockedUnblockFollowFollowingApr 1Public blockchains will probably fail due to a lack of decentralization in decision making in governance as well as other technical reasons such as an inability to scale to mass adoption.A blockchain isn\u2019t decentralized if it still has a few people at the top. That is, the technical and the human elements both require decentralization. In an era of decentralized autonomous organizations (DAOs), the missing link is often how managers and developers are organized. Let\u2019s take Ethereum as an example here.Ethereum has been faulted for having only a few core developers determining what happens on the\u00a0network.While Vitalik Buturin and Joseph Lubin talk a good game, the truth is of course the developers who make key decisions are very limited. This is highly problematic for a company that\u2019s basically the post-child for what decentralization might be. Here\u2019s where the story starts to get serious.A core dev Lane Rettig said the small group has the final say on what goes into the protocol, a situation that has led to several concerns because emerging issues with the network are non-technical.Etheruem Governance is Tested in\u00a02019The recent controversy around Afri Schoedon also points to this. Developers are just people at the end of the day and the bias is usually towards young males.So this criticism isn\u2019t just from crypto journalists like myself, but from the actual developers working on Etheruem. Following the departure of core developer Afri Schoedon from the open-source project in late February, Etheruem needs a new hard-fork coordinator. Why he actually rage quit is important.There are some signs something is not quite right here internally in Etheruem\u2019s loose idea that there is no hierarchy.You can pretend your governance is decentralized, it doesn\u2019t mean it\u2019s actually true.Lane has essentially suggested Ethereum\u2019s Governance model has failed. He has added that Ethereum has only a few options to choose from, one of which is to give up on governance completely \u201cand be like Bitcoin\u201d. Another viable option proposed by him is to allow Ether holders to participate in decision making concerning the network in a plutocracy instead of a technocracy.What\u2019s clear is Ethereum has tried hard at decentralized governance, but it\u2019s possible they haven\u2019t achieved it. Realistically the core developers are just another bro-culture. While public blockchains are a cool idea, until Etheruem 2.0 is fully manifest, it\u2019s not even a viable technical solution.I personally think EOS and TRON are making mockeries of what Etheruem is.I\u2019ve recently been trolled on Twitter for publicly being critical of Ripple (XRP) not being decentralized. Trolled by Twitter handles with (XRP) in their name. Crypto communities are tribal, at best. Can we expect a bunch of mid or early 20-year olds to truly change the world with how they implement decentralized governance?You got like what the kids are trying to do, but let\u2019s face it, they are kids and decentralization probably isn\u2019t viable yet.While stimulating, the tweets of Ethereum\u2019s core developers are all over the block. They are philosophical, reactionary and clearly biased by their own creation. It\u2019s what you expect of developers who believe they are changing the world.When Afri Schoedon, a long-time Ethereum contributor, abruptly quit working on Etheruem there\u2019s a sense that the hierarchy within Ethereum is under challenge. For the future of decentralized governance, there\u2019s always the question who governs the governors? I think the future of decentralized governance is oversight by AI, I would not trust a 20-something year olds ego and leadership ability no matter how much I like their vision. Human nature is a binary risk. That won\u2019t change.The Concept of DAOs and Decentralized Governance is\u00a0FlawedWhile DAOs, not for profit foundations and decentralized governance templates are good in theory, you really cannot trust humans to lead without personal power games, ego clashes and true equality in decision making taking place. It\u2019s absurd to think a clique of developers could achieve it, whether they work at Etheruem or somewhere else.Corporate management is a fundamentally centralized power structure. People like Vitalik or Lubin can\u2019t quit, since they have their entire identities and wealth invested in the project. So long as there are a few core developers\u00a0, investors or prophets at the top, your organization isn\u2019t decentralized.Rettig would know the limitations of the current setup. Rettig suggests that Ethereum should stop running a decentralized network and go for a centralized, more transparent and accountable governance system as well as embrace capture by the elite for now because the Ethereum network may be running and blocks still being produced but the project is stuck. There will be times when your attempt at decentralized governance is actually a bottleneck in how your product evolves, and that\u2019s a problem too for Ethereum.Ethereum is a great experiment, but the concept of the DAO needs more work. Scalable blockchain needs more work. The future of crypto communities needs a product timeline that accounts for reality, contingencies, risks, outcomes, monetization and how to truly be held accountable. Ethereum is and was the post-child of what decentralization might be or become.In reality effective systems mix and marble centralized and decentralized elements. They are agile with both to deal with reality and obstacles as they arise. The best economies are *mixed* economies. The decentralized elements check the centralized elements, make it difficult for them to act in arbitrary and harmful ways. (see Steve\u2019s Tweet on this).Ethereum is going through growing pains where a crisis of confidence of core developers is really fully understandable. The stablecoin white walkers are coming, such is life in the crypto winter. Being too open is also not a good thing for Ethereum. Etheruem needs to find a functional balance, to imagine that core developers would be capable of operating in a decentralized manner is a bit ridiculous.Historically, Ethereum project management was a simple affair: a few years ago there were only 3\u20134 core developers working on the platform at any given time.Early on, all of the stakeholders participating in Ethereum governance were affiliated with the Ethereum Foundation.Well guess what, things change as your organization evolves. You will hit bottlenecks of product, management and future outlook. Etheruem is a leading project when it comes to smart contract deployment as well as dapps development. EOS and TRON clearly are not decentralized platforms or even remotely at the philosophical sophistication of Ethereum. Yet they pretend to be serious competitors to ETH. However in 2019, the crypto hype ain\u2019t what it used to be.According to ZYcrypto, there have been several allegations concerning Ethereum\u2019s centralization one of which Weiss Ratings mentioned recently, saying few wallets holding 80% of circulating Ethereum is quite dangerous for the network especially when Ethereum moves to proof-of-stake.Ethereum today is probably unrecognizable compared to Ethereum at the time of the DAO hard fork. That\u2019s not a good or a bad thing but it does make you wonder at the future viability of decentralized organization as a best practice for public blockchain projects.You will notice Rettig quickly recanted after coming out and saying that Ethereum\u2019s decentralized governance had failed. He choose to call it a \u2018crisis of confidence\u2019. He was likely pressured to do so by some authority or peer, or combination of both. The attempt at Decentralized Governance failing and Etheruem failing are two very different things. Etheruem has to pivot in order to go from surviving to thriving. The privacy stablecoins are coming.", "responses": "8"}, {"title": "A Proposal To Shake Up Ethereum\u200a\u2014\u200aA New Standard On The\u00a0Horizon?", "author_name": "Ermos Kyriakides", "link": "https://hackernoon.com/a-proposal-to-shake-up-ethereum-a-new-standard-on-the-horizon-d2dfa88507a6?source=search_post", "post_date": "Jun 27, 2018", "readtime": "8 min read", "upvotes": "1.7K", "content": "A Proposal To Shake Up Ethereum\u200a\u2014\u200aA New Standard On The\u00a0Horizon?Ermos KyriakidesBlockedUnblockFollowFollowingJun 27, 2018Let\u2019s cut to the chase\u2026 There\u2019s a new Ethereum Standard Proposal around the corner that could change the face of Ethereum Smart Contracts forever.In this blog post I\u2019ll give a primer on Ethereum and its smart contracts (and tokens), the current standards that are in place and what the new standard proposal by Witek Radomski is and how it will change Ethereum forever.A PrimerBefore moving on to more advanced topics, I would like to get the basics and a few terminologies out of the way, in order for everyone to be able to follow this post.Smart Contract\u200a\u2014\u200aA smart contract is a set of terms and conditions describing a relationship between two or more parties, enforceable by programmatic code.Token\u200a\u2014\u200aThis is a smart contract coded in such way to represent a digital asset. Each token has properties and functions geared towards its intended use; for example, one token can be created to pay access to a network and another can be created to represent real assets such as equity. Tokens can have either a fixed supply, or variable supply (inflationary, deflationary, etc.).Ethereum\u200a\u2014\u200aIs a platform that can be used to create any arbitrary smart contract. These smart contracts are stored on the network, thus making them distributed and decentralized. In addition, smart contracts on Ethereum are immutable and tamper-proof.ERC\u200a\u2014\u200aThis stands for Ethereum Request for Comments. It is the official protocol for proposing improvements to the Ethereum network. Usually there is a number attached to \u2018ERC\u2019 (i.e. ERC-20) and that is just a unique proposal ID number.Fungibility\u200a\u2014\u200aThe property of a good or a commodity whose individual units are essentially interchangeable.What is\u00a0ERC-20?ERC-20 is a standard interface for tokens which was proposed by Vitalik Buterin and Fabian Vogelsteller in November, 2015. This standard \u201callows any tokens on Ethereum to be re-used by other applications: from wallets to decentralized exchanges.\u201dIn order for a token to be ERC-20 compliant and allow seamless interaction with other smart contracts and decentralized applications (dApps), they need to support the following functionality:Retrieve the total amount of tokens that will ever exist also known as the total token supplyRetrieve the number of tokens a certain Ethereum address holdsTransfer tokens between two partiesApprove the use of the token as a monetary assetERC-20 is geared towards representing Fungible Tokens. A fungible token is not unique and is interchangeable with another identical token. The importance of fungibility will come into play later in the post.An example of an ERC-20 token is the Enjin Coin (ENJ). For gamers, it is a common currency between multiple ENJ-implemented games. It will also provide portability and transferability of virtual goods and digital assets. You can find more information about ENJ, in one of my previous blog posts, here.What is\u00a0ERC-721?ERC-721 is standard interface for Non-Fungible Tokens (NFT) and was proposed by Dieter Shirley in September, 2017. The proposal was accepted as an official ERC-721 interface in March, 2018.NFTs are unique in nature and each can be uniquely identified from each other. They can represent ownership over digital or physical assets. NFTs can represent a diverse universe of assets, including:Physical property\u200a\u2014\u200ahouses, unique artworkVirtual collectables\u200a\u2014\u200aunique pictures of kittens, collectable cards\u201cNegative value\u201d assets\u200a\u2014\u200aloans, burdens and other responsibilitiesIn general, all houses are distinct and no two kittens are alike. NFTs are distinguishable and you must track the ownership of each one separately.The motivation behind ERC-721 was the fact that ERC-20 is insufficient for tracking NFTs because each asset is distinct (non-fungible) whereas each of a quantity of tokens is identical (fungible).An existing example of such ERC-721 NFT are the \u2018Kitties\u2019 in the hugely popular CryptoKitties game. Each CryptoKitty is unique in nature and uniquely identified. No two CryptoKitties can ever be the same.What is ERC-1155?ERC-1155 is a standard interface for multiple item/token definitions in a single deployed contract proposed by Witek Radomski (Enjin Co-Founder & CTO) in June 2018. Witek created the code for the first non-fungible token in June 2017, which inspired the creation of ERC-721.The main motivation behind the ERC-1155 proposal, was the fact that ERC-20 and ERC-721 require a separate contract to be deployed for each fungible or NFT token/collection. As you can imagine, this is highly inefficient and \u201climits certain functionality by the nature of separating each token contract into its own permissioned address\u201d.The ERC-1155 proposal comes with a host of advantages over ERC-20 and ERC-721, including:Modular Plug & Play Contracts\u200a\u2014\u200aAs mentioned above, ERC-20 and ERC-721 require a separate contract to be deployed for each and this causes a massive amount of repetitious code thus \u2018polluting\u2019 the Ethereum blockchain. ERC-1155 proposes that the \u2018common\u2019 code across tokens is stored in a central smart contract and given a unique identifier. This unique identifier can then be referenced by other smart contracts which require the central smart contract\u2019s code. This basically provides the ability for smart contracts to \u2018re-use\u2019 code from a central smart contract without the need to copy, thus saving storage space, processing power and electricity.Atomic Swaps of Bundled Tokens\u200a\u2014\u200aAn Atomic swap \u201cis a smart contract technology that enables exchange of one cryptocurrency for another without using centralized intermediaries, such as exchanges\u201d. Using the current standards, if Alice wanted to exchange Token A and Token B with Bob for Token C and Token B, that would require a minimum of four separate steps (Figure A). ERC-1155 solves this inefficiency by grouping multiple tokens together, regardless of have many tokens need to be swapped, and bundles everything together in a two-step process (Figure B).Figure AFigure BMultiple Complex Operations in One\u200a\u2014\u200aERC-1155 will allow you to perform multiple complex operations in a single transaction which will make the transaction \u2018lighter\u2019 and cheaper (Figure C).Figure CFungibility Singularity\u200a\u2014\u200aI have already talked about how ERC-20 caters for fungible tokens and how ERC-721 caters for non-fungible ones. \u201cWith ERC-1155, developers will now have increased power of choice, as each token can be either mass-produced or created singularly and either contain unique metadata or be fully fungible\u201d.How can ERC-1155 be used in\u00a0reality?As an ode to the Enjin team (and their CTO who proposed ERC-1155) I will be using games to present an example. Games have become highly sophisticated\u2026 Characters have different skins, can load different weapons, use different potions, etc.I will be using World of Warcraft as a case study and put points across as if it were to launch on the Ethereum blockchain. At the time of writing, World of Warcraft has a mind-boggling 109,429 items! Some of these items are uniquely identifiable and some are not. For example, a Chromatic Sword is uniquely identifiable (with a limited number in existence) whereas an Ancient Healing Potion is not. Taking current standards, each Chromatic Sword would need to be represented using an ERC-721 token and an Ancient Healing Potion would be represented with an ERC-20 token.Unfortunately, these two token types don\u2019t play very well together. Additionally, the ERC-721 standard would require each and every one of the non-fungible items, to have a separate contract. More often than not, the code powering these items would look almost identical with some minor alterations, however, the current standards don\u2019t cater for code re-use. In essence, these would need to be individually stored on the blockchain, polluting it with duplicate code. For example, if 100 Chromatic Swords existed, each and every one of them would require a separate ERC-721 token.With ERC-1155 you can have the best of both worlds; a Fungibility Singularity (I\u2019ll take credit for this catchphrase). Depending on the game mechanics, you could create thousands of different item types; some of them being uniquely identifiable whilst others being fungible. You could represent unique Chromatic Swords and fungible Ancient Healing Potions with the same standard.Going a step further, ERC-1155 could treat NFTs in a group, thus retaining some fungibility. For example, you would be able to tell that your token is a Chromatic Sword with a unique identifier of it being the first that was ever created.Finally, trading between two parties can now contain a basket of fungible and non-fungible items. For example, Alice could trade her Chromatic Sword and 10 Ancient Healing Potions for Bob\u2019s Poseidus and 5 Astral Mana Potions, in a single transaction.ConclusionTo conclude, I firmly believe the ERC-1155 proposal is a step in the right direction. ERC-20 and ERC-721 have served the Ethereum network well, however, ERC-1155 will take us to a whole new level giving the ability to developers to represent their fungible and non-fungible tokens under a single standard whilst also making transactions cheaper and lighter.", "responses": "1"}, {"title": "Bitfinex Introduces Trading For 12 New Ethereum\u00a0Tokens", "author_name": "Bitfinex", "link": "https://medium.com/bitfinex/bitfinex-introduces-trading-for-12-new-ethereum-tokens-d008d5a2e720?source=search_post", "post_date": "Apr 7, 2018", "readtime": "2 min read", "upvotes": "1.1K", "content": "Bitfinex Introduces Trading For 12 New Ethereum\u00a0TokensBitfinexBlockedUnblockFollowFollowingApr 7, 2018We are excited to introduce trading for a diverse set of tokens, each focused around strengthening the impact and capacity of decentralised technologies.As of this afternoon, trading will be enabled for the following tokens:Aion (AION)IOSToken (IOST)Request Network (REQ)Raiden Network (RDN)Loopring (LRC)BnkToTheFuture Token (BFT)Cofound.it (CFI)Wax (WAX)SingularityNET (AGI)MedicalChain (MTN)Odem (ODEM)Dai (DAI)", "responses": "7"}, {"title": "Why There is No \u201cEthereum Killer\u201d", "author_name": "Eric Olszewski", "link": "https://medium.com/@eolszewski/why-there-is-no-ethereum-killer-cf99b821a6b0?source=search_post", "post_date": "Apr 25", "readtime": "6 min read", "upvotes": "1.2K", "content": "Why There is No \u201cEthereum Killer\u201dEric OlszewskiBlockedUnblockFollowFollowingApr 25Note: For those who aren\u2019t medium members\u200a\u2014\u200ayou can view the full story here.The Ethereum community has always been in favor of the bleeding edge and taking chances. In fact, most of us agree to the idea that if a better platform were to come along that we would willingly defect to it. And yet, even as these new platforms launch with the features ETH 2.0 is working towards (PoS, Sharding, etc\u2026), there\u2019s a clear reticence amongst the community to migrate.So, why is this? Let\u2019s dive in.Us vs.\u00a0ThemIf you\u2019ve been keeping up with the community, you can probably guess a few of these reasons. The first of which is the means by which some of these platforms are communicating themselves / have been communicated to the community.PolkadotOne instance of this would be the pitting of Polkadot against Ethereum by Afri Schoeden\u200a\u2014\u200aa core developer who would \u2018Rage Quit\u2019 Ethereum as a result of the harassment that he faced after causing a commotion in the community regarding Polkadot\u2019s superiority to the incumbent.This departure would cause unrest within the community which deeply mourned their loss and sympathized with Afri\u2019s reasons for leaving. This wouldn\u2019t last long, though.Just two months after the event, an unknown party unveiled Dothereum\u200a\u2014\u200aa fork of Ethereum being built as a Parachain on Polkadot. And while the identities of those working on it have yet to be confirmed, a number of individuals have traced it back to Afri.Naturally, the community which had previously sympathized with the reasons Afri had left immediately turned the other way and viewed him as traitorous and attempting to create a divide in the community. And such sentiment has certainly changed the way in which individuals in the community perceive the overall Polkadot project.Something tells me that people are a lot less interested in trying out Polkadot, now\u2026EOSYou\u2019d think that Polkadot would try to avoid such damage to its reputation after observing what happened with EOS, which actually branded itself as the \u201cEthereum Killer\u201d.How did such a marketing approach work out for them? How many people migrated off of Ethereum to EOS? Personally, I know a few people that tried EOS out, but the network effects weren\u2019t there and the people who stayed chiefly did so to make a quick buck from Block One.EOS certainly did get a lot of attention though, but mostly in the form of satire from the Ethereum community which began to truly loathe EOS and celebrate its regular hiccups / failures. If this was purely about tech, the Ethereum community would been aggressively lampooning other Delegated Proof of Stake platforms, but it wasn\u2019t\u200a\u2014\u200aEOS had waged a war on Ethereum and the community unified against the attacker.Others, etc\u2026And it hasn\u2019t stopped. New platforms are launching each month and positioning themselves as obsolescing Ethereum\u200a\u2014\u200atelling developers to move on to their platform instead of working with the developers and allowing them to come to that conclusion on their own.Now, you may be thinking, \u201cThere are millions of developers in the world, why does he keep focusing on the importance that these platforms take developers from the Ethereum community? Can\u2019t they just onboard people who are new to the space?\u201dNot really, and the reason for this is quite simple.The \u201cKiller\u00a0dApp\u201dSo, this phrase has been passed around a lot within the community for some time now as the thing which will bring blockchain technology to the masses and harbor a new wave of people flooding into the space. Well, when the Initial Coin Offering (ICO) began really taking off in 2017, it was Ethereum\u2019s \u201cKiller dApp\u201d.While others had raised money in this fashion before, it became standardized and much easier to facilitate on Ethereum. Couple this with the fact that people were raising tens to hundreds of millions of dollars in just a matter of seconds (and with no accountability!) and you can see why a lot of people had turned their eyes to Ethereum.\u201cI like money.\u201dAnd as the hype subsided, we saw a huge amount of attrition within the community. But a number did stay, and have contributed to an even larger overall community around the platform.So, while these other platforms may be technically superior, they have yet to offer such a unique value proposition. And with the amount of regulation coming down on them, it\u2019s unlikely that they will ever be able to offer something as compelling as the ICO was to the general public.And it\u2019s for this reason why it is important for these new platforms to focus on the Ethereum community. Because until they are able to provide value to the general public and draw people in with the next \u201cKiller dApp\u201d, the people interested in building on their technology will be constrained to the existing pool of developers (with the majority building on Ethereum).PracticalityDevelopers who are considering building on a new platform also have to weigh the benefits of the platform to the established Ethereum ecosystem and community. And when you\u2019re already working on something so new and novel, you want all the help you can get.Existing InfrastructureEthereum has so much existing infrastructure that developers would be leaving behind if they were to migrate. Veil is a great example of this, a peer-to-peer prediction market built on the open protocols of 0x and Augur (which are both on Ethereum) would not be possible on any of these other platforms because the tooling simply does not exist.Battle-TestedWhile Ethereum may be technically inferior to these other platforms in theory, it has been live for almost four years and has adapted over that time to address the multitude of vulnerabilities and inefficiencies that come with running a system in production. And these other platforms simply don\u2019t have that sort of clout, at this point.Network Effects Wear\u00a0OffThis all said, network effects only last for so long. With enough frustration due to the constraints of the Ethereum platform, developers will certainly seek greener pastures as alternatives become more viable. The question is whether or not Ethereum\u2019s roadmap for scalability can address those concerns before they do so.The answer to this is \u2018Yes\u2019, but I don\u2019t see that scalability coming from ETH 2.0 for the fact that it will simply take too long to deliver on and is highly experimental. So, in the meantime, we have layer two solutions working to provide greater scalability for the mainnet with popular scaling solutions such as plasma and state channels. And these are great, but what if we could combine the layer one roadmap with the speed and agility of layer two development?I proposed this idea a while ago and was excited to see that it was exactly what SKALE\u2019s \u2018Elastic Sidechains\u2019 are offering developers in the Ethereum ecosystem. Each Elastic Sidechain is equivalent to a shard in ETH 2.0 with the Ethereum mainnet serving as the beacon chain (assuming finality in ETH 1.X). And with each Elastic Sidechain supporting threshold signatures, they are able to perform interchain communication (cross-shard communication) in the same manner as proposed by the ETH 2.0 specification.And they aren\u2019t the only ones! There are many many teams working on flavors of Plasma (Plasma Group, Loom, etc\u2026), State Channels (Connext, Celer, Counterfactual, etc\u2026), and other scaling solutions whose work will vastly improve the usability of Ethereum so that it can continue to attract many more businesses and individuals as the smart contract platform of choice.SummaryAs these other smart contract platforms spring to life, I see no threat to Ethereum. Although more technically advanced than Ethereum, they often pit themselves against the Ethereum community (preventing adoption of their technology from existing developers) and often market their tech instead of their value to people outside of the existing blockchain community (preventing further public adoption). The latter point is often a result of them not being able to offer any novel value to those whom they are marketing to a.k.a. no \u201cKiller dApp\u201d.Couple this with Ethereum\u2019s battle-tested network, thriving ecosystem and community, and the ability to scale through layer two technologies, and the reasons for migrating to other platforms quickly fade. This isn\u2019t to say that it isn\u2019t possible that one of these platforms can usurp Ethereum, I just find it highly, highly improbable.", "responses": "9"}, {"title": "Why We Rebuilt Ethereum from\u00a0Scratch", "author_name": "ConsenSys", "link": "https://media.consensys.net/why-we-rebuilt-ethereum-from-scratch-9e38b6ebd4a2?source=search_post", "post_date": "Oct 30, 2018", "readtime": "7 min read", "upvotes": "816", "content": "Why We Rebuilt Ethereum from\u00a0ScratchPegaSys\u2019s new Pantheon Core client focuses on Enterprise Ethereum\u00a0adoptionConsenSysBlockedUnblockFollowFollowingOct 30, 2018PegaSys is the protocol engineering team at ConsenSys. Sign up for the PegaSys newsletter to get the latest updates on Ethereum 2.0.", "responses": "2"}, {"title": "Is DeFi Ethereums Killer\u00a0App?", "author_name": "Dave Kajpust", "link": "https://medium.com/@davekaj/is-defi-ethereums-killer-app-60f18bf785af?source=search_post", "post_date": "Apr 26", "readtime": "11 min read", "upvotes": "814", "content": "Is DeFi Ethereums Killer\u00a0App?A Case Study with Compound\u00a0FinanceDave KajpustBlockedUnblockFollowFollowingApr 26", "responses": "2"}, {"title": "How Does Ethereum\u00a0Work?", "author_name": "Michele D'Aliessi", "link": "https://medium.com/@micheledaliessi/how-does-ethereum-work-8244b6f55297?source=search_post", "post_date": "Feb 11, 2018", "readtime": "7 min read", "upvotes": "888", "content": "How Does Ethereum\u00a0Work?Michele D'AliessiBlockedUnblockFollowFollowingFeb 11, 2018The logic and mechanics behind Ethereum explained in simple words.Ethereum is a platform on which anyone can build unstoppable\u00b9, decentralised applications. If you have never heard of Ethereum or if you don\u2019t know what it can be used for, I would strongly recommend to read \u201cWhat is Ethereum?\u201d before digging deeper and exploring how it works in this article.What is Ethereum?The ultimate guide to understand Ethereum in simple words.medium.com", "responses": "3"}, {"title": "A Complete Mental Model for Ethereum dApp Development", "author_name": "Thon Ly", "link": "https://medium.com/heartbankacademy/a-complete-mental-model-for-ethereum-dapp-development-5ce08598ed0a?source=search_post", "post_date": "Sep 28, 2018", "readtime": "33 min read", "upvotes": "568", "content": "A Complete Mental Model for Ethereum dApp DevelopmentBlockchain Application Development for Web DevelopersThon LyBlockedUnblockFollowFollowingSep 28, 2018Photo: https://www.ethereum.org/assetsIntroductionThe prevailing architecture of most web applications is client-server-database. We utilize clients such as laptops, smartphones, and tablets to make requests from and submit requests to backend servers, which in turn communicate with databases to persist and retrieve data. The relationship between client and server/database is many-to-one, where control is centralized at the latter. If Web 1.0 is about static web pages, Web 2.0 is about interactivity and JavaScript.web stack: Clients => Servers => DatabasesWhere we want to go is Web 3.0, where servers and databases are as decentralized as the clients. In other words, clients can also act as servers or databases or both (aka, peer-to-peer). With many-to-many relationships at all levels of the stack, there are no concentrations of control and a single point of failure. The network is maximally distributed.Web 1.0 Static (HTML/CSS)Web 2.0Interactive (JavaScript)Web 3.0Decentralized (Blockchain)Why do we want clients to also maintain the databases? The most obvious and powerful use-case is Bitcoin. If we all collectively maintain a public ledger of balances and transactions, we can create a global currency that\u2019s completely divorced from governments and institutions. With prophetic timing, \u201cSatoshi Nakamoto\u201d mined the first bitcoin on January 3, 2009 at the height of the worst financial crisis since the Great Depression.blockchain => public ledger => global currencySoon after, Vitalik Buterin realized that if clients could also maintain the \u201cservers\u201d along with the databases, the underlying blockchain can become programmable. The incredible implication is autonomous smart contracts. Such contracts could then be programmed to tokenize (digitize) real-world assets with records of ownership that are immutable. In effect, anyone from any corner of the globe can trade anything, cheaply and securely, without the need for intermediaries which are prone to corruption. From land, energy, music, and voting, the applications are endless, disruptive, and profound.smart contract => records of ownership => blockchainApplications that utilize smart contracts are known as decentralized applications, or dapps for short. Dapps are frontend apps that interface with smart contracts (instead of servers) to persist or retrieve data on the blockchain (instead of databases). Clients interact with dapps through external accounts. To help web developers looking to get into Ethereum dApp development, the author hopes to impart a simple mental model for these architectural layers that make up the blockchain application stack.webapp: Client           => Server         => Databasedapp:   External Account => Smart Contract => BlockchainFor a nontechnical introduction to blockchain, check out this insightful (and quite funny!) primer by Bertie Spell:https://bertiespell.com/blockchain-solves-everythingBlockchain (Database) LayerThe blockchain layer is analogous to the database layer, where data is persisted and retrieved. Here, blocks record every transaction that has ever taken place. What makes blockchain different is that anyone can add to the chain. Consensus is achieved through a process called mining, where computers running an Ethereum client compete to secure the next block (aka, proof-of-work). Together, these nodes make up a network, and each one retains a copy of the entire blockchain. It\u2019s a novel solution to the Byzantine Generals Problem that plagues all distributed systems.network: Ethereum clients => mine(blocks) => proofTo add new data to the blockchain, we submit transactions to nodes in the network. Nodes then group pending transactions into blocks before beginning the mining process.node: transactions => blocks => blockchainTo be precise, each block is a Merkle tree of transactions, plus a Merkle tree of receipts and a Merkle tree of the state. The benefit of these Merkle trees (Merkle-Patricia tries to be exact) is a simplified verification process (aka, Merkel proof), where nodes can simply download the block headers instead of every transaction in every block to verify a payment (aka, light clients).Block Header:1) transactions => transactions trie => transactionsRoot2) infos and logs => receipts trie => receiptsRoot3) addresses and balances => state trie => stateRoottransactionsRoot is a trie of transactions in the block, receiptsRoot is a trie of transaction infos and logs, while stateRoot is a trie of account addresses and balances (aka, ledger). Essentially, a transaction is just a state transition, and a smart contract is just a state transition function.transactions: genesis => state 1 => state 2 => ... => state NAnd the underlying data structure is basically a linked list of binary trees of cryptographic hashes.blockchain: genesis <= tries 1 <= tries 2 <= ... <= tries NTo mine a new block, we calculate a hash of these Merkle roots in the block header. This hash must reference the hash of the last block while it computes a special nounce that results in a value less than some target. This mathematical work is \u201cproof\u201d that the block is valid.hash(nounce, block header, previous hash) < targetThe target is set by the Ethash algorithm which takes into account the time it took to solve the previous block such that the average time normalizes to 15 seconds (aka, block time). This target is continually adjusted because the number of people running nodes is not always constant and the quality of computing resources keeps improving. The output hash is a hexademical (base 16, usually prefixed with \u201c0x\u201d) and is always 64 characters long.https://etherscan.io/chart/blocktimeA block time that\u2019s too high (low target value) will slow down the network and increase processing time of transactions. A block time that\u2019s too low (high target value) will create many duplicate solutions, creating forks in the blockchain. A block time of 15 seconds seems to be ideal.low target value => high block time => takes too longhigh target value => low block time => too many forksWhen forks occur, Ethereum follows the GHOST protocol which selects the fork that has done the most \u201cwork\u201d, i.e., the longest chain (highest block number).Fork A: genesis + block 1 + block 2 + ... + block 12 // mainFork B: genesis + block 1 + block 2 + ... + block 11 // uncleFork C: genesis + block 1 + block 2 + ... + block 10 // uncleUnlike Bitcoin, forks in Ethereum are not \u201corphans\u201d and abandoned. They are \u201cuncles\u201d and are rewarded to create an economic incentive that decentralizes mining pools for increased security. Generally, we wait for at least 6 network confirmations to allow the longest chain to win by a wide margin.block reward: 3 + fees + (1/32 x uncles)uncle reward: 7/8 x 3 // 2 uncles per block (maximum)The more mining is centralized, the greater the risk of a 51% attack, where miners collude to validate double spendings. Waiting for at least 6 more blocks to be confirmed by the network also decreases this risk. Either way, such attacks are impractical and unprofitable, costing at least $6 billion to carry out, and even more if we consider the opportunity cost of not acting honestly and receiving rewards in return.Let\u2019s take a look at an actual block of transactions on the Ethereum network:https://etherscan.io/block/5912705The block Height indicates its order in the chain. In this case, it is block number 5,912,705. According to the TimeStamp, this block was mined on July 5, 2018 around 12 AM by Ethermine. This block contains 89 transactions, which amount to 19,290 new bytes of data. Ethermine was the first to determine the correct Nounce that results in a Hash value less than the target Difficulty. As a reward, Ethermine received 3.46486964996 ethers (Block Reward).block reward = coinbase + fees + uncles = 3 + 0.46486964996 + 0Gas represents computational operations required to execute code. The block Gas Limit defines the maximum number of operations all the transactions in the block are allowed to \u201cconsume\u201d. Like Bitcoin\u2019s block size limitation, its purpose is to keep processing time of transactions and propagation time to other nodes low. Unlike Bitcoin, however, it\u2019s not a constant. Miners have the option to adjust this limit by a small factor.block gas limit = 1.5 x 10^6 x \u03c0 \u00b1 1/1024sum(transaction gas limits) < block gas limitAs in Bitcoin, ethers are created whenever miners successfully solve the cryptographic puzzle. This is done simply by incrementing the miner\u2019s account balance by the reward amount (aka, coinbase transaction). In Bitcoin, however, an actual coinbase transaction needs to be issued by the miner.Let\u2019s now take a look at two of those transactions:https://etherscan.io/tx/0xc28ab33c5943d0d593d34d9af1b29971310dac009b88b83d3b2fae5dfdfed327https://etherscan.io/tx/0x0875ed575d905efdbb909020da5f83867aadfa572f4164ff009a94025f4a977eThese two transactions represent the two possible types in Ethereum. We can send ethers to another account (first transaction) or we can send them to a contract account (second transaction).1) external account => external account2) external account => contract account3) contract account => contract account // \"internal\" transactionsBoth transactions tell us the TimeStamp, From, To, and how much ether to send (Value)\u00a0. They also indicate how much gas was available (Gas Limit), how much was consumed (Gas Used By Txn), and its unit cost (Gas Price). The Nounce here is just a counter to give order to all the transactions being submitted by a particular sender. This is necessary because transactions need to be processed in order to prevent people from spending more than they have. Upon submission, the TxHash is created. It\u2019s the ID of a transaction, which we can use to ping the network to check on the TxReceipt Status of our transaction. If our transaction is meant for a contract account, we can attach Input Data for the contract to consume.Gas Used By Txn < Gas LimitGas Used By Txn x Gas Price = Actual Tx Cost/FeeWhen we submit transactions, we\u2019re asking nodes in the network to process them for us. This requires compute resources, which we pay for in the form of gas. Gas fees not only deter spam, but also halt bad code such as infinite loops. We can specify the amount as well as the price. At the start, the total potential cost will be deducted. Any gas left over will be reimbursed. If we set an insufficient amount, our transaction will revert and we will not be refunded. The more we\u2019re willing to pay per unit of gas, the more priority we will receive. At present, a gas price of 50 gwei ($0.50) has a processing time of 1 minute. Compared to remittance transfers, this speed is incredible and the cost is minuscule.gas price = supply (miners) + demand (external accounts)Quite confusingly, contract accounts also have a nounce with yet another meaning. In these cases, this \u201cnonsensical\u201d number is incremented whenever the contract account creates another contract account.block nounce = solution to the cryptographic puzzleexternal account nounce = number of transactions issuedcontract account nounce = number of contracts createdBefore we conclude this section, let\u2019s examine the makeup of external and contract accounts:Photo: https://etherscan.io/address/0x68b42e44079d1d0a4a037e8c6ecd62c48967e69fhttps://etherscan.io/address/0x06012c8cf97bead5deae237070f9587f8e7a266dBoth types of accounts can send and receive ethers. Therefore, both have a Balance field to keep track of them. Contract accounts, however, can also store data. Therefore, they have a storage field, and a code field that contains machine instructions on how to manipulate the stored data. In other words, contract accounts are smart contracts that live on the blockchain.contract account = balance + code + storageexternal account = balance + empty + emptyExternal accounts are controlled by private keys (i.e., humans) while contract accounts are controlled by code. A transaction between two external accounts is simply a value transfer. A transaction from an external account to a contract account activates the called account\u2019s code. Contrary to popular belief, smart contracts cannot self-execute. Actions on contract accounts are always initiated by external accounts.external account => transaction => contract account A => \"internal\" transaction => contract account B => ...In Ethereum as in Bitcoin, we can only send ethers; we can never take. Therefore, the security of the From field is paramount. It\u2019s so vital, in fact, that three additional fields are used to determine its validity. They are the v, r, and s. Obviously, if we can spoof any From address, we can manipulate any account to transfer all its ethers to us. To comprehend v, r, and s, we need to understand asymmetric cryptography.transact = send ethers // can never take ethersWe use cryptography to encrypt and decrypt messages. With symmetric cryptography, the same key can be used for both encryption and decryption. With asymmetric cryptography, only the private key can be used for decryption, while anyone can use our public key to encrypt messages that only we can see.// Symmetric Cryptographyencrypt(unencrypted message, key 1) => encrypted messagedecrypt(encrypted message, key 1) => unencrypted message// Asymmetric Cryptographyencrypt(unencrypted message, public key) => encrypted messagedecrypt(encrypted message, private key) => unencrypted messageThis property makes asymmetric cryptography more secure because we have no reason to share our private key with anyone. Another advantage of asymmetric cryptography is the ability to \u201csign\u201d a message with our private key. Then using our public key, anyone can verify that our message and our \u201csignature\u201d match.sign(message, private key) => signatureverify(message, signature, public key) => true/falseIn Ethereum, private keys are random 64 hexadecimal characters. In base 10, they are incredibly large and impossible to guess. From private keys, we can generate public keys using the Elliptic Curve Digital Signature Algorithm (ECDSA) to get 128 hexadecimal characters. To generate account addresses, we hash public keys using Ethash (keccak-256) and drop the first 24 characters to arrive at 40 hexadecimal characters.random(hexadecimal characters) => private key // 64 charactersECDSA(private key) => public key // 128 characterskeccak(public key) => account address // 40 charactersIn Ethereum, r and s are outputs of signing the transaction object with the sender\u2019s private key using ECDSA, while v can be used to compute the originating address.sign(transaction) => r and s (signature)v => public key => account addressTogether, these parameters are the means by which nodes in the network can verify that the transaction in fact originated from the account address in question.verify(transaction, rs_signature, v_address) => true/falseBecause it\u2019s possible to derive the originating address from v, it\u2019s not necessary to submit it along with the transaction!Finally, contract addresses can then be generated from the account addresses and the transaction nounce:keccak(account address, transaction nounce) => contract address // 40 charactersWe ignore the first 12 characters to also arrive at 40 hexadecimal characters.Because external addresses and contract addresses ultimately come from our private keys, as long as we keep them safe, theft is impossible. Conversely, if we ever lose our private keys, our ethers are lost forever.Smart Contract (Server)\u00a0LayerThe smart contract layer is analogous to the server layer, where the business/controller logic resides. To create a smart contract, we simply submit a transaction to a \u201cblank\u201d recipient with our logic as payload from an external account.external account => \"blank\" transaction => contract accountOn the blockchain, smart contracts exist as \u201cinternal\u201d accounts with additional storage and code fields. Together, these fields persist the data and the logic of smart contracts, respectively. As such, smart contracts can be abstracted as class constructs, and a Turing-complete programming language can be invented. Solidity is such a language, and it\u2019s the most popular because of its similarity to JavaScript.storage + code = properties + methods => class => SolidityIn Solidity, the class construct has the keyword contract. Like JavaScript, variables and functions (aka, properties and methods) can be defined inside these contract classes.pragma solidity ^0.4.24;contract {    variables;    constructor {}    functions {}}Like classes, any contracts can inherit any other contracts:pragma solidity ^0.4.24;import \"/Foo.sol\";contract Bar is Foo {    ...    }Here, Bar inherits from Foo, meaning Foo\u2019s state and functions are transferred to Bar.inheritance: base contract => derived contract// inherits variables and functions, which can be overriddenFoo\u2019s functions can be overridden if Bar\u2019s functions have the same name, inputs, and outputs. If name is the same but inputs and outputs are different, the function will be overloaded instead.function foo(uint a) {}function foo(uint a) {} // overriddenfunction foo(uint a, uint b) {} // overloadedIf more than one contract is inherited, we must specify the order from the \u201cmost base\u201d to the \u201cmost derived\u201d.contract A {}contract B is A {}contract C is A, B {} // will not compile!contract C is B, A {} // will compileIf composition is preferred over inheritance, contracts can call library functions without inheriting:pragma solidity ^0.4.24;library Foo {    function foo() {        ...    }}contract Bar {    function bar() {        Foo.foo();    }}Though a single contract can inherit from many others, on the blockchain, the codes are combined into one contract account. On the other hand, codes from libraries exist independently on the blockchain.inheritance: multiple smart contracts => one contract accountLibrary accounts on the blockchain do not have storage and cannot hold ethers. When library functions are called, the calling contract\u2019s storage and balance (aka, context) are passed in. Linking to the library contract is possible only after it has been deployed because its address on the blockchain is needed by the contracts that depend on it.1. deploy(library) => library address2. deploy(contract(library address)) => contract addressSolidity supports object-oriented design. We can create abstract contracts that others can inherit; just the function signatures can suffice.pragma solidity ^0.4.24;contract Foo {    function foo() public returns (bytes32);}contract Bar is Foo {    ...}We can also create interface contracts. Here, only the function signatures are allowed. So, no constructor, no variables, and no inheritance.pragma solidity ^0.4.24;interface Foo {    function foo() public returns (bytes32);}Solidity files should have the same name as their contract classes, and the extension\u00a0.sol. To compile them, we specify the version of Solidity we want to use with a pragma statement. The outputs of the compilation process are the bytecodes and the application binary interface (ABI).pragma solidity ^0.4.24semver => major.minor.patch^ => the version indicated up to but not including the next major version~ => the version indicated up to but not including the next minor versioncompile(contract.sol) => bytecodes + ABITo deploy smart contracts, we submit \u201cblank\u201d transactions with the bytecodes attached. Whenever a contract is deployed, an \u201cinstance\u201d of it is created and its constructor method is called. Along with the bytecodes, we can also attach the arguments that we want to pass to the constructor method.contract class => bytecodes + constructor arguments => contract instanceAnalogous to the JavaScript Engine, the Ethereum Virtual Machine (EVM) resides in every node and is responsible for executing the bytecodes. As the EVM runs, it maintains a stack of opcodes that can write to the contract\u2019s storage tree. This stack can have up to 1024 elements, and each element is 32 bytes. Thus, recursion is not recommended because there\u2019s a good chance it might cause a stack overflow. In essence, the EVM is simply a state machine, and the opcodes specify how state transitions are applied to the next block state.EVM stack = opcode + opcode + ... + opcode => next block stateSome opcodes are more expensive to execute than others:Operation         Gas           DescriptionADD/SUB           3             Arithmetic operationMUL/DIV           5             Arithmetic operationADDMOD/MULMOD     8             Arithmetic operationAND/OR/XOR        3             Bitwise logic operationLT/GT/SLT/SGT/EQ  3             Comparison operationPOP               2             Stack operation PUSH/DUP/SWAP     3             Stack operationMLOAD/MSTORE      3             Memory operationJUMP              8             Unconditional jumpJUMPI             10            Conditional jumpSLOAD             200           Storage operationSSTORE            5,000/20,000  Storage operationBALANCE           400           Get balance of an accountCREATE            32,000        Create a new account using CREATECALL              25,000        Create a new account using CALLDuring a contract-creating transaction, the EVM initializes a new contract account by executing the constructor function. The code that results from this initial execution is the actual code that makes up a particular \u201cinstance\u201d.EVM(bytecodes, constructor arguments) => contract instance(s)Of course, this means we can deploy as many \u201cinstances\u201d of our smart contract \u201cclass\u201d as we want.The ABI is the developer\u2019s portal to the opcodes in the contract instance. Its function is to translate the bytecodes into JSON RPC calls to the network.developer => ABI => RPC(bytecodes) => contract instanceTo interact with our instance on the blockchain, we can use the ABI to instruct the EVM which functions and with which arguments we want to call. The most popular JavaScript library for this is web3, so named to remind us that we\u2019re building the future of Web 3.0!web3(ABI) => EVM(functions, arguments)Each web3 invocation is either a transaction (send) or a call. Transactions are sent to the network and potentially state-changing. Calls are read-only and fast. Contracts can call other contracts (aka, message), but it\u2019s always a transaction that gets things started. In other words, message calls in themselves are never state-changing, but they can be part of a state-changing transaction.transaction (send) => message call(s) => state changecall => no state changeWith web3, we can submit four types of transactions:Send ethers from one external account to another external account (like a Bitcoin transaction)Send a \u201cblank\u201d transaction to deploy a smart contract (becomes a contract account)Send ethers from an external account to a contract accountSend a transaction to execute a method within the contract account (to update or retrieve the contract state, or call other contracts)Transactions and calls are executed by the EVM as opcodes, which equate to gas. Transactions that update the blockchain or contract state require payment of ethers. These will take time and will always return the transaction hash. Calls that simply retrieve data from the blockchain or contract are \u201cinstant\u201d and free. We can return any values we want from these calls.setterFunction(ethers) => transaction hash // takes timegetterFunction(free) => any data // happens \"instantly\"Because nodes compete to mine the next block, function calls are executed redundantly across the network. To offset this waste of computing resources, a best practice is to perform as many calculations off-chain as possible.off-chain work => on-chain workThough syntactically similar to JavaScript, Solidity has several major differences. Firstly, variables are strongly typed and there are two types. State variables are primitives, while reference variables point to collections of state variables. If implicitly convertible, types can be coerced into one another.State variables:bool: boolean value (true or false) // default is falselogical operators:!   // logical negation&&  // logical conjunction||  // logical disjunction==  // equality!=  // ineqaulityconditional statements follow short circuiting rulesint / uint: positive or negative integer (\u00b2\u2078 to \u00b2\u00b2\u2075\u2076) // default is 0- can be defined with or without a number suffix- suffix must be a multiple of 8uint = uint256uint8, uint16, uint64, ... , uint256int = int256int8, int16, int64, ... , int256fixed / ufixed: positive or negative point number // default is 0fixedMxN or ufixedMxN// M = number of bits taken by the type; between 0 and 80// N = how many decimal points are available; between 8 and 256; must be divisible by 8ufixed = ufixed128x18fixed  = fixed128x18address: 20 bytes for holding an Ethereum address (40 hexadecimal characters) // default is 0x<address>.balance // get balance<address>.transfer() // send ether from current contract account to <address>// errors will throw<address>.send() // low-level counterpart to transfer()// not recommended because errors are silent (return false)We can also access account variables and functions by calling built-in properties and methods within all addresses. To get the account balance, we can call balance. To send ether to an address from the calling contract account, we can use transfer() (preferable over using send()).<address>.balance => balance in wei<address>.transfer() => transaction hashTo interact with other contract accounts, we can use call and delegatecall (callcode is deprecated) to execute functions within them.<address>.call() // call another contract// return boolean// additional modifiers: .gas() or .value()<address>.callcode() // deprecated<address>.delegatecall() // delegates a function call to another contractCall executes \u201cexternally\u201d while delegatecall executes \u201cinternally\u201d. In other words, delegatecall executes the function of another contract as if it were its own. Equivalent to calling a library function, delegatecall is capable of loading code dynamically from a different contract at runtime. The calling contract\u2019s context (i.e., address, balance, and storage) is preserved; only the code from the called contract is taken.External:<address>.call(\"foo\", 1)Internal:<address>.delegatecall(bytes4(keccak256(\"bar(uint)\")), 2)<library>.bar(2)Reference variables:fixed array: array of single-type elements and unchanging length, (byte, type[N])byte[N] // 0 < N < 33- can be allocated to storage or memory- storage arrays can be any data type- memory arrays can be anything but a mapping- declaring the array public creates a getter function that requires the index of the desired value as a parameterdynamic array: array of single-type elements and changing length (string, bytes, type[])bytes = byte[].length// returns the length of the array// dynamic arrays in storage can be resized by assigning a length.push()// appends a value to the array// new length is returned// storage arrays and bytes (not strings)uint[] memory a = new uint[](<variable length>)// variable length can be defined at runtime by using the new keyword// once defined, it will be of fixed sizemapping: collection of key-value pairs of same typemapping (<key type> => <value type>)// key type can be anything but mapping, dynamic array, contract, enum, or struct// value type can be anything// mapping is basically a hash table// every value is initialized to its default// no length property// key data is not stored, only its keccak256 hash// declaring the mapping public creates a getter function that requires the key of the desired value as a parameterstruct: collection of key-value pairs of different types- a way to define new types- cannot contain a member of its own type- struct values stored as location variables are passed by referenceenum: finite set of custom types- a user defined type- explicitly convertible to integers- requires at least one memberLike a computer\u2019s hard drive and RAM, storage variables point to persisted states while memory variables point to temporary objects, respectively.storage variable => persisted across executions // expensivememory variable => persisted during execution // cheapObviously, state variables are always in storage while local variables of reference type are there by default and can be copied to memory by using the memory keyword. In other words, they are passed by reference. On the other hand, function parameters and return parameters are in memory by default. They are passed by value. To pass them by reference, we can use the storage keyword. Local variables of value type are stored in the EVM stack until the execution completes.storage: state variables (always), local variables of reference type (default)memory: function parameters (default), return parameters (default)call stack: local variables of value type (always) // cheapestSimilar to memory is an area called calldata where parameters of external functions are stored.calldata: external function parametersThough reference variables obviously reference variables in storage, for clarity, we should specify the storage keyword anyway. To copy the referenced variables to memory, we can use the memory keyword.mapping (address => uint) balances;uint storage balance = balances[msg.sender]; // points to sender's balance in storageuint memory balance = balances[msg.sender]; // copies sender's balance to memoryBugs can hide in assumptions about where variables are being stored. This practice prevents this.Like JavaScript, Solidity functions are first-class constructs, meaning they can be passed as parameters to other functions, or be returned by them. Therefore, there are two types of functions. Internal functions are called internally by other functions within the same context (aka, inter-contract message calls). External functions are called externally via transactions (from an external account or another contract). By default, functions are internal but can be changed by using the external keyword.External: EVM => contract A => function 1Internal: contract A (function 1 => function 2)Because contracts can inherit from other contracts, we can also explicitly specify the accessibility of our functions as either public or private. Public functions can be accessed externally via transactions or internally by derived contracts, while private functions can only be accessed by the current contract. If missing the accessibility, functions are assumed to be public.Public: contract A (function 1) => contract B (function 1)Private: contract A (function 1) => contract A (function 2)Though the public and external designations both enable functions to be accessed from the outside, a best practice is to favor external if we expect the functions to ever be called externally. This is because in public functions, the EVM copies the arguments into memory, while external functions just read the arguments stored in the payload. This copying step is expensive, especially for large arguments.public functions: write arguments to memory // expensiveexternal functions: read arguments in payload // cheapType and accessibility of variables can also be specified. As \u201cinternal\u201d properties of contracts, state variables are always internal. Like functions, they can be either public or private depending on whether we want derived contracts to access them. For convenience, automatic getter functions are created for public variables.public variable => variable()It\u2019s important to note that although the private designation prevents other contracts from accessing and modifying its data, the nature of the blockchain is such that everything inside a contract is visible to all external observers. In fact, nothing is ever \u201cdeleted\u201d from the blockchain. When we make a change to our contract state, it does not \u201coverwrite\u201d anything. Though it\u2019s possible to use the selfdestruct operation to \u201cremove\u201d the data in the storage and code area of our contract, nodes have the option to keep them indefinitely.selfdestruct(recipient) => contract \"deleted\"Functions also come with default modifiers. For clarity, functions that do not modify the contract state should be marked as either pure or view. View functions need to read from the state while pure functions do not. Functions that modify state will always return a transaction hash, and nothing else. Functions that handle ethers should be designated as payable. Functions can also be decorated with custom modifiers to easily add additional behaviors and promote code reuse:modifier onlyOwner() {    require(msg.sender == owner);    _;}function foo() onlyOwner {    ...}Underscore indicates when the function body of the decorated function should execute.In summary, functions have the following signature:function doSomething(<parameter types>) {external|internal} {public|private} [pure|view|payable] [modifiers] [returns (<return types>)]<> = required{} = recommended[] = optionalsignature = name + parameter types + function types + accessibility + default modifiers + custom modifiers + return types// explicit function signatures allow for easy translation to ABITo summarize the function types and accessibilities in order of least restrictions:public: accessible by allexternal: only accessible from outsideinternal: accessible by derived contractsprivate: only accessible from withinFunction parameters are defined by type and name. Name cannot be a reserved keyword.function foo(uint a, uint b) {}Functions can return multiple values. If so, they must be declared in the function signature. There are two ways to define the return parameters:Type with name:function foo() returns (uint a) {    a = 3; // return statement not necessary}Type without name:function foo() returns (uint) {    return 3; // return statement required}Contracts can have one anonymous fallback function. This function cannot have arguments and cannot return anything, but a payload can still be supplied with the call. There is a gas limit of 2300, so the function should not do much. The fallback is executed whenever calls to the contract specify functions that do not exist or the payload is empty (i.e., a plain ether transfer). In these cases, for the contract to be able to receive plain ethers, the fallback function must be marked with payable.pragma solidity ^0.4.24;contract Token {    function () payable {        }}Though web3 always ultimately returns the transaction hash for calls that update state, state-changing functions can still return values for other contracts to consume (aka, inter-contract message calls). Nevertheless, it\u2019s still possible for such functions to emit events which web3 can watch for using the transaction hash.Like JavaScript\u2019s console function, events can be used for logging. When called, it causes its arguments to be stored in a special data structure on the blockchain (aka, transaction log). We can emit events within any function, and then watch for them using callbacks via the ABI.Example event:pragma solidity ^0.4.24;contract Token {event Transfer(        address indexed _from,        address indexed _to,        uint256 _value    );function transfer(address _to, uint256 _value) public {        ...        emit Transfer(msg.sender, _to, _value);    }}Example callback:const token = new web3.eth.Contract(ABI, ADDRESS);const event = token.Transfer();event.watch((error, result) => {    if (!error) console.log(result);});Note: Up to 3 event parameters can be indexed for faster queries.To summarize, contract declarations can contain:1. state variables2. reference variables: arrays, structs, enums, mappings3. events4. function modifiers5. constructor function6. fallback function7. external functions8. public functions9. internal functions10. private functions// ideally in this order for convention// within each function group, state-changing functions should come before read-only functions (view before pure)// variable and function names should be camelcaseLike JavaScript, there are special variables and functions that always exist in the EVM\u2019s global namespace. To access information about the transaction or the block, we can use the msg and the block global variables, respectively.Transaction properties:msg.data (bytes): the payloadmsg.gas (uint): remaining gasmsg.sender (address): sender of the message callmsg.sig (bytes4): function identifier (first four bytes of calldata)msg.value (uint): number of wei sent with the message calltx.gasprice (uint): gas price of the transactiontx.origin (address): sender of the transaction // could be insecuregasleft()(uint256): remaining gasBlock properties:block.blockhash(uint blockNumber) returns (bytes32): hash of a given block (no later than 256 blocks ago)block.coinbase (address): address of block minerblock.difficulty (uint): target value for miningblock.gaslimit (uint): total gas limit for transactionsblock.number (uint): height of block in the chainblock.timestamp (uint): time of mining (seconds since unix epoch)now (uint): equivalent to block.timestampUtility functions include cryptographic helpers such as sha256 and keccak256. Time suffixes are also available such as seconds, minutes, hours, days, weeks and years.now = block.timestamp// miners can alter to some degree as long as timestamp is greater than previous block and less than the next block// i.e., 30 second window1 = 1 seconds1 minutes = 60 seconds1 hours = 60 minutes1 days = 24 hours1 weeks = 7 days1 years = 365 days// leap seconds are ignoredEther units are also available: wei, szabo, finney and ether1 ether = 10^18 wei1 ether = 10^6 szabo1 ether = 10^3 finneyLike dollars and cents, wei is the lowest denomination of ethers. It\u2019s not possible to have fractions of wei.1 dollar = 100 cents1 ether = 1,000,000,000,000,000,000 weis// on the blockchain, ethers are stored in domination of weiWe can throw exceptions to handle errors. A thrown exception will always revert the state.assert: checks expected against actual (internal errors)require: ensures valid conditions (external/input errors)revert: always throws an exceptionLike JavaScript, the this variable is also available for easy access to the contract instance itself (can be coerced to the contract\u2019s address). Using this, it\u2019s possible to call internal functions \u201cexternally\u201d from within a contract.foo() => internal call from within contractthis.foo() => external call from within contract via EVMaddress(this) => returns contract addressthis.balance // deprecatedaddress(this).balance // recommendedInline assembly (EVM opcode) is also available to offer granular control over the EVM stack. Though beyond the scope of the typical Solidity developer, awareness of these low-level operations and limitations will prove invaluable during the design process.Writing code is easy. Designing good code is not. For example, because of underlying gas costs and a gas limit on every block, we should not iterate through dynamic arrays of indeterminate size. Instead, we should design our data models in such a way that loops are unnecessary.Poor Design:address[] owners;function isOwner(address owner) returns (bool) {    for (uint i; i < owners.length; i++) {       if (owners[i] == owner) return true;    }    return false;}Good Design:mapping (address => bool) owners;function isOwner(address owner) returns (bool) {    return owners[owner];}To summarize actions that read the state:- reading from state variables- reading from <address>.balance or this.balance- reading from members of block, tx, or msg // except msg.sig and msg.data- calling any function not marked pure- using inline assembly with \"read\" opcodesTo summary actions that modify the state:- sending ethers- creating contracts- changing state variables- emitting events- calling any function not marked as pure or view- calling selfdestruct- using low-level calls- using inline assembly with \"write\" opcodesA quick and easy way to start writing and testing smart contracts is to use Remix, an online editor maintained by the Ethereum Foundation.https://remix.ethereum.orgWith the Remix editor, we can easily author smart contracts using the Solidity programming language. Remix can automatically compile our contract to help audit our code in realtime! When we\u2019re ready, we can tell Remix to use \u201cInjected Web3\u201d (via Metamask) to deploy our contract to a real network.It\u2019s also possible for Remix to create a \u201cfake\u201d in-browser network to help us quickly test our contract! To tell Remix to host a local test network (aka, private network), select \u201cJavaScript VM\u201d for our Environment under the Run tab. For our convenience, five external accounts are automatically created and pre-funded with 100 ethers each.To deploy our contract, we simply provide the arguments that we want to pass to our constructor function before clicking \u201cDeploy\u201d.An \u201cinstance\u201d of our contract now exists on our local network. To help us test our contract, Remix automatically creates input fields for every function that exists in our contract.On the bottom panel, Remix provides a console that outputs all the things that are happening on our local network as we interact with our contract.Note that transactions are processed instantly to save us time when in reality they take much longer. In this author\u2019s opinion, Remix is the best IDE to use during the design phase of the development process!External Account (Client)\u00a0LayerThe external account layer is analogous to the client layer. Architecturally, external accounts exist independently from the network. This is desirable because anyone can create an Ethereum network, and many have been created:- main Ethereum network- remote test networks (Rinkeby, Kovan, Ropsten)- remote private networks- local test network- network forksWith a tool like geth, we can become a node for the main network or our own. In essence, Ethereum is just a protocol, and anyone can implement it.Ethereum protocol => geth => Ethereum network(s)Because external accounts are completely decoupled, the same account can be used across networks! Hence, the name \u201cexternal\u201d account.external account 1 => network Aexternal account 1 => network Bexternal account 1 => ...Thus, external accounts are like \u201cemail addresses\u201d. Just one can be used for authentication across all websites.username + password => email address => any websitespublic key + private key => account address => any networksJust as an email address is created from a username and password, an external account address is created from a public key and private key. One is secret while the other is not. Like websites, dapps provide the user interfaces to the smart contracts that exist on the blockchain. Clients such as Chrome and Mist (or any web3-enabled browser) are the means by which users interact with websites and dapps.User => Email Address   => Website => Server         => DatabaseUser => Account Address => Dapp    => Smart Contract => BlockchainLike having multiple email accounts, having multiple external accounts is useful for protecting our privacy on the public blockchain. However, managing all the various credentials can be frustrating. To ease this burden, we can use BIP39 to generate account addresses and key pairs, algorithmically from a \u201cparent key\u201d, ad infinitum. All we need to remember is a 12-word mnemonic phrase.BIP39(12 words) => array[account addresses, public keys, private keys]Backed by ConsenSys, Metamask is the most popular BIP39 account management tool. Just as web3 is the developer\u2019s portal into the Ethereum blockchain, Metamask is the consumer\u2019s portal. Internally, Metamask also uses web3 to programmatically connect to the network!To create a vault, Metamask generates a random seed phrase (i.e., mnemonic phrase). To help us quickly access our vault without needing to input our seed phrase every time, Metamask asks us to create a password. With such a password, we can lock away our seed phrase in cold storage for maximum security.Internally, each account has a public key, a private key, an address and a balance. For our privacy and security, our account credentials are encrypted and stored locally. Nothing is sent to Metamask. To send ethers, Metamask signs our transaction request using our private key before submitting it to our network of choice. To receive ethers, we simply provide the senders with our address so that they can initiate the request from their end.With Metamask, we can select the main network as well as test networks. We can also setup a local network on port 8545, or provide a URL to a remote network.To better understand the flow, let\u2019s send some ethers using a test network so we don\u2019t have to spend real money. Rinkeby is the most reliable because it uses proof-of-authority instead of proof-of-work. Because ethers in test networks have no real value, there are not enough miners incentivized by proof-of-work to create a healthy level of decentralization. Consequently, attackers can easily take over the mining power. With proof-of-authority, we don\u2019t have to worry about such attacks because blocks are signed by trusted community members (aka, consortium).proof-of-authority => trusted consortiumproof-of-work => competition based on mining powerIn proof-of-work, hash rate (hashes per second) determines how likely a computer is to add the next block of transactions. To disincentivize the need for specialist hardware, Ethereum plans to move from proof-of-work to proof-of-stake. In proof-of-stake, anyone with ethers to stake can participate.proof-of-stake => competition based on putting ethers at stakeBefore we can send ethers, we need some first! To get free ethers, Rinkeby has a faucet we can use. The only requirement (to prevent abuse) is that we authenticate with our social profile.https://faucet.rinkeby.ioOnce we submit our account address, we should see that our balance has increased. Now that we have ethers to spend, let\u2019s try to send some to another account in our vault. First, let\u2019s create a second account.Copy the address of the second account, then switch back to the first account and paste in the address. Provide an amount in ether to send. We can also attach a hexadecimal string as payload. Click Next.Metamask will then ask us to confirm the transaction. Note, Metamask automatically calculates the appropriate gas limit and gas price for us!To determine the best gas values for us, Metamask simulates the function call to our contract (aka, dry run). If there are errors, Metamask will display them too!Click Submit. Metamask will now sign the transaction with our private key and submit it to the Rinkeby network.For our convenience, Metamask records all of our outgoing transactions. Clicking any one will take us to the blockchain where it resides.https://rinkeby.etherscan.io/tx/0x57cbaba8db5b1a868835356c05d1de661a811a7dd81f73a89b787b38665eed43If we switch to our second account, we should see that our balance has updated.Because external accounts are completely decoupled from the blockchain, the dapps we build will never ask for the user\u2019s keys. We can package together the transaction object based on our user\u2019s inputs, but ultimately, the user needs to sign it in order to validate it. Metamask is awesome because when we make a web3 call to submit a transaction, Metamask will bring up a modal to assist the user in the signing process. Therefore, we should build our dapps with Metamask and with this flow in mind.web3(transaction) => Metamask popup => sign(transaction) => networkAs we\u2019ve seen, every transaction will cost some amount of money. Even a tiny update to the blockchain is not free. This means our users will have to pay every time they want to change something. Thus, our value proposition should outweigh these inherent costs.value proposition > transaction feesConclusionTraditional application stacks are clients, servers, and databases. In contrast, Ethereum application stacks are external accounts, smart contracts, and the blockchain. Like JavaScript and the browser, the EVM and the Ethereum client aim to be on every laptop and computer in the world. When the \u201cserver\u201d and the \u201cdatabase\u201d are also managed by the \u201cclient\u201d, we achieve maximal decentralization and distribution. The effect, there are no single points of failure and concentrations of power. Information, value, and wealth are normalized and democratized. Such a network embodies our highest ideals of democracy and freedom.Without the concept of ownership, a free market society is impossible. Trade cannot take place without clear titles of ownership at the outset. The disparity between the rich and the poor is ever increasing, but before we can reverse the trend, we first need to give everyone a means by which to definitively prove ownership. This has been unattainable until now because records of ownership are monopolized by banks and governments, and not all are honest and trustworthy. For a more equitable world to be possible, we need a \u201ctrustless\u201d system that\u2019s immune to corruption.Ethereum is the beginning of such a system. Like a perfect world government, everyone is an equal citizen no matter the background. The only requirement is a private key that no one else has to know, even the \u201cgovernment\u201d. Under such governance, smart contracts are like \u201cbanks\u201d, each storing digital tokens of a real world asset. With a private key, we can permissionlessly enter any \u201cbank\u201d and buy anything from anyone, paying with one universal currency. The anonymous \u201csignatures\u201d we leave behind prove that the transaction took place, immutably and transparently. Ownership is assured. Privacy is protected. Trust and third-parties are disintermediated. Our world government and its banks are secured by cryptoeconomics, a combination of economic incentives and cryptographic verification.A market society that\u2019s truly free is paradisal because it tends towards perfect competition. When actors are able to compete with truthful information and legal guarantee, barriers to entry are reduced for new players. Eventually, a Pareto-optimum equilibrium will be reached such that nobody can be made better off without making someone else worse off. In other words, we undo the widening gap of economic inequality.Trust => Freedom => Love => PeaceAt HeartBank\u00ae, we believe the trustworthiest financial system is a trustless one. Human nature is paradoxical because we\u2019re capable of both extremes. In the absence of trust, our defensive instincts can lead us to the most unimaginable destructions. Where we can trust and feel trusted, we have the capacity to rise up to meet the highest expectations. When we\u2019re free to act from a place of peace, we naturally act with our \u2764\ufe0f.The way to peace is trust(less).You\u2019re now ready to build a real Ethereum dApp! \ud83d\ude07 To learn how, check out:How Truffle Works Under the HoodEthereum dApp Development for Web Developersmedium.comReferences:http://www.ethdocs.org/en/latesthttps://solidity.readthedocs.io/en/v0.4.25/introduction-to-smart-contracts.htmlhttps://ethereum.github.io/yellowpaper/paper.pdfhttps://bitcoin.org/bitcoin.pdfhttps://medium.com/@VitalikButerin/liberation-through-radical-decentralization-22fc4bedc2ac", "responses": "4"}, {"title": "What Bitcoin, Ethereum and other digital assets will\u00a0become", "author_name": "Katerina Stroponiati", "link": "https://hackernoon.com/what-bitcoin-ethereum-and-other-digital-assets-will-become-3dde7e570b6d?source=search_post", "post_date": "Sep 19, 2018", "readtime": "6 min read", "upvotes": "2.3K", "content": "What Bitcoin, Ethereum and other digital assets will\u00a0becomeUnderstanding the transition to the digital\u00a0eraKaterina StroponiatiBlockedUnblockFollowFollowingSep 19, 2018People keep repeating that money is already digital and question the usability of blockchain. But if you come to think of it, in the traditional financial systems the value transfer is not truly digital.The digital money that banks are displaying is not truly transferring value in a digital way. It\u2019s just a display of numbers with no sophisticated transfer of value behind it. No hard currency is transferred from one bank to the other the moment you make a wire transfer (and that\u2019s why it\u2019s efficient). It\u2019s just a display that we blindly trust that it\u2019s true. Let\u2019s call it a display currency.Why is this the case? Let\u2019s dive a bit\u00a0deeperIf you look at the traditional financial infrastructure, there are always five components in place:custody is one organizationissuance is another one (central bank)payment systems a separate oneaudit at another placethe state providing the governance.In almost every transaction, all of the above components have a role in order for the system to function efficiently.If you look at bitcoin, we have all the components of the above-mentioned fiat system, but all managed by the same piece of code. Bitcoin network provides the payment system, the issuance, the audit, the governance, the custody, all in one network.So what did bitcoin truly\u00a0achieve?What bitcoin achieved was a real transfer of value; the truly transition from the paper to the digital era. The moment you transfer a bitcoin to someone, you instantly transfer the actual asset. This happens without involving any trusted 3rd party. Just using math.It\u2019s a hard concept to understand since the line is thin, but if you do, you will see that the bitcoin network achieved a disruption on the traditional financial infrastructure play.But what is all that\u00a0noise?The last few years we\u2019ve seen a plethora of teams trying to repeat the genius infrastructure of bitcoin.Teams are introducing new coins, promising innovations. But what kind of disruptions these truly are?The differences between all these coins and services are nothing more but new infrastructure plays as we transition from the paper to the digital era.What kind of infrastructure?As we mentioned above, a payment system to function in a secure way it needs a few processes in it:Governance,Custody,Issuance and distribution,Transaction processing,AuditBefore bitcoin all the above where separate entities and fully centralized.But it doesn\u2019t need all 5 to be decentralized in order to create a digital asset. For example, there might be a digital asset without auditing at all because some people would like to keep their transaction history completely private from the public or any central authority.So, today the 3 states of the above 5 processes can be:CentralizedDecentralizedNoneFor example, the Central Bank network has all the above 5 processes fully centralized and this is why you receive a central bank currency (display currency).Bitcoin is a fully decentralized network and this is why the digital asset that you receive is fully decentralized as well (cryptocurrency).ZCash and Monero are decentralized networks but auditing is not possible since you can\u2019t see the history of transactions (still a cryptocurrency).Ripple has centralized governance and issuance (the team does both of them) but all other processes are decentralized (not a cryptocurrency since it\u2019s centralized but it\u2019s auditable digital currency).Tether, or now Gemini dollar, are backed by the USD, centralized since under control of a certain organization (not cryptocurrencies, just new form of digital assets).There is one more obstacle we have to\u00a0overcomeInterconnectivity of the mentioned systems above.For example, right now, if you want to open a website, you can do it from any browser, any device. But if you want to manage your fiat assets you cannot use Wells Fargo unless you open an account there, you can\u2019t transfer money to another country unless Swift gets involved. Same goes for the crypto space. If you have 10 different currencies and you want to transfer value from one asset to another, you will need to use a third party service (like an exchange or atomic swaps) that will allow you to do this.In the current state, we can describe it as having to use different browsers for different websites.At the end, we will have a universal infrastructure, a financial internet where all assets will \u201ctalk\u201d to each other.Ok, but why do they need a blockchain?As mentioned above, all the above assets are becoming digital assets and will be basically defined by the infrastructure (payment system) in which they \u2018exist\u2019.Why? Because the basic feature that accounting system needs in order to be reliable is security. And blockchain provides the security features. It\u2019s a mechanism for reaching consensus between multiple parties who don\u2019t trust each other. In other words, the blockhain digitalizes the trust and the memory factor. All you need in order to transfer value.So, blockchain is not about currency, but rather about consensus regarding the state of some digital asset. In order to achieve consensus, you need participation. In order to incentivize people to participate in such a network, you reward them with a currency. It can be a new coin built from scratch that it\u2019s only used for this network or an existing one.We should never forget that blockchain is just a tool for a system, like a camera for a photo, a hammer for a nail, or an engine for a car.The creation of new digital\u00a0assetsIf you think about it, these are assets that we never had imagined before the digital era. Thanks to digitalization we now have the flexibility to practically create assets that never existed before. And this happened by introducing two more states, decentralized and none (for now, maybe more in the future).As a conclusion, there are three major types of digital assets:Display assets. Everything is fully centralized and there is no sophisticated transfer of value. It\u2019s just a display and we just trust the banks that the numbers that we see represent the truth.Cryptocurrencies. The ultimate level of decentralization on the infrastructure level. The trust factor is ultimately eliminated. There is no part that is centralized.Hybrid digital assets. Some parts of the infrastructure are centralized, while others are decentralized or they don\u2019t exist.Digital assets are different to the tokenization of analog\u00a0assets.Don\u2019t confuse the tokenization of analog assets with digital assets. These are two completely different things.The former is when we take an analog asset such as real estate and we use blockchain in order to automate the ownership rights. Instead of using lawyers, we turn the analog asset and its ownerships rights into a package that we call it a token. The house didn\u2019t turn digital, it\u2019s still a house. We just automated the ownership infustructure using the technology of blockchain.The latter, transformed completely the asset into a digital form. For example, bitcoin didn\u2019t turn dollar (analog asset) into a token. Bitcoin is a stand alone digital money by itself. It made the analog asset obsolete.ConclusionAs we can see above, digital assets acquire specific features depending on the context.Currently, we make analogies with the assets that we understand and we know, \u201cbitcoin is the new gold\u201d, \u201cether is the new dollar\u201d but what we actually build it\u2019s something way bigger.We gradually transit from the paper to the digital era structuring a universal infrastructure, a trust-less network where all assets will \u201ctalk\u201d to each other and people will use them freely according to their needs.Eventually, we will not even realize which asset we use each time. The same way we don\u2019t really know which protocol we use every time we open a new website. Can you imagine how far this can go?We are lucky to be in the beginning of this era.Follow my updates on twitter @katerinastro.", "responses": "4"}, {"title": "My rambling journey into a career working on Ethereum and the decentralized web", "author_name": "Piper Merriam", "link": "https://medium.com/@pipermerriam/my-rambling-journey-into-a-career-working-on-ethereum-and-the-decentralized-web-134743766f64?source=search_post", "post_date": "Mar 1, 2017", "readtime": "9 min read", "upvotes": "378", "content": "My rambling journey into a career working on Ethereum and the decentralized webPiper MerriamBlockedUnblockFollowFollowingMar 1, 2017I began my career as a software engineer in 2011 working for a small consultancy in Denver named Fusionbox. At the time I had roughly zero professional experience writing software. This was my first job with benefits and a salary.After three years of consulting work I was ready for new challenges. I took a position at a product company in Boulder named Simple Energy. I would spend the next year and some change building their python team and leading a rewrite of their legacy application. Simple Energy out of runway and I was part of the layoffs.Enter Ethereum stage left. At this point I had been an armchair bitcoin enthusiast for a while. I had enjoyed the convenience and quality from certain early bitcoin dark markets. I was sure bitcoin was the future. I had also never written a single line of code to interact with the platform. It never even really occurred to me that was something people did. I had a high level understanding of bitcoin and blockchains but the idea of building an application on the platform was still shrouded in mystery.My interest in Bitcoin led me to Ethereum. I recall it being announced to much excitement. I recall it being labeled a scam. I recall not understanding what it was in the slightest.But despite my lack of understanding I ended up putting a few BTC into the crowdsale. Over the coming months I would read every single post from the Ethereum blog. The picture was slowly coming into focus. Little did I know that a foundation was being laid for a career I didn\u2019t know I wanted.When the frontier network came online I was halfway through a two month contract to hire. The founder and I were not seeing eye to eye and had decided to part ways when my contract was up. I spent the remaining month finding a new job and exploring this new \u201cEthereum\u201d thing.By the time that month was wrapping up I had published the first release of and experimental smart contract development framework called Populus and was starting to work on Ethereum Alarm Clock. Ethereum was new and exciting. The potential for this thing was slowly being revealed to me and I wanted to work with it full time.At the time, Ethereum was new and unpredictable. To dive into something that new is to bring my wife and 18 month old son along with me and I couldn\u2019t justify exposing them to that much risk. Ethereum would need to remain on the sidelines of my life for a bit longer.I took a job at a software consultancy named Quick Left. My previous experience working for a consultancy left me cautious, but this company looked different. Over the coming months I would regularly feel like the crazy person, ranting about the decentralized web, Ethereum and a future that still sounds a lot like science fiction. I gave an Introduction to Ethereum talk to the Javascript meetup hosted by our company.Quick Left turned out to be an amazing place to work. Shortly after starting I asked about attending Devcon One in London. At this time, Ether was sitting at about $1 and there was roughly zero mainstream news or hype about the platform. Quick Left wasn\u2019t quite up for footing the bill, but they did let me attend without taking any time off of work.I came home from London completely blown away by the Ethereum community. It was the first time I\u2019d ever been in a room with other people who really knew about the platform. My time there was a torrent of conversations on topics that had been relentlessly spinning in my head for months. It was nothing short of trans-formative.I also came home with some leads on Ethereum based consulting work. I spoke to our leadership about the idea of chasing these down and to my general surprise, they were nothing but supportive. This was probably the secret sauce of what made Quick Left a great place to work. If you were really into something, they would support you in exploring it. More companies should try this.For the next six months I would work almost exclusively on Ethereum based consulting work. I recall our CTO telling me that in the beginning he\u2019d stated privately to someone else in the company that we would \u201cNever earn a single dollar related to Ethereum\u201d. I can\u2019t say it doesn\u2019t feel good to have things turn out in your favor.All of this changed one morning in May 2016. I showed up at the office to find a number of people I didn\u2019t recognize and the large conference room being prepared for an all hands meeting. Quick Left had been quietly struggling to make payroll for a few months. Consulting work, especially high quality consulting work is a difficult business model. The average person can\u2019t tell the difference between a product hacked together with Wordpress plugins and a well crafted application. The differences show up quickly as time passes, but at first, they can look very similar to the untrained eye. Why pay $100 an hour when this other company is only charging $40?We were being purchased by Cognizant, a very large enterprise technology company who wanted our secret sauce. We were modern and nimble in our software development practices and Cognizant wanted all of it. All current projects were immediately terminated as part of the acquisition. I had to say goodbye to the decentralized insurance platform as well as consulting with the Ethereum Foundation on Casper. It was a major setback.I ended up deciding to stay on and see how things went. While Ethereum was maturing it was still young. Most of the job offers I was getting still felt risky and while I knew Ethereum was what I wanted to work on wasn\u2019t sure I was ready to make that move. I also knew that a company like Cognizant would be exploring blockchain based solutions. As much as I loathed being a cog in such a giant corporate machine, I thought it might open up opportunities that would otherwise be closed to me.The next few months involved a lot of change at Quick Left, now Cognizant Quick Left (or CQL if you\u2019re into the whole brevity thing). We were transitioning from being a company that built web applications into something else. We still did some of the web application stuff but it was intermittent. We were creating a training program designed to teach other people from Cognizant how we made software. Things seemed to shift and change from week to week and there often weren\u2019t answers for where we were going or what we were doing. Nothing has served as a better illustration for the inefficiency and slowness that seems to be common among very large companies.During this time the term blockchain is being tossed around constantly. I knew that somewhere within Cognizant there was a group focused on blockchain based solutions. The problem was we couldn\u2019t seem to find it. The pessimist in me worried that all the blockchain talk was merely the carrot to keep me onboard. The optimist in me looked to Hanlon\u2019s Razor to explain things:\u201cNever attribute to malice that which is adequately explained by stupidity\u201dI expected that if I waited long enough that I would find myself doing some semblance of the work I wanted to be doing. In fact, I actually was doing the work I wanted to be doing. My boss had carved out a role for me within the company that afforded me a lot of freedom in how I spent my time. During the four months that I was a CQL employee I was able to largely rewrite web3.py and Populus, along with most of the underlying tool chain. The problem was that I was alone. I was this little blockchain focused island amidst a sea of unrelated work and projects.There are however a few perks related to working for a giant multi-national corporation. CQL paid for me to attend Devcon Two as well as handling the complex bureaucratic visa process. I left for the conference with the sole intention using it as an opportunity to further my goal of fostering blockchain based work withing Cognizant. Within the first few days all of that would change.I had spent most of the previous year avoiding getting hired by any Ethereum based company. I wanted to work on the platform but I also wanted to make that move on my terms. I wanted to work on my ideas, or more specifically, I wasn\u2019t keen on building someone else product. And really, I just wanted to work on open source. By the second day of the conference it had crystallized. There wasn\u2019t likely to be a better opportunity to make my move into working on Ethereum full time than the one in front of me.I spoke with a number of companies and people that week. I wanted to say yes to so many of them. Our community is full of amazing people doing amazing things. I was genuinely surprised with the company I went with.I\u2019ve watched ConsenSys for a long time. They are easily the largest company in the Ethereum ecosystem. There are a lot of really talented and smart people on their payroll. They\u2019re behind many prominent Ethereum tools and applications. I\u2019d be curious to hear about any project that isn\u2019t using at least one of the following:MetamaskTruffleTestRPCInfuraIn my experience companies are rarely good. And often, the bigger the company, the bigger the un-goodness. They are rarely good to their employees because they have more power. They are rarely good to the environment because doing so cuts into their bottom line and we\u2019ve decided as a society we\u2019re fine with sweeping these costs under the rug. They are rarely good to society because they confuse what\u2019s profitable with what\u2019s best for people.During one of the breaks at Devcon this year I was talking with Tim Coulter. He made what I believe was a completely off-hand remark asking why I don\u2019t work for ConsenSys. This led me to ask myself that same question:What if I worked for ConsenSys?In all my watching, I could not recall a single instance where they\u2019d behaved in the manner I expect from large companies. ConsenSys seemed to be dedicated to open source. They seemed to be doing good things for the Ethereum community. I already knew most of their developers in some way.Things abruptly fell into place. Shortly after the conference I signed on as a full time salaried employee for ConsenSys.Everything that I\u2019ve created for the Ethereum ecosystem before then was done in the spare time I could carve out between my family and my actual full time job. I was never able to know if I\u2019d have time to continue working on a feature next week, much less tomorrow. I was never able to make long term plans for my software because I never knew how much time I\u2019d have available to me in the coming weeks or months. I was never able to commit to bigger and broader efforts because I didn\u2019t know if my schedule would continue to permit my involvement.Working for ConsenSys has changed all of this. It has given me the ability to look further than a few days or weeks. It allowed me to pursue creation of ERC190 and EthPM\u00a0, both of which would likely not exist otherwise. But the really amazing part for me is that in these four months I haven\u2019t been required to make a single compromise. I still set my own priorities. I still get to focus on advancing the open source Ethereum ecosystem.", "responses": "9"}, {"title": "StabL Bringing Stable Tokens and Derivative Products to the Ethereum Blockchain", "author_name": "Hadrien Charlanes", "link": "https://blog.variabl.io/stabl-bringing-stable-tokens-and-derivative-products-to-the-ethereum-blockchain-df4d5eba89d9?source=search_post", "post_date": "Feb 16, 2017", "readtime": "9 min read", "upvotes": "312", "content": "StabL Bringing Stable Tokens and Derivative Products to the Ethereum BlockchainHadrien CharlanesBlockedUnblockFollowFollowingFeb 16, 2017Stable tokens have been a leading topic of discussion since the birth of Ethereum. Using the decentralized platform that is the public Ethereum necessitates holding ether, not only to use it as gas or fuel, to gain access to the shared public resource of the mainnet but also as a currency to store value. The problem with using ether as a currency, is that it is a currency whose price is variable. If this risk obstacle of volatile price were overcome, with the introduction of a cryptographic asset that tracks, for example, to USD, it would pave the way for massive acceleration of Ethereum adoption.I am proud to introduce StabL, a blockchain company that aims to operate on-chain derivative markets (Futures/Contracts For Differences based products) and develop an ecosystem of traders, individuals, and decentralized applications that benefit from these new financial markets. We will mainly distribute these derivative products through our semi-decentralized exchange, VariabL. Some of our financial products will have the property of remaining stable against the price of fiat currencies such as USD, EUR, CNY or JPY. We will distribute these positions as USD/EUR/CNY/JPY StabL tokens on a more user-friendly exchange, StabL. Ultimately, StabL seeks to the step of exposure to ether from people who wish to interact with the Ethereum network.VariabL will enable traders to benefit from low cost, yet highly secure, financial products while StabL will offer dApps and individuals access to stable values on the blockchain.We expect to sustain the same kind of virtuous circle that happens between Coinbase cryptocurrency users and GDAX crypto-traders. StabL users (individuals and apps built on Ethereum) will have access to StabL tokens when they need it, benefiting from the liquidity provided by VariabL, while traders on VariabL (market makers) will benefit from premiums generated by StabL users who are ready to pay for a service: stability.The first step for us is to attract a critical mass on VariabL the exchange that we will demo at EdCon in Paris and release in alpha in the coming month.Stable tokens: What\u2019s at\u00a0stake?A Stable token is a crypto-token that keeps a stable value against a specific index like the price of one US Dollar.A crypto-token is a transferable asset stored on a blockchain. Every token stored on the Ethereum blockchain benefits from the properties of ether itself: distributed verification of transactions, pseudo-anonymity, almost instantaneous and low-fee transfers, censorship-resistance, access to smart contracts etc. A USD Stable token means mainly two things:Crypto-properties are added to dollars. (You have an asset that has the same value as one USD bill but with better properties: you can do much more with it)It is now possible to store USD-stable values within the Blockchain with these tokens.How StabL will offer Stable\u00a0tokens?In order to be able to explain our approach, I will map and compare StabL tokens with different existing stable assets and their underlying stability mechanisms and properties. Some of the concepts will be simplified for clarity.The Spectrum of Stable\u00a0AssetsA stable asset is something you can own that keeps a stable value against an index. For instance a gold-stable asset that is worth 500 g of gold today will be worth 500 g of gold for its entire lifetime. There are plenty of different assets that fit this definition. Here is a list of them and an analysis of how they differ from one another:Assets that represent directly gold.500g of gold buried in a desert.500g of gold ingots.500 g of gold coins in a purse.Bank deposit box that contains 500 g of gold500 DGX tokens (Ethereum tokens, cheer guys\u00a0:))Assets that are valued at a stable gold weight but do not directly represent goldA contract with a friend that states that he owes you 500g of gold, with a set due date that is 6 months from now.Gold ETF shares. (SPDR Gold Shares ETF for instance). Shares of a fund which variations follows gold price variations.Position in a Contract For Difference (CFD) USD vs Gold (i.e: In 6 months from now, I will buy 500 g of gold at a specific price determined today)Gold StabL Tokens bought on StabL platform (Ethereum tokens that represent a position in an on-chain cash settled future contract. We will not focus on Gold StabL tokens in our early stages, but this is a good example to explain our approach)Every previously listed asset has different properties. Let\u2019s try to compare our listed assets with the most important properties.Value Storage Property: ownership of your asset and its underlying value.What guarantees you that the underlying value of your asset will remain?How secure is your ownership?What/Who guarantees you the ownership of your asset will remain?When you store gold yourself (coins, lingots, buried gold), you trust yourself, when you use a bank deposit box, you trust your bank not to be robbed (or to have good insurances), when you use an Ethereum token (StabL, DGX), you trust the Ethereum technology and yourself with the way that you store your private key.It is difficult to rate these assets against this property since it depends a lot on ourselves. (How do I bury gold? How do I keep my private key? What Bank I chose? How do I store the written contract I signed with my friend?).On the long term, we are convinced that owning a token that lives on a blockchain like Ethereum is the most secure way to own an asset. The Ethereum community is still in the early stage, but mature tools to store and back up private keys along with privacy will make owning tokens seamless yet secure.Given that your ownership is secure what makes its value guaranteed?Of course when owning physical gold, there is no risk of your asset losing value (Gold is an amazingly stable element\u00a0:)).When owning physical gold through a proxy (bank deposit box, DGX), you trust this proxy.When owning a financial asset like Gold ETFs or Gold futures, it is a bit more complicated. The value is guaranteed by the robustness of the game theoretical financial mechanism that includes an ecosystem of traders, arbitragers, hedgers, index providers, laws enforcers etc. You also usually trust the exchange that gives you access to these assets.StabL aims at leveraging blockchain technology to replicate the CFD/Futures market mechanisms on-chain, issuing stable tokens backed by a game theoretical mechanism that runs in a trustless fashion. Theses tokens will be distributed through a decentralized exchange.Transferability: Ability to transfer the\u00a0asset.Gold coins are more transferable than lingots or raw gold but still need to be exchanged in the physical world.Buried gold or gold stored in a deposit box have poor transferability properties.Ethereum tokens that represent a stable value of gold (DGX or Gold StabL Tokens) are definitely the assets that have the best transferability properties (20 sec on-chain transfers, instant using state channels, low fees, secure).Liquidity: Ability to trade the\u00a0asset.For an asset to be liquid (meaning you can sell/buy a large amount of it quickly), you need it to be available on exchanges that have large volumes. Volume is one of the key factors that relate to velocity. The most liquid assets are positions in CFD/Futures and ETFs. Indeed, since they don\u2019t represent physical gold but positions in a financial system, it is easy to buy/sell them. You don\u2019t need to move any physical good.New CFD/Future contracts can be created (on the so called primary markets) as soon as two parties agree on a Future contract. Then these two parties can sell their position in the Future contract (on secondary markets).In today\u2019s financial world it harder for small investors to trade on the primary market.With Ethereum and easy digital contracts creations, this market becomes way more accessible: the difference between primary markets and secondary markets are blurred, giving an overall more efficient market.StabL Tokens have the same mechanical properties: if our on-chain financial products (Futures-like products) attract a large number of traders (lot of Future contracts created), our tokens (that represent a position in one of these contracts) will be much more liquid than any gold-backed token. If there does not exist enough Future positions that are stable against USD (represented by a USD StabL token), you just create some by being matched with a trader around a Future contract as easily.Non-financial properties: What else you can do with these\u00a0assets.Gold can be used to store value, to transfer value, to wear value, even to lend value as vehicles in contracts. Futures and ETFs have better trading properties since they are well suited for the internet world, yet they rely on centralized parties whereas gold, as a chemical element, relies on, well, physical trustless laws.On-chain stable tokens open a whole new world to gold. Both DGX and StabL Tokens can be used in smart contracts. For instance, they can be used as a currency in a trustless crowdfunding platform like WeiFund. What is even more powerful with StabL tokens is that since their value is guaranteed by a decentralized game theoretical mechanism (based on Futures market), the only potential point of failure lies in the design or the implementation of the mechanism. Even if we think we have found a design that works in the on-chain world, we are very well aware that offering such a mechanism at all once is near impossible (especially in the current youth of the Ethereum ecosystem) and we differentiate ourselves by taking a lean approach.Approach and High-Level Roadmap:A lean and experimental approachWe\u2019d like to present our past, and more importantly, the values that brought us together.The core team behind StabL includes financial engineers, experienced Ethereum-based applications developers and economists. We all share on top of our passion for blockchain and decentralization a deep conviction that developing lean and pragmatic Ethereum-based ventures as any other, focused on releasing and iterating on products, will help the ecosystem in a synergetic way with theoretically brilliant white papers.For more than one year, we have, in our bootstrap approach, been supported, advised and challenged by the ConsenSys Mesh. It is time to release our first product (early March) and widen the circle of our collaborators to anybody interested in cryptocurrencies, trading or finance.For the past year, we have been researching, exploring technological limits, implementing prototypes and leading interviews. Here are the main learnings we have included in StabL\u2019s DNA:Ethereum is young, immature and one of the most promising technologies of the century. It makes no sense to use today in its public version as a mature technology. It will be used as an infrastructure for mainstream applications but it cannot today.Our main goal is to see a production version of Ethereum (not just its blockchain) suited for large-scale applications. This includes easy-to-use key managers, web3 providers, decentralized storage, p2p messaging, privacy, blockchain(s) scalability (off-chain a/o on-chain), dev tools & best practices and of course stable tokens\u00a0:). I am amazed to see all theses challenges being tackled by our decentralized community at the same time and hope the fruits of our labor will all come together soon!Decentralization is the goal but it does not need to be the path. If by being semi-centralized we learn and get to decentralization faster, we should do so proudly.The beauty of applications built on Ethereum is not their decentralized infrastructure, but the benefits that come out of it. We will try to prove that by competing with centralized infrastructure products as much as we can.We will release simple but robust products with the aim to improve them as fast as we can.High-Level Roadmap:There is general idea that is important to understand when thinking about complex financial ecosystems: they are intertwined networks (very strong network effect). A complex financial system based on free market efficiencies is very scalable and efficient at large scale but very weak at low scale:Recovery from a brutal event can be very difficult.It is weak against speculative attacks.The general idea is that kickstarting a complex financial ecosystem which reliability needs a lot of actors and high volume traded between these actors is almost impossible. We think it is possible to start with more simple systems that are robust at low scale, and even if the financial products have limited liquidity, fungibility or life duration properties they remain interesting and benefit from new properties thanks to blockchain technology. Their properties can improve along with volume attracted on these products. That way, we can remain robust at every stage and find a path to more scalable products without having to make an (unlinkely) all or (likely) nothing bet.More to come before the end of the week!Please, feel free to reach me for any inquiries at @hcharlanes on twitter.", "responses": "7"}, {"title": "Sharding, Raiden, Plasma: The Scaling Solutions that Will Unchain\u00a0Ethereum", "author_name": "imbrex", "link": "https://medium.com/imbrexblog/sharding-raiden-plasma-the-scaling-solutions-that-will-unchain-ethereum-c590e994523b?source=search_post", "post_date": "Dec 12, 2017", "readtime": "5 min read", "upvotes": "616", "content": "Sharding, Raiden, Plasma: The Scaling Solutions that Will Unchain\u00a0EthereumimbrexBlockedUnblockFollowFollowingDec 12, 2017And how imbrex is positioned to grow with the blockchain of tomorrowCryptocurrency heavyweights such as Bitcoin and Ethereum are beginning to garner the attention of mainstream media in thanks largely to their monstrous rise in value over the past year. This coverage has piqued the interest of people all over the world who are eager learn more about the underlying technology and how to get involved. However, it also raises concerns of scalability\u200a\u2014\u200agrowing the capacity of blockchain networks to handle the massive influx of traffic that comes alongside mainstream adoption\u200a\u2014\u200aone of the biggest challenges facing blockchain technology today.In our previous blog post, we discussed how the current throughputs of Bitcoin and Ethereum are limited, which results in a backlog of unconfirmed transactions when their networks are at full capacity. This issue was laid front and center just this week, and provides a perfect example of the challenges facing the extreme growth of blockchain technology\u2026CRYPTOKITTIESCryptoKitties, a recently launched dApp upon which users trade virtual kittens, went viral and tested the network\u2019s capacity, providing essential scaling data and a valuable case study for Ethereum\u2019s viability in asset management, and for the Ethereum blockchain\u2019s current transactional capabilities. In the span of four days,CryptoKitties went from accounting for 3% of all Ethereum transactions to 11.77%. This resulted in transaction backlogs, network delays and higher gas fees.Real estate, a 217 trillion dollar global asset class, will be among the largest industries to benefit from the blockchain. However, blockchain technology will struggle to reach its full potential if it fails to overcome this obstacle and facilitate transactions on a global scale. In order for imbrex and other dApps to operate efficiently, these hurdles must be addressed.Fortunately, there are a number of teams working on a variety of solutions to this problem. We will be taking a closer look at some of the promising scaling solutions for Ethereum: Sharding, Raiden, and Plasma.ShardingIn Ethereum\u2019s current state, nodes compete independently to validate a single transaction in exchange for a monetary reward. Once a node successfully validates a transaction, other nodes verify this information is correct, update the blockchain, and compete to validate the next transaction. The nodes that process these transactions must keep a record of all information stored on the blockchain; this includes every single account balance, transaction, and smart contract.As Ethereum begins to flourish, this process will become increasingly inefficient. Sharding will allow nodes and transactions to be divided into smaller groups, meaning more transactions can be validated at once, and nodes only need to store certain segments of the blockchain. Before Sharding can be implemented, Ethereum protocol must be upgraded to Casper, which is currently still in development.RaidenUnlike Sharding, Raiden proposes to scale the Ethereum network off-chain using state channel technology. Raiden will make microtransactions more feasible for Internet of Things and Machine-to-Machine applications, which is a huge and growing market. Explained simply, off-chain transactions allow a collection of nodes to establish payment channels between each other to facilitate transactions, without directly transacting with the Ethereum blockchain and clogging up precious capacity.Off-chain transactions are faster and cheaper than on-chain transactions because they can be recorded immediately, and fees are only paid for forwarding transactions between nodes; there is no need to wait for block conformations and pay a competitive fee to incentivize miners to include the transaction in the next block. Although these nodes can only communicate with their direct neighbor, transactions can be forwarded from neighbor to neighbor to reach non-neighboring nodes. The only caveat is that each node must hold a balance greater than or equal to the amount in the transaction.Recently, a simplified version of this scaling solution called \u00b5Raiden was activated on the Ethereum Mainnet.PlasmaAnother scaling solution is Plasma, which uses a series of smart contracts to create hierarchical trees of sidechains. It can be thought of as a child blockchain that lives within a parent blockchain and relays information back to root chain (Ethereum) periodically.Because each child blockchain is created through a smart contract, it may be governed by its own set of rules and constraints. Transactions can even be reversed if a participant within the child blockchain is proven to have acted maliciously.Theoretically, there are no limits on how many children blockchain that can be made; therefore, Plasma could facilitate nearly infinite scaling. This all happens off-chain which means, like Raiden, Plasma gets the benefits of faster and cheaper transactions.In ClosingBlockchain technology has the potential to impact countless industries by reinventing how we create value and transact with one another. Billions of transactions happen every day, many of which are making their way to the blockchain. If blockchain technology does not find a way to handle all of these transactions, growth and adoption will be stifled.Ethereum is making steady progress towards scaling solutions on-chain with Sharding and off-chain with Raiden and Plasma. Although there are numerous propositions, it is very possible for them to complement each other. When these solutions are implemented, we may reach unprecedented levels of transactions.In developing the imbrex platform, we have also paid close attention to optimizing imbrex\u2019s transactional relationship with the Ethereum blockchain. That\u2019s why we\u2019re implementing innovations like a dual-option membership model to more effectively serve our users and the network, have designed our smart contracts to maximize network efficiency, and are following a roadmap that releases, perfects, and then grows the imbrex platform in concert with the implementation of scaling solutions for the Ethereum network.Imbrex SocialFacebook Group: https://www.facebook.com/groups/imbrexFacebook Page: https://www.facebook.com/imbrex.io/Instagram: https://www.instagram.com/imbrex_io/LinkedIn: https://www.linkedin.com/company/imbrex-io/Reddit: https://www.reddit.com/r/imbrex_io/Twitter: https://twitter.com/imbrex_io", "responses": "1"}]