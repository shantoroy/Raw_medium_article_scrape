[{"title": "", "author_name": "", "link": "https://medium.com/@preethikasireddy/how-does-ethereum-work-anyway-22d1df506369?source=search_post---------0", "post_date": "", "readtime": "", "upvotes": "", "content": "How does Ethereum work, anyway?Preethi KasireddyFollowSep 27, 2017 \u00b7 33 min readSource: r/ethereumIntroductionOdds are you\u2019ve heard about the Ethereum blockchain, whether or not you know what it is. It\u2019s been in the news a lot lately, including the cover of some major magazines, but reading those articles can be like gibberish if you don\u2019t have a foundation for what exactly Ethereum is. So what is it? In essence, a public database that keeps a permanent record of digital transactions. Importantly, this database doesn\u2019t require any central authority to maintain and secure it. Instead it operates as a \u201ctrustless\u201d transactional system \u2014 a framework in which individuals can make peer-to-peer transactions without needing to trust a third party OR one another.Still confused? That\u2019s where this post comes in. My aim is to explain how Ethereum functions at a technical level, without complex math or scary-looking formulas. Even if you\u2019re not a programmer, I hope you\u2019ll walk away with at least better grasp of the tech. If some parts are too technical and difficult to grok, that\u2019s totally fine! There\u2019s really no need to understand every little detail. I recommend just focusing on understanding things at a broad level. Many of the topics covered in this post are a breakdown of the concepts discussed in the yellow paper. I\u2019ve added my own explanations and diagrams to make understanding Ethereum easier. Those brave enough to take on the technical challenge can also read the Ethereum yellow paper.Let\u2019s get started!Blockchain definitionA blockchain is a \u201ccryptographically secure transactional singleton machine with shared-state.\u201d [1] That\u2019s a mouthful, isn\u2019t it? Let\u2019s break it down.\u201cCryptographically secure\u201d means that the creation of digital currency is secured by complex mathematical algorithms that are obscenely hard to break. Think of a firewall of sorts. They make it nearly impossible to cheat the system (e.g. create fake transactions, erase transactions, etc.)\u201cTransactional singleton machine\u201d means that there\u2019s a single canonical instance of the machine responsible for all the transactions being created in the system. In other words, there\u2019s a single global truth that everyone believes in.\u201cWith shared-state\u201d means that the state stored on this machine is shared and open to everyone.Ethereum implements this blockchain paradigm.The Ethereum blockchain paradigm explainedThe Ethereum blockchain is essentially a transaction-based state machine. In computer science, a state machine refers to something that will read a series of inputs and, based on those inputs, will transition to a new state.With Ethereum\u2019s state machine, we begin with a \u201cgenesis state.\u201d This is analogous to a blank slate, before any transactions have happened on the network. When transactions are executed, this genesis state transitions into some final state. At any point in time, this final state represents the current state of Ethereum.The state of Ethereum has millions of transactions. These transactions are grouped into \u201cblocks.\u201d A block contains a series of transactions, and each block is chained together with its previous block.To cause a transition from one state to the next, a transaction must be valid. For a transaction to be considered valid, it must go through a validation process known as mining. Mining is when a group of nodes (i.e. computers) expend their compute resources to create a block of valid transactions.Any node on the network that declares itself as a miner can attempt to create and validate a block. Lots of miners from around the world try to create and validate blocks at the same time. Each miner provides a mathematical \u201cproof\u201d when submitting a block to the blockchain, and this proof acts as a guarantee: if the proof exists, the block must be valid.For a block to be added to the main blockchain, the miner must prove it faster than any other competitor miner. The process of validating each block by having a miner provide a mathematical proof is known as a \u201cproof of work.\u201dA miner who validates a new block is rewarded with a certain amount of value for doing this work. What is that value? The Ethereum blockchain uses an intrinsic digital token called \u201cEther.\u201d Every time a miner proves a block, new Ether tokens are generated and awarded.You might wonder: what guarantees that everyone sticks to one chain of blocks? How can we be sure that there doesn\u2019t exist a subset of miners who will decide to create their own chain of blocks?Earlier, we defined a blockchain as a transactional singleton machine with shared-state. Using this definition, we can understand the correct current state is a single global truth, which everyone must accept. Having multiple states (or chains) would ruin the whole system, because it would be impossible to agree on which state was the correct one. If the chains were to diverge, you might own 10 coins on one chain, 20 on another, and 40 on another. In this scenario, there would be no way to determine which chain was the most \u201cvalid.\u201dWhenever multiple paths are generated, a \u201cfork\u201d occurs. We typically want to avoid forks, because they disrupt the system and force people to choose which chain they \u201cbelieve\u201d in.To determine which path is most valid and prevent multiple chains, Ethereum uses a mechanism called the \u201cGHOST protocol.\u201d\u201cGHOST\u201d = \u201cGreedy Heaviest Observed Subtree\u201dIn simple terms, the GHOST protocol says we must pick the path that has had the most computation done upon it. One way to determine that path is to use the block number of the most recent block (the \u201cleaf block\u201d), which represents the total number of blocks in the current path (not counting the genesis block). The higher the block number, the longer the path and the greater the mining effort that must have gone into arriving at the leaf. Using this reasoning allows us to agree on the canonical version of the current state.Now that you\u2019ve gotten the 10,000-foot overview of what a blockchain is, let\u2019s dive deeper into the main components that the Ethereum system is comprised of:accountsstategas and feestransactionsblockstransaction executionminingproof of workOne note before getting started: whenever I say \u201chash\u201d of X, I am referring to the KECCAK-256 hash, which Ethereum uses.AccountsThe global \u201cshared-state\u201d of Ethereum is comprised of many small objects (\u201caccounts\u201d) that are able to interact with one another through a message-passing framework. Each account has a state associated with it and a 20-byte address. An address in Ethereum is a 160-bit identifier that is used to identify any account.There are two types of accounts:Externally owned accounts, which are controlled by private keys and have no code associated with them.Contract accounts, which are controlled by their contract code and have code associated with them.Externally owned accounts vs. contract accountsIt\u2019s important to understand a fundamental difference between externally owned accounts and contract accounts. An externally owned account can send messages to other externally owned accounts OR to other contract accounts by creating and signing a transaction using its private key. A message between two externally owned accounts is simply a value transfer. But a message from an externally owned account to a contract account activates the contract account\u2019s code, allowing it to perform various actions (e.g. transfer tokens, write to internal storage, mint new tokens, perform some calculation, create new contracts, etc.).Unlike externally owned accounts, contract accounts can\u2019t initiate new transactions on their own. Instead, contract accounts can only fire transactions in response to other transactions they have received (from an externally owned account or from another contract account). We\u2019ll learn more about contract-to-contract calls in the \u201cTransactions and Messages\u201d section.Therefore, any action that occurs on the Ethereum blockchain is always set in motion by transactions fired from externally controlled accounts.Account stateThe account state consists of four components, which are present regardless of the type of account:nonce: If the account is an externally owned account, this number represents the number of transactions sent from the account\u2019s address. If the account is a contract account, the nonce is the number of contracts created by the account.balance: The number of Wei owned by this address. There are 1e+18 Wei per Ether.storageRoot: A hash of the root node of a Merkle Patricia tree (we\u2019ll explain Merkle trees later on). This tree encodes the hash of the storage contents of this account, and is empty by default.codeHash: The hash of the EVM (Ethereum Virtual Machine \u2014 more on this later) code of this account. For contract accounts, this is the code that gets hashed and stored as the codeHash. For externally owned accounts, the codeHash field is the hash of the empty string.World stateOkay, so we know that Ethereum\u2019s global state consists of a mapping between account addresses and the account states. This mapping is stored in a data structure known as a Merkle Patricia tree.A Merkle tree (or also referred as \u201cMerkle trie\u201d) is a type of binary tree composed of a set of nodes with:a large number of leaf nodes at the bottom of the tree that contain the underlying dataa set of intermediate nodes, where each node is the hash of its two child nodesa single root node, also formed from the hash of its two child node, representing the top of the treeThe data at the bottom of the tree is generated by splitting the data that we want to store into chunks, then splitting the chunks into buckets, and then taking the hash of each bucket and repeating the same process until the total number of hashes remaining becomes only one: the root hash.This tree is required to have a key for every value stored inside it. Beginning from the root node of the tree, the key should tell you which child node to follow to get to the corresponding value, which is stored in the leaf nodes. In Ethereum\u2019s case, the key/value mapping for the state tree is between addresses and their associated accounts, including the balance, nonce, codeHash, and storageRoot for each account (where the storageRoot is itself a tree).Source: Ethereum whitepaperThis same trie structure is used also to store transactions and receipts. More specifically, every block has a \u201cheader\u201d which stores the hash of the root node of three different Merkle trie structures, including:State trieTransactions trieReceipts trieThe ability to store all this information efficiently in Merkle tries is incredibly useful in Ethereum for what we call \u201clight clients\u201d or \u201clight nodes.\u201d Remember that a blockchain is maintained by a bunch of nodes. Broadly speaking, there are two types of nodes: full nodes and light nodes.A full archive node synchronizes the blockchain by downloading the full chain, from the genesis block to the current head block, executing all of the transactions contained within. Typically, miners store the full archive node, because they are required to do so for the mining process. It is also possible to download a full node without executing every transaction. Regardless, any full node contains the entire chain.But unless a node needs to execute every transaction or easily query historical data, there\u2019s really no need to store the entire chain. This is where the concept of a light node comes in. Instead of downloading and storing the full chain and executing all of the transactions, light nodes download only the chain of headers, from the genesis block to the current head, without executing any transactions or retrieving any associated state. Because light nodes have access to block headers, which contain hashes of three tries, they can still easily generate and receive verifiable answers about transactions, events, balances, etc.The reason this works is because hashes in the Merkle tree propagate upward \u2014 if a malicious user attempts to swap a fake transaction into the bottom of a Merkle tree, this change will cause a change in the hash of the node above, which will change the hash of the node above that, and so on, until it eventually changes the root of the tree.Any node that wants to verify a piece of data can use something called a \u201cMerkle proof\u201d to do so. A Merkle proof consists of:A chunk of data to be verified and its hashThe root hash of the treeThe \u201cbranch\u201d (all of the partner hashes going up along the path from the chunk to the root)Anyone reading the proof can verify that the hashing for that branch is consistent all the way up the tree, and therefore that the given chunk is actually at that position in the tree.In summary, the benefit of using a Merkle Patricia tree is that the root node of this structure is cryptographically dependent on the data stored in the tree, and so the hash of the root node can be used as a secure identity for this data. Since the block header includes the root hash of the state, transactions, and receipts trees, any node can validate a small part of state of Ethereum without needing to store the entire state, which can be potentially unbounded in size.Gas and paymentOne very important concept in Ethereum is the concept of fees. Every computation that occurs as a result of a transaction on the Ethereum network incurs a fee \u2014 there\u2019s no free lunch! This fee is paid in a denomination called \u201cgas.\u201dGas is the unit used to measure the fees required for a particular computation. Gas price is the amount of Ether you are willing to spend on every unit of gas, and is measured in \u201cgwei.\u201d \u201cWei\u201d is the smallest unit of Ether, where 1\u2070\u00b9\u2078 Wei represents 1 Ether. One gwei is 1,000,000,000 Wei.With every transaction, a sender sets a gas limit and gas price. The product of gas price and gas limit represents the maximum amount of Wei that the sender is willing to pay for executing a transaction.For example, let\u2019s say the sender sets the gas limit to 50,000 and a gas price to 20 gwei. This implies that the sender is willing to spend at most 50,000 x 20 gwei = 1,000,000,000,000,000 Wei = 0.001 Ether to execute that transaction.Remember that the gas limit represents the maximum gas the sender is willing to spend money on. If they have enough Ether in their account balance to cover this maximum, they\u2019re good to go. The sender is refunded for any unused gas at the end of the transaction, exchanged at the original rate.In the case that the sender does not provide the necessary gas to execute the transaction, the transaction runs \u201cout of gas\u201d and is considered invalid. In this case, the transaction processing aborts and any state changes that occurred are reversed, such that we end up back at the state of Ethereum prior to the transaction. Additionally, a record of the transaction failing gets recorded, showing what transaction was attempted and where it failed. And since the machine already expended effort to run the calculations before running out of gas, logically, none of the gas is refunded to the sender.Where exactly does this gas money go? All the money spent on gas by the sender is sent to the \u201cbeneficiary\u201d address, which is typically the miner\u2019s address. Since miners are expending the effort to run computations and validate transactions, miners receive the gas fee as a reward.Typically, the higher the gas price the sender is willing to pay, the greater the value the miner derives from the transaction. Thus, the more likely miners will be to select it. In this way, miners are free to choose which transactions they want to validate or ignore. In order to guide senders on what gas price to set, miners have the option of advertising the minimum gas price for which they will execute transactions.There are fees for storage, tooNot only is gas used to pay for computation steps, it is also used to pay for storage usage. The total fee for storage is proportional to the smallest multiple of 32 bytes used.Fees for storage have some nuanced aspects. For example, since increased storage increases the size of the Ethereum state database on all nodes, there\u2019s an incentive to keep the amount of data stored small. For this reason, if a transaction has a step that clears an entry in the storage, the fee for executing that operation of is waived, AND a refund is given for freeing up storage space.What\u2019s the purpose of fees?One important aspect of the way the Ethereum works is that every single operation executed by the network is simultaneously effected by every full node. However, computational steps on the Ethereum Virtual Machine are very expensive. Therefore, Ethereum smart contracts are best used for simple tasks, like running simple business logic or verifying signatures and other cryptographic objects, rather than more complex uses, like file storage, email, or machine learning, which can put a strain on the network. Imposing fees prevents users from overtaxing the network.Ethereum is a Turing complete language. (In short, a Turing machine is a machine that can simulate any computer algorithm (for those not familiar with Turing machines, check out this and this). This allows for loops and makes Ethereum susceptible to the halting problem, a problem in which you cannot determine whether or not a program will run infinitely. If there were no fees, a malicious actor could easily try to disrupt the network by executing an infinite loop within a transaction, without any repercussions. Thus, fees protect the network from deliberate attacks.You might be thinking, \u201cwhy do we also have to pay for storage?\u201d Well, just like computation, storage on the Ethereum network is a cost that the entire network has to take the burden of.Transaction and messagesWe noted earlier that Ethereum is a transaction-based state machine. In other words, transactions occurring between different accounts are what move the global state of Ethereum from one state to the next.In the most basic sense, a transaction is a cryptographically signed piece of instruction that is generated by an externally owned account, serialized, and then submitted to the blockchain.There are two types of transactions: message calls and contract creations (i.e. transactions that create new Ethereum contracts).   All transactions contain the following components, regardless of their type:nonce: a count of the number of transactions sent by the sender.gasPrice: the number of Wei that the sender is willing to pay per unit of gas required to execute the transaction.gasLimit: the maximum amount of gas that the sender is willing to pay for executing this transaction. This amount is set and paid upfront, before any computation is done.to: the address of the recipient. In a contract-creating transaction, the contract account address does not yet exist, and so an empty value is used.value: the amount of Wei to be transferred from the sender to the recipient. In a contract-creating transaction, this value serves as the starting balance within the newly created contract account.v, r, s: used to generate the signature that identifies the sender of the transaction.init (only exists for contract-creating transactions): An EVM code fragment that is used to initialize the new contract account. init is run only once, and then is discarded. When init is first run, it returns the body of the account code, which is the piece of code that is permanently associated with the contract account.data (optional field that only exists for message calls): the input data (i.e. parameters) of the message call. For example, if a smart contract serves as a domain registration service, a call to that contract might expect input fields such as the domain and IP address.We learned in the \u201cAccounts\u201d section that transactions \u2014 both message calls and contract-creating transactions \u2014 are always initiated by externally owned accounts and submitted to the blockchain. Another way to think about it is that transactions are what bridge the external world to the internal state of Ethereum.But this doesn\u2019t mean that contracts can\u2019t talk to other contracts. Contracts that exist within the global scope of Ethereum\u2019s state can talk to other contracts within that same scope. The way they do this is via \u201cmessages\u201d or \u201cinternal transactions\u201d to other contracts. We can think of messages or internal transactions as being similar to transactions, with the major difference that they are NOT generated by externally owned accounts. Instead, they are generated by contracts. They are virtual objects that, unlike transactions, are not serialized and only exist in the Ethereum execution environment.When one contract sends an internal transaction to another contract, the associated code that exists on the recipient contract account is executed.One important thing to note is that internal transactions or messages don\u2019t contain a gasLimit. This is because the gas limit is determined by the external creator of the original transaction (i.e. some externally owned account). The gas limit that the externally owned account sets must be high enough to carry out the transaction, including any sub-executions that occur as a result of that transaction, such as contract-to-contract messages. If, in the chain of transactions and messages, a particular message execution runs out of gas, then that message\u2019s execution will revert, along with any subsequent messages triggered by the execution. However, the parent execution does not need to revert.BlocksAll transactions are grouped together into \u201cblocks.\u201d A blockchain contains a series of such blocks that are chained together.In Ethereum, a block consists of:the block headerinformation about the set of transactions included in that blocka set of other block headers for the current block\u2019s ommers.Ommers explainedWhat the heck is an \u201commer?\u201d An ommer is a block whose parent is equal to the current block\u2019s parent\u2019s parent. Let\u2019s take a quick dive into what ommers are used for and why a block contains the block headers for ommers.Because of the way Ethereum is built, block times are much lower (~15 seconds) than those of other blockchains, like Bitcoin (~10 minutes). This enables faster transaction processing. However, one of the downsides of shorter block times is that more competing block solutions are found by miners. These competing blocks are also referred to as \u201corphaned blocks\u201d (i.e. mined blocks do not make it into the main chain).The purpose of ommers is to help reward miners for including these orphaned blocks. The ommers that miners include must be \u201cvalid,\u201d meaning within the sixth generation or smaller of the present block. After six children, stale orphaned blocks can no longer be referenced (because including older transactions would complicate things a bit).Ommer blocks receive a smaller reward than a full block. Nonetheless, there\u2019s still some incentive for miners to include these orphaned blocks and reap a reward.Block headerLet\u2019s get back to blocks for a moment. We mentioned previously that every block has a block \u201cheader,\u201d but what exactly is this?   A block header is a portion of the block consisting of:parentHash: a hash of the parent block\u2019s header (this is what makes the block set a \u201cchain\u201d)ommersHash: a hash of the current block\u2019s list of ommersbeneficiary: the account address that receives the fees for mining this blockstateRoot: the hash of the root node of the state trie (recall how we learned that the state trie is stored in the header and makes it easy for light clients to verify anything about the state)transactionsRoot: the hash of the root node of the trie that contains all transactions listed in this blockreceiptsRoot: the hash of the root node of the trie that contains the receipts of all transactions listed in this blocklogsBloom: a Bloom filter (data structure) that consists of log informationdifficulty: the difficulty level of this blocknumber: the count of current block (the genesis block has a block number of zero; the block number increases by 1 for each each subsequent block)gasLimit: the current gas limit per blockgasUsed: the sum of the total gas used by transactions in this blocktimestamp: the unix timestamp of this block\u2019s inceptionextraData: extra data related to this blockmixHash: a hash that, when combined with the nonce, proves that this block has carried out enough computationnonce: a hash that, when combined with the mixHash, proves that this block has carried out enough computationNotice how every block header contains three trie structures for:state (stateRoot)transactions (transactionsRoot)receipts (receiptsRoot)These trie structures are nothing but the Merkle Patricia tries we discussed earlier.Additionally, there are a few terms from the above description that are worth clarifying. Let\u2019s take a look.LogsEthereum allows for logs to make it possible to track various transactions and messages. A contract can explicitly generate a log by defining \u201cevents\u201d that it wants to log.A log entry contains:the logger\u2019s account address,a series of topics that represent various events carried out by this transaction, andany data associated with these events.Logs are stored in a bloom filter, which stores the endless log data in an efficient manner.Transaction receiptLogs stored in the header come from the log information contained in the transaction receipt. Just as you receive a receipt when you buy something at a store, Ethereum generates a receipt for every transaction. Like you\u2019d expect, each receipt contains certain information about the transaction. This receipt includes items like:the block numberblock hashtransaction hashgas used by the current transactioncumulative gas used in the current block after the current transaction has executedlogs created when executing the current transaction..and so onBlock difficultyThe \u201cdifficulty\u201d of a block is used to enforce consistency in the time it takes to validate blocks. The genesis block has a difficulty of 131,072, and a special formula is used to calculate the difficulty of every block thereafter. If a certain block is validated more quickly than the previous block, the Ethereum protocol increases that block\u2019s difficulty.The difficulty of the block affects the nonce, which is a hash that must be calculated when mining a block, using the proof-of-work algorithm.The relationship between the block\u2019s difficulty and nonce is mathematically formalized as:where Hd is the difficulty.The only way to find a nonce that meets a difficulty threshold is to use the proof-of-work algorithm to enumerate all of the possibilities. The expected time to find a solution is proportional to the difficulty \u2014 the higher the difficulty, the harder it becomes to find the nonce, and so the harder it is to validate the block, which in turn increases the time it takes to validate a new block. So, by adjusting the difficulty of a block, the protocol can adjust how long it takes to validate a block.If, on the other hand, validation time is getting slower, the protocol decreases the difficulty. In this way, the validation time self-adjusts to maintain a constant rate \u2014 on average, one block every 15 seconds.Transaction ExecutionWe\u2019ve come to one of the most complex parts of the Ethereum protocol: the execution of a transaction. Say you send a transaction off into the Ethereum network to be processed. What happens to transition the state of Ethereum to include your transaction?First, all transactions must meet an initial set of requirements in order to be executed. These include:The transaction must be a properly formatted RLP. \u201cRLP\u201d stands for \u201cRecursive Length Prefix\u201d and is a data format used to encode nested arrays of binary data. RLP is the format Ethereum uses to serialize objects.Valid transaction signature.Valid transaction nonce. Recall that the nonce of an account is the count of transactions sent from that account. To be valid, a transaction nonce must be equal to the sender account\u2019s nonce.The transaction\u2019s gas limit must be equal to or greater than the intrinsic gas used by the transaction. The intrinsic gas includes:a predefined cost of 21,000 gas for executing the transactiona gas fee for data sent with the transaction (4 gas for every byte of data or code that equals zero, and 68 gas for every non-zero byte of data or code)if the transaction is a contract-creating transaction, an additional 32,000 gasThe sender\u2019s account balance must have enough Ether to cover the \u201cupfront\u201d gas costs that the sender must pay. The calculation for the upfront gas cost is simple: First, the transaction\u2019s gas limit is multiplied by the transaction\u2019s gas price to determine the maximum gas cost. Then, this maximum cost is added to the total value being transferred from the sender to the recipient.If the transaction meets all of the above requirements for validity, then we move onto the next step.First, we deduct the upfront cost of execution from the sender\u2019s balance, and increase the nonce of the sender\u2019s account by 1 to account for the current transaction. At this point, we can calculate the gas remaining as the total gas limit for the transaction minus the intrinsic gas used.Next, the transaction starts executing. Throughout the execution of a transaction, Ethereum keeps track of the \u201csubstate.\u201d This substate is a way to record information accrued during the transaction that will be needed immediately after the transaction completes. Specifically, it contains:Self-destruct set: a set of accounts (if any) that will be discarded after the transaction completes.Log series: archived and indexable checkpoints of the virtual machine\u2019s code execution.Refund balance: the amount to be refunded to the sender account after the transaction. Remember how we mentioned that storage in Ethereum costs money, and that a sender is refunded for clearing up storage? Ethereum keeps track of this using a refund counter. The refund counter starts at zero and increments every time the contract deletes something in storage.Next, the various computations required by the transaction are processed.Once all the steps required by the transaction have been processed, and assuming there is no invalid state, the state is finalized by determining the amount of unused gas to be refunded to the sender. In addition to the unused gas, the sender is also refunded some allowance from the \u201crefund balance\u201d that we described above.Once the sender is refunded:the Ether for the gas is given to the minerthe gas used by the transaction is added to the block gas counter (which keeps track of the total gas used by all transactions in the block, and is useful when validating a block)all accounts in the self-destruct set (if any) are deletedFinally, we\u2019re left with the new state and a set of the logs created by the transaction.Now that we\u2019ve covered the basics of transaction execution, let\u2019s look at some of the differences between contract-creating transactions and message calls.Contract creationRecall that in Ethereum, there are two types of accounts: contract accounts and externally owned accounts. When we say a transaction is \u201ccontract-creating,\u201d we mean that the purpose of the transaction is to create a new contract account.In order to create a new contract account, we first declare the address of the new account using a special formula. Then we initialize the new account by:Setting the nonce to zeroIf the sender sent some amount of Ether as value with the transaction, setting the account balance to that valueDeducting the value added to this new account\u2019s balance from the sender\u2019s balanceSetting the storage as emptySetting the contract\u2019s codeHash as the hash of an empty stringOnce we initialize the account, we can actually create the account, using the init code sent with the transaction (see the \u201cTransaction and messages\u201d section for a refresher on the init code). What happens during the execution of this init code is varied. Depending on the constructor of the contract, it might update the account\u2019s storage, create other contract accounts, make other message calls, etc.As the code to initialize a contract is executed, it uses gas. The transaction is not allowed to use up more gas than the remaining gas. If it does, the execution will hit an out-of-gas (OOG) exception and exit. If the transaction exits due to an out-of-gas exception, then the state is reverted to the point immediately prior to transaction. The sender is not refunded the gas that was spent before running out.Boo hoo.However, if the sender sent any Ether value with the transaction, the Ether value will be refunded even if the contract creation fails. Phew!If the initialization code executes successfully, a final contract-creation cost is paid. This is a storage cost, and is proportional to the size of the created contract\u2019s code (again, no free lunch!) If there\u2019s not enough gas remaining to pay this final cost, then the transaction again declares an out-of-gas exception and aborts.If all goes well and we make it this far without exceptions, then any remaining unused gas is refunded to the original sender of the transaction, and the altered state is now allowed to persist!Hooray!Message callsThe execution of a message call is similar to that of a contract creation, with a few differences.A message call execution does not include any init code, since no new accounts are being created. However, it can contain input data, if this data was provided by the transaction sender. Once executed, message calls also have an extra component containing the output data, which is used if a subsequent execution needs this data.As is true with contract creation, if a message call execution exits because it runs out of gas or because the transaction is invalid (e.g. stack overflow, invalid jump destination, or invalid instruction), none of the gas used is refunded to the original caller. Instead, all of the remaining unused gas is consumed, and the state is reset to the point immediately prior to balance transfer.Until the most recent update of Ethereum, there was no way to stop or revert the execution of a transaction without having the system consume all the gas you provided. For example, say you authored a contract that threw an error when a caller was not authorized to perform some transaction. In previous versions of Ethereum, the remaining gas would still be consumed, and no gas would be refunded to the sender. But the Byzantium update includes a new \u201crevert\u201d code that allows a contract to stop execution and revert state changes, without consuming the remaining gas, and with the ability to return a reason for the failed transaction. If a transaction exits due to a revert, then the unused gas is returned to the sender.Execution modelSo far, we\u2019ve learned about the series of steps that have to happen for a transaction to execute from start to finish. Now, we\u2019ll look at how the transaction actually executes within the VM.The part of the protocol that actually handles processing the transactions is Ethereum\u2019s own virtual machine, known as the Ethereum Virtual Machine (EVM).The EVM is a Turing complete virtual machine, as defined earlier. The only limitation the EVM has that a typical Turing complete machine does not is that the EVM is intrinsically bound by gas. Thus, the total amount of computation that can be done is intrinsically limited by the amount of gas provided.Source: CMUMoreover, the EVM has a stack-based architecture. A stack machine is a computer that uses a last-in, first-out stack to hold temporary values.The size of each stack item in the EVM is 256-bit, and the stack has a maximum size of 1024.The EVM has memory, where items are stored as word-addressed byte arrays. Memory is volatile, meaning it is not permanent.The EVM also has storage. Unlike memory, storage is non-volatile and is maintained as part of the system state. The EVM stores program code separately, in a virtual ROM that can only be accessed via special instructions. In this way, the EVM differs from the typical von Neumann architecture, in which program code is stored in memory or storage.The EVM also has its own language: \u201cEVM bytecode.\u201d When a programmer like you or me writes smart contracts that operate on Ethereum, we typically write code in a higher-level language such as Solidity. We can then compile that down to EVM bytecode that the EVM can understand.Okay, now on to execution.Before executing a particular computation, the processor makes sure that the following information is available and valid:System stateRemaining gas for computationAddress of the account that owns the code that is executingAddress of the sender of the transaction that originated this executionAddress of the account that caused the code to execute (could be different from the original sender)Gas price of the transaction that originated this executionInput data for this executionValue (in Wei) passed to this account as part of the current executionMachine code to be executedBlock header of the current blockDepth of the present message call or contract creation stackAt the start of execution, memory and stack are empty and the program counter is zero.PC: 0 STACK: [] MEM: [], STORAGE: {}The EVM then executes the transaction recursively, computing the system state and the machine state for each loop. The system state is simply Ethereum\u2019s global state. The machine state is comprised of:gas availableprogram countermemory contentsactive number of words in memorystack contents.Stack items are added or removed from the leftmost portion of the series.On each cycle, the appropriate gas amount is reduced from the remaining gas, and the program counter increments.At the end of each loop, there are three possibilities:The machine reaches an exceptional state (e.g. insufficient gas, invalid instructions, insufficient stack items, stack items would overflow above 1024, invalid JUMP/JUMPI destination, etc.) and so must be halted, with any changes discardedThe sequence continues to process into the next loopThe machine reaches a controlled halt (the end of the execution process)Assuming the execution doesn\u2019t hit an exceptional state and reaches a \u201ccontrolled\u201d or normal halt, the machine generates the resultant state, the remaining gas after this execution, the accrued substate, and the resultant output.Phew. We got through one of the most complex parts of Ethereum. Even if you didn\u2019t fully comprehend this part, that\u2019s okay. You don\u2019t really need to understand the nitty gritty execution details unless you\u2019re working at a very deep level.How a block gets finalizedFinally, let\u2019s look at how a block of many transactions gets finalized.When we say \u201cfinalized,\u201d it can mean two different things, depending on whether the block is new or existing. If it\u2019s a new block, we\u2019re referring to the process required for mining this block. If it\u2019s an existing block, then we\u2019re talking about the process of validating the block. In either case, there are four requirements for a block to be \u201cfinalized\u201d: 1) Validate (or, if mining, determine) ommers Each ommer block within the block header must be a valid header and be within the sixth generation of the present block. 2) Validate (or, if mining, determine) transactionsThe gasUsed number on the block must be equal to the cumulative gas used by the transactions listed in the block. (Recall that when executing a transaction, we keep track of the block gas counter, which keeps track of the total gas used by all transactions in the block). 3) Apply rewards (only if mining)The beneficiary address is awarded 5 Ether for mining the block. (Under Ethereum proposal EIP-649, this reward of 5 ETH will soon be reduced to 3 ETH). Additionally, for each ommer, the current block\u2019s beneficiary is awarded an additional 1/32 of the current block reward. Lastly, the beneficiary of the ommer block(s) also gets awarded a certain amount (there\u2019s a special formula for how this is calculated).  4) Verify (or, if mining, compute a valid) state and nonceEnsure that all transactions and resultant state changes are applied, and then define the new block as the state after the block reward has been applied to the final transaction\u2019s resultant state. Verification occurs by checking this final state against the state trie stored in the header.Mining proof of workThe \u201cBlocks\u201d section briefly addressed the concept of block difficulty. The algorithm that gives meaning to block difficulty is called Proof of Work (PoW).Ethereum\u2019s proof-of-work algorithm is called \u201cEthash\u201d (previously known as Dagger-Hashimoto).The algorithm is formally defined as:where m is the mixHash, n is the nonce, Hn is the new block\u2019s header (excluding the nonce and mixHash components, which have to be computed), Hn is the nonce of the block header, and d is the DAG, which is a large data set.In the \u201cBlocks\u201d section, we talked about the various items that exist in a block header. Two of those components were called the mixHash and the nonce. As you may recall:mixHash is a hash that, when combined with the nonce, proves that this block has carried out enough computationnonce is a hash that, when combined with the mixHash, proves that this block has carried out enough computationThe PoW function is used to evaluate these two items.How exactly the mixHash and nonce are calculated using the PoW function is somewhat complex, and something we can delve deeper into in a separate post. But at a high level, it works like this:A \u201cseed\u201d is calculated for each block. This seed is different for every \u201cepoch,\u201d where each epoch is 30,000 blocks long. For the first epoch, the seed is the hash of a series of 32 bytes of zeros. For every subsequent epoch, it is the hash of the previous seed hash. Using this seed, a node can calculate a pseudo-random \u201ccache.\u201dThis cache is incredibly useful because it enables the concept of \u201clight nodes,\u201d which we discussed previously in this post. The purpose of light nodes is to afford certain nodes the ability to efficiently verify a transaction without the burden of storing the entire blockchain dataset. A light node can verify the validity of a transaction based solely on this cache, because the cache can regenerate the specific block it needs to verify.Using the cache, a node can generate the DAG \u201cdataset,\u201d where each item in the dataset depends on a small number of pseudo-randomly-selected items from the cache. In order to be a miner, you must generate this full dataset; all full clients and miners store this dataset, and the dataset grows linearly with time.Miners can then take random slices of the dataset and put them through a mathematical function to hash them together into a \u201cmixHash.\u201d A miner will repeatedly generate a mixHash until the output is below the desired target nonce. When the output meets this requirement, this nonce is considered valid and the block can be added to the chain.Mining as a security mechanism Overall, the purpose of the PoW is to prove, in a cryptographically secure way, that a particular amount of computation has been expended to generate some output (i.e. the nonce). This is because there is no better way to find a nonce that is below the required threshold other than to enumerate all the possibilities. The outputs of repeatedly applying the hash function have a uniform distribution, and so we can be assured that, on average, the time needed to find such a nonce depends on the difficulty threshold. The higher the difficulty, the longer it takes to solve for the nonce. In this way, the PoW algorithm gives meaning to the concept of difficulty, which is used to enforce blockchain security.What do we mean by blockchain security? It\u2019s simple: we want to create a blockchain that EVERYONE trusts. As we discussed previously in this post, if more than one chain existed, users would lose trust, because they would be unable to reasonably determine which chain was the \u201cvalid\u201d chain. In order for a group of users to accept the underlying state that is stored on a blockchain, we need a single canonical blockchain that a group of people believes in.This is exactly what the PoW algorithm does: it ensures that a particular blockchain will remain canonical into the future, making it incredibly difficult for an attacker to create new blocks that overwrite a certain part of history (e.g. by erasing transactions or creating fake transactions) or maintain a fork. To have their block validated first, an attacker would need to consistently solve for the nonce faster than anyone else in the network, such that the network believes their chain is the heaviest chain (based on the principles of the GHOST protocol we mentioned earlier). This would be impossible unless the attacker had more than half of the network mining power, a scenario known as the majority 51% attack.Mining as a wealth distribution mechanismBeyond providing a secure blockchain, PoW is also a way to distribute wealth to those who expend their computation for providing this security. Recall that a miner receives a reward for mining a block, including:a static block reward of 5 ether for the \u201cwinning\u2019\u201d block (soon to be changed to 3 ether)the cost of gas expended within the block by the transactions included in the blockan extra reward for including ommers as part of the blockIn order to ensure that the use of the PoW consensus mechanism for security and wealth distribution is sustainable in the long run, Ethereum strives to instill these two properties:Make it accessible to as many people as possible. In other words, people shouldn\u2019t need specialized or uncommon hardware to run the algorithm. The purpose of this is to make the wealth distribution model as open as possible so that anyone can provide any amount of compute power in return for Ether.Reduce the possibility for any single node (or small set) to make a disproportionate amount of profit. Any node that can make a disproportionate amount of profit means that the node has a large influence on determining the canonical blockchain. This is troublesome because it reduces network security.In the Bitcoin blockchain network, one problem that arises in relation to the above two properties is that the PoW algorithm is a SHA256 hash function. The weakness with this type of function is that it can be solved much more efficiently using specialized hardware, also known as ASICs.In order to mitigate this issue, Ethereum has chosen to make its PoW algorithm (Ethhash) sequentially memory-hard. This means that the algorithm is engineered so that calculating the nonce requires a lot of memory AND bandwidth. The large memory requirements make it hard for a computer to use its memory in parallel to discover multiple nonces simultaneously, and the high bandwidth requirements make it difficult for even a super-fast computer to discover multiple nonce simultaneously. This reduces the risk of centralization and creates a more level playing field for the nodes that are doing the verification.One thing to note is that Ethereum is transitioning from a PoW consensus mechanism to something called \u201cproof-of-stake\u201d. This is a beastly topic of its own that we can hopefully explore in a future post. \u263a\ufe0fConclusion\u2026Phew! You made it to the end. I hope?There\u2019s a lot to digest in this post, I know. If it takes you multiple reads to fully understand what\u2019s going on, that\u2019s totally fine. I personally read the Ethereum yellow paper, white paper, and various parts of the code base many times before grokking what was going on.Nonetheless, I hope you found this overview helpful. If you find any errors or mistakes, I\u2019d love for you to write a private note or post it directly in the comments. I look at all of \u2019em, I promise ;)And remember, I\u2019m human (yep, it\u2019s true) and I make mistakes. I took the time to write this post for the benefit of the community, for free. So please be constructive in your feedback, without unnecessary bashing. \u263a\ufe0f[1] https://github.com/ethereum/yellowpaper", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/hackernoon/neo-versus-ethereum-why-neo-might-be-2018s-strongest-cryptocurrency-79956138bea3?source=search_post---------1", "post_date": "", "readtime": "", "upvotes": "", "content": "NEO versus Ethereum: Why NEO might be 2018\u2019s strongest cryptocurrencyNoam LevensonFollowDec 6, 2017 \u00b7 25 min readNEO is a platform with a purpose. Can it compete with Ethereum? Or better yet, does it even need to?Why Read This Article?NEO and Ethereum \u2014 which pill will you take? Sorry, couldn\u2019t help myself. We care about this debate because we\u2019re investors. From a developer\u2019s perspective, functionality is the most important. There is no brand loyalty in blockchain yet. So if a platform can do something better than its competitors, it will win over developers. So which one does it better?This article is long because I have chewed through all the information I could find about NEO and Ethereum and digested it for you. There are lots of articles summarizing the \u201cdifferences\u201d between Ethereum and NEO, but they do the debate little justice. They skim over things, don\u2019t explore them well, explore only one aspect, or aren\u2019t holistic in their analysis and don\u2019t explain why the differences even matter and what their relevance to the real world is. I was frustrated by the lack of a comprehensive article. This article is my response.I will admit that I explored NEO more in-depth than Ethereum. This is because so much information is widely available for Ethereum. With NEO, there is much less. As such, I focus on explaining NEO and then comparing that explanation to Ethereum\u2019s capability.So bear with me, grab yourself an espresso and lock yourself in that room you \u201cdo work in.\u201d This will be well worth your time. I also won\u2019t blame you if you just read the TLDR \u2014 Too Lazy, Didn\u2019t Read \u2014 under the articles.Let\u2019s beginIf Ethereum is Goliath, NEO is David. If Ethereum is Brad Pitt, NEO is Brad Pitt\u2019s cousin, Zach Pitt\u2014younger, better dressed, and more talented \u2014 but right now relegated to serving cocktails to Brad and his friends while he acts on the side. Ethereum did it first. It was revolutionary and exciting and took the crypto world by storm. Web 3.0. Today almost every ICO is built on Ethereum\u2019s ERC20 token platform and Vitalik Buterin is one of our time\u2019s greatest minds. Yet if we\u2019ve learned anything from the fact that Alibaba is closing in on Amazon\u2019s market cap and WeChat dominates China\u2019s social media scene, it\u2019s that China plays by their own rules. The Land of the Red Dragon uses their own technology, their own networks, and cares little for what the U.S. is doing. The question is, can NEO compete with Ethereum, and does it even need to?Ultimately, NEO and Ethereum are aiming for similar roles in the crypto community. Both want to be platforms for the new internet: for DApps (Decentralized Applications), ICOs (Initial Coin Offerings), and smart contracts.Overview of Ethereum and NeoWhile both NEO and Ethereum have generalized blockchains that provide a toolbox for would be developers, their objectives differ. I would summarize each platform\u2019s objectives as such:Ethereum\u2019s goal is to create a platform for the development of DApps in order to create a \u201cmore globally accessible, more free, and more trustworthy Internet:\u201d an internet 3.0.NEO is a blockchain project \u201cthat utilizes blockchain technology and digital identity to digitize assets, to automate the management of digital assets using smart contracts, and to realize a \u201csmart economy\u201d with a distributed network.\u201dThat\u2019s a mouthful. Let\u2019s breakdown these objectives to fully understand the projects. It\u2019s important to understand that both platforms share many of the same capabilities, but the distinction in their branded objectives is very important.Ethereum: Ethereum\u2019s goal is to be the platform for DApps and they are largely accomplishing this. They own the DApp market right now. Their roadmap is all about giving users and developers more control and more options in developing their applications.NEO: NEO is working towards developing a product for the future. It not only rebranded from Antshares to NEO in June of 2017, but they refocused their marketing as well \u2014 with enormous success. Neo\u2019s objective, while ultimately utilizing many of the same technologies as Ethereum, is to be the platform for a new smart economy.In short: Ethereum is developing in response to new demands. NEO is developing their platform in anticipation of future demands.What is a Smart Economy?The biggest difference between NEO and Ethereum is NEO\u2019s focus on a smart economy. If we want to fully understand NEO, we need to understand why this distinction is important.A smart economy will feature digitized physical assets. All of these newly digitized assets will have proof of ownership in the blockchain. These assets can be sold, traded, and leveraged through smart contracts. Their ownership can be protected and validated through the decentralized model of the blockchain. We\u2019ve already seen iterations of this: from proposed supply chain overhaul to DAOs (decentralized autonomous organizations \u2014 essentially decentralized companies without a leader). I offered some real world examples of this economy in this article. Now while Ethereum will likely support many of the same capabilities that NEO has, the distinction between Ethereum and NEO\u2019s objectives is what we care about.The distinction is important because a smart economy will still be under a government and under governmental regulation. I don\u2019t trust the government as much as your next libertarian; I\u2019ve read 1984 too many times. But the fact remains that governments aren\u2019t going anywhere. Thus, for a platform to service this \u201csmart economy,\u201d that platform needs to put specific thought and intention into how it will accommodate governmental regulation. So while Ethereum might offer the similar blockchain capabilities, the fact that NEO is developing FOR THIS PURPOSE is crucial.TLDR: A smart economy is in our future. To accommodate the needs of this smart economy, the platform will need to be specifically designed for this new economy.What is NEO doing to prepare itself for the smart economy?NEO places particular emphasis on staying regulatory compliant.To do this, they need:Governments don\u2019t love these guysDigital IdentityAnonymity is great. I think privacy should be at the forefront of today\u2019s technological developments and discussions. But if companies and governments are operating on the blockchain, digitizing their assets, and issuing smart contracts, all under the watchful eye of the government, they can\u2019t have anonymity. For a platform to be regulatory compliant, digital identity \u2014 a verifiable identity in digital form \u2014 is a necessary evil.Today, digital identity is based on a system called the PKI (Public Key Infrastructure) X.509 standard. This probably means about as much as it does to you as it does to me. It just means that there is an international agreed upon standard for what constitutes a digital identity. NEO\u2019s plan is to issue digital identities in accordance to this standard and then secure them using the blockchain. Bookkeepers (read about them later) will have digital identities and real names. Because of this, judicial action can be taken against them if ever need be. This is imperative when registering financial assets on the network and staying regulatory compliant.There could also be businesses and projects that will only transact with people who have a digital identity, for regulatory reasons. NEO enables that possibility.NEO is already working in a strategic partnership with THEKEY \u2014 a project being developed on NEO\u2019s platform that will assist with providing digital identification.What about Ethereum: Ethereum requires other DApps to develop digital identities which can then be secured on the Ethereum blockchain. This isn\u2019t so unlike how it will work with NEO \u2014 however NEO has made it clear, through its plan to incorporate digital identity with its bookkeeper nodes, that integration of digital identity is of central importance to the NEO ecosystem.TLDR: Governments don\u2019t like anonymity. Industries don\u2019t like pissing off the government. If NEO wants industrial adoption, it needs to have digital identities.Digital AssetsA future digital asset?If you want a smart economy based on smart contracts, you need to be able to leverage and exchange assets beyond currency. We need to be able to digitize assets like house, property, and car ownership; gold, diamonds, and other precious elements; computers, clothes, and food; even those baseball cards your mom keeps begging you to throw away. Smart contracts become so much more powerful when we have the ability to digitize all of these assets.What about Ethereum: Very similar to the digital identity blurb. Ethereum absolutely can secure digital assets, but they won\u2019t necessarily be regulatory compliant. NEO is ensuring that issued digital asset certificates will be compliant.TDLR: Just read itNEO\u2019s complex networkThe economy is complex; it has so many interconnected pieces. NEO\u2019s platform is complex, with partnerships galore. Fully researching and understanding this is difficult. But I did it, so you don\u2019t have to! Refer back to this visual to have a solid picture of how this network interacts.Even though this looks like the deranged drawings of a conspiracist, it will make sense as you reference it while learning about NEO\u2019s networkOnChainNEO\u2019s founders Da HongFei and Erik Zhang founded a company called OnChain. Understanding OnChain is critical to understanding NEO. They\u2019re not the same company, but their interests align and they have a partnership together. OnChain\u2019s system, known as DNA (Decentralized Network Architecture) aims to work with Chinese businesses and government. NEO acts as the foundation of DNA. If OnChain can integrate with Chinese businesses and government, that will greatly spur adoption of NEO.Ultimately, DNA develops public and private blockchains for businesses. These blockchains then link up to NEO to join the decentralized economy. Businesses then have all the benefits of both private and public blockchains. Think of NEO as providing the public blockchains and OnChain\u2019s DNA providing the private blockchains. Then, they can link up and get the best of both worlds.OnChain also has several projects and partnerships and newsworthy mentions that all contribute to the DNA ecosystem:Established in 2014, this is not a fresh-off-the-shelf companyFirst Chinese blockchain company to join Hyperledger \u2014 a collaboration of projects that work towards integrating blockchain with established businesses.Legal Chain \u2014 works with Microsoft China in digitizing and securing signatures via blockchain technology.Strategic partner of Microsoft China on multiple projectsWorked with the Japanese Ministry of Economy, Trade and IndustryVoted as KPMG\u2019s top 50 Fintech Company in ChinaPartnership with Alibaba to provide an email certification service for Ali CloudInvestment from Fosun Group\u2014China\u2019s largest private conglomerate \u2014 to integrate OnChain across their businesses.Collaboration with Chinese regional government \u2014 using OnChain to develop public services and digital identityOnChain\u2019s recent development was of the ICO Ontology. Ontology uses the same architecture as NEO but ultimately works with businesses in creating a private, encrypted data network. Essentially, this is important when we have information that we need securing, but we also need it to be private. This will enable people to bring this information in a secure manner to blockchains.References on OnChain\u2019s roadmapHonestly, I don\u2019t understand why NEO doesn\u2019t advertise their collaboration with OnChain more. NEO in itself is solid, offering several potential benefits over Ethereum. But combined with OnChain, NEO truly has the potential to implement itself as THE smart economy platform of the East.The Ethereum Comparison: Ethereum\u2019s equivalent is the Enterprise Ethereum Alliance, an open source blockchain initiative dedicated to linking Ethereum with the business world. Their list of partnerships is robust and impressive \u2014 no surprise for those familiar with Ethereum. Included among their members are: BP, HP, Toyota, MasterCard, Microsoft, and Intel, among many others.TLDR: OnChain is a company partnered with NEO. They have extensive experience and many accolades in bringing blockchain to businesses. They work with companies and governments in the East. They are a huge component to NEO\u2019s potential.NEOX:NEOX is NEO\u2019s version of atomic swaps (directly swapping tokens without any exchange) and cross-chain integration. Think Ark Ecosystem. This will enable people to swap crypto assets and transact across different blockchains. It also allows smart contracts to interact across chains.NEOX is important because it allows collaboration between the blockchains (both private and public) created by OnChain and by NEO\u2019s public blockchain. As more components of the Smart Economy develop, NEOX will link them all together.Ethereum Comparison: Ethereum has the ability to do atomic swaps, but has only completed this once \u2014 this isn\u2019t to put down Ethereum; NEO has never completed one. However, Ethereum will need an outside application to accommodate large scale cross-chain integration.Not quite the City of Zion we\u2019re talking about\u2026City of Zion:City of Zion (CoZ) is an independent, open source community of developers, translators, and designers who work towards the betterment of NEO. They have received funding from NEO to help incentivize project development. The community has contributed considerably to NEO. They have developed the NEON wallet, created a NEO block scanner, translated documents for NEO, and developed the NEX platform (see below). They recently received NEO funding to award $270,000 to 10 winners as part of their DApp competition. It is incredibly advantageous to have a network of support such as CoZ.Ethereum Comparison: There isn\u2019t really a good comparison for this on the Ethereum network.NEX:Nex is an upcoming ICO developed by City of Zion that offers a platform for the creation of payment solutions and decentralized exchanges on NEO. It links to NEO with NEOX.Because of differences with NEO in the token model, account balances, and way smart contract interact \u2014 in comparison to Ethereum \u2014 NEO needed a solution to be able to effectively house decentralized exchanges. NEX offers that solution.Ethereum Comparison: Already ERC20 tokens are easy to transact with on decentralized exchanges.ProjectICO:A turnkey, all-in-one ICO company that helps blockchain companies develop: from initial idea to ICO. They recently decided to move from Ethereum to NEO. They have an interesting Reddit AMA on their reasons for switching.Ethereum Comparison: TokenHub is a similar project developing on Ethereum.Microsoft China:NEO is currently hosting a developer competition in partnership with Microsoft China with $490,000 as prize money.Ethereum Comparison: Ethereum is incredibly well connected with established corporations. NEO is playing catchup.DApps and ICOs:The bread and butter of platforms; until now, NEO has only had one ICO (Red Pulse) and one DApp (AdEx). However, with several planned in the near future and with an upgrade last month which will enable NEO smart contracts to interact with website interfaces, I think this is only the beginning for NEO.Ethereum Comparison: Ethereum hands down beats NEO in this area. Ethereum is the go-to platform for ICOs and DApps.Ecosystem RecapWe hopefully have a strong understanding of the differences in the goals of Ethereum and NEO, as well as a good overview of NEO\u2019s network and the network\u2019s advantages in the smart economy. It\u2019s important to understand this network for NEO because NEO is more than just a public blockchain, it is a piece in the larger picture. When NEO\u2019s public blockchain can link up with OnChain\u2019s private and business oriented blockchains and ultimately with all other DApps on it\u2019s platform, it could truly become a smart economy.The biggest differences between Ethereum and NEOEthereum\u2019s energy consumption could power 1,025,438 American homes for a year. \u2014 Source \u2014ProtocolEthereum uses the same protocol as Bitcoin \u2014 Proof of Work (PoW). With Proof of Work, computers on the network compete to solve mathematical formulas and win the right to confirm transactions into the blockchain, and thus, secure the network. The two major drawbacks to the PoW protocol is the danger of a 51% attack and the massive energy consumption required for network security. For these reasons, I think that PoW will soon be an outdated system, as blockchain transitions to a new protocol called Proof of Stake (PoS).Proof of Stake works similarly to PoW except that instead of computers validating the network and receiving rewards equivalent to their relative computing power, PoS uses token holders. Those who hold tokens can \u201cstake\u201d their tokens (staking means to temporarily place the tokens in a locked smart contract\u200a\u2014\u200auntil staking is over) and in exchange, confirm transactions and receive rewards based on the relative number of tokens held. In PoW, if you operate 5% of the total computing power of the network, you can expect to get 5% of the block rewards. In PoS, if you own 5% of tokens, you can also expect to receive 5% of block rewards.PoS offers a solution to the issues plaguing PoW \u2014 mainly it takes virtually no energy to run PoS \u2014 without compromising the security. I would argue that it actually improves security. With Ethereum, and all other PoW protocols, the difficulty algorithm (how hard it is to solve the mathematical formula) must constantly be updated to account for better computer hardware and more powerful mining groups. With PoS there is no need to do this. With Ethereum, you could conceivably purchase enough computing hardware to achieve a 51% attack; even after comprising the network, you would still have all of that hardware and could potentially use it to attack other PoW platforms. With PoS, because you must stake your coins, any malicious behavior results in the loss of all staked coins. So if you bought 51% of all tokens, you would immediately lose your substantial investment. In addition, the costs of purchasing 51% of the network tokens are equal for everyone. The costs of obtaining 51% of computer power \u2014 due to discounts for mass computer purchases and countries with extremely cheap electricity \u2014 are not.Byzantine Fault Tolerance attempts to solve the Byzantine General\u2019s ProblemNEO uses a protocol called dBFT (Delegated Byzantine Fault Tolerance) sounds like a term you\u2019d see on your AP History Test. The simplest explanation of Byzantine Fault Tolerance is the issue with how to get everyone on the network to be honest and work together \u2014 because one bad apple could ruin everything. NEO\u2019s dBFT is a modification of the classic PoS protocol, with some significant advantages and one primary disadvantage.I imagine dBFT as working similar to how the U.S. Senate works (and if that analogy made you want to just give up on Neo entirely, I understand, but hold on\u2026keep reading). If every person in America \u2014 all 323.1 million\u2014was allowed to directly participate in the governmental decision making process, it would be catastrophic. It would be brutally slow as millions competed for the microphone, all shouting their opinion and arguing with each other. Making decisions would also be agonizingly slow. So instead, everyone in the country gets a vote. And with this vote, they can elect their representatives, someone to speak for them. This system directly reflects NEO\u2019s governance. Instead of everyone participating in the validating process \u2014 which can be incredibly limiting in terms of transaction speed \u2014 those who hold NEO tokens can vote for delegates. These delegates (called bookkeepers) maintain the network for everyone. Thus, NEO can run faster, more efficiently, and with quicker and more finite decisions, and you can stay home, drink Bud Light, and watch the Patriots game with your computer in sleep mode.Remember too that these bookkeepers will have their digital identity known, making NEO much more compliant with national regulations.The disadvantage with this system is a lack of decentralization. In its purest sense, instead of thousands of validators being scattered all across the world, governance is concentrated in a few dozen validators. The majority of these nodes are currently operated by the NEO team. However, as of Quarter 1, 2018, NEO will hold less than 2/3 and will continue to hold fewer as time progresses. Regardless, NEO will never be as decentralized as other pure PoS platforms.I would however argue that Ethereum is also not as decentralized as you might think. While the PoW protocol is decentralized, you can count the number of core developer\u2019s for Ethereum on one hand. In addition, while I trust Vitalik Buterin, he does have enormous power and influence over the direction of Ethereum.Ethereum will transition to a PoS protocol in the future. They already have begun the process and the mining difficulty of confirming new blocks will increase exponentially until it is impossible to mine anymore and everyone must transition to the PoS protocol. This will happen but it is likely more than a year out.TLDR: Ethereum uses a Proof of Work protocol and will evolve into Proof of Stake. NEO uses a Delegated Byzantine Fault Tolerance (dBFT) protocol which is a modification of the standard proof of stake protocol.Transaction Speed:Because NEO doesn\u2019t run on PoW and has a more streamlined PoS protocol, NEO can process transactions far more quickly than Ethereum. Now when we compare these, there are both theoretical and practical speeds. Theoretical transaction speeds are the absolute maximum speed mathematically possible for the network. For NEO, this number is 10,000tps (transactions/second). Ethereum can do 30tps. In practicality, because of real world inconsistencies and difficulties, NEO can do 1,000tps in comparison to Ethereum\u2019s 15tps. As protocols improve it is possible that both platforms will approach their theoretical speed.This is an enormous difference and a massive advantage for NEO. NEO\u2019s transaction speeds could conceivably accommodate the kind of smart economy they\u2019re envisioning; Ethereum\u2019s can not. Now in exchange for this speed, NEO is not as decentralized as Ethereum. In addition, it\u2019s important to recognize that Vitalik and Ethereum are well aware of this limitation. Solutions such as Raiden and sharding (two fascinating technologies but far beyond the scope of this article) are on the roadmap for Ethereum and could drastically improve Ethereum\u2019s transaction speed.TLDR: Ethereum can transact at 15tps with a maximum of 30tps. NEO can transact at 1,000tps with a maximum of 10,000tps. Ethereum has plans and solutions to scale to close this gap.Forking and scaling:Ethereum forks to update its software, just like Bitcoin. I describe this here. Forks aren\u2019t necessarily bad, but they certainly can be. Look at Ethereum\u2019s DAO fork for an example of this. After millions were stolen from an Ethereum smart contract, Ethereum forked to refund the money to the original holders. Whether or not this decision was correct, it divided the community and Ethereum Classic was created alongside Ethereum.Forks happen because there is no finality in the consensus mechanism of Ethereum. Multiple chains in the blockchain can be created at once \u2014 ultimately, both are valid chains and can continued to be mined on. Forks happen constantly but are usually resolved when the chain with the most computer power is chosen as legitimate. With Ethereum, it\u2019s always recommended that when you place a transaction, you wait until a few blocks have been mined on top of yours before considering the transaction permanent.NEO has finality. This is because the bookkeepers must reach a 66% consensus for the transaction to be placed into the blockchain. Here is an analogy to understand this. Imagine a first grade class. Timmy asks how much chocolate milk costs. Cynthia has no concept of price (she\u2019s in first grade for God\u2019s sake) and shouts $15! A few students walk over to her in agreement. Bobby\u2019s a chocolate milk aficionado \u2014 he knows his milk. He says $1.25. Most of the room walks over to him. He has a majority. Now assuming Cynthia\u2019s group realizes their flaw and joins Bobby\u2019s group, then the group reaches consensus. But if Cynthia is having a particularly stubborn day, she could keep on with her decision \u2014 a fork. It might not be the right answer, but she still has a valid answer. This is how Ethereum works.Only in Israel do they have chocolate milk in a bag\u2026NEO works like this. Imagine the same scenario. Timmy again asks how much chocolate milk costs. First Cynthia speaks up: \u201c$15!\u201d A few murmur in support, but it\u2019s clearly not 66% of the class so her idea is discarded. Next Bobby says \u201c$1.25.\u201d 66% of the class support his claim and thus, his idea is final. With NEO, the bookkeepers each propose the correct state of the next block. When 66% of them support the proposition, the block is finalized.The implications of this are huge. Finality is incredibly important for the type of economy NEO hopes to support. The financial industry and other complicated, fast moving markets (stock markets for example), can\u2019t operate on a system without finality. They need to know that when their information is placed into the blockchain, it is there for good. They also need the assurance that their blockchain won\u2019t suddenly become irrelevant because of a fork.TLDR: Ethereum can fork; NEO can\u2019t \u2014 this is important for adoption by our real world economy.Decoupling of GAS and NEOThis may very well be NEO\u2019s most ingenious characteristic. The native token of Ethereum is ether. The gas needed to run the Ethereum network (execute contracts, conduct transactions, etc.) is actually just small units of ether. There is no separation between ether and gas.However, NEO decoupled itself from the token needed to run the network: GAS. The NEO token is like partial ownership of the NEO platform. NEO token holders are entitled to vote for bookkeepers. NEO\u2019s use as a share in the company rather than a token is furthered by the fact that NEO is non-divisible. NEO is not meant to be transacted with \u2014 that\u2019s why there is GAS.GAS is used for all operations on the NEO network. Now when a company registers or changes assets on the NEO blockchain, they pay in GAS \u2014 this GAS is then distributed to all NEO holders. Anyone can claim this GAS by just holding their NEO in a personal wallet. Such as this one: NEONBookkeepers are entitled to charge a transaction fee (in GAS) for general transactions on the blockchain that only they (the bookkeepers) receive. However, by decoupling NEO and GAS, there is an incentive to keep transaction fees low; here\u2019s why:High transaction fees, which only benefit the bookkeepers, will prevent people from wanting to register their assets on the blockchain. The less assets registered, the less rewards NEO holders will get. Thus, NEO holders are incentivized to vote in bookkeepers who will keep transaction fees low.\u201c Low transaction fees = more users = more assets registered = more GAS to NEO holders.\u201d \u2014 Malcolm Lerider from his article:Bookkeepers are primarily incentivized by their desire to secure the network. They use the network, benefit from it, and have money staked in NEO. Thus, it is advantageous for them to secure it.It is unclear how rewards will be divided amongst ether holders when Ethereum becomes Proof of Stake. However, it appears that only large Ethereum holders will be able to stake and receive rewards.The NEON Wallet with the \u201cclaim gas\u201d buttonThe genius of the NEO token is that it allows users to passively acquire GAS in their wallet. No need to run the computer, keep the wallet open, or expend electricity. No need to \u201cstake\u201d your tokens \u2014 bookkeepers do this for you. You could even have your NEO in a paper wallet. GAS is collected when you physically push the \u201cclaim GAS\u201d button. This also ensures that the NEO network doesn\u2019t need to calculate the interest of NEO holders with every block, reducing traffic and simplifying the compound interest formulas. The delegated bookkeepers maintain the network; your investment gains interest. This would not be possible without two separate tokens.Both NEO and GAS are capped at 100 million tokens.TLDR: Ethereum has one token: ether. NEO has two: NEO and GAS. There are huge advantages to having two tokens when using a proof of stake protocol.SourceSmart Contract LanguageThe biggest difference between Ethereum and NEO smart contracts is the coding language options available. With Ethereum, contracts must be written in solidity \u2014 A coding language created specifically for Ethereum. NEO on the other hand supports a variety of different languages, including the most commonly known. NEO supports five programming languages with plans to support an additional five in the future.There are certainly advantages to crafting a particular language for a particular platform. Ethereum developers designed solidity for Ethereum. However, far fewer people know solidity. By supporting the most common coding languages, NEO has an advantage in facilitating adoption. Most programmers today would have to learn solidity before working with Ethereum whereas with NEO, their knowledge is already applicable. It\u2019s also possible that existing business platforms could be placed onto the NEO blockchain without much modification.TLDR (seriously? It\u2019s like two paragraphs): Ethereum has one coding language: Solidity. NEO supports many different coding languages.Smart Contract ExecutionSmart contracts use what are called virtual machines (VM). Essentially, in layman\u2019s terms, virtual machines are machines that execute smart contracts and run inside the computers of miners or other validators. The VM is the environment that the smart contract runs in. Thus, if we want to know how efficient and effective smart contracts can be, we need to analyze the VM.NEO\u2019s VM optimizes smart contract code before executing the contract. What this means is that it takes the code and reorganizes it to make it more efficient. Imagine your mom gives you a grocery list. If it\u2019s anything like my mom\u2019s lists \u2014 and she will probably object to this \u2014 the items have no organization and I am constantly ping-ponging back and forth across the grocery store. But by organizing all the items into categories that I can then pick up together at the same part of the store (dairy, canned goods, cereals), my job becomes much quicker and easier. NEO does this; Ethereum does not. Now while this makes things much easier in the long run, in the initial phase it takes a bit longer to organize the list. NEO\u2019s contract execution takes slightly longer than Ethereum\u2019s, but is much more efficient in the long run.Ethereum plans to roll out this mechanism, but there is no timeline for it. Ultimately, this allows NEO to execute and run complex smart contracts faster and more efficiently than Ethereum.TLDR: NEO has a more efficient and faster way of executing smart contracts than Ethereum.Additional Important DifferencesNEO is theoretically quantum computer resistant, Ethereum is not \u2014 When quantum computers develop enough, blockchains could be vulnerable. NEO has theoretically designed their blockchain to account for this. Ethereum does not have that capability.sk-Snarks: Ethereum\u2019s new privacy tool. sk-Snarks is the privacy protocol of ZCash. While there are far smarter people who can explain the technology far more intelligently than me, essentially sk-Snarks is important when we want to have data or contracts whose contents are private or confidential. We need to maintain the privacy of the data, but at the same time, prove we have ownership of it. sk-Snarks allows users to prove they have ownership without actually giving up the private data. NEO has no such capabilities. However, NEO\u2019s partnership with OnChain\u2019s Ontology offers NEO a privacy solution for businesses.NEO\u2019s Recipe for SuccessIn my opinion, NEO has two possible avenues for success. NEO\u2019s two paths towards success are:The above mentioned benefits allow it to compete with Ethereum directly and it begins to be the go-to platform for ICOs and blockchain development.It doesn\u2019t compete with Ethereum but instead becomes the DApp platform and foundation of a smart economy in the East.The First PossibilityI think this is the least likely of the two paths to success. Yes, NEO beats Ethereum on several fronts. But Ethereum already is an established platform. And Ethereum will close the gap with its scaling plans in the future. To overtake Ethereum will be very difficult. However, I do think that NEO has a lot more room to grow, even if it can\u2019t fully compete with Ethereum. Already we\u2019ve seen an influx of ICOs developing on NEO \u2014 this will increase. And as it does, NEO\u2019s price will increase. I also believe that eventually the market will support more than one platform. But that doesn\u2019t mean NEO will ever replace Ethereum, especially in the West.The Second Possibility \u2014 some political analysis in here tooThis is definitely the most exciting of the two possibilities. Take the almost 1.4 billion Chinese; add to that an even larger untapped market in the surrounding area and that means that the blockchain platform that captures this market will make Ethereum\u2019s $44 billion marketcap look like chump change. And as I wrote about before, China uses their own products and businesses. The issue is, we don\u2019t even know if China is looking for a platform. Currently, China has banned all ICOs and exchanges. If the ban continues, no one will capture the Chinese ICO market \u2014 because there will be nothing to capture. So the question then is, if \u2014 and it\u2019s a big if \u2014 China legalizes ICOs, can Neo be the big man on the block?In my opinion, China will soon open up blockchain development. China right now sees an opportunity to be a global political and economical leader. Already with the world\u2019s second largest GDP, China is not afraid to adapt and evolve for the benefit of their economy. Their dedication to renewable energy exemplifies this. China was certainly not known for their environmental friendliness; but they recognized that the world was moving in that direction; they recognized the benefits it offered; and they recognized the enormous potential if they could lead the pack. And now? China is the leading investor in renewable energy.Additionally, China\u2019s political structure means that development can happen fast. They can evolve quickly and lead world renewable energy efforts because they are a one-party state. There is no balance of power and need to appeal to a divided voter base delaying development as there is in America.China knows that blockchain is going to be extraordinarily disruptive. They demonstrated this when they released their five-year blockchain plan. China banned exchanges and ICOs because they recognize the potential of blockchain. If they didn\u2019t understand its significance, they never would have banned it. They banned it because they want to control it; because they will control it. They banned it to flex their muscles, establish their power, and give them time to formulate a plan for how and when they will move forward. It\u2019s very difficult to influence things when adoption has come; it\u2019s much easier to impose early restrictions and shape the direction of the disruption.When they have their plan, they will likely become the world\u2019s leading country in blockchain technology. And with the capability for rapid economic development, when China opens up ICOs and blockchain development\u2026look out.The question then is, what will China utilize? It\u2019s possible that they design their own governmental blockchain services, but I think this is incredibly unlikely. China integrated with social media, not by banning it or by creating their own platform. Instead, they integrated by selectively banning western social media and directing the Chinese market to Tencent \u2014 in exchange, Tencent employs communist workers, stays regulatory compliant, and maintains the party\u2019s censorship. And now, Tencent is bigger than Facebook. Thus, I believe that China will join the blockchain world by integrating with an already present platform; one with a willingness to work with the Chinese government; one with a focus and framework that will support governmental compliance. NEO and OnChain fit that mold. Their work and partnerships within China, NEO\u2019s development and dedication to compliance, and their envisioned smart economy gives me confidence that when the day comes, NEO could be China\u2019s platform.Recognize that this is my own opinion. Nothing is guaranteed, especially in the crypto space. All we can do is formulate a hypothesis and provide a strong supporting argument; I hope that I at least did that.SummaryUltimately, if I had to categorize NEO and Ethereum in a few words, I would say that NEO is Ethereum but with a specific purpose: to enable a smart economy. Ethereum is just a platform to enable entrepreneurship, innovation, and development \u2014 the direction it goes is up to those individuals building on Ethereum. NEO has a direction; it is shaping its platform with a goal in mind.Yes, NEO has some definite advantages over Ethereum, but as I said, Ethereum will likely scale to close the gap as the platform gains adoption. NEO\u2019s true value is in its dedication towards fitting the mold for a regulatory compliant smart economy platform. They are doing this; now China just needs to takes notice.Disclaimer: I am invested into both Ethereum and NEO. This is not investment advice, merely my opinion on the platforms. Do your own research.However, if you do want to purchase, Binance is my favorite: linkFOLLOW me on Twitter: @noamlevensonHold down the clap button if you liked the content! It helps me gain exposure .Clap 50 times!I love getting questions or suggestions, so comment away!", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/free-code-camp/a-hacker-stole-31m-of-ether-how-it-happened-and-what-it-means-for-ethereum-9e5dc29e33ce?source=search_post---------2", "post_date": "", "readtime": "", "upvotes": "", "content": "A hacker stole $31M of Ether \u2014 how it happened, and what it means for EthereumHaseeb QureshiFollowJul 20, 2017 \u00b7 16 min readYesterday, a hacker pulled off the second biggest heist in the history of digital currencies.Around 12:00 PST, an unknown attacker exploited a critical flaw in the Parity multi-signature wallet on the Ethereum network, draining three massive wallets of over $31,000,000 worth of Ether in a matter of minutes. Given a couple more hours, the hacker could\u2019ve made off with over $180,000,000 from vulnerable wallets.But someone stopped them.Having sounded the alarm bells, a group of benevolent white-hat hackers from the Ethereum community rapidly organized. They analyzed the attack and realized that there was no way to reverse the thefts, yet many more wallets were vulnerable. Time was of the essence, so they saw only one available option: hack the remaining wallets before the attacker did.By exploiting the same vulnerability, the white-hats hacked all of the remaining at-risk wallets and drained their accounts, effectively preventing the attacker from reaching any of the remaining $150,000,000.Yes, you read that right.To prevent the hacker from robbing any more banks, the white-hats wrote software to rob all of the remaining banks in the world. Once the money was safely stolen, they began the process of returning the funds to their respective account holders. The people who had their money saved by this heroic feat are now in the process of retrieving their funds.It\u2019s an extraordinary story, and it has significant implications for the world of cryptocurrencies.It\u2019s important to understand that this exploit was not a vulnerability in Ethereum or in Parity itself. Rather, it was a vulnerability in the default smart contract code that the Parity client gives the user for deploying multi-signature wallets.This is all pretty complicated, so to make the details of this clear for everyone, this post is broken into three parts:What exactly happened? An explanation of Ethereum, smart contracts, and multi-signature wallets.How did they do it? A technical explanation of the attack (specifically for programmers).What now? The attack\u2019s implications about the future and security of smart contracts.If you are familiar with Ethereum and the crypto world, you can skip to the second section.1. What exactly happened?There are three building blocks to this story: Ethereum, smart contracts, and digital wallets.Ethereum is a digital currency invented in 2013 \u2014 a full 4 years after the release of Bitcoin. It has since grown to be the second largest digital currency in the world by market cap \u2014 $20 billion, compared to Bitcoin\u2019s $40 billion.Like all cryptocurrencies, Ethereum is a descendant of the Bitcoin protocol, and improves on Bitcoin\u2019s design. But don\u2019t be fooled: though it is a digital currency like Bitcoin, Ethereum is much more powerful.While Bitcoin uses its blockchain to implement a ledger of monetary transactions, Ethereum uses its blockchain to record state transitions in a gigantic distributed computer. Ethereum\u2019s corresponding digital currency, ether, is essentially a side effect of powering this massive computer.To put it another way, Ethereum is literally a computer that spans the entire world. Anyone who runs the Ethereum software on their computer is participating in the operations of this world-computer, the Ethereum Virtual Machine (EVM). Because the EVM was designed to be Turing-complete (ignoring gas limits), it can do almost anything that can be expressed in a computer program.Let me be emphatic: this is crazy stuff. The crypto world is ebullient about the potential of Ethereum, which has seen its value skyrocket in the last 6 months.The developer community has rallied behind it, and there\u2019s a lot of excitement about what can be built on top of the EVM \u2014 and this brings us to smart contracts.Smart contracts are simply computer programs that run on the EVM. In many ways, they are like normal contracts, except they don\u2019t need lawyers or judges to interpret them. Instead, they are compiled to bytecode and interpreted unambiguously by the EVM. With these programs, you can (among other things) programmatically transfer digital currency based solely on the rules of the contract code.Of course, there are things normal contracts do that smart contracts can\u2019t \u2014 smart contracts can\u2019t easily interact with things that aren\u2019t on the blockchain. But smart contracts can also do things that normal contracts can\u2019t, such as enforce a set of rules entirely through unbreakable cryptography.This leads us to the notion of wallets. In the world of digital currencies, wallets are how you store your assets. You gain access to your wallet using essentially a secret password, also known as your private key (simplified a bit).There are many different types of wallets that confer different security properties, such as withdrawal limits. One of the most popular types is the multi-signature wallet.In a multi-signature wallet, there are several private keys that can unlock the wallet, but just one key is not enough to unlock it. If your multi-signature wallet has 3 keys, for example, you can specify that at least 2 of the 3 keys must be provided to successfully unlock it.This means that if you, your father, and your mother are each signatories on this wallet, even if a criminal hacked your mother and stole her private key, they could still not access your funds. This leads to much stronger security guarantees, so multi-sigs are a standard in wallet security.This is the type of wallet the hacker attacked.So what went wrong? Did they break the private keys? Did they use a quantum computer, or some kind of cutting-edge factoring algorithm?Nope, all the cryptography was sound. The exploit was almost laughably simple: they found a programmer-introduced bug in the code that let them re-initialize the wallet, almost like restoring it to factory settings. Once they did that, they were free to set themselves as the new owners, and then walk out with everything.2. How did this happen?What follows is a technical explanation of exactly what happened. If you\u2019re not a developer, feel free to skip to the next section, since this is going to be programming-heavy.Ethereum has a fairly unique programming model. On Ethereum, you write code by publishing contracts (which you can think of as objects), and transactions are executed by calling methods on these objects to mutate their state.In order to run code on Ethereum, you need to first deploy the contract (the deployment is itself a transaction), which costs a small amount of Ether. You then need to call methods on the contract to interact with it, which costs more Ether. As you can imagine, this incentivizes a programmer to optimize their code, both to minimize transactions and minimize computation costs.One way to reduce costs is to use libraries. By making your contract call out to a shared library that was deployed at a previous time, you don\u2019t have to re-deploy any shared code. In Ethereum, keeping your code DRY will directly save you money.The default multi-sig wallet in Parity did exactly this. It held a reference to a shared external library which contained wallet initialization logic. This shared library is referenced by the public key of the library contract.// FIELDSaddress constant _walletLibrary = 0xa657491c1e7f16adb39b9b60e87bbb8d93988bc3;The library is called in several places, via an EVM instruction called DELEGATECALL, which does the following: for whatever method that calls DELEGATECALL, it will call the same method on the contract you're delegating to, but using the context of the current contract. It's essentially like a super call, except without the inheritance part. (The equivalent in JavaScript would be OtherClass.functionName.apply(this, args).)Here\u2019s an example of this in their multi-sig wallet: the isOwner method just delegates to the shared wallet library's isOwner method, using the current contract's state:function isOwner(address _addr) constant returns (bool) {    return _walletLibrary.delegatecall(msg.data);}This is all innocent enough. The multi-sig wallet itself contained all of the right permission checks, and they were sure to rigorously enforce authorization on all sensitive actions related to the wallet\u2019s state.But they made one critical mistake.Solidity allows you to define a \u201cfallback method.\u201d This is the method that gets called when there\u2019s no method that matches a given method name. You define it by not giving it a name:function() {    // do stuff here for all unknown methods}The Parity team decided to let any unknown method that sent Ether to the contract just default to depositing the sent Ether.function() payable {    // payable is just a keyword that means this method can receive/pay Etherif (msg.value > 0) {    // just being sent some cash?    Deposit(msg.sender, msg.value);    } else {    throw;  }}But they took it a step further, and herein was their critical mistake. Below is the actual code that was attacked.function() payable {    // just being sent some cash?  if (msg.value > 0)    Deposit(msg.sender, msg.value);  else if (msg.data.length > 0)    _walletLibrary.delegatecall(msg.data);}Basically:If the method name is not defined on this contract\u2026And there\u2019s no ether being sent in the transaction\u2026And there is some data in the message payload\u2026Then it will call the exact same method if it\u2019s defined in _walletLibrary, but in the context of this contract.Using this, the attacker called a method called initWallet(), which was not defined on the multisig contract but was defined in the shared wallet library:function initWallet(address[] _owners, uint _required, uint _daylimit) {    initDaylimit(_daylimit);  initMultiowned(_owners, _required);}Which calls the initMultiowned method...function initMultiowned(address[] _owners, uint _required) {    m_numOwners = _owners.length + 1;  m_owners[1] = uint(msg.sender);  m_ownerIndex[uint(msg.sender)] = 1;  for (uint i = 0; i < _owners.length; ++i)  {    m_owners[2 + i] = uint(_owners[i]);    m_ownerIndex[uint(_owners[i])] = 2 + i;  }  m_required = _required;}Do you see what just happened there? The attacker essentially reinitialized the contract by delegating through the library method, overwriting the owners on the original contract. They and whatever array of owners they supply as arguments will be the new owners.Given that they now control the entire wallet, they can trivially extract the remainder of the balance. And that\u2019s precisely what they did.The initWallet: https://etherscan.io/tx/0x707aabc2f24d756480330b75fb4890ef6b8a26ce0554ec80e3d8ab105e63db07The transfer: https://etherscan.io/tx/0x9654a93939e98ce84f09038b9855b099da38863b3c2e0e04fd59a540de1cb1e5So what was ultimately the vulnerability? You could argue there were two. First, the initWallet and initMultiowned in the wallet library were not marked as internal (this is like a private method, which would prevent this delegated call), and those methods did not check that the wallet wasn't already initialized. Either check would've made this hack impossible.The second vulnerability was the raw delegateCall. You can think of this as equivalent to a raw eval statement, running on a user-supplied string. In an attempt to be succinct, this contract used metaprogramming to proxy potential method calls to an underlying library. The safer approach here would be to whitelist specific methods that the user is allowed to call.The trouble, of course, is that this is more expensive in gas costs (since it has to evaluate more conditionals). But when it comes to security, we probably have to get over this concern when writing smart contracts that move massive amounts of money.So that was the attack.It was a clever catch, but once you point it out, it seems almost elementary. The attacker then jumped on this vulnerability for three of the largest wallets they could find \u2014 but judging from the transaction times, they were doing this entirely manually.The white-hat group was doing this at scale using scripts, and that\u2019s why they were able to beat the attacker to the punch. Given this, it\u2019s unlikely that the attacker was very sophisticated in how they planned their attack.You might ask the question though \u2014 why don\u2019t they just roll back this hack, like they did with the DAO hack?Unfortunately that\u2019s not really possible. The DAO hack was unique in that when the attacker drained the DAO into a child DAO, the funds were frozen for many days inside a smart contract before they could be released to the attacker.This prevented any of the stolen funds from going into circulation, so the stolen Ether was effectively siloed. This gave the Ethereum community plenty of time to conduct a public quorum about how to deal with the attack.In this attack, the attacker immediately stole the funds and could start spending them. A hard fork would be impractical\u2013what do you do about all of the transactions that occur downstream? What about the people who innocently traded assets with the attacker? Once the ether they\u2019ve stolen gets laundered and enters general circulation, it\u2019s like counterfeit bills circulating in the economy \u2014 it\u2019s easy to stop when it\u2019s all in one briefcase, but once everyone\u2019s potentially holding a counterfeit bill, you can\u2019t really turn back the clock anymore.So the transaction won\u2019t get reversed. The $31M loss stands. It\u2019s a costly, but necessary lesson.So what should we take away from this?3. What does this attack mean for Ethereum?There are several important takeaways here.First, remember, this was not a flaw in Ethereum or in smart contracts in general. Rather, it was a developer error in a particular contract.So who were the crackpot developers who wrote this? They should\u2019ve known better, right?The developers here were a cross-collaboration between the Ethereum foundation (literally the creators of Ethereum), the Parity core team, and members of the open-source community. It underwent extensive peer review. This is basically the highest standard of programming that exists in the Ethereum ecosystem.These developers were human. They made a mistake. And so did the reviewers who audited this code.I\u2019ve read some comments on Reddit and HackerNews along the lines of: \u201cWhat an obvious mistake! How was it even possible they missed this?\u201d (Ignoring that the \u201cobvious\u201d vulnerability was introduced in January and only now discovered.)When I see responses like this, I know the people commenting are not professional developers. For a serious developer, the reaction is instead: damn, that was a dumb mistake. I\u2019m glad I wasn\u2019t the one who made it.Mistakes of this sort are routinely made in programming. All programs carry the risk of developer error. We have to throw off the mindset of \u201cif they were just more careful, this wouldn\u2019t have happened.\u201d At a certain scale, carefulness is not enough.As programs scale to non-trivial complexity, you have to start taking it as a given that programs are probably not correct. No amount of human diligence or testing is sufficient to prevent all possible bugs. Even organizations like Google or NASA make programming mistakes, despite the extreme rigor they apply to their most critical code.We would do well to take a page from site reliability practices at companies like Google and Airbnb. Whenever there\u2019s a production bug or outage, they do a postmortem analysis and distribute it within the company. In these postmortems, there is always a principle of never blaming individuals.Blaming mistakes on individuals is pointless, because all programmers, no matter how experienced, have a nonzero likelihood of making a mistake. Instead, the purpose of a postmortem is to identify what in the process allowed that mistake to get deployed.The problem was not that the developer forgot to add internal to the wallet library, or that they did a raw delegateCall without checking what method was being called.The problem is that their programming toolchain allowed them to make these mistakes.As the smart contract ecosystem evolves, it has to evolve in the direction of making these mistakes harder, and that means making contracts secure by default.This leads me to my next point.Strength is a weakness when it comes to programming languages. The stronger and more expressive a programming language is, the more complex its code becomes. Solidity is a very complex language, modeled to resemble Java.Complexity is the enemy of security. Complex programs are more difficult to reason about and harder to identify edge cases for. I think that languages like Viper (maintained by Vitalik Buterin) are a promising step in this direction. Viper includes by default basic security mechanisms, such as bounded looping constructs, no integer overflows, and prevents other basic bugs that developers shouldn\u2019t have to reason about.The less the language lets you do, the easier it is to analyze and prove properties of a contract. Security is hard because the only way to prove a positive statement like \u201cthis contract is secure\u201d is to disprove every possible attack vector: \u201cthis contract cannot be re-initialized,\u201d \u201cits funds cannot be accessed except by the owners,\u201d etc. The fewer possible attack vectors you have to consider, the easier it is to develop a secure contract.A simpler programming model also allows things like formal verification and automatic test generation. These are areas under active research, but just as smart contracts have incorporated cutting-edge cryptography, they also should start incorporating the leading edge of programming language design.There is a bigger lesson here too.Most of the programmers who are getting into this space, myself included, come from a web development background, and the blockchain toolchain is designed to be familiar for web developers. Solidity has achieved tremendous adoption in the developer community because of its familiarity to other forms of programming. In a way, this may end up being its downfall.The problem is, blockchain programming is fundamentally different from web development.Let me explain.Before the age of the client-server web model, most programming was done for packaged consumer software or on embedded systems. This was before the day of automatic software updates. In these programs, a shipped product was final \u2014 you released one form of your software every 6 months, and if there was a bug, that bug would have to stand until the next release. Because of this longer development cycle, all software releases were rigorously tested under all conceivable circumstances.Web development is far more forgiving. When you push bad code to a web server, it\u2019s not a big deal if there\u2019s a critical mistake \u2014 you can just roll back the code, or roll forward with a fix, and all is well because you control the server. Or if the worst happens and there\u2019s an active breach or a data leak, you can always stop the bleeding by shutting off your servers and disconnecting yourself from the network.These two development models are fundamentally different. It\u2019s only out of something like web development that you can get the motto \u201cmove fast and break things.\u201dMost programmers today are trained on the web development model. Unfortunately, the blockchain security model is more akin to the older model.In blockchain, code is intrinsically unrevertible. Once you deploy a bad smart contract, anyone is free to attack it as long and hard as they can, and there\u2019s no way to take it back if they get to it first. Unless you build intelligent security mechanisms into your contracts, if there\u2019s a bug or successful attack, there\u2019s no way to shut off your servers and fix the mistake. Being on Ethereum by definition means everyone owns your server.A common saying in cybersecurity is \u201cattack is always easier than defense.\u201d Blockchain sharply multiplies this imbalance. It\u2019s far easier to attack because you have access to the code of every contract, know how much money is in it, and can take as long as you want to try to attack it. And once your attack is successful, you can potentially steal all of the money in the contract.Imagine that you were deploying software for vending machines. But instead of a bug allowing you to simply steal candy from one machine, the bug allowed you to simultaneously steal candy from every machine in the world that employed this software. Yeah, that\u2019s how blockchain works.In the case of a successful attack, defense is extremely difficult. The white-hats in the Parity hack demonstrated how limited their defense options were \u2014 there was no way to secure or dismantle the contracts, or even to hack back the stolen money; all they could do was hack the remaining vulnerable contracts before the attacker did.This might seem to spell a dark future.But I don\u2019t think this is a death knell for blockchain programming. Rather, it confirms what everyone already knows: this ecosystem is young and immature. It\u2019s going to take a lot of work to develop the training and discipline to treat smart contracts the way that banks treat their ATM software. But we\u2019re going to have to get there for blockchain to be successful in the long run.This means not just programmers maturing and getting more training. It also means developing tools and languages that make all of this easier, and give us rigorous guarantees about our code.It\u2019s still early. Ethereum is a work in progress, and it\u2019s changing rapidly. You should not treat Ethereum as a bank or as a replacement for financial infrastructure. And certainly you should not store any money in a hot wallet that you\u2019re not comfortable losing.But despite all that, I still think Ethereum is going to win in the long run. And here\u2019s why: the developer community in Ethereum is what makes it so powerful.Ethereum will not live or die because of the money in it. It will live or die based on the developers who are fighting for it.The league of white-hats who came together and defended the vulnerable wallets didn\u2019t do it for money. They did it because they believe in this ecosystem. They want Ethereum to thrive. They want to see their vision of the future come true. And after all the speculation and the profiteering, it\u2019s ultimately these people who are going to usher the community into its future. They are fundamentally why Ethereum will win in the long run\u2014or if they abandon Ethereum, their abandonment will be why it loses.This attack is important. It will shake people up. It will force the community to take a long, hard look at security best practices. It will force developers to treat smart contract programming with far more rigor than they currently do.But this attack hasn\u2019t shaken the strength of the builders who are working on this stuff. So in that sense it\u2019s a temporary setback.In the end, attacks like this are good for the community to grow up. They call you to your senses and force you to keep your eyes open. It hurts, and the press will likely make a mess of the story. But every wound makes the community stronger, and gets us closer to really deeply understanding the technology of blockchain \u2014 both its dangers, and its amazing potential.P.S. If you\u2019re a dev and you want to learn more about smart contract security, this is a really good resource.Errata: This article originally said that Gavin Wood was the developer of the contract, which is incorrect. Gavin is the founder of Parity and pushed the fix to the contract, but was not the original developer. It also originally claimed that $77M additional funds were vulnerable, but this doesn\u2019t count all of the ERC20 (ICO) tokens that were vulnerable. The total amount is actually $150,000,000+ if you include all ERC20 tokens. As of the time of writing this (July 21st 4PM EST), the total value of the assets saved by the white-hats was $179,704,659.", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/hackernoon/ethereum-will-pass-bitcoin-in-2018-my-cryptocurrency-investment-portfolio-dcab52905bba?source=search_post---------3", "post_date": "", "readtime": "", "upvotes": "", "content": "Ethereum will pass Bitcoin in 2018: my cryptocurrency investment portfolioJason KowalskiFollowJan 12, 2018 \u00b7 8 min readIn the last few days, many have asked about my investment strategy and portfolio mix after writing 95Percent\u2019s: Blockchain Technology.After much deliberation, in this post, I\u2019ve decided to share my holdings with you. Perhaps more importantly, I\u2019ve decided to also share my underlying philosophy. As a reminder, I know nothing. None of this should be construed as investment advice, and you should do your own research before making any investments. I would be financially okay if I lost all of my invested money: you should make sure you could survive a total loss before investing any funds.But enough of that, how should you approach investing in cryptocurrencies? First, I advocate creating your own investment tenets. Tenets are also a crucial aspect of the product management process. I recommend creating tenets before diving into any business, project or problem.Why do we write tenets?Tenets are used to make hard decisionsEach tenet expresses the conflict arising from two (or more) competing philosophiesEach tenet ultimately demonstrates preference for one philosophy over othersMost people have their own philosophies and preferences, but they don\u2019t write them down. Writing them out is crucial because it crystalizes your thinking. Tenets are helpful when times are good and indispensable when things get tough. You should debate your tenets heavily with family, friends, and yourself. Below I share five of my cryptocurrency investment tenets:Jason\u2019s Cryptocurrency Tenets [January 2018]1) I will prioritize platform investments (think Ethereum) over application investments (think Dash). Strong infrastructure scales and changes the world. Successful applications are hard to predict and are not stable over time. Platforms better withstand changing customer needs.2) I will choose cryptocurrencies with user adoption and strong focus on user adoption over cryptocurrencies with the latest tech or prettiest whitepapers.3) I will take the super-long term view. I will prioritize cryptocurrency that have the potential to be trillion dollar businesses and will stay away from currencies with more barriers to widespread adoption. If a cryptocurrency is unlikely to ever be used en masse, I won\u2019t buy it. I investment in fundamentals not merely public opinion.4) I will greatly value signals in the market, especially signals from entities with inside information and large investment positions \u2014 potentially over even my own analysis.5) I value cryptocurrencies that demonstrate the ability to change direction, pivot quickly and make decisions over cryptocurrencies that emphasize status quo, tradition, and moving wisely but slowly. I recognize this is partly a function of team structure and leadership.After painstakingly working through my tenets, I\u2019ve researched many of the cryptocoins available today. Based on my personal investment philosophy and this research, I\u2019ve made several investments over the last month. Here\u2019s my positions as of January 11th 2018:Jason\u2019s Cryptocurrency Portfolio* as of January 11th 2018:Ethereum: 50%Stellar: 20%Neo: 20%Request Network: 10%*I\u2019ve rounded these numbers to make them prettier.Ethereum: 50%As we wrote in Blockchain Technology: \u201cBlockchain technology creates information networks. The fundamental rule of networks is that when a new person joins any network, the network becomes exponentially more valuable. As a corollary, each time another person joins a widely-used network, it becomes exponentially harder for competing networks to offer similar value to people. You use Facebook because all of your friends are on the platform. You are less likely to use a new social network because few of your friends would be on it. As a result, networks tend to produce winner-takes-all markets. Facebook, WeChat and a few other businesses, for example, dominate the social networking space. We expect a similar winner-take-all outcome for blockchain technology. So far, founders have created many hundreds of digital coins. They will create thousands more over the next few years. We expect a handful of these digital coins to successfully walk out onto the global stage, while the vast majority of these coins will ultimately become valueless.\u201dAmazon is a platform. Facebook is a platform. Platforms dominate the internet. As we\u2019ve seen from Ethereum\u2019s creation of the Initial Coin Offering (ICO) platform, platform coins will dominate the blockchain coin as well. We\u2019ll see many cryptocoins repositioning themselves as platform coins, especially starting in the second half of 2018 and into 2019 when many smaller, more niche coins start to flame out. Based on my research, Ethereum is currently best positioned to win the platform war. Pure and simple. I may change my view in the next few months or quarters but for now Ethereum gets the majority of my money.Stellar: 20%Stellar is a platform that wants to make it really easy for companies to ICO (versus using Ethereum). Stellar is ultra-focused on this use case, but that\u2019s okay, because this use case is massive.Again, per Blockchain Technology, \u201c[blockchain] technology can also make physical-world assets more liquid (easier to sell and buy) by making them more reducible. In other words, the blockchain better facilitates ownership of assets across multiple people\u2026 while mega-companies (e.g., Amazon, AirBnB) have successfully built their own digital marketplaces in the past, blockchain provides the available-to-all, trust-building, low-cost financial infrastructure via smart contracts, secure transactions, and an authoritative ledger to [almost anyone]\u2026Unlike crowd-funding sites like Kickstarter, where early backers receive nothing but a product or service, ICOs let entities actually own part of meaningful ideas.\u201dThe tokenization of assets via blockchain is going to change the world. So far, this use case is the only one Ethereum has proved it can solve and I find it possible that Stellar eats some of Ethereum\u2019s pie: I am watching Stellar carefully. Stellar focuses on usability (think: MVP) instead of extensibility (think: useless features). The founder started Mt. GOX and built the initial framework for Ripple. Stellar is backed by Stripe and has support from top advisors in tech.Neo: 20%Over the last decade, China has made it clear that they want to build their own solutions to world problems. I expect this trend to continue into the blockchain world, and expect at least a duopoly platform paradigm (at least one major smart contract platform for the West, and at least one smart contract platform for the East).Request Network: 10%Request Network is a platform specifically focused on the payments space (built on top of Ethereum). While the sized of the tokenization of assets space (e.g. ICO) is almost incalculable, the payments space remains enormous. Request Network is a big team bet. As a product leader, I value team organization a lot. I\u2019ve studied the core developers of many of the top blockchain coins, and find that most projects are being run relatively poorly compared to more traditional software development projects today (partly a function of decentralization of blockchain teams). Many teams don\u2019t have updated visions or project plans and as a result miss deadlines and seem to be prioritizing things no one wants. Request Network strikes me as agile, able to pivot quickly, and ruthlessly focused on user growth and customer experience. (I love the bi-weekly updates.). I also immensely value their time in YCombinator, the top startup incubator in the world.Like the pre-blockchain startup world, real-life customer feedback is everything. I want a team desperate to get their coin to market. From there, they can interact with real customers and then make technical changes that are likely to lead to meaningful improvements for real customers.Mainstream cryptocoins I am NOT invested in:BitcoinIn my opinion, a huge milestone for blockchain technology will be to move away from the Bitcoin Hegemony. Right now, the cryptocurrency market as whole is psychologically entwined with Bitcoin. When Bitcoin plummets, the market plummets, although we\u2019ve seen signs of change in the last few weeks. In 2018, I predict that Ethereum (or another platform) will surpass Bitcoin. The cryptocurrency market will finally detangle itself from Bitcoin.I don\u2019t find pro-Bitcoin arguments particularly strong. Initially, Bitcoin initially saw a lot of success helping entities perform discreet transactions (think: Silk Road). Currently, though, Bitcoin isn\u2019t particularly helpful in the payments space (slow, expensive, and unfocused): the digital currency is unlikely to scale to widespread user adoption for payments. Bitcoin also can\u2019t help with ICOs: it is not a platform. Perhaps most concerning, from a development perspective Bitcoin moves slowly, has divided leadership, and doesn\u2019t practice user-driven development (at least compared to other digital coins). Proponents cite these characteristics as advantages and argue that Bitcoin is a store of value.We flesh out the digital coin role as a store of value in Blockchain Technology: \u201cBlockchain technology also has potential to provide a new independent store of value. Today, the classic independent store of value, gold, is partly valuable because humans have decided to value it independently of nation states (e.g., Canada) or nation alliances (e.g., the European Union) unlike other mainstream currencies (e.g., the United States dollar is closely tied to the success of the United States of America). Gold is generally inversely correlated with the US dollar: in other words, gold acts as a hedge against the current global financial system. Because gold is difficult to store \u2014 heavy, relatively insecure \u2014 digital blockchain-currencies represent an attractive alternative. If digital currencies become more stable over time (currently, they are extremely volatile), they may one day augment or supplement assets such as gold.\u201dThe problem is that no one uses Bitcoin as a stable store of value today. Additionally, Bitcoin is relatively uncorrelated with the US dollar, so it doesn\u2019t act as a particularly useful hedge. Ultimately, I think digital coins will be strong store of values, but this is far, far down the road. At that point, I find that other cryptocoins are just as likely or more likely to act as global store of values compared to Bitcoin.I further argued that the bigger and more immediate store of value opportunity is \u201chelping entities buy into the global financial system in the first place. In developing countries, for example, many entities are eager to shift local, unstable currencies to stable currencies such as the US dollar to better protect their wealth. Like the US dollar today, the blockchain-backed currencies that facilitate world transactions tomorrow will also naturally act as a store of value. Entities will invest in these currencies as they do the US dollar today. As a result, the same blockchain-based currencies that gain mainstream adoption for payments are also likely to gain mainstream adoption as stores of value.\u201d We will be forever indebted to Bitcoin but 2018 will mark Ethereum passing Bitcoin, the marketing falling, and then ultimately rebounding stronger than before. The age of the Blockchain Platform is beginning.Privacy-centric cryptocoinWhile, private, fully-anonymous transactions are a large blockchain use case, coins emphasizing privacy will struggle to gain mass adoption in the long-term. I expect privacy-centric coins to bear the brunt of initial government scrutiny and regulation. I choose to make my investments on the more public side of the blockchain movement. That said, Monero would be my current pick in the privacy-centric digital coin space.RippleAs we wrote in Blockchain Technology: \u201cin the short-term, partial blockchain solutions [like Ripple] will become common. Already, financial institutions are creating their own private blockchain networks and producing digital coin. Participating institutions act as nodes in the blockchain, and have visibility into all transaction on the shared digital ledger.\u201dI like Ripple, and particularly the focus on getting customers. Like many others, however, I am concerned about the difference between the highly-valuable Ripple Payment Protocol and XRP as an investment vehicle. I also see in-house blockchain development from large institutions as meaningful competition.ThanksHopefully my perspective is helpful. If I helped you crystallize your own thinking, I\u2019d very much appreciate a small donation to my Ethereum wallet.Ethereum wallet: 0x81ff5029a05ce15c3b6d6e27c7d89a7c30ecaf32Or just clap a lot =)To trade, I buy Ethereum in CoinBase and then move these coins into Binance.Coinbase: https://www.coinbase.com/join/5a39ac52c9e83802d5f70a27Binance: https://www.binance.com/?ref=18572991Again, this is not investment advice. I re-adjust my portfolio constantly based on new information and could have a completely different set of investments tomorrow. One must be careful not to be affected by sunk cost or fear of missing out biases \u2014 and strive to act as objectively as possible. Good luck.", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/hackernoon/cardano-ethereum-and-neo-killer-or-overhyped-and-overpriced-8fcd5f8abcdf?source=search_post---------4", "post_date": "", "readtime": "", "upvotes": "", "content": "Cardano: Ethereum and NEO Killer or Overpriced?As the first blockchain with peer reviewed tech, Cardano is an ambitious platform. Can it stack up to NEO and Ethereum?Noam LevensonFollowDec 29, 2017 \u00b7 22 min readTOKEN: ADACardano has been on the tip of everyone\u2019s tongue since it\u2019s enormous run up earlier this month. Even in the volatile world of cryptocurrency, Cardano\u2019s 2000% increase over three weeks was extraordinary, and the community took notice. It now sits as the 6th largest cryptocurrency market cap at over $10 billion. Yet, before Cardano and its then $700 million market cap suddenly appeared on coinmarketcap.com, most had never heard of the project before. Its sudden appearance and enormous subsequent increase have left the blockchain community scratching their heads and scouring for information.So like with any new kid on the block, we want to understand what Cardano is, what separates it from other blockchain platforms, and whether it can play centerfield for our neighborhood team\u2026This article examines Cardano both as a standalone platform, as well as in comparison to Ethereum and NEO. For an analysis of NEO versus Ethereum, you should read this. I understand that EOS and other third generation platforms are also relevant; I will research and write about those later on. Since I have already extensively covered NEO, I will dedicate this article primarily to providing an in-depth analysis of Cardano. I will also compare each unique component to those of NEO and Ethereum. I will quote directly from my past article on some aspects. Let\u2019s begin\u2026What is Cardano?Cardano is the, no-crust on his sandwich, kid at school who uses words like \u201cpeer-reviewed\u201d and reads \u201cacademic journals.\u201d He occasionally gets shoved into his locker and has never been good at sports; but 10 years later he\u2019s driving around a Ferrari and you realized you never should have judged him in the first place.Cardano, put simply, is a blockchain platform that provides a programmable blockchain and smart contracts for dApp development. But the industry is ripe with strong competition: Ethereum has first mover advantage and a large user base, NEO focuses on a smart economy, ARK has smart bridges and blockchain interoperability; so what makes Cardano special and why can it be a competitive player in the field?Cardano\u2019s One Liner: Cardano is the industry\u2019s first platform that utilizes academically peer-reviewed open source code.Definitely don\u2019t want bugs in the code for this airplane\u2019s protocol\u2026Translation? It means that the Cardano project boasts a network of global researchers and scientists that have contributed to and developed an advanced blockchain protocol. All of Cardano\u2019s protocol technology goes through an extensive peer review process, similar to the process that airplane code might go through. Their conclusion is that code that supports a global economy should have the same rigorous scrutiny as code on which lives depend.Cardano is known as a 3rd generation blockchain. Bitcoin was the 1st generation. Ethereum was the 2nd. Ethereum led the pack, but because its technology was fundamentally new, the technology was rudimentary. Now, Ethereum must rely on its governance system to upgrade and scale. 3rd generation blockchains, like Cardano, have the advantage of hindsight. They can identify the drawbacks and constraints of previous projects and develop accordingly. This is precisely the path that Cardano took. The project emerged in 2014, not with a whitepaper, but rather with collective research and collaboration, focused on identifying the limitations of present blockchains. They then proceeded to code from the ground up, attempting to address each of those limitations. Each building block was submitted to conferences and experts for review before being added to the larger building.This peer reviewed process is incredibly important, especially considering that poor coding and development can lead to catastrophic results (think Parity and DAO hacks). How many developers are there in the world who can effectively code a blockchain project? How many developers can code quality projects in an entirely new industry, on entirely new technology? I think that number is certainly less than the 1380 cryptocurrencies posted on coinmarketcap.com. So much focus has been directed towards scam projects; I think a more important focus should be placed on legitimate projects that are just done poorly. Far more people will lose money in this industry to teams and developers who just weren\u2019t very good than to criminal money grabs. So the question must be asked: how do we know a project is good? How do we know the code is kosher? One way, as Ethereum has done and NEO is doing, is through the bumpy, trial and error road of adoption. Cardano\u2019s method of peer review is another.With this philosophy of methodical and peer reviewed development, Cardano is working towards addressing the problems of 2nd generation blockchains.More Than Just CardanoBefore we get into what limitations Cardano addresses and what makes the project unique, we should understand who is behind Cardano.The project is supported by three entities, all serving different purposes within the ecosystem.The Cardano FoundationCardano is supported by a nonprofit company, known as the Cardano Foundation. The foundation serves several purposes, both to Cardano and to the blockchain community as a whole. They work towards promoting Cardano to the greater community, educating about cryptocurrency, and working with governments around regulation. An organization like this is important for the adoption of a blockchain platform; the foundation provides a standard body that can facilitate cooperation and adoption with enterprises and businesses. The Enterprise Ethereum Alliance serves a similar purpose for Ethereum. OnChain, a partner of NEO, while not a nonprofit, also serves to connect public blockchains with governments and businesses. Since blockchain platforms such as NEO, Ethereum, and Cardano are decentralized, these organizations provide a centralized body for businesses to work with. Like the publishing agency for the platform.To note too, the Cardano Foundation hosts a variety of digestible resources about Cardano. From overviews of the project and the technology to blog updates detailing exactly how the team operates, their exact working schedule, and their release timeline. I have honestly never seen such transparency.Input Output Hong Kong (IOHK)IOHK is an engineering company that develops blockchain solutions for academic institutions, corporations, and governments. The company is led by Charles Hoskinson and Jeremy Wood, former CEO and Executive Assistant of Ethereum respectively. IOHK supports Cardano and boasts an extensive research team \u2014 17 accredited individuals. This team has been responsible for the development of Cardano\u2019s technology and digital wallet. IOHK also supports several other blockchain projects, including Ethereum Classic. For the tech minded, the website features all of their peer-reviewed papers.Also, I recommend you go to the website just to play around with the colorful interface.EmurgoEmurgo, a Japanese based company, both assists established businesses with integrating blockchain technology, as well as invests in startup ventures. Emurgo\u2019s connects businesses to the Cardano blockchain.This delegation of tasks between IOHK, the Cardano Foundation, and Emurgo is interesting. I am supportive of the concept. I can understand how dividing the development and engineering from the marketing and networking might allow for a more efficient system. Each organization serves a different purpose within the ecosystem.TLDR: Cardano is supported by three organizations. The Cardano Foundation supports the platform by promoting Cardano to the greater community, educating about cryptocurrency, and working with regulation. IOHK is the engineering and development organization behind the Cardano technology. Emurgo works towards integrating the platform with businesses.What Makes Cardano Special?As Calvin Harris says, \u201cthis is what you came for.\u201dA platform can have the flashiest website, the most robust development team, and the largest collection of \u201cpeer reviewed\u201d papers, but if it\u2019s not accomplishing something new \u2014 something revolutionary \u2014 then it will die. For in this space, competition is stiff, and everyone is competing against Ethereum, the king of dApps.Cardano is ambitious, but largely undeveloped. I will explore future features that Cardano will implement, but for now, it\u2019s most important to focus on the foundation. The features and protocols that form the basis for Cardano\u2019s future.Listed in the order I explore them, I believe the unique aspects of Cardano are: layered technology, proof of stake protocol, coding language, wallet, governance model, and treasury.Cardano technology is layered like this delicious cakeLayered TechnologyWith value transfers, there are two sets of information. There is the simple, from, to whom, when, and how much \u2014 this is the only information Bitcoin can support. However, as we are aware, in our real world, value transfers are never this simple. Associated with each transaction we can also ask: what are the terms and conditions of the transfer, why was the money transferred, and what were the involved entities? This is known as metadata.Ethereum, the 2nd generation blockchain, enabled the integration of all of this information. They call the connection between the actual value transfer and the associated metadata smart contracts. Programmable contracts. However, with Ethereum, because there is no separation between accounting and computing, this information is stored together, with no consideration given as to whether the metadata always needs to be included. This is problematic. The more data that is included with each transaction, the more gas it costs, the more difficult it is for the blockchain to store that information, and the more cumbersome it is for nodes to store the history of the blockchain.Thus, Cardano separates the transfer and the why. They accomplish this by separating the platform into two distinct layers:The Cardano Settlement Layer (CSL): This layer is responsible for the token economics and the balances of all user accounts. Cardano\u2019s native currency, ADA, is transacted over this layer. In layman terms, this just means that all code relating to accounts and the ADA token exist on this layer.The Cardano Control Layer (CCL): All the smart contract functions exist on this layer. In addition, regulatory elements like digital identity can be supported by this layer.The CCL is the control tower of CardanoThe CSL only maintains the actual transaction information \u2014 for example: 3 ADA from Wallet A to Wallet B. By including only the simplified transaction information, the CSL can be like a standardized transacting protocol. Most, if not all possible transactions, are preprogrammed. Flexibility and customizability, while useful, can create security holes. However, with simple transactions, Cardano can anticipate and fix those holes from the beginning.However, Cardano still will support smart contracts. These are controlled from the CCL. The CCL allows for all the advanced programmable features of smart contracts. The why of transactions. The conditions and terms.The advantage of separating this layer from the CSL is two fold. First, it allows for the protection of transaction privacy because transactions can be conducted without the additional metadata Ethereum or NEO requires. Second, it allows for more focused scaling updates \u2014 for example, the updates might only impact the computational layer without endangering user balances or the transactional ability of the network.The best way I understand this is that there are advantages to being a cryptocurrency and there are advantages to being a platform. Cryptocurrencies protocols are simple and efficient. Platform protocols are robust and flexible. Bitcoin and Litecoin are cryptocurrencies. Ethereum and Neo are platforms first and currencies second. Cardano is both. It is the best of both worlds.TLDR: Cardano splits its protocol into two layers. One layer is focused on transactions and accounts and the other layer is the computational layer for smart contracts. This allows for easier upgrades and enhanced flexibility.Proof of Stake ProtocolIf you don\u2019t understand Proof of Stake (PoS), I recommend you read the explanation in my NEO article. It highlights the differences between PoS and what Ethereum uses: Proof of Work (PoW). Essentially, PoW uses computing power to determine who confirms the blocks on the blockchain and divvies up rewards according to how much computing power you contribute. With PoS, blocks are confirmed according to who holds the most tokens.In PoW, if you operate 5% of the total computing power of the network, you can expect to get 5% of the block rewards. In PoS, if you own 5% of tokens, you can also expect to receive 5% of block rewards.You don\u2019t need all this equipment for PoSCardano, like NEO, uses a Proof of Stake protocol. It is called Ouroboros. It is said to be the only PoS protocol with mathematically proven security. Recognize that, as with all of Cardano\u2019s technology, Ouroboros has been extensively peer-reviewed. Ouroboros specifically was developed with the help of the University of Edinburgh, University of Connecticut, IOHK, and the Tokyo Institute of Technology.As with NEO and Ark, Cardano uses a variation of the PoS protocol similar to Delegated Proof of Stake (dPoS). For reference, NEO refers to this as dBFT (delegated Byzantine Fault Tolerance). dPoS permits stake holders to \u201cvote and elect\u201d representatives, known as consensus nodes, who do the block confirmations for them. The block rewards are given to the consensus nodes who then provide a payout to the token holders who voted for them.Delegated PoS is kind of like how we elect these guys to make the decisions for usWith Cardano, the system works slightly differently. Time is broken into what are called Epochs (each Epoch could be 20 minutes \u2014a totally arbitrary number). Within each Epoch, or 20 minute block, there are slots. Slots are just the to-be-mined blocks. A random algorithm selects one token holder for each slot to act as a consensus node. They are known as a slot leader. The slot leader then confirms the block and yields to the next randomly elected slot leader. All the block rewards are collected in a pool and are distributed to the slot leaders at the end of the epoch.Epochs act kind of like a shift schedule at your local Cold Stone Creamery. The schedule can be for any amount of time, just like with epochs \u2014 let\u2019s say this schedule is a week. Each shift is known as a slot. Only one person can be working each shift (or slot), but we need to have a worker for every shift. Each worker is randomly selected. With Cardano, the more tokens (ADA) you have, the more likely you are to be elected \u2014 like lottery tickets: the more you have, the better your odds. Users will also be able to pool their ADA together and share in the block rewards. Once that worker (slot leader) works their shift, the next person takes over. Epochs define slot leaders for each slot. Then, when that epoch ends, a new epoch comes online and defines all the slot leaders for that schedule. And so it goes.There is currently no staking on Cardano until the Shelley Update in Q2 of 2018. Much more information will become available then regarding exactly how the reward and staking system will work. As of now, the platform is entirely centralized as all the nodes are owned by Cardano. All network fees are collected and burned.With Cardano, extensive thought has gone into how to scale the platform. Ouroboros enables many advanced scaling options. Slot leaders can manage blocks on multiple chains. And multiple Epochs can be run simultaneously. Both of these enable a blockchain that can support scaling solutions like sidechains \u2014 multiple chains that all interoperate \u2014 and sharding \u2014 breaking the larger blockchain into manageable \u201cchunks.\u201d It is important to note that none of this has been implemented yet. It is currently being researched and will be implemented when the network needs it, estimated to be towards the end of 2018.Comparison to NEO and Ethereum: Ethereum still uses Proof of Work, which is a severe disadvantage. They are however transitioning over to a PoS system. NEO uses what is called dBFT. NEO\u2019s system allows NEO token holders to elect consensus nodes who reach consensus on the next block, not unlike Cardano. The NEO team is in the process of relinquishing control over these consensus nodes. Ethereum is working towards sharding, sidechains, and other scaling solutions. NEO\u2019s platform already has implemented more scaling solutions than Ethereum but is working towards sidechains and interoperability.TLDR: Cardano uses a Proof of Stake system called Ouroboros. The network randomly elects a node to confirm the next block and the rewards are allocated to that node. The more tokens you have the more likely you are to be elected. Token holders can also \u201cvote\u201d for nodes by contributing their tokens to them and increasing the likelihood that they are elected.Coding LanguageCardano is coded in a language called Haskell. A programmer could give you a much better sense of the full scope of this, but I understand that Haskell language is a more precise code that employs mathematical verification methods in order to limit human error and confirm the correctness of the code. Essentially, the code has a better process for verifying that it is being written correctly. This conceivably will help prevent bugs and errors, such as the one that opened the way for the DAO Hack of Ethereum or the Parity Wallet catastrophe.Cardano does plan to incorporate multiple languages into its smart contract platform in the future.Ethereum and NEO comparison: NEO allows coding in a variety of the most common coding languages, providing developers with more flexibility. Ethereum created their own language called Solidity which is optimized for Ethereum smart contracts.TLDR: Cardano uses Haskell, a much more dynamic coding language.The WalletCardano\u2019s dedicated wallet is called Daedalus. The wallet supports the network token: ADA. The wallet was developed by IOHK and is supported by an impressive team of nine developers. The wallet will be critical for when Ouroboros, the proof of stake protocol, is implemented. From the wallet, users will be able to \u201cstake\u201d their tokens and potentially be elected to confirm blocks. Or they will be able to vote for other token holders to increase their odds and share in the block rewards.I find Cardano\u2019s dedication towards their wallet encouraging. It demonstrates the team\u2019s commitment towards all the elements of the platform.Ethereum and NEO comparison: NEO has a community developed wallet, NEON, that allows NEO holders to claim GAS. Ethereum has a variety of supported wallets.TLDR: Cardano developed their own wallet, Daedalus, which supports the token: ADA.GovernanceGovernance models are crucial when evaluating the future prospects of a blockchain. Consider this quote by Fred Ehrsam from this brilliant article:\u201cThe most successful blockchains will be those that can best adapt to their environments. Assuming these systems need to evolve to survive, initial design is important, but over a long enough timeline, the mechanisms for change are most important. \u201cSo what are Cardano\u2019s mechanisms for change?Cardano wants to implement blockchain based governance. That means that decisions regarding the future of the blockchain can be voted on by token holders and enacted into protocol. They envision a library of sorts where upgrades and modifications can be proposed and then voted on by ADA holders. A certain percentage of votes would need to be obtained for the protocol to be implemented.In comparison, off-chain governance systems also do have some semblance of voting, except there isn\u2019t a uniformed voting method between all the parties. Miners vote by dedicating their computing resources (or stake in the case of PoS) to whichever blockchain fork (version) they support. Users vote through use \u2014 which chain they decide to use. Exchanges also have a vote in the form of which token they decide to support. But all of this voting occurs after the fork. Thus, on-chain governance creates a system where everyone is voting in the same format, and voting happens before implementation. To understand forks better, read the explanation in this article.As an example, look at all the Bitcoin forks. With the governance method today, forks commonly occur, but no one supports the new Bitcoin (not including Bitcoin Cash which has been widely successful) and the new token dies. With an on-chain governance system, changes can be put up to a vote; if enough people support the change, it is implemented. They don\u2019t need to fork to gauge community interest.However, there are both pros and cons to this system.Pros: this system will likely help prevent hard forks. Creating a format for discussion and voting encourages smooth network updates without the headache of violent debates and contentious forks. It effectively democratizes the process and allows for equal voting rights according to token stake. This system also decentralizes the governance. Instead of just a handful of developers taking responsibility for proposals and updates, the whole community can participate.Cons: on-chain voting also has drawbacks. Any implemented feature becomes much harder to remove should there be an issue. Governance set in code is unchangeable. We are also trusting the community to make knowledgable decisions regarding protocol changes. Systems must be in place to prevent activities like trolling. Even just plain apathy would be harmful to this system.None of this governance system is currently in place; it\u2019s all still being developed. The details of the protocol and how it will address the above concerns remain to be seen.Comparison to Ethereum and NEO: Both Ethereum and NEO use off-chain governance models. With Ethereum, updates are proposed, reviewed, and then the network forks. Miners, users, and exchanges must decide which chain to use. Ethereum\u2019s community typically agrees on updates and thus, it is generally a smooth process. However, look at Ethereum and Ethereum Classic for an example of times when a fork did not go smoothly. NEO is more centralized than Ethereum; thus, updates and protocol changes can be quickly implemented by the team. This is inline with NEO\u2019s smart economy vision.TLDR: Cardano wants to implement on-chain governance where token holders can vote on community proposed updates to the blockchain. These updates are then encoded into the blockchain.TreasuryA portion of every block reward (25%) is placed into a treasury. This treasury is decentralized and can only be accessed through the voting mechanism described above. Imagine that the Cardano community wants to run a development competition. The details are proposed to the community and ADA holders vote and approve the competition. With the treasury, the community can then vote on how to fund the competition. With a consensus vote, funds from the treasury can support projects and upgrades to the network. Perhaps researchers would one day like to receive grants to study elements of Cardano and propose improvements. The treasury system could enable this.All this helps solve the issue of how should blockchains fund themselves after their supporting companies are gone? What will Ethereum do when Vitalik leaves and the Ethereum Foundation is dissolved? What will become of NEO when the NEO Council is no more? While these platforms will continue to be self sufficient, they won\u2019t necessarily have a way of funding new ecosystem developments. This is Cardano\u2019s solution.Again, recognize that this model has not yet been implemented.Comparison to Ethereum and NEO: NEO and Ethereum do not have on-chain funding mechanisms.TLDR: Cardano will have a treasury system, funded through 25% of block rewards. ADA token holders can vote on how to spend that money.TeamAs previously mentioned, the Cardano project is supported by three organizations. However, I think IOHK is the most relevant entity to the project, as they are conducting the actual development. Charles Hoskinson and Jeremy Wood head IOHK. Charles first co-founded Invictus Innovations which established Bitshares. He then moved to Ethereum as the enacting CEO. He has been the CEO of IOHK for almost three years.Jeremy also worked for Ethereum as the Executive Assistant. He has been the CSO of IOHK for nearly three years as well.Beyond these two, Cardano features small, interdisciplinary teams of academics and developers that work on individual projects. The development to-do list is tracked and new tasks are constantly given to teams as they finish projects. Teams work in two week intervals, releasing small, incremental updates to the main projects. Cardano focuses on time based releases instead of feature based releases. By not releasing huge updates, they avoid the issue of needing to coordinate the release of all the new features.I\u2019m impressed with the transparency and the professionalism of the team. Progress updates are constantly provided and I appreciate how the system utilizes a network of developers to work quickly and efficiently.Ethereum and NEO Comparison: All three projects feature powerful teams headed by intelligent thought leaders. It\u2019s hard to not give the advantage to Ethereum and Vitalik Buterin, the Michael Jordan of blockchain thinkers.Roadmap and Current ProgressCardano\u2019s only working protocol right now is their SL Mainnet. This was launched on September 29th. SL is the Settlement Layer enabling ADA. Essentially, this means that Cardano is only a cryptocurrency; it will need to release other features to realize its promise of being a platform.Q2 of 2018 will be the next big release for Cardano. This release, titled Shelley, will enable many new features. These include: 1. The release of their proof of stake protocol \u2014 Ouroboros.2. Added incentives for running full nodes3. A wallet upgrade. This upgrade will include advanced security, multi-signatures (multiple passwords for the wallet), quantum resistant addresses, and checkpoints \u2014 a process for speeding up the sync time for the blockchain.4. The release of their on-chain voting system.After this, releases will include their smart contract platform, treasury system, and advanced scaling methods.Cardano is designing its protocol with regulation and compliance in mind. They want to create an ecosystem that supports digital identity and can work with enterprises and governments within an existing economy. Much of their future developments will focus on this principal.TLDR: So far, Cardano has only released their Settlement Layer and thus, can only act as a cryptocurrency. Future developments are in store for smart contracts and other platform innovations.Additional Relevant Information:Cardano is modeling Ouroboros and other protocol features with Psi Calculus, a formal modeling language that is machine understandable. This allows them to test their protocols before they are actually implemented.As stated in the roadmap section, Cardano plans to implement quantum safe signatures, making their blockchain theoretically safe from quantum computers. NEO has this feature implemented while Ethereum does not.Cardano\u2019s thought process regarding every decision has been documented on their website. I have never seen such transparency from a project before.Cardano\u2019s token sale was audited. You can read the report here.The network has a booming social media following. Three associated twitter pages have 72k combined followers and their Reddit has 24k followers.Red Flags and ConcernsAs with any project, it\u2019s critical that we are aware of all aspects of the project; the good and the bad.1. Still In DevelopmentCardano is still far from production ready. With the release of its SL mainnet, and native token, ADA, it is further along than some other 3rd generation blockchains such as EOS. However, we are likely still over 6 months away from just the implementation of their PoS protocol. There isn\u2019t even a release date for their smart contract platform \u2014 their CL and virtual machine. Until then, no dApps can be developed and no ICOs conducted. Ethereum already supports over 800 dApps. NEO is rapidly supporting more applications. While it\u2019s true that Cardano improves significantly on many aspects of Ethereum, Ethereum does have plans to implement scaling solutions that would close that gap. Even if Cardano is fully operational within a year, a year in the blockchain industry is an eternity in the normal world. It\u2019s possible that after a year, Ethereum will have such a chokehold on the dApp market and will be making significant progress towards its scaling solutions, that there is no place for Cardano. Right now, Cardano is a cryptocurrency; but Cardano\u2019s current $10.5 billion valuation is based on far more than it being a simple cryptocurrency.2. Governance and TreasuryCardano relies on a complicated governance system. The features of the system must be carefully crafted to align incentives and ensure that bad actors and trolls can\u2019t manipulate the system and wreak havoc. What if a group of proactive users is able to gain enough power and utilize the treasury for their own gain? While I do expect that the Cardano team will approach these questions carefully and methodically, it is still a factor to consider.ConclusionThe takeaway from this article should be such: Cardano is a 3rd generation platform that is building methodically, with peer reviewed technology, in order to address many of the scaling, privacy, and technological issues of today\u2019s 2nd generation blockchains, like Ethereum. Cardano has an advanced proof of stake protocol, a unique governance and treasury system, and a layered foundation that enables Cardano to act as both a cryptocurrency and a blockchain platform. It has a strong support network, a robust development team, and large community interest. The breadth of its roadmap is phenomenal and I am confident that Cardano can deliver on its promises.Even with all these benefits, it\u2019s difficult to effectively value Cardano and other 3rd generation platforms. Undoubtably, Cardano is doing a lot right. However, network effects play a significant role in platform valuations. Network effects refer to how the value of technology frequently depends upon how many people will use it. Thus, for Cardano to be successful, it must have users. Cardano is at least a year away from having a platform that can support users \u2014 outside of just sending and receiving ADA. Compare this to Ethereum and NEO, both of which have had large success in their respective markets. Ethereum controls the dApp development market today while NEO is making strides in being the platform in the East and enabling a smart economy. I don\u2019t see Cardano replacing either of these platforms; it won\u2019t replace NEO because their objectives and intended markets are different, and it won\u2019t replace Ethereum because I think Ethereum will succeed with many of its scaling solutions, closing the technological gap between it and Cardano.Regardless, I do think that the blockchain ecosystem can support more than one platform. Cardano\u2019s many strengths assure me that it is well situated to provide a strong alternative to Ethereum, perhaps as a platform with more flexibility and more security. For now, all we can do is wait; wait to see if Cardano stays true to its roadmap; wait to see if industries and enterprises take notice; wait and see if Cardano can be a powerhouse amongst blockchain platforms.You can buy ADA from Binance if you\u2019re interested: https://www.binance.com/?ref=10928176 (Referral Link)Disclaimer: This is not paid content; I have received no compensation for this article. I am invested into both Ethereum and NEO. I am not invested in Cardano. This is not investment advice, merely my opinion on the platforms. Do your own research.FOLLOW me on Twitter: @noamlevenson\u2014 Donations and support are greatly appreciated \u2014ADA: DdzFFzCqrhsgvW4HuMYhSmusCjkSfH1Bxv7vC5Pft7WAyeCW8L4so4THGiLYHWBht37UuJTFWnkQVcgBiic8fQd8sB7pH1dCcn9TCmN8NEO: AGpjyU9FY1H58tGdhhBxgTxaosxh5uUmvpETH: 0x4c35100a0a25b3933ba1c0469b5df8b24035775bHold down the clap button if you liked the content! It helps me gain exposure .Clap 50 times!I love getting questions or suggestions, so comment away!", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/loom-network/ethereum-will-be-the-backbone-of-the-new-internet-88718e08124f?source=search_post---------5", "post_date": "", "readtime": "", "upvotes": "", "content": "Ethereum Will Be the Backbone of the New InternetLoom Network is building our Layer 2 on top of Ethereum, instead of other blockchain platforms \u2014 and here\u2019s why.James Martin DuffyFollowJun 4, 2018 \u00b7 14 min readEach month, another company publishes a whitepaper, claiming to have solved the scalability problems faced by Ethereum.These new blockchains claim to be better, faster, and smarter than Ethereum \u2014 they say they can handle thousands, even millions of transactions per second (TPS), have no transaction fees, and have near-instant confirmation times.Yet at Loom Network, when we set out to build a platform for bringing large-scale decentralized mobile games and social networks to the mainstream, Ethereum was by far the most obvious choice to build on top of.In this article, I\u2019ll explain the reasons why we think Ethereum has already won the race to become the foundation of Web 3.0, and will become the fundamental base layer that all major DApp platforms will choose to build on top of in the future.Let\u2019s start with the most obvious.1. Ethereum has an order of magnitude more developers building on it than any other platform \u2014 and this gap is widening by the dayOur Ethereum code school CryptoZombies.io has now had over 207,623+ users since we launched it last November \u2014 and this number has been growing consistently by over 30,000+ users per month, with no signs of slowing down.Truffle (a development framework for Etheruem) has had almost 550,000 downloads, growing at over 45,000+ users per month since January.Simply put, the number of developers building on top of Ethereum is not only growing \u2014 it\u2019s accelerating.The number of developers using Ethereum\u2019s Truffle Suite each month is not only growing \u2014 it\u2019s accelerating.That means if another blockchain platform wants to beat Ethereum in terms of developer adoption, it\u2019s not enough for it to catch up to where Ethereum is now \u2014 it has to exceed Ethereum\u2019s growth rate moving forward.Why is developer adoption important?At the end of the day, it doesn\u2019t matter how many transactions per second your blockchain can handle if no one is actually using it.And in order to have applications worth using, you need to attract enough developers to build them.If you don\u2019t have developers building applications on your blockchain, you\u2019re effectively building a ghost town.I\u2019m not sure what caused Steve Ballmer to go nuts on stage at this conference and create this classic moment in meme history, but I\u2019m including him here to emphasize my point: Developer adoption is everything.The blockchain platform that has the most developers building real-world applications on top of it will be the platform that gains the widest mainstream adoption. And not only does Ethereum have a massive head start in this area, but the gap is widening with each day that passes.And why is Ethereum attracting the most developers?2. Ethereum has better tools and infrastructure for DApp development than any other platformTruffle. Infura. Web3.js. OpenZeppelin. Geth. Ganache. MetaMask. CryptoZombies. MyCrypto. Etherscan. ERC20 and ERC721.These are tools (among many others) that different developer teams have tirelessly poured hundreds of thousands of hours into \u2014 and they\u2019re free to use for any Ethereum developer who wants to build a DApp on Ethereum.And this developer ecosystem is only growing as time goes on. Our team and at least a dozen others are in the process of building even more tools and infrastructure around Ethereum DApp development that will make Ethereum developers\u2019 lives even easier in the future.It\u2019s Metcalfe\u2019s law applied to developer infrastructure. The more developers building useful stuff, the easier (and more enjoyable) it becomes for new developers to build, and the effect compounds on itself.If you\u2019re a developer and you wanted to build a blockchain platform that replaces Ethereum, you would need to build equivalent versions of all of these tools on top of your own platform in order to compete with Ethereum\u2019s ease-of-use for developers.Or you could, you know\u2026 just build on top of Ethereum, and take advantage of all these things out of the box \ud83e\udd14But let\u2019s go one level deeper.Let\u2019s talk about WHY developers would want to spend their time building these tools.And here\u2019s where we go really deep down the rabbit hole, and see where Ethereum really shines.Still with me? I haven\u2019t even gotten to the core of my argument \u2014 we\u2019re just getting started.3. Ethereum does not sacrifice decentralizationWhen it comes to Blockchains, there\u2019s a fundamental law called The Scalability Trilemma. It\u2019s kind of like a law of physics that says a blockchain can only have 2 of these 3 properties: decentralization, scalability, and security.What that means is, given the same level of security, if you want to increase a blockchain\u2019s scalability, you must sacrifice its decentralization.Why is this true?Due to the nature of blockchains, every single validator needs to run every single computation that occurs on the network to ensure its accuracy.So if you want the network to be sufficiently decentralized by having thousands of users running validators, the max number of transactions per second needs to be capped by what the average user\u2019s PC and network speed can handle.On the other hand, if you wanted to have the fastest, most scalable blockchain EVER, you should do the following:Require that all validators be supercomputersHave as few validators as possible on the network, to decrease the number of connections per nodePut all the validators in the same geographical area (country, data center) to decrease latency between nodesCan you see why that would be a really bad idea for a blockchain?And yet every project I\u2019ve seen that boasts a very high number of transactions per second is quietly making this decentralization tradeoff \u2014 most of them are just not transparent about it to their users / investors.Why decentralization mattersThere\u2019s an excellent pair of blog posts from Chris Dixon and Spencer Bogart with the same title, \u201cWhy Decentralization Matters\u201d \u2014 both highly recommended reads.In his article, Chris Dixon makes a simple argument: Developers are a lot more incentivized to build on a platform that they know is NOT going to change the rules on them later down the line, taking away their audience and profits.If you build your application on Facebook or Apple\u2019s App Store, you have to trust that these platforms aren\u2019t going to ban you in the future, block certain users from using your app or seeing your updates, or start charging you higher fees to keep accessing the same audience.Ethereum, on the other hand, is what we call permissionless.Ethereum can be used by anyone for any purpose, without needing permission from anyone.NO ONE can stop you from uploading a piece of code into the Ethereum blockchain, and NO ONE can stop your users from executing it.Let that sink in for a minute, because it\u2019s extremely powerful.For the first time in history, we have a platform that that no one can shut down and no one can censor \u2014 not governments, not mega-corporations with tons of money, not the Rothschilds or Bogdanoffs or Reptilians or whatever conspiracy theory you subscribe to.If you build a DApp on Ethereum, no one can stop your users from anonymously accessing it.If you buy some tokens or digital items that are stored on the network, you are GUARANTEED they will stay there forever and no one will be able to take them away from you.And it\u2019s these permissionless and censorship-resistant properties of decentralized blockchains that have enabled us to have, for the first time in Internet history, true ownership of digital items.Yeah, I\u2019m talkin\u2019 about Ready Player One. With true ownership of digital items that cannot be taken away from you, blockchains enable us to do crazy new things in online games and virtual realities \u2014 like having virtual avatars that aren\u2019t owned by any company and can persist between worlds.More centralized platforms don\u2019t have this guaranteePretty much every platform that\u2019s been touted as the \u201cEthereum Killer\u201d has simply decided to trade off decentralization in favor of higher scalability, and advertise it as if it\u2019s a feature.And this tradeoff is tempting to make, because it seems like it\u2019s what the market wants.Users who don\u2019t know better complain about high fees and slow transaction times \u2014 so we can\u2019t really blame developers for trying to give the market what it thinks it wants.In Spencer Bogart\u2019s Why Decentralization Matters, he says:It\u2019s not surprising that new users and developers have gravitated toward these newer networks: Improved throughput and functionality are things that users and developers can immediately appreciate, whereas the benefits of \u201cdecentralization\u201d as a feature are seemingly amorphous.In the short term, users may be tempted by the performance offered by more scalable blockchains, not realizing the importance of decentralization until a wake-up call brings everything crashing down.He continues:The reality, however, is that without decentralization these crypto networks lose their most important qualities of being \u201cpermissionless\u201d and \u201ccensorship-resistant\u201d \u2014 that is, that anyone can use the network and anyone can build on top of them.After all, the entire point of a decentralized blockchain is to provide a hard-promise \u2014 an immutable ledger with open, non-discriminatory participation. In a sense, we bear the inefficiency of decentralization because it is the only way to enable a network with these qualities.Other blockchains that achieve 1,000 TPS or higher do so by having a small, fixed number of nodes that validate all the transactions \u2014 21 in the case of EOS, 101 in the case of Lisk.But a network run by 21 nodes requires that you trust these 21 publicly-identifiable nodes to not make changes to the protocol, or restrict certain people from using it for certain purposes in the future.It\u2019s a lot harder for a malicious entity to influence thousands of anonymous Ethereum nodes to censor certain transactions than it would be for them to gain influence over 15 out of 21 publicly-known block producers. Or for these 15 block producers to form a cartel and change the rules in ways that profit them, like what happens on centralized platforms. Or for a government or corporation to put pressure on these entities to censor certain transactions or users.As Spencer puts it:These semi-decentralized platforms are subject to the same social and economic pressures that motivate centralized platforms to censor certain users and activities, and therefore will trend toward the same outcome they\u2019re supposed to correct.If developers can\u2019t trust 100% that the base layer will always remain permissionless and censorship-resistant, then there\u2019s very little incentive for them to start building on the platform vs. simply using a traditional web server.By sacrificing base-layer decentralization in the nearsighted goal of attracting users by increasing throughput, these platforms have ironically undermined the entire motivation for using a blockchain in the first place.And on top of that, increasing throughput on Layer 1 isn\u2019t even a scalable approach.It will get you some initial gains, but it\u2019s fundamentally bottlenecked by the nature of blockchains and not the way to achieve true scalability.Which brings me to my next point\u20264. It will be impossible to run all the world\u2019s decentralized applications on a single blockchain: Scaling has to occur on Layer 2It would be absurd to try to run the Internet\u2019s 100 most popular games and social apps all on one giant supercomputer.Likewise, it\u2019s absurd to assume all the world\u2019s decentralized applications in the foreseeable future will run on one blockchain.Facebook alone needs hundreds of thousands of servers to function. Yet some people think a decentralized Facebook would share one massive blockchain with every other DApp in existence? \ud83e\udd14Let\u2019s look at some quick numbers.Facebook experiences 30,000+ Likes / Comments per second, the Nasdaq sees 20,000+ trades per second, and MMO games like PlayerUnknown\u2019s Battlegrounds handle over 1M concurrent users updating game state.It would only take a few dozen apps and games of this size before you\u2019re exceeding one million TPS in aggregate.And then what do you do when the number of users doubles?Clearly trying to run every single DApp on the same chain is not a practical approach.It doesn\u2019t matter if a blockchain can do a thousand transactions per second or a million transactions per second \u2014 no single blockchain will be fast enough to handle all the world\u2019s decentralized applications on the same chain.Scaling has to occur on Layer 2The solution is obvious \u2014 these applications will need to be split up across multiple blockchains.We realized this early on at Loom, when we presented the idea of application-specific sidechains. We foresaw that eventually some decentralized applications would grow popular enough to reach even 1/10th of Facebook\u2019s scale, and the only possible way to run them would be on their own dedicated chains.Of course, if you put these DApps that require thousands of transactions per second on their own standalone blockchains, they would be vulnerable to the same issues we discussed above in \u201cWhy Decentralization Matters.\u201dBut if you put them on a sidechain to a blockchain that is sufficiently decentralized (like Ethereum) \u2014 you get the best of both worlds.Sidechains provide higher scalability without sacrificing securityA sidechain can use a different consensus algorithm (like DPoS) optimized for DApps that require very high TPS or low-latency, while storing any tokens or data requiring a high level of security on the main chain.This way, even though the sidechain is less decentralized than the main chain, the amount of trust required by users is minimized, since they have the option to move anything of real value to the main chain for safe keeping. (Even more so if you secure the Layer 2 assets with Plasma Cash).By putting your DApp on a sidechain to a decentralized mainnet, you get all the benefits of higher scalability offered by a faster blockchain, while maintaining the same trust and security guarantees provided by the decentralized base layer.Spencer, in his article, arrives at the same conclusion we came to:The path forward: Highly decentralized base layer with increased centralization (and efficiency) on higher layersAnd in fact, this seems to be the same model envisioned by Vitalik Buterin himself:You could run StarCraft on the blockchain. Those kinds of things are possible. High level of security and scalability allows all these various other things to be built on top. Ethereum is a secure base layer that doesn\u2019t have too many features.~Vitalik ButerinEthereum provides a secure base layer for Layer 2 solutions to build on top ofNow we understand that:Scaling needs to happen on Layer 2The most important property of a Layer 1 is decentralizationSo the real question is, if not Ethereum, what base layer would you build your Layer 2 on top of?We\u2019ve already seen that very few chains do decentralization as well as Ethereum does.According to a recent ConsenSys report, there are \u201cjust under 17,000 nodes running the Ethereum blockchain across six continents, making it the most decentralized blockchain platform in existence.\u201dAnd any additional features another blockchain might offer, such as higher throughput, gas-less transactions, low-latency transactions, etc., can simply be implemented as Layer 2 services on Ethereum.In fact, those features are exactly what we\u2019re building at Loom Network with ZombieChain \u2014 a Layer 2, gas-free, low-latency DPoS sidechain to Ethereum.And that\u2019s just one of many Layer 2 scaling solutions under development.It\u2019s hard to fathom why a developer would want to replace Ethereum instead of simply building on top of it \ud83e\udd14Ignoring the obvious motivation that doing so allows them raise hundreds of millions of dollars in an ICO\u2026 \ud83d\ude09\u201cIt\u2019s like Ethereum\u2026 but BETTER.\u201dIt\u2019s kind of like reinventing the wheel.Sure, you might be able to build a slightly better base layer that still provides sufficient decentralization AND throws in some additional features.But then you\u2019d somehow need to convince all the developers to jump ship to use an untested platform \u2014 and in the meantime, Ethereum developers could take whatever good ideas you had, and implement them on a Layer 2 chain on top of Ethereum.It\u2019s also extremely risky.If a Layer 2 platform gets hacked or exploited, users\u2019 loss is minimized because the majority of tokens and data of value is still safely stored on the Layer 1 (Ethereum).But if you build a new Layer 1 blockchain that stores tokens that users pay real money for, the odds that your code will be exploit-free out the gate are slim \u2014 and in the case of an exploit, your users potentially have billions of dollars at stake.In programming circles, there\u2019s a rule that states \u201cDon\u2019t roll your own crypto.\u201dI\u2019m going to go ahead and predict that after we see the first major blockchain exploit in which millions or billions of dollars in token value evaporate into thin air, we\u2019ll start to hear a similar refrain among blockchain engineers:Don\u2019t roll your own Layer 1.Which brings me to my final point\u20265. New platforms are unproven, while Ethereum\u2018s security has already stood the test of timeAt the time of this writing, there\u2019s $61 billion in circulating ETH.That\u2019s a LOT of financial incentive for someone to try to hack / exploit the network.Thousands of aspiring h4x0rs over the past 3 years, trying and failing to find an exploit in EthereumAnd yet to this day, almost 3 years after Ethereum\u2019s mainnet launch, no one has managed to find an exploit in the platform\u2019s security.Note: Exploits have been found in individual smart contracts that developers have deployed to Ethereum, but I\u2019m talking about the core platform itself.The more time that passes without an exploit being found (despite a lot of people trying), the higher the likelihood that the platform is secure and won\u2019t ever be exploited in the future.This is similar to what Nassim Taleb called The Lindy Effect:The Lindy effect is a concept that the future life expectancy of some non-perishable things like a technology or an idea is proportional to their current age, so that every additional period of survival implies a longer remaining life expectancy.Basically, when a new blockchain platform springs up, developers will be reluctant to use it because it hasn\u2019t stood the test of time.What if it\u2019s exploitable? What if it\u2019s not truly decentralized? Why should I invest all my time building my DApp on top of it when I\u2019m not sure if it\u2019ll be around two years from now?The longer the chain survives without suffering a major exploit, the more trustworthy and legitimate it becomes in developers\u2019 eyes.Yet again, Ethereum has a massive head start here.For a new blockchain platform that launches today, it will take a few years before it has survived long enough for developers to view it as trustworthy.But in that same time, Ethereum will continue to race ahead in terms of developer adoption and supporting infrastructure. (Not to mention real, live DApps and end-users).Because Ethereum has such a long head start on all other smart contract platforms, it will always appear to be a better option from a security standpoint compared to a younger blockchain.Especially when, as we mentioned before, any new feature a new smart contract platform adds that might tempt developers away can simply be built on Layer 2 \u2014 and still keep the security promises of Ethereum.Conclusion: Ethereum isn\u2019t perfect \u2014 but at this point, it\u2019s hard to imagine it being displaced as the de facto Layer 1 for decentralized applicationsJavaScript isn\u2019t a perfect programming language, and for the longest time it was plagued with some pretty serious problems. But that didn\u2019t stop it from becoming the de facto programming language of Web 2.0.I predict we\u2019ve already reached the tipping point where we\u2019ll see the same thing happen with Ethereum for Web 3.0.For all its flaws and short-comings, it also has some of the smartest minds in the industry working on solving them \u2014 and building tools and infrastructure to make them less of a hindrance.And thus we come full circle to my developers argument. (Go ahead, you can watch that Steve Ballmer clip again. I won\u2019t tell anyone. \ud83d\ude09)It\u2019s possible that, in the future, another project will spring up that offers some significant advantages over Ethereum, and manage to get all the Ethereum developers to jump ship\u2026But I wouldn\u2019t bet my ERC20s on it.Loom Network is the blockchain platform of choice for serious dapp developers \u2014 the Universal Layer 2 that provides developers the tools they need to build functional user-facing dapps today.New to Loom? Start here.Want to stake your LOOM tokens and help secure Loom Network? Find out how.And if you enjoyed this article and want to stay in the loop, go ahead and sign up for our private mailing list.", "responses": ""}, {"title": "", "author_name": "", "link": "https://blog.coinbase.com/ethereum-classic-etc-is-currently-being-51-attacked-33be13ce32de?source=search_post---------6", "post_date": "", "readtime": "", "upvotes": "", "content": "Deep Chain Reorganization Detected on Ethereum Classic (ETC)Mark NesbittFollowJan 7 \u00b7 7 min readOn 1/5/2019, Coinbase detected a deep chain reorganization of the Ethereum Classic blockchain. In order to protect customer funds, we immediately paused interactions with the ETC blockchain.Updated Jan. 7, 2019\u201310:27pm PT: At time of writing, we have identified a total of 15 reorganizations, 12 of which contained double spends, totaling 219,500 ETC (~$1.1M). No Coinbase accounts have been impacted by the attack.Updated March 11, 2019\u201311:20am PT: We have now re-enabled sends and receives of ETC. Please note that transactions may take 24 hours, or longer, to be processed by the network due to the large number of confirmations required. Current ETC network status can be found here.Background InfoPage 3 of Satoshi Nakamoto\u2019s whitepaper, Bitcoin: A Peer-to-Peer Electronic Cash System, states the following:\u201cIf a majority of CPU power is controlled by honest nodes, the honest chain will grow the fastest and outpace any competing chains.\u201dThe \u201chonest[y]\u201d of more than half of miners is a core requirement for the security of Bitcoin and any proof-of-work cryptocurrencies based on Bitcoin. Honest action, in this context, means following the behavior described in the Bitcoin white paper. This is sometimes described as a \u201csecurity risk\u201d or \u201cattack vector,\u201d but is more accurately described as a known limitation to the proof-of-work model.Failure to meet this requirement breaks several core guarantees of the Bitcoin protocol, including the irreversibility of transactions. Many other cryptocurrencies, such as Ethereum Classic, have also adopted proof-of-work mining.The function of mining is to add transactions to the universal, shared transaction history, known as the blockchain. This is done by producing blocks, which are bundles of transactions, and defining the canonical history of transactions as the longest chain of blocks*. If a single miner has more resources than the entirety of the rest of the network, this miner could pick an arbitrary previous block from which to extend an alternative block history, eventually outpacing the block history produced by the rest of the network and defining a new canonical transaction history.This is called a \u201cchain reorganization,\u201d or \u201creorg\u201d for short. All reorgs have a \u201cdepth,\u201d which is the number of blocks that were replaced, and a \u201clength,\u201d which is the number of new blocks that did the replacing.This, on its own, might end up being nothing more than a minor inconvenience. After all, the transactions all still exist, but they might have been put into a different order, perhaps delaying some of them. However, imagine a miner who also owns a large number of coins. The miner could send those coins to a merchant in a transaction, T, while also secretly extending an alternative block history. The miner\u2019s secret blocks do not include T, but rather include a transaction that sends the same coins used in T to a different address. Call that transaction T\u2019. When the miner reveals this secret history, it will contain T\u2019, not T. Because T and T\u2019 attempted to send the same coins and T\u2019 is now in the canonical history, this means that T is forever invalid, and the recipient of the coins sent in transaction T never even received them in the new, now-canonical history. More info on this can be found here.What we observedUpdated Jan. 7, 10:27pm PT.We observed repeated deep reorganizations of the Ethereum Classic blockchain, most of which contained double spends. The total value of the double spends that we have observed thus far is 219,500 ETC (~$1.1M).Timeline of eventsLate on the evening of Saturday 1/5, our systems alerted us to a deep reorg in ETC that contained a double spend. Our on-call engineers responded to the alert and worked to confirm the report through the night. We determined that we would temporarily halt send/receive interaction with the ETC blockchain in order to safeguard customer funds.This meant that customers who tried to send or receive ETC on Coinbase Consumer or Pro were unable to complete their transactions.Customers who tried to send or receive ETC on Coinbase Consumer or Pro were unable to complete their transactions starting early Sunday morning, Pacific Time.On the morning of Sunday 1/6 we posted an update on status.coinbase.com stating (that) \u201cDue to unstable network conditions on the Ethereum Classic network, we have temporarily disabled all sends and receives for ETC. Buy and sell is not impacted. All other systems are operating normally.\u201dIn addition to in-platform notifications, we shared an update via status.coinbase.com.We performed an analysis on Sunday afternoon/evening to confirm the pattern and determine the key details of the double-spend attacks. Beginning Sunday afternoon, we observed 8 more incidents, all containing double spends.Out of an abundance of caution, we did not put up a blog post prior to legal and technical review. A false alarm could have inadvertently caused market instability.On Monday 1/7 morning after legal and technical review, we finalized our public analysis and posted to our blog and social media accounts.Note: A full blockchain analysis is beyond the scope of this article. Further research into the addresses sending the double spend transactions, the history of sends/receives from the addresses, the block fields such as timestamp, and the subsequent movement of miner rewards from attack blocks may shed light on the threat actor or actors behind these attacks.We observed the following deep chain reorgs:Common ancestor: 7245623. Depth 4 / Length 7. No double spends were observed in this reorg. We noted that this was a reorg of unusual depth for ETC.Common ancestor: 7248488. Depth 5 / Length 6. No double spends were observed in this reorg. We noted that a second reorg of unusual depth was highly suspicious, but did not necessary indicate an attack as there was no double spend and the depth was still below the ETC confirmation limit for most services.Common ancestor: 7249343. Depth 57 / Length 74. A transaction of value 600 ETC in orphaned block 7249357 was double spent by a transaction in attacker block 7249361**.We ceased interacting with the ETC blockchain upon observing this reorg. Coinbase was not the target of this double spend and no funds were lost.Common ancestor: 7254419. Depth 32 / Length 53. A transaction of value 4,000 ETC in orphaned block 7254430 was double spent by a transaction in attacker block 7254435**Common ancestor: 7254568. Depth 123 / Length 140. A transaction of value 5,000 ETC in orphaned block 7254646 was double spent by a transaction in attacker block 7254656**Common ancestor: 7255033. Depth 60 / Length 79. A transaction of value 9,000 ETC in orphaned block 7255055 was double spent by a transaction in attacker block 7255066*Common ancestor: 7255204. Depth 25 / Length 35. A transaction of value 9,000 ETC in orphaned block 7255212 was double spent by a transaction in attacker block 7255225**.Common ancestor: 7255476. Depth 37 / Length 46. A transaction of value 15,700 ETC in orphaned block 7255487 was double spent by a transaction in attacker block 7255492**.Common ancestor: 7255542. Depth 67 / Length 85. A transaction of value 15,700 ETC in orphaned block 7255554 was double spent by a transaction in attacker block 7255563**.Common ancestor: 7255662. Depth 62 / Length 110. A transaction of value 24,500 ETC in orphaned block 7255669 was double spent by a transaction in attacker block 7255681**.Common ancestor: 7255998. Depth 69 / Length 86. A transaction of value 5,000 ETC in orphaned block 7256012 was double spent by a transaction in attacker block 7256022**.Updates as of 10:27pm PT, January 7Common ancestor: 7261497. Depth 44 / Length 54. A transaction of value 26,000 ETC in orphaned block 7261492 was double spent by a transaction in attacker block 7261497**.Common ancestor: 7261603. Depth 35 / Length 44. A transaction of value 52,800 ETC in orphaned block 7261610 was double spent by a transaction in attacker block 7261614**.Common ancestor: 7261647. Depth 8 / Length 9. No double spends were observed in this reorg.Common ancestor: 7261676. Depth 37 / Length 47. A transaction of value 52,200 ETC in orphaned block 7261684 was double spent by a transaction in attacker block 7261690**.Next StepsThe Coinbase team is currently evaluating the safety of re-enabling sends and receives of Ethereum Classic and will communicate to our customers what to expect regarding support for ETC. Coinbase takes security very seriously. As part of that commitment, we monitor blockchains for activity that could be harmful to our customers and take prompt action to safeguard funds. We want to emphasize to customers that Coinbase strives to be the most trusted and safest place to buy, sell, or store cryptocurrency.* It is actually the chain with the most accumulated work, rather than the chain with the most blocks, that defines the canonical history. In most cases, these chains will be the same** The block explorer does not properly handle reorgs and labels the transaction as confirmed. Click on the block to see that the block is orphaned.This website may contain links to third-party websites or other content for information purposes only (\u201cThird-Party Sites\u201d). The Third-Party Sites are not under the control of Coinbase, Inc., and its affiliates (\u201cCoinbase\u201d), and Coinbase is not responsible for the content of any Third-Party Site, including without limitation any link contained in a Third-Party Site, or any changes or updates to a Third-Party Site. Coinbase is not responsible for webcasting or any other form of transmission received from any Third-Party Site. Coinbase is providing these links to you only as a convenience, and the inclusion of any link does not imply endorsement, approval or recommendation by Coinbase of the site or any association with its operators.Unless otherwise noted, all images provided herein are by Coinbase.", "responses": ""}, {"title": "", "author_name": "", "link": "https://blog.coinbase.com/a-beginners-guide-to-ethereum-46dd486ceecf?source=search_post---------7", "post_date": "", "readtime": "", "upvotes": "", "content": "A beginner\u2019s guide to EthereumLinda XieFollowFeb 23, 2017 \u00b7 5 min readWhat is Ethereum?According to the Ethereum website, \u201cEthereum is a decentralized platform that runs smart contracts.\u201d This is an accurate summary but in my experience when first explaining Ethereum to friends, family, and strangers it helps to compare Ethereum to Bitcoin since a lot of people have at least heard about Bitcoin before. This beginner\u2019s guide should help those who are new to Ethereum to understand the high level differences between the two.ComparisonSimply put, Bitcoin can be described as digital money. Bitcoin has been around for eight years and is used to transfer money from one person to another. It is commonly used as a store of value and has been a critical way for the public to understand the concept of a decentralized digital currency.Ethereum is different than Bitcoin in that it allows for smart contracts which can be described as highly programmable digital money. Imagine automatically sending money from one person to another but only when a certain set of conditions are met. For example an individual wants to purchase a home from another person. Traditionally there are multiple third parties involved in the exchange including lawyers and escrow agents which makes the process unnecessarily slow and expensive. With Ethereum, a piece of code could automatically transfer the home ownership to the buyer and the funds to the seller after a deal is agreed upon without needing a third party to execute on their behalf.The potential for this is incredible! Think of the numerous applications that act as a third party to connect you with others based on some set logic (e.g. Uber, Airbnb, eBay). Many of the centralized systems we use today could be built in a decentralized manner on Ethereum. With Ethereum you can make these transactions trustless which opens up an entire world of decentralized applications. Decentralization is important because it eliminates single points of failure or control. This makes internal collusion and external attacks impractical. Decentralized platforms cut out the middlemen which ultimately leads to lower costs for the user. There are a few decentralized applications I am particularly excited about.IdentityThere are many websites a person can create a digital identity on (e.g. Facebook, Twitter, LinkedIn). This is cumbersome to manage and at the end of the day you are not in full control of your information as it is still owned by a centralized entity. With Ethereum you can have a decentralized identity management system like uPort that allows you to be in full control of your data. There is no centralized server that has access to your private data, can get hacked, edit your information, or get shut down.Right now in the US we have credit bureaus (e.g. Experian, TransUnion, Equifax) that other institutions like banks rely on to tell them your credit. Credit bureaus can put certain groups such as international and young people at a disadvantage. Lending Club, a peer to peer lending platform, addresses the problem of traditional financial services relying solely on FICO scores by offering additional data points like home ownership, income, and length of employment. Ethereum applications like uPort can go one step further by allowing you to control your own data, identity, and reputation.Computing Power / StorageConsider all of the spare computing power and storage a regular person might have on their computer. If it is not being used, then why not make it available to someone else? It is a similar concept to renting out a spare bedroom on Airbnb. An added benefit to using a decentralized application is that there are no centralized servers that are prone to censorship.There are several projects in development to allow people to rent spare computing power and storage from those that have it. Filecoin allows people to rent out their computer storage to others and get paid for it. Similarly, Golem allows people to rent out their computing power. Ideas like these are not completely new. Since 2000, Folding@home has allowed volunteers to contribute spare computing power for scientific research at Stanford University. Now this concept can be monetized and applied to other industries, potentially lowering costs.Social MediaAkasha is a decentralized social media platform. There are no centralized servers so no single party has complete control over the content. This means that the platform is resistant to censorship. An added benefit of building a decentralized application for social media on Ethereum is that one can create a system that financially rewards high quality content. This is like Reddit but you can send small amounts of money to the poster instead of upvotes.Rights ManagementDecentralized applications may be used to bring transparency to multiple industries. For example SingularDTV offers an entertainment rights management platform which allows transparent distribution of funds to the creators, investors, crew, actors, and others involved in a project. There is no centralized party which can prevent a certain group from getting access to their funds because the terms are enforced by code. Everyone will get paid according to the terms discussed up front and no third party is needed to mediate.Managing CompaniesA time consuming and often expensive aspect of starting a new company is allocating and managing shares. As companies grow and raise more funds they eventually need to issue and move shares around. Aragon is an example of a promising project that has an easy to use interface for managing the company\u2019s cap table and raising capital.Raising CapitalLastly, one of the major use cases for Ethereum is decentralized fundraising from a global network of investors. Crowdsales lower the barrier to entry for developers working on high risk projects. Since Ethereum launched in July 2015 we have seen unprecedented amounts of funds raised for decentralized applications through crowdsales. Ethereum itself was funded through a crowdsale that raised $18 million in bitcoin and a project called The DAO raised $160 million. Some other notable crowdsales are shown below:Amount raised at time of crowdsale (not implied valuation)For more information about how these tokens work, refer to How to Raise Money on a Blockchain with a Token, Blockchain Token Securities Law Framework, and The difference between App Coins and Protocol Tokens.ResourcesThis post only covered a handful of Ethereum\u2019s countless use cases. The space is constantly growing and innovating. Below are some links that may help you understand Ethereum further and keep up with the exciting news.Understanding EthereumEthereum is the Forefront of Digital CurrencyApp Coins and the Dawn of the Decentralized Business ModelEthereum whitepaperBits on Block Gentle Introduction SeriesProof of Stake FAQKeeping up with EthereumEthereum SubredditWeek in Ethereum NewsThe ControlSmith + CrownThe Dapp DailySilicon Valley Ethereum Meetup (check out your local meetup)Thank you to Will Warren, Fred Ehrsam, and many Coinbase employees especially Jordan Clifford, Reuben Bramanathan, Ankur Nandwani, Dan Romero, and Jeremy Henrickson.", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/@ethereumlimited/ethereum-limited-private-sale-procedure-9401b7188841?source=search_post---------8", "post_date": "", "readtime": "", "upvotes": "", "content": "Ethereum Limited Private SaleEthereum Limited Private Sale ProcedureEthereum LimitedFollowJul 15, 2018 \u00b7 1 min readEthereum Limited will conduct its Private Sale today, July 15, 2018 at 15:00 GMT.We allocated only 8% of the maximum supply or 800,000 tokens at $0.40 each for the Private Sale.A minimum of $200 purchase is required with no maximum purchase amount unlike in the ICO which is going to be limited.4 Easy Steps to Buy ETHL in the Private Sale1. Log in to your ETHL account. Register here https://goo.gl/ymw9t2. 2. Deposit at least $200 worth of BTC or ETH. 3. The option to get whitelisted will appear after the deposit is confirmed. 4. Purchase your ETHL tokens.Whitelist option will appear once minimum deposit amount is met.For more information about Ethereum Limited, check out our social media accounts below.Website https://goo.gl/ymw9t2Whitepaper https://goo.gl/TTZDmkFacebook https://www.facebook.com/ethereumlimited/Twitterhttps://twitter.com/EthereumLimitedInstagramhttps://www.instagram.com/ethereumlimited/Reddithttps://www.reddit.com/user/ethereumlimitedLinkedInhttps://www.linkedin.com/in/ethereumlimitedMedium https://www.medium.com/@ethereumlimitedTelegram Chat https://www.t.me/EthereumLimitedTelegram Channel https://www.t.me/EthereumLimitedChannelANN https://bitcointalk.org/index.php?topic=4521586Unofficial ANN https://bitcointalk.org/index.php?topic=4576117Bounty Program https://bitcointalk.org/index.php?topic=4539121", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/hackernoon/the-ethereum-blockchain-size-has-exceeded-1tb-and-yes-its-an-issue-2b650b5f4f62?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "The Ethereum-blockchain size has exceeded 1TB, and yes, it\u2019s an issue(TL;DR: It has nothing to do with storage space limits)StopAndDecryptFollowMay 23, 2018 \u00b7 21 min readIntroductionThis is an indirect response to the following article by Afri Schoedon, a developer for the Parity Ethereum client, written less than a year ago:The Ethereum-blockchain size will not exceed 1TB anytime soon.Once a month users post a chart on `r/ethereum` predicting the blockchain size of Ethereum will soon exceed 1 TB. I\u2026dev.toI want to make it clear that I have respect for almost all of the developers in this space, and this is not intended to attack anyone. It\u2019s meant to elaborate on what the real concerns are and explain how the original article does nothing to address those real concerns. I would actually love to see something that does, because then we can throw it into Bitcoin. That being said, there are some developers who mislead, obscure, ignore, and attack via protocol confusion like what occurred with 2X and the replay protection drama, but most aren\u2019t like that. You can\u2019t watch something like this or read something like this and hate these developers. They\u2019re genuinely trying to fight the same fight as us, and I believe Afri is part of the latter group, not the former.https://github.com/paritytech/parity/issues/6372If you\u2019ve read my other articles you\u2019re going to see some small bits of that information repeated. Up until now I wrote primarily about Bitcoin from a \u201cmaximalist\u201d perspective (still am) and focused on conflicts within that community. What you may find interesting if you only watch from the corner of your eye, is that the reason for \u201cconflict\u201d here is exactly the same. I\u2019ll even use Proof-of-Stake as further leverage for my argument without criticizing it.Edit: It seems like people are not reading the subtitle and misunderstanding something. This is not about archival nodes. This is about fully validating nodes. I don\u2019t care if you prune the history or skip the line to catch-up with everyone else. This is about about staying in sync, after the fact. Light nodes aren\u2019t nodes.This has become a 2-part article. When you\u2019re done with this article you can read the follow-up one:Sharding centralizes Ethereum by selling you Scaling-In disguised as Scaling-OutThe differences between Light-Clients & Fully-Validating Nodesmedium.comIndexMy Argument: Ethereum\u2019s runaway data directory size is just the tip.My Prediction: It will all work, until it doesn\u2019t.My Suggestion: Transpose.My Argument: Larger blocks centralize validators.It\u2019s that simple. It\u2019s the central argument in the entire cryptocurrency community in regards to scaling. Not many people familiar with blockchain protocol actually deny this. The following is an excerpt from what I consider to be a very well put together explanation of various \u201cLayer 2\u201d scaling options. (Of which, the only working one is already implemented on Bitcoin.)https://medium.com/l4-media/making-sense-of-ethereums-layer-2-scaling-solutions-state-channels-plasma-and-truebit-22cb40dcc2f4That article is written by Josh Stark. He gets it. His company even announced a project that\u2019s meant to mirror the Lightning Network on Ethereum. (Which is oddly coincidental given Elizabeth Stark\u2019s company is helping build Lightning.)The problem? Putting everything about Proof of Stake completely to the side, the incentive structure of the base layer is completely broken because there is no cap on Ethereum\u2019s blocksize, and even if one was put in place it would have to be reasonable, and then these Dapps wouldn\u2019t even work because they\u2019re barely working now with no cap. It doesn\u2019t even matter what that cap is set at for this argument to hold because right now there is none in place.Let\u2019s backtrack a bit. I\u2019m going to briefly define a blockchain and upset people.Here is what a blockchain provides:An immutable & decentralized ledger.That\u2019s it.Here is what a blockchain needs to keep those properties:A decentralized network with the following prerogatives:Distribute my ledger \u2014 ValidateAppend my ledger \u2014 WorkIncentivise my needs \u2014 TokenHere is what kills a blockchain:Any feature built into the blockchain that detracts from the network\u2019s goals.A blockchain is just a tool for a network. It\u2019s actually a very specific tool that can only be used by a very specific kind of network. So much so that they require each other to exist and fall apart when they don\u2019t co-operate, given enough time. You can build on top of this network, but quite frankly anything else built into the base layer (L1) that negatively affects the network\u2019s ability to do its job is going to bring the entire network to its knees\u2026given enough time.Here\u2019s an example of an L1 feature that doesn\u2019t effect the network: Multisig.It does require the node to do a bit of extra work, but it\u2019s \u201cmarginal\u201d. The important thing to note is hardware is not the bottleneck for these (properly designed) networks, network latency is. Something as simple as paying to a multi-signature address won\u2019t tax the network any more than paying to a normal address does because you\u2019re paying on a per-byte basis for every transaction. It\u2019s a blockchain feature that doesn\u2019t harm the network\u2019s ability to continue doing its job because the data being sent over the network is (1)paid for per-byte, and (2)regulated via the blocksize cap. Regulated, not \u201cartificially capped\u201d. The blocksize doesn\u2019t restrict transaction flow, it regulates the amount of broadcast-to-all data being sent over the network. Herein lies the problem.When we talk about the \u201cdata directory\u201d size, it\u2019s a direct reference to the size of the entire chain of blocks from the original genesis block, but taking this at face value results in the standard responses:Disk space is cheap, also see Moore\u2019s Law.You can prune the blockchain if you need to anyway.You don\u2019t need to validate everything from the genesis block, the last X amount of blocks is enough to trust the state of the network.What these completely ignore is the data per-second a node must process.You can read my entire article about Moore\u2019s Law if you want, but I\u2019ll excerpt the important part below. Over in Oz they try and argue \u201cyou don\u2019t need to run a node, only miners should decide what code is run\u201d. It\u2019s borderline absurd, but I won\u2019t have to worry about that here because Proof of Stake completely removes miners and puts everything on the nodes. (They always were, but now there aren\u2019t miners to divert the argument.)Moore\u2019s Law is a measure of integrated circuit growth rates, which averages to 60% annually. It\u2019s not a measure of the average available bandwidth (which is more important).Bandwidth growth rates are slower. Check out Nielsen\u2019s Law. Starting with a 1:1 ratio (no bottleneck between hardware and bandwidth), at 50% growth annually, 10 years of compound growth result\u2019s in a ~1:2 ratio. This means bandwidth scales twice as slow in 10 years, 4 times slower in 20 years, 8 times in 40 years, and so on\u2026 (It actually compounds much worse than this, but I\u2019m keeping it simple and it still looks really bad.)Network latency scales slower than bandwidth. This means that as the average bandwidth speeds increase among nodes on the network, block & data propagation speeds do not scale at the same rate.Larger blocks demand better data propagation (latency) to counter node centralization.Strictly from an Ethereum perspective with a future network of just nodes after the switch to Proof of Stake, you\u2019d generally want to ensure node centralization is not an issue. The bottleneck for Bitcoin\u2019s network is its blocksize (as it should be), because it ensures the growth rate of network demands never exceed the growth rate of external (and in some cases indeterminable) limitations like computational performance or network performance. Because of Ethereum\u2019s exponentially growing blocksize, the bottleneck is not regulated below these external factors and as such results in a shrinking and more centralized network due to network demands that increasingly exceed the average users hardware and bandwidth.Bitcoin SPV clients aren\u2019t nodes. They don\u2019t propagate blocks or transactions around the network, they leech, and all that they leech are the block headers.Remember this because it\u2019s going to get very important later in this article:You can put invalid transactions into a block and still create a valid block header.If the network is controlled by 10 FULL-nodes, you only need half of them to ignore/approve invalid transactions so long as the header is valid.This is why validating the transactions matter from a network perspective, and why you need a large decentralized network. It doesn\u2019t matter from my grandmas perspective and that\u2019s fine, but we aren\u2019t talking about my grandma. We\u2019re talking about ensuring the network of working and actively participating nodes grows, not shrinks.This node was participating until it got cut off due to network demand growth:https://www.reddit.com/r/ethereum/comments/58ectw/geth_super_fast/d908tik/It\u2019s not uncommon and it continues to happen:https://github.com/ethereum/go-ethereum/issues/14647Notice how the solution is to \u201cfind a good peer\u201d or \u201cupgrade your hardware\u201d? Good peers shouldn\u2019t be the bottleneck. Hardware shouldn\u2019t be either. When all of your peers are hosed up by so many others leeching from them (because the good peers are the ones doing the real work), you create a network of masters and slaves that gradually trend towards only one master and all slaves. (If you don\u2019t agree with that statement you need to make a case for how this trend won\u2019t subside in the future because currently that\u2019s the direction this is going towards and it won\u2019t stop unless a cap is put in place. If your answer is sharding, I address that fairy dust at the end.) It\u2019s the definition of centralizing. Unregulated blocks centralize networks. Large (but capped) blocks are only marginally better, but set a precedent for an ever increasing block size, which is equally as bad because it sets a precedent of increasing the size \u201cin times of need\u201d, which mirrors the results of unregulated blocksizes. This is why we won\u2019t budge on the Bitcoin blocksize.I tweeted about it a few times but clearly I didn\u2019t think that was enough. My Twitter reach doesn\u2019t really extend much into the Ethereum space.That chart is symbolic and not representative of any actual numbers. It only serves to visually express the point I\u2019m trying to make. To clarify, the green curve represents an aggregated average of the various demands of the Ethereum Network. At some point your node will fall out of sync because of this or a blocksize cap will be put in place. It could happen now, or it could happen in 10 years, or in 50 but your node will fall out of sync at some point at this rate. It will never happen in Bitcoin. You can deny it now all you want, but this article will be here for when it happens, and when it does asinine Dapps like CryptoKitties, Shrimp Farm, Pepe Farm, and whatever comes next will cease to function. This is exactly what happened to Ryan Charles\u2019 service Yours.org that he originally built on Bitcoin. The only difference being Bitcoin already had the cap in place and Ryan either didn\u2019t foresee this from a lack of understanding, or for some reason he expected the blocksize to keep getting raised. Instead of reassessing he doubled down on BCash, meanwhile Yalls.org took his concept and implemented the same exact thing on top of Bitcoin\u2019s Lightning Network.My Prediction: Ethereum will implement a blocksize cap and it will race BCash to both of their deaths.http://bc.daniel.net.nz/ \u2190No longer updating statistics, chart is edited & extrapolated using REAL current data.https://ethereum.stackexchange.com/questions/143/what-are-the-ethereum-disk-space-needsThe chart above isn\u2019t even a prediction. This is me filling in the blanks (in yellow) on what was the last remaining graph that compared both chains data directories, and then extrapolating from it. Here\u2019s what we know:Bitcoin\u2019s future is predictable. The blockchain growth & network demands will always be linear. (Ideal)The amount of data an Ethereum node is required to process per second is through the roof and climbing. (Unideal)If Ethereum on-chain demand freezes where it is now, blockchain growth will continue the linear trend highlighted by that dotted line. (Very bad)If Ethereum on-chain demand continues to grow exponentially the amount of people complaining about their node going out of sync will reach a tipping point. (There\u2019s only one option when this occurs.)That graph above? The owner stopped trying to maintain the node. Physical demands are an issue as well, like time constraints in your personal life. Servicing requirements need to be low, not high, not reasonable\u2026low.Do you know what I do to service my Bitcoin/Lightning node? I leave my laptop on. That\u2019s it. If I have to reboot I shut down the services, reboot, and start them back up again. Day to day I use my laptop for an assortment of other tasks, none of which inhibit its ability to run the node software. With all due respect if a change was implemented and forced on me that resulted in my node no longer being compatible with the network and unable to maintain a sync, I would flip out over the idiocy that allowed that, if I was a misinformed individual. Fortunately I\u2019m not and I signed up for a blockchain with foresight (Bitcoin).The problem? I don\u2019t think most of the people running Ethereum nodes are informed enough to know what they signed up for. I don\u2019t think they understand the fundamental incentive models, and I don\u2019t think they fully realize where and why they break down with something as simple as not having a blocksize cap. Hopefully this article will succeed at teaching that.So what happens when that psychological tipping point is reached? Do people give up? How many nodes have to be lost for this to occur? The explorer websites aren\u2019t even tracking this data anymore. Etherscan.io is no longer tracking full or fast sync directories, Etherchain.org says: Error: Not FoundEtherscan also isn\u2019t letting you zoom out on the memory pool, the queue of transactions waiting to be included into blocks. The reason fees go up is because this queue builds up. You should be able to see this over time. Here\u2019s one that tracks Bitcoin\u2019s mempool, side by side with the Etherscan.io one:https://jochen-hoenicke.de/queue/#1,4d /// https://etherscan.io/chart/pendingtxBoth of these charts are monitoring the rough total pending transaction counts on these networks, and the scales are about the same, 4/5 days respectively. The difference? I can zoom out on the Bitcoin one and see the entire history. Why does this matter? Psychology matters when your network has no regulated upper boundaries. Here what ours looks like zoomed out:See what I mean? See how scale matters? What if I zoomed out on Ethereum\u2019s mempool and saw that it was at the top of an ever growing mountain? I\u2019m not saying that\u2019s where it is today, but I am saying that this information needs to stop being obscured. I\u2019m also saying that if/when it ever is unobscured, it\u2019ll be too late and nothing can be done about it anyway. It\u2019s already too late now.Let\u2019s take a look at block and transaction delay on Bitcoin\u2019s network. Below you\u2019ll see two charts. The 1st one is how long it takes for a block to spread across the network, the 2nd is for a transaction. Transactions are processed by the nodes (all 115,000 of them) and held onto until a valid block is created by a miner and announced to the network.Block propagation times have dropped drastically because of very well designed improvements to the software. Transactions are validated when they come in and kept in the mempool. When a new block is received, it\u2019s quickly cross referenced with all the transactions you already have stored, and very rarely includes many transactions you haven\u2019t received yet. This allows your node to validate that block extremely fast and send it out to all your other peers.Transaction times on the other hand have slowly gone up but seem to be stabilizing. They\u2019ve been \u201cintentionally\u201d allowed to go up as a result of privacy improvements in the software, but that\u2019s a worthy tradeoff because blocks are 10 minutes apart on average anyway, so a delay of 16 seconds is acceptable. I\u2019d imagine that once blocks are consistently full this growth will level off because transaction fees from the blocksize cap will self-regulate the incoming flow of transactions, assuming no other protocol changes are made.Keep in mind, none of this information is available for Ethereum:https://dsn.tm.kit.edu/bitcoin/Bitcoin is designed with this in mind. The transaction count queue goes up but the blocks are regulated. People end up learning how to use this tool we call a blockchain the right way over time and transaction flow stabilizes. With an unregulated tool you end up with a bunch of people chaotically trying to use that tool all at once for some random \u201cfeature\u201d like CryptoKitties that ends up grinding the entire thing to a halt until the backlog is processed. All of the Ethereum full-nodes need to process every single one of these contracts. You might not need to, and they might tell you that you don\u2019t need to, but someone does need to. So how many of them are there? What do higher fees do? They deter stupid Dapps like CryptoKitties at the base layer. There is absolutely zero need for them, and larger more \u201cfunctional ideas\u201d will only experience the same thing but much worse because blockchains don\u2019t scale.These Dapps are crippling your blockchain because it\u2019s unregulated:But that was the promise though, right? That was the dream. That was the entire premise of the Ethereum blockchain: Bitcoin, but better. It\u2019s not.Clearly unregulated blocks don\u2019t result in infinite transactions, but the real takeaway here is the network can\u2019t even physically handle the current amount, there just aren\u2019t enough nodes capable of processing that information and relaying it in a timely fashion. Do you know how many Ethereum nodes there are? Do you really know? The Bitcoin network has about 115,000 nodes, of which about 12,000 are listening-nodes. Almost all of them are participating nodes, because that\u2019s regulated too. What a listening-node is, compared to a non-listening, doesn\u2019t matter here because they are all participating in sending and receiving blocks to and from the peers they are connected to. The default is 8, the client won\u2019t even let you get more than 8 unless you add them manually. This was intentionally put in place, and it\u2019s recommended you don\u2019t add more because it\u2019s unhealthy for the network:https://bitcoin.stackexchange.com/a/8140Remember this from earlier?Find a good peer.That\u2019s not how you fix things. This is a prime example of why a chain that allows participants the freedom to be selfish via lack of regulation is bad. This only has one outcome: Master & Slave nodes, where the limited masters serve all the slave nodes. Sounds decentralized, right? Especially when the financial requirements to be one of those master nodes keeps going up\u2026To be fair, and as an aside: This is the exact criticism the Lightning Network gets, but it\u2019s a completely different type of network. Blockchain networks are peer-to-peer broadcast networks. State-Channel networks like Lightning are peer-to-peer anycast networks. The way information is being sent is completely different. Your refrigerator has enough hardware to be a Lightning node. Lightning \u201cHub & Spoke\u201dcriticisms are with channel balance volumes. Hub & Spoke is equivalent to the Master & Slave issues, but with channel balances there is no bottleneck on the data. You just standardize the Lightning clients to open X amount of channels with X amount funds in each, then network forms around that standard, completely avoiding hubs or spokes, just like the Bitcoin clients standardize 8 peers. The Lightning Network is new so we don\u2019t know what that standard should be yet because we have almost zero data we can measure. /endlightningdefenseSpeaking of zero data we can measure, why are these the only charts for Ethereum node counts? Where\u2019s the history? How many of these nodes used fast/warp sync and never fully validated it all? You don\u2019t need to store it all because you can prune, but again, how many are fully validated? How many are just light clients syncing only the block headers?https://www.ethernodes.org/network/1It\u2019s funny how propaganda sites like Trustnodes pushing BCash conspiracies publish pieces like the following one with bold-faced lies, then it gets circulated around and no one outside the flow of correct information questions it:I\u2019m not linking to a BCash propaganda site.There are 115,000 Bitcoin nodes and they all fully validate:http://luke.dashjr.org/programs/bitcoin/files/charts/software.htmlSo what do you do now? What do you do as an individual who slowly comes to this realization? What do you do as an individual who has no idea what\u2019s going on? What happens to a network that is primarily made up of these individuals that slowly leave (not literally, but as a participating node downgrading to a light-node)? How many participating nodes are left? How many nodes hold a full copy of the original genesis block? What happens when 5 data centers are serving the entire network of slaves (light-nodes) the chain? Who\u2019s validating those transactions when everyone is only syncing the block headers? You can sit there and repeat time and time again that \u201cthe network only needs the recent state history to be secure\u201d all you want, but when your network is broken from the bottom up and most nodes can\u2019t even keep up with the last 1,000 blocks, how is that secure in any way?The takeaway from all of this:Ethereum\u2019s blocksize growth is bad because of node processing requirements, not how much they need to store on a hard-drive.To prevent complete collapse of the network, Ethereum will need to implement a reasonable blocksize cap.Implementing a blocksize cap will raise fees and in return prevent many Dapps from functioning, or severely slow down. Future Dapps won\u2019t work.If Dapps don\u2019t work, Ethereum\u2019s entire proposition for existing is moot.Where does BCash fit in?BCash just increased their blocksize from 8MB to 32MB, and is adding new OP_CODES soon to allow \u201cfeatures\u201d like ICOs and BCash Birdies\u2122.BCash has \u201croom to grow\u201d coming from a completely understressed blockchain, while Ethereum is a completely overstressed blockchain.https://txhighway.cashEthereum is dying and BCash is trying to be exactly like it while ignoring all the warning signs we\u2019ve been trying to bring to everyones attention. They wanted bigger blocks and ICOs, they got it now. Both chains will become the same thing: Centrally controlled blockchains that will slowly die, but given temporary life support via gradual blocksize increases to continue supporting fraudulent utility tokens, until the entire system breaks down when no one can run a node.My Suggestion: Stop using centralized blockchains.This section has been extensively expanded on in the follow-up article. The diagrams have been completely redone. Reading that is a must after this.The only one in that room that runs a fully validating node is the one that\u2019s simultaneously holding up the painting, and the Ethereum network. I\u2019ve managed to make no mention of Vitalik this whole article so I can focus on the technicalities, but if this picture (or the original) doesn\u2019t represent the essence of the Ethereum space then I don\u2019t know what does. I applaud Vitalik for calling out scammers like Fake Satoshi, yet at the same time he equally misrepresents the functionality claims of Ethereum.Oh, and that golden goose egg you call sharding? It\u2019s hocus pocus. Fairy dust. It\u2019s the same node centralization issue with a veil thrown in front of it. It\u2019s effectively force feeding you the Master & Slave network I just warned you about, under the disguise of \u201cnew scaling tech\u201d.Forgetting Vitalik\u2019s diagram he put out because it\u2019s meaningless, let\u2019s try to simplify Ethereum\u2019s current network first. The diagram below essentially shows all the light-clients in pink and the \u201cgood\u201d full-nodes in purple. Your fast/warp sync node may be purple now until it can\u2019t or you give up on upgrading/maintaining and just use the light client feature, then it joins the pink group.As time moves forward, the pink nodes increase while the purple decrease. This is inevitable because it\u2019s what everyone is already doing. Do you run a full-node or a light client? Do you run anything at all? Switching to using the light client is consistently recommended \u201cif syncing fails\u201d. That\u2019s not a fix.Don\u2019t worry though, Vitalik is here to save the day. He\u2019s turning \u201cnodes\u201d into SPV clients that only sync the block headers:But what does that mean? Well, fortunately I wasted a lot of time writing and drawing this up too so I can explain it visually, but first let\u2019s start with words:In Bitcoin you either fully validate, or you don\u2019t. You\u2019re either:A Full-Node and do everything. You fully validate all transactions/blocks.An SPV Client that does nothing, is just tethered to a full-node, syncs just the block headers, and shares nothing. They are not part of the network. They shouldn\u2019t even be mentioned here but I\u2019m doing it to avoid confusion.Again, there are 115,000 Bitcoin full-nodes that do everything.https://twitter.com/StopAndDecrypt/status/1002666662590631942You can either read about this in more depth in Part 2, or you can take a look at the standalone article below:Bitcoin Miners Beware: Invalid Blocks Need Not ApplyBitcoin is an impenetrable fortress of validation.hackernoon.comIn Ethereum there are:Full-Nodes that do everything. They fully validate all transactions/blocks.Nodes that try to do everything but can\u2019t sync up because of peer issues so they skip the line and use warp/fast sync, and then \u201cfully\u201d-validate new transactions/blocks.Light-\u201cnodes\u201d that are permanently syncing just the block headers, and I guess they are sharing the headers with other similar nodes, so let\u2019s call these \u201cSPV Nodes\u201d. They don\u2019t exist in Bitcoin, again SPV clients in Bitcoin don\u2019t propagate information around, they aren\u2019t nodes.That Ethereum node count? Guarantee you those are mostly Light-Nodes doing absolutely zero validation work (checking headers isn\u2019t validation). Don\u2019t agree with that? Prove me wrong. Show me data. They are effectively operating a secondary network of just sharing the block headers, but fraudulently being included in the network node count. They don\u2019t benefit the main network at all and just leech.In New-Ethereum (2.0) with Sharding, things change a bit. I\u2019ve went ahead and edited out this section because I wrote an entire second article on it that does a much better job at explaining this, and the differences between Bitcoin and old and new Ethereum (2.0):Sharding centralizes Ethereum by selling you Scaling-In disguised as Scaling-OutThe differences between Light-Clients & Fully-Validating Nodeshackernoon.comThis isn\u2019t scaling. When your node can\u2019t stay in sync it downgrades to a light client. Now with sharding it can downgrade to a \u201cshard node\u201d . None of this matters. You\u2019re still losing a full-node every time one downgrades. What\u2019s even worse is they are calling all the pink dots nodes even though they are only syncing the headers and trusting the purple nodes to validate.How would you even know how many fully validating nodes there are in this set up? You can\u2019t even tell now because the only sites tracking it count the light clients in the total. How would you ever know that the full-nodes centralized to let\u2019s say, 10 datacenters? You\u2019ll never know. You. Will. Never. Know.On the other hand, Bitcoin is built from the ground up to prevent this:https://twitter.com/_Kevin_Pham/status/999152930698625024So what are you going to do?What should you do?Are you a developer? Take everything you\u2019ve learned and start developing applications on top of a good blockchain. One that isn\u2019t broken.Are you a merchant? Start focusing on readying your services to support payment networks. Ones that are built on top of a good blockchain.Are you an investor? Take everything you\u2019ve invested and start investing in a good blockchain. One that isn\u2019t going to die in the coming years.Are you a gambler? Buy EOS. It\u2019s newer, just as shitty for all the same reasons I mentioned above, just no one knows it yet.Are you an idealist? This is definitely not the chain for you. Find one that is.https://twitter.com/StopAndDecrypt/status/992766974022340608Part 2Sharding centralizes Ethereum by selling you Scaling-In disguised as Scaling-OutThe differences between Light-Clients & Fully-Validating Nodesmedium.comIf you\u2019re interested in running a Bitcoin node that will never go out of sync or demand that you update your hardware, check out this tutorial I put together:A complete beginners guide to installing a Bitcoin Full Node on Linux (2018 Edition)How to compile a Bitcoin Full Node on a fresh installation of Kubuntu 18.04 without any Linux experience whatsoever.hackernoon.com\ud83c\udd42\ud83c\udd43\ud83c\udd3e\ud83c\udd3f (@StopAndDecrypt) | TwitterThe latest Tweets from \ud83c\udd42\ud83c\udd43\ud83c\udd3e\ud83c\udd3f (@StopAndDecrypt). Fullstack Social Engineer: 10% FUD, 20% memes, 15% concentrated\u2026twitter.com", "responses": ""}, {"title": "", "author_name": "", "link": "https://blog.enjincoin.io/announcing-enjinx-ad-free-user-friendly-ethereum-blockchain-explorer-3d679ba034c8?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "Announcing EnjinX: Ad-Free, User-Friendly Ethereum Blockchain ExplorerEnjinX is a modern, fast, responsive web app for exploring Ethereum, ERC-20 tokens & blockchain data. Bitcoin, ERC-1155, ERC-721, Litecoin & Dogecoin support will come in 2019, making EnjinX the first universal blockchain explorer\u2014ever.Ilija Rolovi\u0107FollowDec 27, 2018 \u00b7 8 min readAfter more than a year of development, we are overjoyed to announce EnjinX \u2014 an Ethereum explorer designed with a pivotal mission in mind: to speed up mainstream adoption of blockchain technology by making its data easily accessible to everyone.We created it to support Ethereum\u2019s mission to together build a more globally accessible, more free, and more trustworthy Internet.Built to advance the growing Ethereum ecosystem, EnjinX is ultra-modern, minimal, usable, fast, and ad-free \u2014 making the understanding and use of Ethereum as simple, streamlined, and enjoyable as possible.Check out EnjinX on Product Hunt \u2014 and join the Launch Giveaway.Say Farewell to Endless AdsYou don\u2019t need an ad-blocker for EnjinX \u2014 it\u2019s completely ad-free.You can now explore the Ethereum blockchain and all ERC-20 tokens without being interrupted by ICO promotions, dangerous scams, and endless annoying ads.Other explorers are plagued by millions of unwanted ad impressions, and we felt having an alternative choice that is kind, considerate, and places users first is of paramount importance for the advancement of the Ethereum ecosystem as a whole.EnjinX was created to facilitate decentralization of blockchain search services and offer a better way to explore Ethereum \u2014 one that is free of unwelcome interruptions.It was created on top of a simple truth embodied in the shared values of blockchain enthusiasts: the user is not and should not be a product.Instant Search Results: Introducing the First Real-Time Ethereum ExplorerForget about slow loading times \u2014 get instant search results within milliseconds, and view blocks and transactions faster.The Ethereum blockchain processes thousands of blocks and hundreds of thousands of transactions on a daily basis. Collecting and displaying all of this data in a timely manner presented a colossal challenge for our engineering team\u2026\u2026a challenge they met with ferocious determination by developing innovative techniques and improving existing technologies, which ultimately resulted in blocks and transactions coming in up to 30 seconds faster than alternative explorers.\u201cWe use our own ranking algorithm against every search to show more meaningful data before others. Other explorers out there don\u2019t have anything like our real-time, relevant search results.It\u2019s one of my favorite features.\u201d\u2014 Brad Bayliss, Enjin Lead Systems EngineerEnjinX has been meticulously optimized for speed; search results are instant and viewable within milliseconds.Blockchain data is immediately collected, processed, and displayed, enabling you to check everything from the status of a transaction (pending, failed, success) to viewing new information about all Ethereum transactions, addresses, blocks, and tokens \u2014 in real time.Exploring Ethereum, Made SimpleEnjinX technology and user experience are in perfect synergy \u2014 resulting in simple yet highly visual search and easily understandable blockchain data.User experience is everything. Aside from scaling, it is the single most important issue that\u2019s preventing full-blown mainstream adoption of blockchain technology.As Ethereum blockchain data is mined and stored in blocks, visualization of that data becomes increasingly complex.Blockchain technology will never take its conquering steps toward mainstream adoption if everyday users don\u2019t have a simple way to access and understand fairly complicated blockchain information, which comes in a myriad of forms.EnjinX was forged at the intersection of pioneering technology and user-centric design \u2014 resulting in a simplified multi-tier navigation, real-time search results, and carefully structured data visualization.\u201cThe Ethereum blockchain provides overwhelming amounts of interesting data.To achieve harmony in design and create a human-first experience, it was important to balance the structure of navigation, simplicity, and purpose for every page and element.Every detail was meticulously analyzed and crafted together to achieve a perfectly responsive application, on all devices and browser sizes.Clean, essential design gives the user both visual peace and a pathway for quick data assimilation.\u201d\u2014 Maxim Blagov, Enjin CEO / Creative DirectorEthereum transaction data is presented in a clutter-free way, flawlessly designed by following ultra-modern UI/UX practices:Transactions: Easily search and view all transactions \u2014 pending, internal, and token.Addresses: Comfortably check your balance and tokens, and take a peek at other addresses.Blocks: See block miners, transactions, rewards, and other relevant data.Tokens: Explore over 1,000 ERC-20 tokens and rank them by name, market cap, price, daily volume, and change.Responsive Design: Optimized for Mobile DevicesExplore Ethereum blockchain \u2014 on the go.Desktop computers placed the Internet in our homes; smartphones put it in our pockets.Blockchain is a bleeding-edge technology, destined to radically transform everything from societies and industries to nation-states and the emerging global civilization.Taking this into account, the fact that existing Ethereum explorers are either poorly optimized for mobile devices (or not optimized at all) seems extremely counter-intuitive, absurd, and just plain\u2026Wrong.Online platforms like Reddit and social media networks are littered with countless demands for a modern, responsive Ethereum explorer, one made for a modern, 21st century human.EnjinX will finally fix this paradox: on smartphones and tablets, it essentially looks and feels like a native mobile app. The user interface automatically adjusts to screen width \u2014 all the way from widescreen, 4K resolution desktop monitors to smartphones and tablets of all sizes.Multi-Language, Local Currencies, Custom Themes.Search the blockchain in your language, select your local currency, and and choose a custom theme.EnjinX has been translated to over 15 languages, with more to come in the following weeks.We felt that being able to explore the Ethereum blockchain in your native language would provide a more enjoyable user experience, besides bringing the ability to easily search blockchain data to non-English speakers \u2014 something that is extremely important for the advancement of the Ethereum ecosystem as a whole.Accessibility is important, and so is customization \u2014 which is why you\u2019re able to pick your local (or any) currency, not just a few of the world\u2019s major ones like USD, Yen, and Euro.Pstt\u2026 We included an Easter Egg, matey.EnjinX features a main theme, with two additional options: Winter and Summer. Each theme includes a Day and Night variation, making it easy to customize EnjinX based on your personal preferences or the time of day.Join the EnjinX Launch GiveawayOver 15,000 ERC-1155 tokens backed by more than 200,000 ENJ.EnjinX Launch GiveawayTo celebrate the launch of EnjinX, we are giving away over fifteen thousand ERC-1155 tokens - backed by over 200,000\u2026gleam.ioWe\u2019re celebrating the launch of EnjinX with an Enjin Beam-powered giveaway, featuring everything from somewhat common frozen ENJ to epic Multiverse items and\u2026The first ever, extremely rare Tradesmith items, special-edition HODL tokens, as well as a single Ansible\u2014one of the first ever minted ERC-1155 tokens. It\u2019s a mysterious item and a part of a limited series.Reminder: Tradesmith is an upcoming game we\u2019re building exclusively for the amazing Enjin Community.The giveaway rewards will be distributed in two ways:Enjin Beam Lootdrops, distributed to entrants as we reach the giveaway goals \u2014 the milestones being 100K, 500K, and 1M total points.1st, 2nd, and 3rd prize, sent to randomly selected winners.You can learn more about the rewards here and enter the contest here.Beyond Ethereum: Universal ExplorerBitcoin, ERC-1155, ERC-721, Litecoin, and DogeCoin support.Coming soon to enjinX.ioRegular product updates are what close to a million Enjin Wallet users are used to \u2014 and things will be no different with our explorer.Native ERC-1155 support is the first in a series of planned upgrades which will ultimately result in EnjinX being the first universal blockchain explorer \u2014 ever.Coming in early 2019, the Multi-Token Standard support will feature detailed, clean data about ENJ-backed ERC-1155 tokens and their metadata. ERC-721, Bitcoin, Litecoin, and DogeCoin support will follow the ERC-1155 upgrade.Memories are the key not to the past, but to the future.\u2014 Corrie Ten BoomThe ways we record information have changed and been improved upon throughout history, from ancient Babylonian writings and the invention of the printing press to the dawn of the computer era and birth of the World Wide Web.Blockchain technology is just another step in this collective journey we embarked upon thousands of years ago in the cradle of civilization, imprinting our thoughts and memories on clay tablets.We believe the ability to easily explore and understand blockchain data \u2014 immortalized, secure, decentralized, immutable information\u2014is the key to our future, which is why we\u2019ve built EnjinX.To enable you to easily explore digitalized personal and collective memories, safely stored on the Ethereum blockchain.Thank you for reading \u2014 if you\u2019d like, hop over to our Telegram channel and say hi to the Enjin community.", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/startup-grind/i-was-wrong-about-ethereum-804c9a906d36?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "I was wrong about EthereumI was wrong about Ethereum because it\u2019s such a good store of value\u2026 no wait, let me try again.WhalePandaFollowJun 12, 2017 \u00b7 9 min readI was wrong about Ethereum because it\u2019s such a decentra\u2026 nope.I was wrong about Ethereum because everyone is using it as a supercomputer\u2026 No.I do admit I didn\u2019t see this Ethereum bubble comingBut, then again I wrongly assumed that no startup would need or even dare to ask $50 million in funding. I also wrongly assumed that people would use common sense and that leading developers would speak out against this sort of practice. Quite the opposite it seems.Ethereum\u2019s sole use case at the moment is ICOs and token creation.What\u2019s driving the Ethereum price?Greed.Greed from speculators, investors and developers.Can you blame them?Speculators and investors: No.Developers: Absolutely.So let\u2019s think for a minute and think what determines the price? Supply + demand. Pretty straightforward.Supply:The tokens that are available on the market, right? But with every ICO there are more tokens that are being \u201clocked up.\u201d Obviously the projects will liquidate some, to get fiat to pay for development of their project, but they also see the rising price of Ethereum.So at that point greed takes over and they think, totally understandable, \u201cWe should probably just cash out what we really need and keep the rest in ETH, that\u2019s only going up anyway it seems.\u201dAnd obviously there are new coins being mined, but if you look at the amount of ETH these ICOs raise, at this point, it\u2019s just a drop in a bucket.Demand:You have the normal investors (who are already very late to the game at this point\u2026 as usual), but the buy pressure that these ICOs are creating is crazy and scary. Take TenX for example, it\u2019s an upcoming ICO at the end of the month. The cap is 200,000 ETH (at current ETH price of $370) that\u2019s $74,000,000 for a startup.Here\u2019s the best part: it\u2019s only 51% of the tokens. Effectively giving it an instant $150 million valuation (if it sells out, which it probably will).Another example is Bancor, a friend of mine runs a trading group, he collected 1,100+ BTC to put into Bancor.This needs to be converted into ETH before the sale starts. These are decent size players, but not even the big whales who participate in these ICOs.What will the price do next?It can go quite a bit higher, there are so many coins being taken off the market by these ICOs, that it can still continue for a while and everyone is seeing this and thinking: \u201cWhy aren\u2019t I doing an ICO.\u201d There are lots more coming.At one point it will crash, hard. What the trigger will be?Bug(s) in smart contracts.Major hack.Big ICO startup that fails/fucks up,Network split.Even something as silly as not having a decent ICO for a couple of weeks, which creates sell pressure from miners and ICO projects can cause a big crash.It\u2019s not a question of \u201cif\u201d, it\u2019s a question of \u201cwhen.\u201d That being said: Markets can remain irrational for quite a long time.Usually when a bubble like this pops we could easily see 70\u201380% loss of value (for reference: Bitcoin went from $1,200 to $170 after 2013\u20132014 bubble). This is however quite the unusual situation and I\u2019m not sure to what kind of bubble I can really compare it.I\u2019m sure most of you have seen \u201cWolf of Wall Street.\u201d Just re-watch this clip and see if you find any similarities with the current situation. (bonus clip)What I really find interesting is what the ICO startups will do, Bitcoin had hodlers and investors mainly, individuals who most of the time had a full-time job and didn\u2019t need to sell.With Ethereum there is this huge amount being held by companies who need to pay bills. Will they panic dump to secure a \u201chealthy\u201d amount of fiat funding, will they try to hold through a bear cycle?Taking responsibility.Everyone loves making money, you can\u2019t blame traders or investors from taking advantage of this hype. That would be silly. People will buy literally anything if they can make a quick buck out of it.The responsibility here is with the developers, Consensys and the Ethereum Foundation but they don\u2019t take responsibility since they\u2019re getting more money. This will end with the regulators stepping in.The reason why I say that it\u2019s with developers, Consensys and the Ethereum Foundation is simple:The developers of a project assign these crazy tokensale caps, more money than any startup would ever need.The Ethereum foundation members+ core developers use their own celeb status to actively promote these projects as advisors, for which they\u2019re compensated well, luring in people who have no clue what they\u2019re buying.Consensys promotes all of this since it\u2019s the marketing branch of Ethereum. The more fools that buy in, the better.Let me illustrate this with an example.Have you heard of primalbase? It\u2019s an ICO with a token for shared workspaces. Why would a shared workspace need its own token? It doesn\u2019t, it really really really doesn\u2019t.Let\u2019s take a look at the advisors:First thing that an advisor should\u2019ve said in this case was: \u201cDon\u2019t do it, it\u2019s stupid, it makes no sense.\u201d But well there we have Mr. Ethereum himself.We all know that Vitalik has a cult-like following with the Ethereum investors so it will be very easy for primalbase to launch their ICO and use Vitalik\u2019s face and name to get itself funded.This is just one example, if you go through all of these ICOs you find a lot of familiar names and faces.Nothings wrong with being an advisor, but when you\u2019re just sending people to the slaughterhouse\u2026The sad part is that a lot of people will lose a lot of money on this, some of them obviously more than they can afford to lose, that\u2019s how it always goes.The [damn] regulators will step in after this bubble pops and what scares me is the fact that it will damage all of crypto, including Bitcoin, not just Ethereum and its ICO\u2019s.But you\u2019re just an Ethereum hater.I\u2019ve heard all the accusations:I hate Ethereum because I\u2019m a Bitcoin Maximalist. I\u2019m not, I like other projects too, like Siacoin for example.I hate Ethereum because I missed out. I did miss out on the crowdsale, but I traded plenty of Ethereum and it\u2019s ICOs and made some nice profit.I hate Ethereum because I don\u2019t understand it. Really? Do you? The only smart contracts running on it are ICO token sales. Or contracts to buy ICO tokens the second they become available.I hate Ethereum because I\u2019m jealous of Vitalik. No, it\u2019s impressive what he did at his young age. At the same time I think he\u2019s largely responsible for this bubble and he has made a lot of mistakes. We all make mistakes, but bailing out your friends from the DAO while other hacks and losses aren\u2019t compensated or fixed just shows total lack of integrity. Or it\u2019s everything or it\u2019s nothing. And when it comes to immutability in crypto, it should be nothing.For the people that are scared that Ethereum will replace BitcoinEthereum is not a store of value.It isn\u2019t capped. Yes, I know they\u2019re planning to switch to PoS (which it already kind of is). Do you think they managed to create the first software implementation ever without any bugs? Doing such a major change on a (currently) $30 billion market is completely irresponsible, borderline insanity.Even if we assume that there are no bugs, what about the miners? The miners who bought their equipment to mine Ethereum, the miners that supported the network for years. \u201cBut they knew we were switching to PoS.\u201d Of course they knew, and do you think they\u2019ll just give up on such a profitable coin?Some might switch immediately to Zcash and Ethereum Classic but there will be another fork and we\u2019ll have ETHPoS and ETHPoW, with of course all the Ethereum tokens being on both chains.Even Ethereum developers think that his is a very likely scenario.Ethereum\u2019s fees are lower. They are, sometimes, by a bit. If you\u2019re trying to send something when no token sale is active obviously, else you have people spending $100's to get in on the token sale and clog up the network.Also doesn\u2019t apply when you send something from exchanges since for example with Poloniex it\u2019s about $1.9 vs $0.28 for Bitcoin. Oh and another exception is when you actually use it for smart contracts, which require more gas to process than a normal transactions from account A to account B.You know.. the actual reason why Ethereum was created.Ethereum is not decentralized.Bitcoin isn\u2019t as decentralized as it should be, we all know that, but compared to most other coins, Bitcoin is very decentralized.Vitalik has called himself a benevolent dictator in the past. He is the single point of failure in this project and if he gets compromised in any way that\u2019s the end.There is no way of knowing if this happens and since people blindly follow everything he says, he has the power to do anything. Satoshi was smart enough to remove himself from the Bitcoin project.Ethereum is not immutable.Don\u2019t have to spend much time on this: see DAO and split that lead to Ethereum and Ethereum Classic.Ethereum has the Enterprise Ethereum Alliance.But but but.. all those big banks use Ethereum. No, they don\u2019t. They use \u201can\u201d Ethereum, which is a (private) fork of Ethereum. By that definition 99% of all altcoins are using Bitcoin.Still a separate chain. The fact that we\u2019re talking about a private blockchain here actually makes altcoins more like Bitcoin than \u201can Ethereum\u201d that EEA uses like Ethereum.You can compare it to 2013\u20132014 when some companies started to get interested in blockchain vs Bitcoin, only difference here is that for Ethereum it\u2019s part of their marketing campaign to lure in potential investors.If you think I\u2019m just full of crap, which is fair, I am just some random popular guy on Twitter who has been around from before Ethereum.Have a look at what Vlad has to say about the current state of Ethereum here and here. Vlad Zamfir is probably the smartest guy on the Ethereum team, and I say this while I don\u2019t agree with him on many of his opinions, I do respect him.Conclusion:If you\u2019re an actual developer, be realistic and honest with your investors. Do you really ever need more than $5 mill? Finish a MVP first and then do a tokensale, if you really really need to do an ICO.Plenty of rich crypto investors and traders now that would love to be part of your project and who would be happy to just invest for equity. Yes, it will probably be less than what you can get in an ICO, but at least you didn\u2019t sell out and it shows you actually really care about your product/service/\u2026If you\u2019re a trader or investor, be realistic about the bubble. I know you hear this a 100 times when you\u2019re trading but: don\u2019t invest what you can\u2019t afford to lose.I have some Ethereum, not as a long term investment, but because the price is going up and I need it to invest in tokens which I can quickly flip as soon as they come on the market.That\u2019s just the type of market we\u2019re in. Everyone is making a lot of money, awesome right?What could potentially go wrong.", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "Full Stack Hello World Voting Ethereum Dapp Tutorial \u2014 Part 1Mahesh MurthyFollowJan 18, 2017 \u00b7 8 min read[Tutorial was last updated in February 2019 to use the latest libraries]This is part 1of 3 part series of tutorials. You can access Part 2 and Part 3 here.In my previous post, I explained the high level architecture of Ethereum platform comparing it to a web application. As a developer, the best way to learn any new technology is by diving in and building toy applications. In this post, let\u2019s build a simple \u2018Hello World!\u2019 application which is a Voting application.The application is extremely simple, all it does is initialize a set of contestants, let anyone vote for the candidates and display the total votes received by each candidate. The goal is not to just code an application but to learn the process of compiling, deploying and interacting with it.I have deliberately avoided using any dapp frameworks to build this application because the frameworks abstract away lot of the details and you fail to understand the internals of the system. Also, when you do use a framework, you will have more appreciation for all the heavy lifting the framework does for you!In lot of ways, this article is a continuation of the previous post. If you are new to the world of Ethereum, I recommend reading it before continuing.The goal of this exercise is to:Set up the development environment.Learn the process of writing a contract, compiling it and deploying it in your development environment.Interact with the contract on the blockchain through a nodejs console.Interact with the contract through a simple web page to display the vote counts and vote for candidates through the page.The entire application set up and build was done on a fresh installation of ubuntu 16.04 xenial. I have set up and tested the application on macos as well.This is how I would visualize this application we are going to build.1. Setting up the development environmentInstead of developing the app against the live blockchain, we will use an in- memory blockchain (think of it as a blockchain simulator) called ganache. In Part 2 of the tutorial, we will interact with the real blockchain. Below are the steps to install ganache, web3js and start the test blockchain on a linux operating system. The exact same instructions work on macos as well. For windows, you can follow the instructions here (Thanks Prateesh!).mahesh@zastrin:~$ npm -v6.1.0mahesh@zastrin:~$ node -vv10.4.0mahesh@zastrin:~$ mkdir -p ethereum_voting_dapp/chapter1/mahesh@zastrin:~$ cd ethereum_voting_dapp/chapter1mahesh@zastrin:~/ethereum_voting_dapp/chapter1$ npm install ganache-cli web3@1.0.0-beta.37mahesh@zastrin:~/ethereum_voting_dapp/chapter1$ node_modules/.bin/ganache-cliThe output should look like belowGanache CLI v6.3.0 (ganache-core: 2.4.0)Available Accounts==================(0) 0x66d1dda957bc7a087324130c89547ce579cee563 (~100 ETH)(1) 0xf98e7d03f312c8329d01ef0642b74e77740cc203 (~100 ETH)(2) 0x71d4ee31cd935d17a2b00b7d8873651d6aefbf73 (~100 ETH)(3) 0x2fdaa99748e6224e03e3e5a1a9a89abd906df671 (~100 ETH)(4) 0xfb32d320a858747453ac1b4e23c849fecd6ebf33 (~100 ETH)(5) 0x2c00cd8a488a8ae569553dfe90bf90d65af97630 (~100 ETH)(6) 0xa4099d0d4a0e7ce5bf26c3f4078a001daf5cedff (~100 ETH)(7) 0xa53c14d56683bdc775c19540679b0809bbf95a2b (~100 ETH)(8) 0x3ba642d43a2a24a0160fa22c358cf697aa4a627f (~100 ETH)(9) 0x81c43af78fdb4a2c8078ec37875e9616e3c5a3e4 (~100 ETH)Private Keys==================(0) 0xee670c7915b5e73b6f5c82da3919701f19ed1f72a1d4f31007836930623f4a57(1) 0xf40063c41978799ff6fa4b85d678b0f42ed6c774c35fa883a289fdc7fa0b65cb(2) 0x5228a5e30d1be11885cd7d44d4a47b1dfa22db4033cd758a1c3677a3a0cb5383(3) 0x3520c609b830538bd8c5d05c8f53338322411deb477308c5543f20a420fea5ec(4) 0xa7728cbc1eee41d696cb1d252157fc66ab1726ff751f2132c387726b5c901c35(5) 0xe459627dc49d59da76c393b40c36c674c8307ec52c24794a33ddc773f3c229fc(6) 0xa65715e3bdc8236420491de88486ff301a19b624b006811a89742e74120eac50(7) 0xc95ab6498d506f45b4b8ab2b04967d51e05af41059334df91d63097cb3254a3b(8) 0xf0619031f2ba4319aae691ce34fe8cce136640fb715b70d5baa045c2d58f1b80(9) 0x39a85154d16a1eba4a9f8514f187bcb6c8b867b790035afa9f92bf2731aebc5bHD Wallet==================Mnemonic:      rather online beyond apology whale cheese game ankle together share potato leisureBase HD Path:  m/44'/60'/0'/0/{account_index}Notice that the ganache-cli creates 10 test accounts to play with automatically. These accounts come preloaded with 100 (fake) ethers.2. Simple voting contractWe are going to use the solidity programming language to write our contract. If you are familiar with object oriented programming, learning to write solidity contracts should be a breeze. We will write a contract (think of contract as a class in your favorite OOP language) called Voting with a constructor which initializes an array of candidates. We will write 2 methods, one to return the total votes a candidate has received and another method to increment vote count for a candidate.Note: The constructor is invoked once and only once when you deploy the contract to the blockchain. Unlike in the web world where every deploy of your code overwrites the old code, deployed code in the blockchain is immutable. i.e, If you update your contract and deploy again, the old contract will still be in the blockchain untouched along with all the data stored in it, the new deployment will create a new instance of the contract.Below is the voting contract code with inline comment explanation:Copy the above code to a file named Voting.sol in the ethereum_voting_dapp/chapter1 directory. Now let\u2019s compile the code and deploy it to ganache blockchain.To compile the solidity code, we will first install npm module called solc. Then use the compiler to compile the contractmahesh@zastrin:~/ethereum_voting_dapp/chapter1$ npm install solc@0.5.3mahesh@zastrin:~/ethereum_voting_dapp/chapter1$ node_modules/.bin/solcjs --bin --abi Voting.solmahesh@zastrin:~/ethereum_voting_dapp/chapter1$ lsVoting.sol              Voting_sol_Voting.abi   Voting_sol_Voting.binWhen you compile the code successfully using the command above, the compiler outputs 2 files that are important to understand:Voting_sol_Voting.bin: This is the bytecode you get when the source code in Voting.sol is compiled. This is the code which will be deployed to the blockchain.Voting_sol_Voting.abi: This is an interface or template of the contract (called abi) which tells the contract user what methods are available in the contract. Whenever you have to interact with the contract in the future, you will need this abi definition. You can read more details about ABI hereRemember from the previous article, web3js is a library which lets you interact with the blockchain through RPC. We will use that library to deploy our application and interact with it.First, run the \u2018node\u2019 command in your terminal to get in to the node console and initialize the web3 object. All the code snippets below need to be typed in the node console.mahesh@zastrin:~/ethereum_voting_dapp/chapter1$ node> Web3 = require('web3')> web3 = new Web3(\"http://localhost:8545\")To make sure web3 object is initialized and can communicate with the blockchain, let\u2019s query all the accounts in the blockchain. You should see a result like below:> web3.eth.getAccounts(console.log)['0x9c02f5c68e02390a3ab81f63341edc1ba5dbb39e','0x7d920be073e92a590dc47e4ccea2f28db3f218cc','0xf8a9c7c65c4d1c0c21b06c06ee5da80bd8f074a9','0x9d8ee8c3d4f8b1e08803da274bdaff80c2204fc6','0x26bb5d139aa7bdb1380af0e1e8f98147ef4c406a','0x622e557aad13c36459fac83240f25ae91882127c','0xbf8b1630d5640e272f33653e83092ce33d302fd2','0xe37a3157cb3081ea7a96ba9f9e942c72cf7ad87b','0x175dae81345f36775db285d368f0b1d49f61b2f8','0xc26bda5f3370bdd46e7c84bdb909aead4d8f35f3']To compile the contract, load the bytecode and abi from the file system in to a string like below> bytecode = fs.readFileSync('Voting_sol_Voting.bin').toString()> abi = JSON.parse(fs.readFileSync('Voting_sol_Voting.abi').toString())Let\u2019s now deploy the contract. You first create a contract object (deployedContract) which is used to deploy and initiate contracts in the blockchain.> deployedContract = new web3.eth.Contract(abi)> listOfCandidates = ['Rama', 'Nick', 'Jose']> deployedContract.deploy({  data: bytecode,  arguments: [listOfCandidates.map(name => web3.utils.asciiToHex(name))]}).send({  from: 'ENTER 1 OF 10 ACCOUNT ADDRESSES like 0xfb3....',  gas: 1500000,  gasPrice: web3.utils.toWei('0.00003', 'ether')}).then((newContractInstance) => {  deployedContract.options.address = newContractInstance.options.address  console.log(newContractInstance.options.address)});We use the web3 deploy function along with send to deploy the contract to the blockchain. Let\u2019s see what are all the arguments we pass to deploy and send functions:data: This is the compiled bytecode which we deploy to the blockchain.arguments: These are the arguments we pass to the constructor of the contract. In our case we pass an array of candidate names. Note that we have to explicitly convert string to bytes32, that\u2019s why we call web3.utils.asciiToHex on each candidate name (using map function).from: The blockchain has to keep track of who deployed the contract. In this case, we are just picking the first account we get back from calling web3.eth.getAccounts to be the owner of this contract (who will deploy it to the blockchain). Remember that web3.eth.getAccounts returns an array of 10 test accounts ganache created when we started the test blockchain. In the live blockchain, you can not just use any account. You have to own that account and unlock it before transacting. You are asked for a passphrase while creating an account and that is what you use to prove your ownership of that account. Ganache by default unlocks all the 10 accounts for convenience.gas: It costs money to interact with the blockchain. This money goes to miners who do all the work to include your code in the blockchain. You have to specify how much money you are willing to pay to get your code included in the blockchain and you do that by setting the value of \u2018gas\u2019. The ether balance in your \u2018from\u2019 account will be used to buy gas. The price of gas is set by the network.gasPrice: Each unit of gas has a price associated with it. That is set in the gasPrice field.We have now deployed the contract and have an instance of the contract (variable deployedContract above) which we can use to interact with the contract. There are hundreds of thousands of contracts deployed on the blockchain. So, how do you identify your contract in that blockchain? Answer: deployedContract.options.address. When you have to interact with your contract, you need this deployed address and abi definition we talked about earlier.3. Interact with the contract in the nodejs console> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)> deployedContract.methods.voteForCandidate(web3.utils.asciiToHex('Rama')).send({from: 'YOUR ACCOUNT ADDRESS'}).then((f) => console.log(f))> deployedContract.methods.totalVotesFor(web3.utils.asciiToHex('Rama')).call(console.log)Try the above commands in your node console and you should see the vote count increment. Every time you vote for a candidate, you get back a transaction id: Example: \u20180xdedc7ae544c3dde74ab5a0b07422c5a51b5240603d31074f5b75c0ebc786bf53\u2019 above). This transaction id is the proof that this transaction occurred and you can refer back to this at any time in the future. This transaction is immutable. This immutability is one of the big advantages of blockchains such as Ethereum. In future tutorials, we will build applications leveraging this immutability.4. Webpage to connect to the blockchain and voteNow that most of the work is done, all we have to do now is create a simple html file with candidate names and invoke the voting commands (which we already tried and tested in the nodejs console) in a js file. Below you can find the html code and the js file. Drop both of them in the ethereum_voting_dapp/chapter1 directory and open the index.html in your browser.If you remember, we said earlier we will need the abi and the address to interact with any contract. You can see above in the index.js file how they are used to interact with the contract.open the index.html in your browser and you should see something like this.If you are able to enter the candidate name in the text box and vote and see the vote count increment, you have successfully created your first application! Congratulations! To summarize, you set up your dev environment, coded a simple contract, compiled and deployed the contract on the blockchain and interacted with it via nodejs console and then through a webpage. Now would be a good time to pat yourself on the back if you haven\u2019t already :)In part 2, we will deploy this contract to the public test network so the entire world can see it and vote for a candidate. We will also get more sophisticated and use the truffle framework for development (and not have to use the nodejs console to manage the entire process). Hope this tutorial helped you get a practical idea on how to get started with developing decentralized application on the Ethereum platform.As always thanks Raine Rupert Revere for corrections/edits of this post.If you run into issues getting the application working, feel free to DM me on twitter @zastrinlab or email mahesh@zastrin.com.If you liked this tutorial, you might like many more interesting real-world project based courses at www.zastrin.comIf you would like to get notified when I write more tutorials, you can subscribe here.", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/hackernoon/bitcoin-ethereum-blockchain-tokens-icos-why-should-anyone-care-890b868cec06?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "Bitcoin, Ethereum, Blockchain, Tokens, ICOs: Why should anyone care?Preethi KasireddyFollowJul 5, 2017 \u00b7 29 min readSource: https://www.youtube.com/watch?v=hxtB01iPK6wThe Crypto market is gaining lots of steam.  Gravity-defying price rallies\u2026Bitcoin Price Chart (1 year)Ethereum Price Chart (1 year)Top 8 Cryptocurrencies Price Chart (excluding Bitcoin & Ethereum)\u2026and multi-million dollar token sales are commonplace, as are front-page headlines from traditional news outlets discussing Ethereum, Bitcoin, ICOs, tokens, hard forks, and other technical topics.Even my 13-year-old brother has been calling me up asking for explanations!I\u2019ve been personally invested in this space for a while now \u2014 most recently as an engineer for Coinbase \u2014 but even I\u2019m surprised by how quickly the Crypto space has evolved in the past six months.  If you want to understand why crypto is getting the spotlight, you have to understand the behind-the-scenes catalysts driving the market. Right now, that catalyst is the \u201ctoken sale\u201d or \u201cInitial Coin Offering (ICO)\u201d phenomena.ICO vs IPO: The wild west of investmentWhat the heck is an ICO anyway?  You may have heard of an \u201cInitial Public Offering\u201d (IPO) \u2014 when a company goes public by selling some of its shares to institutional investors, who in turn sell to the general public on the securities exchange. The public gets excited about IPOs because they let anyone with a brokerage account purchase shares of companies like Snapchat.  Are ICOs the same thing? Yes and no. IPOs and ICOs are both used by companies to raise capital. The main (and really important) difference is regulation. IPOs are regulated by the SEC and have a set of legal requirements and a formal process for how they\u2019re carried out. ICOs are currently unregulated and more of a \u201cwild west\u201d practice.  Overall, there seems to be a lot of confusion and uncertainty when it comes to ICOs. Some argue that they have turned into a \u201cperverse and unsustainable Keynesian beauty contest.\u201d Supporters are optimistic and claim that it\u2019s a new form of Venture Capital.  With drastically opposing viewpoints like this dominating the conversation, most of us are left on the sidelines scratching our heads.Necessary background knowledgeYou can\u2019t understand ICOs without understanding the underlying digital asset sold in an ICO.  If you already know the basics of crypto, feel free to skip this section. For the rest of us\u2026 let\u2019s start from the top!The Cryptocurrency technology stackCryptocurrency technology stackBitcoinBitcoin is a decentralized digital currency that uses a peer-to-peer technology.  Peer-to-peer essentially means that there isn\u2019t a central authority issuing new money or tracking transactions. Instead, these operations are managed collectively by the network. The transactions happen between users directly and are recorded on the blockchain (more on that below).  The Internet is filled with great Bitcoin explainers, so I won\u2019t delve much farther down the rabbit hole in this post. Instead, here are some starting points to get you up to speed:Bitcoin Wiki, Wikipedia, What is Bitcoin, Bitcoin Magazine, Why Bitcoin matters.BlockchainA blockchain is a decentralized public database that keeps a permanent record of digital transactions.  In other words, it\u2019s a logfile storing an immutable record of all the digital transactions. This decentralized database is not controlled by a central administrator, but instead is a network of replicated databases (meaning each node in the network stores its own copy of the blockchain) that is shared and visible to anyone within network.  Every \u201cblock\u201d in this blockchain contains a record of recent transactions, a reference to the block that came immediately before it, and an answer to a difficult mathematical puzzle, among other things.A blockchain is collectively maintained by \u201cminers\u201d, who are members within the network that compete to validate Bitcoin transactions in each block by solving the complex algorithmic problem associated with the block.  They do this by buying or renting lots of computing power to run these complex algorithmic problems on. The incentive for them to use their computing power to verify transactions is that they are rewarded with Bitcoin if they solve the problem and validate a Bitcoin block.  The power of such a decentralized network is that economic value and governance are distributed among the network\u2019s stakeholders (i.e. miners and consumers) rather than concentrated in a single organization (e.g. banks, governments & accountants). Thanks to this setup, anyone can own and transfer assets digitally without the need for a third party.Blockchain technology isn\u2019t limited to Bitcoin. It can be used to create any other cryptocurrency, such as Ethereum and Litecoin, which utilize their own blockchains. You can read more about bitcoin and blockchain at Wikipedia or watch this great explainer video.Protocol layerNext, we have the protocol layer. In general, a protocol is the special set of rules that nodes in a network use when they transmit information. These rules specify the interactions between the communicating entities.One example of a protocol used in telecommunications is Transmission Control Protocol (TCP), which is a set of rules for exchanging messages at the information packet level on the internet. TCP guarantees that the data packets will be delivered and that they will be delivered in the same order in which they were sent. Another example of a protocol is Internet Protocol (IP), which is a set of rules to send and receive messages at the Internet address level \u2014 it essentially specifies the format of the data packets on the internet and the addressing scheme.TCP/IP ProtocolWhen discussing blockchains, the term \u201cprotocol\u201d refers to the \u201ccryptoeconomic rules\u201d that are enforced by a blockchain in order to maintain distributed consensus across the blockchain\u2019s peer-to-peer network.Cryptoeconomic rules are rules that govern a decentralized digital economy that:(i) uses public key cryptography for authentication(2) has economic incentives to ensure that the rules are followedFor example, in the case of Bitcoin\u2019s blockchain, it has financial incentives that are provided to the miners for validating every Bitcoin transaction and in turn, securing the network.What exactly are these financial incentives?TokensEnter tokens.The financial incentive for miners comes from the native token built on top of the Bitcoin blockchain \u2014 Bitcoin. The coin serves as a \u201ccarrot and stick\u201d \u2014 miners who use their computing power to validate transactions are rewarded with a certain amount of coin.In general, when you hear the term \u201ccryptocurrency tokens\u201d or simply \u201ctokens\u201d, they are referring to tokens such as Bitcoin that are built on top of a blockchain and represent a digital asset which you own and can transfer to someone else.There are various ways to create tokens on top of a blockchain. For example, the simplest tokens to understand are intrinsic tokens like Bitcoin, which is directly built on top of the Bitcoin blockchain. Or you can choose to fork the Bitcoin blockchain and build tokens on top \u2014 some examples include ZCash, Litecoin, Monero, and others. Or you can build an entirely new blockchain technology and build a token on top of that \u2014 which is what Ethereum did. The token on top of Ethereum\u2019s blockchain is \u201cEther\u201d.  \u2026you can even build tokens on top of Ethereum\u2019s blockchain itself. Gnosis (GNO) and Augur (REP) are examples of this. Perhaps confusing since \u201cEther\u201d is the intrinsic token built on top of the Ethereum blockchain. I\u2019ll explain later in the post. For now, just accept the fact that it\u2019s possible to build other tokens besides the intrinsic token on the Ethereum Blockchain.There\u2019s a helpful analogy here with traditional currencies \u2014 you can think of tokens as the currency itself (e.g. USD, EUR, etc.) and the blockchain protocol as the monetary policy.  The main takeaway here is that every token is based on some underlying blockchain \u2014 whether it\u2019s Bitcoin\u2019s blockchain, Ethereum\u2019s blockchain, or some other forked/new blockchain.Regardless of the cryptocurrency in question, tokens are valuable because the blockchain provides a backbone for asset manipulation that is immutable, decentralized, and impossible to counterfeit.The application layerSo far, we\u2019ve learned about Bitcoin and the underlying blockchain that enables it. We\u2019ve also learned about the protocol that determines the rules of the blockchain, and the tokens built on top of it.Together, these technologies have made us rethink our definition of money as something that is digital, easily transferrable, secure, and decentralized.But the important part to realize is that money is just one application of the blockchain. Besides money, the reason so many of us in the crypto-world are nerding out about the blockchain is because it has revealed a potential future for (1) protocols and (2) applications in general.(1) ProtocolsThe ultimate dream of cryptocurrency developers is that we can take advantage of this blockchain technology to build new and improved communication protocols from the ground up. Protocols being developed for cryptocurrencies have the potential to solve problems with centralization that have plagued the Internet since the first dial-up modem whirred and beeped into action.  What are examples of such protocols?Well, they could include protocols for payments, identity, domain name systems, cloud computing, reputation systems, and much more. Many of these systems today are highly centralized (e.g. Stripe, Paypal, Google, Amazon) and there\u2019s no such thing as defaults or standards for these things on the Web.  Hence, in the long term, our hope is that the blockchain technology will enable decentralized, open, and secure protocols to be built with use cases far outside cryptocurrency.(2) ApplicationsBlockchain enables what we call \u201cdecentralized applications\u201d. Decentralized application, or \u201cdApp\u201d, is an application built on top of the blockchain. How does that work?Let\u2019s consider the Bitcoin blockchain as an example. Bitcoin uses a scripting system for transactions that occur on the Bitcoin blockchain. A script is a simple list of instructions. So the Bitcoin\u2019s scripting language enables us to write a script that is recorded with every transaction. The purpose of the script is to define the requirements the recipient must meet to gain access to the Bitcoins being transferred.For a typical Bitcoin transfer, the script will define what the spender must provide:a public key that, when hashed, matches the destination address included in the scripta signature to show evidence of the private key corresponding to the public key just providedBut the neat thing is that there\u2019s some flexibility in the parameters we can send with each transaction. For example, we can write a script that says \u201cthis transaction is only valid if it has two private keys\u201d. So essentially, this scripting language now lets us encode rules for how to move money, or more generally, any piece of information, around, without requiring us to trust some third party to follow a set of rules we care about. We simply trust the code and all is well.Because Bitcoin has this scripting language, it\u2019s possible to use this language to build certain types applications that transact on the blockchain. In other words, we can build applications that use Bitcoin transactions to communicate.For example, let\u2019s say we want to build a blockchain-based crowdfunding application. You might have a set of rules for how funds are transferred (or communicated) between one party to another which you encode in the scripting language. Then users of the application can run a crowdfunding event that is governed by the blockchain.This is the main idea behind dApps: a decentralized set of rules that define a specific application. This set of rules sits on a public and decentralized blockchain (instead of a central server owned by some large entity, such as Facebook or Amazon). This enables it to governed by autonomy and be resilient to censorship.\u201cWhere are the apps?\u201d dilemmaMany of us in the crypto world were under the impression that developers would immediately hop on the bandwagon and use Bitcoin\u2019s scripting language to build decentralized applications on top.  But fast forward eight years (Bitcoin was released in 2009), and Bitcoin has yet to become more than simply a store of value and a speculative investment. Sure, we\u2019ve seen a handful of wallets and exchanges built. (Coinbase, Kraken, Poloniex, and GDAX, to name a few.)  \u2026And of course, we can\u2019t forget Silk Road, the digital anonymous drug marketplace that processed over $1 billion in sales in 2.5 years and was shut down by law enforcement in late 2013.  In some ways, Bitcoin could be considered the first decentralized application since it runs on blockchain technology, is fully open-source, and runs without a central authority. But seriously, a lot of us are here still looking around and wondering, \u201cWhere are the killer apps?\u201d  Sadly, almost no one I know uses blockchain-based applications in their day to day. Here are some factors holding these applications back from popularity (note: these are my personal opinions):1. Lack of developer friendliness and toolingProgramming applications using Bitcoin\u2019s scripting language is not easy. Why?  For one, the scripting language is too limited. A scripting language is a programming language where you can write code to perform some actions. An example of a scripting language widely used on the web today is JavaScript.const greeting = (name) => \"Hello, \" + name + \"!\";const add = (a, b) => a + b;const subtract = (a, b) => a - bCompare this to Bitcoin\u2019s scripting language:OP_DUP OP_HASH160 62e907b15cbf27d5425399ebf6f0fb50ebb88f18 OP_EQUALVERIFY OP_CHECKSIGThe JavaScript on top reads pretty much like English. Bitcoin\u2019s scripting language, on the other hand, looks like machine code. Most developers are used to writing in expressive languages like JavaScript, Ruby or Python\u2026 not machine code. Bitcoin script is daunting for most developers.  Secondly, developer tooling and great documentation goes a long way in gaining adoption among developers. Take React, for example, which is one of the most popular front-end libraries today. One of the biggest reasons that React became so popular is because of how much effort the community has put into building a strong set of developer tools (e.g. IDEs, Babel, Webpack, boilerplates, Create React App, etc), documentation, and tutorials. Bitcoin\u2019s ecosystem, on the other hand, is the opposite of user-friendly. Lastly, Bitcoin\u2019s scripting language is not turing complete. A turing complete programming language is one that can be used to simulate any single-taped Turing machine. In other words, it can be used to solve any computation problem that a Turing machine can run given enough time and memory. (for more on this, read this Stackoverflow discussion). By not being turing complete, Bitcoin script restricts what you can do. Overall, Bitcoin\u2019s scripting language has historically been limited, difficult to use and lacked adequate tooling and documentation. As a result, it didn\u2019t encourage a developer community to form, which is the prerequisite to killer applications.2. Building a decentralized application with strong network effects isn\u2019t easyMany of the applications we use in our daily work (marketplaces, exchanges, social networks, etc) derive their value from their strong network effects. A network effect is when a product or service increases in value as more people use it.  A classic example is Facebook. Every new user connecting to other users on the platform non-linearly increases the number of connections. Similarly, Venmo is useless if you\u2019re the only person on the platform. For every new friend that joins, the value of the product goes up because you can now pay and/or receive payment from this friend. Network effects help build better products and services. However, building up this network is one of the hardest parts of building a successful product, classically known as the \u201cchicken and egg\u201d problem.  So even if a developer were to make the effort to build a decentralized crowdfunding platform on top of Bitcoin\u2019s blockchain, getting users on both side of the platform (i.e. investors and product-builders) is an incredibly hard challenge.  The blockchain provides the technological underpinnings to create decentralized applications, but it doesn\u2019t provide the framework or tools necessary to drive adoption of the network.3. Decentralization alone doesn\u2019t provide a 10x improvementWhen we talk about decentralized applications built on top of the blockchain, we might think of transaction-based platforms, such crowdfunding, remittances, payments, coupons, etc. It might be a neat technical feat to have a decentralized version of these types of services, but the reality is, we already have existing apps that work perfectly fine for each of these use cases.  For crowdfunding, we have Kickstarter. For remittances, we can use TransferWise. For payments, we can use Credit Cards, Paypal, Venmo, Square, etc.  Peter Thiel\u2019s 10x rule is important to think about when we\u2019re considering how to get users to substitute existing solutions with the new decentralized ones. As of now, it\u2019s unclear what dimension these 10x advantages come from, so far as users go.  Take WeiFund, for example, which is a decentralized crowdfunding platform. As a user, WeiFund's interface and user experience seems similar to conventional crowdfunding platforms such as Kickstarter or GoFundMe. The main differences seem to be that they claim to have lower costs and that they use smart contracts to run the crowdfunding, allowing for more complex agreements. Is this enough to get users to make the effort to switch over (especially when the costs aren't that much lower)? By no means do I believe that decentralized applications have no benefits. In fact, I foresee a future where applications are 10x more secure, 10x cheaper, 10x more efficient, or 10x more on some dimension than the current ones.  The point is that these benefits have not been proven yet, so there's little reason for users to consider using a decentralized application today.The rise of decentralized applications\u2026 maybe.Enter Ethereum.Ethereum is a cryptocurrency launched in 2015 and built from the ground up using its own blockchain technology. It was designed to be a more generalized protocol than Bitcoin\u2019s blockchain, with the explicit goal of doing more than just creating and recording transfers of a blockchain network\u2019s native tokens.As written in the Ethereum white paper:\u201cThe intent of Ethereum is to create an alternative protocol for building decentralized applications, providing a different set of tradeoffs that we believe will be very useful for a large class of decentralized applications, with particular emphasis on situations where rapid development time, security for small and rarely used applications, and the ability of different applications to very efficiently interact, are important. Ethereum does this by building what is essentially the ultimate abstract foundational layer: a blockchain with a built-in Turing-complete programming language, allowing anyone to write smart contracts and decentralized applications where they can create their own arbitrary rules for ownership, transaction formats and state transition functions.\u201dEthereumIn essence, Ethereum is simply a transaction-based state machine: we begin with a \u201cgenesis state\u201d and incrementally execute transactions to transform it into some final state. The final state is what we accept as the canonical version of the current state of the world of Ethereum.Ethereum transactionWhile Bitcoin is the intrinsic token for Bitcoin\u2019s blockchain, Ether is the intrinsic token for Ethereum\u2019s blockchain.Just like Bitcoin, the Ethereum blockchain contains a log of transaction-like events. Users send Ether to one another using the \u201clog,\u201d and miners are incentivized to verify and secure these transactions within the network.But it can also go way beyond that \u2014 the Ethereum blockchain can be filled with a wider variety of event information coming from any sort of computer program.Let\u2019s look at a few of the core concepts that underly the Ethereum blockchain to understand why this is possible:Ethereum basicsFirst is accounts. There are two types of accounts: Externally Owned Accounts and Contracts Accounts. Both account types have an Ether balance.The main distinction is that contract accounts have some piece of code associated with them, while externally owned accounts do not. Contract accounts, therefore, have the ability to perform any type of computation when its associated code is executed.Next we have what are known as transactions, which are cryptographically signed data packages that store a message to be sent from an externally owned account to another account on the blockchain. When a transaction is sent to a contract account, the code associated with the contract account is executed by the \u201cEthereum Virtual Machine (EVM)\u201d on each node (more on that below).Finally, there are messages. Messages allow contract accounts to call one another. When a contract account send a message to another contract account, the code associated with the account is activated. Essentially, a message is like a transaction, except it\u2019s produced by a contract account rather than an external account.Let\u2019s quickly explain the concept of the \u201cEthereum Virtual Machine (EVM)\u201d. Remember how we learned that the protocol for the Bitcoin blockchain determines how transactions on the network get verified? Well, in Ethereum\u2019s case, every node that is participating in the Ethereum network runs the EVM as part of this verification process.Source: Coinspace.ioLet\u2019s say we have a set of transactions that were started by some external accounts. These get accumulated into a block, and then the nodes in the Ethereum network go through the transactions listed in the block and run the code associated with these transactions within the EVM. It\u2019s important to note that every node in the network runs the code and stores the resulting values. As you might guess, this tends to be computationally very expensive. To compensate for this expense and incentivize the nodes (or miners) to run these computations, the miners specify a fee for running these transactions. This fee is referred to as \u201cgas\u201d (you can read more on gas here). This is similar to how fees work in Bitcoin, where any fees attached to a bitcoin transaction go to the miner who mined the block that included the transaction.Note: This is a very high level description of how the Ethereum blockchain works and it certainly skips a lot of details for purposes of brevity. I\u2019ll write more in-depth articles in the future.Lastly, we have Ethereum\u2019s programming language for writing executable distributed applications and contracts. Unlike Bitcoin, Ethereum\u2019s programming languages (Solidity which is similar to JavaScript , Serpent which is similar to Python) don\u2019t look like machine code. It has the expressive power and functionality of languages that programmers are accustomed to developing on, like JavaScript or Python. Moreover, it lets you do pretty much anything an advanced programming language would let you do. Hence, it is \u201cTuring complete\u201d.The key takeaway from all this is that Ethereum stepped into the crypto-world and provided us with a generalized framework for running any type of code on the blockchain more easily. Because Ethereum\u2019s language is turing complete, stateful, and developer friendly, the hope was to open up the benefits of the blockchain beyond just enforcing one particular ruleset (e.g. how digital money gets transferred) and enable a safe, open, highly available, autonomously governed, efficient, trustable and reliable mechanism to build any ruleset on top. This would enable developers to develop any type of application imaginable.An example of an application that is incredibly simple to build on Ethereum is a \u201csmart contract\u201d. A smart contract is a distributed contract that is represented in code and basically says \u201cif this happens then do that\u201d. They can accept and store Ether and data, and can send that Ether to other accounts or even other smart contracts. Just like regular contracts (e.g. a property lease or an employment agreement), they are used to form agreements with people or entities, but unlike regular contracts, they act like autonomous agents that run entirely on the blockchain and remove the human out of the loop, making them automated, open, secure and trustless.Another example of an application is a decentralized organization. A decentralized organization is a programmatic organization that runs based on rules encoded within smart contracts. So instead of the typical hierarchical structure of an organization that is managed by humans, a decentralized organization encodes all its rules into a smart contract and then is completely managed by a blockchain.Despite the fact that Ethereum has made it easy for us to now build applications on the blockchain, let\u2019s admit it, most of us, even including us crypto-nerds, are still living in a world where we don\u2019t use decentralized applications in our day to day.Why is that?  To explain, let\u2019s go back to my earlier hypothesis on why we ended up at the \u201cwhere are the apps\u201d problem, and see how Ethereum addresses each one.Problem #1: Lack of developer friendlinessAs we described above, Ethereum solves this problem by design through its expressive programming language and strong developer tooling.Problem #2: Building up network effects is hardWith or without Ethereum, seeding and spinning the network effects is still a huge roadblock. Replacing existing network businesses who\u2019ve built up huge networks effects is\u2026 as we said before, really HARD. If someone builds a decentralized Airbnb, they still need to convince both sides of the platform, the users and hosts, to come on board.Problem #3: Doesn\u2019t provide 10x improvementWe learned earlier that most users wouldn\u2019t be willing to switch to a decentralized platform unless it\u2019s 10x better than an existing solution on some dimension.Just because it\u2019s easier to build a decentralized application on Ethereum, doesn\u2019t mean it provides the 10x experience we\u2019re looking for. And so, the question we might ask is, are we still right back to square one? still stuck in the trenches?Well, not really.Because although Ethereum doesn\u2019t directly solve the network effects problem, nor the 10x problem, what it does do is enable the creation of a whole new set of applications that were never possible before. The clearest way to make a 10x improvement is to invent something completely new. I believe Ethereum makes inventing something completely new possible by making it easy to build smart contracts.The rise of protocols, tokens, and applicationsWhy the big deal about being able to build smart contracts?ProtocolsWell, the beauty of being able to easily build smart contracts on Ethereum is that it enables anyone to easily build a new protocol on top of Ethereum. Remember that a protocol is simply a set of rules that nodes in a network use when they to transmit information. Smart contracts allow us to do exactly this \u2014 create an automated trustworthy set of rules between two or more parties.Earlier, we mentioned how blockchain protocols have a intrinsic \u201ctoken\u201d associated with it, which is a digital asset that can be transferred between two users in the network without requiring the consent of a third party. In the case of Bitcoin\u2019s blockchain, the intrinsic token is Bitcoin and in the case of Ethereum\u2019s blockchain, the intrinsic token is Ether.But just because the Ethereum and Bitcoin blockchain protocols have intrinsic tokens associated with it to drive the network, doesn\u2019t mean a protocol built on Ethereum using a smart contract must have a token associated with it. Remember that the purpose of a protocol is simply to specify rules for communication between nodes.So essentially, there\u2019s two types of protocols:Ones which have a intrinsic token associated with it that help create economic incentives that drive a networkOnes which don\u2019t have a token that drives financial incentives and are simply used as a communication protocol between nodes (Note: these types of protocols CAN still have a token associated with it \u2014 e.g. to represent membership in the network, shares on an open market, etc. The difference is that they are not used to drive some economic incentive.)For lack of better names, I\u2019ll call the first kind \u201ccrypto-token-protocols\u201d and the second kind \u201ccrypto-protocols\u201d.TokensNow onto tokens.Just like Ethereum makes it possible to build new protocols on top of its blockchain, it also makes it possible to use smart contracts to build new tokens on top of its blockchain. Let\u2019s call these types of tokens \u201cnon-intrinsic tokens\u201d.In this regard, broadly speaking, we can think of a token system as just a database with one operation: subtract X units from A and give X units to B, under the condition that:  (i) A had at least X units before the transaction(ii) The transaction is approved by AEthereum makes it especially easy to implement such token systems. More specifically, ERC20 token interface provides a standardized way to develop a token that is compatible with the existing Ethereum ecosystem, such as development tools, wallets, and exchanges.What\u2019s more, these non-intrinsic tokens can exist as:Standalone tokens built on Ethereum (as shown in the above diagram)Be associated with any new underlying crypto-token-protocol built on EthereumBe associated with any new underlying crypto-protocol built on EthereumProtocols? Tokens? Protocols + Tokens? Why does this matter?  Let\u2019s take a look.Token sale (i.e. \u201cICO\u201d)Launching a new cryptocurrency blockchain is not easy \u2014 it requires a massive bootstrapping effort in order to assemble the resources needed to get it up and running. But in the case of Ethereum, its intrinsic tokens were used to spin up their blockchains \u2014 in order to kickstart a large network of developers, miners, investors, and other stakeholders, Ethereum created some Ether tokens and launched a presale of these tokens to the general public. It then used these funds to develop its blockchain.Ethereum was not the first to do this. In 2013, when Ripple started to develop it\u2019s Ripple payment system, it created around 100 billion XRP token, and sold these tokens to fund the development of the Ripple platform.This concept of fundraising via a token sale is sometimes referred to as an \u201cInitial Coin Offering\u201d, or ICO. But the structure of this token can vary significantly (as we just saw in the previous section), whereas the term \u201cICO\u201d makes it sound a lot more official and like an investment security, so let\u2019s stick to \u201ctoken sale\u201d.A token sale is when some party offers investors some units of a new cryptocurrency (i.e. token) for a certain price, that can then later be exchanged with other cryptocurrencies (i.e. tokens). The idea is that investors buy into these tokens, and the units of the token are fungible and transferable on cryptocurrency exchanges (e.g. Bitfinex, GDAX, Liqui, etc.) if there is demand for them.While most token sales in the past have been restricted to building a new cryptocurrency (e.g. Ethereum, Ripple, etc), the smart contracts of Ethereum are now enabling startups to also to use token sales to fund development of various protocols and applications built on top of existing blockchains.Before moving on, one important distinction to make is the difference between an application and protocol.Application vs. protocolAn application can be built on one or more protocols. One example is Augur, which is a decentralized prediction markets application that is built on top of two protocols:Decentralized oracle protocolExchange protocolThe decentralized oracle protocol is a \u201ccrypto-token-protocol\u201d that has financial incentives to drive the network to form consensus around the outcomes of real-world events using Augur\u2019s reputation tokens (REP). The exchange protocol, on the other hand, is a \u201ccrypto-protocol\u201d and does not have a token associated with it to drive financial incentives, but instead is a set of rules defined between buyers and sellers in order to move tokens between each other.But neither of these protocols need to be tied to a single application. Any application can in theory build on top of these underlying protocols.Token sales for protocols vs. applicationsEarlier, I mentioned how token sales can be used to drive development of a new protocol and/or to drive development of a new application.   So in essence, a team can use an token sale to fund:a blockchain (e.g. Ripple)a cryto-token-protocol built on top of an existing blockchaina crypto-protocol built on top of an existing blockchainan application built on top of a cryto-protocolan application built on top of a crypto-token-protocolan application built on top of crypto-protocol(s) and non-crypto-token-protocol(s)an applicationSo, pretty much anything :)The last one is interesting, because to do a token sale, the application doesn\u2019t even need to be built under a protocol. I can build non-profit organization and use tokens as a mechanism to fund the project. In this sense, a token sale simply becomes a new way to fund a traditional centralized application. A plain old crowdsale.Okay, so investors buy these tokens and then what happens?Depends. When a token is tied to a cryto-token-protocol, they look much more like intrinsic tokens like Ether and Bitcoin and are used to drive the development and network of a protocol. But when they are not, tokens simply represent something much more general. In fact, these tokens are flexible enough to represent a lot of different things.For instance, let\u2019s say I want to build a decentralized storage service. I can build a storage protocol using smart contracts which serve as agreements between a storage provider and their client, defining what data will be stored and at what price.I would then build a token for this protocol and do a token sale. If the protocol becomes widely used, then the protocol becomes more valuable, which in turn could increase the value of the token. Moreover, as a developer of this service, I could choose to make the tokens represent purchase rights to the services provided in the application.What\u2019s important to note is that, broadly speaking, the mechanism for creating tokens are so flexible that they can represent lots of different things:Paid credits/membership within the decentralized applicationEntitlement to a share of profits and/or losses, or assets and/or liabilitiesOwnership or equity interest in the protocol (or project)Voting power in the companyNo function other than mere existence \u2014 simply a digital asset that can be freely traded on cryptocurrency exchangesetc..There\u2019s a handful of projects which have successfully raise funds via a token sale, including as Augur, Antshares, Melonport, Gnosis, Antshare and many more. I\u2019d suggest you read their respective white papers if you want to learn more.Protocols, tokens, token sales, now what?We\u2019re at a point where Ethereum has made it easy to not only build protocols that can power decentralized applications, but also to help get a network off the ground. Ethereum does this in two ways: 1. MoneyThis one is obvious. As we already saw, a token sale now enables developers to easily release tradable tokens to raise funds for building a protocol and/or application. Using this money, the team could choose to invest in sales, marketing, etc. to drive the network.2. UsersThis is the more interesting piece of the puzzle. Protocols and decentralized applications can solve the network effects problem by using a token sale as a mechanism to get early contributors and adopters. Early adopters who believe in the protocol or application have an incentive to buy the token because there is potential for that token to be worth more in the future.So in essence, tokens could help bootstrap a network of early adopters because the incentives of the early adopters and the development team line up perfectly.Let\u2019s say you want to build a new file sharing protocol. You can launch a token sale through which you gain some early adopters, investors, and entrepreneurs who become interested in \u201cbuying in.\u201d They might be simply speculating or they might truly believe in the product. At that point, they become stakeholders in the protocol itself and are financially invested in its success. Then some of these early adopters either become users of the products built on top of the protocol or build products and services around the protocol themselves, with the incentive to drive the success of the protocol further in order to increase the value of their tokens. As the protocol gains adoption, it increases the value of the tokens, which further draws more attention from more investors, application builders and users, which leads to more applications, and so on.What Ethereum has done is create an incredibly flexible system to innovate at the protocol level and application level. We\u2019ll likely see a lot of experimental and innovative protocols and applications being built over the coming years. Many of these will fail, just like a lot of startups fail. But over time, it\u2019s likely that some core set of protocols and associated networks will successfully drive mainstream adoption.Finally, once the protocols begin to take shape and standardize, we\u2019ll see a whole host of decentralized applications being built on top.It\u2019s not a happy ending yetToken sales are providing the fuel needed to drive development of protocols built on top of the blockchain, and to further drive developer interest in building applications on top of these protocols.Of course, this isn\u2019t the perfect happy ending.For one, getting a bunch of early adopters isn\u2019t enough. You also need to work hard to sustain the growth of the network effects, just like traditional businesses do. That means putting in years of hard work to building a useful application and driving adoption.Secondly, another trend I\u2019ve noticed is that most of the token sales we are seeing today are being used to drive network effects around specific applications rather than open and decentralized protocols. Since tokens are so flexible, dApp developers are creating tokens that are coupled to the dApp, instead of a standardized underlying protocol that can be shared among applications. This could lead to fragmentation in protocols.Third, the initial growth of the token value is mostly driven by speculation (since it takes some time for the platform being built to become valuable). Hence, there will likely have high volatility. It\u2019s unclear if and how we can mitigate this, and if we can even figure out a mechanism to get token prices to stabilize over time. Overall, there\u2019s a lot of open questions around the viability of a token\u2019s value over time. Ideally, we want the token\u2019s value to be tied to the value of the protocol or application, similar to how a public company\u2019s stock is tied to the company that issued it, or to represent some valuable digital right to a service. But as of today, the value of these tokens is still mostly speculation.Fourth, the market for token sales incredibly frothy right now. Because securities regulations makes it difficult to sell tokens (which are unregistered securities) as equity (remember that a token can represent anything, including equity within the protocol or application), developers are not doing it. Instead, they are structuring them as crowdsales. While there are some highly respectable projects raising much needed capital in this manner without the hassle of regulation, there\u2019s a long tail projects that are simply taking advantage of the high demand in the ICO market to raise millions of dollars in capital with very little to show for it \u2014 some of which have even turned out to be outright scams that absconded with the funds collected during the process. We want these crowdsales to benefit the groups of people gathering together to build a common public good, but not the scammers. How do we achieve that?Besides these issues, there are still lots of unanswered questions that need to be figured out before token sales become a viable form of funding:What is the right design and structure for a token sale?In what cases does it make sense to structure tokens as an investment security? How should such token sales be regulated?What criteria should an individual investor use to evaluate token sales? (team, business model, etc)How is an investor guaranteed that the sale process in being managed in a safe and legal manner?Does there need to be a mechanism for distributing a portion of the liquidation value of the company among the token holders? Dividends?Can the token holders exercise control in the protocol or application via voting rights?How will the money be spent after the funds are raised?What metrics can an investor use to gauge trust that the team building the protocol or application will execute on the long-term plan and vision?Could it be more efficient to port the smart contracts of a token to use Ether directly, instead of creating a new token per protocol?What are the tax implications for the investor\u2019s gains or losses?If selling tokens become a new way to raise capital for startups, what happens to traditional Venture Capitalists?\u2026 and SO MUCH MOREIf these questions interest you, you\u2019re in luck \u2014 I\u2019ll write about some of them in upcoming posts!ConclusionI\u2019ve tried my best in this article to articulate my views on token sales and clear up some of the confusion around blockchain development in general.Talking about cryptocurrency and blockchain development is like trying to take a picture of a running cheetah. The space is moving at breakneck speed, and any attempt to pin it down results in a blurry picture. Regardless, I still believe it\u2019s important that we educate the broader community on cryptocurrency topics.If you feel that I\u2019ve made any overreaching assumptions in this walkthrough, please share commentary below! I\u2019d love to talk more and learn from each other.We need everyone\u2019s input to figure out the right path towards a healthy and sustainable cryptoeconomic future.Hacker Noon is how hackers start their afternoons. We\u2019re a part of the @AMI family. We are now accepting submissions and happy to discuss advertising & sponsorship opportunities.If you enjoyed this story, we recommend reading our latest tech stories and trending tech stories. Until next time, don\u2019t take the realities of the world for granted!", "responses": ""}, {"title": "", "author_name": "", "link": "https://blog.coinbase.com/ethereum-is-the-forefront-of-digital-currency-5300298f6c75?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "Ethereum is the Forefront of Digital CurrencyFred EhrsamFollowMay 24, 2016 \u00b7 11 min readWe have sat here for the last 3 years seeing only infrastructure apps like wallets and exchanges emerge on top of Bitcoin. Why is that?My theory has been that the scripting language in Bitcoin \u2014 the piece of every Bitcoin transaction that lets you run a little software program along with it \u2014 is too restrictive.Enter Ethereum. Ethereum has taken what was a four function calculator of a programming language in Bitcoin and turned it into a full fledged computer. We now stand only 9 months out from the beginning of the Ethereum network and the level of app development is already faster than Bitcoin\u2019s. We are finally getting rapid iteration at the app layer. In one early example, people have designed a decentralized organization (The DAO) \u2014 a company whose heart is code and peripheral operations are run by humans, rather than the other way around \u2014 that has raised $150m so far in the largest crowdfunding ever.To be clear, I don\u2019t think this needs to be a contest between Bitcoin vs. Ethereum and Coinbase plans to strongly support both. I think this is about advancing digital currency as much as we can. There is a significant amount of overlap between the two, however, so the comparison is valuable and the potential for competition is real.How did we get here?First, some history. When the Bitcoin white paper emerged in 2008 it was completely revolutionary. The amount of concepts that had to come together in just the right way \u2014 computer science, cryptography, and economic incentives \u2014 was astonishing. When the actual Bitcoin network launched in 2009, no one knew about it, and many of those who did thought it would surely fail. Just to make sure the thing worked, the scripting language in Bitcoin was intentionally extremely restrictive. \u201cScripting language\u201d is a fancy way of saying an easy to work with programming language (in fact, Bitcoin doesn\u2019t exactly have a scripting language, it uses a stack with script operators \u2014 more on that later). The scripting language in Bitcoin is important because it is what makes Bitcoin \u201cprogrammable money\u201d. Within each Bitcoin transaction is the ability to write a little program. For example, you can write a little program in a Bitcoin transaction that says \u201cthis transaction isn\u2019t valid unless it\u2019s June 15th, 2016 or later\u201d. This is very powerful because you can move money automatically with computer code and everyone can see the rules by which that money moves and know those rules will be followed.It was, and still is, incredible that Bitcoin got off the ground and is alive after 7 years. It is the first network ever to allow anyone in the world to access a fundamentally open financial system through free software. It has ~$7bn in market cap and has never had a systemic issue which could not be fixed. To some this is already a great success.However, we also stand here 7 years into Bitcoin with few apps and no \u201ckiller apps\u201d beyond store of value and speculation. The scripting language in Bitcoin has barely expanded and remains very restrictive. While Bitcoin has become embroiled in debate over the block size \u2014 an important topic for the health of the network, but not something that should halt progress in a young and rapidly developing field \u2014 Ethereum is charting new territory, both intellectually and executionally.Make no mistake \u2014 Ethereum would never have existed without Bitcoin as a forerunner. That said, I think Ethereum is ahead of Bitcoin in many ways and represents the bleeding edge of digital currency. I believe this for a few reasons:Ethereum\u2019s programming languages lets you do much more than Bitcoin\u2019sAs mentioned above, Bitcoin\u2019s scripting language is intentionally restrictive. You might liken it to programming with an advanced graphing calculator \u2014 functionality is limited. As a result, you can only do basic things. It is also hard to understand and use. Rather than most modern programming languages where the code is almost readable like a sentence, it looks like unintelligible machine code. As a result, it took Mike Hearn, a talented ex-Google developer, a whopping 8 months to write a first version of a fairly simple crowdfunding application.In contrast, Ethereum\u2019s programming languages (Solidity for those who like Javascript, Serpent for those who like Python) let you do pretty much anything an advanced programming language would let you do. This is why they are said to be \u201cTuring complete\u201d. Equally important, they are easy to use. It is simple for any developer to pick it up and quickly write their first app.Here\u2019s an example of a script in Bitcoin:OP_DUP OP_HASH160 62e907b15cbf27d5425399ebf6f0fb50ebb88f18 OP_EQUALVERIFY OP_CHECKSIGAnd one in Ethereum\u2019s Solidity:contract Simple {    function() {        var two = 1 + 1;    }}Developers at Coinbase have written simple Ethereum apps in a day or two.I cannot overemphasize enough how important this combination of full programming functionality and ease of use is. People are doing things in Ethereum that are not possible right now in Bitcoin. It has created a new generation of developers which never worked with Bitcoin but are interested in Ethereum.Bitcoin could have this advanced functionality, but it would be through a series of other layers that work with the Bitcoin protocol that haven\u2019t been created yet, while Ethereum is providing it out of the box.Beyond the radical difference in scripting languages, developer tools are much better in Ethereum. Bitcoin has never had a set of developer tools that caught on much, and they are sorely needed given it is much harder to work with Bitcoin out of the box. Ethereum has made life as a developer much easier. It has a welcoming homepage for devs and its own development environment (Mix IDE) amongst others.Ethereum has a more robust developer communityThe developer community in Bitcoin feels fairly dormant. Bitcoin never really made it past the stage of simple wallets and exchanges. The most notable thing to be released recently is an implementation of the Lightning Network (a way of making transactions, especially microtransactions, more efficient) called Thunder. This is an additional protocol layer, not an application, however, and could be used by both Bitcoin and Ethereum.In contrast, Ethereum\u2019s developer community feels vibrant and growing. Most importantly, entirely new things are being tried on Ethereum. While most are experiments or toys at the moment, you can see a list of apps that developers from around the world which is rapidly expanding.Developer mindshare is the most important thing to have in digital currency. The only reason these networks (Bitcoin, Ethereum) and their tokens (bitcoin, ether) have value is because there is a future expectation that people will want to acquire those tokens to use the network. And developers create the applications which drive that demand. Without a reason to use the network, both the network and its currency are worth nothing.Ethereum\u2019s core development team is healthy while Bitcoin\u2019s is dysfunctionalVitalik Buterin, the creator of Ethereum, has shown early promise as the leader of an open source project. He seems both comfortable as a community and technical leader. As an example, here\u2019s what he sent us when we added Ethereum to GDAX, our exchange.In contrast, Bitcoin has had a leadership vacuum since Gavin Andresen stepped aside after other core developers did not get on board with his (in my opinion rational and convincing) arguments to increase the block size. \u201cCore developers\u201d as they now stand are also relatively fragmented.Beyond a leadership vacuum, Bitcoin\u2019s \u201cleadership\u201d is less clear and toxic. Greg Maxwell, technical leader of Blockstream which employs a solid chunk of core developers, recently referred to other core developers who were working with miners on a block size compromise as \u201cwell meaning dips***s.\u201d A second discussion board needed to form on reddit, /r/btc, because of censorship on the original /r/bitcoin. The content on the Bitcoin discussion boards feels like squabbling while Ethereum\u2019s is talking about relevant issues and new ideas. In summary, Ethereum leadership (and as a result its community) is moving forward while things need to get worse before they can get better in Bitcoin.Ethereum has a growth mindset while Bitcoin has a false sense of accomplishmentThe general mindset of the two communities feels different as well. Many in Bitcoin seem to have a false sense of \u201cwe\u2019ve got this really valuable network we need to protect!\u201d. In my opinion that view is wrong and dangerous. Bitcoin is still orders of magnitude smaller than the major financial networks of the world at ~$200m/day in transaction volume (Visa $18 billion/day, SWIFT wire $5 trillion/day) and ~10 million users (5 billion in banks). And while transactions per day on Bitcoin seem to be increasing at a healthy pace, the actual $ volume of transactions on Bitcoin is not growing much.Bitcoin transaction volume in peak times compared to other networks \u2014 we\u2019ve got a long way to goMeanwhile, the core development team in Ethereum is focused. This is evident from the Ethereum blog. When I started reading it, it was everything I found myself thinking about for the present and future of Bitcoin but didn\u2019t see being discussed much: scaling the network, the viability of proof of stake, how to create a stable digital currency, what a blockchain based company (DAO) would look like, amongst other topics. These are very ambitious ideas and some won\u2019t work. But some probably will work, and they will be important \u2014 moving to proof of stake and eliminating physical mining being one of the most promising.Ethereum is making faster and more consistent technical progress on the core protocolIn Bitcoin, we have mostly been stuck on the block size debate for the last year and a half. Some minor improvements have been made (CHECKLOCKTIMEVERIFY to enable the time locking functionality mentioned earlier), and others are in development but not yet live (Segregated Witness to make the network more efficient). None of these changes have sparked much in the way of application development yet.Meanwhile, beyond the more robust programming language, Ethereum is making advancements that are core to even basic transactions. Its mining allows for much quicker blocks, and thus, transaction confirmation times \u2014 about 14 seconds on Ethereum compared to 10 minutes on Bitcoin (not an apples to apples comparison, but the larger point holds). This is largely due to the concept of miners getting paid for the work they put in whether or not they are the first to solve the next block (a system called \u201cuncle blocks\u201d). While this system isn\u2019t perfect yet, it\u2019s meaningful forward progress towards quicker transaction confirmations.Counterargument and caveatsEthereum is young and it\u2019s prudent to highlight the risks:Ethereum has been able to take more risk with new features because it is has had less to lose. Most of Ethereum\u2019s history has occurred while it has held in the hundreds of millions of dollars, while Bitcoin is in the billions. As Ethereum continues to grow, it may not be able to \u201cmove fast and break things\u201d in the same way. In practice I think this mostly comes down to the quality of the core development team \u2014 if they continue to make progress and build trust with the community execution can still be rapid, as shown by Linus Torvalds with Linux as an open source project.Ethereum hasn\u2019t gone through a governance crisis. Vitalik acknowledged this at an Ethereum meetup we hosted at Coinbase. Like any project that has success, it\u2019s inevitable to hit bumps as peoples\u2019 vested interests get bigger.Ethereum allows you to do more than you currently can in Bitcoin, and that brings increased regulatory risk. This is less of a systemic risk to Ethereum as a network, rather more of a risk to specific applications of Ethereum. A good example would be decentralized organizations (ex: the DAO) and regulation which would normally apply to a corporation.There is a greater security risk with Ethereum. Having a more robust programming language creates a greater surface area for things to go wrong. Bitcoin has been battle tested for 7 years. Ethereum has been live for 9 months and now stores about $1bn. While there hasn\u2019t been a major issue yet, it is possible there are issues people are not yet aware of. This probability goes down with each passing day. People will definitely create smart contracts with bugs in Ethereum. This won\u2019t be because of a failure of the core Ethereum protocol though, much like the failure of Mt. Gox was not an error in the Bitcoin protocol.Ethereum may attempt to move to proof of stake. This would be a huge breakthrough if it works as it would eliminate the need for proof of work and all of the hardware and electricity use that goes with it, but also presents a large risk. I believe this risk is manageable because there would be extensive testing beforehand.Scaling the network is harder when it supports mini programs in addition to basic transaction processing. This was the biggest question I had when I started to read about the idea in 2014. While there is no silver bullet here, I think some combination of solutions will be developed over time as they are with any evolving technology. Some possibilities for Ethereum are sharding the network, computing power and networks naturally getting faster over time, and the economics of the Ethereum blockchain only running the most important things as a forcing function. There is a decent argument (best articulated by Gavin Andresen in his article Bit-thereum) that it\u2019s better to keep the base transaction layer dumb for scaling reasons with advanced logic in higher layers. It\u2019s possible we come full circle and end up back there, but this isn\u2019t how interesting things are being created at the moment because it\u2019s harder to 1) create and 2) get decent adoption of multiple layers in the stack than it is to have it all out of the box in Ethereum.Wait \u2014 why is this a contest? Are Bitcoin and Ethereum competitors or complementary?This remains to be seen. It\u2019s possible Bitcoin remains the protocol that people are comfortable storing their value in because it is more stable and reliable. This would allow Ethereum to continue to take more risk by trying less tested advancements. In this scenario, Bitcoin is more of a settlement network while Ethereum is used to run decentralized applications (where most of the transaction volume occurs is up in the air). The two could be quite complementary.What is very real, though, is the possibility that Ethereum blows past Bitcoin entirely. There is nothing that Bitcoin can do which Ethereum can\u2019t. While Ethereum is less battle tested, it is moving faster, has better leadership, and has more developer mindshare. First mover advantage is challenging to overcome, but at current pace, it\u2019s conceivable.What does all this mean?It\u2019s all good news for digital currency. Ethereum is pushing the envelope and I am more excited than ever. Competition and new ideas create better outcomes for everyone. Even if Ethereum goes up in flames our collective knowledge in digital currency will have leveled up significantly. I have not given up on Bitcoin and it\u2019s hard to argue with a network that has been so resilient. I, and Coinbase, plan on supporting both. We\u2019ll probably support other things that haven\u2019t been invented yet in the future. At the end of the day, I have no allegiance to any particular network; I just want whatever brings the most benefit to the world.Taking a step back, it feels like the rate of change in digital currency is accelerating.Digital currency is a unique field because of how ambitious the scope is: creating a better transaction network for the entire world (for currency, assets, our online identities, and many other things). Like the Internet itself, this is not one company selling its own proprietary product, it is a series of low-level protocols that will connect everyone someday. And, like the Internet, it will (and has) taken longer to develop, but the impact will be immense.Fasten your seatbelts.", "responses": ""}, {"title": "", "author_name": "", "link": "https://media.consensys.net/the-state-of-the-ethereum-network-949332cb6895?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "The State of the Ethereum NetworkConsenSysFollowJun 1, 2018 \u00b7 6 min readAfter months of intense attention on blockchain technology and the Ethereum blockchain, we pull together statistics from across the network to provide a snapshot of Ethereum today, its past, and its roadmap ahead.Blockchain technology \u2014 and Ethereum in particular \u2014 has gained international attention and traction since its release in 2015. In particular, late 2017 and early 2018 saw a massive increase in popular attention due to rapid price increases across the entire crypto-asset ecosystem. In two years, the word \u201cEthereum\u201d has been included in over 110 million Google searches. The hashtag #ethereum is tweeted, on average, 20,000 times a day.But what has this gradual and acute increase in attention meant for the Ethereum network as a whole? If we pull back the curtain of the much-discussed price of ether, what is happening on the Ethereum network? Let\u2019s take a look.Looking at the Figures: Blockchain ActivitySince its inception, the network has processed nearly 240 million transactions. At its height on January 4, the network processed 1.3 million transactions in 24 hours.The network is huge and distributed. To date, 35 million unique addresses exist on the Ethereum blockchain. On January 4, 2018, the number of active (i.e. transacting) addresses on Ethereum surpassed 1 million for the first time. On January 4, 2018 over 350,000 new addresses were created \u2014 the most addresses generated within a 24 hour period to date. Ethernodes reports just under 17,000 nodes running the Ethereum blockchain across six continents, making it the most decentralized blockchain platform in existence.Source: ethernodes.orgThe Ethereum blockchain is, without a doubt, the most active smart contract platform in existence. Of the top 100 tokens by market cap, 94% are built on top of Ethereum. Of the top 800 tokens, 87% are built on Ethereum. Most of these tokens are \u201cERC-20 tokens,\u201d which made possible the majority of the $5.5 billion raised through token sales in 2017 and the $6.5 billion raised in just the first quarter of this year.Behind the Blockchain: The Ethereum CommunityThe Ethereum developer community is estimated to be the largest in the world, at 250,000. In October 2017, Truffle \u2014 a development framework for Ethereum \u2014 surpassed 200,000 downloads. In less than a year, downloads are now at nearly 550,000. Github, which draws open-source developers from around the world, lists 14,000 repositories and 220,000 commits concerning Ethereum. MetaMask \u2014 a browser extension allowing users to to run dApps without running an entire Ethereum node \u2014 has reached over 1 million users.Beyond the decentralized network of Ethereum developers, organized consortiums have arisen to support and expand the Ethereum community. The Ethereum Enterprise Alliance (EEA) formed in March 2017 with 30 founding members committed to the integration of blockchain technology with enterprise establishments. Now, just over one year later, the EEA has grown to over 500 members. Startups, corporations, foundations, and organizations have all come together to contribute and benefit from the continued development of the Ethereum ecosystem.Welcoming Ethereum: Government AdoptionThough a long-discussed application of blockchain technology is the restructuring and even dissolving of traditional government, countries around the world have found ways to implement blockchain technology \u2014 specifically, Ethereum \u2014 to benefit their citizens. In the beginning of this year, the government of Brazil announced its intention to move petitions and popular voting onto Ethereum. Canada is testing out using Ethereum to provide transparency to the use of government grants to ease citizens\u2019 concerns of misappropriation and corruption. The city of Zug, Switzerland \u2014 a long-time crypto bastion \u2014 began offering digital IDs registered on Ethereum in 2017. Chile uses Ethereum to track the data and finances from the energy grid, hoping to combat corruption and exploitation through transparent, immutable data available for every citizen to see. Dubai is on the move to become an entirely integrated, blockchain-powered city by 2020. Estonia became the poster child of the distributed ecosystem and matured into a \u201cdigital republic\u201d by moving many of its national systems onto the Ethereum blockchain.Though blockchain technology has been cited as an opportunity to re-define the current global political structure with digital borders and citizenships, current systems are not wary of using its immutable, secure ledger to augment their services. We will continue to see government adoption of the Ethereum blockchain as its utility is proven in current examples.Building on Ethereum: Decentralized ApplicationsDecentralized Applications (dApps) are the primary selling point of the Ethereum blockchain. As an open-source, turing-complete, world computer, Ethereum can be leveraged by any developer to build her own series of smart contracts (i.e. a decentralized application). A site that tracks dApp development lists 1,552 launched dApps, though more are currently in development. DApps consist of everything ranging from prediction markets to gaming, and will continue to grow stronger as the network is improved upon.The Elephant in the Room: Scaling SolutionsScaling solutions for the Ethereum network are numerous, and are being worked on by multiple participants in the network. 2018 will be an exciting time for Ethereum, particularly with the projected testing of Proof of Stake through the rollout of the Casper protocol. Many active projects aim to provide layer 2 solutions, or \u201cinter-blockchain protocols.\u201d These initiatives tackle the \u201ctrilemma\u201d of achieving scalability, security, and decentralization on a blockchain. Cosmos is a permissionless network built for developers that allows blockchain interoperability and scaling. Loom Network has developed and launched a layer 2 platform on top of Ethereum, allowing gaming and social dApps to scale while still relying on Ethereum\u2019s core security and decentralization. The team has launched CryptoZombies, a live app enabling anyone to learn to code smart contracts on Ethereum (with over 200,000 students). OmiseGo allows users to send high-speed payment transactions between entities and across borders using plasma. Layer 2 scaling solutions, according to Vitalik Buterin, \u201ccan be built in such a way that they depend on the second level for performance, but not safety\u2026 They can then have the incentive of reputation and expected future revenue to drive them to perform well in the present, and the negative costs of any failure are mitigated.\u201dLooking Down the RoadWhat does this data mean? The Ethereum blockchain ecosystem is diverse, it is decentralized, it is strong, and it is flooded with innovation and activity. Since its launch in 2015, this rapidly-adopted and appreciated technology promises to solve issues plaguing almost every incumbent industry on earth. Across the world, developers, thinkers, innovators, leaders, and creatives are coming together to build a new way of communicating, transacting, and organizing. We\u2019re here for Web 3.0. We\u2019re here for a decentralized future. We\u2019re here for Ethereum.Zunaira Arshad, Everett Muzzy & Jeff Gillis, ConsenSysDisclaimer: The views expressed by the author above do not necessarily represent the views of Consensys AG. ConsenSys is a decentralized community with ConsenSys Media being a platform for members to freely express their diverse ideas and perspectives. To learn more about ConsenSys and Ethereum, please visit our website.", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/bitfwd/how-to-issue-your-own-token-on-ethereum-in-less-than-20-minutes-ac1f8f022793?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "How to issue your own token on Ethereum in less than 20 minutes.Moritz NetoFollowDec 26, 2017 \u00b7 9 min readAlright bro, are you telling me that I can issue my own Token, make an ICO, get gazilions of dollars and live the crypto-dream in less than 20 minutes?The answer is yes, but hopefully you will do better than that.With the latest news about the Blockchain, Bitcoin, Ethereum, cryptocurrencies, and ICO popping up left, right and center, this Blockchain business is garnering quite a lot of attention. So I\u2019ve put together a tutorial so that you can understand the technology much better and you can become a part of the booming crypto-economy!This is the first of a series of tutorials to help people better understand how to leverage Blockchain technologies and crypto-currencies to build meaningful applications and nurture the network.In this tutorial my objective is to walk you through the steps of setting up your account through to issuing your first token on the Ethereum network using a single smart contract and MyEtherWallet.The token will be a standard ERC20, it will have the main functions and can be used as a general base for more sophisticated applications than just transferring them (many \u201chalf-serious\u201d ICOs have extremely similar contracts)WARNING: With great powers come great responsibilities. I\u2019m not responsible for you not being cautious with your ETH, or using these powers for the evil side of force. I truly hope you do good and feel empowered by the potential that this technology puts in the hands of people.Before we start:There are a few different components you will need in order to build your own token.Ethereum Address (Ropsten Network)Some Ethereum (Ropsten Network)A text editor (I.e. Sublime / Atom)Solidity contractEthereum addressFor this tutorial we will use a test network to issue the token so you don\u2019t end up spending real Ether\u2019s. We will use the Ropsten Test network. In order to get started, go to MyEtherWallet (MEW) and create an account there.To get setup, click the right hand side corner, change the network to Ropsten (MyEtherWallet) \u2192 click the New Wallet \u2192Enter a password you can remember \u2192 Download / Save your Keystore file in a safe space \u2192 Save your Private Key in a safe space.To view your wallet address, go to \u2192View Wallet Info \u2192Private Key \u2192 Enter the saved private key \u2192Unlock your Wallet and it should be there!Text EditorDownload one of the following text editors:Sublime TextAtomContractDownload the smart contract that the legendary Ethereum unicorn rider, BokkyPooBah has helped us to make, by clicking here. \u2b05\ufe0fYou will be editing this code for your own tokenRopsten EthersWe have created our own faucet where you can request Ropsten Ethereum! Just access https://faucet.bitfwd.xyz/ and put your ropsten address and our smart contract will send you some! (**bitfwd Faucet is temporarily down so use: https://faucet.metamask.io/ **)Transfer only once please! And if it doesn\u2019t work let me know in the comments!\ud83d\udea8Many faucets in the ecosystem are going through some problems due overload in requests. The best way to get Ropsten in the bitfwd one doesn\u2019t work is using Metamask! That one is always full.Basically what you will have to do in simple terms:Download MetaMask at metamask.io.Select Ropsten Network.Select DEPOSIT.Claim 1 Ropsten ETH.Transact to the address you will use for the tutorial on MyCrypto.IMPORTANT!After going through this Tutorial, jump in Twitter and let me know how was your experience with this article, what have you built and what you are up to!Now let\u2019s get started:Open the contract you downloaded in your Text Editor.Go to Line 3\u201315 and look at the comment section. Although this is a comment section, this will help you down the track. For me, 0Fucks was my first one :). Basically you send 0Fucks to someone when you don\u2019t care.Change Line 4 to the title of your Smart ContractChange Line 6 to the Ropsten Ethereum address you created in MyEtherWalletChange Line 7\u2019s Symbol to your respective coin name (Keep it short)Change Line 8 to the name of your tokenLine 3 \u2014 15Next:Go to Line 102 and change \u201cFucksToken\u201d to \u201c(YourTokenName)Do the same for Line 115Go to Line 116 and change the symbol name, the same as the ones you did in the comment sectionDo the same for Line 117Change Line 120\u2019s Address to be the same as the one you generated in MEWSame goes for Line 121For the decimals and total supply on Line 118 and 119, you can just leave it as it is however I\u2019ll explain it just for visibility. On total supply there are actually a few considerations. First one is that the standard (and max) is 18 decimals, meaning that a coin can be splitted in 18 parts.The second one is that let\u2019s say for example you want to issue 100 tokens, on the total supply part you have to put 100 followed by the number of decimals that you choose.Ex: If I want to emit 100 tokens, what I will put on total supply is: 100000000000000000000; and so it goes.Lines 102\u2013105After that we are done with editing code. Yep, that was easyyyy. Now we are going to do some cool stuff\u2026Go to http://remix.ethereum.org/In the browser/ballot.sol, paste the code you just edited! If something red comes up, there is something wrong in the code. If there is yellow warning it\u2019s alright, let\u2019s hope for the best.Now Under Compile \u2192Details \u2192Choose the Token you are creatingUnder ByteCode press the \ud83d\udccbbutton to copy the ByteCode to your clipboard \u2014( Into this section, what may appear are different things on the ByteCode. What you have to copy is the \u201cobject\u201d ByteCode, adding a 0x in the beginning. So you will have 0xByteCode.)Remix EditorGo to MEW where we will start to deploy the contract. Remember we want to be on the Ropsten Test Network so make sure the top right hand corner saysNavigate to the Contracts tab \u2192 Press Deploy ContractPaste your ByteCode into the ByteCode box. Your gas limit should automatically updateAccess your wallet by going into the Private Key \u2192 Enter your private key \u2192Unlock your walletNow press Sign Transaction \u2192Deploy TransactionATTENTION: This is the moment where you have to cross your fingers for the first time during a few seconds. \ud83e\udd1eClick on the transaction tx or access https://ropsten.etherscan.io to check if the contract went through. If it didn\u2019t, start again and try to figure it out what you got wrong. If it did, you are a basically Vitalik 2.0, be proud.\ud83d\ude0eIf everything works out, this is a sample image of what you should be seeing.Now we are going to register this contract. To do that:In the Overview Tab \u2192 Click on the Contract AddressGo to the Contract Code Tab \u2192 Click Verify and PublishNearly there\u2026 The following steps are really important. So look carefully. Basically what we are doing here is trying to guarantee that the code fits what you saying you are deploying and registering this on the network. FOREVER.So if you commit mistakes, it will be wrong forever. What a friend told me that on the Blockchain:Get it right once or get it wrong forever.Now you have 5 things to do on this page.Be sure that the contract address field corresponds to the contract address that you have just deployed. Remember contract address is different to the MEW address you created so make sure not to get them confusedThe contract name has to match the one in the code, in my case is this: contract FucksToken. This was on Line 102 in your codeTo check which version of the complier, go back to the remix page where you got the BYTECODE from and look at the URL, the complier version will be there. In most cases it should be: v0.4.19+commit.c4cbbb05.js , but you want to try updated ones if by any chance this doesn\u2019t work.On Optimisation, choose No (We haven\u2019t enable it before).On ENTER THE SOLIDITY CONTRACT CODE BELOW, copy the whole code from Remix, and paste in that area. NOT THE BYTECODE, but the code itself. Can also be copied from your text editor.Now, leave the other fields in blank and click on Verify and Publish.But be aware\u2026 This is the moment that you were waiting for\u2026 It is about to happen!FINGERS CROSSED AGAIN FOR VITALIK\u2019S SAKE. \ud83e\udd1eThe final boss\u2026The moment of truth\u2026Success!!!If a success page come along with green checkmarks and stuff, you did it! You\u2019ve made it, I\u2019m proud of you, now you are a cypher punk, a part of the crypto movement. Yaaaaaaay!If a red message comes along\u2026try it again and see where you might have missed a step. I\u2019m happy to help if you leave a comment below but remember Google is your best friend \ud83d\ude09To confirm that it works, go to https://ropsten.etherscan.io/ and look into your MEW Address, not the contract one, but your public address. If you can see your coins there, now you can relax and live the crypto dream in peace! At least until the next BTC rally :)))))To be able to send these tokens, you need to access your MEW account by Viewing Wallet Info \u2192Accessing and putting in your private Key \u2192Unlocking Wallet \u2192Select the option Load Tokens. After that they will show up to be transferable.Final Considerations:You just made your own Cryptocurrency Token. This is the simplest way I have been able to put a token together. However, this is just the token creation process, it is not a crowd sale contract. I will upload another tutorial very shortly.You\u2019ve just unlocked some Blockchain superpowers and I hope this helped you become more interested and involved with the amazing space. But remember that with great powers come great responsibilities. I truly hope you use your ideas for good and don\u2019t be another scam.Leave any questions or comments in the section below and share with everyone if you are working on something interesting. The bitfwd community is always keen to help with cool and meaningful projects.Keep Reading.NOW WHAT?Now that you have your tokens, don\u2019t forget to send me some, I would love to see what you have built. Send your brand new token to 0x5a86f0cafd4ef3ba4f0344c138afcc84bd1ed222\ud83d\udea8\ud83d\udea8NEW TUTORIAL\ud83d\udea8\ud83d\udea8How to launch you own ICO in less than 20 minutes?After a ton of people asked for this tutorial, I\u2019ve managed to put the time together and finally did it. Don\u2019t forget to give a bunch of love!!!!What are you working on?I\u2019m absolutely obsessive about my project TENZORUM. We are working insanely hard to make Blockchain truly accessible to everyone.Tenzorum is a key management protocol built from the ground up using advanced cryptography and UX centric philosophy to manage keys across different Blockchains.Yes, that cool \ud83d\ude0e.To get updates about it you should check Tenzorum.org.\ud83d\udc48Add me on Twitter for more damn good content about Crypto and the Universe.Now that you went through everything, don\u2019t forget to let me know how was your experience with this article, what have you built and what you are up to!\ud83d\udd96Twitter -> @mrtznetoP.S. If you like it give me at least a 20 claps for good luck in crypto this year ;)", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/@ConsenSys/a-101-noob-intro-to-programming-smart-contracts-on-ethereum-695d15c1dab4?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "A 101 Noob Intro to Programming Smart Contracts on EthereumConsenSysFollowOct 29, 2015 \u00b7 28 min readOriginally published at consensys.github.io/developers (where some of the code formatting might be easier to read).Some people say Ethereum is too logic-heavy and hard to use, but here\u2019s a write-up to give you a feel for building smart contracts and applications with it. Tools, wallets, applications and the ecosystem are still in development and it\u2019ll get easier!Part I is an overview of key terms and discusses Ethereum Clients and Smart Contract Languages.Part II discusses overall workflow and some current DApp Frameworks and Tools andPart III is the Programming Part, a quick walkthrough of writing tests and building a DApp for a smart contract using Truffle.Part I. IntroIf you\u2019re new to all this cryptocurrency stuff, including Bitcoin and how it works, check out the first couple chapters of Andreas Antonopoulos\u2019 Bitcoin Book to dip your toe in the water. Then head over to the Ethereum Whitepaper.If you start getting into some murky sections and would rather build something to get familiar first, then just read on. You don\u2019t have to understand all the crypto economic computer science to start building, and a lot of that paper is about Ethereum\u2019s improvements over Bitcoin\u2019s architecture.Starter TutorialsThe official place to start is ethereum.org which has a starter tutorial and follow-up token and crowdsale tutorials. There\u2019s also the official Solidity docs. Another good place to start with smart contracts (where I started) is dappsForBeginners, although it might be outdated.The goal of this write-up is to complement those tutorials and introduce some helpful dev tools that make starting out with Ethereum, smart contracts and building DApps (decentralized apps) easier. And to try to explain the overall flow of what\u2019s going on. This is from my (still-noob) perspective and with much help from the cool developers at ConsenSys.Basic ConceptsIt\u2019d be good to know some of these terms:Public Key Cryptography. Alice has a public key and private key. She can use her private key to create a digital signature, and Bob can use Alice\u2019s public key to verify that a signature is really from Alice\u2019s private key, i.e., really from Alice. When you create an Ethereum or Bitcoin wallet the long \u20180xdf\u20265f\u2019 address is a public key and the private key is stored somewhere. A Bitcoin wallet service like Coinbase stores your wallet\u2019s complementary private key for you, or you can store it yourself. If you lose your private key for a wallet with real funds you\u2019ll lose all your funds forever, so it\u2019s good to back up your keys. It hurts to learn this the hard way! I\u2019ve done it.Peer-to-Peer Networking. Like BitTorrent, all Ethereum nodes are peers in a distributed network, there\u2019s no centralized server. [In the future, there\u2019ll be hybrid semi-centralized services for Ethereum as a convenience to users and developers, more on that later.]Blockchain. Like a global ledger or simple database of all transactions, the entire history of all transactions on the network.Ethereum Virtual Machine. So you can write more powerful programs than on top of Bitcoin. It refers to the blockchain, what executes smart contracts, everything.Node. Using this to mean you can run a node and through it read and write to the Ethereum blockchain, i.e., use the Ethereum Virtual Machine. A full node has to download the entire blockchain. Light nodes are possible but in the works.Miner. A node on the network that mines, i.e., works to process blocks on the blockchain. You can see a partial list of live Ethereum miners here: stats.ethdev.com.Proof of Work. Miners compete to do some math problem. The first one to solve the problem (the next block on the Blockchain) wins a reward: some ether. Every node then updates to that new block. Every miner wants to win the next new block so are incentivized to keep up to date and have the one true blockchain everybody else has, so the network always achieves consensus. [Note: Ethereum is planning to move to a Proof of Stake system without miners eventually, but that\u2019s beyond noob scope.]Ether. Or ETH for short. It\u2019s a real digital currency you can buy and use! Here\u2019s a chart from one of several exchanges for it. At the time of writing, 1 ETH is worth about 65 cents in USD.Gas. Running and storing things on Ethereum costs small amounts of ether. Keeps things efficient.DApp. Decentralized App, what applications using smart contracts are called in the Ethereum community. The goal of a DApp is (well, should be) to have a nice UI to your smart contracts plus any extra niceties like IPFS (a neat way to store and serve stuff in a decentralized network, not made by Ethereum but a kindred spirit). While DApps can be run from a central server if that server can talk to an Ethereum node, they can also be run locally on top of any Ethereum node peer. [Take a minute: unlike normal webapps, DApps may not be served from a server. They may use the blockchain to submit transactions and retrieve data (important data!) rather than a central database. Instead of a typical user login system, users may be represented by a wallet addresses and keep any user data local. Many things can be architected differently from the current web.]For another noob angle on some of the concepts above here\u2019s a good read: Just Enough Bitcoin for Ethereum.Ethereum Clients, Smart Contract LanguagesYou don\u2019t have to run an Ethereum node to write and deploy smart contracts. See Browser-based IDEs and APIs below. But if you\u2019re learning, run an Ethereum node, it\u2019s good to get to know as a basic component and not hard to set up.Clients for Running an Ethereum NodeEthereum has several different client implementations (meaning ways to run a node to interact with the Ethereum network) including C++, Go, Python, Java, Haskell, etc. Why? Different strokes for different folks (like how the Haskell one is supposedly mathematically verifiable), and it improves the security and ecosystem of Ethereum to have so many. There\u2019s also a gui-based client in development, AlethZero.At the time of writing, I\u2019ve been using geth, the Go language one (go-ethereum) and on other days a tool called testrpc that uses the Python client, pyethereum. [Update: A new popular tool we use in lieu of testrpc now is ethersim that uses ethereumJS. EthereumJS is a JavaScript client that doesn\u2019t support real blockchain mining, so it\u2019s not a full client like the others listed above, but mining can be simulated for testing and development purposes.] The later examples will involve those tools.[Sidebar: I\u2019ve also tried the C++ one and still use its ethminer component for mining along with geth as the node, so different pieces can work together. Sidebar on Mining: Mining can be fun, sort of like having a houseplant you tend to, and another way to learn about the ecosystem\u2026 even if the price of ETH right now is not worth the local electricity costs of mining, that may change. Especially if everyone starts building cool DApps and Ethereum becomes more popular.]Interactive Console. Once you have a node using one of the clients, you can sync with the blockchain, create wallets and send and receive real ether. One way to do that with geth is through the JavaScript console. Another way is via JSON RPC (remote procedure calls) using a command like cURL for getting stuff via URLs. However the goal of this article is to walk you through a DApp development scenario so let\u2019s just move on. But these tools are good to remember for debugging, configuring nodes and using a wallet via command line.Running a node on a test network. If you install a client like geth and run it on the live network, it will take a while to download the entire blockchain and sync with the network. (You can check that it\u2019s synced by seeing that you have the latest block which is listed at the top of stats.ethdev.com and comparing that number to the block number output by your client node\u2019s logs.)However to run smart contracts on the live network you\u2019d have to cough up some real ether. Instead there are ways to run clients on a local testnet for for free. They won\u2019t download the full blockchain and will create a private instance of the Ethereum network with its own blockchain, so are faster to use for development.testrpc. You can run a test network using geth, or another fast way of getting a testnet running is using testrpc. Testrpc will create a bunch of pre-funded accounts for you that will be listed when it starts up. It\u2019s is also super fast, so easier to develop and test with. You can start with testrpc, then when your contracts are in good shape, move to geth on a testnet, which can be started by specifying a networkid like: geth \u2014 networkid \u201c12345\u201d. Here\u2019s the testrpc repo but I\u2019ll review everything you need to install again in the tutorial part later. [Update: The developer of testrpc is now focusing on ethersim as a replacement for testrpc and I\u2019ll update this tutorial eventually to use ethersim too. You can start using it now in if you\u2019d like. Ethersim is based on ethereumJS and simulates mining for dev purposes and is very fast.]Let\u2019s talk about programming languages next, then we can dive into actually coding stuff.Programming Languages for Smart ContractsJust use Solidity. To write smart contracts there are a few different languages: Solidity, which is like JavaScript and has .sol as a file extension, Serpent, Python-like with extension .se, and a 3rd, LLL, based on Lisp. Serpent was popular a while back but Solidity is the most popular right now and more robust, so just use Solidity. You prefer Python? Use Solidity.solc Compiler. After writing a contract in Solidity, use solc to compile it. It\u2019s from the C++ libraries (different implementations complementing each other again) which can be installed here. [If you don\u2019t want to install solc you can also just use a browser-based compiler like the Solidity real-time compiler or Cosmo, but the programming part later on will assume you have solc installed.][Note: Ethereum\u2019s libraries are undergoing active development and sometimes things get out of sync with new versions. Make sure you have the latest dev version, or a stable version. Ask in one of the Ethereum Gitter\u2019s on Github or forums.ethereum.org what version people are using if things that used to work stop working.]web3.js API. Once a Solidity contract is compiled with solc and sent to the network, you can call it using the Ethereum web3.js JavaScript API and build web apps that interact with contracts. (No need to install this yet, read up on DApp Frameworks below first.)Those are the basic Ethereum tools for coding smart contracts and interacting with them to build DApps.Part II. DApp Frameworks, Tools and WorkflowDApp-building FrameworksYou can do all these steps with just the tools mentioned above, but some helpful devs have created DApp frameworks to make development easier.Truffle and Embark. The one that got me started is Truffle. (Before Truffle I watched a group of smart student interns last summer code stuff for a sleepless hackathon (albeit with terrific results) and shrank back in fear. Then Truffle came along and did a lot of the nitty gritty stuff for you, so you can start writing-compiling-deploying-testing-building DApps right away.) Another very similar framework for building and testing DApps is Embark. Between those two, I\u2019ve only used Truffle, but there are very successful DApp devs in both camps. [Update: Some other good dapp-building frameworks are Dapple and Populus. Dapple also just got a dev grant to be improved.]Meteor. Another stack a lot of DApp devs use include web3.js + Meteor which is a general webapp framework (The ethereum-meteor-wallet repo has a good starter example, and SilentCiero is building a lot of Meteor integrations with web3.js and DApp boilerplates). I\u2019ve downloaded and run cool DApps that do things this way. There\u2019ll be some interesting discussion of all of these tools and best practices for building DApps at Ethereum\u2019s \u00d0\u039eVCON1 conference Nov. 9\u201313th (which will also be streamed or on YouTube).APIs. BlockApps.net is creating a RESTful API for DApps based on a Haskell node they run as a centralized service to save you the trouble of running a local Ethereum node. This departs from the completely decentralized model of DApps but is useful when running an Ethereum node locally isn\u2019t realistic. For example if you want to serve your DApp to users who won\u2019t be running local nodes either and reach a wider audience with just a web browser or mobile device. BlockApps has a command line tool called bloc in the works that can be used after creating a developer account with them.If users have to run a local Ethereum node to use DApps isn\u2019t that a dealbreaker? Like BlockApps there are a range of tools in development so this won\u2019t be. Metamask lets you run Ethereum stuff in a browser without a node, Ethereum\u2019s AlethZero or AlethOne are easier-to-use GUI clients being developed and a LightWallet ConsenSys is building are ways to make interacting with DApps more painless. Light (SPV) nodes and sharding are also in the works or planned. It\u2019s a P2P ecosystem but can involve hybrid architectures.Smart Contract IDEsIDEs.There\u2019s a Mix IDE for writing contracts put out by Ethereum. Haven\u2019t tried it but will soon.Browser-based IDEs. The Solidity real-time compiler and Cosmo are both a fast way to get started compiling your smart contracts right away in a browser. You can even point your local node at these hosted instances by opening up a port (you should trust the site and not have your life savings in ether on your local node for that! See the Cosmo UI for instructions on how to do this with geth). But once your contract is working ok it\u2019s nice to use a framework for adding a UI and packaging it all up as a DApp, which is what Truffle does and will be explained in the programming part later.Another powerful enterprise-y browser IDE is in the works by Ether.Camp. Their IDE comes with a sandbox test network with an auto-generated GUI for testing (instead of writing tests manually as shown in the tutorial later) as well as a sandbox transaction explorer at test.ether.camp. When you\u2019re ready to deploy your contract for semi-real, using their testnet can be a good way to confirm your smart contract\u2019s working as expected on a closer-to-real testbed. The same explorer for the live Ethereum network is at frontier.ether.camp and it shows details about every transaction ever. Ether.Camp\u2019s IDE is invite-only for eager guinea pigs at time of writing but will be launched soon.Sample Contracts and DApps. Search Github for DApp repos and .sol files to see what cool stuff people do and how. A big list of DApps with repos is also here: dapps.ethercasts.com, although some of the list\u2019s details are a little out of date. Ether.fund/contracts also has some examples of Solidity and Serpent contracts people have written, but not sure if these have been tested or verified for correctness. There\u2019ll be a whole day of DApp presentations Thursday, Nov. 12th at \u00d0\u039eVCON1.Workflow for Deploying Smart ContractsThe workflow is:Start an Ethereum node (e.g. geth or testrpc or ethersim)Compile your Solidity smart contract using solc => get back the binaryDeploy your compiled contract to the network. (This step costs ether and signs the contract using your node\u2019s default wallet address, or you can specify another address.) => get back the contract\u2019s blockchain address and ABI (a JSON-ified representation of your compiled contract\u2019s variables, events and methods that you can call)Call stuff in the contract using web3.js\u2019s JavaScript API to interact with it (This step may cost ether depending on the type of invocation.)This workflow is depicted in greater detail in the diagram below:You could build a DApp that provides a UI for users to deploy a contract then use it (Steps 1 or 4). Or your DApp could assume the contract\u2019s already been deployed (common) and start the UI flow from there (Step 6).Part III. The Programming Part, FinallyTesting in TruffleTruffle is great for test-driven development of smart contracts which is highly recommended to maintain sanity when you\u2019re starting to learn how things work. It\u2019s also useful as a way to learn to write promises in JavaScript, i.e., deferred and asynchronous callbacks. Promises are like \u201cdo this, then when that comes back, do that, and when that comes back, do this other thing\u2026and don\u2019t keep us waiting while all that\u2019s going on, ok?\u201d Truffle uses a JS promises framework called Pudding on top of web3.js (so it installs web3.js for you too).Transaction times. Promises are extremely useful for DApps because transactions need to be mined into the blockchain (takes 12\u201315 seconds in Ethereum). Even if they don\u2019t seem to take that long on a test network it may take longer on the live network, or to find out it didn\u2019t happen (e.g. your transaction could have ran out of gas, or was mined into a block that\u2019s been orphaned).So let\u2019s copy a simple smart contract and write a test for it.Using TruffleMake sure you have 1. solc installed and 2. testrpc. (For testrpc you\u2019ll need Python and pip. If you\u2019re new to Python, to install it you may also need to use a virtualenv, a way to keep python libraries separate on a single computer.)Install 3. Truffle (You can do this using NodeJS\u2019s npm: npm install -g truffle, the -g may require sudo). To verify it installed, type truffle list in a console window to list all truffle commands. Then create a new project directory (I\u2019m naming my new directory \u2018conference\u2019), change into it, and do truffle init. This will create this directory structure:Now start a client node in a new console window by running testrpc (or start your geth node):Back in the first truffle console window, now type truffle deploy. This will deploy the Example contract truffle init created as boilerplate. Any errors messages you may have will show up in either the testrpc console window or the truffle window.As you\u2019re developing you can do truffle compile to make sure your contracts compile (using solc you can also run solc YourContract.sol), truffle deploy to compile and deploy it to the network, and truffle test to run your smart contract tests.First Contract, First TestHere\u2019s a Solidity contract for a Conference where registrants can buy tickets, and the organizer can set a maximum quota of attendees as well as provide refunds. All the code presented in this tutorial is in this repo.contract Conference {   address public organizer;  mapping (address => uint) public registrantsPaid;  uint public numRegistrants;  uint public quota;  // so you can log these events  event Deposit(address _from, uint _amount);   event Refund(address _to, uint _amount);  function Conference() { // Constructor    organizer = msg.sender;    quota = 500;    numRegistrants = 0;  }  function buyTicket() public returns (bool success) {     if (numRegistrants >= quota) { return false; } // see footnote     registrantsPaid[msg.sender] = msg.value;     numRegistrants++;     Deposit(msg.sender, msg.value);     return true;  }  function changeQuota(uint newquota) public {    if (msg.sender != organizer) { return; }    quota = newquota;  }  function refundTicket(address recipient, uint amount) public {    if (msg.sender != organizer) { return; }    if (registrantsPaid[recipient] == amount) {      address myAddress = this;      if (myAddress.balance >= amount) {        recipient.send(amount);        registrantsPaid[recipient] = 0;        numRegistrants--;        Refund(recipient, amount);      }     }  }  function destroy() { // so funds not locked in contract forever    if (msg.sender == organizer) {      suicide(organizer); // send funds to organizer    }  }}[Footnote: Currently if the quota is reached, buyTicket() keeps the money in the contract but the buyer won\u2019t get a ticket. So buyTicket() should use \u2018throw\u2019 to revert ticket buyer\u2019s transaction. I\u2019ll update the code and add a test for this soon. (Thanks to F.V. from the comments for catching this.)]Let\u2019s deploy this.[Note: At time of writing I have solc 0.1.3+ (installed via brew), Truffle v.0.2.3, testrpc v.0.1.18 (using a venv) on Mac OS X 10.10.5.]Deploying the ContractAdd a new smart contract. After you\u2019ve done truffle init, or in the existing project directory, copy-paste the Conference contract into contracts/Conference.sol. Then in the file config/app.json, edit the \u201cdeploy\u201d array to include \u201cConference\u201d.Start testrpc. Start testrpc in a separate console window using testrpc if its not already running.Compile or Deploy. Run truffle compile to see if the contract compiles, or just do truffle deploy to compile and deploy at once. This will add the deployed contract\u2019s address and ABI(that JSON-ified version of the compiled contract) to the config directory, which truffle test and truffle build will pull in from later on.Errors? Did that compile? Again, error messages may show up in either the testrpc console or the truffle console.Redeploy after restarting a node! If you stop your testrpc node, remember to redeploy any contracts using truffle deploy before trying to use them again. Each time testrpc restarts it\u2019s a blank slate.Analyzing the ContractLet\u2019s start with the variables at the top of the smart contract:  address public organizer;  mapping (address => uint) public registrantsPaid;  uint public numRegistrants;  uint public quota;address. The first variable is the wallet address of the organizer. This is set when the constructor is called in function Conference(). A lot of contracts will also call this the \u2018owner\u2019.uint. An unsigned integer. Space is important on the blockchain so keep things as small as possible.public. Means it can be called from outside the contract. A private modifier would mean it can only be called from within the contract (or by derived contracts). If you\u2019re trying to call a variable from a web3.js call in a test make sure its public.Mappings or Arrays. Before Solidity added support for arrays, mappings like mapping (address => uint) were used. This could also be written as address registrantsPaid[] but mappings have a smaller footprint. This mapping will be used to store how much each registrant (represented by their wallet address) has paid so they can get refunds later on.More on addresses. Your client node (i.e., testrpc or geth in these examples) can have one or more accounts. In testrpc, on startup an array of 10 \u201cAvailable Addresses\u201d are displayed:The first one, accounts[0], is used by default for calling transactions if a different one is not specified.Organizer address vs. Contract address. Your deployed contract will have its own contract address (different from the organizer\u2019s address) on the blockchain. This address is accessible in a Solidity contract using this, as used inside the refundTicket function in the contract: address myAddress = this;Suicide, a good thing in Solidity. Funds sent to the contract are held in the contract itself. In the destroy function above funds are finally released to the organizer set in the constructor. suicide(organizer); does this. Without it, funds can end up locked in the contract forever (somebody on reddit lost some ether this way), so make sure to include that method if your contract collects funds!If you want to simulate another user or counterparty (e.g. simulate a buyer if you\u2019re a seller), you can use another address from the accounts array. To buy a ticket as a different user, say accounts[1], use it in the from field:conference.buyTicket({  from: accounts[1], value: some_ticket_price_integer });Some Function Calls can be Transactions. Function calls that change the state of the contract (modify values, add records, etc.) are transactions and have implicit sender and value. So inside curly braces { from: __, value: __ } can be specified in a web3.js function call to send funds to a transaction function from a wallet address. On the Solidity end, you can retrieve these values using msg.sender and msg.value, which are implicity in Solidty transaction functions:function buyTicket() public {   ...  registrantsPaid[msg.sender] = msg.value;  ...}Events. These are totally optional. Deposit and Send in the contract are events that can be logged in the Ethereum Virtual Machine logs. They don\u2019t actually do anything, but are good practice for keeping track that a transaction has happened.Okay, let\u2019s write a test for this smart contract to make sure it works.Writing a TestIn your project folder\u2019s test/ directory rename the example.js test file to conference.js. Modify all instances of \u201cExample\u201d to \u201cConference\u201d.contract('Conference', function(accounts) {  it(\"should assert true\", function(done) {    var conference = Conference.at(Conference.deployed_address);    assert.isTrue(true);    done(); // stops tests at this point  });});On running truffle test from the project\u2019s root directory you should see the test pass. In the test above truffle gets the contract\u2019s address on the blockchain from Conference.deployed_address.Let\u2019s write a test to initialize a new Conference and check that the initial variables are being set correctly. Replace the test in conference.js with this one:contract('Conference', function(accounts) {  it(\"Initial conference settings should match\", function(done) {    var conference = Conference.at(Conference.deployed_address);    // same as previous example up to here    Conference.new({ from: accounts[0] }).then(      function(conference) {       conference.quota.call().then(        function(quota) {          assert.equal(quota, 500, \"Quota doesn't match!\");        }).then(function() {          return conference.numRegistrants.call();        }).then( function(num) {          assert.equal(num, 0, \"Registrants should be zero!\");          return conference.organizer.call();        }).then( function(organizer) {          assert.equal(organizer, accounts[0], \"Owner doesn't match!\");          done(); // to stop these tests earlier, move this up        }).catch(done);    }).catch(done);  });});Constructor. Conference.new({ from: accounts[0] }) instantiates a new Conference by calling the contract\u2019s constructor. Since accounts[0] is used by default if no from is specified, so it could have been left out when calling the constructor:Conference.new({ from: accounts[0] }); // same as Conference.new();Promises. That\u2019s what those then and return\u2019s above are. What\u2019s going on above might start to look like a deeply nested function call chain like:conference.numRegistrants.call().then(  function(num) {    assert.equal(num, 0, \"Registrants should be zero!\");     conference.organizer.call().then(      function(organizer) {        assert.equal(organizer, accounts[0], \"Doesn't match!\");          }).then(            function(...))               }).then(                 function(...))                  // Because this would soon get hairy...Promises flatten this to minimize nesting, allow for calls to return asynchronously and help simplify the syntax of writing \u201con success do this\u201d vs. \u201con failure do that\u201d. Web3.js provides callbacks for asynchronous requests (docs) so you don\u2019t have to wait for transactions to complete to do stuff in the front-end. (Truffle uses a promises framework wrapper to web3.js called Pudding, based on the framework Bluebird, which also has advanced promise features.)call. Use this to check the values of variables as in conference.quota.call() or with an argument like call(0) to call a mapping and get index 0. Solidity docs say this is a \u201cmessage call\u201d which is 1. not mined and so 2. doesn\u2019t have to be from an account/wallet (therefore it\u2019s not signed with an account holder\u2019s private keys). Transactions on the other hand, are mined, have to be from an account (i.e., signed), and are recorded on the blockchain. Modifying any value in a contract is a transaction. Just checking a variable value is not. So don\u2019t forget to add call() when calling variables! Crazy things can happen. [Also, if you\u2019re trying to call a variable and having problems make sure its public.] call() can also be used to call functions that are not transactions. If they are meant to be transactions and you try to call() them, they won\u2019t execute as transactions on the blockchain.assert. Standard JS testing assertion (if you type \u2018asserts\u2019 plural by accident truffle will have errors and you won\u2019t know what\u2019s going on), see the Chai docs for other types of assertions but assert.equal is usually all you need.Run truffle test again to make sure that works for you.Writing a Test calling a Contract FunctionLet\u2019s test that the function that changes the quota works. Inside the contract(\u2018Conference\u2019, function(accounts) {\u2026}; body of tests/conference.js stick this additional test:it(\"Should update quota\", function(done) {  var c = Conference.at(Conference.deployed_address);  Conference.new({from: accounts[0] }).then(    function(conference) {    conference.quota.call().then(      function(quota) {        assert.equal(quota, 500, \"Quota doesn't match!\");      }).then(        function() {          return conference.changeQuota(300);      }).then(        function(result) {          console.log(result);           // printed will be a long hex, the transaction hash          return conference.quota.call();      }).then(        function(quota) {          assert.equal(quota, 300, \"New quota is not correct!\");          done();      }).catch(done);  }).catch(done);});The new thing is the line that calls the changeQuota function. The console.log is also useful for debugging to print the result in the truffle console\u2019s output. Add a console.log to see if the execution gets to a certain point. Also make sure the changeQuota function in the Solidity contract is public, or you won\u2019t be able to call it:function changeQuota(uint newquota) public { }Writing a Test for a TransactionLet\u2019s call a function that expects funds from a wallet address.Wei. Ether has a lot of denominations (here\u2019s a helpful converter) and the one normally used in contracts is Wei, the smallest. Web3.js provides convenience methods for converting ether to/from Wei, as in web3.toWei(.05, \u2018ether\u2019). JavaScript has issues with very big numbers so web3.js uses a BigNumber library and they recommend keeping things in Wei in your code until users see it (docs).Account Balances. Web3.js provides a lot more convenience methods here, and another one used in the test below is web3.eth.getBalance(some_address). Remember that funds sent to the contract are in the contract itself until suicide is called.Inside the contract(Conference, function(accounts) {\u2026}; body stick this additional test. In the highlighted method below, the test has a second user (accounts[1]) buy a ticket for ticketPrice. Then it checks that the contract\u2019s balance has increased by the ticketPrice sent and that the second user has been added to the list of registrants.In this test buyTicket is a Transaction:it(\"Should let you buy a ticket\", function(done) {  var c = Conference.at(Conference.deployed_address);  Conference.new({ from: accounts[0] }).then(    function(conference) {    var ticketPrice = web3.toWei(.05, 'ether');    var initialBalance = web3.eth.getBalance(conference.address).toNumber();    conference.buyTicket({ from: accounts[1], value: ticketPrice })      .then(        function() {         var newBalance = web3.eth.getBalance(conference.address).toNumber();         var difference = newBalance - initialBalance;         assert.equal(difference, ticketPrice, \"Difference should be what was sent\");         return conference.numRegistrants.call();      }).then(       function(num) {         assert.equal(num, 1, \"there should be 1 registrant\");          return conference.registrantsPaid.call(accounts[1]);      }).then(function(amount) {         assert.equal(amount.toNumber(), ticketPrice, \"Sender's paid but is not listed\");         done();      }).catch(done);   }).catch(done);});Transactions are Signed. Unlike previous function calls this is a transaction sent funds, so under the hood the second user (accounts[1]) is signing the transaction call buyTicket() with their key. (In geth the user would have to enter a password to approve this transaction or unlock their account before sending funds.)toNumber(). Sometimes results from Solidity returned have to be converted from hex. If it might be a really big number go with web3.toBigNumber(numberOrHexString) because Javascript can mess up big numbers.Writing a Test for a Contract Sending a TransactionFinally, for sanity, let\u2019s make sure the refundTicket method works and can only be activated by the organizer. Here\u2019s a test for it:it(\"Should issue a refund by owner only\", function(done) {  var c = Conference.at(Conference.deployed_address);  Conference.new({ from: accounts[0] }).then(    function(conference) {      var ticketPrice = web3.toWei(.05, 'ether');      var initialBalance = web3.eth.getBalance(conference.address).toNumber();      conference.buyTicket({         from: accounts[1], value: ticketPrice }).then(       function() {         var newBalance = web3.eth.getBalance(conference.address).toNumber();         var difference = newBalance - initialBalance;         assert.equal(difference, ticketPrice, \"Difference should be what was sent\");         // Now try to issue refund as second user - should fail         return conference.refundTicket(accounts[1], ticketPrice, {from: accounts[1]});       }).then(function() {       var balance = web3.eth.getBalance(conference.address).toNumber();       assert.equal(web3.toBigNumber(balance), ticketPrice, \"Balance should be unchanged\");       // Now try to issue refund as organizer/owner - should work       return conference.refundTicket(accounts[1], ticketPrice, {from: accounts[0]});     }).then( function() {       var postRefundBalance = web3.eth.getBalance(conference.address).toNumber();       assert.equal(postRefundBalance, initialBalance, \"Balance should be initial balance\");       done();     }).catch(done);  }).catch(done);});The corresponding Solidity function for the test above is here:function refundTicket(address recipient, uint amount) public returns (bool success) {  if (msg.sender != organizer) { return false; }  if (registrantsPaid[recipient] == amount) {    address myAddress = this;    if (myAddress.balance >= amount) {      recipient.send(amount);      Refund(recipient, amount);      registrantsPaid[recipient] = 0;      numRegistrants--;      return true;    }  }  return false;}Sending ether from a contract. The address myAddress = this; line shows how to get the conference instance\u2019s address, so you can check the balance in the subsequent line (or just use this.balance). Also the recipient.send(amount) method is where the contract sends funds back to recipient.Transactions cannot return results to web3.js. Note this! The refundTicket function returns a bool but this cannot be checked in your test. This method is a transaction (i.e., something that modifies values or send ether), and the result of a transaction to web3.js is a transaction hash (if you printed the result it\u2019ll be a long hex/weird-looking object). So why add a return value to the refundTicket call at all? The return value can be read in Solidity, such as by another contract that calls refundTicket(). So Solidity contracts can read return values from a transaction, but web3.js transaction calls cannot. On the other hand, other contracts can\u2019t use Events (discussed below) which is how you can monitor transactions in web3.js, or check whether a transaction has modified instance variables in a subsequent test promise using call().More on sendTransaction(). When you call a transaction like buyTicket() or refundTicket() using web3.js (which uses web3.eth.sendTransaction), the transaction does not execute right away. Instead the transaction is submitted to the network of miners, and the code does not run until one of those miners scores a block and the transaction is mined into the blockchain. So to verify a transaction you have to wait for it to make it onto the blockchain and then back to your local node. With testrpc this may be seem instantaneous because it\u2019s so fast but on a live network it will be slower.Events. Instead of using return values you can listen for events in web3.js. The smart contract example has these events:event Deposit(address _from, uint _amount);event Refund(address _to, uint _amount);And they are triggered in buyTicket() and refundTicket(). You can see these logged in the output of testrpc when called. To listen for them, you can also add web3.js listeners. At time of writing I haven\u2019t been able to log events inside of truffle tests but have logged them in an app:Conference.new({ from: accounts[0] }).then(  function(conference) {    var event = conference.allEvents().watch({}, '');    // or use conference.Deposit() or .Refund()    event.watch(function (error, result) {       if (error) {        console.log(\"Error: \" + error);      } else {        console.log(\"Event: \" + result.event);    }}); Filters. Instead of checking all events above which may lead to a lot of polling, filters could be used instead. They allow you to start and stop watching for them when your transactions are done. More on filters can be found in the Solidity docs.Overall, using events and filters are cheaper in terms of gas than checking variables so might be useful if you need to verify transactions on the live network.Gas. Up to this point we haven\u2019t needed to discuss gas at all, it usually doesn\u2019t need to be explicitly set with testrpc. As you move to geth and then the live network it will. In your transaction calls you can send gas implicitly inside the {from: __, value: __, gas: __} objects. Web3.js has a call for checking the gas price web3.eth.gasPrice (The result of this is not how much gas you should send with your transaction but the price of 1 unit of gas or step. For how much gas you should send for now its probably best to send something close to the gasLimit so its sure to run. Right now the maximum gas allowed in a block is 3141592. I just use 3000000). The Solidity compiler also has a flag you can call from the command line to get a summary of gas expenditures for your contract: solc \u2014 gas YourContract.sol. Here\u2019s the output for Conference.sol:Creating a DApp UI for your contractThis next section assumes you might be new to some web development practices, just in case.All the truffle tests written above are using JavaScript methods re-usable in a front-end UI. Add your UI to the truffle directory app/. On running truffle build it will be compiled along with contract configuration stuff to the build/ directory. When developing use truffle watch to constantly compile any changes in app/* to build/*. Then reload what\u2019s in the build/ directory in your browser. (truffle serve can also run a webserver for you from build/.)In the app/ directory there\u2019ll be some boilerplate started for you:index.html already loads app.js:So we can just add some code to app.js.app.js has a console.log with \u201cHello from Truffle!\u201d that will show up in your browser\u2019s developer console. Start truffle watch in the project root directory and then open build/index.html in a browser window, and open the browser\u2019s developer console (In a lot of browsers like Chrome, right-click \u00bb Inspect Element and switch to the Console tab below.)In app.js, add a window.onload function that\u2019ll be called when the page loads. This snippet below will confirm web3.js is loaded and show all the accounts available. [Note: your testrpc node should still be running.]window.onload = function() {  var accounts = web3.eth.accounts;  console.log(accounts);}See if that prints an array of accounts to your browser console.Now you can just copy some functions from tests/conference.js (remove the assertions since those are for testing), and output what\u2019s returned to the console to confirm its working. Here\u2019s an example:window.onload = function() {  var accounts = web3.eth.accounts;  var c = Conference.at(Conference.deployed_address);  Conference.new({ from: accounts[0] }).then(    function(conference) {      var ticketPrice = web3.toWei(.05, 'ether');      var initialBalance = web3.eth.getBalance(conference.address).toNumber();      console.log(\"The conference's initial balance is: \" + initialBalance);      conference.buyTicket({ from: accounts[1], value: ticketPrice }).then(        function() {          var newBalance = web3.eth.getBalance(conference.address).toNumber();          console.log(\"After someone bought a ticket it's: \" + newBalance);          return conference.refundTicket(accounts[1], ticketPrice, {from: accounts[0]});}).then(        function() {           var balance = web3.eth.getBalance(conference.address).toNumber();           console.log(\"After a refund it's: \" + balance); }); }); };The code above should output:Now using whatever web tools you prefer, jQuery, ReactJS, Meteor, Ember, AngularJS, etc., you can start building a DApp UI in app/for interacting with an Ethereum smart contract! Below is a super simple jQuery-based UI as an example.Here\u2019s the index.html. And here\u2019s the app.js.Now that I\u2019m interacting with the smart contract in a UI I\u2019m realizing it\u2019d be good to add checks to make sure the same user can\u2019t register twice. Also since this is running on testrpc, which is really fast, it\u2019d be good to switch to geth and make sure the transactions are still responsive to the user. Otherwise the UI should have some loading messages and disabled buttons while the transactions are being processed if they\u2019re going to take a while.Trying geth. If you\u2019re using geth, this line was working for me (geth v1.2.3):geth --rpc --rpcaddr=\"0.0.0.0\" --rpccorsdomain=\"*\" --mine --unlock='0 1' --verbosity=5 --maxpeers=0 --minerthreads='4' --networkid '12345' --genesis test-genesis.jsonThis unlocks two accounts, 0 and 1. Note:1. You may need to enter the passwords to both accounts after the geth console starts up.2. You will also need a test-genesis.json file with both of your accounts well-funded under \u2018alloc\u2019 in the test-genesis.json.)3. Finally, for geth you may need to add gas when calling the constructor:Conference.new({from: accounts[0], gas: 3141592})Then re-do the whole truffle deploy, truffle build thing.Code for this tutorial. Again, all the code presented in this tutorial is in this repo.Auto-generating UIs from contracts. SilentCicero has also built a tool called DApp Builder to auto-generate from a Solidity contract HTML, jQuery and web3.js calls you can modify. This is also starting to be a common theme of some other smart contract dev tools coming out.Ok tutorial over! This last part was a walkthrough of just one set of tools, mainly Truffle and testrpc. Even within ConsenSys, different developers use different tools and frameworks. You might find tools out there that are a better fit for you, and some things may change in a few months (Souptacular keeps an updated gitbook of resources and notes). But this workflow has helped me get started learning to build DApps.(\u2299\u03c9\u2299) wonk wonkThanks to Joseph Chow for a lot of proofreading and suggestions, as well as Christian Lundkvist, Daniel Novy, Jim Berry, Peter Borah and Tim Coulter for corrections and debugging help, and Tim Coulter, Nchinda Nchinda and Mike Goldin for helping with the DApp Front-end Steps diagram.by Eva ShonUX DesignerConsenSys", "responses": ""}, {"title": "", "author_name": "", "link": "https://medium.com/swipecrypto/inaugural-keynote-digix-and-ethereum-singapore-ecb341ff1446?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "Inaugural Keynote: Digix and Ethereum SingaporeSwipeCrypto-EditorFollowOct 14, 2017 \u00b7 2 min readSwipeCrypto is organizing the first Ethereum Indonesia meetup on 24 October 2017, 7 pm local time (GMT +7) at Capitol, Jl. Prajurit KKO Usman dan Harun \u211616, RT.2/RW.1, Senen, Kota Jakarta Pusat, Daerah Khusus Ibukota Jakarta 10410, Jakarta. As one of the local tech-startup, SwipeCrypto is committed to build and grow Indonesia blockchain community in the region.SwipeCrypto is excited to have Digix co-founder and SwipeCrypto advisor, Shaun Djie, to share his knowledge on this meetup. Join us and learn more about the trend, use cases, tips, activities of Ethereum meetup Singapore and many more by RSVP-ing your seat here: https://www.meetup.com/Ethereum-Indonesia/events/244138657/.Topics that will be covered during the talk will include:\u2022 Introduction to Blockchain Technology, Cryptocurrencies\u2022 Introduction of use cases\u2022 Use case 1: Capital raising activities on the blockchain\u2022 Use case 2: Examples of businesses\u2022 Outreach, trends in the ecosystemSpeaker: Shaun Djie \u2014 Co-founder/COO of Digix GlobalShaun is the co-founder and COO of DigixGlobal, an asset tokenization company on Ethereum and the founder of Ethereum Singapore meetup group, the largest of its kind out of Asia. Shaun is also an Advisor to the Indorse and SwipeCrypto project.www.digix.globalDigix tokenizes gold on Ethereum. Digix leverages the Distributed Ledger for its immutability, transparency and auditability by applying it to precious physical assets. Digix has created a range of technologies including The Proof of Asset Protocol (POA) and Digix Gold Tokens (DGX) on Ethereum.Join us and let\u2019s grow this community together \u2014 https://www.meetup.com/Ethereum-Indonesia/events/244138657/", "responses": ""}]